
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_start>:
 8000000:	20009780 	.word	0x20009780
 8000004:	080074f1 	.word	0x080074f1
 8000008:	08018435 	.word	0x08018435
 800000c:	080074a9 	.word	0x080074a9
 8000010:	080074a9 	.word	0x080074a9
 8000014:	080074a9 	.word	0x080074a9
 8000018:	080074a9 	.word	0x080074a9
	...
 800002c:	080066c1 	.word	0x080066c1
 8000030:	080074a9 	.word	0x080074a9
 8000034:	00000000 	.word	0x00000000
 8000038:	0800662d 	.word	0x0800662d
 800003c:	080145a1 	.word	0x080145a1

08000040 <_irq_vector_table>:
 8000040:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 8000050:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 8000060:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 8000070:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 8000080:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 8000090:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 80000a0:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 80000b0:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 80000c0:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 80000d0:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 80000e0:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 80000f0:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 8000100:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 8000110:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 8000120:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 8000130:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 8000140:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 8000150:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 8000160:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 8000170:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 8000180:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 8000190:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 80001a0:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 80001b0:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 80001c0:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 80001d0:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 80001e0:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..
 80001f0:	0800688d 0800688d 0800688d 0800688d     .h...h...h...h..

Disassembly of section text:

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_d2uiz>:
 8000afc:	004a      	lsls	r2, r1, #1
 8000afe:	d211      	bcs.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b04:	d211      	bcs.n	8000b2a <__aeabi_d2uiz+0x2e>
 8000b06:	d50d      	bpl.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b10:	d40e      	bmi.n	8000b30 <__aeabi_d2uiz+0x34>
 8000b12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_d2uiz+0x3a>
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b50:	f000 b9a4 	b.w	8000e9c <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f83c 	bl	8000bd8 <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2lz>:
 8000b6c:	b538      	push	{r3, r4, r5, lr}
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4604      	mov	r4, r0
 8000b74:	460d      	mov	r5, r1
 8000b76:	f7ff ff71 	bl	8000a5c <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x1c>
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	4629      	mov	r1, r5
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4620      	mov	r0, r4
 8000b8a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fce7 	bl	8000578 <__aeabi_dmul>
 8000baa:	f7ff ffa7 	bl	8000afc <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc68 	bl	8000484 <__aeabi_ui2d>
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f7ff fcde 	bl	8000578 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fb20 	bl	8000208 <__aeabi_dsub>
 8000bc8:	f7ff ff98 	bl	8000afc <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_dcmpun>:
 8000ea0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ea4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ea8:	d102      	bne.n	8000eb0 <__aeabi_dcmpun+0x10>
 8000eaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000eae:	d10a      	bne.n	8000ec6 <__aeabi_dcmpun+0x26>
 8000eb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000eb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000eb8:	d102      	bne.n	8000ec0 <__aeabi_dcmpun+0x20>
 8000eba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ebe:	d102      	bne.n	8000ec6 <__aeabi_dcmpun+0x26>
 8000ec0:	f04f 0000 	mov.w	r0, #0
 8000ec4:	4770      	bx	lr
 8000ec6:	f04f 0001 	mov.w	r0, #1
 8000eca:	4770      	bx	lr

08000ecc <strlen>:
 8000ecc:	4603      	mov	r3, r0
 8000ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	d1fb      	bne.n	8000ece <strlen+0x2>
 8000ed6:	1a18      	subs	r0, r3, r0
 8000ed8:	3801      	subs	r0, #1
 8000eda:	4770      	bx	lr
 8000edc:	0000      	movs	r0, r0
	...

08000ee0 <gptp_init_clock_ds>:
	/* Message not propagated up in the stack. */
	return NET_DROP;
}

static void gptp_init_clock_ds(void)
{
 8000ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	current_ds = GPTP_CURRENT_DS();
	parent_ds = GPTP_PARENT_DS();
	prop_ds = GPTP_PROPERTIES_DS();

	/* Initialize global data set. */
	(void)memset(global_ds, 0, sizeof(struct gptp_global_ds));
 8000ee4:	4c3e      	ldr	r4, [pc, #248]	; (8000fe0 <gptp_init_clock_ds+0x100>)
 8000ee6:	f44f 728c 	mov.w	r2, #280	; 0x118
 8000eea:	2100      	movs	r1, #0
 8000eec:	4620      	mov	r0, r4
 8000eee:	f01b fcc4 	bl	801c87a <memset>

	/* Initialize default data set. */

	/* Compute the clock identity from the first port MAC address. */
	gptp_compute_clock_identity(GPTP_PORT_START);
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f007 f8f8 	bl	80080e8 <gptp_compute_clock_identity>

	default_ds->gm_capable = IS_ENABLED(CONFIG_NET_GPTP_GM_CAPABLE);
 8000ef8:	2500      	movs	r5, #0
 8000efa:	f884 512a 	strb.w	r5, [r4, #298]	; 0x12a
	default_ds->clk_quality.clock_class = GPTP_CLASS_OTHER;
 8000efe:	26f8      	movs	r6, #248	; 0xf8
 8000f00:	f884 6118 	strb.w	r6, [r4, #280]	; 0x118
	default_ds->clk_quality.clock_accuracy =
 8000f04:	f04f 0b20 	mov.w	fp, #32
 8000f08:	f884 b119 	strb.w	fp, [r4, #281]	; 0x119
		CONFIG_NET_GPTP_CLOCK_ACCURACY;
	default_ds->clk_quality.offset_scaled_log_var =
 8000f0c:	f244 3a6a 	movw	sl, #17258	; 0x436a
 8000f10:	f8a4 a11a 	strh.w	sl, [r4, #282]	; 0x11a
			default_ds->priority1 = GPTP_PRIORITY1_GM_CAPABLE;
		} else {
			default_ds->priority1 = CONFIG_NET_GPTP_BMCA_PRIORITY1;
		}
	} else {
		default_ds->priority1 = GPTP_PRIORITY1_NON_GM_CAPABLE;
 8000f14:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8000f18:	f884 912c 	strb.w	r9, [r4, #300]	; 0x12c
	}

	default_ds->priority2 = GPTP_PRIORITY2_DEFAULT;
 8000f1c:	f884 612d 	strb.w	r6, [r4, #301]	; 0x12d

	default_ds->cur_utc_offset = 37U; /* Current leap seconds TAI - UTC */
 8000f20:	f04f 0825 	mov.w	r8, #37	; 0x25
 8000f24:	f8a4 8128 	strh.w	r8, [r4, #296]	; 0x128
	default_ds->flags.all = 0U;
 8000f28:	f884 5125 	strb.w	r5, [r4, #293]	; 0x125
	default_ds->flags.octets[1] = GPTP_FLAG_TIME_TRACEABLE;
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
	default_ds->time_source = GPTP_TS_INTERNAL_OSCILLATOR;
 8000f32:	27a0      	movs	r7, #160	; 0xa0
 8000f34:	f884 711c 	strb.w	r7, [r4, #284]	; 0x11c

	/* Initialize current data set. */
	(void)memset(current_ds, 0, sizeof(struct gptp_current_ds));
 8000f38:	2238      	movs	r2, #56	; 0x38
 8000f3a:	4629      	mov	r1, r5
 8000f3c:	f504 7098 	add.w	r0, r4, #304	; 0x130
 8000f40:	f01b fc9b 	bl	801c87a <memset>

	/* Initialize parent data set. */

	/* parent clock id is initialized to default_ds clock id. */
	memcpy(parent_ds->port_id.clk_id, default_ds->clk_id,
 8000f44:	f504 73bc 	add.w	r3, r4, #376	; 0x178
 8000f48:	f8d4 011d 	ldr.w	r0, [r4, #285]	; 0x11d
 8000f4c:	f8d4 1121 	ldr.w	r1, [r4, #289]	; 0x121
 8000f50:	c303      	stmia	r3!, {r0, r1}
	       GPTP_CLOCK_ID_LEN);
	memcpy(parent_ds->gm_id, default_ds->clk_id, GPTP_CLOCK_ID_LEN);
 8000f52:	f504 73b6 	add.w	r3, r4, #364	; 0x16c
 8000f56:	c303      	stmia	r3!, {r0, r1}
	parent_ds->port_id.port_number = 0U;
 8000f58:	f8a4 5180 	strh.w	r5, [r4, #384]	; 0x180

	/* TODO: Check correct value for below field. */
	parent_ds->cumulative_rate_ratio = 0;
 8000f5c:	f8c4 5168 	str.w	r5, [r4, #360]	; 0x168

	parent_ds->gm_clk_quality.clock_class =
 8000f60:	f884 6174 	strb.w	r6, [r4, #372]	; 0x174
		default_ds->clk_quality.clock_class;
	parent_ds->gm_clk_quality.clock_accuracy =
 8000f64:	f884 b175 	strb.w	fp, [r4, #373]	; 0x175
		default_ds->clk_quality.clock_accuracy;
	parent_ds->gm_clk_quality.offset_scaled_log_var =
 8000f68:	f8a4 a176 	strh.w	sl, [r4, #374]	; 0x176
		default_ds->clk_quality.offset_scaled_log_var;
	parent_ds->gm_priority1 = default_ds->priority1;
 8000f6c:	f884 9182 	strb.w	r9, [r4, #386]	; 0x182
	parent_ds->gm_priority2 = default_ds->priority2;
 8000f70:	f884 6183 	strb.w	r6, [r4, #387]	; 0x183

	/* Initialize properties data set. */

	/* TODO: Get accurate values for below. From the GM. */
	prop_ds->cur_utc_offset = 37U; /* Current leap seconds TAI - UTC */
 8000f74:	f8a4 8186 	strh.w	r8, [r4, #390]	; 0x186
	prop_ds->cur_utc_offset_valid = false;
 8000f78:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
	prop_ds->leap59 = false;
	prop_ds->leap61 = false;
	prop_ds->time_traceable = false;
	prop_ds->freq_traceable = false;
 8000f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f80:	f365 1304 	bfi	r3, r5, #4, #1
 8000f84:	f884 3188 	strb.w	r3, [r4, #392]	; 0x188
	prop_ds->time_source = GPTP_TS_INTERNAL_OSCILLATOR;
 8000f88:	f884 7184 	strb.w	r7, [r4, #388]	; 0x184

	/* Set system values. */
	global_ds->sys_flags.all = default_ds->flags.all;
 8000f8c:	f8b4 3125 	ldrh.w	r3, [r4, #293]	; 0x125
 8000f90:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
	global_ds->sys_current_utc_offset = default_ds->cur_utc_offset;
 8000f94:	f8a4 810c 	strh.w	r8, [r4, #268]	; 0x10c
	global_ds->sys_time_source = default_ds->time_source;
 8000f98:	f884 7113 	strb.w	r7, [r4, #275]	; 0x113
	global_ds->clk_master_sync_itv =
		NSEC_PER_SEC * GPTP_POW2(CONFIG_NET_GPTP_INIT_LOG_SYNC_ITV);
 8000f9c:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8000fc8 <gptp_init_clock_ds+0xe8>
 8000fa0:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8000fd0 <gptp_init_clock_ds+0xf0>
 8000fa4:	f000 fea4 	bl	8001cf0 <pow>
 8000fa8:	ec51 0b10 	vmov	r0, r1, d0
 8000fac:	a30a      	add	r3, pc, #40	; (adr r3, 8000fd8 <gptp_init_clock_ds+0xf8>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	f7ff fae1 	bl	8000578 <__aeabi_dmul>
	global_ds->clk_master_sync_itv =
 8000fb6:	f7ff fdf1 	bl	8000b9c <__aeabi_d2ulz>
 8000fba:	e9c4 0100 	strd	r0, r1, [r4]
}
 8000fbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fc2:	bf00      	nop
 8000fc4:	f3af 8000 	nop.w
 8000fc8:	00000000 	.word	0x00000000
 8000fcc:	c0080000 	.word	0xc0080000
 8000fd0:	00000000 	.word	0x00000000
 8000fd4:	40000000 	.word	0x40000000
 8000fd8:	00000000 	.word	0x00000000
 8000fdc:	41cdcd65 	.word	0x41cdcd65
 8000fe0:	20001470 	.word	0x20001470
 8000fe4:	00000000 	.word	0x00000000

08000fe8 <gptp_init_port_ds>:

static void gptp_init_port_ds(int port)
{
 8000fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	port_param_ds = GPTP_PORT_PARAM_DS(port);
#endif

	default_ds = GPTP_DEFAULT_DS();
	port_ds = GPTP_PORT_DS(port);
 8000fec:	1e46      	subs	r6, r0, #1

	/* Initialize port data set. */
	memcpy(port_ds->port_id.clk_id, default_ds->clk_id, GPTP_CLOCK_ID_LEN);
 8000fee:	4d3a      	ldr	r5, [pc, #232]	; (80010d8 <gptp_init_port_ds+0xf0>)
 8000ff0:	0077      	lsls	r7, r6, #1
 8000ff2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000ff6:	015b      	lsls	r3, r3, #5
 8000ff8:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8000ffc:	18ea      	adds	r2, r5, r3
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8000ffe:	f8d5 411d 	ldr.w	r4, [r5, #285]	; 0x11d
 8001002:	f8d5 1121 	ldr.w	r1, [r5, #289]	; 0x121
 8001006:	50ec      	str	r4, [r5, r3]
 8001008:	6051      	str	r1, [r2, #4]
	port_ds->port_id.port_number = port;
 800100a:	eb06 0446 	add.w	r4, r6, r6, lsl #1
 800100e:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8001012:	f8a4 02e0 	strh.w	r0, [r4, #736]	; 0x2e0

	port_ds->ptt_port_enabled = true;
 8001016:	f894 330d 	ldrb.w	r3, [r4, #781]	; 0x30d
	port_ds->prev_ptt_port_enabled = true;
 800101a:	f043 0303 	orr.w	r3, r3, #3
 800101e:	f884 330d 	strb.w	r3, [r4, #781]	; 0x30d

	port_ds->neighbor_prop_delay = 0;
 8001022:	2200      	movs	r2, #0
 8001024:	2300      	movs	r3, #0
 8001026:	e9c4 23b0 	strd	r2, r3, [r4, #704]	; 0x2c0
	port_ds->neighbor_prop_delay_thresh = GPTP_NEIGHBOR_PROP_DELAY_THR;
 800102a:	a329      	add	r3, pc, #164	; (adr r3, 80010d0 <gptp_init_port_ds+0xe8>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	e9c4 23b2 	strd	r2, r3, [r4, #712]	; 0x2c8
	port_ds->delay_asymmetry = 0;
 8001034:	2200      	movs	r2, #0
 8001036:	2300      	movs	r3, #0
 8001038:	e9c4 23ae 	strd	r2, r3, [r4, #696]	; 0x2b8

	port_ds->ini_log_announce_itv = CONFIG_NET_GPTP_INIT_LOG_ANNOUNCE_ITV;
 800103c:	f884 2304 	strb.w	r2, [r4, #772]	; 0x304
	port_ds->cur_log_announce_itv = port_ds->ini_log_announce_itv;
 8001040:	f884 2305 	strb.w	r2, [r4, #773]	; 0x305
	port_ds->announce_receipt_timeout =
 8001044:	2303      	movs	r3, #3
 8001046:	f884 3306 	strb.w	r3, [r4, #774]	; 0x306
		CONFIG_NET_GPTP_ANNOUNCE_RECEIPT_TIMEOUT;

	/* Subtract 1 to divide by 2 the sync interval. */
	port_ds->ini_log_half_sync_itv = CONFIG_NET_GPTP_INIT_LOG_SYNC_ITV - 1;
 800104a:	21fc      	movs	r1, #252	; 0xfc
 800104c:	f884 1307 	strb.w	r1, [r4, #775]	; 0x307
	port_ds->cur_log_half_sync_itv = port_ds->ini_log_half_sync_itv;
 8001050:	f884 1308 	strb.w	r1, [r4, #776]	; 0x308
	port_ds->sync_receipt_timeout = CONFIG_NET_GPTP_SYNC_RECEIPT_TIMEOUT;
 8001054:	f884 3309 	strb.w	r3, [r4, #777]	; 0x309
	port_ds->sync_receipt_timeout_time_itv = 10000000U; /* 10ms */
 8001058:	4820      	ldr	r0, [pc, #128]	; (80010dc <gptp_init_port_ds+0xf4>)
 800105a:	2100      	movs	r1, #0
 800105c:	e9c4 01ac 	strd	r0, r1, [r4, #688]	; 0x2b0

	port_ds->ini_log_pdelay_req_itv =
 8001060:	f884 230a 	strb.w	r2, [r4, #778]	; 0x30a
		CONFIG_NET_GPTP_INIT_LOG_PDELAY_REQ_ITV;
	port_ds->cur_log_pdelay_req_itv = port_ds->ini_log_pdelay_req_itv;
 8001064:	f884 230b 	strb.w	r2, [r4, #779]	; 0x30b
	port_ds->allowed_lost_responses = GPTP_ALLOWED_LOST_RESP;
 8001068:	f8a4 32fa 	strh.w	r3, [r4, #762]	; 0x2fa
	port_ds->version = GPTP_VERSION;
 800106c:	2302      	movs	r3, #2
 800106e:	f884 330c 	strb.w	r3, [r4, #780]	; 0x30c

	gptp_set_time_itv(&port_ds->pdelay_req_itv, 1,
 8001072:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8001076:	0140      	lsls	r0, r0, #5
 8001078:	f500 703a 	add.w	r0, r0, #744	; 0x2e8
 800107c:	4428      	add	r0, r5
 800107e:	2101      	movs	r1, #1
 8001080:	3006      	adds	r0, #6
 8001082:	f007 fae1 	bl	8008648 <gptp_set_time_itv>
			  port_ds->cur_log_pdelay_req_itv);

	gptp_set_time_itv(&port_ds->half_sync_itv, 1,
 8001086:	19b8      	adds	r0, r7, r6
 8001088:	0140      	lsls	r0, r0, #5
 800108a:	f500 7038 	add.w	r0, r0, #736	; 0x2e0
 800108e:	4428      	add	r0, r5
 8001090:	f994 2308 	ldrsb.w	r2, [r4, #776]	; 0x308
 8001094:	2101      	movs	r1, #1
 8001096:	3002      	adds	r0, #2
 8001098:	f007 fad6 	bl	8008648 <gptp_set_time_itv>
			  port_ds->cur_log_half_sync_itv);

	port_ds->compute_neighbor_rate_ratio = true;
 800109c:	f894 330d 	ldrb.w	r3, [r4, #781]	; 0x30d
	port_ds->compute_neighbor_prop_delay = true;
 80010a0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80010a4:	f884 330d 	strb.w	r3, [r4, #781]	; 0x30d
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke0(K_SYSCALL_SYS_RAND32_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sys_rand32_get();
 80010a8:	f013 f9be 	bl	8014428 <z_impl_sys_rand32_get>

	/* Random Sequence Numbers. */
	port_ds->sync_seq_id = (uint16_t)sys_rand32_get();
 80010ac:	f8a4 02fc 	strh.w	r0, [r4, #764]	; 0x2fc
 80010b0:	f013 f9ba 	bl	8014428 <z_impl_sys_rand32_get>
	port_ds->pdelay_req_seq_id = (uint16_t)sys_rand32_get();
 80010b4:	f8a4 02fe 	strh.w	r0, [r4, #766]	; 0x2fe
 80010b8:	f013 f9b6 	bl	8014428 <z_impl_sys_rand32_get>
	port_ds->announce_seq_id = (uint16_t)sys_rand32_get();
 80010bc:	f8a4 0300 	strh.w	r0, [r4, #768]	; 0x300
 80010c0:	f013 f9b2 	bl	8014428 <z_impl_sys_rand32_get>
	port_ds->signaling_seq_id = (uint16_t)sys_rand32_get();
 80010c4:	f8a4 0302 	strh.w	r0, [r4, #770]	; 0x302

#if defined(CONFIG_NET_GPTP_STATISTICS)
	/* Initialize stats data set. */
	(void)memset(port_param_ds, 0, sizeof(struct gptp_port_param_ds));
#endif
}
 80010c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010cc:	f3af 8000 	nop.w
 80010d0:	00000000 	.word	0x00000000
 80010d4:	41c1e1a3 	.word	0x41c1e1a3
 80010d8:	20001470 	.word	0x20001470
 80010dc:	00989680 	.word	0x00989680

080010e0 <gptp_md_compute_prop_time>:
	port_ds->neighbor_rate_ratio = neighbor_rate_ratio;
	port_ds->neighbor_rate_ratio_valid = state->neighbor_rate_ratio_valid;
}

static void gptp_md_compute_prop_time(int port)
{
 80010e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010e4:	b085      	sub	sp, #20
	struct gptp_port_ds *port_ds;
	struct gptp_hdr *hdr;
	struct net_pkt *pkt;
	double prop_time, turn_around;

	state = &GPTP_PORT_STATE(port)->pdelay_req;
 80010e6:	1e44      	subs	r4, r0, #1
	port_ds = GPTP_PORT_DS(port);

	/* Get egress timestamp. */
	pkt = state->tx_pdelay_req_ptr;
 80010e8:	4abd      	ldr	r2, [pc, #756]	; (80013e0 <gptp_md_compute_prop_time+0x300>)
 80010ea:	f44f 735a 	mov.w	r3, #872	; 0x368
 80010ee:	fb03 2304 	mla	r3, r3, r4, r2
 80010f2:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
	if (pkt) {
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 8151 	beq.w	800139e <gptp_md_compute_prop_time+0x2be>
 *
 * @return Number of nanoseconds.
 */
static inline uint64_t gptp_timestamp_to_nsec(struct net_ptp_time *ts)
{
	if (!ts) {
 80010fc:	f113 0f20 	cmn.w	r3, #32
 8001100:	f000 8150 	beq.w	80013a4 <gptp_md_compute_prop_time+0x2c4>
		return 0;
	}

	return (ts->second * NSEC_PER_SEC) + ts->nanosecond;
 8001104:	6a1e      	ldr	r6, [r3, #32]
 8001106:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001108:	4ab6      	ldr	r2, [pc, #728]	; (80013e4 <gptp_md_compute_prop_time+0x304>)
 800110a:	fba6 6702 	umull	r6, r7, r6, r2
 800110e:	fb02 7701 	mla	r7, r2, r1, r7
 8001112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001114:	18f6      	adds	r6, r6, r3
 8001116:	f147 0700 	adc.w	r7, r7, #0
		t1_ns = gptp_timestamp_to_nsec(net_pkt_timestamp(pkt));
	}

	/* Get ingress timestamp. */
	pkt = state->rcvd_pdelay_resp_ptr;
 800111a:	4ab1      	ldr	r2, [pc, #708]	; (80013e0 <gptp_md_compute_prop_time+0x300>)
 800111c:	f44f 735a 	mov.w	r3, #872	; 0x368
 8001120:	fb03 2304 	mla	r3, r3, r4, r2
 8001124:	f8d3 a358 	ldr.w	sl, [r3, #856]	; 0x358
	if (pkt) {
 8001128:	f1ba 0f00 	cmp.w	sl, #0
 800112c:	f000 813d 	beq.w	80013aa <gptp_md_compute_prop_time+0x2ca>
	if (!ts) {
 8001130:	f11a 0f20 	cmn.w	sl, #32
 8001134:	f000 813e 	beq.w	80013b4 <gptp_md_compute_prop_time+0x2d4>
	return (ts->second * NSEC_PER_SEC) + ts->nanosecond;
 8001138:	f8da 1020 	ldr.w	r1, [sl, #32]
 800113c:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 8001140:	4ba8      	ldr	r3, [pc, #672]	; (80013e4 <gptp_md_compute_prop_time+0x304>)
 8001142:	fba1 8903 	umull	r8, r9, r1, r3
 8001146:	fb03 9902 	mla	r9, r3, r2, r9
 800114a:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
 800114e:	eb18 0803 	adds.w	r8, r8, r3
 8001152:	f149 0900 	adc.w	r9, r9, #0
		t4_ns = gptp_timestamp_to_nsec(net_pkt_timestamp(pkt));
	}

	/* Get peer corrected timestamps. */
	pkt = state->rcvd_pdelay_resp_ptr;
	if (pkt) {
 8001156:	f1ba 0f00 	cmp.w	sl, #0
 800115a:	f000 8130 	beq.w	80013be <gptp_md_compute_prop_time+0x2de>
		hdr = GPTP_HDR(pkt);
 800115e:	4650      	mov	r0, sl
 8001160:	f018 f80d 	bl	801917e <gptp_get_hdr>
 8001164:	4605      	mov	r5, r0
 *
 * @return Pointer to the start of the gPTP message inside the packet.
 */
static inline uint8_t *gptp_data(struct net_pkt *pkt)
{
	return (uint8_t *)GPTP_HDR(pkt) + sizeof(struct gptp_hdr);
 8001166:	4650      	mov	r0, sl
 8001168:	f018 f809 	bl	801917e <gptp_get_hdr>
		resp = GPTP_PDELAY_RESP(pkt);

		t2_ns = ((uint64_t)ntohs(resp->req_receipt_ts_secs_high)) << 32;
 800116c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800116e:	ea4f 2a13 	mov.w	sl, r3, lsr #8
 8001172:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
 8001176:	fa1f fa8a 	uxth.w	sl, sl
		t2_ns |= ntohl(resp->req_receipt_ts_secs_low);
 800117a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800117c:	0a1a      	lsrs	r2, r3, #8
 800117e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8001182:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8001186:	0219      	lsls	r1, r3, #8
 8001188:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800118c:	430a      	orrs	r2, r1
 800118e:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
		t2_ns *= NSEC_PER_SEC;
 8001192:	4994      	ldr	r1, [pc, #592]	; (80013e4 <gptp_md_compute_prop_time+0x304>)
 8001194:	fba2 2301 	umull	r2, r3, r2, r1
 8001198:	fb01 330a 	mla	r3, r1, sl, r3
		t2_ns += ntohl(resp->req_receipt_ts_nsecs);
 800119c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800119e:	0a01      	lsrs	r1, r0, #8
 80011a0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80011a4:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80011a8:	ea4f 2c00 	mov.w	ip, r0, lsl #8
 80011ac:	f40c 0c7f 	and.w	ip, ip, #16711680	; 0xff0000
 80011b0:	ea41 010c 	orr.w	r1, r1, ip
 80011b4:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 80011b8:	1852      	adds	r2, r2, r1
 80011ba:	f143 0300 	adc.w	r3, r3, #0
		t2_ns += (ntohll(hdr->correction_field) >> 16);
 80011be:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80011c2:	68e9      	ldr	r1, [r5, #12]
 80011c4:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80011c8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80011cc:	ea4e 6e11 	orr.w	lr, lr, r1, lsr #24
 80011d0:	ea4f 601c 	mov.w	r0, ip, lsr #24
 80011d4:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80011d8:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 80011dc:	ea4e 0e00 	orr.w	lr, lr, r0
 80011e0:	ea4f 201c 	mov.w	r0, ip, lsr #8
 80011e4:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 80011e8:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 80011ec:	ea4e 0e00 	orr.w	lr, lr, r0
 80011f0:	0208      	lsls	r0, r1, #8
 80011f2:	ea40 601c 	orr.w	r0, r0, ip, lsr #24
 80011f6:	ea4f 250c 	mov.w	r5, ip, lsl #8
 80011fa:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 80011fe:	0609      	lsls	r1, r1, #24
 8001200:	ea41 211c 	orr.w	r1, r1, ip, lsr #8
 8001204:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8001208:	4301      	orrs	r1, r0
 800120a:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 800120e:	4329      	orrs	r1, r5
 8001210:	ea41 6c0c 	orr.w	ip, r1, ip, lsl #24
 8001214:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8001218:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800121c:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8001220:	18ad      	adds	r5, r5, r2
 8001222:	eb40 0303 	adc.w	r3, r0, r3
 8001226:	9301      	str	r3, [sp, #4]
	}

	pkt = state->rcvd_pdelay_follow_up_ptr;
 8001228:	4a6d      	ldr	r2, [pc, #436]	; (80013e0 <gptp_md_compute_prop_time+0x300>)
 800122a:	f44f 735a 	mov.w	r3, #872	; 0x368
 800122e:	fb03 2304 	mla	r3, r3, r4, r2
 8001232:	f8d3 a35c 	ldr.w	sl, [r3, #860]	; 0x35c
	if (pkt) {
 8001236:	f1ba 0f00 	cmp.w	sl, #0
 800123a:	f000 80c3 	beq.w	80013c4 <gptp_md_compute_prop_time+0x2e4>
		hdr = GPTP_HDR(pkt);
 800123e:	4650      	mov	r0, sl
 8001240:	f017 ff9d 	bl	801917e <gptp_get_hdr>
 8001244:	4683      	mov	fp, r0
 8001246:	4650      	mov	r0, sl
 8001248:	f017 ff99 	bl	801917e <gptp_get_hdr>
 800124c:	4684      	mov	ip, r0
		fup = GPTP_PDELAY_RESP_FOLLOWUP(pkt);

		t3_ns = ((uint64_t)ntohs(fup->resp_orig_ts_secs_high)) << 32;
 800124e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8001250:	0a18      	lsrs	r0, r3, #8
 8001252:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001256:	b282      	uxth	r2, r0
 8001258:	2300      	movs	r3, #0
 800125a:	e9cd 2302 	strd	r2, r3, [sp, #8]
		t3_ns |= ntohl(fup->resp_orig_ts_secs_low);
 800125e:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8001262:	0a1a      	lsrs	r2, r3, #8
 8001264:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8001268:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 800126c:	0219      	lsls	r1, r3, #8
 800126e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8001272:	430a      	orrs	r2, r1
 8001274:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
		t3_ns *= NSEC_PER_SEC;
 8001278:	495a      	ldr	r1, [pc, #360]	; (80013e4 <gptp_md_compute_prop_time+0x304>)
 800127a:	fba2 2301 	umull	r2, r3, r2, r1
 800127e:	9802      	ldr	r0, [sp, #8]
 8001280:	fb01 3300 	mla	r3, r1, r0, r3
		t3_ns += ntohl(fup->resp_orig_ts_nsecs);
 8001284:	f8dc 0028 	ldr.w	r0, [ip, #40]	; 0x28
 8001288:	0a01      	lsrs	r1, r0, #8
 800128a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 800128e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8001292:	ea4f 2c00 	mov.w	ip, r0, lsl #8
 8001296:	f40c 0c7f 	and.w	ip, ip, #16711680	; 0xff0000
 800129a:	ea41 010c 	orr.w	r1, r1, ip
 800129e:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 80012a2:	1852      	adds	r2, r2, r1
 80012a4:	f143 0300 	adc.w	r3, r3, #0
		t3_ns += (ntohll(hdr->correction_field) >> 16);
 80012a8:	f8db e008 	ldr.w	lr, [fp, #8]
 80012ac:	f8db 100c 	ldr.w	r1, [fp, #12]
 80012b0:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80012b4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80012b8:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80012bc:	ea4f 601e 	mov.w	r0, lr, lsr #24
 80012c0:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80012c4:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 80012c8:	ea4c 0c00 	orr.w	ip, ip, r0
 80012cc:	ea4f 201e 	mov.w	r0, lr, lsr #8
 80012d0:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 80012d4:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 80012d8:	ea4c 0c00 	orr.w	ip, ip, r0
 80012dc:	0208      	lsls	r0, r1, #8
 80012de:	ea40 601e 	orr.w	r0, r0, lr, lsr #24
 80012e2:	ea4f 2a0e 	mov.w	sl, lr, lsl #8
 80012e6:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 80012ea:	0609      	lsls	r1, r1, #24
 80012ec:	ea41 211e 	orr.w	r1, r1, lr, lsr #8
 80012f0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80012f4:	4301      	orrs	r1, r0
 80012f6:	f40a 0a7f 	and.w	sl, sl, #16711680	; 0xff0000
 80012fa:	ea41 010a 	orr.w	r1, r1, sl
 80012fe:	ea41 6e0e 	orr.w	lr, r1, lr, lsl #24
 8001302:	ea4f 4a1c 	mov.w	sl, ip, lsr #16
 8001306:	ea4a 4a01 	orr.w	sl, sl, r1, lsl #16
 800130a:	ea4f 4b1e 	mov.w	fp, lr, lsr #16
 800130e:	eb1a 0a02 	adds.w	sl, sl, r2
 8001312:	eb4b 0b03 	adc.w	fp, fp, r3
	}

	prop_time = t4_ns - t1_ns;
 8001316:	ebb8 0006 	subs.w	r0, r8, r6
 800131a:	eb69 0107 	sbc.w	r1, r9, r7
 800131e:	f7ff f8f5 	bl	800050c <__aeabi_ul2d>
 8001322:	4606      	mov	r6, r0
 8001324:	460f      	mov	r7, r1

	turn_around = t3_ns - t2_ns;
 8001326:	ebba 0005 	subs.w	r0, sl, r5
 800132a:	9b01      	ldr	r3, [sp, #4]
 800132c:	eb6b 0103 	sbc.w	r1, fp, r3
 8001330:	f7ff f8ec 	bl	800050c <__aeabi_ul2d>
 8001334:	4680      	mov	r8, r0
 8001336:	4689      	mov	r9, r1
	 * difference. The check is implemented the same way as how Avnu/gptp
	 * daemon is doing it. This comment is also found in their source
	 * for the magic values "TODO: Are these .998 and 1.002 specifically
	 * defined in the standard?"
	 */
	if (port_ds->neighbor_rate_ratio > .998 &&
 8001338:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800133c:	4a28      	ldr	r2, [pc, #160]	; (80013e0 <gptp_md_compute_prop_time+0x300>)
 800133e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8001342:	e9d3 abb4 	ldrd	sl, fp, [r3, #720]	; 0x2d0
 8001346:	a322      	add	r3, pc, #136	; (adr r3, 80013d0 <gptp_md_compute_prop_time+0x2f0>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	4650      	mov	r0, sl
 800134e:	4659      	mov	r1, fp
 8001350:	f7ff fba2 	bl	8000a98 <__aeabi_dcmpgt>
 8001354:	b178      	cbz	r0, 8001376 <gptp_md_compute_prop_time+0x296>
 8001356:	a320      	add	r3, pc, #128	; (adr r3, 80013d8 <gptp_md_compute_prop_time+0x2f8>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	4650      	mov	r0, sl
 800135e:	4659      	mov	r1, fp
 8001360:	f7ff fb7c 	bl	8000a5c <__aeabi_dcmplt>
 8001364:	b138      	cbz	r0, 8001376 <gptp_md_compute_prop_time+0x296>
	    port_ds->neighbor_rate_ratio < 1.002) {
		turn_around *= port_ds->neighbor_rate_ratio;
 8001366:	4652      	mov	r2, sl
 8001368:	465b      	mov	r3, fp
 800136a:	4640      	mov	r0, r8
 800136c:	4649      	mov	r1, r9
 800136e:	f7ff f903 	bl	8000578 <__aeabi_dmul>
 8001372:	4680      	mov	r8, r0
 8001374:	4689      	mov	r9, r1
	}

	prop_time -= turn_around;
 8001376:	4642      	mov	r2, r8
 8001378:	464b      	mov	r3, r9
 800137a:	4630      	mov	r0, r6
 800137c:	4639      	mov	r1, r7
 800137e:	f7fe ff43 	bl	8000208 <__aeabi_dsub>
	prop_time /= 2;
 8001382:	2200      	movs	r2, #0
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <gptp_md_compute_prop_time+0x308>)
 8001386:	f7ff f8f7 	bl	8000578 <__aeabi_dmul>

	port_ds->neighbor_prop_delay = prop_time;
 800138a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <gptp_md_compute_prop_time+0x300>)
 8001390:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 8001394:	e9c4 01b0 	strd	r0, r1, [r4, #704]	; 0x2c0
}
 8001398:	b005      	add	sp, #20
 800139a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint64_t t1_ns = 0U, t2_ns = 0U, t3_ns = 0U, t4_ns = 0U;
 800139e:	2600      	movs	r6, #0
 80013a0:	2700      	movs	r7, #0
 80013a2:	e6ba      	b.n	800111a <gptp_md_compute_prop_time+0x3a>
		return 0;
 80013a4:	2600      	movs	r6, #0
 80013a6:	2700      	movs	r7, #0
 80013a8:	e6b7      	b.n	800111a <gptp_md_compute_prop_time+0x3a>
 80013aa:	f04f 0800 	mov.w	r8, #0
 80013ae:	f04f 0900 	mov.w	r9, #0
 80013b2:	e6d0      	b.n	8001156 <gptp_md_compute_prop_time+0x76>
 80013b4:	f04f 0800 	mov.w	r8, #0
 80013b8:	f04f 0900 	mov.w	r9, #0
 80013bc:	e6cb      	b.n	8001156 <gptp_md_compute_prop_time+0x76>
 80013be:	2500      	movs	r5, #0
 80013c0:	9501      	str	r5, [sp, #4]
 80013c2:	e731      	b.n	8001228 <gptp_md_compute_prop_time+0x148>
 80013c4:	f04f 0a00 	mov.w	sl, #0
 80013c8:	46d3      	mov	fp, sl
 80013ca:	e7a4      	b.n	8001316 <gptp_md_compute_prop_time+0x236>
 80013cc:	f3af 8000 	nop.w
 80013d0:	b22d0e56 	.word	0xb22d0e56
 80013d4:	3fefef9d 	.word	0x3fefef9d
 80013d8:	26e978d5 	.word	0x26e978d5
 80013dc:	3ff00831 	.word	0x3ff00831
 80013e0:	20001470 	.word	0x20001470
 80013e4:	3b9aca00 	.word	0x3b9aca00
 80013e8:	3fe00000 	.word	0x3fe00000
 80013ec:	00000000 	.word	0x00000000

080013f0 <gptp_handle_sync>:

	return NULL;
}

void gptp_handle_sync(int port, struct net_pkt *pkt)
{
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	b083      	sub	sp, #12
	struct gptp_port_ds *port_ds;
	struct gptp_hdr *hdr;
	uint64_t upstream_sync_itv;
	k_timeout_t duration;

	state = &GPTP_PORT_STATE(port)->sync_rcv;
 80013f4:	1e44      	subs	r4, r0, #1
	port_ds = GPTP_PORT_DS(port);
	hdr = GPTP_HDR(state->rcvd_sync_ptr);
 80013f6:	4a26      	ldr	r2, [pc, #152]	; (8001490 <gptp_handle_sync+0xa0>)
 80013f8:	f44f 735a 	mov.w	r3, #872	; 0x368
 80013fc:	fb03 2304 	mla	r3, r3, r4, r2
 8001400:	f8d3 03b8 	ldr.w	r0, [r3, #952]	; 0x3b8
 8001404:	f017 febb 	bl	801917e <gptp_get_hdr>

	upstream_sync_itv = NSEC_PER_SEC * GPTP_POW2(hdr->log_msg_interval);
 8001408:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
 800140c:	f7ff f84a 	bl	80004a4 <__aeabi_i2d>
 8001410:	ec41 0b11 	vmov	d1, r0, r1
 8001414:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8001480 <gptp_handle_sync+0x90>
 8001418:	f000 fc6a 	bl	8001cf0 <pow>
 800141c:	ec51 0b10 	vmov	r0, r1, d0
 8001420:	a319      	add	r3, pc, #100	; (adr r3, 8001488 <gptp_handle_sync+0x98>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7ff f8a7 	bl	8000578 <__aeabi_dmul>
 800142a:	f7ff fbb7 	bl	8000b9c <__aeabi_d2ulz>

	/* Convert ns to ms. */
	duration = K_MSEC((upstream_sync_itv / 1000000U));
 800142e:	4a19      	ldr	r2, [pc, #100]	; (8001494 <gptp_handle_sync+0xa4>)
 8001430:	2300      	movs	r3, #0
 8001432:	428b      	cmp	r3, r1
 8001434:	bf08      	it	eq
 8001436:	4282      	cmpeq	r2, r0
 8001438:	d21c      	bcs.n	8001474 <gptp_handle_sync+0x84>
 800143a:	4a17      	ldr	r2, [pc, #92]	; (8001498 <gptp_handle_sync+0xa8>)
 800143c:	2300      	movs	r3, #0
 800143e:	f7ff fb7d 	bl	8000b3c <__aeabi_uldivmod>
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
		} else {
			return t * ((uint64_t)to_hz / from_hz);
 8001442:	008d      	lsls	r5, r1, #2
 8001444:	0082      	lsls	r2, r0, #2
 8001446:	ea45 7390 	orr.w	r3, r5, r0, lsr #30
 800144a:	1812      	adds	r2, r2, r0
 800144c:	eb41 0303 	adc.w	r3, r1, r3
 8001450:	1892      	adds	r2, r2, r2
 8001452:	415b      	adcs	r3, r3

	/* Start timeout timer. */
	k_timer_start(&state->follow_up_discard_timer, duration, K_NO_WAIT);
 8001454:	f44f 705a 	mov.w	r0, #872	; 0x368
 8001458:	fb00 f004 	mul.w	r0, r0, r4
 800145c:	f500 7060 	add.w	r0, r0, #896	; 0x380
 8001460:	490b      	ldr	r1, [pc, #44]	; (8001490 <gptp_handle_sync+0xa0>)
 8001462:	4408      	add	r0, r1
		arch_syscall_invoke5(*(uintptr_t *)&timer, parm0.split.lo, parm0.split.hi, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
 8001464:	2400      	movs	r4, #0
 8001466:	2500      	movs	r5, #0
 8001468:	e9cd 4500 	strd	r4, r5, [sp]
 800146c:	f015 fb3e 	bl	8016aec <z_impl_k_timer_start>
}
 8001470:	b003      	add	sp, #12
 8001472:	bdf0      	pop	{r4, r5, r6, r7, pc}
	duration = K_MSEC((upstream_sync_itv / 1000000U));
 8001474:	2000      	movs	r0, #0
 8001476:	4601      	mov	r1, r0
 8001478:	e7e3      	b.n	8001442 <gptp_handle_sync+0x52>
 800147a:	bf00      	nop
 800147c:	f3af 8000 	nop.w
 8001480:	00000000 	.word	0x00000000
 8001484:	40000000 	.word	0x40000000
 8001488:	00000000 	.word	0x00000000
 800148c:	41cdcd65 	.word	0x41cdcd65
 8001490:	20001470 	.word	0x20001470
 8001494:	000f423f 	.word	0x000f423f
 8001498:	000f4240 	.word	0x000f4240
 800149c:	00000000 	.word	0x00000000

080014a0 <gptp_mi_clk_slave_sync_compute>:
		break;
	}
}

static void gptp_mi_clk_slave_sync_compute(void)
{
 80014a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014a4:	ed2d 8b06 	vpush	{d8-d10}
	uint64_t sync_receipt_time;

	state = &GPTP_STATE()->clk_slave_sync;
	offset_state = &GPTP_STATE()->clk_master_sync_offset;
	global_ds = GPTP_GLOBAL_DS();
	port_ds = GPTP_PORT_DS(state->pss_rcv_ptr->local_port_number);
 80014a8:	4c57      	ldr	r4, [pc, #348]	; (8001608 <gptp_mi_clk_slave_sync_compute+0x168>)
 80014aa:	f8d4 51f8 	ldr.w	r5, [r4, #504]	; 0x1f8
 80014ae:	f8b5 3058 	ldrh.w	r3, [r5, #88]	; 0x58
 80014b2:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff

	pss = &state->pss_rcv_ptr->sync_info;

	sync_receipt_time = pss->rate_ratio;
 80014b6:	ed95 ab10 	vldr	d10, [r5, #64]	; 0x40
 80014ba:	ec51 0b1a 	vmov	r0, r1, d10
 80014be:	f7ff fb6d 	bl	8000b9c <__aeabi_d2ulz>
	sync_receipt_time /= port_ds->neighbor_rate_ratio;
 80014c2:	eb09 0649 	add.w	r6, r9, r9, lsl #1
 80014c6:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 80014ca:	ed96 9bb4 	vldr	d9, [r6, #720]	; 0x2d0
 80014ce:	f7ff f81d 	bl	800050c <__aeabi_ul2d>
 80014d2:	ec53 2b19 	vmov	r2, r3, d9
 80014d6:	f7ff f979 	bl	80007cc <__aeabi_ddiv>
 80014da:	f7ff fb5f 	bl	8000b9c <__aeabi_d2ulz>
	sync_receipt_time *= port_ds->neighbor_prop_delay;
 80014de:	ed96 8bb0 	vldr	d8, [r6, #704]	; 0x2c0
 80014e2:	f7ff f813 	bl	800050c <__aeabi_ul2d>
 80014e6:	ec53 2b18 	vmov	r2, r3, d8
 80014ea:	f7ff f845 	bl	8000578 <__aeabi_dmul>
 80014ee:	f7ff fb55 	bl	8000b9c <__aeabi_d2ulz>
	sync_receipt_time += pss->follow_up_correction_field;
 80014f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80014f4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80014f6:	181f      	adds	r7, r3, r0
 80014f8:	eb42 0a01 	adc.w	sl, r2, r1
	sync_receipt_time += port_ds->delay_asymmetry;
 80014fc:	4633      	mov	r3, r6
 80014fe:	f8d6 62b8 	ldr.w	r6, [r6, #696]	; 0x2b8
 8001502:	f8d3 b2bc 	ldr.w	fp, [r3, #700]	; 0x2bc
 8001506:	19f7      	adds	r7, r6, r7
 8001508:	eb4b 0a0a 	adc.w	sl, fp, sl

	global_ds->sync_receipt_time.second = sync_receipt_time / NSEC_PER_SEC;
 800150c:	a33c      	add	r3, pc, #240	; (adr r3, 8001600 <gptp_mi_clk_slave_sync_compute+0x160>)
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	4638      	mov	r0, r7
 8001514:	4651      	mov	r1, sl
 8001516:	f7ff fb11 	bl	8000b3c <__aeabi_uldivmod>
 800151a:	4681      	mov	r9, r0
 800151c:	4688      	mov	r8, r1
 800151e:	6320      	str	r0, [r4, #48]	; 0x30
 8001520:	6361      	str	r1, [r4, #52]	; 0x34
	global_ds->sync_receipt_time.fract_nsecond =
		(sync_receipt_time % NSEC_PER_SEC) * GPTP_POW2_16;
 8001522:	a337      	add	r3, pc, #220	; (adr r3, 8001600 <gptp_mi_clk_slave_sync_compute+0x160>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	4638      	mov	r0, r7
 800152a:	4651      	mov	r1, sl
 800152c:	f7ff fb06 	bl	8000b3c <__aeabi_uldivmod>
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	f7fe ffea 	bl	800050c <__aeabi_ul2d>
 8001538:	2200      	movs	r2, #0
 800153a:	4b34      	ldr	r3, [pc, #208]	; (800160c <gptp_mi_clk_slave_sync_compute+0x16c>)
 800153c:	f7ff f81c 	bl	8000578 <__aeabi_dmul>
	global_ds->sync_receipt_time.fract_nsecond =
 8001540:	f7ff fb2c 	bl	8000b9c <__aeabi_d2ulz>
 8001544:	4682      	mov	sl, r0
 8001546:	460f      	mov	r7, r1
 8001548:	63a0      	str	r0, [r4, #56]	; 0x38
 800154a:	63e1      	str	r1, [r4, #60]	; 0x3c
	global_ds->sync_receipt_time.second += pss->precise_orig_ts.second;
 800154c:	69a8      	ldr	r0, [r5, #24]
 800154e:	69e9      	ldr	r1, [r5, #28]
 8001550:	eb19 0000 	adds.w	r0, r9, r0
 8001554:	eb48 0101 	adc.w	r1, r8, r1
 8001558:	6320      	str	r0, [r4, #48]	; 0x30
 800155a:	6361      	str	r1, [r4, #52]	; 0x34
	global_ds->sync_receipt_time.fract_nsecond +=
		pss->precise_orig_ts.nanosecond * GPTP_POW2_16;
 800155c:	6a28      	ldr	r0, [r5, #32]
 800155e:	f7fe ff91 	bl	8000484 <__aeabi_ui2d>
 8001562:	2200      	movs	r2, #0
 8001564:	4b29      	ldr	r3, [pc, #164]	; (800160c <gptp_mi_clk_slave_sync_compute+0x16c>)
 8001566:	f7ff f807 	bl	8000578 <__aeabi_dmul>
 800156a:	4680      	mov	r8, r0
 800156c:	4689      	mov	r9, r1
	global_ds->sync_receipt_time.fract_nsecond +=
 800156e:	4650      	mov	r0, sl
 8001570:	4639      	mov	r1, r7
 8001572:	f7fe ffcb 	bl	800050c <__aeabi_ul2d>
 8001576:	4642      	mov	r2, r8
 8001578:	464b      	mov	r3, r9
 800157a:	f7fe fe47 	bl	800020c <__adddf3>
 800157e:	f7ff fb0d 	bl	8000b9c <__aeabi_d2ulz>
 8001582:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38

	global_ds->sync_receipt_local_time = port_ds->delay_asymmetry;
	global_ds->sync_receipt_local_time /= pss->rate_ratio;
 8001586:	4630      	mov	r0, r6
 8001588:	4659      	mov	r1, fp
 800158a:	f7fe ffbf 	bl	800050c <__aeabi_ul2d>
 800158e:	ec53 2b1a 	vmov	r2, r3, d10
 8001592:	f7ff f91b 	bl	80007cc <__aeabi_ddiv>
 8001596:	f7ff fb01 	bl	8000b9c <__aeabi_d2ulz>
 800159a:	4681      	mov	r9, r0
 800159c:	4688      	mov	r8, r1
	global_ds->sync_receipt_local_time +=
		(port_ds->neighbor_prop_delay / port_ds->neighbor_rate_ratio);
 800159e:	ec53 2b19 	vmov	r2, r3, d9
 80015a2:	ec51 0b18 	vmov	r0, r1, d8
 80015a6:	f7ff f911 	bl	80007cc <__aeabi_ddiv>
 80015aa:	4606      	mov	r6, r0
 80015ac:	460f      	mov	r7, r1
	global_ds->sync_receipt_local_time +=
 80015ae:	4648      	mov	r0, r9
 80015b0:	4641      	mov	r1, r8
 80015b2:	f7fe ffab 	bl	800050c <__aeabi_ul2d>
 80015b6:	4632      	mov	r2, r6
 80015b8:	463b      	mov	r3, r7
 80015ba:	f7fe fe27 	bl	800020c <__adddf3>
 80015be:	f7ff faed 	bl	8000b9c <__aeabi_d2ulz>
	global_ds->sync_receipt_local_time += pss->upstream_tx_time;
 80015c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80015c4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80015c6:	18c0      	adds	r0, r0, r3
 80015c8:	eb42 0101 	adc.w	r1, r2, r1
 80015cc:	60a0      	str	r0, [r4, #8]
 80015ce:	60e1      	str	r1, [r4, #12]

	global_ds->gm_time_base_indicator = pss->gm_time_base_indicator;
 80015d0:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 80015d4:	f8a4 30fe 	strh.w	r3, [r4, #254]	; 0xfe
	global_ds->last_gm_phase_change.high = pss->last_gm_phase_change.high;
 80015d8:	68ab      	ldr	r3, [r5, #8]
 80015da:	64e3      	str	r3, [r4, #76]	; 0x4c
	global_ds->last_gm_phase_change.low = pss->last_gm_phase_change.low;
 80015dc:	68ea      	ldr	r2, [r5, #12]
 80015de:	692b      	ldr	r3, [r5, #16]
 80015e0:	6522      	str	r2, [r4, #80]	; 0x50
 80015e2:	6563      	str	r3, [r4, #84]	; 0x54
	global_ds->last_gm_freq_change = pss->last_gm_freq_change;
 80015e4:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
 80015e8:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28

	offset_state->rcvd_sync_receipt_time = true;
 80015ec:	2301      	movs	r3, #1
 80015ee:	f884 3202 	strb.w	r3, [r4, #514]	; 0x202
}
 80015f2:	ecbd 8b06 	vpop	{d8-d10}
 80015f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015fa:	bf00      	nop
 80015fc:	f3af 8000 	nop.w
 8001600:	3b9aca00 	.word	0x3b9aca00
 8001604:	00000000 	.word	0x00000000
 8001608:	20001470 	.word	0x20001470
 800160c:	40f00000 	.word	0x40f00000

08001610 <gptp_compute_gm_rate_ratio>:
	}
}
#endif

static void gptp_compute_gm_rate_ratio(void)
{
 8001610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001614:	b08f      	sub	sp, #60	; 0x3c

	state = &GPTP_STATE()->clk_master_sync_receive;
	global_ds = GPTP_GLOBAL_DS();

	/* Get current local and source time */
	memcpy(&src_time_n, &state->rcvd_clk_src_req.src_time,
 8001616:	4c7c      	ldr	r4, [pc, #496]	; (8001808 <gptp_compute_gm_rate_ratio+0x1f8>)
 8001618:	f504 7322 	add.w	r3, r4, #648	; 0x288
 800161c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800161e:	ad0e      	add	r5, sp, #56	; 0x38
 8001620:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
	       sizeof(struct net_ptp_extended_time));

	memcpy(&local_time_n, &global_ds->local_time,
 8001624:	ad07      	add	r5, sp, #28
 8001626:	4623      	mov	r3, r4
 8001628:	f853 0fd6 	ldr.w	r0, [r3, #214]!
 800162c:	6859      	ldr	r1, [r3, #4]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	c507      	stmia	r5!, {r0, r1, r2}
	       sizeof(struct gptp_uscaled_ns));

	if ((src_time_0.second == 0U && src_time_0.fract_nsecond == 0U)
 8001632:	4976      	ldr	r1, [pc, #472]	; (800180c <gptp_compute_gm_rate_ratio+0x1fc>)
 8001634:	680a      	ldr	r2, [r1, #0]
 8001636:	684b      	ldr	r3, [r1, #4]
 8001638:	ea52 0103 	orrs.w	r1, r2, r3
 800163c:	d104      	bne.n	8001648 <gptp_compute_gm_rate_ratio+0x38>
 800163e:	4c73      	ldr	r4, [pc, #460]	; (800180c <gptp_compute_gm_rate_ratio+0x1fc>)
 8001640:	68a0      	ldr	r0, [r4, #8]
 8001642:	68e1      	ldr	r1, [r4, #12]
 8001644:	4301      	orrs	r1, r0
 8001646:	d014      	beq.n	8001672 <gptp_compute_gm_rate_ratio+0x62>
	    || (local_time_0.high == 0U && local_time_0.low == 0U)) {
 8001648:	4971      	ldr	r1, [pc, #452]	; (8001810 <gptp_compute_gm_rate_ratio+0x200>)
 800164a:	680f      	ldr	r7, [r1, #0]
 800164c:	b927      	cbnz	r7, 8001658 <gptp_compute_gm_rate_ratio+0x48>
 800164e:	460c      	mov	r4, r1
 8001650:	6860      	ldr	r0, [r4, #4]
 8001652:	68a1      	ldr	r1, [r4, #8]
 8001654:	4301      	orrs	r1, r0
 8001656:	d00c      	beq.n	8001672 <gptp_compute_gm_rate_ratio+0x62>
	}

	/* Take care of the sign of the result */
	new_gm_rate = 1.0;

	if ((src_time_n.second < src_time_0.second)
 8001658:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800165c:	4299      	cmp	r1, r3
 800165e:	bf08      	it	eq
 8001660:	4290      	cmpeq	r0, r2
 8001662:	d321      	bcc.n	80016a8 <gptp_compute_gm_rate_ratio+0x98>
	    || (src_time_n.second == src_time_0.second
 8001664:	428b      	cmp	r3, r1
 8001666:	bf08      	it	eq
 8001668:	4282      	cmpeq	r2, r0
 800166a:	d013      	beq.n	8001694 <gptp_compute_gm_rate_ratio+0x84>
	new_gm_rate = 1.0;
 800166c:	2400      	movs	r4, #0
 800166e:	4d69      	ldr	r5, [pc, #420]	; (8001814 <gptp_compute_gm_rate_ratio+0x204>)
 8001670:	e02b      	b.n	80016ca <gptp_compute_gm_rate_ratio+0xba>
		memcpy(&src_time_0, &src_time_n,
 8001672:	4c66      	ldr	r4, [pc, #408]	; (800180c <gptp_compute_gm_rate_ratio+0x1fc>)
 8001674:	ab0e      	add	r3, sp, #56	; 0x38
 8001676:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800167a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(&local_time_0, &local_time_n,
 800167e:	4b64      	ldr	r3, [pc, #400]	; (8001810 <gptp_compute_gm_rate_ratio+0x200>)
 8001680:	aa07      	add	r2, sp, #28
 8001682:	ca07      	ldmia	r2, {r0, r1, r2}
 8001684:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		global_ds->gm_rate_ratio = 1.0;
 8001688:	4b5f      	ldr	r3, [pc, #380]	; (8001808 <gptp_compute_gm_rate_ratio+0x1f8>)
 800168a:	2000      	movs	r0, #0
 800168c:	4961      	ldr	r1, [pc, #388]	; (8001814 <gptp_compute_gm_rate_ratio+0x204>)
 800168e:	e9c3 0108 	strd	r0, r1, [r3, #32]
		return;
 8001692:	e092      	b.n	80017ba <gptp_compute_gm_rate_ratio+0x1aa>
		&& src_time_n.fract_nsecond < src_time_0.fract_nsecond)) {
 8001694:	495d      	ldr	r1, [pc, #372]	; (800180c <gptp_compute_gm_rate_ratio+0x1fc>)
 8001696:	688a      	ldr	r2, [r1, #8]
 8001698:	68cb      	ldr	r3, [r1, #12]
 800169a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800169e:	4299      	cmp	r1, r3
 80016a0:	bf08      	it	eq
 80016a2:	4290      	cmpeq	r0, r2
 80016a4:	f080 808c 	bcs.w	80017c0 <gptp_compute_gm_rate_ratio+0x1b0>
		/* Change result sign and swap src_time_n and src_time_0 */
		memcpy(&src_time_t, &src_time_n,
 80016a8:	ad03      	add	r5, sp, #12
 80016aa:	ae0a      	add	r6, sp, #40	; 0x28
 80016ac:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		       sizeof(struct net_ptp_extended_time));
		memcpy(&src_time_n, &src_time_0,
 80016b4:	4c55      	ldr	r4, [pc, #340]	; (800180c <gptp_compute_gm_rate_ratio+0x1fc>)
 80016b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016ba:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		       sizeof(struct net_ptp_extended_time));
		memcpy(&src_time_0, &src_time_t,
 80016be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		       sizeof(struct net_ptp_extended_time));

		new_gm_rate *= -1;
 80016c6:	2400      	movs	r4, #0
 80016c8:	4d53      	ldr	r5, [pc, #332]	; (8001818 <gptp_compute_gm_rate_ratio+0x208>)
	}

	if ((local_time_n.high < local_time_0.high)
 80016ca:	9b07      	ldr	r3, [sp, #28]
 80016cc:	429f      	cmp	r7, r3
 80016ce:	d809      	bhi.n	80016e4 <gptp_compute_gm_rate_ratio+0xd4>
	    || (local_time_n.high == local_time_0.high
 80016d0:	d11a      	bne.n	8001708 <gptp_compute_gm_rate_ratio+0xf8>
		&& local_time_n.low < local_time_0.low)) {
 80016d2:	9808      	ldr	r0, [sp, #32]
 80016d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80016d6:	4e4e      	ldr	r6, [pc, #312]	; (8001810 <gptp_compute_gm_rate_ratio+0x200>)
 80016d8:	6872      	ldr	r2, [r6, #4]
 80016da:	68b3      	ldr	r3, [r6, #8]
 80016dc:	4299      	cmp	r1, r3
 80016de:	bf08      	it	eq
 80016e0:	4290      	cmpeq	r0, r2
 80016e2:	d211      	bcs.n	8001708 <gptp_compute_gm_rate_ratio+0xf8>
		/* Change result sign and swap local_time_n and local_time_0 */
		memcpy(&local_time_t, &local_time_n,
 80016e4:	466e      	mov	r6, sp
 80016e6:	af07      	add	r7, sp, #28
 80016e8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80016ec:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		       sizeof(struct gptp_uscaled_ns));
		memcpy(&local_time_n, &local_time_0,
 80016f0:	4b47      	ldr	r3, [pc, #284]	; (8001810 <gptp_compute_gm_rate_ratio+0x200>)
 80016f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016f6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
		       sizeof(struct gptp_uscaled_ns));
		memcpy(&local_time_0, &local_time_t,
 80016fa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80016fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		       sizeof(struct gptp_uscaled_ns));

		new_gm_rate *= -1;
 8001702:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8001706:	461d      	mov	r5, r3
	}

	/* At this point src_time_n >= src_time_0 */
	src_time_n.second -= src_time_0.second;
 8001708:	f8df c100 	ldr.w	ip, [pc, #256]	; 800180c <gptp_compute_gm_rate_ratio+0x1fc>
 800170c:	f8dc 1000 	ldr.w	r1, [ip]
 8001710:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8001714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001716:	1a5b      	subs	r3, r3, r1
 8001718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800171a:	eb62 0200 	sbc.w	r2, r2, r0
 800171e:	930a      	str	r3, [sp, #40]	; 0x28
 8001720:	920b      	str	r2, [sp, #44]	; 0x2c

	if (src_time_n.fract_nsecond >= src_time_0.fract_nsecond) {
 8001722:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 8001726:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800172a:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800172e:	428f      	cmp	r7, r1
 8001730:	bf08      	it	eq
 8001732:	4286      	cmpeq	r6, r0
 8001734:	d347      	bcc.n	80017c6 <gptp_compute_gm_rate_ratio+0x1b6>
		src_time_n.fract_nsecond -= src_time_0.fract_nsecond;
 8001736:	1a32      	subs	r2, r6, r0
 8001738:	eb67 0301 	sbc.w	r3, r7, r1
 800173c:	920c      	str	r2, [sp, #48]	; 0x30
 800173e:	930d      	str	r3, [sp, #52]	; 0x34
	}

	/* At this point local_time_n >= local_time_0 */
	local_time_n.high -= local_time_0.high;

	if (local_time_n.low >= local_time_0.low) {
 8001740:	9808      	ldr	r0, [sp, #32]
 8001742:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001744:	4e32      	ldr	r6, [pc, #200]	; (8001810 <gptp_compute_gm_rate_ratio+0x200>)
 8001746:	6877      	ldr	r7, [r6, #4]
 8001748:	f8d6 8008 	ldr.w	r8, [r6, #8]
 800174c:	4541      	cmp	r1, r8
 800174e:	bf08      	it	eq
 8001750:	42b8      	cmpeq	r0, r7
 8001752:	d34c      	bcc.n	80017ee <gptp_compute_gm_rate_ratio+0x1de>
		local_time_n.low -= local_time_0.low;
 8001754:	1bc2      	subs	r2, r0, r7
 8001756:	eb61 0308 	sbc.w	r3, r1, r8
 800175a:	9208      	str	r2, [sp, #32]
 800175c:	9309      	str	r3, [sp, #36]	; 0x24
		local_time_n.high -= 1U;
		local_time_n.low = UINT64_MAX - local_time_0.low;
	}

	/* Calculate it in nanoseconds, new_gm_rate is either 1 or -1 here */
	new_gm_rate *= ((src_time_n.second * NSEC_PER_SEC)
 800175e:	4b2f      	ldr	r3, [pc, #188]	; (800181c <gptp_compute_gm_rate_ratio+0x20c>)
 8001760:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8001762:	fba6 6703 	umull	r6, r7, r6, r3
 8001766:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001768:	fb03 7702 	mla	r7, r3, r2, r7
		+ (src_time_n.fract_nsecond / GPTP_POW2_16));
 800176c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001770:	f7fe fecc 	bl	800050c <__aeabi_ul2d>
 8001774:	2200      	movs	r2, #0
 8001776:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <gptp_compute_gm_rate_ratio+0x210>)
 8001778:	f7fe fefe 	bl	8000578 <__aeabi_dmul>
 800177c:	4680      	mov	r8, r0
 800177e:	4689      	mov	r9, r1
 8001780:	4630      	mov	r0, r6
 8001782:	4639      	mov	r1, r7
 8001784:	f7fe fec2 	bl	800050c <__aeabi_ul2d>
 8001788:	4642      	mov	r2, r8
 800178a:	464b      	mov	r3, r9
 800178c:	f7fe fd3e 	bl	800020c <__adddf3>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
	new_gm_rate *= ((src_time_n.second * NSEC_PER_SEC)
 8001794:	4620      	mov	r0, r4
 8001796:	4629      	mov	r1, r5
 8001798:	f7fe feee 	bl	8000578 <__aeabi_dmul>
 800179c:	4604      	mov	r4, r0
 800179e:	460d      	mov	r5, r1

	new_gm_rate /= local_time_n.low;
 80017a0:	9808      	ldr	r0, [sp, #32]
 80017a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80017a4:	f7fe feb2 	bl	800050c <__aeabi_ul2d>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4620      	mov	r0, r4
 80017ae:	4629      	mov	r1, r5
 80017b0:	f7ff f80c 	bl	80007cc <__aeabi_ddiv>

	global_ds->gm_rate_ratio = new_gm_rate;
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <gptp_compute_gm_rate_ratio+0x1f8>)
 80017b6:	e9c3 0108 	strd	r0, r1, [r3, #32]
}
 80017ba:	b00f      	add	sp, #60	; 0x3c
 80017bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	new_gm_rate = 1.0;
 80017c0:	2400      	movs	r4, #0
 80017c2:	4d14      	ldr	r5, [pc, #80]	; (8001814 <gptp_compute_gm_rate_ratio+0x204>)
 80017c4:	e781      	b.n	80016ca <gptp_compute_gm_rate_ratio+0xba>
		src_time_n.second -= 1U;
 80017c6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80017ca:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
 80017ce:	930a      	str	r3, [sp, #40]	; 0x28
 80017d0:	920b      	str	r2, [sp, #44]	; 0x2c
			- src_time_0.fract_nsecond;
 80017d2:	f7fe fe9b 	bl	800050c <__aeabi_ul2d>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	a109      	add	r1, pc, #36	; (adr r1, 8001800 <gptp_compute_gm_rate_ratio+0x1f0>)
 80017dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017e0:	f7fe fd12 	bl	8000208 <__aeabi_dsub>
		src_time_n.fract_nsecond = (NSEC_PER_SEC * GPTP_POW2_16)
 80017e4:	f7ff f9da 	bl	8000b9c <__aeabi_d2ulz>
 80017e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80017ec:	e7a8      	b.n	8001740 <gptp_compute_gm_rate_ratio+0x130>
		local_time_n.low = UINT64_MAX - local_time_0.low;
 80017ee:	43fa      	mvns	r2, r7
 80017f0:	ea6f 0308 	mvn.w	r3, r8
 80017f4:	9208      	str	r2, [sp, #32]
 80017f6:	9309      	str	r3, [sp, #36]	; 0x24
 80017f8:	e7b1      	b.n	800175e <gptp_compute_gm_rate_ratio+0x14e>
 80017fa:	bf00      	nop
 80017fc:	f3af 8000 	nop.w
 8001800:	00000000 	.word	0x00000000
 8001804:	42cdcd65 	.word	0x42cdcd65
 8001808:	20001470 	.word	0x20001470
 800180c:	20003188 	.word	0x20003188
 8001810:	2000317c 	.word	0x2000317c
 8001814:	3ff00000 	.word	0x3ff00000
 8001818:	bff00000 	.word	0xbff00000
 800181c:	3b9aca00 	.word	0x3b9aca00
 8001820:	3ef00000 	.word	0x3ef00000
 8001824:	00000000 	.word	0x00000000

08001828 <gptp_update_local_port_clock>:
{
 8001828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800182c:	b08b      	sub	sp, #44	; 0x2c
	port = state->pss_rcv_ptr->local_port_number;
 800182e:	4b8e      	ldr	r3, [pc, #568]	; (8001a68 <gptp_update_local_port_clock+0x240>)
 8001830:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 8001834:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
	port_ds = GPTP_PORT_DS(port);
 8001838:	3c01      	subs	r4, #1
	if (!port_ds->neighbor_rate_ratio_valid) {
 800183a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800183e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8001842:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 8001846:	f3c3 1280 	ubfx	r2, r3, #6, #1
 800184a:	9201      	str	r2, [sp, #4]
 800184c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001850:	d102      	bne.n	8001858 <gptp_update_local_port_clock+0x30>
}
 8001852:	b00b      	add	sp, #44	; 0x2c
 8001854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	port_ds->neighbor_rate_ratio_valid = false;
 8001858:	4d83      	ldr	r5, [pc, #524]	; (8001a68 <gptp_update_local_port_clock+0x240>)
 800185a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800185e:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 8001862:	f893 230d 	ldrb.w	r2, [r3, #781]	; 0x30d
 8001866:	f36f 1286 	bfc	r2, #6, #1
 800186a:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
	second_diff = global_ds->sync_receipt_time.second -
 800186e:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8001872:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		(global_ds->sync_receipt_local_time / NSEC_PER_SEC);
 8001876:	e9d5 6702 	ldrd	r6, r7, [r5, #8]
 800187a:	a379      	add	r3, pc, #484	; (adr r3, 8001a60 <gptp_update_local_port_clock+0x238>)
 800187c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001880:	4630      	mov	r0, r6
 8001882:	4639      	mov	r1, r7
 8001884:	f7ff f95a 	bl	8000b3c <__aeabi_uldivmod>
	second_diff = global_ds->sync_receipt_time.second -
 8001888:	ebb8 0a00 	subs.w	sl, r8, r0
 800188c:	eb69 0b01 	sbc.w	fp, r9, r1
 8001890:	46d0      	mov	r8, sl
 8001892:	46d9      	mov	r9, fp
		(global_ds->sync_receipt_time.fract_nsecond / GPTP_POW2_16) -
 8001894:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	; 0x38
 8001898:	f7fe fe38 	bl	800050c <__aeabi_ul2d>
 800189c:	2200      	movs	r2, #0
 800189e:	4b73      	ldr	r3, [pc, #460]	; (8001a6c <gptp_update_local_port_clock+0x244>)
 80018a0:	f7fe fe6a 	bl	8000578 <__aeabi_dmul>
 80018a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
		(global_ds->sync_receipt_local_time % NSEC_PER_SEC);
 80018a8:	a36d      	add	r3, pc, #436	; (adr r3, 8001a60 <gptp_update_local_port_clock+0x238>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	4630      	mov	r0, r6
 80018b0:	4639      	mov	r1, r7
 80018b2:	f7ff f943 	bl	8000b3c <__aeabi_uldivmod>
		(global_ds->sync_receipt_time.fract_nsecond / GPTP_POW2_16) -
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7fe fe27 	bl	800050c <__aeabi_ul2d>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80018c6:	f7fe fc9f 	bl	8000208 <__aeabi_dsub>
	nanosecond_diff =
 80018ca:	f7ff f94f 	bl	8000b6c <__aeabi_d2lz>
 80018ce:	4606      	mov	r6, r0
 80018d0:	460f      	mov	r7, r1
	clk = net_eth_get_ptp_clock(GPTP_PORT_IFACE(port));
 80018d2:	f504 73db 	add.w	r3, r4, #438	; 0x1b6
 80018d6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80018da:	6868      	ldr	r0, [r5, #4]
 80018dc:	f006 f84c 	bl	8007978 <net_eth_get_ptp_clock>
	if (!clk) {
 80018e0:	4605      	mov	r5, r0
 80018e2:	2800      	cmp	r0, #0
 80018e4:	d0b5      	beq.n	8001852 <gptp_update_local_port_clock+0x2a>
	if (second_diff > 0 && nanosecond_diff < 0) {
 80018e6:	f1ba 0f01 	cmp.w	sl, #1
 80018ea:	f17b 0300 	sbcs.w	r3, fp, #0
 80018ee:	db03      	blt.n	80018f8 <gptp_update_local_port_clock+0xd0>
 80018f0:	2e00      	cmp	r6, #0
 80018f2:	f177 0300 	sbcs.w	r3, r7, #0
 80018f6:	db5f      	blt.n	80019b8 <gptp_update_local_port_clock+0x190>
	if (second_diff < 0 && nanosecond_diff > 0) {
 80018f8:	f1b8 0f00 	cmp.w	r8, #0
 80018fc:	f179 0300 	sbcs.w	r3, r9, #0
 8001900:	db65      	blt.n	80019ce <gptp_update_local_port_clock+0x1a6>
	ptp_clock_rate_adjust(clk, port_ds->neighbor_rate_ratio);
 8001902:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001906:	4b58      	ldr	r3, [pc, #352]	; (8001a68 <gptp_update_local_port_clock+0x240>)
 8001908:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 *
 * @return 0 if ok, <0 if error
 */
static inline int ptp_clock_rate_adjust(const struct device *dev, double rate)
{
	const struct ptp_clock_driver_api *api =
 800190c:	68ab      	ldr	r3, [r5, #8]
		(const struct ptp_clock_driver_api *)dev->api;

	return api->rate_adjust(dev, rate);
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	ed94 0bb4 	vldr	d0, [r4, #720]	; 0x2d0
 8001914:	4628      	mov	r0, r5
 8001916:	4798      	blx	r3
	if (second_diff || (second_diff == 0 &&
 8001918:	ea58 0309 	orrs.w	r3, r8, r9
 800191c:	d111      	bne.n	8001942 <gptp_update_local_port_clock+0x11a>
			    (nanosecond_diff < -5000 ||
 800191e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001922:	18f3      	adds	r3, r6, r3
 8001924:	9304      	str	r3, [sp, #16]
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	eb47 0303 	adc.w	r3, r7, r3
 800192e:	9305      	str	r3, [sp, #20]
	if (second_diff || (second_diff == 0 &&
 8001930:	f242 7210 	movw	r2, #10000	; 0x2710
 8001934:	2300      	movs	r3, #0
 8001936:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800193a:	428b      	cmp	r3, r1
 800193c:	bf08      	it	eq
 800193e:	4282      	cmpeq	r2, r0
 8001940:	d277      	bcs.n	8001a32 <gptp_update_local_port_clock+0x20a>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8001942:	f04f 0304 	mov.w	r3, #4
 8001946:	f3ef 8411 	mrs	r4, BASEPRI
 800194a:	f383 8812 	msr	BASEPRI_MAX, r3
 800194e:	f3bf 8f6f 	isb	sy
	const struct ptp_clock_driver_api *api =
 8001952:	68ab      	ldr	r3, [r5, #8]
	return api->get(dev, tm);
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	a906      	add	r1, sp, #24
 8001958:	4628      	mov	r0, r5
 800195a:	4798      	blx	r3
		if (second_diff < 0 && tm.second < -second_diff) {
 800195c:	f1b8 0f00 	cmp.w	r8, #0
 8001960:	f179 0300 	sbcs.w	r3, r9, #0
 8001964:	db42      	blt.n	80019ec <gptp_update_local_port_clock+0x1c4>
		tm.second += second_diff;
 8001966:	9b06      	ldr	r3, [sp, #24]
 8001968:	eb18 0c03 	adds.w	ip, r8, r3
 800196c:	9b07      	ldr	r3, [sp, #28]
 800196e:	eb49 0e03 	adc.w	lr, r9, r3
 8001972:	f8cd c018 	str.w	ip, [sp, #24]
 8001976:	f8cd e01c 	str.w	lr, [sp, #28]
		if (nanosecond_diff < 0 &&
 800197a:	2e00      	cmp	r6, #0
 800197c:	f177 0300 	sbcs.w	r3, r7, #0
 8001980:	db3f      	blt.n	8001a02 <gptp_update_local_port_clock+0x1da>
		bool underflow = false;
 8001982:	2300      	movs	r3, #0
 8001984:	9301      	str	r3, [sp, #4]
		tm.nanosecond += nanosecond_diff;
 8001986:	9b08      	ldr	r3, [sp, #32]
 8001988:	441e      	add	r6, r3
 800198a:	9608      	str	r6, [sp, #32]
		if (underflow) {
 800198c:	9b01      	ldr	r3, [sp, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d042      	beq.n	8001a18 <gptp_update_local_port_clock+0x1f0>
			tm.second--;
 8001992:	f11c 32ff 	adds.w	r2, ip, #4294967295	; 0xffffffff
 8001996:	f14e 33ff 	adc.w	r3, lr, #4294967295	; 0xffffffff
 800199a:	9206      	str	r2, [sp, #24]
 800199c:	9307      	str	r3, [sp, #28]
			tm.nanosecond += NSEC_PER_SEC;
 800199e:	4b34      	ldr	r3, [pc, #208]	; (8001a70 <gptp_update_local_port_clock+0x248>)
 80019a0:	4433      	add	r3, r6
 80019a2:	9308      	str	r3, [sp, #32]
	const struct ptp_clock_driver_api *api =
 80019a4:	68ab      	ldr	r3, [r5, #8]
	return api->set(dev, tm);
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	a906      	add	r1, sp, #24
 80019aa:	4628      	mov	r0, r5
 80019ac:	4798      	blx	r3
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 80019ae:	f384 8811 	msr	BASEPRI, r4
 80019b2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
 80019b6:	e74c      	b.n	8001852 <gptp_update_local_port_clock+0x2a>
		second_diff--;
 80019b8:	f11a 38ff 	adds.w	r8, sl, #4294967295	; 0xffffffff
 80019bc:	f14b 39ff 	adc.w	r9, fp, #4294967295	; 0xffffffff
		nanosecond_diff = NSEC_PER_SEC + nanosecond_diff;
 80019c0:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <gptp_update_local_port_clock+0x248>)
 80019c2:	18f6      	adds	r6, r6, r3
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	eb43 0707 	adc.w	r7, r3, r7
 80019cc:	e794      	b.n	80018f8 <gptp_update_local_port_clock+0xd0>
	if (second_diff < 0 && nanosecond_diff > 0) {
 80019ce:	2e01      	cmp	r6, #1
 80019d0:	f177 0300 	sbcs.w	r3, r7, #0
 80019d4:	db95      	blt.n	8001902 <gptp_update_local_port_clock+0xda>
		second_diff++;
 80019d6:	f118 0801 	adds.w	r8, r8, #1
 80019da:	f149 0900 	adc.w	r9, r9, #0
		nanosecond_diff = -NSEC_PER_SEC + nanosecond_diff;
 80019de:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <gptp_update_local_port_clock+0x24c>)
 80019e0:	18f6      	adds	r6, r6, r3
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	eb43 0707 	adc.w	r7, r3, r7
 80019ea:	e78a      	b.n	8001902 <gptp_update_local_port_clock+0xda>
		if (second_diff < 0 && tm.second < -second_diff) {
 80019ec:	f1d8 0000 	rsbs	r0, r8, #0
 80019f0:	eb69 0149 	sbc.w	r1, r9, r9, lsl #1
 80019f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80019f8:	428b      	cmp	r3, r1
 80019fa:	bf08      	it	eq
 80019fc:	4282      	cmpeq	r2, r0
 80019fe:	d2b2      	bcs.n	8001966 <gptp_update_local_port_clock+0x13e>
 8001a00:	e7d5      	b.n	80019ae <gptp_update_local_port_clock+0x186>
		    tm.nanosecond < -nanosecond_diff) {
 8001a02:	9a08      	ldr	r2, [sp, #32]
 8001a04:	2300      	movs	r3, #0
 8001a06:	4270      	negs	r0, r6
 8001a08:	eb67 0147 	sbc.w	r1, r7, r7, lsl #1
		if (nanosecond_diff < 0 &&
 8001a0c:	4282      	cmp	r2, r0
 8001a0e:	418b      	sbcs	r3, r1
 8001a10:	dbb9      	blt.n	8001986 <gptp_update_local_port_clock+0x15e>
		bool underflow = false;
 8001a12:	2300      	movs	r3, #0
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	e7b6      	b.n	8001986 <gptp_update_local_port_clock+0x15e>
		} else if (tm.nanosecond >= NSEC_PER_SEC) {
 8001a18:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <gptp_update_local_port_clock+0x250>)
 8001a1a:	429e      	cmp	r6, r3
 8001a1c:	d9c2      	bls.n	80019a4 <gptp_update_local_port_clock+0x17c>
			tm.second++;
 8001a1e:	f11c 0301 	adds.w	r3, ip, #1
 8001a22:	f14e 0200 	adc.w	r2, lr, #0
 8001a26:	9306      	str	r3, [sp, #24]
 8001a28:	9207      	str	r2, [sp, #28]
			tm.nanosecond -= NSEC_PER_SEC;
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <gptp_update_local_port_clock+0x24c>)
 8001a2c:	4433      	add	r3, r6
 8001a2e:	9308      	str	r3, [sp, #32]
 8001a30:	e7b8      	b.n	80019a4 <gptp_update_local_port_clock+0x17c>
		if (nanosecond_diff < -200) {
 8001a32:	f06f 02c7 	mvn.w	r2, #199	; 0xc7
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a3a:	4296      	cmp	r6, r2
 8001a3c:	eb77 0303 	sbcs.w	r3, r7, r3
 8001a40:	db05      	blt.n	8001a4e <gptp_update_local_port_clock+0x226>
		} else if (nanosecond_diff > 200) {
 8001a42:	2ec9      	cmp	r6, #201	; 0xc9
 8001a44:	f177 0300 	sbcs.w	r3, r7, #0
 8001a48:	db03      	blt.n	8001a52 <gptp_update_local_port_clock+0x22a>
			nanosecond_diff = 200;
 8001a4a:	26c8      	movs	r6, #200	; 0xc8
 8001a4c:	e001      	b.n	8001a52 <gptp_update_local_port_clock+0x22a>
			nanosecond_diff = -200;
 8001a4e:	f06f 06c7 	mvn.w	r6, #199	; 0xc7
	const struct ptp_clock_driver_api *api =
 8001a52:	68ab      	ldr	r3, [r5, #8]
	return api->adjust(dev, increment);
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	4631      	mov	r1, r6
 8001a58:	4628      	mov	r0, r5
 8001a5a:	4798      	blx	r3
 8001a5c:	e6f9      	b.n	8001852 <gptp_update_local_port_clock+0x2a>
 8001a5e:	bf00      	nop
 8001a60:	3b9aca00 	.word	0x3b9aca00
 8001a64:	00000000 	.word	0x00000000
 8001a68:	20001470 	.word	0x20001470
 8001a6c:	3ef00000 	.word	0x3ef00000
 8001a70:	3b9aca00 	.word	0x3b9aca00
 8001a74:	c4653600 	.word	0xc4653600
 8001a78:	3b9ac9ff 	.word	0x3b9ac9ff
 8001a7c:	00000000 	.word	0x00000000

08001a80 <gptp_mi_pss_rcv_compute>:
{
 8001a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a84:	ed2d 8b02 	vpush	{d8}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	4607      	mov	r7, r0
	state = &GPTP_PORT_STATE(port)->pss_rcv;
 8001a8c:	1e44      	subs	r4, r0, #1
	sync_rcv = &state->sync_rcv;
 8001a8e:	f44f 765a 	mov.w	r6, #872	; 0x368
 8001a92:	fb06 f604 	mul.w	r6, r6, r4
 8001a96:	f506 7976 	add.w	r9, r6, #984	; 0x3d8
 8001a9a:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8001b68 <gptp_mi_pss_rcv_compute+0xe8>
 8001a9e:	44c1      	add	r9, r8
	state->rate_ratio = sync_rcv->rate_ratio;
 8001aa0:	eb08 0506 	add.w	r5, r8, r6
 8001aa4:	f505 6382 	add.w	r3, r5, #1040	; 0x410
 8001aa8:	ed93 8b00 	vldr	d8, [r3]
	state->rate_ratio += (port_ds->neighbor_rate_ratio - 1.0);
 8001aac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001ab0:	eb08 1444 	add.w	r4, r8, r4, lsl #5
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <gptp_mi_pss_rcv_compute+0xe0>)
 8001ab8:	e9d4 01b4 	ldrd	r0, r1, [r4, #720]	; 0x2d0
 8001abc:	f7fe fba4 	bl	8000208 <__aeabi_dsub>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	f505 6a98 	add.w	sl, r5, #1216	; 0x4c0
 8001ac8:	ec51 0b18 	vmov	r0, r1, d8
 8001acc:	f7fe fb9e 	bl	800020c <__adddf3>
 8001ad0:	e9ca 0100 	strd	r0, r1, [sl]
	port_ds->sync_receipt_timeout_time_itv = port_ds->sync_receipt_timeout;
 8001ad4:	f894 1309 	ldrb.w	r1, [r4, #777]	; 0x309
	port_ds->sync_receipt_timeout_time_itv *= NSEC_PER_SEC;
 8001ad8:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <gptp_mi_pss_rcv_compute+0xe4>)
 8001ada:	fba1 2303 	umull	r2, r3, r1, r3
 8001ade:	e9c4 23ac 	strd	r2, r3, [r4, #688]	; 0x2b0
		GPTP_POW2(sync_rcv->log_msg_interval);
 8001ae2:	f995 0424 	ldrsb.w	r0, [r5, #1060]	; 0x424
 8001ae6:	f7fe fcdd 	bl	80004a4 <__aeabi_i2d>
 8001aea:	ec41 0b11 	vmov	d1, r0, r1
 8001aee:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8001b58 <gptp_mi_pss_rcv_compute+0xd8>
 8001af2:	f000 f8fd 	bl	8001cf0 <pow>
 8001af6:	ed8d 0b00 	vstr	d0, [sp]
	port_ds->sync_receipt_timeout_time_itv *=
 8001afa:	e9d4 01ac 	ldrd	r0, r1, [r4, #688]	; 0x2b0
 8001afe:	f7fe fd05 	bl	800050c <__aeabi_ul2d>
 8001b02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001b06:	f7fe fd37 	bl	8000578 <__aeabi_dmul>
 8001b0a:	f7ff f847 	bl	8000b9c <__aeabi_d2ulz>
 8001b0e:	e9c4 01ac 	strd	r0, r1, [r4, #688]	; 0x2b0
	pss->local_port_number = port;
 8001b12:	f8a5 7480 	strh.w	r7, [r5, #1152]	; 0x480
	memcpy(&pss->sync_info, sync_rcv, sizeof(struct gptp_md_sync_info));
 8001b16:	f506 6086 	add.w	r0, r6, #1072	; 0x430
 8001b1a:	2250      	movs	r2, #80	; 0x50
 8001b1c:	4649      	mov	r1, r9
 8001b1e:	4440      	add	r0, r8
 8001b20:	f01a fe8a 	bl	801c838 <memcpy>
	pss->sync_receipt_timeout_time = gptp_get_current_time_nanosecond(port);
 8001b24:	4638      	mov	r0, r7
 8001b26:	f00a f9af 	bl	800be88 <gptp_get_current_time_nanosecond>
		port_ds->sync_receipt_timeout_time_itv;
 8001b2a:	f8d4 22b0 	ldr.w	r2, [r4, #688]	; 0x2b0
 8001b2e:	f8d4 42b4 	ldr.w	r4, [r4, #692]	; 0x2b4
	pss->sync_receipt_timeout_time +=
 8001b32:	1880      	adds	r0, r0, r2
 8001b34:	eb44 0101 	adc.w	r1, r4, r1
 8001b38:	f8c5 0428 	str.w	r0, [r5, #1064]	; 0x428
 8001b3c:	f8c5 142c 	str.w	r1, [r5, #1068]	; 0x42c
	pss->sync_info.rate_ratio = state->rate_ratio;
 8001b40:	e9da 2300 	ldrd	r2, r3, [sl]
 8001b44:	f505 658d 	add.w	r5, r5, #1128	; 0x468
 8001b48:	e9c5 2300 	strd	r2, r3, [r5]
}
 8001b4c:	b002      	add	sp, #8
 8001b4e:	ecbd 8b02 	vpop	{d8}
 8001b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b56:	bf00      	nop
 8001b58:	00000000 	.word	0x00000000
 8001b5c:	40000000 	.word	0x40000000
 8001b60:	3ff00000 	.word	0x3ff00000
 8001b64:	3b9aca00 	.word	0x3b9aca00
 8001b68:	20001470 	.word	0x20001470
 8001b6c:	00000000 	.word	0x00000000

08001b70 <ptp_clock_xmc_rate_adjust>:
	return ret;
}


static int ptp_clock_xmc_rate_adjust(const struct device *dev, double ratio)
{
 8001b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b74:	ec55 4b10 	vmov	r4, r5, d0
	LOG_ERR ("%s: Entered, ratio:%f", __func__, ratio);
	double ratio_temp = ratio;
	struct ptp_context *ptp_context = dev->data;
 8001b78:	6903      	ldr	r3, [r0, #16]
	struct eth_context *context = ptp_context->eth_context;
 8001b7a:	681e      	ldr	r6, [r3, #0]
	uint32_t addend_val;
	int key, ret;

	/* No change needed */
	if (ratio == 1.0f) {
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <ptp_clock_xmc_rate_adjust+0xb0>)
 8001b80:	ee10 0a10 	vmov	r0, s0
 8001b84:	4629      	mov	r1, r5
 8001b86:	f7fe ff5f 	bl	8000a48 <__aeabi_dcmpeq>
 8001b8a:	2800      	cmp	r0, #0
 8001b8c:	d141      	bne.n	8001c12 <ptp_clock_xmc_rate_adjust+0xa2>
	__asm__ volatile(
 8001b8e:	f04f 0304 	mov.w	r3, #4
 8001b92:	f3ef 8711 	mrs	r7, BASEPRI
 8001b96:	f383 8812 	msr	BASEPRI_MAX, r3
 8001b9a:	f3bf 8f6f 	isb	sy
		return 0;
	}

	key = irq_lock();

	ratio *= context->clk_ratio_adj;
 8001b9e:	4622      	mov	r2, r4
 8001ba0:	462b      	mov	r3, r5
 8001ba2:	e9d6 0118 	ldrd	r0, r1, [r6, #96]	; 0x60
 8001ba6:	f7fe fce7 	bl	8000578 <__aeabi_dmul>
 8001baa:	4680      	mov	r8, r0
 8001bac:	4689      	mov	r9, r1

	/* Limit possible ratio */
	
	if (ratio * 100 < 90 ||
 8001bae:	2200      	movs	r2, #0
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <ptp_clock_xmc_rate_adjust+0xb4>)
 8001bb2:	f7fe fce1 	bl	8000578 <__aeabi_dmul>
 8001bb6:	4604      	mov	r4, r0
 8001bb8:	460d      	mov	r5, r1
 8001bba:	2200      	movs	r2, #0
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <ptp_clock_xmc_rate_adjust+0xb8>)
 8001bbe:	f7fe ff4d 	bl	8000a5c <__aeabi_dcmplt>
 8001bc2:	b9f0      	cbnz	r0, 8001c02 <ptp_clock_xmc_rate_adjust+0x92>
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <ptp_clock_xmc_rate_adjust+0xbc>)
 8001bc8:	4620      	mov	r0, r4
 8001bca:	4629      	mov	r1, r5
 8001bcc:	f7fe ff64 	bl	8000a98 <__aeabi_dcmpgt>
 8001bd0:	b110      	cbz	r0, 8001bd8 <ptp_clock_xmc_rate_adjust+0x68>
			ratio * 100 > 110) {
		ret = -EINVAL;
 8001bd2:	f06f 0015 	mvn.w	r0, #21
 8001bd6:	e016      	b.n	8001c06 <ptp_clock_xmc_rate_adjust+0x96>
	}
	
	

	/* Save new ratio */
	context->clk_ratio_adj = ratio;
 8001bd8:	e9c6 8918 	strd	r8, r9, [r6, #96]	; 0x60

	/* Update addend register */
	addend_val = UINT32_MAX * context->clk_ratio * ratio;
 8001bdc:	a30e      	add	r3, pc, #56	; (adr r3, 8001c18 <ptp_clock_xmc_rate_adjust+0xa8>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	e9d6 0116 	ldrd	r0, r1, [r6, #88]	; 0x58
 8001be6:	f7fe fcc7 	bl	8000578 <__aeabi_dmul>
 8001bea:	4642      	mov	r2, r8
 8001bec:	464b      	mov	r3, r9
 8001bee:	f7fe fcc3 	bl	8000578 <__aeabi_dmul>
 8001bf2:	f7fe ff83 	bl	8000afc <__aeabi_d2uiz>
 8001bf6:	4601      	mov	r1, r0

	LOG_INF ("%s: ratio:%f, ratio_to_adjust:%f = percent:%f addend_val:%zu", __func__, ratio_temp, ratio, ratio * 100, addend_val);

	XMC_ETH_MAC_UpdateAddend ((XMC_ETH_MAC_t *const)&context->eth_mac, addend_val);
 8001bf8:	4630      	mov	r0, r6
 8001bfa:	f016 fad4 	bl	80181a6 <XMC_ETH_MAC_UpdateAddend>

	ret = 0;
 8001bfe:	2000      	movs	r0, #0
 8001c00:	e001      	b.n	8001c06 <ptp_clock_xmc_rate_adjust+0x96>
		ret = -EINVAL;
 8001c02:	f06f 0015 	mvn.w	r0, #21
	__asm__ volatile(
 8001c06:	f387 8811 	msr	BASEPRI, r7
 8001c0a:	f3bf 8f6f 	isb	sy

error:
	irq_unlock(key);

	return ret;
}
 8001c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 8001c12:	2000      	movs	r0, #0
 8001c14:	e7fb      	b.n	8001c0e <ptp_clock_xmc_rate_adjust+0x9e>
 8001c16:	bf00      	nop
 8001c18:	ffe00000 	.word	0xffe00000
 8001c1c:	41efffff 	.word	0x41efffff
 8001c20:	3ff00000 	.word	0x3ff00000
 8001c24:	40590000 	.word	0x40590000
 8001c28:	40568000 	.word	0x40568000
 8001c2c:	405b8000 	.word	0x405b8000

08001c30 <ptp_xmc_init>:
};

#define XMC_ETH_LABEL DT_LABEL(DT_INST(0, infineon_xmc_ethernet))

static int ptp_xmc_init(const struct device *port)
{
 8001c30:	b570      	push	{r4, r5, r6, lr}
 8001c32:	b088      	sub	sp, #32
	LOG_ERR ("%s: Entered", __func__);
	//const struct device *eth_dev = DEVICE_DT_INST_GET(0);
	const struct device *eth_dev = DEVICE_DT_GET(DT_NODELABEL(xethernet));
	struct eth_context *context = eth_dev->data;
	context->ptp_clock = port;
 8001c34:	4c26      	ldr	r4, [pc, #152]	; (8001cd0 <ptp_xmc_init+0xa0>)
 8001c36:	6560      	str	r0, [r4, #84]	; 0x54
	struct ptp_context *ptp_context = port->data;
 8001c38:	6903      	ldr	r3, [r0, #16]
	ptp_context->eth_context = context;
 8001c3a:	601c      	str	r4, [r3, #0]
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
{
  return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8001c3c:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <ptp_xmc_init+0xa4>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	4a24      	ldr	r2, [pc, #144]	; (8001cd8 <ptp_xmc_init+0xa8>)
 8001c46:	6810      	ldr	r0, [r2, #0]

	/* Program timestamp addend register */
	context->clk_ratio =
		((double)XMC_ETH_SUB_SECOND_UPDATE_FREQ) / ((double)XMC_SCU_CLOCK_GetSystemClockFrequency());
 8001c48:	4098      	lsls	r0, r3
 8001c4a:	f7fe fc1b 	bl	8000484 <__aeabi_ui2d>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	a11d      	add	r1, pc, #116	; (adr r1, 8001cc8 <ptp_xmc_init+0x98>)
 8001c54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c58:	f7fe fdb8 	bl	80007cc <__aeabi_ddiv>
	context->clk_ratio =
 8001c5c:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
	context->clk_ratio_adj = 1.0f;
 8001c60:	2200      	movs	r2, #0
 8001c62:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <ptp_xmc_init+0xac>)
 8001c64:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60
	/* Update addend register */
	//addend_val = UINT32_MAX * context->clk_ratio * ratio;
	//XMC_ETH_MAC_UpdateAddend ((XMC_ETH_MAC_t *const)&context->eth_mac, addend_val);


	XMC_ETH_MAC_TIME_t xmc_time = {
 8001c68:	2500      	movs	r5, #0
 8001c6a:	9507      	str	r5, [sp, #28]
		.seconds = 10,
		.nanoseconds = 0
	};

#if ENABLE_MQTT_PERFORMACE_ACCURACY_TEST
	xmc_time.seconds = 0;
 8001c6c:	9506      	str	r5, [sp, #24]
	xmc_time.nanoseconds = 0;
#endif	

	XMC_ETH_MAC_InitPTPEx ((XMC_ETH_MAC_t *const)&context->eth_mac, XMC_ETH_MAC_TIMESTAMP_CONFIG_FINE_UPDATE  |
 8001c6e:	aa06      	add	r2, sp, #24
 8001c70:	f643 5102 	movw	r1, #15618	; 0x3d02
 8001c74:	4620      	mov	r0, r4
 8001c76:	f016 fa5d 	bl	8018134 <XMC_ETH_MAC_InitPTPEx>
																  XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTP_OVER_IPV4 |
																  XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTP_OVER_ETHERNET |
																  XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTP_OVER_IPV6,
																  &xmc_time);
#if ENABLE_TEST_GPTP_ACCURACY_PPS		
	XMC_GPIO_CONFIG_t config = {
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <ptp_xmc_init+0xb0>)
 8001c7c:	ae03      	add	r6, sp, #12
 8001c7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c82:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL,
		.output_level=XMC_GPIO_OUTPUT_LEVEL_LOW,
		.output_strength=XMC_GPIO_OUTPUT_STRENGTH_STRONG_SHARP_EDGE
	};
	XMC_GPIO_Init(TEST_PIN_PORT_REG, TEST_PIN_CHANNEL, &config);
 8001c86:	4632      	mov	r2, r6
 8001c88:	2106      	movs	r1, #6
 8001c8a:	4816      	ldr	r0, [pc, #88]	; (8001ce4 <ptp_xmc_init+0xb4>)
 8001c8c:	f004 f8be 	bl	8005e0c <XMC_GPIO_Init>
	XMC_GPIO_Init(LED_PIN_PORT_REG, 0, &config);
 8001c90:	4632      	mov	r2, r6
 8001c92:	4629      	mov	r1, r5
 8001c94:	4814      	ldr	r0, [pc, #80]	; (8001ce8 <ptp_xmc_init+0xb8>)
 8001c96:	f004 f8b9 	bl	8005e0c <XMC_GPIO_Init>

	XMC_ETH_MAC_TIME_t alarm_time = {
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	9502      	str	r5, [sp, #8]
		.seconds = 1,
		.nanoseconds = 0
	};

	XMC_ETH_MAC_SetPTPAlarm ((XMC_ETH_MAC_t *const)&context->eth_mac, &alarm_time);
 8001ca0:	a901      	add	r1, sp, #4
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f016 fa76 	bl	8018194 <XMC_ETH_MAC_SetPTPAlarm>
	XMC_ETH_MAC_ClearEventStatus((XMC_ETH_MAC_t *const)&context->eth_mac, XMC_ETH_MAC_EVENT_TIMESTAMP);
 8001ca8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cac:	4620      	mov	r0, r4
 8001cae:	f016 f9ea 	bl	8018086 <XMC_ETH_MAC_ClearEventStatus>
 * The timestamp interrupt is generated when the System Time becomes greater than the value written
 * in the Target Time register (Alarm). After the generation of the Timestamp Trigger Interrupt, the interrupt is disabled.
 */
__STATIC_INLINE void XMC_ETH_MAC_EnablePTPAlarm(XMC_ETH_MAC_t *const eth_mac)
{
  eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSTRIG_Msk;
 8001cb2:	6822      	ldr	r2, [r4, #0]
 8001cb4:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
 8001cb8:	f043 0310 	orr.w	r3, r3, #16
 8001cbc:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700

#endif

	return 0;

}
 8001cc0:	4628      	mov	r0, r5
 8001cc2:	b008      	add	sp, #32
 8001cc4:	bd70      	pop	{r4, r5, r6, pc}
 8001cc6:	bf00      	nop
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	4187d784 	.word	0x4187d784
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	50004600 	.word	0x50004600
 8001cd8:	2000e220 	.word	0x2000e220
 8001cdc:	3ff00000 	.word	0x3ff00000
 8001ce0:	0801d830 	.word	0x0801d830
 8001ce4:	48028200 	.word	0x48028200
 8001ce8:	48028100 	.word	0x48028100
 8001cec:	00000000 	.word	0x00000000

08001cf0 <pow>:
 8001cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cf4:	ed2d 8b02 	vpush	{d8}
 8001cf8:	b08d      	sub	sp, #52	; 0x34
 8001cfa:	ec57 6b10 	vmov	r6, r7, d0
 8001cfe:	ec55 4b11 	vmov	r4, r5, d1
 8001d02:	f000 f9ad 	bl	8002060 <__ieee754_pow>
 8001d06:	4bae      	ldr	r3, [pc, #696]	; (8001fc0 <pow+0x2d0>)
 8001d08:	eeb0 8a40 	vmov.f32	s16, s0
 8001d0c:	eef0 8a60 	vmov.f32	s17, s1
 8001d10:	f993 9000 	ldrsb.w	r9, [r3]
 8001d14:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8001d18:	d037      	beq.n	8001d8a <pow+0x9a>
 8001d1a:	4622      	mov	r2, r4
 8001d1c:	462b      	mov	r3, r5
 8001d1e:	4620      	mov	r0, r4
 8001d20:	4629      	mov	r1, r5
 8001d22:	f7ff f8bd 	bl	8000ea0 <__aeabi_dcmpun>
 8001d26:	4683      	mov	fp, r0
 8001d28:	bb78      	cbnz	r0, 8001d8a <pow+0x9a>
 8001d2a:	4632      	mov	r2, r6
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	4630      	mov	r0, r6
 8001d30:	4639      	mov	r1, r7
 8001d32:	f7ff f8b5 	bl	8000ea0 <__aeabi_dcmpun>
 8001d36:	4680      	mov	r8, r0
 8001d38:	2800      	cmp	r0, #0
 8001d3a:	f040 8093 	bne.w	8001e64 <pow+0x174>
 8001d3e:	f04f 0a00 	mov.w	sl, #0
 8001d42:	f04f 0b00 	mov.w	fp, #0
 8001d46:	4630      	mov	r0, r6
 8001d48:	4639      	mov	r1, r7
 8001d4a:	4652      	mov	r2, sl
 8001d4c:	465b      	mov	r3, fp
 8001d4e:	f7fe fe7b 	bl	8000a48 <__aeabi_dcmpeq>
 8001d52:	b318      	cbz	r0, 8001d9c <pow+0xac>
 8001d54:	4652      	mov	r2, sl
 8001d56:	465b      	mov	r3, fp
 8001d58:	4620      	mov	r0, r4
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	f7fe fe74 	bl	8000a48 <__aeabi_dcmpeq>
 8001d60:	9000      	str	r0, [sp, #0]
 8001d62:	2800      	cmp	r0, #0
 8001d64:	d057      	beq.n	8001e16 <pow+0x126>
 8001d66:	4b97      	ldr	r3, [pc, #604]	; (8001fc4 <pow+0x2d4>)
 8001d68:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001d72:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001d76:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001d7a:	9202      	str	r2, [sp, #8]
 8001d7c:	9303      	str	r3, [sp, #12]
 8001d7e:	f1b9 0f00 	cmp.w	r9, #0
 8001d82:	f000 8089 	beq.w	8001e98 <pow+0x1a8>
 8001d86:	ed9f 8b8a 	vldr	d8, [pc, #552]	; 8001fb0 <pow+0x2c0>
 8001d8a:	eeb0 0a48 	vmov.f32	s0, s16
 8001d8e:	eef0 0a68 	vmov.f32	s1, s17
 8001d92:	b00d      	add	sp, #52	; 0x34
 8001d94:	ecbd 8b02 	vpop	{d8}
 8001d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d9c:	eeb0 0a48 	vmov.f32	s0, s16
 8001da0:	eef0 0a68 	vmov.f32	s1, s17
 8001da4:	f015 f848 	bl	8016e38 <finite>
 8001da8:	4680      	mov	r8, r0
 8001daa:	2800      	cmp	r0, #0
 8001dac:	f000 8082 	beq.w	8001eb4 <pow+0x1c4>
 8001db0:	f04f 0800 	mov.w	r8, #0
 8001db4:	f04f 0900 	mov.w	r9, #0
 8001db8:	ec51 0b18 	vmov	r0, r1, d8
 8001dbc:	4642      	mov	r2, r8
 8001dbe:	464b      	mov	r3, r9
 8001dc0:	f7fe fe42 	bl	8000a48 <__aeabi_dcmpeq>
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	d0e0      	beq.n	8001d8a <pow+0x9a>
 8001dc8:	ec47 6b10 	vmov	d0, r6, r7
 8001dcc:	f015 f834 	bl	8016e38 <finite>
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	d0da      	beq.n	8001d8a <pow+0x9a>
 8001dd4:	ec45 4b10 	vmov	d0, r4, r5
 8001dd8:	f015 f82e 	bl	8016e38 <finite>
 8001ddc:	2800      	cmp	r0, #0
 8001dde:	d0d4      	beq.n	8001d8a <pow+0x9a>
 8001de0:	4b77      	ldr	r3, [pc, #476]	; (8001fc0 <pow+0x2d0>)
 8001de2:	4a78      	ldr	r2, [pc, #480]	; (8001fc4 <pow+0x2d4>)
 8001de4:	f993 3000 	ldrsb.w	r3, [r3]
 8001de8:	9203      	str	r2, [sp, #12]
 8001dea:	2104      	movs	r1, #4
 8001dec:	2200      	movs	r2, #0
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001df4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001df8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001dfc:	9102      	str	r1, [sp, #8]
 8001dfe:	920a      	str	r2, [sp, #40]	; 0x28
 8001e00:	d004      	beq.n	8001e0c <pow+0x11c>
 8001e02:	a802      	add	r0, sp, #8
 8001e04:	f015 f824 	bl	8016e50 <matherr>
 8001e08:	2800      	cmp	r0, #0
 8001e0a:	d14a      	bne.n	8001ea2 <pow+0x1b2>
 8001e0c:	f016 fba9 	bl	8018562 <__errno>
 8001e10:	2322      	movs	r3, #34	; 0x22
 8001e12:	6003      	str	r3, [r0, #0]
 8001e14:	e045      	b.n	8001ea2 <pow+0x1b2>
 8001e16:	ec45 4b10 	vmov	d0, r4, r5
 8001e1a:	f015 f80d 	bl	8016e38 <finite>
 8001e1e:	2800      	cmp	r0, #0
 8001e20:	d0b3      	beq.n	8001d8a <pow+0x9a>
 8001e22:	4652      	mov	r2, sl
 8001e24:	465b      	mov	r3, fp
 8001e26:	4620      	mov	r0, r4
 8001e28:	4629      	mov	r1, r5
 8001e2a:	f7fe fe17 	bl	8000a5c <__aeabi_dcmplt>
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	d0ab      	beq.n	8001d8a <pow+0x9a>
 8001e32:	4b63      	ldr	r3, [pc, #396]	; (8001fc0 <pow+0x2d0>)
 8001e34:	9900      	ldr	r1, [sp, #0]
 8001e36:	4a63      	ldr	r2, [pc, #396]	; (8001fc4 <pow+0x2d4>)
 8001e38:	f993 3000 	ldrsb.w	r3, [r3]
 8001e3c:	910a      	str	r1, [sp, #40]	; 0x28
 8001e3e:	2101      	movs	r1, #1
 8001e40:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001e44:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001e48:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d16f      	bne.n	8001f30 <pow+0x240>
 8001e50:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001e54:	a802      	add	r0, sp, #8
 8001e56:	f014 fffb 	bl	8016e50 <matherr>
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	d06e      	beq.n	8001f3c <pow+0x24c>
 8001e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e60:	b32b      	cbz	r3, 8001eae <pow+0x1be>
 8001e62:	e020      	b.n	8001ea6 <pow+0x1b6>
 8001e64:	2200      	movs	r2, #0
 8001e66:	2300      	movs	r3, #0
 8001e68:	4620      	mov	r0, r4
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	f7fe fdec 	bl	8000a48 <__aeabi_dcmpeq>
 8001e70:	2800      	cmp	r0, #0
 8001e72:	d08a      	beq.n	8001d8a <pow+0x9a>
 8001e74:	ed9f 8b4e 	vldr	d8, [pc, #312]	; 8001fb0 <pow+0x2c0>
 8001e78:	4b52      	ldr	r3, [pc, #328]	; (8001fc4 <pow+0x2d4>)
 8001e7a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f1b9 0f02 	cmp.w	r9, #2
 8001e84:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001e88:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001e8c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8001e90:	9202      	str	r2, [sp, #8]
 8001e92:	9303      	str	r3, [sp, #12]
 8001e94:	f43f af79 	beq.w	8001d8a <pow+0x9a>
 8001e98:	a802      	add	r0, sp, #8
 8001e9a:	f014 ffd9 	bl	8016e50 <matherr>
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	d051      	beq.n	8001f46 <pow+0x256>
 8001ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ea4:	b11b      	cbz	r3, 8001eae <pow+0x1be>
 8001ea6:	f016 fb5c 	bl	8018562 <__errno>
 8001eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001eac:	6003      	str	r3, [r0, #0]
 8001eae:	ed9d 8b08 	vldr	d8, [sp, #32]
 8001eb2:	e76a      	b.n	8001d8a <pow+0x9a>
 8001eb4:	ec47 6b10 	vmov	d0, r6, r7
 8001eb8:	f014 ffbe 	bl	8016e38 <finite>
 8001ebc:	2800      	cmp	r0, #0
 8001ebe:	f43f af77 	beq.w	8001db0 <pow+0xc0>
 8001ec2:	ec45 4b10 	vmov	d0, r4, r5
 8001ec6:	f014 ffb7 	bl	8016e38 <finite>
 8001eca:	2800      	cmp	r0, #0
 8001ecc:	f43f af70 	beq.w	8001db0 <pow+0xc0>
 8001ed0:	ec53 2b18 	vmov	r2, r3, d8
 8001ed4:	ee18 0a10 	vmov	r0, s16
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f7fe ffe1 	bl	8000ea0 <__aeabi_dcmpun>
 8001ede:	4b38      	ldr	r3, [pc, #224]	; (8001fc0 <pow+0x2d0>)
 8001ee0:	2800      	cmp	r0, #0
 8001ee2:	f040 8096 	bne.w	8002012 <pow+0x322>
 8001ee6:	f993 8000 	ldrsb.w	r8, [r3]
 8001eea:	900a      	str	r0, [sp, #40]	; 0x28
 8001eec:	2303      	movs	r3, #3
 8001eee:	9302      	str	r3, [sp, #8]
 8001ef0:	4b34      	ldr	r3, [pc, #208]	; (8001fc4 <pow+0x2d4>)
 8001ef2:	9303      	str	r3, [sp, #12]
 8001ef4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001ef8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8001efc:	f1b8 0f00 	cmp.w	r8, #0
 8001f00:	d126      	bne.n	8001f50 <pow+0x260>
 8001f02:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001fd4 <pow+0x2e4>
 8001f06:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	465b      	mov	r3, fp
 8001f0e:	4630      	mov	r0, r6
 8001f10:	4639      	mov	r1, r7
 8001f12:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001f16:	f7fe fda1 	bl	8000a5c <__aeabi_dcmplt>
 8001f1a:	bb48      	cbnz	r0, 8001f70 <pow+0x280>
 8001f1c:	a802      	add	r0, sp, #8
 8001f1e:	f014 ff97 	bl	8016e50 <matherr>
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d19b      	bne.n	8001e5e <pow+0x16e>
 8001f26:	f016 fb1c 	bl	8018562 <__errno>
 8001f2a:	2322      	movs	r3, #34	; 0x22
 8001f2c:	6003      	str	r3, [r0, #0]
 8001f2e:	e796      	b.n	8001e5e <pow+0x16e>
 8001f30:	4925      	ldr	r1, [pc, #148]	; (8001fc8 <pow+0x2d8>)
 8001f32:	2000      	movs	r0, #0
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001f3a:	d18b      	bne.n	8001e54 <pow+0x164>
 8001f3c:	f016 fb11 	bl	8018562 <__errno>
 8001f40:	2321      	movs	r3, #33	; 0x21
 8001f42:	6003      	str	r3, [r0, #0]
 8001f44:	e78b      	b.n	8001e5e <pow+0x16e>
 8001f46:	f016 fb0c 	bl	8018562 <__errno>
 8001f4a:	2321      	movs	r3, #33	; 0x21
 8001f4c:	6003      	str	r3, [r0, #0]
 8001f4e:	e7a8      	b.n	8001ea2 <pow+0x1b2>
 8001f50:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8001fb8 <pow+0x2c8>
 8001f54:	4652      	mov	r2, sl
 8001f56:	465b      	mov	r3, fp
 8001f58:	4630      	mov	r0, r6
 8001f5a:	4639      	mov	r1, r7
 8001f5c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001f60:	f7fe fd7c 	bl	8000a5c <__aeabi_dcmplt>
 8001f64:	2800      	cmp	r0, #0
 8001f66:	d137      	bne.n	8001fd8 <pow+0x2e8>
 8001f68:	f1b8 0f02 	cmp.w	r8, #2
 8001f6c:	d0db      	beq.n	8001f26 <pow+0x236>
 8001f6e:	e7d5      	b.n	8001f1c <pow+0x22c>
 8001f70:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <pow+0x2dc>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	4620      	mov	r0, r4
 8001f76:	4629      	mov	r1, r5
 8001f78:	f7fe fafe 	bl	8000578 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	ec43 2b10 	vmov	d0, r2, r3
 8001f84:	e9cd 2300 	strd	r2, r3, [sp]
 8001f88:	f014 ff64 	bl	8016e54 <rint>
 8001f8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001f90:	ec51 0b10 	vmov	r0, r1, d0
 8001f94:	f7fe fd58 	bl	8000a48 <__aeabi_dcmpeq>
 8001f98:	2800      	cmp	r0, #0
 8001f9a:	d136      	bne.n	800200a <pow+0x31a>
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <pow+0x2e0>)
 8001f9e:	4908      	ldr	r1, [pc, #32]	; (8001fc0 <pow+0x2d0>)
 8001fa0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001fa4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001fa8:	f991 8000 	ldrsb.w	r8, [r1]
 8001fac:	e7dc      	b.n	8001f68 <pow+0x278>
 8001fae:	bf00      	nop
 8001fb0:	00000000 	.word	0x00000000
 8001fb4:	3ff00000 	.word	0x3ff00000
 8001fb8:	00000000 	.word	0x00000000
 8001fbc:	7ff00000 	.word	0x7ff00000
 8001fc0:	2000101c 	.word	0x2000101c
 8001fc4:	0801ec98 	.word	0x0801ec98
 8001fc8:	fff00000 	.word	0xfff00000
 8001fcc:	3fe00000 	.word	0x3fe00000
 8001fd0:	c7efffff 	.word	0xc7efffff
 8001fd4:	47efffff 	.word	0x47efffff
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	; (800204c <pow+0x35c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	4620      	mov	r0, r4
 8001fde:	4629      	mov	r1, r5
 8001fe0:	f7fe faca 	bl	8000578 <__aeabi_dmul>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	ec43 2b10 	vmov	d0, r2, r3
 8001fec:	e9cd 2300 	strd	r2, r3, [sp]
 8001ff0:	f014 ff30 	bl	8016e54 <rint>
 8001ff4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001ff8:	ec51 0b10 	vmov	r0, r1, d0
 8001ffc:	f7fe fd24 	bl	8000a48 <__aeabi_dcmpeq>
 8002000:	b918      	cbnz	r0, 800200a <pow+0x31a>
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <pow+0x360>)
 8002004:	2200      	movs	r2, #0
 8002006:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <pow+0x364>)
 800200c:	f993 8000 	ldrsb.w	r8, [r3]
 8002010:	e7aa      	b.n	8001f68 <pow+0x278>
 8002012:	f993 9000 	ldrsb.w	r9, [r3]
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <pow+0x368>)
 8002018:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800201c:	2201      	movs	r2, #1
 800201e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002022:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002026:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800202a:	f1b9 0f00 	cmp.w	r9, #0
 800202e:	f43f af0f 	beq.w	8001e50 <pow+0x160>
 8002032:	4652      	mov	r2, sl
 8002034:	465b      	mov	r3, fp
 8002036:	4650      	mov	r0, sl
 8002038:	4659      	mov	r1, fp
 800203a:	f7fe fbc7 	bl	80007cc <__aeabi_ddiv>
 800203e:	f1b9 0f02 	cmp.w	r9, #2
 8002042:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002046:	f43f af79 	beq.w	8001f3c <pow+0x24c>
 800204a:	e703      	b.n	8001e54 <pow+0x164>
 800204c:	3fe00000 	.word	0x3fe00000
 8002050:	fff00000 	.word	0xfff00000
 8002054:	2000101c 	.word	0x2000101c
 8002058:	0801ec98 	.word	0x0801ec98
 800205c:	00000000 	.word	0x00000000

08002060 <__ieee754_pow>:
 8002060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002064:	ec57 6b11 	vmov	r6, r7, d1
 8002068:	ed2d 8b0a 	vpush	{d8-d12}
 800206c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
 8002070:	ea5a 0206 	orrs.w	r2, sl, r6
 8002074:	b089      	sub	sp, #36	; 0x24
 8002076:	d03d      	beq.n	80020f4 <__ieee754_pow+0x94>
 8002078:	ec55 4b10 	vmov	r4, r5, d0
 800207c:	4976      	ldr	r1, [pc, #472]	; (8002258 <__ieee754_pow+0x1f8>)
 800207e:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8002082:	4588      	cmp	r8, r1
 8002084:	ee10 2a10 	vmov	r2, s0
 8002088:	46a9      	mov	r9, r5
 800208a:	dc2c      	bgt.n	80020e6 <__ieee754_pow+0x86>
 800208c:	ee11 3a10 	vmov	r3, s2
 8002090:	46bb      	mov	fp, r7
 8002092:	d03a      	beq.n	800210a <__ieee754_pow+0xaa>
 8002094:	458a      	cmp	sl, r1
 8002096:	dc26      	bgt.n	80020e6 <__ieee754_pow+0x86>
 8002098:	496f      	ldr	r1, [pc, #444]	; (8002258 <__ieee754_pow+0x1f8>)
 800209a:	458a      	cmp	sl, r1
 800209c:	d021      	beq.n	80020e2 <__ieee754_pow+0x82>
 800209e:	f1b9 0f00 	cmp.w	r9, #0
 80020a2:	db3d      	blt.n	8002120 <__ieee754_pow+0xc0>
 80020a4:	2100      	movs	r1, #0
 80020a6:	9103      	str	r1, [sp, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d155      	bne.n	8002158 <__ieee754_pow+0xf8>
 80020ac:	4b6a      	ldr	r3, [pc, #424]	; (8002258 <__ieee754_pow+0x1f8>)
 80020ae:	459a      	cmp	sl, r3
 80020b0:	f000 80a8 	beq.w	8002204 <__ieee754_pow+0x1a4>
 80020b4:	4b69      	ldr	r3, [pc, #420]	; (800225c <__ieee754_pow+0x1fc>)
 80020b6:	459a      	cmp	sl, r3
 80020b8:	f000 80b6 	beq.w	8002228 <__ieee754_pow+0x1c8>
 80020bc:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
 80020c0:	f000 8501 	beq.w	8002ac6 <__ieee754_pow+0xa66>
 80020c4:	4b66      	ldr	r3, [pc, #408]	; (8002260 <__ieee754_pow+0x200>)
 80020c6:	459b      	cmp	fp, r3
 80020c8:	d146      	bne.n	8002158 <__ieee754_pow+0xf8>
 80020ca:	f1b9 0f00 	cmp.w	r9, #0
 80020ce:	db43      	blt.n	8002158 <__ieee754_pow+0xf8>
 80020d0:	ec45 4b10 	vmov	d0, r4, r5
 80020d4:	b009      	add	sp, #36	; 0x24
 80020d6:	ecbd 8b0a 	vpop	{d8-d12}
 80020da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020de:	f014 bde7 	b.w	8016cb0 <__ieee754_sqrt>
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0db      	beq.n	800209e <__ieee754_pow+0x3e>
 80020e6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80020ea:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80020ee:	ea58 0302 	orrs.w	r3, r8, r2
 80020f2:	d10d      	bne.n	8002110 <__ieee754_pow+0xb0>
 80020f4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8002248 <__ieee754_pow+0x1e8>
 80020f8:	ed8d 7b00 	vstr	d7, [sp]
 80020fc:	ed9d 0b00 	vldr	d0, [sp]
 8002100:	b009      	add	sp, #36	; 0x24
 8002102:	ecbd 8b0a 	vpop	{d8-d12}
 8002106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800210a:	b90c      	cbnz	r4, 8002110 <__ieee754_pow+0xb0>
 800210c:	45c2      	cmp	sl, r8
 800210e:	ddc3      	ble.n	8002098 <__ieee754_pow+0x38>
 8002110:	4854      	ldr	r0, [pc, #336]	; (8002264 <__ieee754_pow+0x204>)
 8002112:	b009      	add	sp, #36	; 0x24
 8002114:	ecbd 8b0a 	vpop	{d8-d12}
 8002118:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800211c:	f000 bd7c 	b.w	8002c18 <nan>
 8002120:	4951      	ldr	r1, [pc, #324]	; (8002268 <__ieee754_pow+0x208>)
 8002122:	458a      	cmp	sl, r1
 8002124:	f300 8087 	bgt.w	8002236 <__ieee754_pow+0x1d6>
 8002128:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800212c:	458a      	cmp	sl, r1
 800212e:	dd0f      	ble.n	8002150 <__ieee754_pow+0xf0>
 8002130:	ea4f 512a 	mov.w	r1, sl, asr #20
 8002134:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8002138:	2914      	cmp	r1, #20
 800213a:	f340 84ce 	ble.w	8002ada <__ieee754_pow+0xa7a>
 800213e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8002142:	fa23 f001 	lsr.w	r0, r3, r1
 8002146:	fa00 f101 	lsl.w	r1, r0, r1
 800214a:	4299      	cmp	r1, r3
 800214c:	f000 8520 	beq.w	8002b90 <__ieee754_pow+0xb30>
 8002150:	2100      	movs	r1, #0
 8002152:	9103      	str	r1, [sp, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0ad      	beq.n	80020b4 <__ieee754_pow+0x54>
 8002158:	ec45 4b10 	vmov	d0, r4, r5
 800215c:	9206      	str	r2, [sp, #24]
 800215e:	f014 fd9d 	bl	8016c9c <fabs>
 8002162:	9a06      	ldr	r2, [sp, #24]
 8002164:	ed8d 0b00 	vstr	d0, [sp]
 8002168:	bb5a      	cbnz	r2, 80021c2 <__ieee754_pow+0x162>
 800216a:	f1b8 0f00 	cmp.w	r8, #0
 800216e:	d004      	beq.n	800217a <__ieee754_pow+0x11a>
 8002170:	4b3a      	ldr	r3, [pc, #232]	; (800225c <__ieee754_pow+0x1fc>)
 8002172:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8002176:	429a      	cmp	r2, r3
 8002178:	d123      	bne.n	80021c2 <__ieee754_pow+0x162>
 800217a:	f1bb 0f00 	cmp.w	fp, #0
 800217e:	da07      	bge.n	8002190 <__ieee754_pow+0x130>
 8002180:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002184:	4935      	ldr	r1, [pc, #212]	; (800225c <__ieee754_pow+0x1fc>)
 8002186:	2000      	movs	r0, #0
 8002188:	f7fe fb20 	bl	80007cc <__aeabi_ddiv>
 800218c:	e9cd 0100 	strd	r0, r1, [sp]
 8002190:	f1b9 0f00 	cmp.w	r9, #0
 8002194:	dab2      	bge.n	80020fc <__ieee754_pow+0x9c>
 8002196:	9b03      	ldr	r3, [sp, #12]
 8002198:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800219c:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80021a0:	ea58 0303 	orrs.w	r3, r8, r3
 80021a4:	f040 84be 	bne.w	8002b24 <__ieee754_pow+0xac4>
 80021a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80021ac:	4610      	mov	r0, r2
 80021ae:	4619      	mov	r1, r3
 80021b0:	f7fe f82a 	bl	8000208 <__aeabi_dsub>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	f7fe fb08 	bl	80007cc <__aeabi_ddiv>
 80021bc:	e9cd 0100 	strd	r0, r1, [sp]
 80021c0:	e79c      	b.n	80020fc <__ieee754_pow+0x9c>
 80021c2:	9a03      	ldr	r2, [sp, #12]
 80021c4:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80021c8:	3b01      	subs	r3, #1
 80021ca:	9306      	str	r3, [sp, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	d035      	beq.n	800223c <__ieee754_pow+0x1dc>
 80021d0:	4b26      	ldr	r3, [pc, #152]	; (800226c <__ieee754_pow+0x20c>)
 80021d2:	459a      	cmp	sl, r3
 80021d4:	dd4e      	ble.n	8002274 <__ieee754_pow+0x214>
 80021d6:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80021da:	459a      	cmp	sl, r3
 80021dc:	4b24      	ldr	r3, [pc, #144]	; (8002270 <__ieee754_pow+0x210>)
 80021de:	f340 83ed 	ble.w	80029bc <__ieee754_pow+0x95c>
 80021e2:	4598      	cmp	r8, r3
 80021e4:	f340 836b 	ble.w	80028be <__ieee754_pow+0x85e>
 80021e8:	f1bb 0f00 	cmp.w	fp, #0
 80021ec:	f340 836b 	ble.w	80028c6 <__ieee754_pow+0x866>
 80021f0:	a317      	add	r3, pc, #92	; (adr r3, 8002250 <__ieee754_pow+0x1f0>)
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	4610      	mov	r0, r2
 80021f8:	4619      	mov	r1, r3
 80021fa:	f7fe f9bd 	bl	8000578 <__aeabi_dmul>
 80021fe:	e9cd 0100 	strd	r0, r1, [sp]
 8002202:	e77b      	b.n	80020fc <__ieee754_pow+0x9c>
 8002204:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
 8002208:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800220c:	4313      	orrs	r3, r2
 800220e:	f43f af71 	beq.w	80020f4 <__ieee754_pow+0x94>
 8002212:	4b17      	ldr	r3, [pc, #92]	; (8002270 <__ieee754_pow+0x210>)
 8002214:	4598      	cmp	r8, r3
 8002216:	f340 8388 	ble.w	800292a <__ieee754_pow+0x8ca>
 800221a:	f1bb 0f00 	cmp.w	fp, #0
 800221e:	f2c0 8352 	blt.w	80028c6 <__ieee754_pow+0x866>
 8002222:	e9cd 6700 	strd	r6, r7, [sp]
 8002226:	e769      	b.n	80020fc <__ieee754_pow+0x9c>
 8002228:	f1bb 0f00 	cmp.w	fp, #0
 800222c:	f2c0 8441 	blt.w	8002ab2 <__ieee754_pow+0xa52>
 8002230:	e9cd 4500 	strd	r4, r5, [sp]
 8002234:	e762      	b.n	80020fc <__ieee754_pow+0x9c>
 8002236:	2102      	movs	r1, #2
 8002238:	9103      	str	r1, [sp, #12]
 800223a:	e735      	b.n	80020a8 <__ieee754_pow+0x48>
 800223c:	4622      	mov	r2, r4
 800223e:	462b      	mov	r3, r5
 8002240:	e7b4      	b.n	80021ac <__ieee754_pow+0x14c>
 8002242:	bf00      	nop
 8002244:	f3af 8000 	nop.w
 8002248:	00000000 	.word	0x00000000
 800224c:	3ff00000 	.word	0x3ff00000
 8002250:	8800759c 	.word	0x8800759c
 8002254:	7e37e43c 	.word	0x7e37e43c
 8002258:	7ff00000 	.word	0x7ff00000
 800225c:	3ff00000 	.word	0x3ff00000
 8002260:	3fe00000 	.word	0x3fe00000
 8002264:	0801ec08 	.word	0x0801ec08
 8002268:	433fffff 	.word	0x433fffff
 800226c:	41e00000 	.word	0x41e00000
 8002270:	3fefffff 	.word	0x3fefffff
 8002274:	4be4      	ldr	r3, [pc, #912]	; (8002608 <__ieee754_pow+0x5a8>)
 8002276:	ea09 0303 	and.w	r3, r9, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 8416 	bne.w	8002aac <__ieee754_pow+0xa4c>
 8002280:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002284:	4be1      	ldr	r3, [pc, #900]	; (800260c <__ieee754_pow+0x5ac>)
 8002286:	2200      	movs	r2, #0
 8002288:	f7fe f976 	bl	8000578 <__aeabi_dmul>
 800228c:	e9cd 0100 	strd	r0, r1, [sp]
 8002290:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002294:	f06f 0034 	mvn.w	r0, #52	; 0x34
 8002298:	ea4f 5328 	mov.w	r3, r8, asr #20
 800229c:	49dc      	ldr	r1, [pc, #880]	; (8002610 <__ieee754_pow+0x5b0>)
 800229e:	f3c8 0213 	ubfx	r2, r8, #0, #20
 80022a2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80022a6:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
 80022aa:	1818      	adds	r0, r3, r0
 80022ac:	428a      	cmp	r2, r1
 80022ae:	9007      	str	r0, [sp, #28]
 80022b0:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
 80022b4:	f340 83e9 	ble.w	8002a8a <__ieee754_pow+0xa2a>
 80022b8:	4bd6      	ldr	r3, [pc, #856]	; (8002614 <__ieee754_pow+0x5b4>)
 80022ba:	429a      	cmp	r2, r3
 80022bc:	f340 843e 	ble.w	8002b3c <__ieee754_pow+0xadc>
 80022c0:	ed9f 7bbb 	vldr	d7, [pc, #748]	; 80025b0 <__ieee754_pow+0x550>
 80022c4:	eeb0 ba47 	vmov.f32	s22, s14
 80022c8:	eef0 ba67 	vmov.f32	s23, s15
 80022cc:	eeb0 ca47 	vmov.f32	s24, s14
 80022d0:	eef0 ca67 	vmov.f32	s25, s15
 80022d4:	ed9f 7bb8 	vldr	d7, [pc, #736]	; 80025b8 <__ieee754_pow+0x558>
 80022d8:	3001      	adds	r0, #1
 80022da:	ec54 3b17 	vmov	r3, r4, d7
 80022de:	9007      	str	r0, [sp, #28]
 80022e0:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
 80022e4:	f04f 0900 	mov.w	r9, #0
 80022e8:	e9dd ab00 	ldrd	sl, fp, [sp]
 80022ec:	ec44 3b18 	vmov	d8, r3, r4
 80022f0:	461a      	mov	r2, r3
 80022f2:	4650      	mov	r0, sl
 80022f4:	4623      	mov	r3, r4
 80022f6:	4641      	mov	r1, r8
 80022f8:	f7fd ff86 	bl	8000208 <__aeabi_dsub>
 80022fc:	ec53 2b18 	vmov	r2, r3, d8
 8002300:	4604      	mov	r4, r0
 8002302:	460d      	mov	r5, r1
 8002304:	4650      	mov	r0, sl
 8002306:	4641      	mov	r1, r8
 8002308:	f7fd ff80 	bl	800020c <__adddf3>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	2000      	movs	r0, #0
 8002312:	49c1      	ldr	r1, [pc, #772]	; (8002618 <__ieee754_pow+0x5b8>)
 8002314:	f7fe fa5a 	bl	80007cc <__aeabi_ddiv>
 8002318:	ec45 4b1a 	vmov	d10, r4, r5
 800231c:	ec41 0b19 	vmov	d9, r0, r1
 8002320:	ec51 0b1a 	vmov	r0, r1, d10
 8002324:	ec53 2b19 	vmov	r2, r3, d9
 8002328:	f7fe f926 	bl	8000578 <__aeabi_dmul>
 800232c:	46c3      	mov	fp, r8
 800232e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8002332:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
 8002336:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
 800233a:	eb03 0509 	add.w	r5, r3, r9
 800233e:	460a      	mov	r2, r1
 8002340:	2300      	movs	r3, #0
 8002342:	4601      	mov	r1, r0
 8002344:	e9cd 1200 	strd	r1, r2, [sp]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	e9dd 8900 	ldrd	r8, r9, [sp]
 800234e:	2400      	movs	r4, #0
 8002350:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8002354:	462b      	mov	r3, r5
 8002356:	4622      	mov	r2, r4
 8002358:	4640      	mov	r0, r8
 800235a:	4649      	mov	r1, r9
 800235c:	f7fe f90c 	bl	8000578 <__aeabi_dmul>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	ec51 0b1a 	vmov	r0, r1, d10
 8002368:	f7fd ff4e 	bl	8000208 <__aeabi_dsub>
 800236c:	ec41 0b17 	vmov	d7, r0, r1
 8002370:	ec53 2b18 	vmov	r2, r3, d8
 8002374:	4620      	mov	r0, r4
 8002376:	4629      	mov	r1, r5
 8002378:	ec55 4b17 	vmov	r4, r5, d7
 800237c:	f7fd ff44 	bl	8000208 <__aeabi_dsub>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4650      	mov	r0, sl
 8002386:	4659      	mov	r1, fp
 8002388:	f7fd ff3e 	bl	8000208 <__aeabi_dsub>
 800238c:	4642      	mov	r2, r8
 800238e:	464b      	mov	r3, r9
 8002390:	f7fe f8f2 	bl	8000578 <__aeabi_dmul>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4620      	mov	r0, r4
 800239a:	4629      	mov	r1, r5
 800239c:	f7fd ff34 	bl	8000208 <__aeabi_dsub>
 80023a0:	ec53 2b19 	vmov	r2, r3, d9
 80023a4:	f7fe f8e8 	bl	8000578 <__aeabi_dmul>
 80023a8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80023ac:	4604      	mov	r4, r0
 80023ae:	460d      	mov	r5, r1
 80023b0:	4652      	mov	r2, sl
 80023b2:	465b      	mov	r3, fp
 80023b4:	4650      	mov	r0, sl
 80023b6:	4659      	mov	r1, fp
 80023b8:	f7fe f8de 	bl	8000578 <__aeabi_dmul>
 80023bc:	a380      	add	r3, pc, #512	; (adr r3, 80025c0 <__ieee754_pow+0x560>)
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	ec45 4b1a 	vmov	d10, r4, r5
 80023c6:	4604      	mov	r4, r0
 80023c8:	460d      	mov	r5, r1
 80023ca:	f7fe f8d5 	bl	8000578 <__aeabi_dmul>
 80023ce:	a37e      	add	r3, pc, #504	; (adr r3, 80025c8 <__ieee754_pow+0x568>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	f7fd ff1a 	bl	800020c <__adddf3>
 80023d8:	4622      	mov	r2, r4
 80023da:	462b      	mov	r3, r5
 80023dc:	f7fe f8cc 	bl	8000578 <__aeabi_dmul>
 80023e0:	a37b      	add	r3, pc, #492	; (adr r3, 80025d0 <__ieee754_pow+0x570>)
 80023e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e6:	f7fd ff11 	bl	800020c <__adddf3>
 80023ea:	4622      	mov	r2, r4
 80023ec:	462b      	mov	r3, r5
 80023ee:	f7fe f8c3 	bl	8000578 <__aeabi_dmul>
 80023f2:	a379      	add	r3, pc, #484	; (adr r3, 80025d8 <__ieee754_pow+0x578>)
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	f7fd ff08 	bl	800020c <__adddf3>
 80023fc:	4622      	mov	r2, r4
 80023fe:	462b      	mov	r3, r5
 8002400:	f7fe f8ba 	bl	8000578 <__aeabi_dmul>
 8002404:	a376      	add	r3, pc, #472	; (adr r3, 80025e0 <__ieee754_pow+0x580>)
 8002406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240a:	f7fd feff 	bl	800020c <__adddf3>
 800240e:	4622      	mov	r2, r4
 8002410:	462b      	mov	r3, r5
 8002412:	f7fe f8b1 	bl	8000578 <__aeabi_dmul>
 8002416:	a374      	add	r3, pc, #464	; (adr r3, 80025e8 <__ieee754_pow+0x588>)
 8002418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241c:	f7fd fef6 	bl	800020c <__adddf3>
 8002420:	4622      	mov	r2, r4
 8002422:	462b      	mov	r3, r5
 8002424:	4604      	mov	r4, r0
 8002426:	460d      	mov	r5, r1
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	f7fe f8a4 	bl	8000578 <__aeabi_dmul>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4620      	mov	r0, r4
 8002436:	4629      	mov	r1, r5
 8002438:	f7fe f89e 	bl	8000578 <__aeabi_dmul>
 800243c:	4642      	mov	r2, r8
 800243e:	4604      	mov	r4, r0
 8002440:	460d      	mov	r5, r1
 8002442:	464b      	mov	r3, r9
 8002444:	4650      	mov	r0, sl
 8002446:	4659      	mov	r1, fp
 8002448:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800244c:	f7fd fede 	bl	800020c <__adddf3>
 8002450:	ec53 2b1a 	vmov	r2, r3, d10
 8002454:	f7fe f890 	bl	8000578 <__aeabi_dmul>
 8002458:	4622      	mov	r2, r4
 800245a:	462b      	mov	r3, r5
 800245c:	f7fd fed6 	bl	800020c <__adddf3>
 8002460:	4642      	mov	r2, r8
 8002462:	4604      	mov	r4, r0
 8002464:	460d      	mov	r5, r1
 8002466:	464b      	mov	r3, r9
 8002468:	4640      	mov	r0, r8
 800246a:	4649      	mov	r1, r9
 800246c:	f7fe f884 	bl	8000578 <__aeabi_dmul>
 8002470:	ec45 4b19 	vmov	d9, r4, r5
 8002474:	4b69      	ldr	r3, [pc, #420]	; (800261c <__ieee754_pow+0x5bc>)
 8002476:	2200      	movs	r2, #0
 8002478:	4682      	mov	sl, r0
 800247a:	468b      	mov	fp, r1
 800247c:	f7fd fec6 	bl	800020c <__adddf3>
 8002480:	ec53 2b19 	vmov	r2, r3, d9
 8002484:	f7fd fec2 	bl	800020c <__adddf3>
 8002488:	9c00      	ldr	r4, [sp, #0]
 800248a:	460d      	mov	r5, r1
 800248c:	4622      	mov	r2, r4
 800248e:	462b      	mov	r3, r5
 8002490:	4640      	mov	r0, r8
 8002492:	4649      	mov	r1, r9
 8002494:	f7fe f870 	bl	8000578 <__aeabi_dmul>
 8002498:	4b60      	ldr	r3, [pc, #384]	; (800261c <__ieee754_pow+0x5bc>)
 800249a:	4680      	mov	r8, r0
 800249c:	4689      	mov	r9, r1
 800249e:	2200      	movs	r2, #0
 80024a0:	4620      	mov	r0, r4
 80024a2:	4629      	mov	r1, r5
 80024a4:	f7fd feb0 	bl	8000208 <__aeabi_dsub>
 80024a8:	4652      	mov	r2, sl
 80024aa:	465b      	mov	r3, fp
 80024ac:	f7fd feac 	bl	8000208 <__aeabi_dsub>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	ec51 0b19 	vmov	r0, r1, d9
 80024b8:	f7fd fea6 	bl	8000208 <__aeabi_dsub>
 80024bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80024c0:	f7fe f85a 	bl	8000578 <__aeabi_dmul>
 80024c4:	ec49 8b18 	vmov	d8, r8, r9
 80024c8:	4622      	mov	r2, r4
 80024ca:	4680      	mov	r8, r0
 80024cc:	4689      	mov	r9, r1
 80024ce:	462b      	mov	r3, r5
 80024d0:	ec51 0b1a 	vmov	r0, r1, d10
 80024d4:	f7fe f850 	bl	8000578 <__aeabi_dmul>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4640      	mov	r0, r8
 80024de:	4649      	mov	r1, r9
 80024e0:	f7fd fe94 	bl	800020c <__adddf3>
 80024e4:	4682      	mov	sl, r0
 80024e6:	468b      	mov	fp, r1
 80024e8:	4652      	mov	r2, sl
 80024ea:	465b      	mov	r3, fp
 80024ec:	ec51 0b18 	vmov	r0, r1, d8
 80024f0:	f7fd fe8c 	bl	800020c <__adddf3>
 80024f4:	9c00      	ldr	r4, [sp, #0]
 80024f6:	a33e      	add	r3, pc, #248	; (adr r3, 80025f0 <__ieee754_pow+0x590>)
 80024f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fc:	4620      	mov	r0, r4
 80024fe:	460d      	mov	r5, r1
 8002500:	f7fe f83a 	bl	8000578 <__aeabi_dmul>
 8002504:	ec53 2b18 	vmov	r2, r3, d8
 8002508:	4680      	mov	r8, r0
 800250a:	4689      	mov	r9, r1
 800250c:	4620      	mov	r0, r4
 800250e:	4629      	mov	r1, r5
 8002510:	f7fd fe7a 	bl	8000208 <__aeabi_dsub>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4650      	mov	r0, sl
 800251a:	4659      	mov	r1, fp
 800251c:	f7fd fe74 	bl	8000208 <__aeabi_dsub>
 8002520:	a335      	add	r3, pc, #212	; (adr r3, 80025f8 <__ieee754_pow+0x598>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	f7fe f827 	bl	8000578 <__aeabi_dmul>
 800252a:	ec49 8b19 	vmov	d9, r8, r9
 800252e:	a334      	add	r3, pc, #208	; (adr r3, 8002600 <__ieee754_pow+0x5a0>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	4680      	mov	r8, r0
 8002536:	4689      	mov	r9, r1
 8002538:	4620      	mov	r0, r4
 800253a:	4629      	mov	r1, r5
 800253c:	f7fe f81c 	bl	8000578 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4640      	mov	r0, r8
 8002546:	4649      	mov	r1, r9
 8002548:	f7fd fe60 	bl	800020c <__adddf3>
 800254c:	ec53 2b1c 	vmov	r2, r3, d12
 8002550:	f7fd fe5c 	bl	800020c <__adddf3>
 8002554:	4682      	mov	sl, r0
 8002556:	9807      	ldr	r0, [sp, #28]
 8002558:	468b      	mov	fp, r1
 800255a:	f7fd ffa3 	bl	80004a4 <__aeabi_i2d>
 800255e:	4652      	mov	r2, sl
 8002560:	4680      	mov	r8, r0
 8002562:	4689      	mov	r9, r1
 8002564:	465b      	mov	r3, fp
 8002566:	ec51 0b19 	vmov	r0, r1, d9
 800256a:	f7fd fe4f 	bl	800020c <__adddf3>
 800256e:	ec53 2b1b 	vmov	r2, r3, d11
 8002572:	f7fd fe4b 	bl	800020c <__adddf3>
 8002576:	4642      	mov	r2, r8
 8002578:	464b      	mov	r3, r9
 800257a:	f7fd fe47 	bl	800020c <__adddf3>
 800257e:	9c00      	ldr	r4, [sp, #0]
 8002580:	4642      	mov	r2, r8
 8002582:	464b      	mov	r3, r9
 8002584:	4620      	mov	r0, r4
 8002586:	460d      	mov	r5, r1
 8002588:	f7fd fe3e 	bl	8000208 <__aeabi_dsub>
 800258c:	ec53 2b1b 	vmov	r2, r3, d11
 8002590:	f7fd fe3a 	bl	8000208 <__aeabi_dsub>
 8002594:	ec53 2b19 	vmov	r2, r3, d9
 8002598:	f7fd fe36 	bl	8000208 <__aeabi_dsub>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4650      	mov	r0, sl
 80025a2:	4659      	mov	r1, fp
 80025a4:	f7fd fe30 	bl	8000208 <__aeabi_dsub>
 80025a8:	4682      	mov	sl, r0
 80025aa:	468b      	mov	fp, r1
 80025ac:	e038      	b.n	8002620 <__ieee754_pow+0x5c0>
 80025ae:	bf00      	nop
	...
 80025bc:	3ff00000 	.word	0x3ff00000
 80025c0:	4a454eef 	.word	0x4a454eef
 80025c4:	3fca7e28 	.word	0x3fca7e28
 80025c8:	93c9db65 	.word	0x93c9db65
 80025cc:	3fcd864a 	.word	0x3fcd864a
 80025d0:	a91d4101 	.word	0xa91d4101
 80025d4:	3fd17460 	.word	0x3fd17460
 80025d8:	518f264d 	.word	0x518f264d
 80025dc:	3fd55555 	.word	0x3fd55555
 80025e0:	db6fabff 	.word	0xdb6fabff
 80025e4:	3fdb6db6 	.word	0x3fdb6db6
 80025e8:	33333303 	.word	0x33333303
 80025ec:	3fe33333 	.word	0x3fe33333
 80025f0:	e0000000 	.word	0xe0000000
 80025f4:	3feec709 	.word	0x3feec709
 80025f8:	dc3a03fd 	.word	0xdc3a03fd
 80025fc:	3feec709 	.word	0x3feec709
 8002600:	145b01f5 	.word	0x145b01f5
 8002604:	be3e2fe0 	.word	0xbe3e2fe0
 8002608:	7ff00000 	.word	0x7ff00000
 800260c:	43400000 	.word	0x43400000
 8002610:	0003988e 	.word	0x0003988e
 8002614:	000bb679 	.word	0x000bb679
 8002618:	3ff00000 	.word	0x3ff00000
 800261c:	40080000 	.word	0x40080000
 8002620:	9b03      	ldr	r3, [sp, #12]
 8002622:	9a06      	ldr	r2, [sp, #24]
 8002624:	3b01      	subs	r3, #1
 8002626:	4313      	orrs	r3, r2
 8002628:	f040 8178 	bne.w	800291c <__ieee754_pow+0x8bc>
 800262c:	ed9f 7bc4 	vldr	d7, [pc, #784]	; 8002940 <__ieee754_pow+0x8e0>
 8002630:	eeb0 9a47 	vmov.f32	s18, s14
 8002634:	eef0 9a67 	vmov.f32	s19, s15
 8002638:	2300      	movs	r3, #0
 800263a:	e9cd 6700 	strd	r6, r7, [sp]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	e9dd 8900 	ldrd	r8, r9, [sp]
 8002644:	4630      	mov	r0, r6
 8002646:	4642      	mov	r2, r8
 8002648:	4639      	mov	r1, r7
 800264a:	464b      	mov	r3, r9
 800264c:	f7fd fddc 	bl	8000208 <__aeabi_dsub>
 8002650:	4622      	mov	r2, r4
 8002652:	462b      	mov	r3, r5
 8002654:	f7fd ff90 	bl	8000578 <__aeabi_dmul>
 8002658:	4632      	mov	r2, r6
 800265a:	463b      	mov	r3, r7
 800265c:	4606      	mov	r6, r0
 800265e:	460f      	mov	r7, r1
 8002660:	4650      	mov	r0, sl
 8002662:	4659      	mov	r1, fp
 8002664:	f7fd ff88 	bl	8000578 <__aeabi_dmul>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4630      	mov	r0, r6
 800266e:	4639      	mov	r1, r7
 8002670:	f7fd fdcc 	bl	800020c <__adddf3>
 8002674:	4642      	mov	r2, r8
 8002676:	4682      	mov	sl, r0
 8002678:	468b      	mov	fp, r1
 800267a:	464b      	mov	r3, r9
 800267c:	4620      	mov	r0, r4
 800267e:	4629      	mov	r1, r5
 8002680:	f7fd ff7a 	bl	8000578 <__aeabi_dmul>
 8002684:	4606      	mov	r6, r0
 8002686:	460f      	mov	r7, r1
 8002688:	463b      	mov	r3, r7
 800268a:	4650      	mov	r0, sl
 800268c:	4659      	mov	r1, fp
 800268e:	4632      	mov	r2, r6
 8002690:	f7fd fdbc 	bl	800020c <__adddf3>
 8002694:	4bc4      	ldr	r3, [pc, #784]	; (80029a8 <__ieee754_pow+0x948>)
 8002696:	4299      	cmp	r1, r3
 8002698:	4604      	mov	r4, r0
 800269a:	460d      	mov	r5, r1
 800269c:	4688      	mov	r8, r1
 800269e:	f340 8117 	ble.w	80028d0 <__ieee754_pow+0x870>
 80026a2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80026a6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80026aa:	4303      	orrs	r3, r0
 80026ac:	f040 822a 	bne.w	8002b04 <__ieee754_pow+0xaa4>
 80026b0:	a3a5      	add	r3, pc, #660	; (adr r3, 8002948 <__ieee754_pow+0x8e8>)
 80026b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b6:	4650      	mov	r0, sl
 80026b8:	4659      	mov	r1, fp
 80026ba:	f7fd fda7 	bl	800020c <__adddf3>
 80026be:	4632      	mov	r2, r6
 80026c0:	ec41 0b18 	vmov	d8, r0, r1
 80026c4:	463b      	mov	r3, r7
 80026c6:	4620      	mov	r0, r4
 80026c8:	4629      	mov	r1, r5
 80026ca:	f7fd fd9d 	bl	8000208 <__aeabi_dsub>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	ec51 0b18 	vmov	r0, r1, d8
 80026d6:	f7fe f9df 	bl	8000a98 <__aeabi_dcmpgt>
 80026da:	2800      	cmp	r0, #0
 80026dc:	f040 8212 	bne.w	8002b04 <__ieee754_pow+0xaa4>
 80026e0:	f3c8 530a 	ubfx	r3, r8, #20, #11
 80026e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026e8:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80026ec:	fa42 f303 	asr.w	r3, r2, r3
 80026f0:	4443      	add	r3, r8
 80026f2:	49ae      	ldr	r1, [pc, #696]	; (80029ac <__ieee754_pow+0x94c>)
 80026f4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80026f8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80026fc:	fa41 fc02 	asr.w	ip, r1, r2
 8002700:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8002704:	ea23 010c 	bic.w	r1, r3, ip
 8002708:	f1c2 0414 	rsb	r4, r2, #20
 800270c:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 8002710:	f1b8 0f00 	cmp.w	r8, #0
 8002714:	460b      	mov	r3, r1
 8002716:	fa45 f104 	asr.w	r1, r5, r4
 800271a:	9103      	str	r1, [sp, #12]
 800271c:	f04f 0000 	mov.w	r0, #0
 8002720:	bfb8      	it	lt
 8002722:	4249      	neglt	r1, r1
 8002724:	4602      	mov	r2, r0
 8002726:	bfb8      	it	lt
 8002728:	9103      	strlt	r1, [sp, #12]
 800272a:	4630      	mov	r0, r6
 800272c:	4639      	mov	r1, r7
 800272e:	f7fd fd6b 	bl	8000208 <__aeabi_dsub>
 8002732:	4606      	mov	r6, r0
 8002734:	460f      	mov	r7, r1
 8002736:	463b      	mov	r3, r7
 8002738:	4650      	mov	r0, sl
 800273a:	4659      	mov	r1, fp
 800273c:	4632      	mov	r2, r6
 800273e:	f7fd fd65 	bl	800020c <__adddf3>
 8002742:	9b03      	ldr	r3, [sp, #12]
 8002744:	051b      	lsls	r3, r3, #20
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	460d      	mov	r5, r1
 800274a:	2400      	movs	r4, #0
 800274c:	a380      	add	r3, pc, #512	; (adr r3, 8002950 <__ieee754_pow+0x8f0>)
 800274e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002752:	4620      	mov	r0, r4
 8002754:	4629      	mov	r1, r5
 8002756:	f7fd ff0f 	bl	8000578 <__aeabi_dmul>
 800275a:	4632      	mov	r2, r6
 800275c:	4680      	mov	r8, r0
 800275e:	4689      	mov	r9, r1
 8002760:	463b      	mov	r3, r7
 8002762:	4620      	mov	r0, r4
 8002764:	4629      	mov	r1, r5
 8002766:	f7fd fd4f 	bl	8000208 <__aeabi_dsub>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4650      	mov	r0, sl
 8002770:	4659      	mov	r1, fp
 8002772:	f7fd fd49 	bl	8000208 <__aeabi_dsub>
 8002776:	a378      	add	r3, pc, #480	; (adr r3, 8002958 <__ieee754_pow+0x8f8>)
 8002778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277c:	f7fd fefc 	bl	8000578 <__aeabi_dmul>
 8002780:	a377      	add	r3, pc, #476	; (adr r3, 8002960 <__ieee754_pow+0x900>)
 8002782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002786:	4606      	mov	r6, r0
 8002788:	460f      	mov	r7, r1
 800278a:	4620      	mov	r0, r4
 800278c:	4629      	mov	r1, r5
 800278e:	f7fd fef3 	bl	8000578 <__aeabi_dmul>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4630      	mov	r0, r6
 8002798:	4639      	mov	r1, r7
 800279a:	f7fd fd37 	bl	800020c <__adddf3>
 800279e:	4606      	mov	r6, r0
 80027a0:	460f      	mov	r7, r1
 80027a2:	4632      	mov	r2, r6
 80027a4:	463b      	mov	r3, r7
 80027a6:	4640      	mov	r0, r8
 80027a8:	4649      	mov	r1, r9
 80027aa:	f7fd fd2f 	bl	800020c <__adddf3>
 80027ae:	4642      	mov	r2, r8
 80027b0:	464b      	mov	r3, r9
 80027b2:	4604      	mov	r4, r0
 80027b4:	460d      	mov	r5, r1
 80027b6:	f7fd fd27 	bl	8000208 <__aeabi_dsub>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4630      	mov	r0, r6
 80027c0:	4639      	mov	r1, r7
 80027c2:	f7fd fd21 	bl	8000208 <__aeabi_dsub>
 80027c6:	4622      	mov	r2, r4
 80027c8:	4682      	mov	sl, r0
 80027ca:	468b      	mov	fp, r1
 80027cc:	462b      	mov	r3, r5
 80027ce:	4620      	mov	r0, r4
 80027d0:	4629      	mov	r1, r5
 80027d2:	f7fd fed1 	bl	8000578 <__aeabi_dmul>
 80027d6:	a364      	add	r3, pc, #400	; (adr r3, 8002968 <__ieee754_pow+0x908>)
 80027d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027dc:	4606      	mov	r6, r0
 80027de:	460f      	mov	r7, r1
 80027e0:	f7fd feca 	bl	8000578 <__aeabi_dmul>
 80027e4:	a362      	add	r3, pc, #392	; (adr r3, 8002970 <__ieee754_pow+0x910>)
 80027e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ea:	f7fd fd0d 	bl	8000208 <__aeabi_dsub>
 80027ee:	4632      	mov	r2, r6
 80027f0:	463b      	mov	r3, r7
 80027f2:	f7fd fec1 	bl	8000578 <__aeabi_dmul>
 80027f6:	a360      	add	r3, pc, #384	; (adr r3, 8002978 <__ieee754_pow+0x918>)
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	f7fd fd06 	bl	800020c <__adddf3>
 8002800:	4632      	mov	r2, r6
 8002802:	463b      	mov	r3, r7
 8002804:	f7fd feb8 	bl	8000578 <__aeabi_dmul>
 8002808:	a35d      	add	r3, pc, #372	; (adr r3, 8002980 <__ieee754_pow+0x920>)
 800280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280e:	f7fd fcfb 	bl	8000208 <__aeabi_dsub>
 8002812:	4632      	mov	r2, r6
 8002814:	463b      	mov	r3, r7
 8002816:	f7fd feaf 	bl	8000578 <__aeabi_dmul>
 800281a:	a35b      	add	r3, pc, #364	; (adr r3, 8002988 <__ieee754_pow+0x928>)
 800281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002820:	f7fd fcf4 	bl	800020c <__adddf3>
 8002824:	4632      	mov	r2, r6
 8002826:	463b      	mov	r3, r7
 8002828:	f7fd fea6 	bl	8000578 <__aeabi_dmul>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4620      	mov	r0, r4
 8002832:	4629      	mov	r1, r5
 8002834:	f7fd fce8 	bl	8000208 <__aeabi_dsub>
 8002838:	4606      	mov	r6, r0
 800283a:	460f      	mov	r7, r1
 800283c:	4632      	mov	r2, r6
 800283e:	463b      	mov	r3, r7
 8002840:	4620      	mov	r0, r4
 8002842:	4629      	mov	r1, r5
 8002844:	f7fd fe98 	bl	8000578 <__aeabi_dmul>
 8002848:	2200      	movs	r2, #0
 800284a:	4680      	mov	r8, r0
 800284c:	4689      	mov	r9, r1
 800284e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002852:	4630      	mov	r0, r6
 8002854:	4639      	mov	r1, r7
 8002856:	f7fd fcd7 	bl	8000208 <__aeabi_dsub>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4640      	mov	r0, r8
 8002860:	4649      	mov	r1, r9
 8002862:	f7fd ffb3 	bl	80007cc <__aeabi_ddiv>
 8002866:	4652      	mov	r2, sl
 8002868:	4606      	mov	r6, r0
 800286a:	460f      	mov	r7, r1
 800286c:	465b      	mov	r3, fp
 800286e:	4620      	mov	r0, r4
 8002870:	4629      	mov	r1, r5
 8002872:	f7fd fe81 	bl	8000578 <__aeabi_dmul>
 8002876:	4652      	mov	r2, sl
 8002878:	465b      	mov	r3, fp
 800287a:	f7fd fcc7 	bl	800020c <__adddf3>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4630      	mov	r0, r6
 8002884:	4639      	mov	r1, r7
 8002886:	f7fd fcbf 	bl	8000208 <__aeabi_dsub>
 800288a:	4622      	mov	r2, r4
 800288c:	462b      	mov	r3, r5
 800288e:	f7fd fcbb 	bl	8000208 <__aeabi_dsub>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	2000      	movs	r0, #0
 8002898:	4945      	ldr	r1, [pc, #276]	; (80029b0 <__ieee754_pow+0x950>)
 800289a:	f7fd fcb5 	bl	8000208 <__aeabi_dsub>
 800289e:	460b      	mov	r3, r1
 80028a0:	9900      	ldr	r1, [sp, #0]
 80028a2:	4419      	add	r1, r3
 80028a4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80028a8:	4602      	mov	r2, r0
 80028aa:	f2c0 8169 	blt.w	8002b80 <__ieee754_pow+0xb20>
 80028ae:	4610      	mov	r0, r2
 80028b0:	ec53 2b19 	vmov	r2, r3, d9
 80028b4:	f7fd fe60 	bl	8000578 <__aeabi_dmul>
 80028b8:	e9cd 0100 	strd	r0, r1, [sp]
 80028bc:	e41e      	b.n	80020fc <__ieee754_pow+0x9c>
 80028be:	f1bb 0f00 	cmp.w	fp, #0
 80028c2:	f6ff ac95 	blt.w	80021f0 <__ieee754_pow+0x190>
 80028c6:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8002990 <__ieee754_pow+0x930>
 80028ca:	ed8d 7b00 	vstr	d7, [sp]
 80028ce:	e415      	b.n	80020fc <__ieee754_pow+0x9c>
 80028d0:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80029b8 <__ieee754_pow+0x958>
 80028d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80028d8:	4563      	cmp	r3, ip
 80028da:	f340 810b 	ble.w	8002af4 <__ieee754_pow+0xa94>
 80028de:	4b35      	ldr	r3, [pc, #212]	; (80029b4 <__ieee754_pow+0x954>)
 80028e0:	440b      	add	r3, r1
 80028e2:	4303      	orrs	r3, r0
 80028e4:	d10a      	bne.n	80028fc <__ieee754_pow+0x89c>
 80028e6:	4632      	mov	r2, r6
 80028e8:	463b      	mov	r3, r7
 80028ea:	f7fd fc8d 	bl	8000208 <__aeabi_dsub>
 80028ee:	4652      	mov	r2, sl
 80028f0:	465b      	mov	r3, fp
 80028f2:	f7fe f8c7 	bl	8000a84 <__aeabi_dcmpge>
 80028f6:	2800      	cmp	r0, #0
 80028f8:	f43f aef2 	beq.w	80026e0 <__ieee754_pow+0x680>
 80028fc:	a326      	add	r3, pc, #152	; (adr r3, 8002998 <__ieee754_pow+0x938>)
 80028fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002902:	ec51 0b19 	vmov	r0, r1, d9
 8002906:	f7fd fe37 	bl	8000578 <__aeabi_dmul>
 800290a:	a323      	add	r3, pc, #140	; (adr r3, 8002998 <__ieee754_pow+0x938>)
 800290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002910:	f7fd fe32 	bl	8000578 <__aeabi_dmul>
 8002914:	e9cd 0100 	strd	r0, r1, [sp]
 8002918:	f7ff bbf0 	b.w	80020fc <__ieee754_pow+0x9c>
 800291c:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80029a0 <__ieee754_pow+0x940>
 8002920:	eeb0 9a47 	vmov.f32	s18, s14
 8002924:	eef0 9a67 	vmov.f32	s19, s15
 8002928:	e686      	b.n	8002638 <__ieee754_pow+0x5d8>
 800292a:	f1bb 0f00 	cmp.w	fp, #0
 800292e:	daca      	bge.n	80028c6 <__ieee754_pow+0x866>
 8002930:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8002934:	9600      	str	r6, [sp, #0]
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	f7ff bbe0 	b.w	80020fc <__ieee754_pow+0x9c>
 800293c:	f3af 8000 	nop.w
 8002940:	00000000 	.word	0x00000000
 8002944:	bff00000 	.word	0xbff00000
 8002948:	652b82fe 	.word	0x652b82fe
 800294c:	3c971547 	.word	0x3c971547
 8002950:	00000000 	.word	0x00000000
 8002954:	3fe62e43 	.word	0x3fe62e43
 8002958:	fefa39ef 	.word	0xfefa39ef
 800295c:	3fe62e42 	.word	0x3fe62e42
 8002960:	0ca86c39 	.word	0x0ca86c39
 8002964:	be205c61 	.word	0xbe205c61
 8002968:	72bea4d0 	.word	0x72bea4d0
 800296c:	3e663769 	.word	0x3e663769
 8002970:	c5d26bf1 	.word	0xc5d26bf1
 8002974:	3ebbbd41 	.word	0x3ebbbd41
 8002978:	af25de2c 	.word	0xaf25de2c
 800297c:	3f11566a 	.word	0x3f11566a
 8002980:	16bebd93 	.word	0x16bebd93
 8002984:	3f66c16c 	.word	0x3f66c16c
 8002988:	5555553e 	.word	0x5555553e
 800298c:	3fc55555 	.word	0x3fc55555
	...
 8002998:	c2f8f359 	.word	0xc2f8f359
 800299c:	01a56e1f 	.word	0x01a56e1f
 80029a0:	00000000 	.word	0x00000000
 80029a4:	3ff00000 	.word	0x3ff00000
 80029a8:	408fffff 	.word	0x408fffff
 80029ac:	000fffff 	.word	0x000fffff
 80029b0:	3ff00000 	.word	0x3ff00000
 80029b4:	3f6f3400 	.word	0x3f6f3400
 80029b8:	4090cbff 	.word	0x4090cbff
 80029bc:	4598      	cmp	r8, r3
 80029be:	f6ff af7e 	blt.w	80028be <__ieee754_pow+0x85e>
 80029c2:	4b91      	ldr	r3, [pc, #580]	; (8002c08 <__ieee754_pow+0xba8>)
 80029c4:	4598      	cmp	r8, r3
 80029c6:	f73f ac0f 	bgt.w	80021e8 <__ieee754_pow+0x188>
 80029ca:	4b8f      	ldr	r3, [pc, #572]	; (8002c08 <__ieee754_pow+0xba8>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80029d2:	f7fd fc19 	bl	8000208 <__aeabi_dsub>
 80029d6:	a378      	add	r3, pc, #480	; (adr r3, 8002bb8 <__ieee754_pow+0xb58>)
 80029d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029dc:	4604      	mov	r4, r0
 80029de:	460d      	mov	r5, r1
 80029e0:	f7fd fdca 	bl	8000578 <__aeabi_dmul>
 80029e4:	a376      	add	r3, pc, #472	; (adr r3, 8002bc0 <__ieee754_pow+0xb60>)
 80029e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ea:	4682      	mov	sl, r0
 80029ec:	468b      	mov	fp, r1
 80029ee:	4620      	mov	r0, r4
 80029f0:	4629      	mov	r1, r5
 80029f2:	f7fd fdc1 	bl	8000578 <__aeabi_dmul>
 80029f6:	4b85      	ldr	r3, [pc, #532]	; (8002c0c <__ieee754_pow+0xbac>)
 80029f8:	4680      	mov	r8, r0
 80029fa:	4689      	mov	r9, r1
 80029fc:	2200      	movs	r2, #0
 80029fe:	4620      	mov	r0, r4
 8002a00:	4629      	mov	r1, r5
 8002a02:	f7fd fdb9 	bl	8000578 <__aeabi_dmul>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	a16f      	add	r1, pc, #444	; (adr r1, 8002bc8 <__ieee754_pow+0xb68>)
 8002a0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a10:	f7fd fbfa 	bl	8000208 <__aeabi_dsub>
 8002a14:	4622      	mov	r2, r4
 8002a16:	462b      	mov	r3, r5
 8002a18:	f7fd fdae 	bl	8000578 <__aeabi_dmul>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	2000      	movs	r0, #0
 8002a22:	497b      	ldr	r1, [pc, #492]	; (8002c10 <__ieee754_pow+0xbb0>)
 8002a24:	f7fd fbf0 	bl	8000208 <__aeabi_dsub>
 8002a28:	4622      	mov	r2, r4
 8002a2a:	462b      	mov	r3, r5
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	460d      	mov	r5, r1
 8002a30:	4610      	mov	r0, r2
 8002a32:	4619      	mov	r1, r3
 8002a34:	f7fd fda0 	bl	8000578 <__aeabi_dmul>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	4629      	mov	r1, r5
 8002a40:	f7fd fd9a 	bl	8000578 <__aeabi_dmul>
 8002a44:	a362      	add	r3, pc, #392	; (adr r3, 8002bd0 <__ieee754_pow+0xb70>)
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4a:	f7fd fd95 	bl	8000578 <__aeabi_dmul>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4640      	mov	r0, r8
 8002a54:	4649      	mov	r1, r9
 8002a56:	f7fd fbd7 	bl	8000208 <__aeabi_dsub>
 8002a5a:	4680      	mov	r8, r0
 8002a5c:	4689      	mov	r9, r1
 8002a5e:	4650      	mov	r0, sl
 8002a60:	4659      	mov	r1, fp
 8002a62:	4642      	mov	r2, r8
 8002a64:	464b      	mov	r3, r9
 8002a66:	f7fd fbd1 	bl	800020c <__adddf3>
 8002a6a:	2400      	movs	r4, #0
 8002a6c:	4652      	mov	r2, sl
 8002a6e:	465b      	mov	r3, fp
 8002a70:	4620      	mov	r0, r4
 8002a72:	460d      	mov	r5, r1
 8002a74:	f7fd fbc8 	bl	8000208 <__aeabi_dsub>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4640      	mov	r0, r8
 8002a7e:	4649      	mov	r1, r9
 8002a80:	f7fd fbc2 	bl	8000208 <__aeabi_dsub>
 8002a84:	4682      	mov	sl, r0
 8002a86:	468b      	mov	fp, r1
 8002a88:	e5ca      	b.n	8002620 <__ieee754_pow+0x5c0>
 8002a8a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8002bd8 <__ieee754_pow+0xb78>
 8002a8e:	eeb0 ba47 	vmov.f32	s22, s14
 8002a92:	eef0 ba67 	vmov.f32	s23, s15
 8002a96:	eeb0 ca47 	vmov.f32	s24, s14
 8002a9a:	eef0 ca67 	vmov.f32	s25, s15
 8002a9e:	ed9f 7b50 	vldr	d7, [pc, #320]	; 8002be0 <__ieee754_pow+0xb80>
 8002aa2:	f04f 0900 	mov.w	r9, #0
 8002aa6:	ec54 3b17 	vmov	r3, r4, d7
 8002aaa:	e41d      	b.n	80022e8 <__ieee754_pow+0x288>
 8002aac:	2000      	movs	r0, #0
 8002aae:	f7ff bbf3 	b.w	8002298 <__ieee754_pow+0x238>
 8002ab2:	4955      	ldr	r1, [pc, #340]	; (8002c08 <__ieee754_pow+0xba8>)
 8002ab4:	4622      	mov	r2, r4
 8002ab6:	462b      	mov	r3, r5
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f7fd fe87 	bl	80007cc <__aeabi_ddiv>
 8002abe:	e9cd 0100 	strd	r0, r1, [sp]
 8002ac2:	f7ff bb1b 	b.w	80020fc <__ieee754_pow+0x9c>
 8002ac6:	4622      	mov	r2, r4
 8002ac8:	462b      	mov	r3, r5
 8002aca:	4620      	mov	r0, r4
 8002acc:	4629      	mov	r1, r5
 8002ace:	f7fd fd53 	bl	8000578 <__aeabi_dmul>
 8002ad2:	e9cd 0100 	strd	r0, r1, [sp]
 8002ad6:	f7ff bb11 	b.w	80020fc <__ieee754_pow+0x9c>
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d142      	bne.n	8002b64 <__ieee754_pow+0xb04>
 8002ade:	f1c1 0114 	rsb	r1, r1, #20
 8002ae2:	fa4a f001 	asr.w	r0, sl, r1
 8002ae6:	fa00 f101 	lsl.w	r1, r0, r1
 8002aea:	4551      	cmp	r1, sl
 8002aec:	d05a      	beq.n	8002ba4 <__ieee754_pow+0xb44>
 8002aee:	9303      	str	r3, [sp, #12]
 8002af0:	f7ff bae0 	b.w	80020b4 <__ieee754_pow+0x54>
 8002af4:	4a46      	ldr	r2, [pc, #280]	; (8002c10 <__ieee754_pow+0xbb0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	dc5b      	bgt.n	8002bb2 <__ieee754_pow+0xb52>
 8002afa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8002afe:	9100      	str	r1, [sp, #0]
 8002b00:	9103      	str	r1, [sp, #12]
 8002b02:	e622      	b.n	800274a <__ieee754_pow+0x6ea>
 8002b04:	a338      	add	r3, pc, #224	; (adr r3, 8002be8 <__ieee754_pow+0xb88>)
 8002b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0a:	ec51 0b19 	vmov	r0, r1, d9
 8002b0e:	f7fd fd33 	bl	8000578 <__aeabi_dmul>
 8002b12:	a335      	add	r3, pc, #212	; (adr r3, 8002be8 <__ieee754_pow+0xb88>)
 8002b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b18:	f7fd fd2e 	bl	8000578 <__aeabi_dmul>
 8002b1c:	e9cd 0100 	strd	r0, r1, [sp]
 8002b20:	f7ff baec 	b.w	80020fc <__ieee754_pow+0x9c>
 8002b24:	9b03      	ldr	r3, [sp, #12]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	f47f aae8 	bne.w	80020fc <__ieee754_pow+0x9c>
 8002b2c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8002b30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002b34:	e9cd 2300 	strd	r2, r3, [sp]
 8002b38:	f7ff bae0 	b.w	80020fc <__ieee754_pow+0x9c>
 8002b3c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8002bf0 <__ieee754_pow+0xb90>
 8002b40:	eeb0 ba47 	vmov.f32	s22, s14
 8002b44:	eef0 ba67 	vmov.f32	s23, s15
 8002b48:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8002bf8 <__ieee754_pow+0xb98>
 8002b4c:	eeb0 ca47 	vmov.f32	s24, s14
 8002b50:	eef0 ca67 	vmov.f32	s25, s15
 8002b54:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8002c00 <__ieee754_pow+0xba0>
 8002b58:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 8002b5c:	ec54 3b17 	vmov	r3, r4, d7
 8002b60:	f7ff bbc2 	b.w	80022e8 <__ieee754_pow+0x288>
 8002b64:	ec45 4b10 	vmov	d0, r4, r5
 8002b68:	9203      	str	r2, [sp, #12]
 8002b6a:	f014 f897 	bl	8016c9c <fabs>
 8002b6e:	9a03      	ldr	r2, [sp, #12]
 8002b70:	ed8d 0b00 	vstr	d0, [sp]
 8002b74:	2a00      	cmp	r2, #0
 8002b76:	f47f ab61 	bne.w	800223c <__ieee754_pow+0x1dc>
 8002b7a:	9203      	str	r2, [sp, #12]
 8002b7c:	f7ff baf5 	b.w	800216a <__ieee754_pow+0x10a>
 8002b80:	9803      	ldr	r0, [sp, #12]
 8002b82:	ec43 2b10 	vmov	d0, r2, r3
 8002b86:	f000 f84f 	bl	8002c28 <scalbn>
 8002b8a:	ec51 0b10 	vmov	r0, r1, d0
 8002b8e:	e68f      	b.n	80028b0 <__ieee754_pow+0x850>
 8002b90:	f000 0001 	and.w	r0, r0, #1
 8002b94:	f1c0 0102 	rsb	r1, r0, #2
 8002b98:	9103      	str	r1, [sp, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f43f aa8a 	beq.w	80020b4 <__ieee754_pow+0x54>
 8002ba0:	f7ff bada 	b.w	8002158 <__ieee754_pow+0xf8>
 8002ba4:	f000 0001 	and.w	r0, r0, #1
 8002ba8:	f1c0 0302 	rsb	r3, r0, #2
 8002bac:	9303      	str	r3, [sp, #12]
 8002bae:	f7ff ba81 	b.w	80020b4 <__ieee754_pow+0x54>
 8002bb2:	151b      	asrs	r3, r3, #20
 8002bb4:	e596      	b.n	80026e4 <__ieee754_pow+0x684>
 8002bb6:	bf00      	nop
 8002bb8:	60000000 	.word	0x60000000
 8002bbc:	3ff71547 	.word	0x3ff71547
 8002bc0:	f85ddf44 	.word	0xf85ddf44
 8002bc4:	3e54ae0b 	.word	0x3e54ae0b
 8002bc8:	55555555 	.word	0x55555555
 8002bcc:	3fd55555 	.word	0x3fd55555
 8002bd0:	652b82fe 	.word	0x652b82fe
 8002bd4:	3ff71547 	.word	0x3ff71547
	...
 8002be4:	3ff00000 	.word	0x3ff00000
 8002be8:	8800759c 	.word	0x8800759c
 8002bec:	7e37e43c 	.word	0x7e37e43c
 8002bf0:	40000000 	.word	0x40000000
 8002bf4:	3fe2b803 	.word	0x3fe2b803
 8002bf8:	43cfd006 	.word	0x43cfd006
 8002bfc:	3e4cfdeb 	.word	0x3e4cfdeb
 8002c00:	00000000 	.word	0x00000000
 8002c04:	3ff80000 	.word	0x3ff80000
 8002c08:	3ff00000 	.word	0x3ff00000
 8002c0c:	3fd00000 	.word	0x3fd00000
 8002c10:	3fe00000 	.word	0x3fe00000
 8002c14:	00000000 	.word	0x00000000

08002c18 <nan>:
 8002c18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8002c20 <nan+0x8>
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	00000000 	.word	0x00000000
 8002c24:	7ff80000 	.word	0x7ff80000

08002c28 <scalbn>:
 8002c28:	b538      	push	{r3, r4, r5, lr}
 8002c2a:	ec53 2b10 	vmov	r2, r3, d0
 8002c2e:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8002c32:	461c      	mov	r4, r3
 8002c34:	4605      	mov	r5, r0
 8002c36:	bb81      	cbnz	r1, 8002c9a <scalbn+0x72>
 8002c38:	ee10 1a10 	vmov	r1, s0
 8002c3c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002c40:	4321      	orrs	r1, r4
 8002c42:	d029      	beq.n	8002c98 <scalbn+0x70>
 8002c44:	4619      	mov	r1, r3
 8002c46:	2200      	movs	r2, #0
 8002c48:	4b3d      	ldr	r3, [pc, #244]	; (8002d40 <scalbn+0x118>)
 8002c4a:	4c3e      	ldr	r4, [pc, #248]	; (8002d44 <scalbn+0x11c>)
 8002c4c:	ee10 0a10 	vmov	r0, s0
 8002c50:	f7fd fc92 	bl	8000578 <__aeabi_dmul>
 8002c54:	42a5      	cmp	r5, r4
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	db16      	blt.n	8002c8a <scalbn+0x62>
 8002c5c:	460c      	mov	r4, r1
 8002c5e:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8002c62:	3936      	subs	r1, #54	; 0x36
 8002c64:	4429      	add	r1, r5
 8002c66:	f240 70fe 	movw	r0, #2046	; 0x7fe
 8002c6a:	4281      	cmp	r1, r0
 8002c6c:	dc21      	bgt.n	8002cb2 <scalbn+0x8a>
 8002c6e:	2900      	cmp	r1, #0
 8002c70:	dc47      	bgt.n	8002d02 <scalbn+0xda>
 8002c72:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8002c76:	da34      	bge.n	8002ce2 <scalbn+0xba>
 8002c78:	f24c 3150 	movw	r1, #50000	; 0xc350
 8002c7c:	428d      	cmp	r5, r1
 8002c7e:	dc18      	bgt.n	8002cb2 <scalbn+0x8a>
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	a127      	add	r1, pc, #156	; (adr r1, 8002d20 <scalbn+0xf8>)
 8002c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c88:	db44      	blt.n	8002d14 <scalbn+0xec>
 8002c8a:	a325      	add	r3, pc, #148	; (adr r3, 8002d20 <scalbn+0xf8>)
 8002c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c90:	f7fd fc72 	bl	8000578 <__aeabi_dmul>
 8002c94:	ec41 0b10 	vmov	d0, r0, r1
 8002c98:	bd38      	pop	{r3, r4, r5, pc}
 8002c9a:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8002c9e:	4281      	cmp	r1, r0
 8002ca0:	d1e0      	bne.n	8002c64 <scalbn+0x3c>
 8002ca2:	ee10 0a10 	vmov	r0, s0
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f7fd fab0 	bl	800020c <__adddf3>
 8002cac:	ec41 0b10 	vmov	d0, r0, r1
 8002cb0:	bd38      	pop	{r3, r4, r5, pc}
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	a11c      	add	r1, pc, #112	; (adr r1, 8002d28 <scalbn+0x100>)
 8002cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cba:	db07      	blt.n	8002ccc <scalbn+0xa4>
 8002cbc:	a31a      	add	r3, pc, #104	; (adr r3, 8002d28 <scalbn+0x100>)
 8002cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc2:	f7fd fc59 	bl	8000578 <__aeabi_dmul>
 8002cc6:	ec41 0b10 	vmov	d0, r0, r1
 8002cca:	bd38      	pop	{r3, r4, r5, pc}
 8002ccc:	a118      	add	r1, pc, #96	; (adr r1, 8002d30 <scalbn+0x108>)
 8002cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cd2:	a315      	add	r3, pc, #84	; (adr r3, 8002d28 <scalbn+0x100>)
 8002cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd8:	f7fd fc4e 	bl	8000578 <__aeabi_dmul>
 8002cdc:	ec41 0b10 	vmov	d0, r0, r1
 8002ce0:	e7f3      	b.n	8002cca <scalbn+0xa2>
 8002ce2:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8002ce6:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
 8002cea:	3136      	adds	r1, #54	; 0x36
 8002cec:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <scalbn+0x120>)
 8002cf8:	f7fd fc3e 	bl	8000578 <__aeabi_dmul>
 8002cfc:	ec41 0b10 	vmov	d0, r0, r1
 8002d00:	bd38      	pop	{r3, r4, r5, pc}
 8002d02:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8002d06:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
 8002d0a:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
 8002d0e:	ec43 2b10 	vmov	d0, r2, r3
 8002d12:	bd38      	pop	{r3, r4, r5, pc}
 8002d14:	a108      	add	r1, pc, #32	; (adr r1, 8002d38 <scalbn+0x110>)
 8002d16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d1a:	e7b6      	b.n	8002c8a <scalbn+0x62>
 8002d1c:	f3af 8000 	nop.w
 8002d20:	c2f8f359 	.word	0xc2f8f359
 8002d24:	01a56e1f 	.word	0x01a56e1f
 8002d28:	8800759c 	.word	0x8800759c
 8002d2c:	7e37e43c 	.word	0x7e37e43c
 8002d30:	8800759c 	.word	0x8800759c
 8002d34:	fe37e43c 	.word	0xfe37e43c
 8002d38:	c2f8f359 	.word	0xc2f8f359
 8002d3c:	81a56e1f 	.word	0x81a56e1f
 8002d40:	43500000 	.word	0x43500000
 8002d44:	ffff3cb0 	.word	0xffff3cb0
 8002d48:	3c900000 	.word	0x3c900000
 8002d4c:	00000000 	.word	0x00000000

08002d50 <_dtoa_r>:
 8002d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d54:	ed2d 8b02 	vpush	{d8}
 8002d58:	ec57 6b10 	vmov	r6, r7, d0
 8002d5c:	b095      	sub	sp, #84	; 0x54
 8002d5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002d60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8002d64:	9105      	str	r1, [sp, #20]
 8002d66:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8002d6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8002d70:	b93d      	cbnz	r5, 8002d82 <_dtoa_r+0x32>
 8002d72:	2010      	movs	r0, #16
 8002d74:	f014 f900 	bl	8016f78 <malloc>
 8002d78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002d7c:	6260      	str	r0, [r4, #36]	; 0x24
 8002d7e:	6005      	str	r5, [r0, #0]
 8002d80:	60c5      	str	r5, [r0, #12]
 8002d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d84:	6819      	ldr	r1, [r3, #0]
 8002d86:	b151      	cbz	r1, 8002d9e <_dtoa_r+0x4e>
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	604a      	str	r2, [r1, #4]
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	4093      	lsls	r3, r2
 8002d90:	608b      	str	r3, [r1, #8]
 8002d92:	4620      	mov	r0, r4
 8002d94:	f019 ff95 	bl	801ccc2 <_Bfree>
 8002d98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	1e3b      	subs	r3, r7, #0
 8002da0:	bfb9      	ittee	lt
 8002da2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002da6:	9303      	strlt	r3, [sp, #12]
 8002da8:	2300      	movge	r3, #0
 8002daa:	f8c8 3000 	strge.w	r3, [r8]
 8002dae:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002db2:	4bb7      	ldr	r3, [pc, #732]	; (8003090 <_dtoa_r+0x340>)
 8002db4:	bfbc      	itt	lt
 8002db6:	2201      	movlt	r2, #1
 8002db8:	f8c8 2000 	strlt.w	r2, [r8]
 8002dbc:	ea33 0309 	bics.w	r3, r3, r9
 8002dc0:	d11b      	bne.n	8002dfa <_dtoa_r+0xaa>
 8002dc2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002dc4:	f242 730f 	movw	r3, #9999	; 0x270f
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002dce:	4333      	orrs	r3, r6
 8002dd0:	f000 8575 	beq.w	80038be <_dtoa_r+0xb6e>
 8002dd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002dd6:	b963      	cbnz	r3, 8002df2 <_dtoa_r+0xa2>
 8002dd8:	4bae      	ldr	r3, [pc, #696]	; (8003094 <_dtoa_r+0x344>)
 8002dda:	e025      	b.n	8002e28 <_dtoa_r+0xd8>
 8002ddc:	4bae      	ldr	r3, [pc, #696]	; (8003098 <_dtoa_r+0x348>)
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	3308      	adds	r3, #8
 8002de2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	9800      	ldr	r0, [sp, #0]
 8002de8:	b015      	add	sp, #84	; 0x54
 8002dea:	ecbd 8b02 	vpop	{d8}
 8002dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002df2:	4ba8      	ldr	r3, [pc, #672]	; (8003094 <_dtoa_r+0x344>)
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	3303      	adds	r3, #3
 8002df8:	e7f3      	b.n	8002de2 <_dtoa_r+0x92>
 8002dfa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	ec51 0b17 	vmov	r0, r1, d7
 8002e04:	2300      	movs	r3, #0
 8002e06:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002e0a:	f7fd fe1d 	bl	8000a48 <__aeabi_dcmpeq>
 8002e0e:	4680      	mov	r8, r0
 8002e10:	b160      	cbz	r0, 8002e2c <_dtoa_r+0xdc>
 8002e12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002e14:	2301      	movs	r3, #1
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 854c 	beq.w	80038b8 <_dtoa_r+0xb68>
 8002e20:	4b9e      	ldr	r3, [pc, #632]	; (800309c <_dtoa_r+0x34c>)
 8002e22:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	e7dc      	b.n	8002de6 <_dtoa_r+0x96>
 8002e2c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8002e30:	aa12      	add	r2, sp, #72	; 0x48
 8002e32:	a913      	add	r1, sp, #76	; 0x4c
 8002e34:	4620      	mov	r0, r4
 8002e36:	f01a f97f 	bl	801d138 <__d2b>
 8002e3a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8002e3e:	4682      	mov	sl, r0
 8002e40:	2d00      	cmp	r5, #0
 8002e42:	d07e      	beq.n	8002f42 <_dtoa_r+0x1f2>
 8002e44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e46:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8002e4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e4e:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8002e52:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8002e56:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8002e5a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002e5e:	4b90      	ldr	r3, [pc, #576]	; (80030a0 <_dtoa_r+0x350>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	4630      	mov	r0, r6
 8002e64:	4639      	mov	r1, r7
 8002e66:	f7fd f9cf 	bl	8000208 <__aeabi_dsub>
 8002e6a:	a383      	add	r3, pc, #524	; (adr r3, 8003078 <_dtoa_r+0x328>)
 8002e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e70:	f7fd fb82 	bl	8000578 <__aeabi_dmul>
 8002e74:	a382      	add	r3, pc, #520	; (adr r3, 8003080 <_dtoa_r+0x330>)
 8002e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7a:	f7fd f9c7 	bl	800020c <__adddf3>
 8002e7e:	4606      	mov	r6, r0
 8002e80:	4628      	mov	r0, r5
 8002e82:	460f      	mov	r7, r1
 8002e84:	f7fd fb0e 	bl	80004a4 <__aeabi_i2d>
 8002e88:	a37f      	add	r3, pc, #508	; (adr r3, 8003088 <_dtoa_r+0x338>)
 8002e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8e:	f7fd fb73 	bl	8000578 <__aeabi_dmul>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4630      	mov	r0, r6
 8002e98:	4639      	mov	r1, r7
 8002e9a:	f7fd f9b7 	bl	800020c <__adddf3>
 8002e9e:	4606      	mov	r6, r0
 8002ea0:	460f      	mov	r7, r1
 8002ea2:	f7fd fe03 	bl	8000aac <__aeabi_d2iz>
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	4681      	mov	r9, r0
 8002eaa:	2300      	movs	r3, #0
 8002eac:	4630      	mov	r0, r6
 8002eae:	4639      	mov	r1, r7
 8002eb0:	f7fd fdd4 	bl	8000a5c <__aeabi_dcmplt>
 8002eb4:	b148      	cbz	r0, 8002eca <_dtoa_r+0x17a>
 8002eb6:	4648      	mov	r0, r9
 8002eb8:	f7fd faf4 	bl	80004a4 <__aeabi_i2d>
 8002ebc:	4632      	mov	r2, r6
 8002ebe:	463b      	mov	r3, r7
 8002ec0:	f7fd fdc2 	bl	8000a48 <__aeabi_dcmpeq>
 8002ec4:	b908      	cbnz	r0, 8002eca <_dtoa_r+0x17a>
 8002ec6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8002eca:	f1b9 0f16 	cmp.w	r9, #22
 8002ece:	d856      	bhi.n	8002f7e <_dtoa_r+0x22e>
 8002ed0:	4b74      	ldr	r3, [pc, #464]	; (80030a4 <_dtoa_r+0x354>)
 8002ed2:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8002ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002ede:	f7fd fdbd 	bl	8000a5c <__aeabi_dcmplt>
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	d04d      	beq.n	8002f82 <_dtoa_r+0x232>
 8002ee6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8002eea:	2300      	movs	r3, #0
 8002eec:	930e      	str	r3, [sp, #56]	; 0x38
 8002eee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002ef0:	1b5d      	subs	r5, r3, r5
 8002ef2:	1e6b      	subs	r3, r5, #1
 8002ef4:	9304      	str	r3, [sp, #16]
 8002ef6:	bf43      	ittte	mi
 8002ef8:	2300      	movmi	r3, #0
 8002efa:	f1c5 0801 	rsbmi	r8, r5, #1
 8002efe:	9304      	strmi	r3, [sp, #16]
 8002f00:	f04f 0800 	movpl.w	r8, #0
 8002f04:	f1b9 0f00 	cmp.w	r9, #0
 8002f08:	db3d      	blt.n	8002f86 <_dtoa_r+0x236>
 8002f0a:	9b04      	ldr	r3, [sp, #16]
 8002f0c:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8002f10:	444b      	add	r3, r9
 8002f12:	9304      	str	r3, [sp, #16]
 8002f14:	2300      	movs	r3, #0
 8002f16:	9306      	str	r3, [sp, #24]
 8002f18:	9b05      	ldr	r3, [sp, #20]
 8002f1a:	2b09      	cmp	r3, #9
 8002f1c:	f200 809a 	bhi.w	8003054 <_dtoa_r+0x304>
 8002f20:	2b05      	cmp	r3, #5
 8002f22:	bfc4      	itt	gt
 8002f24:	3b04      	subgt	r3, #4
 8002f26:	9305      	strgt	r3, [sp, #20]
 8002f28:	9b05      	ldr	r3, [sp, #20]
 8002f2a:	f1a3 0302 	sub.w	r3, r3, #2
 8002f2e:	bfcc      	ite	gt
 8002f30:	2500      	movgt	r5, #0
 8002f32:	2501      	movle	r5, #1
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	f200 8099 	bhi.w	800306c <_dtoa_r+0x31c>
 8002f3a:	e8df f003 	tbb	[pc, r3]
 8002f3e:	7d2c      	.short	0x7d2c
 8002f40:	897b      	.short	0x897b
 8002f42:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8002f46:	441d      	add	r5, r3
 8002f48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	bfc1      	itttt	gt
 8002f50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002f54:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8002f58:	fa09 f303 	lslgt.w	r3, r9, r3
 8002f5c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8002f60:	bfda      	itte	le
 8002f62:	f1c3 0320 	rsble	r3, r3, #32
 8002f66:	fa06 f003 	lslle.w	r0, r6, r3
 8002f6a:	4318      	orrgt	r0, r3
 8002f6c:	f7fd fa8a 	bl	8000484 <__aeabi_ui2d>
 8002f70:	2301      	movs	r3, #1
 8002f72:	4606      	mov	r6, r0
 8002f74:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8002f78:	3d01      	subs	r5, #1
 8002f7a:	9310      	str	r3, [sp, #64]	; 0x40
 8002f7c:	e76f      	b.n	8002e5e <_dtoa_r+0x10e>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e7b4      	b.n	8002eec <_dtoa_r+0x19c>
 8002f82:	900e      	str	r0, [sp, #56]	; 0x38
 8002f84:	e7b3      	b.n	8002eee <_dtoa_r+0x19e>
 8002f86:	f1c9 0300 	rsb	r3, r9, #0
 8002f8a:	9306      	str	r3, [sp, #24]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	eba8 0809 	sub.w	r8, r8, r9
 8002f92:	930d      	str	r3, [sp, #52]	; 0x34
 8002f94:	e7c0      	b.n	8002f18 <_dtoa_r+0x1c8>
 8002f96:	2300      	movs	r3, #0
 8002f98:	9308      	str	r3, [sp, #32]
 8002f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f300 8085 	bgt.w	80030ac <_dtoa_r+0x35c>
 8002fa2:	f04f 0b01 	mov.w	fp, #1
 8002fa6:	f8cd b004 	str.w	fp, [sp, #4]
 8002faa:	465b      	mov	r3, fp
 8002fac:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8002fb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	6072      	str	r2, [r6, #4]
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	f102 0014 	add.w	r0, r2, #20
 8002fbc:	4298      	cmp	r0, r3
 8002fbe:	6871      	ldr	r1, [r6, #4]
 8002fc0:	d97a      	bls.n	80030b8 <_dtoa_r+0x368>
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f019 fe49 	bl	801cc5a <_Balloc>
 8002fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fca:	6030      	str	r0, [r6, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	9b01      	ldr	r3, [sp, #4]
 8002fd2:	2b0e      	cmp	r3, #14
 8002fd4:	f200 80f5 	bhi.w	80031c2 <_dtoa_r+0x472>
 8002fd8:	2d00      	cmp	r5, #0
 8002fda:	f000 80f2 	beq.w	80031c2 <_dtoa_r+0x472>
 8002fde:	f1b9 0f00 	cmp.w	r9, #0
 8002fe2:	dd7d      	ble.n	80030e0 <_dtoa_r+0x390>
 8002fe4:	4a2f      	ldr	r2, [pc, #188]	; (80030a4 <_dtoa_r+0x354>)
 8002fe6:	f009 030f 	and.w	r3, r9, #15
 8002fea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002fee:	ed93 7b00 	vldr	d7, [r3]
 8002ff2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8002ff6:	ea4f 1729 	mov.w	r7, r9, asr #4
 8002ffa:	eeb0 8a47 	vmov.f32	s16, s14
 8002ffe:	eef0 8a67 	vmov.f32	s17, s15
 8003002:	d05d      	beq.n	80030c0 <_dtoa_r+0x370>
 8003004:	4b28      	ldr	r3, [pc, #160]	; (80030a8 <_dtoa_r+0x358>)
 8003006:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800300a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800300e:	f7fd fbdd 	bl	80007cc <__aeabi_ddiv>
 8003012:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003016:	f007 070f 	and.w	r7, r7, #15
 800301a:	2503      	movs	r5, #3
 800301c:	4e22      	ldr	r6, [pc, #136]	; (80030a8 <_dtoa_r+0x358>)
 800301e:	2f00      	cmp	r7, #0
 8003020:	d150      	bne.n	80030c4 <_dtoa_r+0x374>
 8003022:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003026:	ec53 2b18 	vmov	r2, r3, d8
 800302a:	f7fd fbcf 	bl	80007cc <__aeabi_ddiv>
 800302e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003032:	e06f      	b.n	8003114 <_dtoa_r+0x3c4>
 8003034:	2301      	movs	r3, #1
 8003036:	e7af      	b.n	8002f98 <_dtoa_r+0x248>
 8003038:	2300      	movs	r3, #0
 800303a:	9308      	str	r3, [sp, #32]
 800303c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800303e:	eb09 0b03 	add.w	fp, r9, r3
 8003042:	f10b 0301 	add.w	r3, fp, #1
 8003046:	2b01      	cmp	r3, #1
 8003048:	9301      	str	r3, [sp, #4]
 800304a:	bfb8      	it	lt
 800304c:	2301      	movlt	r3, #1
 800304e:	e7af      	b.n	8002fb0 <_dtoa_r+0x260>
 8003050:	2301      	movs	r3, #1
 8003052:	e7f2      	b.n	800303a <_dtoa_r+0x2ea>
 8003054:	2501      	movs	r5, #1
 8003056:	2300      	movs	r3, #0
 8003058:	9305      	str	r3, [sp, #20]
 800305a:	9508      	str	r5, [sp, #32]
 800305c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8003060:	2200      	movs	r2, #0
 8003062:	f8cd b004 	str.w	fp, [sp, #4]
 8003066:	2312      	movs	r3, #18
 8003068:	9209      	str	r2, [sp, #36]	; 0x24
 800306a:	e7a1      	b.n	8002fb0 <_dtoa_r+0x260>
 800306c:	2301      	movs	r3, #1
 800306e:	9308      	str	r3, [sp, #32]
 8003070:	e7f4      	b.n	800305c <_dtoa_r+0x30c>
 8003072:	bf00      	nop
 8003074:	f3af 8000 	nop.w
 8003078:	636f4361 	.word	0x636f4361
 800307c:	3fd287a7 	.word	0x3fd287a7
 8003080:	8b60c8b3 	.word	0x8b60c8b3
 8003084:	3fc68a28 	.word	0x3fc68a28
 8003088:	509f79fb 	.word	0x509f79fb
 800308c:	3fd34413 	.word	0x3fd34413
 8003090:	7ff00000 	.word	0x7ff00000
 8003094:	0801edc4 	.word	0x0801edc4
 8003098:	0801edbb 	.word	0x0801edbb
 800309c:	0801edba 	.word	0x0801edba
 80030a0:	3ff80000 	.word	0x3ff80000
 80030a4:	0801d878 	.word	0x0801d878
 80030a8:	0801d850 	.word	0x0801d850
 80030ac:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80030b0:	f8cd b004 	str.w	fp, [sp, #4]
 80030b4:	465b      	mov	r3, fp
 80030b6:	e77b      	b.n	8002fb0 <_dtoa_r+0x260>
 80030b8:	3101      	adds	r1, #1
 80030ba:	6071      	str	r1, [r6, #4]
 80030bc:	0052      	lsls	r2, r2, #1
 80030be:	e77b      	b.n	8002fb8 <_dtoa_r+0x268>
 80030c0:	2502      	movs	r5, #2
 80030c2:	e7ab      	b.n	800301c <_dtoa_r+0x2cc>
 80030c4:	07f9      	lsls	r1, r7, #31
 80030c6:	d508      	bpl.n	80030da <_dtoa_r+0x38a>
 80030c8:	ec51 0b18 	vmov	r0, r1, d8
 80030cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80030d0:	f7fd fa52 	bl	8000578 <__aeabi_dmul>
 80030d4:	ec41 0b18 	vmov	d8, r0, r1
 80030d8:	3501      	adds	r5, #1
 80030da:	107f      	asrs	r7, r7, #1
 80030dc:	3608      	adds	r6, #8
 80030de:	e79e      	b.n	800301e <_dtoa_r+0x2ce>
 80030e0:	f000 80ab 	beq.w	800323a <_dtoa_r+0x4ea>
 80030e4:	f1c9 0600 	rsb	r6, r9, #0
 80030e8:	4baa      	ldr	r3, [pc, #680]	; (8003394 <_dtoa_r+0x644>)
 80030ea:	4fab      	ldr	r7, [pc, #684]	; (8003398 <_dtoa_r+0x648>)
 80030ec:	f006 020f 	and.w	r2, r6, #15
 80030f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80030f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80030fc:	f7fd fa3c 	bl	8000578 <__aeabi_dmul>
 8003100:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003104:	1136      	asrs	r6, r6, #4
 8003106:	2300      	movs	r3, #0
 8003108:	2502      	movs	r5, #2
 800310a:	2e00      	cmp	r6, #0
 800310c:	f040 808a 	bne.w	8003224 <_dtoa_r+0x4d4>
 8003110:	2b00      	cmp	r3, #0
 8003112:	d18c      	bne.n	800302e <_dtoa_r+0x2de>
 8003114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8091 	beq.w	800323e <_dtoa_r+0x4ee>
 800311c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003120:	4b9e      	ldr	r3, [pc, #632]	; (800339c <_dtoa_r+0x64c>)
 8003122:	2200      	movs	r2, #0
 8003124:	4630      	mov	r0, r6
 8003126:	4639      	mov	r1, r7
 8003128:	f7fd fc98 	bl	8000a5c <__aeabi_dcmplt>
 800312c:	2800      	cmp	r0, #0
 800312e:	f000 8086 	beq.w	800323e <_dtoa_r+0x4ee>
 8003132:	9b01      	ldr	r3, [sp, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8082 	beq.w	800323e <_dtoa_r+0x4ee>
 800313a:	f1bb 0f00 	cmp.w	fp, #0
 800313e:	dd3c      	ble.n	80031ba <_dtoa_r+0x46a>
 8003140:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8003144:	9307      	str	r3, [sp, #28]
 8003146:	2200      	movs	r2, #0
 8003148:	4b95      	ldr	r3, [pc, #596]	; (80033a0 <_dtoa_r+0x650>)
 800314a:	4630      	mov	r0, r6
 800314c:	4639      	mov	r1, r7
 800314e:	f7fd fa13 	bl	8000578 <__aeabi_dmul>
 8003152:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003156:	3501      	adds	r5, #1
 8003158:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800315c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003160:	4628      	mov	r0, r5
 8003162:	f7fd f99f 	bl	80004a4 <__aeabi_i2d>
 8003166:	4632      	mov	r2, r6
 8003168:	463b      	mov	r3, r7
 800316a:	f7fd fa05 	bl	8000578 <__aeabi_dmul>
 800316e:	4b8d      	ldr	r3, [pc, #564]	; (80033a4 <_dtoa_r+0x654>)
 8003170:	2200      	movs	r2, #0
 8003172:	f7fd f84b 	bl	800020c <__adddf3>
 8003176:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800317a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800317e:	9303      	str	r3, [sp, #12]
 8003180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003182:	2b00      	cmp	r3, #0
 8003184:	d160      	bne.n	8003248 <_dtoa_r+0x4f8>
 8003186:	4b88      	ldr	r3, [pc, #544]	; (80033a8 <_dtoa_r+0x658>)
 8003188:	2200      	movs	r2, #0
 800318a:	4630      	mov	r0, r6
 800318c:	4639      	mov	r1, r7
 800318e:	f7fd f83b 	bl	8000208 <__aeabi_dsub>
 8003192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003196:	4606      	mov	r6, r0
 8003198:	460f      	mov	r7, r1
 800319a:	f7fd fc7d 	bl	8000a98 <__aeabi_dcmpgt>
 800319e:	2800      	cmp	r0, #0
 80031a0:	f040 8299 	bne.w	80036d6 <_dtoa_r+0x986>
 80031a4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80031a8:	4630      	mov	r0, r6
 80031aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80031ae:	4639      	mov	r1, r7
 80031b0:	f7fd fc54 	bl	8000a5c <__aeabi_dcmplt>
 80031b4:	2800      	cmp	r0, #0
 80031b6:	f040 828b 	bne.w	80036d0 <_dtoa_r+0x980>
 80031ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80031be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80031c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f2c0 815b 	blt.w	8003480 <_dtoa_r+0x730>
 80031ca:	f1b9 0f0e 	cmp.w	r9, #14
 80031ce:	f300 8157 	bgt.w	8003480 <_dtoa_r+0x730>
 80031d2:	4b70      	ldr	r3, [pc, #448]	; (8003394 <_dtoa_r+0x644>)
 80031d4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80031d8:	ed93 7b00 	vldr	d7, [r3]
 80031dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031de:	eeb0 8a47 	vmov.f32	s16, s14
 80031e2:	eef0 8a67 	vmov.f32	s17, s15
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f280 80e2 	bge.w	80033b0 <_dtoa_r+0x660>
 80031ec:	9b01      	ldr	r3, [sp, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f300 80de 	bgt.w	80033b0 <_dtoa_r+0x660>
 80031f4:	f040 826c 	bne.w	80036d0 <_dtoa_r+0x980>
 80031f8:	4b6b      	ldr	r3, [pc, #428]	; (80033a8 <_dtoa_r+0x658>)
 80031fa:	ec51 0b17 	vmov	r0, r1, d7
 80031fe:	2200      	movs	r2, #0
 8003200:	f7fd f9ba 	bl	8000578 <__aeabi_dmul>
 8003204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003208:	f7fd fc3c 	bl	8000a84 <__aeabi_dcmpge>
 800320c:	9e01      	ldr	r6, [sp, #4]
 800320e:	4637      	mov	r7, r6
 8003210:	2800      	cmp	r0, #0
 8003212:	f040 8242 	bne.w	800369a <_dtoa_r+0x94a>
 8003216:	9d00      	ldr	r5, [sp, #0]
 8003218:	2331      	movs	r3, #49	; 0x31
 800321a:	f805 3b01 	strb.w	r3, [r5], #1
 800321e:	f109 0901 	add.w	r9, r9, #1
 8003222:	e23e      	b.n	80036a2 <_dtoa_r+0x952>
 8003224:	07f2      	lsls	r2, r6, #31
 8003226:	d505      	bpl.n	8003234 <_dtoa_r+0x4e4>
 8003228:	e9d7 2300 	ldrd	r2, r3, [r7]
 800322c:	f7fd f9a4 	bl	8000578 <__aeabi_dmul>
 8003230:	3501      	adds	r5, #1
 8003232:	2301      	movs	r3, #1
 8003234:	1076      	asrs	r6, r6, #1
 8003236:	3708      	adds	r7, #8
 8003238:	e767      	b.n	800310a <_dtoa_r+0x3ba>
 800323a:	2502      	movs	r5, #2
 800323c:	e76a      	b.n	8003114 <_dtoa_r+0x3c4>
 800323e:	9b01      	ldr	r3, [sp, #4]
 8003240:	f8cd 901c 	str.w	r9, [sp, #28]
 8003244:	930c      	str	r3, [sp, #48]	; 0x30
 8003246:	e789      	b.n	800315c <_dtoa_r+0x40c>
 8003248:	9900      	ldr	r1, [sp, #0]
 800324a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800324c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800324e:	4b51      	ldr	r3, [pc, #324]	; (8003394 <_dtoa_r+0x644>)
 8003250:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003254:	4401      	add	r1, r0
 8003256:	9102      	str	r1, [sp, #8]
 8003258:	9908      	ldr	r1, [sp, #32]
 800325a:	eeb0 8a47 	vmov.f32	s16, s14
 800325e:	eef0 8a67 	vmov.f32	s17, s15
 8003262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003266:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800326a:	2900      	cmp	r1, #0
 800326c:	d045      	beq.n	80032fa <_dtoa_r+0x5aa>
 800326e:	494f      	ldr	r1, [pc, #316]	; (80033ac <_dtoa_r+0x65c>)
 8003270:	2000      	movs	r0, #0
 8003272:	f7fd faab 	bl	80007cc <__aeabi_ddiv>
 8003276:	ec53 2b18 	vmov	r2, r3, d8
 800327a:	f7fc ffc5 	bl	8000208 <__aeabi_dsub>
 800327e:	9d00      	ldr	r5, [sp, #0]
 8003280:	ec41 0b18 	vmov	d8, r0, r1
 8003284:	4639      	mov	r1, r7
 8003286:	4630      	mov	r0, r6
 8003288:	f7fd fc10 	bl	8000aac <__aeabi_d2iz>
 800328c:	900c      	str	r0, [sp, #48]	; 0x30
 800328e:	f7fd f909 	bl	80004a4 <__aeabi_i2d>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4630      	mov	r0, r6
 8003298:	4639      	mov	r1, r7
 800329a:	f7fc ffb5 	bl	8000208 <__aeabi_dsub>
 800329e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80032a0:	3330      	adds	r3, #48	; 0x30
 80032a2:	f805 3b01 	strb.w	r3, [r5], #1
 80032a6:	ec53 2b18 	vmov	r2, r3, d8
 80032aa:	4606      	mov	r6, r0
 80032ac:	460f      	mov	r7, r1
 80032ae:	f7fd fbd5 	bl	8000a5c <__aeabi_dcmplt>
 80032b2:	2800      	cmp	r0, #0
 80032b4:	d165      	bne.n	8003382 <_dtoa_r+0x632>
 80032b6:	4632      	mov	r2, r6
 80032b8:	463b      	mov	r3, r7
 80032ba:	4938      	ldr	r1, [pc, #224]	; (800339c <_dtoa_r+0x64c>)
 80032bc:	2000      	movs	r0, #0
 80032be:	f7fc ffa3 	bl	8000208 <__aeabi_dsub>
 80032c2:	ec53 2b18 	vmov	r2, r3, d8
 80032c6:	f7fd fbc9 	bl	8000a5c <__aeabi_dcmplt>
 80032ca:	2800      	cmp	r0, #0
 80032cc:	f040 80b8 	bne.w	8003440 <_dtoa_r+0x6f0>
 80032d0:	9b02      	ldr	r3, [sp, #8]
 80032d2:	429d      	cmp	r5, r3
 80032d4:	f43f af71 	beq.w	80031ba <_dtoa_r+0x46a>
 80032d8:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <_dtoa_r+0x650>)
 80032da:	ec51 0b18 	vmov	r0, r1, d8
 80032de:	2200      	movs	r2, #0
 80032e0:	f7fd f94a 	bl	8000578 <__aeabi_dmul>
 80032e4:	4b2e      	ldr	r3, [pc, #184]	; (80033a0 <_dtoa_r+0x650>)
 80032e6:	ec41 0b18 	vmov	d8, r0, r1
 80032ea:	2200      	movs	r2, #0
 80032ec:	4630      	mov	r0, r6
 80032ee:	4639      	mov	r1, r7
 80032f0:	f7fd f942 	bl	8000578 <__aeabi_dmul>
 80032f4:	4606      	mov	r6, r0
 80032f6:	460f      	mov	r7, r1
 80032f8:	e7c4      	b.n	8003284 <_dtoa_r+0x534>
 80032fa:	ec51 0b17 	vmov	r0, r1, d7
 80032fe:	f7fd f93b 	bl	8000578 <__aeabi_dmul>
 8003302:	9b02      	ldr	r3, [sp, #8]
 8003304:	9d00      	ldr	r5, [sp, #0]
 8003306:	930c      	str	r3, [sp, #48]	; 0x30
 8003308:	ec41 0b18 	vmov	d8, r0, r1
 800330c:	4639      	mov	r1, r7
 800330e:	4630      	mov	r0, r6
 8003310:	f7fd fbcc 	bl	8000aac <__aeabi_d2iz>
 8003314:	9011      	str	r0, [sp, #68]	; 0x44
 8003316:	f7fd f8c5 	bl	80004a4 <__aeabi_i2d>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4630      	mov	r0, r6
 8003320:	4639      	mov	r1, r7
 8003322:	f7fc ff71 	bl	8000208 <__aeabi_dsub>
 8003326:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003328:	3330      	adds	r3, #48	; 0x30
 800332a:	f805 3b01 	strb.w	r3, [r5], #1
 800332e:	9b02      	ldr	r3, [sp, #8]
 8003330:	429d      	cmp	r5, r3
 8003332:	4606      	mov	r6, r0
 8003334:	460f      	mov	r7, r1
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	d125      	bne.n	8003388 <_dtoa_r+0x638>
 800333c:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <_dtoa_r+0x65c>)
 800333e:	ec51 0b18 	vmov	r0, r1, d8
 8003342:	f7fc ff63 	bl	800020c <__adddf3>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4630      	mov	r0, r6
 800334c:	4639      	mov	r1, r7
 800334e:	f7fd fba3 	bl	8000a98 <__aeabi_dcmpgt>
 8003352:	2800      	cmp	r0, #0
 8003354:	d174      	bne.n	8003440 <_dtoa_r+0x6f0>
 8003356:	ec53 2b18 	vmov	r2, r3, d8
 800335a:	4914      	ldr	r1, [pc, #80]	; (80033ac <_dtoa_r+0x65c>)
 800335c:	2000      	movs	r0, #0
 800335e:	f7fc ff53 	bl	8000208 <__aeabi_dsub>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4630      	mov	r0, r6
 8003368:	4639      	mov	r1, r7
 800336a:	f7fd fb77 	bl	8000a5c <__aeabi_dcmplt>
 800336e:	2800      	cmp	r0, #0
 8003370:	f43f af23 	beq.w	80031ba <_dtoa_r+0x46a>
 8003374:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003376:	1e6b      	subs	r3, r5, #1
 8003378:	930c      	str	r3, [sp, #48]	; 0x30
 800337a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800337e:	2b30      	cmp	r3, #48	; 0x30
 8003380:	d0f8      	beq.n	8003374 <_dtoa_r+0x624>
 8003382:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8003386:	e049      	b.n	800341c <_dtoa_r+0x6cc>
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <_dtoa_r+0x650>)
 800338a:	f7fd f8f5 	bl	8000578 <__aeabi_dmul>
 800338e:	4606      	mov	r6, r0
 8003390:	460f      	mov	r7, r1
 8003392:	e7bb      	b.n	800330c <_dtoa_r+0x5bc>
 8003394:	0801d878 	.word	0x0801d878
 8003398:	0801d850 	.word	0x0801d850
 800339c:	3ff00000 	.word	0x3ff00000
 80033a0:	40240000 	.word	0x40240000
 80033a4:	401c0000 	.word	0x401c0000
 80033a8:	40140000 	.word	0x40140000
 80033ac:	3fe00000 	.word	0x3fe00000
 80033b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80033b4:	9d00      	ldr	r5, [sp, #0]
 80033b6:	ec53 2b18 	vmov	r2, r3, d8
 80033ba:	4630      	mov	r0, r6
 80033bc:	4639      	mov	r1, r7
 80033be:	f7fd fa05 	bl	80007cc <__aeabi_ddiv>
 80033c2:	f7fd fb73 	bl	8000aac <__aeabi_d2iz>
 80033c6:	4680      	mov	r8, r0
 80033c8:	f7fd f86c 	bl	80004a4 <__aeabi_i2d>
 80033cc:	ec53 2b18 	vmov	r2, r3, d8
 80033d0:	f7fd f8d2 	bl	8000578 <__aeabi_dmul>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4630      	mov	r0, r6
 80033da:	4639      	mov	r1, r7
 80033dc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80033e0:	f7fc ff12 	bl	8000208 <__aeabi_dsub>
 80033e4:	f805 6b01 	strb.w	r6, [r5], #1
 80033e8:	9e00      	ldr	r6, [sp, #0]
 80033ea:	9f01      	ldr	r7, [sp, #4]
 80033ec:	1bae      	subs	r6, r5, r6
 80033ee:	42b7      	cmp	r7, r6
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	d137      	bne.n	8003466 <_dtoa_r+0x716>
 80033f6:	f7fc ff09 	bl	800020c <__adddf3>
 80033fa:	ec53 2b18 	vmov	r2, r3, d8
 80033fe:	4606      	mov	r6, r0
 8003400:	460f      	mov	r7, r1
 8003402:	f7fd fb49 	bl	8000a98 <__aeabi_dcmpgt>
 8003406:	b9c8      	cbnz	r0, 800343c <_dtoa_r+0x6ec>
 8003408:	ec53 2b18 	vmov	r2, r3, d8
 800340c:	4630      	mov	r0, r6
 800340e:	4639      	mov	r1, r7
 8003410:	f7fd fb1a 	bl	8000a48 <__aeabi_dcmpeq>
 8003414:	b110      	cbz	r0, 800341c <_dtoa_r+0x6cc>
 8003416:	f018 0f01 	tst.w	r8, #1
 800341a:	d10f      	bne.n	800343c <_dtoa_r+0x6ec>
 800341c:	4620      	mov	r0, r4
 800341e:	4651      	mov	r1, sl
 8003420:	f019 fc4f 	bl	801ccc2 <_Bfree>
 8003424:	2300      	movs	r3, #0
 8003426:	702b      	strb	r3, [r5, #0]
 8003428:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800342a:	f109 0001 	add.w	r0, r9, #1
 800342e:	6018      	str	r0, [r3, #0]
 8003430:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003432:	2b00      	cmp	r3, #0
 8003434:	f43f acd7 	beq.w	8002de6 <_dtoa_r+0x96>
 8003438:	601d      	str	r5, [r3, #0]
 800343a:	e4d4      	b.n	8002de6 <_dtoa_r+0x96>
 800343c:	f8cd 901c 	str.w	r9, [sp, #28]
 8003440:	462b      	mov	r3, r5
 8003442:	461d      	mov	r5, r3
 8003444:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003448:	2a39      	cmp	r2, #57	; 0x39
 800344a:	d108      	bne.n	800345e <_dtoa_r+0x70e>
 800344c:	9a00      	ldr	r2, [sp, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d1f7      	bne.n	8003442 <_dtoa_r+0x6f2>
 8003452:	9a07      	ldr	r2, [sp, #28]
 8003454:	9900      	ldr	r1, [sp, #0]
 8003456:	3201      	adds	r2, #1
 8003458:	9207      	str	r2, [sp, #28]
 800345a:	2230      	movs	r2, #48	; 0x30
 800345c:	700a      	strb	r2, [r1, #0]
 800345e:	781a      	ldrb	r2, [r3, #0]
 8003460:	3201      	adds	r2, #1
 8003462:	701a      	strb	r2, [r3, #0]
 8003464:	e78d      	b.n	8003382 <_dtoa_r+0x632>
 8003466:	4b9e      	ldr	r3, [pc, #632]	; (80036e0 <_dtoa_r+0x990>)
 8003468:	2200      	movs	r2, #0
 800346a:	f7fd f885 	bl	8000578 <__aeabi_dmul>
 800346e:	2200      	movs	r2, #0
 8003470:	2300      	movs	r3, #0
 8003472:	4606      	mov	r6, r0
 8003474:	460f      	mov	r7, r1
 8003476:	f7fd fae7 	bl	8000a48 <__aeabi_dcmpeq>
 800347a:	2800      	cmp	r0, #0
 800347c:	d09b      	beq.n	80033b6 <_dtoa_r+0x666>
 800347e:	e7cd      	b.n	800341c <_dtoa_r+0x6cc>
 8003480:	9a08      	ldr	r2, [sp, #32]
 8003482:	2a00      	cmp	r2, #0
 8003484:	f000 80c6 	beq.w	8003614 <_dtoa_r+0x8c4>
 8003488:	9a05      	ldr	r2, [sp, #20]
 800348a:	2a01      	cmp	r2, #1
 800348c:	f300 80aa 	bgt.w	80035e4 <_dtoa_r+0x894>
 8003490:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003492:	2a00      	cmp	r2, #0
 8003494:	f000 80a2 	beq.w	80035dc <_dtoa_r+0x88c>
 8003498:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800349c:	9e06      	ldr	r6, [sp, #24]
 800349e:	4645      	mov	r5, r8
 80034a0:	9a04      	ldr	r2, [sp, #16]
 80034a2:	2101      	movs	r1, #1
 80034a4:	441a      	add	r2, r3
 80034a6:	4620      	mov	r0, r4
 80034a8:	4498      	add	r8, r3
 80034aa:	9204      	str	r2, [sp, #16]
 80034ac:	f019 fcae 	bl	801ce0c <__i2b>
 80034b0:	4607      	mov	r7, r0
 80034b2:	2d00      	cmp	r5, #0
 80034b4:	dd0b      	ble.n	80034ce <_dtoa_r+0x77e>
 80034b6:	9b04      	ldr	r3, [sp, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	dd08      	ble.n	80034ce <_dtoa_r+0x77e>
 80034bc:	42ab      	cmp	r3, r5
 80034be:	9a04      	ldr	r2, [sp, #16]
 80034c0:	bfa8      	it	ge
 80034c2:	462b      	movge	r3, r5
 80034c4:	eba8 0803 	sub.w	r8, r8, r3
 80034c8:	1aed      	subs	r5, r5, r3
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	9304      	str	r3, [sp, #16]
 80034ce:	9b06      	ldr	r3, [sp, #24]
 80034d0:	b1fb      	cbz	r3, 8003512 <_dtoa_r+0x7c2>
 80034d2:	9b08      	ldr	r3, [sp, #32]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80a1 	beq.w	800361c <_dtoa_r+0x8cc>
 80034da:	2e00      	cmp	r6, #0
 80034dc:	dd11      	ble.n	8003502 <_dtoa_r+0x7b2>
 80034de:	4639      	mov	r1, r7
 80034e0:	4632      	mov	r2, r6
 80034e2:	4620      	mov	r0, r4
 80034e4:	f014 f884 	bl	80175f0 <__pow5mult>
 80034e8:	4652      	mov	r2, sl
 80034ea:	4601      	mov	r1, r0
 80034ec:	4607      	mov	r7, r0
 80034ee:	4620      	mov	r0, r4
 80034f0:	f019 fc95 	bl	801ce1e <__multiply>
 80034f4:	4651      	mov	r1, sl
 80034f6:	9007      	str	r0, [sp, #28]
 80034f8:	4620      	mov	r0, r4
 80034fa:	f019 fbe2 	bl	801ccc2 <_Bfree>
 80034fe:	9b07      	ldr	r3, [sp, #28]
 8003500:	469a      	mov	sl, r3
 8003502:	9b06      	ldr	r3, [sp, #24]
 8003504:	1b9a      	subs	r2, r3, r6
 8003506:	d004      	beq.n	8003512 <_dtoa_r+0x7c2>
 8003508:	4651      	mov	r1, sl
 800350a:	4620      	mov	r0, r4
 800350c:	f014 f870 	bl	80175f0 <__pow5mult>
 8003510:	4682      	mov	sl, r0
 8003512:	2101      	movs	r1, #1
 8003514:	4620      	mov	r0, r4
 8003516:	f019 fc79 	bl	801ce0c <__i2b>
 800351a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800351c:	2b00      	cmp	r3, #0
 800351e:	4606      	mov	r6, r0
 8003520:	dd7e      	ble.n	8003620 <_dtoa_r+0x8d0>
 8003522:	461a      	mov	r2, r3
 8003524:	4601      	mov	r1, r0
 8003526:	4620      	mov	r0, r4
 8003528:	f014 f862 	bl	80175f0 <__pow5mult>
 800352c:	9b05      	ldr	r3, [sp, #20]
 800352e:	2b01      	cmp	r3, #1
 8003530:	4606      	mov	r6, r0
 8003532:	dd78      	ble.n	8003626 <_dtoa_r+0x8d6>
 8003534:	2300      	movs	r3, #0
 8003536:	9306      	str	r3, [sp, #24]
 8003538:	6933      	ldr	r3, [r6, #16]
 800353a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800353e:	6918      	ldr	r0, [r3, #16]
 8003540:	f019 fc14 	bl	801cd6c <__hi0bits>
 8003544:	f1c0 0020 	rsb	r0, r0, #32
 8003548:	9b04      	ldr	r3, [sp, #16]
 800354a:	4418      	add	r0, r3
 800354c:	f010 001f 	ands.w	r0, r0, #31
 8003550:	f000 8088 	beq.w	8003664 <_dtoa_r+0x914>
 8003554:	f1c0 0320 	rsb	r3, r0, #32
 8003558:	2b04      	cmp	r3, #4
 800355a:	f340 8081 	ble.w	8003660 <_dtoa_r+0x910>
 800355e:	f1c0 001c 	rsb	r0, r0, #28
 8003562:	9b04      	ldr	r3, [sp, #16]
 8003564:	4403      	add	r3, r0
 8003566:	4480      	add	r8, r0
 8003568:	4405      	add	r5, r0
 800356a:	9304      	str	r3, [sp, #16]
 800356c:	f1b8 0f00 	cmp.w	r8, #0
 8003570:	dd05      	ble.n	800357e <_dtoa_r+0x82e>
 8003572:	4651      	mov	r1, sl
 8003574:	4642      	mov	r2, r8
 8003576:	4620      	mov	r0, r4
 8003578:	f019 fced 	bl	801cf56 <__lshift>
 800357c:	4682      	mov	sl, r0
 800357e:	9b04      	ldr	r3, [sp, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	dd05      	ble.n	8003590 <_dtoa_r+0x840>
 8003584:	4631      	mov	r1, r6
 8003586:	461a      	mov	r2, r3
 8003588:	4620      	mov	r0, r4
 800358a:	f019 fce4 	bl	801cf56 <__lshift>
 800358e:	4606      	mov	r6, r0
 8003590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003592:	2b00      	cmp	r3, #0
 8003594:	d068      	beq.n	8003668 <_dtoa_r+0x918>
 8003596:	4631      	mov	r1, r6
 8003598:	4650      	mov	r0, sl
 800359a:	f019 fd3b 	bl	801d014 <__mcmp>
 800359e:	2800      	cmp	r0, #0
 80035a0:	da62      	bge.n	8003668 <_dtoa_r+0x918>
 80035a2:	2300      	movs	r3, #0
 80035a4:	4651      	mov	r1, sl
 80035a6:	220a      	movs	r2, #10
 80035a8:	4620      	mov	r0, r4
 80035aa:	f019 fba1 	bl	801ccf0 <__multadd>
 80035ae:	9b08      	ldr	r3, [sp, #32]
 80035b0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80035b4:	4682      	mov	sl, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 8188 	beq.w	80038cc <_dtoa_r+0xb7c>
 80035bc:	4639      	mov	r1, r7
 80035be:	2300      	movs	r3, #0
 80035c0:	220a      	movs	r2, #10
 80035c2:	4620      	mov	r0, r4
 80035c4:	f019 fb94 	bl	801ccf0 <__multadd>
 80035c8:	f1bb 0f00 	cmp.w	fp, #0
 80035cc:	4607      	mov	r7, r0
 80035ce:	f300 808f 	bgt.w	80036f0 <_dtoa_r+0x9a0>
 80035d2:	9b05      	ldr	r3, [sp, #20]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	f340 808b 	ble.w	80036f0 <_dtoa_r+0x9a0>
 80035da:	e04d      	b.n	8003678 <_dtoa_r+0x928>
 80035dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80035de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80035e2:	e75b      	b.n	800349c <_dtoa_r+0x74c>
 80035e4:	9b01      	ldr	r3, [sp, #4]
 80035e6:	1e5e      	subs	r6, r3, #1
 80035e8:	9b06      	ldr	r3, [sp, #24]
 80035ea:	42b3      	cmp	r3, r6
 80035ec:	bfbf      	itttt	lt
 80035ee:	9b06      	ldrlt	r3, [sp, #24]
 80035f0:	9606      	strlt	r6, [sp, #24]
 80035f2:	1af2      	sublt	r2, r6, r3
 80035f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80035f6:	bfb6      	itet	lt
 80035f8:	189b      	addlt	r3, r3, r2
 80035fa:	1b9e      	subge	r6, r3, r6
 80035fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80035fe:	9b01      	ldr	r3, [sp, #4]
 8003600:	bfb8      	it	lt
 8003602:	2600      	movlt	r6, #0
 8003604:	2b00      	cmp	r3, #0
 8003606:	bfb5      	itete	lt
 8003608:	eba8 0503 	sublt.w	r5, r8, r3
 800360c:	9b01      	ldrge	r3, [sp, #4]
 800360e:	2300      	movlt	r3, #0
 8003610:	4645      	movge	r5, r8
 8003612:	e745      	b.n	80034a0 <_dtoa_r+0x750>
 8003614:	9e06      	ldr	r6, [sp, #24]
 8003616:	9f08      	ldr	r7, [sp, #32]
 8003618:	4645      	mov	r5, r8
 800361a:	e74a      	b.n	80034b2 <_dtoa_r+0x762>
 800361c:	9a06      	ldr	r2, [sp, #24]
 800361e:	e773      	b.n	8003508 <_dtoa_r+0x7b8>
 8003620:	9b05      	ldr	r3, [sp, #20]
 8003622:	2b01      	cmp	r3, #1
 8003624:	dc18      	bgt.n	8003658 <_dtoa_r+0x908>
 8003626:	9b02      	ldr	r3, [sp, #8]
 8003628:	b9b3      	cbnz	r3, 8003658 <_dtoa_r+0x908>
 800362a:	9b03      	ldr	r3, [sp, #12]
 800362c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003630:	b9a3      	cbnz	r3, 800365c <_dtoa_r+0x90c>
 8003632:	9b03      	ldr	r3, [sp, #12]
 8003634:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003638:	0d1b      	lsrs	r3, r3, #20
 800363a:	051b      	lsls	r3, r3, #20
 800363c:	b12b      	cbz	r3, 800364a <_dtoa_r+0x8fa>
 800363e:	9b04      	ldr	r3, [sp, #16]
 8003640:	3301      	adds	r3, #1
 8003642:	9304      	str	r3, [sp, #16]
 8003644:	f108 0801 	add.w	r8, r8, #1
 8003648:	2301      	movs	r3, #1
 800364a:	9306      	str	r3, [sp, #24]
 800364c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800364e:	2b00      	cmp	r3, #0
 8003650:	f47f af72 	bne.w	8003538 <_dtoa_r+0x7e8>
 8003654:	2001      	movs	r0, #1
 8003656:	e777      	b.n	8003548 <_dtoa_r+0x7f8>
 8003658:	2300      	movs	r3, #0
 800365a:	e7f6      	b.n	800364a <_dtoa_r+0x8fa>
 800365c:	9b02      	ldr	r3, [sp, #8]
 800365e:	e7f4      	b.n	800364a <_dtoa_r+0x8fa>
 8003660:	d084      	beq.n	800356c <_dtoa_r+0x81c>
 8003662:	4618      	mov	r0, r3
 8003664:	301c      	adds	r0, #28
 8003666:	e77c      	b.n	8003562 <_dtoa_r+0x812>
 8003668:	9b01      	ldr	r3, [sp, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	dc3a      	bgt.n	80036e4 <_dtoa_r+0x994>
 800366e:	9b05      	ldr	r3, [sp, #20]
 8003670:	2b02      	cmp	r3, #2
 8003672:	dd37      	ble.n	80036e4 <_dtoa_r+0x994>
 8003674:	f8dd b004 	ldr.w	fp, [sp, #4]
 8003678:	f1bb 0f00 	cmp.w	fp, #0
 800367c:	d10d      	bne.n	800369a <_dtoa_r+0x94a>
 800367e:	4631      	mov	r1, r6
 8003680:	465b      	mov	r3, fp
 8003682:	2205      	movs	r2, #5
 8003684:	4620      	mov	r0, r4
 8003686:	f019 fb33 	bl	801ccf0 <__multadd>
 800368a:	4601      	mov	r1, r0
 800368c:	4606      	mov	r6, r0
 800368e:	4650      	mov	r0, sl
 8003690:	f019 fcc0 	bl	801d014 <__mcmp>
 8003694:	2800      	cmp	r0, #0
 8003696:	f73f adbe 	bgt.w	8003216 <_dtoa_r+0x4c6>
 800369a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800369c:	9d00      	ldr	r5, [sp, #0]
 800369e:	ea6f 0903 	mvn.w	r9, r3
 80036a2:	f04f 0800 	mov.w	r8, #0
 80036a6:	4631      	mov	r1, r6
 80036a8:	4620      	mov	r0, r4
 80036aa:	f019 fb0a 	bl	801ccc2 <_Bfree>
 80036ae:	2f00      	cmp	r7, #0
 80036b0:	f43f aeb4 	beq.w	800341c <_dtoa_r+0x6cc>
 80036b4:	f1b8 0f00 	cmp.w	r8, #0
 80036b8:	d005      	beq.n	80036c6 <_dtoa_r+0x976>
 80036ba:	45b8      	cmp	r8, r7
 80036bc:	d003      	beq.n	80036c6 <_dtoa_r+0x976>
 80036be:	4641      	mov	r1, r8
 80036c0:	4620      	mov	r0, r4
 80036c2:	f019 fafe 	bl	801ccc2 <_Bfree>
 80036c6:	4639      	mov	r1, r7
 80036c8:	4620      	mov	r0, r4
 80036ca:	f019 fafa 	bl	801ccc2 <_Bfree>
 80036ce:	e6a5      	b.n	800341c <_dtoa_r+0x6cc>
 80036d0:	2600      	movs	r6, #0
 80036d2:	4637      	mov	r7, r6
 80036d4:	e7e1      	b.n	800369a <_dtoa_r+0x94a>
 80036d6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80036d8:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80036dc:	4637      	mov	r7, r6
 80036de:	e59a      	b.n	8003216 <_dtoa_r+0x4c6>
 80036e0:	40240000 	.word	0x40240000
 80036e4:	9b08      	ldr	r3, [sp, #32]
 80036e6:	f8dd b004 	ldr.w	fp, [sp, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 80f5 	beq.w	80038da <_dtoa_r+0xb8a>
 80036f0:	2d00      	cmp	r5, #0
 80036f2:	dd05      	ble.n	8003700 <_dtoa_r+0x9b0>
 80036f4:	4639      	mov	r1, r7
 80036f6:	462a      	mov	r2, r5
 80036f8:	4620      	mov	r0, r4
 80036fa:	f019 fc2c 	bl	801cf56 <__lshift>
 80036fe:	4607      	mov	r7, r0
 8003700:	9b06      	ldr	r3, [sp, #24]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d055      	beq.n	80037b2 <_dtoa_r+0xa62>
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4620      	mov	r0, r4
 800370a:	f019 faa6 	bl	801cc5a <_Balloc>
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	3202      	adds	r2, #2
 8003712:	4605      	mov	r5, r0
 8003714:	0092      	lsls	r2, r2, #2
 8003716:	f107 010c 	add.w	r1, r7, #12
 800371a:	300c      	adds	r0, #12
 800371c:	f019 f88c 	bl	801c838 <memcpy>
 8003720:	2201      	movs	r2, #1
 8003722:	4629      	mov	r1, r5
 8003724:	4620      	mov	r0, r4
 8003726:	f019 fc16 	bl	801cf56 <__lshift>
 800372a:	9b00      	ldr	r3, [sp, #0]
 800372c:	3301      	adds	r3, #1
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	9b00      	ldr	r3, [sp, #0]
 8003732:	445b      	add	r3, fp
 8003734:	9307      	str	r3, [sp, #28]
 8003736:	9b02      	ldr	r3, [sp, #8]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	46b8      	mov	r8, r7
 800373e:	9306      	str	r3, [sp, #24]
 8003740:	4607      	mov	r7, r0
 8003742:	9b01      	ldr	r3, [sp, #4]
 8003744:	4631      	mov	r1, r6
 8003746:	4650      	mov	r0, sl
 8003748:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800374c:	f019 f9fa 	bl	801cb44 <quorem>
 8003750:	4603      	mov	r3, r0
 8003752:	3330      	adds	r3, #48	; 0x30
 8003754:	9002      	str	r0, [sp, #8]
 8003756:	4641      	mov	r1, r8
 8003758:	4650      	mov	r0, sl
 800375a:	9308      	str	r3, [sp, #32]
 800375c:	f019 fc5a 	bl	801d014 <__mcmp>
 8003760:	463a      	mov	r2, r7
 8003762:	9004      	str	r0, [sp, #16]
 8003764:	4631      	mov	r1, r6
 8003766:	4620      	mov	r0, r4
 8003768:	f019 fc70 	bl	801d04c <__mdiff>
 800376c:	68c2      	ldr	r2, [r0, #12]
 800376e:	9b08      	ldr	r3, [sp, #32]
 8003770:	4605      	mov	r5, r0
 8003772:	bb02      	cbnz	r2, 80037b6 <_dtoa_r+0xa66>
 8003774:	4601      	mov	r1, r0
 8003776:	4650      	mov	r0, sl
 8003778:	f019 fc4c 	bl	801d014 <__mcmp>
 800377c:	9b08      	ldr	r3, [sp, #32]
 800377e:	4602      	mov	r2, r0
 8003780:	4629      	mov	r1, r5
 8003782:	4620      	mov	r0, r4
 8003784:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8003788:	f019 fa9b 	bl	801ccc2 <_Bfree>
 800378c:	9b05      	ldr	r3, [sp, #20]
 800378e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003790:	9d01      	ldr	r5, [sp, #4]
 8003792:	ea43 0102 	orr.w	r1, r3, r2
 8003796:	9b06      	ldr	r3, [sp, #24]
 8003798:	430b      	orrs	r3, r1
 800379a:	9b08      	ldr	r3, [sp, #32]
 800379c:	d10d      	bne.n	80037ba <_dtoa_r+0xa6a>
 800379e:	2b39      	cmp	r3, #57	; 0x39
 80037a0:	d027      	beq.n	80037f2 <_dtoa_r+0xaa2>
 80037a2:	9a04      	ldr	r2, [sp, #16]
 80037a4:	2a00      	cmp	r2, #0
 80037a6:	dd01      	ble.n	80037ac <_dtoa_r+0xa5c>
 80037a8:	9b02      	ldr	r3, [sp, #8]
 80037aa:	3331      	adds	r3, #49	; 0x31
 80037ac:	f88b 3000 	strb.w	r3, [fp]
 80037b0:	e779      	b.n	80036a6 <_dtoa_r+0x956>
 80037b2:	4638      	mov	r0, r7
 80037b4:	e7b9      	b.n	800372a <_dtoa_r+0x9da>
 80037b6:	2201      	movs	r2, #1
 80037b8:	e7e2      	b.n	8003780 <_dtoa_r+0xa30>
 80037ba:	9904      	ldr	r1, [sp, #16]
 80037bc:	2900      	cmp	r1, #0
 80037be:	db04      	blt.n	80037ca <_dtoa_r+0xa7a>
 80037c0:	9805      	ldr	r0, [sp, #20]
 80037c2:	4301      	orrs	r1, r0
 80037c4:	9806      	ldr	r0, [sp, #24]
 80037c6:	4301      	orrs	r1, r0
 80037c8:	d120      	bne.n	800380c <_dtoa_r+0xabc>
 80037ca:	2a00      	cmp	r2, #0
 80037cc:	ddee      	ble.n	80037ac <_dtoa_r+0xa5c>
 80037ce:	4651      	mov	r1, sl
 80037d0:	2201      	movs	r2, #1
 80037d2:	4620      	mov	r0, r4
 80037d4:	9301      	str	r3, [sp, #4]
 80037d6:	f019 fbbe 	bl	801cf56 <__lshift>
 80037da:	4631      	mov	r1, r6
 80037dc:	4682      	mov	sl, r0
 80037de:	f019 fc19 	bl	801d014 <__mcmp>
 80037e2:	2800      	cmp	r0, #0
 80037e4:	9b01      	ldr	r3, [sp, #4]
 80037e6:	dc02      	bgt.n	80037ee <_dtoa_r+0xa9e>
 80037e8:	d1e0      	bne.n	80037ac <_dtoa_r+0xa5c>
 80037ea:	07da      	lsls	r2, r3, #31
 80037ec:	d5de      	bpl.n	80037ac <_dtoa_r+0xa5c>
 80037ee:	2b39      	cmp	r3, #57	; 0x39
 80037f0:	d1da      	bne.n	80037a8 <_dtoa_r+0xa58>
 80037f2:	2339      	movs	r3, #57	; 0x39
 80037f4:	f88b 3000 	strb.w	r3, [fp]
 80037f8:	462b      	mov	r3, r5
 80037fa:	461d      	mov	r5, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003802:	2a39      	cmp	r2, #57	; 0x39
 8003804:	d050      	beq.n	80038a8 <_dtoa_r+0xb58>
 8003806:	3201      	adds	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
 800380a:	e74c      	b.n	80036a6 <_dtoa_r+0x956>
 800380c:	2a00      	cmp	r2, #0
 800380e:	dd03      	ble.n	8003818 <_dtoa_r+0xac8>
 8003810:	2b39      	cmp	r3, #57	; 0x39
 8003812:	d0ee      	beq.n	80037f2 <_dtoa_r+0xaa2>
 8003814:	3301      	adds	r3, #1
 8003816:	e7c9      	b.n	80037ac <_dtoa_r+0xa5c>
 8003818:	9a01      	ldr	r2, [sp, #4]
 800381a:	9907      	ldr	r1, [sp, #28]
 800381c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003820:	428a      	cmp	r2, r1
 8003822:	d02a      	beq.n	800387a <_dtoa_r+0xb2a>
 8003824:	4651      	mov	r1, sl
 8003826:	2300      	movs	r3, #0
 8003828:	220a      	movs	r2, #10
 800382a:	4620      	mov	r0, r4
 800382c:	f019 fa60 	bl	801ccf0 <__multadd>
 8003830:	45b8      	cmp	r8, r7
 8003832:	4682      	mov	sl, r0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	f04f 020a 	mov.w	r2, #10
 800383c:	4641      	mov	r1, r8
 800383e:	4620      	mov	r0, r4
 8003840:	d107      	bne.n	8003852 <_dtoa_r+0xb02>
 8003842:	f019 fa55 	bl	801ccf0 <__multadd>
 8003846:	4680      	mov	r8, r0
 8003848:	4607      	mov	r7, r0
 800384a:	9b01      	ldr	r3, [sp, #4]
 800384c:	3301      	adds	r3, #1
 800384e:	9301      	str	r3, [sp, #4]
 8003850:	e777      	b.n	8003742 <_dtoa_r+0x9f2>
 8003852:	f019 fa4d 	bl	801ccf0 <__multadd>
 8003856:	4639      	mov	r1, r7
 8003858:	4680      	mov	r8, r0
 800385a:	2300      	movs	r3, #0
 800385c:	220a      	movs	r2, #10
 800385e:	4620      	mov	r0, r4
 8003860:	f019 fa46 	bl	801ccf0 <__multadd>
 8003864:	4607      	mov	r7, r0
 8003866:	e7f0      	b.n	800384a <_dtoa_r+0xafa>
 8003868:	f1bb 0f00 	cmp.w	fp, #0
 800386c:	9a00      	ldr	r2, [sp, #0]
 800386e:	bfcc      	ite	gt
 8003870:	465d      	movgt	r5, fp
 8003872:	2501      	movle	r5, #1
 8003874:	4415      	add	r5, r2
 8003876:	f04f 0800 	mov.w	r8, #0
 800387a:	4651      	mov	r1, sl
 800387c:	2201      	movs	r2, #1
 800387e:	4620      	mov	r0, r4
 8003880:	9301      	str	r3, [sp, #4]
 8003882:	f019 fb68 	bl	801cf56 <__lshift>
 8003886:	4631      	mov	r1, r6
 8003888:	4682      	mov	sl, r0
 800388a:	f019 fbc3 	bl	801d014 <__mcmp>
 800388e:	2800      	cmp	r0, #0
 8003890:	dcb2      	bgt.n	80037f8 <_dtoa_r+0xaa8>
 8003892:	d102      	bne.n	800389a <_dtoa_r+0xb4a>
 8003894:	9b01      	ldr	r3, [sp, #4]
 8003896:	07db      	lsls	r3, r3, #31
 8003898:	d4ae      	bmi.n	80037f8 <_dtoa_r+0xaa8>
 800389a:	462b      	mov	r3, r5
 800389c:	461d      	mov	r5, r3
 800389e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80038a2:	2a30      	cmp	r2, #48	; 0x30
 80038a4:	d0fa      	beq.n	800389c <_dtoa_r+0xb4c>
 80038a6:	e6fe      	b.n	80036a6 <_dtoa_r+0x956>
 80038a8:	9a00      	ldr	r2, [sp, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d1a5      	bne.n	80037fa <_dtoa_r+0xaaa>
 80038ae:	2331      	movs	r3, #49	; 0x31
 80038b0:	f109 0901 	add.w	r9, r9, #1
 80038b4:	7013      	strb	r3, [r2, #0]
 80038b6:	e6f6      	b.n	80036a6 <_dtoa_r+0x956>
 80038b8:	4b12      	ldr	r3, [pc, #72]	; (8003904 <_dtoa_r+0xbb4>)
 80038ba:	f7ff bab5 	b.w	8002e28 <_dtoa_r+0xd8>
 80038be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f47f aa8b 	bne.w	8002ddc <_dtoa_r+0x8c>
 80038c6:	4b10      	ldr	r3, [pc, #64]	; (8003908 <_dtoa_r+0xbb8>)
 80038c8:	f7ff baae 	b.w	8002e28 <_dtoa_r+0xd8>
 80038cc:	f1bb 0f00 	cmp.w	fp, #0
 80038d0:	dc03      	bgt.n	80038da <_dtoa_r+0xb8a>
 80038d2:	9b05      	ldr	r3, [sp, #20]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	f73f aecf 	bgt.w	8003678 <_dtoa_r+0x928>
 80038da:	9d00      	ldr	r5, [sp, #0]
 80038dc:	4631      	mov	r1, r6
 80038de:	4650      	mov	r0, sl
 80038e0:	f019 f930 	bl	801cb44 <quorem>
 80038e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80038e8:	f805 3b01 	strb.w	r3, [r5], #1
 80038ec:	9a00      	ldr	r2, [sp, #0]
 80038ee:	1aaa      	subs	r2, r5, r2
 80038f0:	4593      	cmp	fp, r2
 80038f2:	ddb9      	ble.n	8003868 <_dtoa_r+0xb18>
 80038f4:	4651      	mov	r1, sl
 80038f6:	2300      	movs	r3, #0
 80038f8:	220a      	movs	r2, #10
 80038fa:	4620      	mov	r0, r4
 80038fc:	f019 f9f8 	bl	801ccf0 <__multadd>
 8003900:	4682      	mov	sl, r0
 8003902:	e7eb      	b.n	80038dc <_dtoa_r+0xb8c>
 8003904:	0801edb9 	.word	0x0801edb9
 8003908:	0801edbb 	.word	0x0801edbb

0800390c <main>:




void main(void)
{
 800390c:	b508      	push	{r3, lr}
	printk("Hello World! %s\n", CONFIG_BOARD);
 800390e:	4906      	ldr	r1, [pc, #24]	; (8003928 <main+0x1c>)
 8003910:	4806      	ldr	r0, [pc, #24]	; (800392c <main+0x20>)
 8003912:	f013 ff22 	bl	801775a <printk>
#if ENABLE_UDP_SERVER_EXAMPLE
	start_udp_server ();
#endif

#if ENABLE_GPTP_EXAMPLE
	start_gptp_sample_app ();
 8003916:	f013 fec7 	bl	80176a8 <start_gptp_sample_app>
	return z_impl_k_sleep(timeout);
 800391a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800391e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003922:	f012 fe7f 	bl	8016624 <z_impl_k_sleep>
#endif

	while (1) {
 8003926:	e7f8      	b.n	800391a <main+0xe>
 8003928:	0801d940 	.word	0x0801d940
 800392c:	0801d94c 	.word	0x0801d94c

08003930 <stop_handler>:
static int run_duration = 30; // Run for 30 mins (1800 seconds)
static struct k_work_delayable stop_sample;
static struct k_sem quit_lock;

static void stop_handler(struct k_work *work)
{
 8003930:	b508      	push	{r3, lr}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8003932:	4802      	ldr	r0, [pc, #8]	; (800393c <stop_handler+0xc>)
 8003934:	f012 f8fe 	bl	8015b34 <z_impl_k_sem_give>
	ARG_UNUSED(work);

	k_sem_give(&quit_lock);
}
 8003938:	bd08      	pop	{r3, pc}
 800393a:	bf00      	nop
 800393c:	200030b8 	.word	0x200030b8

08003940 <get_current_status>:

static int get_current_status(void)
{
 8003940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003944:	b0af      	sub	sp, #188	; 0xbc
 8003946:	af04      	add	r7, sp, #16
	struct gptp_port_ds *port_ds;
	int ret, port;

	port = 1;

	domain = gptp_get_domain();
 8003948:	f005 f8a6 	bl	8008a98 <gptp_get_domain>
	struct gptp_port_param_ds *port_param_ds;
 	struct gptp_port_states *port_state;
  	struct gptp_port_bmca_data *port_bmca_data;
   	struct net_if *iface;

	ret = gptp_get_port_data(domain, port, &port_ds,
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	9302      	str	r3, [sp, #8]
 8003950:	f107 0308 	add.w	r3, r7, #8
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	f107 030c 	add.w	r3, r7, #12
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	f107 0310 	add.w	r3, r7, #16
 8003960:	f107 0214 	add.w	r2, r7, #20
 8003964:	2101      	movs	r1, #1
 8003966:	f005 f89b 	bl	8008aa0 <gptp_get_port_data>
				 &port_param_ds, &port_state, &port_bmca_data, &iface);
	if (ret < 0) {
 800396a:	1e04      	subs	r4, r0, #0
 800396c:	db11      	blt.n	8003992 <get_current_status+0x52>
		LOG_WRN("Cannot get gPTP information for port %d (%d)",
			port, ret);
		return ret;
	}

	if (port != port_ds->port_id.port_number) {
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003972:	2b01      	cmp	r3, #1
 8003974:	f040 8122 	bne.w	8003bbc <get_current_status+0x27c>
		return -EINVAL;
	}

	switch (GPTP_GLOBAL_DS()->selected_role[port]) {
 8003978:	4b93      	ldr	r3, [pc, #588]	; (8003bc8 <get_current_status+0x288>)
 800397a:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 800397e:	2b08      	cmp	r3, #8
 8003980:	f200 811f 	bhi.w	8003bc2 <get_current_status+0x282>
 8003984:	e8df f003 	tbb	[pc, r3]
 8003988:	49494949 	.word	0x49494949
 800398c:	49499049 	.word	0x49499049
 8003990:	d5          	.byte	0xd5
 8003991:	00          	.byte	0x00
		LOG_WRN("Cannot get gPTP information for port %d (%d)",
 8003992:	466d      	mov	r5, sp
 8003994:	b088      	sub	sp, #32
 8003996:	a804      	add	r0, sp, #16
 8003998:	466b      	mov	r3, sp
 800399a:	331c      	adds	r3, #28
 800399c:	d037      	beq.n	8003a0e <get_current_status+0xce>
 800399e:	2210      	movs	r2, #16
 80039a0:	b11b      	cbz	r3, 80039aa <get_current_status+0x6a>
 80039a2:	2a04      	cmp	r2, #4
 80039a4:	dd01      	ble.n	80039aa <get_current_status+0x6a>
 80039a6:	4989      	ldr	r1, [pc, #548]	; (8003bcc <get_current_status+0x28c>)
 80039a8:	6101      	str	r1, [r0, #16]
 80039aa:	b11b      	cbz	r3, 80039b4 <get_current_status+0x74>
 80039ac:	2a08      	cmp	r2, #8
 80039ae:	dd01      	ble.n	80039b4 <get_current_status+0x74>
 80039b0:	2101      	movs	r1, #1
 80039b2:	6141      	str	r1, [r0, #20]
 80039b4:	b113      	cbz	r3, 80039bc <get_current_status+0x7c>
 80039b6:	2a0c      	cmp	r2, #12
 80039b8:	dd00      	ble.n	80039bc <get_current_status+0x7c>
 80039ba:	6184      	str	r4, [r0, #24]
 80039bc:	2a0f      	cmp	r2, #15
 80039be:	dd29      	ble.n	8003a14 <get_current_status+0xd4>
 80039c0:	2110      	movs	r1, #16
 80039c2:	b143      	cbz	r3, 80039d6 <get_current_status+0x96>
 80039c4:	2300      	movs	r3, #0
 80039c6:	f8a7 3001 	strh.w	r3, [r7, #1]
 80039ca:	70fb      	strb	r3, [r7, #3]
 80039cc:	2204      	movs	r2, #4
 80039ce:	703a      	strb	r2, [r7, #0]
 80039d0:	70bb      	strb	r3, [r7, #2]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	60c3      	str	r3, [r0, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f36f 0200 	bfc	r2, #0, #1
 80039dc:	f36f 0241 	bfc	r2, #1, #1
 80039e0:	f36f 0282 	bfc	r2, #2, #1
 80039e4:	f36f 02c5 	bfc	r2, #3, #3
 80039e8:	2302      	movs	r3, #2
 80039ea:	f363 1288 	bfi	r2, r3, #6, #3
 80039ee:	f401 737d 	and.w	r3, r1, #1012	; 0x3f4
 80039f2:	f363 2252 	bfi	r2, r3, #9, #10
 80039f6:	2300      	movs	r3, #0
 80039f8:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80039fc:	4974      	ldr	r1, [pc, #464]	; (8003bd0 <get_current_status+0x290>)
 80039fe:	f014 f9a8 	bl	8017d52 <z_log_msg2_finalize>
 8003a02:	46ad      	mov	sp, r5
		LOG_WRN("SLAVE\n"); LOG_ERR("SLAVE\n");
		return 2;
	}

	return -1;
}
 8003a04:	4620      	mov	r0, r4
 8003a06:	37ac      	adds	r7, #172	; 0xac
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_WRN("Cannot get gPTP information for port %d (%d)",
 8003a0e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003a12:	e7c5      	b.n	80039a0 <get_current_status+0x60>
 8003a14:	f06f 011b 	mvn.w	r1, #27
 8003a18:	e7d3      	b.n	80039c2 <get_current_status+0x82>
		LOG_WRN("FAIL\n"); LOG_ERR ("FAIL\n");
 8003a1a:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8003bd4 <get_current_status+0x294>
 8003a1e:	f8c7 9088 	str.w	r9, [r7, #136]	; 0x88
 8003a22:	2400      	movs	r4, #0
 8003a24:	f8a7 4001 	strh.w	r4, [r7, #1]
 8003a28:	70fc      	strb	r4, [r7, #3]
 8003a2a:	2502      	movs	r5, #2
 8003a2c:	703d      	strb	r5, [r7, #0]
 8003a2e:	70bc      	strb	r4, [r7, #2]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a36:	4622      	mov	r2, r4
 8003a38:	f364 0200 	bfi	r2, r4, #0, #1
 8003a3c:	f364 0241 	bfi	r2, r4, #1, #1
 8003a40:	f364 0282 	bfi	r2, r4, #2, #1
 8003a44:	f364 02c5 	bfi	r2, r4, #3, #3
 8003a48:	f365 1288 	bfi	r2, r5, #6, #3
 8003a4c:	f04f 0808 	mov.w	r8, #8
 8003a50:	f368 2252 	bfi	r2, r8, #9, #10
 8003a54:	4e5e      	ldr	r6, [pc, #376]	; (8003bd0 <get_current_status+0x290>)
 8003a56:	4623      	mov	r3, r4
 8003a58:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003a5c:	4631      	mov	r1, r6
 8003a5e:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8003a62:	f014 f976 	bl	8017d52 <z_log_msg2_finalize>
 8003a66:	f8c7 90a0 	str.w	r9, [r7, #160]	; 0xa0
 8003a6a:	f8a7 4001 	strh.w	r4, [r7, #1]
 8003a6e:	70fc      	strb	r4, [r7, #3]
 8003a70:	703d      	strb	r5, [r7, #0]
 8003a72:	70bc      	strb	r4, [r7, #2]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	f364 0200 	bfi	r2, r4, #0, #1
 8003a80:	f364 0241 	bfi	r2, r4, #1, #1
 8003a84:	f364 0282 	bfi	r2, r4, #2, #1
 8003a88:	f364 02c5 	bfi	r2, r4, #3, #3
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f363 1288 	bfi	r2, r3, #6, #3
 8003a92:	f368 2252 	bfi	r2, r8, #9, #10
 8003a96:	4623      	mov	r3, r4
 8003a98:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003a9c:	4631      	mov	r1, r6
 8003a9e:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8003aa2:	f014 f956 	bl	8017d52 <z_log_msg2_finalize>
		return 0;
 8003aa6:	e7ad      	b.n	8003a04 <get_current_status+0xc4>
		LOG_WRN("MASTER\n"); LOG_ERR("MASTER\n");
 8003aa8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8003bd8 <get_current_status+0x298>
 8003aac:	f8c7 9058 	str.w	r9, [r7, #88]	; 0x58
 8003ab0:	2500      	movs	r5, #0
 8003ab2:	f8a7 5001 	strh.w	r5, [r7, #1]
 8003ab6:	70fd      	strb	r5, [r7, #3]
 8003ab8:	2402      	movs	r4, #2
 8003aba:	703c      	strb	r4, [r7, #0]
 8003abc:	70bd      	strb	r5, [r7, #2]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	657b      	str	r3, [r7, #84]	; 0x54
 8003ac2:	462a      	mov	r2, r5
 8003ac4:	f365 0200 	bfi	r2, r5, #0, #1
 8003ac8:	f365 0241 	bfi	r2, r5, #1, #1
 8003acc:	f365 0282 	bfi	r2, r5, #2, #1
 8003ad0:	f365 02c5 	bfi	r2, r5, #3, #3
 8003ad4:	f364 1288 	bfi	r2, r4, #6, #3
 8003ad8:	f04f 0808 	mov.w	r8, #8
 8003adc:	f368 2252 	bfi	r2, r8, #9, #10
 8003ae0:	4e3b      	ldr	r6, [pc, #236]	; (8003bd0 <get_current_status+0x290>)
 8003ae2:	462b      	mov	r3, r5
 8003ae4:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003ae8:	4631      	mov	r1, r6
 8003aea:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003aee:	f014 f930 	bl	8017d52 <z_log_msg2_finalize>
 8003af2:	f8c7 9070 	str.w	r9, [r7, #112]	; 0x70
 8003af6:	f8a7 5001 	strh.w	r5, [r7, #1]
 8003afa:	70fd      	strb	r5, [r7, #3]
 8003afc:	703c      	strb	r4, [r7, #0]
 8003afe:	70bd      	strb	r5, [r7, #2]
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b04:	462a      	mov	r2, r5
 8003b06:	f365 0200 	bfi	r2, r5, #0, #1
 8003b0a:	f365 0241 	bfi	r2, r5, #1, #1
 8003b0e:	f365 0282 	bfi	r2, r5, #2, #1
 8003b12:	f365 02c5 	bfi	r2, r5, #3, #3
 8003b16:	2401      	movs	r4, #1
 8003b18:	f364 1288 	bfi	r2, r4, #6, #3
 8003b1c:	f368 2252 	bfi	r2, r8, #9, #10
 8003b20:	462b      	mov	r3, r5
 8003b22:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003b26:	4631      	mov	r1, r6
 8003b28:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8003b2c:	f014 f911 	bl	8017d52 <z_log_msg2_finalize>
		return 1;
 8003b30:	e768      	b.n	8003a04 <get_current_status+0xc4>
		LOG_WRN("SLAVE\n"); LOG_ERR("SLAVE\n");
 8003b32:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003bdc <get_current_status+0x29c>
 8003b36:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
 8003b3a:	2500      	movs	r5, #0
 8003b3c:	f8a7 5001 	strh.w	r5, [r7, #1]
 8003b40:	70fd      	strb	r5, [r7, #3]
 8003b42:	2402      	movs	r4, #2
 8003b44:	703c      	strb	r4, [r7, #0]
 8003b46:	70bd      	strb	r5, [r7, #2]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4c:	462a      	mov	r2, r5
 8003b4e:	f365 0200 	bfi	r2, r5, #0, #1
 8003b52:	f365 0241 	bfi	r2, r5, #1, #1
 8003b56:	f365 0282 	bfi	r2, r5, #2, #1
 8003b5a:	f365 02c5 	bfi	r2, r5, #3, #3
 8003b5e:	f364 1288 	bfi	r2, r4, #6, #3
 8003b62:	f04f 0808 	mov.w	r8, #8
 8003b66:	f368 2252 	bfi	r2, r8, #9, #10
 8003b6a:	4e19      	ldr	r6, [pc, #100]	; (8003bd0 <get_current_status+0x290>)
 8003b6c:	462b      	mov	r3, r5
 8003b6e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003b72:	4631      	mov	r1, r6
 8003b74:	f107 0018 	add.w	r0, r7, #24
 8003b78:	f014 f8eb 	bl	8017d52 <z_log_msg2_finalize>
 8003b7c:	f8c7 9040 	str.w	r9, [r7, #64]	; 0x40
 8003b80:	f8a7 5001 	strh.w	r5, [r7, #1]
 8003b84:	70fd      	strb	r5, [r7, #3]
 8003b86:	703c      	strb	r4, [r7, #0]
 8003b88:	70bd      	strb	r5, [r7, #2]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b8e:	462a      	mov	r2, r5
 8003b90:	f365 0200 	bfi	r2, r5, #0, #1
 8003b94:	f365 0241 	bfi	r2, r5, #1, #1
 8003b98:	f365 0282 	bfi	r2, r5, #2, #1
 8003b9c:	f365 02c5 	bfi	r2, r5, #3, #3
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f363 1288 	bfi	r2, r3, #6, #3
 8003ba6:	f368 2252 	bfi	r2, r8, #9, #10
 8003baa:	462b      	mov	r3, r5
 8003bac:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003bb0:	4631      	mov	r1, r6
 8003bb2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003bb6:	f014 f8cc 	bl	8017d52 <z_log_msg2_finalize>
		return 2;
 8003bba:	e723      	b.n	8003a04 <get_current_status+0xc4>
		return -EINVAL;
 8003bbc:	f06f 0415 	mvn.w	r4, #21
 8003bc0:	e720      	b.n	8003a04 <get_current_status+0xc4>
	switch (GPTP_GLOBAL_DS()->selected_role[port]) {
 8003bc2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003bc6:	e71d      	b.n	8003a04 <get_current_status+0xc4>
 8003bc8:	20001470 	.word	0x20001470
 8003bcc:	0801d968 	.word	0x0801d968
 8003bd0:	0801d760 	.word	0x0801d760
 8003bd4:	0801d998 	.word	0x0801d998
 8003bd8:	0801d9a0 	.word	0x0801d9a0
 8003bdc:	0801d9a8 	.word	0x0801d9a8

08003be0 <init_app>:
			last_gm_ph_change->low);
	}
}

static int init_app(void)
{
 8003be0:	b508      	push	{r3, lr}
	gptp_register_phase_dis_cb(&phase_dis, gptp_phase_dis_cb);
 8003be2:	4903      	ldr	r1, [pc, #12]	; (8003bf0 <init_app+0x10>)
 8003be4:	4803      	ldr	r0, [pc, #12]	; (8003bf4 <init_app+0x14>)
 8003be6:	f004 ffab 	bl	8008b40 <gptp_register_phase_dis_cb>

	return 0;
}
 8003bea:	2000      	movs	r0, #0
 8003bec:	bd08      	pop	{r3, pc}
 8003bee:	bf00      	nop
 8003bf0:	08003bf9 	.word	0x08003bf9
 8003bf4:	200030b0 	.word	0x200030b0

08003bf8 <gptp_phase_dis_cb>:
{
 8003bf8:	b530      	push	{r4, r5, lr}
 8003bfa:	b08f      	sub	sp, #60	; 0x3c
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	4615      	mov	r5, r2
	if (memcmp(id, gm_identity, sizeof(id))) {
 8003c00:	2208      	movs	r2, #8
 8003c02:	4601      	mov	r1, r0
 8003c04:	4810      	ldr	r0, [pc, #64]	; (8003c48 <gptp_phase_dis_cb+0x50>)
 8003c06:	f018 fe09 	bl	801c81c <memcmp>
 8003c0a:	b908      	cbnz	r0, 8003c10 <gptp_phase_dis_cb+0x18>
}
 8003c0c:	b00f      	add	sp, #60	; 0x3c
 8003c0e:	bd30      	pop	{r4, r5, pc}
		memcpy(id, gm_identity, sizeof(id));
 8003c10:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <gptp_phase_dis_cb+0x50>)
 8003c12:	6820      	ldr	r0, [r4, #0]
 8003c14:	6861      	ldr	r1, [r4, #4]
 8003c16:	c303      	stmia	r3!, {r0, r1}
		LOG_DBG("GM %s last phase %d.%" PRId64 "",
 8003c18:	2218      	movs	r2, #24
 8003c1a:	a908      	add	r1, sp, #32
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	f015 fa84 	bl	801912a <gptp_sprint_clock_id>
 8003c22:	686a      	ldr	r2, [r5, #4]
 8003c24:	68ab      	ldr	r3, [r5, #8]
 8003c26:	9206      	str	r2, [sp, #24]
 8003c28:	9307      	str	r3, [sp, #28]
 8003c2a:	682b      	ldr	r3, [r5, #0]
 8003c2c:	9304      	str	r3, [sp, #16]
 8003c2e:	9003      	str	r0, [sp, #12]
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <gptp_phase_dis_cb+0x54>)
 8003c32:	9302      	str	r3, [sp, #8]
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <gptp_phase_dis_cb+0x58>)
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	2000      	movs	r0, #0
 8003c3a:	9000      	str	r0, [sp, #0]
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2204      	movs	r2, #4
 8003c40:	4904      	ldr	r1, [pc, #16]	; (8003c54 <gptp_phase_dis_cb+0x5c>)
 8003c42:	f013 fd24 	bl	801768e <z_log_msg2_runtime_create>
}
 8003c46:	e7e1      	b.n	8003c0c <gptp_phase_dis_cb+0x14>
 8003c48:	200030a8 	.word	0x200030a8
 8003c4c:	0801d9fc 	.word	0x0801d9fc
 8003c50:	0801d9b0 	.word	0x0801d9b0
 8003c54:	0801d760 	.word	0x0801d760

08003c58 <init_testing>:
{
 8003c58:	b570      	push	{r4, r5, r6, lr}
 8003c5a:	b088      	sub	sp, #32
	return z_impl_k_uptime_ticks();
 8003c5c:	f018 fcd4 	bl	801c608 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8003c60:	220a      	movs	r2, #10
 8003c62:	2300      	movs	r3, #0
 8003c64:	f7fc ff6a 	bl	8000b3c <__aeabi_uldivmod>
 8003c68:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
 8003c6a:	4d27      	ldr	r5, [pc, #156]	; (8003d08 <init_testing+0xb0>)
 8003c6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c70:	2100      	movs	r1, #0
 8003c72:	4628      	mov	r0, r5
 8003c74:	f018 f990 	bl	801bf98 <z_impl_k_sem_init>
	k_work_init_delayable(&stop_sample, stop_handler);
 8003c78:	4e24      	ldr	r6, [pc, #144]	; (8003d0c <init_testing+0xb4>)
 8003c7a:	4925      	ldr	r1, [pc, #148]	; (8003d10 <init_testing+0xb8>)
 8003c7c:	4630      	mov	r0, r6
 8003c7e:	f018 fa3b 	bl	801c0f8 <k_work_init_delayable>
	k_work_reschedule(&stop_sample, K_SECONDS(run_duration));
 8003c82:	4a24      	ldr	r2, [pc, #144]	; (8003d14 <init_testing+0xbc>)
 8003c84:	2300      	movs	r3, #0
 8003c86:	4630      	mov	r0, r6
 8003c88:	f012 f944 	bl	8015f14 <k_work_reschedule>
	return z_impl_k_sem_take(sem, timeout);
 8003c8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c94:	4628      	mov	r0, r5
 8003c96:	f011 ff75 	bl	8015b84 <z_impl_k_sem_take>
	return z_impl_k_uptime_ticks();
 8003c9a:	f018 fcb5 	bl	801c608 <z_impl_k_uptime_ticks>
	LOG_INF("Stopping after %u seconds",
 8003c9e:	4b1e      	ldr	r3, [pc, #120]	; (8003d18 <init_testing+0xc0>)
 8003ca0:	9306      	str	r3, [sp, #24]
 8003ca2:	f018 fcb1 	bl	801c608 <z_impl_k_uptime_ticks>
 8003ca6:	f018 fcaf 	bl	801c608 <z_impl_k_uptime_ticks>
 8003caa:	220a      	movs	r2, #10
 8003cac:	2300      	movs	r3, #0
 8003cae:	f7fc ff45 	bl	8000b3c <__aeabi_uldivmod>
 8003cb2:	1b00      	subs	r0, r0, r4
 8003cb4:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <init_testing+0xc4>)
 8003cb6:	fba3 3000 	umull	r3, r0, r3, r0
 8003cba:	0980      	lsrs	r0, r0, #6
 8003cbc:	9007      	str	r0, [sp, #28]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f8ad 3005 	strh.w	r3, [sp, #5]
 8003cc4:	f88d 3007 	strb.w	r3, [sp, #7]
 8003cc8:	2103      	movs	r1, #3
 8003cca:	f88d 1004 	strb.w	r1, [sp, #4]
 8003cce:	f88d 3006 	strb.w	r3, [sp, #6]
 8003cd2:	9a01      	ldr	r2, [sp, #4]
 8003cd4:	9205      	str	r2, [sp, #20]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f363 0200 	bfi	r2, r3, #0, #1
 8003cdc:	f363 0241 	bfi	r2, r3, #1, #1
 8003ce0:	f363 0282 	bfi	r2, r3, #2, #1
 8003ce4:	f363 02c5 	bfi	r2, r3, #3, #3
 8003ce8:	f361 1288 	bfi	r2, r1, #6, #3
 8003cec:	210c      	movs	r1, #12
 8003cee:	f361 2252 	bfi	r2, r1, #9, #10
 8003cf2:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8003cf6:	490a      	ldr	r1, [pc, #40]	; (8003d20 <init_testing+0xc8>)
 8003cf8:	a802      	add	r0, sp, #8
 8003cfa:	f014 f82a 	bl	8017d52 <z_log_msg2_finalize>
	ret = get_current_status();
 8003cfe:	f7ff fe1f 	bl	8003940 <get_current_status>
}
 8003d02:	b008      	add	sp, #32
 8003d04:	bd70      	pop	{r4, r5, r6, pc}
 8003d06:	bf00      	nop
 8003d08:	200030b8 	.word	0x200030b8
 8003d0c:	20001410 	.word	0x20001410
 8003d10:	08003931 	.word	0x08003931
 8003d14:	000493e0 	.word	0x000493e0
 8003d18:	0801d9d0 	.word	0x0801d9d0
 8003d1c:	10624dd3 	.word	0x10624dd3
 8003d20:	0801d760 	.word	0x0801d760

08003d24 <cbvprintf_package>:

#endif

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
 8003d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d28:	b08b      	sub	sp, #44	; 0x2c
 8003d2a:	9203      	str	r2, [sp, #12]
	unsigned int i;
	const char *s;
	bool parsing = false;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
 8003d2c:	9001      	str	r0, [sp, #4]
 8003d2e:	f010 0a03 	ands.w	sl, r0, #3
 8003d32:	f040 822f 	bne.w	8004194 <cbvprintf_package+0x470>
 8003d36:	4681      	mov	r9, r0
 8003d38:	468b      	mov	fp, r1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
 8003d3a:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
 8003d3c:	b320      	cbz	r0, 8003d88 <cbvprintf_package+0x64>

	/*
	 * Otherwise we must ensure we can store at least
	 * thepointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
 8003d3e:	f1b9 0f00 	cmp.w	r9, #0
 8003d42:	d005      	beq.n	8003d50 <cbvprintf_package+0x2c>
 8003d44:	eba4 0209 	sub.w	r2, r4, r9
 8003d48:	3204      	adds	r2, #4
 8003d4a:	455a      	cmp	r2, fp
 8003d4c:	f200 8225 	bhi.w	800419a <cbvprintf_package+0x476>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
 8003d50:	1e5f      	subs	r7, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
 8003d52:	f8cd a000 	str.w	sl, [sp]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
 8003d56:	f8cd a010 	str.w	sl, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
 8003d5a:	f8cd a008 	str.w	sl, [sp, #8]
	bool parsing = false;
 8003d5e:	2500      	movs	r5, #0
	align = VA_STACK_ALIGN(char *);
 8003d60:	2604      	movs	r6, #4
	size = sizeof(char *);
 8003d62:	46b0      	mov	r8, r6
 8003d64:	f8cd a014 	str.w	sl, [sp, #20]
 8003d68:	f8dd a004 	ldr.w	sl, [sp, #4]

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
 8003d6c:	f1b9 0f00 	cmp.w	r9, #0
 8003d70:	d000      	beq.n	8003d74 <cbvprintf_package+0x50>
				*(const char **)buf = s;
 8003d72:	6023      	str	r3, [r4, #0]
	return ((addr >= (const char *)RO_START) &&
 8003d74:	4acc      	ldr	r2, [pc, #816]	; (80040a8 <cbvprintf_package+0x384>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	f0c0 8158 	bcc.w	800402c <cbvprintf_package+0x308>
 8003d7c:	4acb      	ldr	r2, [pc, #812]	; (80040ac <cbvprintf_package+0x388>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	f0c0 8181 	bcc.w	8004086 <cbvprintf_package+0x362>
 8003d84:	2200      	movs	r2, #0
 8003d86:	e152      	b.n	800402e <cbvprintf_package+0x30a>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
 8003d88:	f001 0b07 	and.w	fp, r1, #7
 8003d8c:	445c      	add	r4, fp
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
 8003d8e:	f1cb 0b08 	rsb	fp, fp, #8
 8003d92:	e7d4      	b.n	8003d3e <cbvprintf_package+0x1a>
			if (*fmt == '%') {
 8003d94:	2b25      	cmp	r3, #37	; 0x25
 8003d96:	f000 80c7 	beq.w	8003f28 <cbvprintf_package+0x204>
		if (!parsing) {
 8003d9a:	4667      	mov	r7, ip
	while (*++fmt != '\0') {
 8003d9c:	f107 0c01 	add.w	ip, r7, #1
 8003da0:	787b      	ldrb	r3, [r7, #1]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 818d 	beq.w	80040c2 <cbvprintf_package+0x39e>
		if (!parsing) {
 8003da8:	2d00      	cmp	r5, #0
 8003daa:	d0f3      	beq.n	8003d94 <cbvprintf_package+0x70>
		switch (*fmt) {
 8003dac:	f1a3 0220 	sub.w	r2, r3, #32
 8003db0:	2a5a      	cmp	r2, #90	; 0x5a
 8003db2:	f200 80bd 	bhi.w	8003f30 <cbvprintf_package+0x20c>
 8003db6:	a101      	add	r1, pc, #4	; (adr r1, 8003dbc <cbvprintf_package+0x98>)
 8003db8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003dbc:	08003d9b 	.word	0x08003d9b
 8003dc0:	08003f31 	.word	0x08003f31
 8003dc4:	08003f31 	.word	0x08003f31
 8003dc8:	08003d9b 	.word	0x08003d9b
 8003dcc:	08003f31 	.word	0x08003f31
 8003dd0:	08003f31 	.word	0x08003f31
 8003dd4:	08003f31 	.word	0x08003f31
 8003dd8:	08003f31 	.word	0x08003f31
 8003ddc:	08003f31 	.word	0x08003f31
 8003de0:	08003f31 	.word	0x08003f31
 8003de4:	08003f4f 	.word	0x08003f4f
 8003de8:	08003d9b 	.word	0x08003d9b
 8003dec:	08003f31 	.word	0x08003f31
 8003df0:	08003d9b 	.word	0x08003d9b
 8003df4:	08003d9b 	.word	0x08003d9b
 8003df8:	08003f31 	.word	0x08003f31
 8003dfc:	08003d9b 	.word	0x08003d9b
 8003e00:	08003d9b 	.word	0x08003d9b
 8003e04:	08003d9b 	.word	0x08003d9b
 8003e08:	08003d9b 	.word	0x08003d9b
 8003e0c:	08003d9b 	.word	0x08003d9b
 8003e10:	08003d9b 	.word	0x08003d9b
 8003e14:	08003d9b 	.word	0x08003d9b
 8003e18:	08003d9b 	.word	0x08003d9b
 8003e1c:	08003d9b 	.word	0x08003d9b
 8003e20:	08003d9b 	.word	0x08003d9b
 8003e24:	08003f31 	.word	0x08003f31
 8003e28:	08003f31 	.word	0x08003f31
 8003e2c:	08003f31 	.word	0x08003f31
 8003e30:	08003f31 	.word	0x08003f31
 8003e34:	08003f31 	.word	0x08003f31
 8003e38:	08003f31 	.word	0x08003f31
 8003e3c:	08003f31 	.word	0x08003f31
 8003e40:	08003fb3 	.word	0x08003fb3
 8003e44:	08003f31 	.word	0x08003f31
 8003e48:	08003f31 	.word	0x08003f31
 8003e4c:	08003f31 	.word	0x08003f31
 8003e50:	08003fb3 	.word	0x08003fb3
 8003e54:	08003fb3 	.word	0x08003fb3
 8003e58:	08003fb3 	.word	0x08003fb3
 8003e5c:	08003f31 	.word	0x08003f31
 8003e60:	08003f31 	.word	0x08003f31
 8003e64:	08003f31 	.word	0x08003f31
 8003e68:	08003f31 	.word	0x08003f31
 8003e6c:	08003d9b 	.word	0x08003d9b
 8003e70:	08003f31 	.word	0x08003f31
 8003e74:	08003f31 	.word	0x08003f31
 8003e78:	08003f31 	.word	0x08003f31
 8003e7c:	08003f31 	.word	0x08003f31
 8003e80:	08003f31 	.word	0x08003f31
 8003e84:	08003f31 	.word	0x08003f31
 8003e88:	08003f31 	.word	0x08003f31
 8003e8c:	08003f31 	.word	0x08003f31
 8003e90:	08003f31 	.word	0x08003f31
 8003e94:	08003f31 	.word	0x08003f31
 8003e98:	08003f31 	.word	0x08003f31
 8003e9c:	08003f47 	.word	0x08003f47
 8003ea0:	08003f31 	.word	0x08003f31
 8003ea4:	08003f31 	.word	0x08003f31
 8003ea8:	08003f31 	.word	0x08003f31
 8003eac:	08003f31 	.word	0x08003f31
 8003eb0:	08003f31 	.word	0x08003f31
 8003eb4:	08003f31 	.word	0x08003f31
 8003eb8:	08003f31 	.word	0x08003f31
 8003ebc:	08003f31 	.word	0x08003f31
 8003ec0:	08003fb3 	.word	0x08003fb3
 8003ec4:	08003f31 	.word	0x08003f31
 8003ec8:	08003f47 	.word	0x08003f47
 8003ecc:	08003f47 	.word	0x08003f47
 8003ed0:	08003fb3 	.word	0x08003fb3
 8003ed4:	08003fb3 	.word	0x08003fb3
 8003ed8:	08003fb3 	.word	0x08003fb3
 8003edc:	08003d9b 	.word	0x08003d9b
 8003ee0:	08003f47 	.word	0x08003f47
 8003ee4:	08003f35 	.word	0x08003f35
 8003ee8:	08003f31 	.word	0x08003f31
 8003eec:	08003d9b 	.word	0x08003d9b
 8003ef0:	08003f31 	.word	0x08003f31
 8003ef4:	08004015 	.word	0x08004015
 8003ef8:	08003f47 	.word	0x08003f47
 8003efc:	08004015 	.word	0x08004015
 8003f00:	08003f31 	.word	0x08003f31
 8003f04:	08003f31 	.word	0x08003f31
 8003f08:	08004015 	.word	0x08004015
 8003f0c:	08003f41 	.word	0x08003f41
 8003f10:	08003f47 	.word	0x08003f47
 8003f14:	08003f31 	.word	0x08003f31
 8003f18:	08003f31 	.word	0x08003f31
 8003f1c:	08003f47 	.word	0x08003f47
 8003f20:	08003f31 	.word	0x08003f31
 8003f24:	08003f3b 	.word	0x08003f3b
				parsing = true;
 8003f28:	2501      	movs	r5, #1
				align = VA_STACK_ALIGN(int);
 8003f2a:	2604      	movs	r6, #4
				size = sizeof(int);
 8003f2c:	46b0      	mov	r8, r6
			continue;
 8003f2e:	e734      	b.n	8003d9a <cbvprintf_package+0x76>
		if (!parsing) {
 8003f30:	2500      	movs	r5, #0
 8003f32:	e732      	b.n	8003d9a <cbvprintf_package+0x76>
			align = VA_STACK_ALIGN(intmax_t);
 8003f34:	2608      	movs	r6, #8
			size = sizeof(intmax_t);
 8003f36:	46b0      	mov	r8, r6
			continue;
 8003f38:	e72f      	b.n	8003d9a <cbvprintf_package+0x76>
			align = VA_STACK_ALIGN(size_t);
 8003f3a:	2604      	movs	r6, #4
			size = sizeof(size_t);
 8003f3c:	46b0      	mov	r8, r6
			continue;
 8003f3e:	e72c      	b.n	8003d9a <cbvprintf_package+0x76>
			align = VA_STACK_ALIGN(ptrdiff_t);
 8003f40:	2604      	movs	r6, #4
			size = sizeof(ptrdiff_t);
 8003f42:	46b0      	mov	r8, r6
			continue;
 8003f44:	e729      	b.n	8003d9a <cbvprintf_package+0x76>
			if (fmt[-1] == 'l') {
 8003f46:	783a      	ldrb	r2, [r7, #0]
 8003f48:	2a6c      	cmp	r2, #108	; 0x6c
 8003f4a:	d026      	beq.n	8003f9a <cbvprintf_package+0x276>
			parsing = false;
 8003f4c:	2500      	movs	r5, #0
		buf = (void *) ROUND_UP(buf, align);
 8003f4e:	eb0e 0206 	add.w	r2, lr, r6
 8003f52:	3a01      	subs	r2, #1
 8003f54:	4271      	negs	r1, r6
 8003f56:	400a      	ands	r2, r1
 8003f58:	4610      	mov	r0, r2
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 8003f5a:	b12c      	cbz	r4, 8003f68 <cbvprintf_package+0x244>
 8003f5c:	eba2 010a 	sub.w	r1, r2, sl
 8003f60:	4441      	add	r1, r8
 8003f62:	458b      	cmp	fp, r1
 8003f64:	f0c0 811c 	bcc.w	80041a0 <cbvprintf_package+0x47c>
		if (*fmt == 's') {
 8003f68:	2b73      	cmp	r3, #115	; 0x73
 8003f6a:	d057      	beq.n	800401c <cbvprintf_package+0x2f8>
				}

				s_idx++;
			}
			buf += sizeof(char *);
		} else if (size == sizeof(int)) {
 8003f6c:	f1b8 0f04 	cmp.w	r8, #4
 8003f70:	f000 809e 	beq.w	80040b0 <cbvprintf_package+0x38c>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
 8003f74:	f1b8 0f08 	cmp.w	r8, #8
 8003f78:	f040 811b 	bne.w	80041b2 <cbvprintf_package+0x48e>
			long long v = va_arg(ap, long long);
 8003f7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f7e:	3307      	adds	r3, #7
 8003f80:	f023 0307 	bic.w	r3, r3, #7
 8003f84:	f103 0108 	add.w	r1, r3, #8
 8003f88:	9114      	str	r1, [sp, #80]	; 0x50
 8003f8a:	e9d3 0100 	ldrd	r0, r1, [r3]

			if (buf0 != NULL) {
 8003f8e:	b10c      	cbz	r4, 8003f94 <cbvprintf_package+0x270>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
 8003f90:	e9c2 0100 	strd	r0, r1, [r2]
				}
			}
			buf += sizeof(long long);
 8003f94:	f102 0e08 	add.w	lr, r2, #8
 8003f98:	e6ff      	b.n	8003d9a <cbvprintf_package+0x76>
				if (fmt[-2] == 'l') {
 8003f9a:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8003f9e:	2a6c      	cmp	r2, #108	; 0x6c
 8003fa0:	d003      	beq.n	8003faa <cbvprintf_package+0x286>
			parsing = false;
 8003fa2:	2500      	movs	r5, #0
					align = VA_STACK_ALIGN(long);
 8003fa4:	2604      	movs	r6, #4
					size = sizeof(long);
 8003fa6:	46b0      	mov	r8, r6
 8003fa8:	e7d1      	b.n	8003f4e <cbvprintf_package+0x22a>
			parsing = false;
 8003faa:	2500      	movs	r5, #0
					align = VA_STACK_ALIGN(long long);
 8003fac:	2608      	movs	r6, #8
					size = sizeof(long long);
 8003fae:	46b0      	mov	r8, r6
 8003fb0:	e7cd      	b.n	8003f4e <cbvprintf_package+0x22a>
			if (fmt[-1] == 'L') {
 8003fb2:	783b      	ldrb	r3, [r7, #0]
 8003fb4:	2b4c      	cmp	r3, #76	; 0x4c
 8003fb6:	d01d      	beq.n	8003ff4 <cbvprintf_package+0x2d0>
				v.d = va_arg(ap, double);
 8003fb8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003fba:	3307      	adds	r3, #7
 8003fbc:	f023 0307 	bic.w	r3, r3, #7
 8003fc0:	f103 0208 	add.w	r2, r3, #8
 8003fc4:	9214      	str	r2, [sp, #80]	; 0x50
 8003fc6:	e9d3 0100 	ldrd	r0, r1, [r3]
			buf = (void *) ROUND_UP(buf, align);
 8003fca:	f10e 0207 	add.w	r2, lr, #7
 8003fce:	f022 0207 	bic.w	r2, r2, #7
			if (buf0 != NULL) {
 8003fd2:	b14c      	cbz	r4, 8003fe8 <cbvprintf_package+0x2c4>
				if (BUF_OFFSET + size > len) {
 8003fd4:	eba2 030a 	sub.w	r3, r2, sl
 8003fd8:	3308      	adds	r3, #8
 8003fda:	455b      	cmp	r3, fp
 8003fdc:	d814      	bhi.n	8004008 <cbvprintf_package+0x2e4>
				} else if (fmt[-1] == 'L') {
 8003fde:	783b      	ldrb	r3, [r7, #0]
 8003fe0:	2b4c      	cmp	r3, #76	; 0x4c
 8003fe2:	d014      	beq.n	800400e <cbvprintf_package+0x2ea>
					*(double *)buf = v.d;
 8003fe4:	e9c2 0100 	strd	r0, r1, [r2]
			buf += size;
 8003fe8:	f102 0e08 	add.w	lr, r2, #8
			parsing = false;
 8003fec:	2500      	movs	r5, #0
			continue;
 8003fee:	2608      	movs	r6, #8
 8003ff0:	46b0      	mov	r8, r6
 8003ff2:	e6d2      	b.n	8003d9a <cbvprintf_package+0x76>
				v.ld = va_arg(ap, long double);
 8003ff4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003ff6:	3307      	adds	r3, #7
 8003ff8:	f023 0307 	bic.w	r3, r3, #7
 8003ffc:	f103 0208 	add.w	r2, r3, #8
 8004000:	9214      	str	r2, [sp, #80]	; 0x50
 8004002:	e9d3 0100 	ldrd	r0, r1, [r3]
				size = sizeof(long double);
 8004006:	e7e0      	b.n	8003fca <cbvprintf_package+0x2a6>
					return -ENOSPC;
 8004008:	f06f 001b 	mvn.w	r0, #27
 800400c:	e0bf      	b.n	800418e <cbvprintf_package+0x46a>
					*(long double *)buf = v.ld;
 800400e:	e9c2 0100 	strd	r0, r1, [r2]
 8004012:	e7e9      	b.n	8003fe8 <cbvprintf_package+0x2c4>
			parsing = false;
 8004014:	2500      	movs	r5, #0
			align = VA_STACK_ALIGN(void *);
 8004016:	2604      	movs	r6, #4
			size = sizeof(void *);
 8004018:	46b0      	mov	r8, r6
 800401a:	e798      	b.n	8003f4e <cbvprintf_package+0x22a>
 800401c:	46a1      	mov	r9, r4
 800401e:	4604      	mov	r4, r0
			s = va_arg(ap, char *);
 8004020:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004022:	1d1a      	adds	r2, r3, #4
 8004024:	9214      	str	r2, [sp, #80]	; 0x50
 8004026:	681b      	ldr	r3, [r3, #0]
	while (*++fmt != '\0') {
 8004028:	4667      	mov	r7, ip
 800402a:	e69f      	b.n	8003d6c <cbvprintf_package+0x48>
	return ((addr >= (const char *)RO_START) &&
 800402c:	2200      	movs	r2, #0
			bool do_all = !!(flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS);
 800402e:	9903      	ldr	r1, [sp, #12]
 8004030:	f001 0101 	and.w	r1, r1, #1
			if (is_ro && !do_all) {
 8004034:	4610      	mov	r0, r2
 8004036:	b102      	cbz	r2, 800403a <cbvprintf_package+0x316>
 8004038:	b309      	cbz	r1, 800407e <cbvprintf_package+0x35a>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
 800403a:	eba4 0c0a 	sub.w	ip, r4, sl
 800403e:	ea4f 029c 	mov.w	r2, ip, lsr #2
				if (do_all && s_ptr_idx > STR_POS_MASK) {
 8004042:	b119      	cbz	r1, 800404c <cbvprintf_package+0x328>
 8004044:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8004048:	f080 80ad 	bcs.w	80041a6 <cbvprintf_package+0x482>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
 800404c:	9902      	ldr	r1, [sp, #8]
 800404e:	290f      	cmp	r1, #15
 8004050:	f200 80ac 	bhi.w	80041ac <cbvprintf_package+0x488>
				if (buf0 != NULL) {
 8004054:	f1b9 0f00 	cmp.w	r9, #0
 8004058:	d01b      	beq.n	8004092 <cbvprintf_package+0x36e>
					str_ptr_pos[s_idx] = s_ptr_idx;
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	ab0a      	add	r3, sp, #40	; 0x28
 800405e:	440b      	add	r3, r1
 8004060:	f803 2c10 	strb.w	r2, [r3, #-16]
					if (is_ro) {
 8004064:	b188      	cbz	r0, 800408a <cbvprintf_package+0x366>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
 8004066:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800406a:	ab0a      	add	r3, sp, #40	; 0x28
 800406c:	440b      	add	r3, r1
 800406e:	f803 2c10 	strb.w	r2, [r3, #-16]
						s_ro_cnt++;
 8004072:	9b00      	ldr	r3, [sp, #0]
 8004074:	3301      	adds	r3, #1
 8004076:	9300      	str	r3, [sp, #0]
				s_idx++;
 8004078:	9b02      	ldr	r3, [sp, #8]
 800407a:	3301      	adds	r3, #1
 800407c:	9302      	str	r3, [sp, #8]
			buf += sizeof(char *);
 800407e:	3404      	adds	r4, #4
 8004080:	46a6      	mov	lr, r4
 8004082:	464c      	mov	r4, r9
 8004084:	e68a      	b.n	8003d9c <cbvprintf_package+0x78>
	return ((addr >= (const char *)RO_START) &&
 8004086:	2201      	movs	r2, #1
 8004088:	e7d1      	b.n	800402e <cbvprintf_package+0x30a>
						s_rw_cnt++;
 800408a:	9b04      	ldr	r3, [sp, #16]
 800408c:	3301      	adds	r3, #1
 800408e:	9304      	str	r3, [sp, #16]
 8004090:	e7f2      	b.n	8004078 <cbvprintf_package+0x354>
				} else if (is_ro) {
 8004092:	b110      	cbz	r0, 800409a <cbvprintf_package+0x376>
					len += 1;
 8004094:	f10b 0b01 	add.w	fp, fp, #1
 8004098:	e7ee      	b.n	8004078 <cbvprintf_package+0x354>
					len += strlen(s) + 1 + 1;
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc ff16 	bl	8000ecc <strlen>
 80040a0:	1c83      	adds	r3, r0, #2
 80040a2:	449b      	add	fp, r3
 80040a4:	e7e8      	b.n	8004078 <cbvprintf_package+0x354>
 80040a6:	bf00      	nop
 80040a8:	0801d220 	.word	0x0801d220
 80040ac:	0801edd4 	.word	0x0801edd4
			int v = va_arg(ap, int);
 80040b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80040b2:	1d19      	adds	r1, r3, #4
 80040b4:	9114      	str	r1, [sp, #80]	; 0x50
 80040b6:	681b      	ldr	r3, [r3, #0]
			if (buf0 != NULL) {
 80040b8:	b104      	cbz	r4, 80040bc <cbvprintf_package+0x398>
				*(int *)buf = v;
 80040ba:	6013      	str	r3, [r2, #0]
			buf += sizeof(int);
 80040bc:	f102 0e04 	add.w	lr, r2, #4
 80040c0:	e66b      	b.n	8003d9a <cbvprintf_package+0x76>
 80040c2:	f8dd a014 	ldr.w	sl, [sp, #20]
 80040c6:	46a1      	mov	r9, r4
 80040c8:	4674      	mov	r4, lr
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
 80040ca:	ebae 0309 	sub.w	r3, lr, r9
 80040ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d2:	d271      	bcs.n	80041b8 <cbvprintf_package+0x494>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
 80040d4:	f1b9 0f00 	cmp.w	r9, #0
 80040d8:	d00f      	beq.n	80040fa <cbvprintf_package+0x3d6>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
 80040da:	2200      	movs	r2, #0
 80040dc:	f8c9 2000 	str.w	r2, [r9]

	/* Record end of argument list and number of appended strings. */
	buf0[0] = BUF_OFFSET / sizeof(int);
 80040e0:	089b      	lsrs	r3, r3, #2
 80040e2:	f889 3000 	strb.w	r3, [r9]
	buf0[1] = s_rw_cnt;
 80040e6:	9b04      	ldr	r3, [sp, #16]
 80040e8:	f889 3001 	strb.w	r3, [r9, #1]
	buf0[2] = s_ro_cnt;
 80040ec:	9b00      	ldr	r3, [sp, #0]
 80040ee:	f889 3002 	strb.w	r3, [r9, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
 80040f2:	b9d3      	cbnz	r3, 800412a <cbvprintf_package+0x406>
 80040f4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80040f8:	e03b      	b.n	8004172 <cbvprintf_package+0x44e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
 80040fa:	445b      	add	r3, fp
 80040fc:	f1a3 0008 	sub.w	r0, r3, #8
 8004100:	e045      	b.n	800418e <cbvprintf_package+0x46a>
		for (i = 0; i < s_idx; i++) {
 8004102:	3301      	adds	r3, #1
 8004104:	4298      	cmp	r0, r3
 8004106:	d914      	bls.n	8004132 <cbvprintf_package+0x40e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
 8004108:	aa0a      	add	r2, sp, #40	; 0x28
 800410a:	441a      	add	r2, r3
 800410c:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 8004110:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
 8004114:	2a00      	cmp	r2, #0
 8004116:	daf4      	bge.n	8004102 <cbvprintf_package+0x3de>
				continue;
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
 8004118:	f001 017f 	and.w	r1, r1, #127	; 0x7f

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
 800411c:	1b62      	subs	r2, r4, r5
 800411e:	3201      	adds	r2, #1
 8004120:	4593      	cmp	fp, r2
 8004122:	d34c      	bcc.n	80041be <cbvprintf_package+0x49a>
				return -ENOSPC;
			}
			/* store the pointer position prefix */
			*buf++ = pos;
 8004124:	f804 1b01 	strb.w	r1, [r4], #1
 8004128:	e7eb      	b.n	8004102 <cbvprintf_package+0x3de>
		for (i = 0; i < s_idx; i++) {
 800412a:	4653      	mov	r3, sl
 800412c:	9d01      	ldr	r5, [sp, #4]
 800412e:	9802      	ldr	r0, [sp, #8]
 8004130:	e7e8      	b.n	8004104 <cbvprintf_package+0x3e0>
 8004132:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004136:	e01c      	b.n	8004172 <cbvprintf_package+0x44e>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
			continue;
		}

		/* retrieve the string pointer */
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
 8004138:	ab0a      	add	r3, sp, #40	; 0x28
 800413a:	4453      	add	r3, sl
 800413c:	f813 6c10 	ldrb.w	r6, [r3, #-16]
 8004140:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
		/* clear the in-buffer pointer (less entropy if compressed) */
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
 8004144:	2300      	movs	r3, #0
 8004146:	f849 3026 	str.w	r3, [r9, r6, lsl #2]
		/* find the string length including terminating '\0' */
		size = strlen(s) + 1;
 800414a:	4638      	mov	r0, r7
 800414c:	f7fc febe 	bl	8000ecc <strlen>
 8004150:	1c45      	adds	r5, r0, #1
		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
 8004152:	9b01      	ldr	r3, [sp, #4]
 8004154:	1ae3      	subs	r3, r4, r3
 8004156:	442b      	add	r3, r5
 8004158:	3301      	adds	r3, #1
 800415a:	459b      	cmp	fp, r3
 800415c:	d332      	bcc.n	80041c4 <cbvprintf_package+0x4a0>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
 800415e:	f804 6b01 	strb.w	r6, [r4], #1
 8004162:	462a      	mov	r2, r5
 8004164:	4639      	mov	r1, r7
 8004166:	4620      	mov	r0, r4
 8004168:	f018 fb66 	bl	801c838 <memcpy>
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
		buf += size;
 800416c:	442c      	add	r4, r5
	for (i = 0; i < s_idx; i++) {
 800416e:	f10a 0a01 	add.w	sl, sl, #1
 8004172:	45d0      	cmp	r8, sl
 8004174:	d909      	bls.n	800418a <cbvprintf_package+0x466>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
 8004176:	9b00      	ldr	r3, [sp, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0dd      	beq.n	8004138 <cbvprintf_package+0x414>
 800417c:	ab0a      	add	r3, sp, #40	; 0x28
 800417e:	4453      	add	r3, sl
 8004180:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	dad7      	bge.n	8004138 <cbvprintf_package+0x414>
 8004188:	e7f1      	b.n	800416e <cbvprintf_package+0x44a>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
 800418a:	eba4 0009 	sub.w	r0, r4, r9

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
 800418e:	b00b      	add	sp, #44	; 0x2c
 8004190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
 8004194:	f06f 000d 	mvn.w	r0, #13
 8004198:	e7f9      	b.n	800418e <cbvprintf_package+0x46a>
		return -ENOSPC;
 800419a:	f06f 001b 	mvn.w	r0, #27
 800419e:	e7f6      	b.n	800418e <cbvprintf_package+0x46a>
			return -ENOSPC;
 80041a0:	f06f 001b 	mvn.w	r0, #27
 80041a4:	e7f3      	b.n	800418e <cbvprintf_package+0x46a>
					return -EINVAL;
 80041a6:	f06f 0015 	mvn.w	r0, #21
 80041aa:	e7f0      	b.n	800418e <cbvprintf_package+0x46a>
					return -EINVAL;
 80041ac:	f06f 0015 	mvn.w	r0, #21
 80041b0:	e7ed      	b.n	800418e <cbvprintf_package+0x46a>
			return -EINVAL;
 80041b2:	f06f 0015 	mvn.w	r0, #21
 80041b6:	e7ea      	b.n	800418e <cbvprintf_package+0x46a>
		return -EINVAL;
 80041b8:	f06f 0015 	mvn.w	r0, #21
 80041bc:	e7e7      	b.n	800418e <cbvprintf_package+0x46a>
				return -ENOSPC;
 80041be:	f06f 001b 	mvn.w	r0, #27
 80041c2:	e7e4      	b.n	800418e <cbvprintf_package+0x46a>
			return -ENOSPC;
 80041c4:	f06f 001b 	mvn.w	r0, #27
 80041c8:	e7e1      	b.n	800418e <cbvprintf_package+0x46a>
 80041ca:	bf00      	nop

080041cc <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
 80041cc:	4b01      	ldr	r3, [pc, #4]	; (80041d4 <__printk_hook_install+0x8>)
 80041ce:	6018      	str	r0, [r3, #0]
}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	20000800 	.word	0x20000800

080041d8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
 80041d8:	b510      	push	{r4, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
 80041de:	9001      	str	r0, [sp, #4]
 80041e0:	9102      	str	r1, [sp, #8]
 80041e2:	2100      	movs	r1, #0
 80041e4:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
 80041e6:	a901      	add	r1, sp, #4
 80041e8:	4805      	ldr	r0, [pc, #20]	; (8004200 <vsnprintk+0x28>)
 80041ea:	f000 faab 	bl	8004744 <cbvprintf>

	if (ctx.count < ctx.max) {
 80041ee:	9b03      	ldr	r3, [sp, #12]
 80041f0:	9a02      	ldr	r2, [sp, #8]
 80041f2:	4293      	cmp	r3, r2
 80041f4:	da01      	bge.n	80041fa <vsnprintk+0x22>
		str[ctx.count] = '\0';
 80041f6:	2200      	movs	r2, #0
 80041f8:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
 80041fa:	9803      	ldr	r0, [sp, #12]
 80041fc:	b004      	add	sp, #16
 80041fe:	bd10      	pop	{r4, pc}
 8004200:	08017721 	.word	0x08017721

08004204 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
 8004204:	b410      	push	{r4}
 8004206:	4604      	mov	r4, r0
	const char *sp = *str;
 8004208:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
 800420a:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
 800420c:	7813      	ldrb	r3, [r2, #0]
 800420e:	4908      	ldr	r1, [pc, #32]	; (8004230 <extract_decimal+0x2c>)
 8004210:	5c59      	ldrb	r1, [r3, r1]
 8004212:	f011 0f04 	tst.w	r1, #4
 8004216:	d006      	beq.n	8004226 <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
 8004218:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800421c:	3201      	adds	r2, #1
 800421e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004222:	3830      	subs	r0, #48	; 0x30
 8004224:	e7f2      	b.n	800420c <extract_decimal+0x8>
	}
	*str = sp;
 8004226:	6022      	str	r2, [r4, #0]
	return val;
}
 8004228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	0801eca9 	.word	0x0801eca9

08004234 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
 8004234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004238:	b083      	sub	sp, #12
 800423a:	4604      	mov	r4, r0
 800423c:	460d      	mov	r5, r1
 800423e:	9201      	str	r2, [sp, #4]
 8004240:	469a      	mov	sl, r3
 8004242:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
 8004246:	78d3      	ldrb	r3, [r2, #3]
 8004248:	4a31      	ldr	r2, [pc, #196]	; (8004310 <encode_uint+0xdc>)
 800424a:	f813 b002 	ldrb.w	fp, [r3, r2]
 800424e:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
 8004252:	2b6f      	cmp	r3, #111	; 0x6f
 8004254:	d00f      	beq.n	8004276 <encode_uint+0x42>
 8004256:	d906      	bls.n	8004266 <encode_uint+0x32>
 8004258:	2b70      	cmp	r3, #112	; 0x70
 800425a:	d00f      	beq.n	800427c <encode_uint+0x48>
 800425c:	2b78      	cmp	r3, #120	; 0x78
 800425e:	d110      	bne.n	8004282 <encode_uint+0x4e>
		return 16;
 8004260:	f04f 0910 	mov.w	r9, #16
 8004264:	e023      	b.n	80042ae <encode_uint+0x7a>
	switch (specifier) {
 8004266:	2b58      	cmp	r3, #88	; 0x58
 8004268:	d002      	beq.n	8004270 <encode_uint+0x3c>
 800426a:	f04f 090a 	mov.w	r9, #10
 800426e:	e01e      	b.n	80042ae <encode_uint+0x7a>
		return 16;
 8004270:	f04f 0910 	mov.w	r9, #16
 8004274:	e01b      	b.n	80042ae <encode_uint+0x7a>
		return 8;
 8004276:	f04f 0908 	mov.w	r9, #8
 800427a:	e018      	b.n	80042ae <encode_uint+0x7a>
		return 16;
 800427c:	f04f 0910 	mov.w	r9, #16
 8004280:	e015      	b.n	80042ae <encode_uint+0x7a>
	switch (specifier) {
 8004282:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
 8004286:	e012      	b.n	80042ae <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	3230      	adds	r2, #48	; 0x30
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
 8004292:	4632      	mov	r2, r6
 8004294:	463b      	mov	r3, r7
 8004296:	4620      	mov	r0, r4
 8004298:	4629      	mov	r1, r5
 800429a:	f7fc fc4f 	bl	8000b3c <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
 800429e:	42bd      	cmp	r5, r7
 80042a0:	bf08      	it	eq
 80042a2:	42b4      	cmpeq	r4, r6
 80042a4:	d318      	bcc.n	80042d8 <encode_uint+0xa4>
 80042a6:	45d0      	cmp	r8, sl
 80042a8:	d916      	bls.n	80042d8 <encode_uint+0xa4>
		value /= radix;
 80042aa:	4604      	mov	r4, r0
 80042ac:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
 80042ae:	464e      	mov	r6, r9
 80042b0:	2700      	movs	r7, #0
 80042b2:	464a      	mov	r2, r9
 80042b4:	463b      	mov	r3, r7
 80042b6:	4620      	mov	r0, r4
 80042b8:	4629      	mov	r1, r5
 80042ba:	f7fc fc3f 	bl	8000b3c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80042be:	2a09      	cmp	r2, #9
 80042c0:	d9e2      	bls.n	8004288 <encode_uint+0x54>
 80042c2:	f1bb 0f01 	cmp.w	fp, #1
 80042c6:	d003      	beq.n	80042d0 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 80042c8:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80042ca:	3257      	adds	r2, #87	; 0x57
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	e7de      	b.n	800428e <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
 80042d0:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
 80042d2:	3237      	adds	r2, #55	; 0x37
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	e7da      	b.n	800428e <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
 80042d8:	9b01      	ldr	r3, [sp, #4]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	f013 0f20 	tst.w	r3, #32
 80042e0:	d005      	beq.n	80042ee <encode_uint+0xba>
		if (radix == 8) {
 80042e2:	f1b9 0f08 	cmp.w	r9, #8
 80042e6:	d006      	beq.n	80042f6 <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
 80042e8:	f1b9 0f10 	cmp.w	r9, #16
 80042ec:	d009      	beq.n	8004302 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
 80042ee:	4640      	mov	r0, r8
 80042f0:	b003      	add	sp, #12
 80042f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
 80042f6:	9a01      	ldr	r2, [sp, #4]
 80042f8:	7893      	ldrb	r3, [r2, #2]
 80042fa:	f043 0308 	orr.w	r3, r3, #8
 80042fe:	7093      	strb	r3, [r2, #2]
 8004300:	e7f5      	b.n	80042ee <encode_uint+0xba>
			conv->altform_0c = true;
 8004302:	9a01      	ldr	r2, [sp, #4]
 8004304:	7893      	ldrb	r3, [r2, #2]
 8004306:	f043 0310 	orr.w	r3, r3, #16
 800430a:	7093      	strb	r3, [r2, #2]
 800430c:	e7ef      	b.n	80042ee <encode_uint+0xba>
 800430e:	bf00      	nop
 8004310:	0801eca9 	.word	0x0801eca9

08004314 <encode_float>:
			  struct conversion *conv,
			  int precision,
			  char *sign,
			  char *bps,
			  const char **bpe)
{
 8004314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004318:	b089      	sub	sp, #36	; 0x24
 800431a:	4692      	mov	sl, r2
 800431c:	461d      	mov	r5, r3
	char *buf = bps;

	/* Prepend the sign: '-' if negative, flags control
	 * non-negative behavior.
	 */
	if ((u.u64 & SIGN_MASK) != 0U) {
 800431e:	2800      	cmp	r0, #0
 8004320:	f171 0300 	sbcs.w	r3, r1, #0
 8004324:	db08      	blt.n	8004338 <encode_float+0x24>
		*sign = '-';
	} else if (conv->flag_plus) {
 8004326:	f89a 3000 	ldrb.w	r3, [sl]
 800432a:	f013 0f08 	tst.w	r3, #8
 800432e:	d014      	beq.n	800435a <encode_float+0x46>
		*sign = '+';
 8004330:	232b      	movs	r3, #43	; 0x2b
 8004332:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004334:	7013      	strb	r3, [r2, #0]
 8004336:	e002      	b.n	800433e <encode_float+0x2a>
		*sign = '-';
 8004338:	232d      	movs	r3, #45	; 0x2d
 800433a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800433c:	7013      	strb	r3, [r2, #0]
	}

	/* Extract the non-negative offset exponent and fraction.  Record
	 * whether the value is subnormal.
	 */
	char c = conv->specifier;
 800433e:	f89a b003 	ldrb.w	fp, [sl, #3]
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
 8004342:	f3c1 540a 	ubfx	r4, r1, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
 8004346:	4602      	mov	r2, r0
 8004348:	f3c1 0313 	ubfx	r3, r1, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
 800434c:	b964      	cbnz	r4, 8004368 <encode_float+0x54>
 800434e:	ea52 0103 	orrs.w	r1, r2, r3
 8004352:	d130      	bne.n	80043b6 <encode_float+0xa2>
 8004354:	f04f 0e00 	mov.w	lr, #0
 8004358:	e008      	b.n	800436c <encode_float+0x58>
	} else if (conv->flag_space) {
 800435a:	f013 0f10 	tst.w	r3, #16
 800435e:	d0ee      	beq.n	800433e <encode_float+0x2a>
		*sign = ' ';
 8004360:	2320      	movs	r3, #32
 8004362:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004364:	7013      	strb	r3, [r2, #0]
 8004366:	e7ea      	b.n	800433e <encode_float+0x2a>
	bool is_subnormal = (expo == 0) && (fract != 0);
 8004368:	f04f 0e00 	mov.w	lr, #0

	/* Exponent of all-ones signals infinity or NaN, which are
	 * text constants regardless of specifier.
	 */
	if (expo == BIT_MASK(EXPONENT_BITS)) {
 800436c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004370:	428c      	cmp	r4, r1
 8004372:	d023      	beq.n	80043bc <encode_float+0xa8>
		*bpe = buf;
		return bps;
	}

	/* The case of an F specifier is no longer relevant. */
	if (c == 'F') {
 8004374:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
 8004378:	d060      	beq.n	800443c <encode_float+0x128>

	/* Remainder of code operates on a 64-bit fraction, so shift up (and
	 * discard garbage from the exponent where the implicit 1 would be
	 * stored).
	 */
	fract <<= EXPONENT_BITS;
 800437a:	ea4f 2cc3 	mov.w	ip, r3, lsl #11
 800437e:	ea4c 5c52 	orr.w	ip, ip, r2, lsr #21
 8004382:	02d2      	lsls	r2, r2, #11
	fract &= ~SIGN_MASK;
 8004384:	f02c 4c00 	bic.w	ip, ip, #2147483648	; 0x80000000
 8004388:	9206      	str	r2, [sp, #24]
 800438a:	f8cd c01c 	str.w	ip, [sp, #28]

	/* Non-zero values need normalization. */
	if ((expo | fract) != 0) {
 800438e:	ea44 0002 	orr.w	r0, r4, r2
 8004392:	17e3      	asrs	r3, r4, #31
 8004394:	ea43 010c 	orr.w	r1, r3, ip
 8004398:	ea50 0301 	orrs.w	r3, r0, r1
 800439c:	d008      	beq.n	80043b0 <encode_float+0x9c>
		if (is_subnormal) {
 800439e:	f1be 0f00 	cmp.w	lr, #0
 80043a2:	d14f      	bne.n	8004444 <encode_float+0x130>
		}
		/* Adjust the offset exponent to be signed rather than offset,
		 * and set the implicit 1 bit in the (shifted) 53-bit
		 * fraction.
		 */
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
 80043a4:	f2a4 34fe 	subw	r4, r4, #1022	; 0x3fe
		fract |= BIT_63;
 80043a8:	9b07      	ldr	r3, [sp, #28]
 80043aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043ae:	9307      	str	r3, [sp, #28]
		c = 'f';
 80043b0:	f04f 0800 	mov.w	r8, #0
 80043b4:	e061      	b.n	800447a <encode_float+0x166>
	bool is_subnormal = (expo == 0) && (fract != 0);
 80043b6:	f04f 0e01 	mov.w	lr, #1
 80043ba:	e7d7      	b.n	800436c <encode_float+0x58>
		if (fract == 0) {
 80043bc:	4313      	orrs	r3, r2
 80043be:	d122      	bne.n	8004406 <encode_float+0xf2>
			if (isupper((int)c)) {
 80043c0:	4bad      	ldr	r3, [pc, #692]	; (8004678 <encode_float+0x364>)
 80043c2:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d011      	beq.n	80043f2 <encode_float+0xde>
				*buf++ = 'i';
 80043ce:	2369      	movs	r3, #105	; 0x69
 80043d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80043d2:	7013      	strb	r3, [r2, #0]
				*buf++ = 'n';
 80043d4:	236e      	movs	r3, #110	; 0x6e
 80043d6:	7053      	strb	r3, [r2, #1]
				*buf++ = 'f';
 80043d8:	3203      	adds	r2, #3
 80043da:	2366      	movs	r3, #102	; 0x66
 80043dc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80043de:	708b      	strb	r3, [r1, #2]
		conv->flag_zero = false;
 80043e0:	f89a 3000 	ldrb.w	r3, [sl]
 80043e4:	f36f 1386 	bfc	r3, #6, #1
 80043e8:	f88a 3000 	strb.w	r3, [sl]
		*bpe = buf;
 80043ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80043ee:	601a      	str	r2, [r3, #0]
		return bps;
 80043f0:	e192      	b.n	8004718 <encode_float+0x404>
				*buf++ = 'I';
 80043f2:	2349      	movs	r3, #73	; 0x49
 80043f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80043f6:	7013      	strb	r3, [r2, #0]
				*buf++ = 'N';
 80043f8:	234e      	movs	r3, #78	; 0x4e
 80043fa:	7053      	strb	r3, [r2, #1]
				*buf++ = 'F';
 80043fc:	3203      	adds	r2, #3
 80043fe:	2346      	movs	r3, #70	; 0x46
 8004400:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004402:	708b      	strb	r3, [r1, #2]
 8004404:	e7ec      	b.n	80043e0 <encode_float+0xcc>
			if (isupper((int)c)) {
 8004406:	4b9c      	ldr	r3, [pc, #624]	; (8004678 <encode_float+0x364>)
 8004408:	f81b 3003 	ldrb.w	r3, [fp, r3]
 800440c:	f003 0303 	and.w	r3, r3, #3
 8004410:	2b01      	cmp	r3, #1
 8004412:	d009      	beq.n	8004428 <encode_float+0x114>
				*buf++ = 'n';
 8004414:	236e      	movs	r3, #110	; 0x6e
 8004416:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004418:	7013      	strb	r3, [r2, #0]
				*buf++ = 'a';
 800441a:	2261      	movs	r2, #97	; 0x61
 800441c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800441e:	704a      	strb	r2, [r1, #1]
				*buf++ = 'n';
 8004420:	460a      	mov	r2, r1
 8004422:	3203      	adds	r2, #3
 8004424:	708b      	strb	r3, [r1, #2]
 8004426:	e7db      	b.n	80043e0 <encode_float+0xcc>
				*buf++ = 'N';
 8004428:	234e      	movs	r3, #78	; 0x4e
 800442a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800442c:	7013      	strb	r3, [r2, #0]
				*buf++ = 'A';
 800442e:	2241      	movs	r2, #65	; 0x41
 8004430:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004432:	704a      	strb	r2, [r1, #1]
				*buf++ = 'N';
 8004434:	460a      	mov	r2, r1
 8004436:	3203      	adds	r2, #3
 8004438:	708b      	strb	r3, [r1, #2]
 800443a:	e7d1      	b.n	80043e0 <encode_float+0xcc>
		c = 'f';
 800443c:	f04f 0b66 	mov.w	fp, #102	; 0x66
 8004440:	e79b      	b.n	800437a <encode_float+0x66>
				expo--;
 8004442:	3c01      	subs	r4, #1
			while (((fract <<= 1) & BIT_63) == 0) {
 8004444:	9b06      	ldr	r3, [sp, #24]
 8004446:	9a07      	ldr	r2, [sp, #28]
 8004448:	eb13 0803 	adds.w	r8, r3, r3
 800444c:	eb42 0902 	adc.w	r9, r2, r2
 8004450:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004454:	f1b8 0f00 	cmp.w	r8, #0
 8004458:	f179 0300 	sbcs.w	r3, r9, #0
 800445c:	daf1      	bge.n	8004442 <encode_float+0x12e>
 800445e:	e7a1      	b.n	80043a4 <encode_float+0x90>
			fract >>= 1;
			expo++;
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));

		/* Perform fract * 5 * 2 / 10 */
		fract *= 5U;
 8004460:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 8004464:	0098      	lsls	r0, r3, #2
 8004466:	ea4c 7493 	orr.w	r4, ip, r3, lsr #30
 800446a:	18c3      	adds	r3, r0, r3
 800446c:	eb44 0202 	adc.w	r2, r4, r2
 8004470:	9306      	str	r3, [sp, #24]
 8004472:	9207      	str	r2, [sp, #28]
		expo++;
 8004474:	1c8c      	adds	r4, r1, #2
		decexp--;
 8004476:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	while (expo < -2) {
 800447a:	f114 0f02 	cmn.w	r4, #2
 800447e:	da26      	bge.n	80044ce <encode_float+0x1ba>
			fract >>= 1;
 8004480:	9907      	ldr	r1, [sp, #28]
 8004482:	9b06      	ldr	r3, [sp, #24]
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
 800448a:	084a      	lsrs	r2, r1, #1
 800448c:	9306      	str	r3, [sp, #24]
 800448e:	9207      	str	r2, [sp, #28]
			expo++;
 8004490:	4621      	mov	r1, r4
 8004492:	3401      	adds	r4, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
 8004494:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
 8004498:	d2f2      	bcs.n	8004480 <encode_float+0x16c>
 800449a:	e7e1      	b.n	8004460 <encode_float+0x14c>
		/*
		 * Perform fract / 5 / 2 * 10.
		 * The +2 is there to do round the result of the division
		 * by 5 not to lose too much precision in extreme cases.
		 */
		fract += 2;
 800449c:	9b06      	ldr	r3, [sp, #24]
 800449e:	3302      	adds	r3, #2
 80044a0:	9a07      	ldr	r2, [sp, #28]
 80044a2:	f142 0200 	adc.w	r2, r2, #0
 80044a6:	9306      	str	r3, [sp, #24]
 80044a8:	9207      	str	r2, [sp, #28]
		_ldiv5(&fract);
 80044aa:	a806      	add	r0, sp, #24
 80044ac:	f013 fb65 	bl	8017b7a <_ldiv5>
		expo--;
 80044b0:	3c01      	subs	r4, #1
		decexp++;
 80044b2:	f108 0801 	add.w	r8, r8, #1

		/* Bring back our fractional number to full scale */
		do {
			fract <<= 1;
 80044b6:	9b06      	ldr	r3, [sp, #24]
 80044b8:	9a07      	ldr	r2, [sp, #28]
 80044ba:	18de      	adds	r6, r3, r3
 80044bc:	eb42 0702 	adc.w	r7, r2, r2
 80044c0:	e9cd 6706 	strd	r6, r7, [sp, #24]
			expo--;
 80044c4:	3c01      	subs	r4, #1
		} while (!(fract & BIT_63));
 80044c6:	2e00      	cmp	r6, #0
 80044c8:	f177 0300 	sbcs.w	r3, r7, #0
 80044cc:	daf3      	bge.n	80044b6 <encode_float+0x1a2>
	while (expo > 0) {
 80044ce:	2c00      	cmp	r4, #0
 80044d0:	dce4      	bgt.n	800449c <encode_float+0x188>
	/*
	 * The binary fractional point is located somewhere above bit 63.
	 * Move it between bits 59 and 60 to give 4 bits of room to the
	 * integer part.
	 */
	fract >>= (4 - expo);
 80044d2:	f1c4 0104 	rsb	r1, r4, #4
 80044d6:	9a07      	ldr	r2, [sp, #28]
 80044d8:	341c      	adds	r4, #28
 80044da:	f1a1 0020 	sub.w	r0, r1, #32
 80044de:	9b06      	ldr	r3, [sp, #24]
 80044e0:	40cb      	lsrs	r3, r1
 80044e2:	fa02 f404 	lsl.w	r4, r2, r4
 80044e6:	4323      	orrs	r3, r4
 80044e8:	fa22 f000 	lsr.w	r0, r2, r0
 80044ec:	4303      	orrs	r3, r0
 80044ee:	40ca      	lsrs	r2, r1
 80044f0:	9306      	str	r3, [sp, #24]
 80044f2:	9207      	str	r2, [sp, #28]

	if ((c == 'g') || (c == 'G')) {
 80044f4:	f1bb 0f67 	cmp.w	fp, #103	; 0x67
 80044f8:	d012      	beq.n	8004520 <encode_float+0x20c>
 80044fa:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80044fe:	d00f      	beq.n	8004520 <encode_float+0x20c>
	bool prune_zero = false;
 8004500:	2700      	movs	r7, #0
			prune_zero = true;
		}
	}

	int decimals;
	if (c == 'f') {
 8004502:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004506:	d029      	beq.n	800455c <encode_float+0x248>
		decimals = precision + decexp;
		if (decimals < 0) {
			decimals = 0;
		}
	} else {
		decimals = precision + 1;
 8004508:	1c6c      	adds	r4, r5, #1
	}

	int digit_count = 16;
 800450a:	2310      	movs	r3, #16
 800450c:	9305      	str	r3, [sp, #20]

	if (decimals > 16) {
 800450e:	429c      	cmp	r4, r3
 8004510:	dd00      	ble.n	8004514 <encode_float+0x200>
		decimals = 16;
 8004512:	461c      	mov	r4, r3
	}

	/* Round the value to the last digit being printed. */
	uint64_t round = BIT64(59); /* 0.5 */
 8004514:	2200      	movs	r2, #0
 8004516:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800451a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	while (decimals--) {
 800451e:	e028      	b.n	8004572 <encode_float+0x25e>
		if (decexp < (-4 + 1) || decexp > precision) {
 8004520:	f118 0f03 	cmn.w	r8, #3
 8004524:	db01      	blt.n	800452a <encode_float+0x216>
 8004526:	45a8      	cmp	r8, r5
 8004528:	dd11      	ble.n	800454e <encode_float+0x23a>
			c += 'e' - 'g';  /* e or E */
 800452a:	f1ab 0b02 	sub.w	fp, fp, #2
 800452e:	fa5f fb8b 	uxtb.w	fp, fp
			if (precision > 0) {
 8004532:	2d00      	cmp	r5, #0
 8004534:	dd00      	ble.n	8004538 <encode_float+0x224>
				precision--;
 8004536:	3d01      	subs	r5, #1
		if (!conv->flag_hash && (precision > 0)) {
 8004538:	f89a 3000 	ldrb.w	r3, [sl]
 800453c:	f3c3 1740 	ubfx	r7, r3, #5, #1
 8004540:	f013 0f20 	tst.w	r3, #32
 8004544:	d108      	bne.n	8004558 <encode_float+0x244>
 8004546:	2d00      	cmp	r5, #0
 8004548:	dddb      	ble.n	8004502 <encode_float+0x1ee>
			prune_zero = true;
 800454a:	2701      	movs	r7, #1
 800454c:	e7d9      	b.n	8004502 <encode_float+0x1ee>
			precision -= decexp;
 800454e:	eba5 0508 	sub.w	r5, r5, r8
			c = 'f';
 8004552:	f04f 0b66 	mov.w	fp, #102	; 0x66
 8004556:	e7ef      	b.n	8004538 <encode_float+0x224>
	bool prune_zero = false;
 8004558:	2700      	movs	r7, #0
 800455a:	e7d2      	b.n	8004502 <encode_float+0x1ee>
		if (decimals < 0) {
 800455c:	eb18 0405 	adds.w	r4, r8, r5
 8004560:	d5d3      	bpl.n	800450a <encode_float+0x1f6>
	int digit_count = 16;
 8004562:	2310      	movs	r3, #16
 8004564:	9305      	str	r3, [sp, #20]
			decimals = 0;
 8004566:	2400      	movs	r4, #0
 8004568:	e7d4      	b.n	8004514 <encode_float+0x200>
		_ldiv10(&round);
 800456a:	a802      	add	r0, sp, #8
 800456c:	f013 fb23 	bl	8017bb6 <_ldiv10>
	while (decimals--) {
 8004570:	4634      	mov	r4, r6
 8004572:	1e66      	subs	r6, r4, #1
 8004574:	2c00      	cmp	r4, #0
 8004576:	d1f8      	bne.n	800456a <encode_float+0x256>
	}
	fract += round;
 8004578:	9b06      	ldr	r3, [sp, #24]
 800457a:	9a02      	ldr	r2, [sp, #8]
 800457c:	189b      	adds	r3, r3, r2
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	9a07      	ldr	r2, [sp, #28]
 8004582:	9b03      	ldr	r3, [sp, #12]
 8004584:	eb42 0303 	adc.w	r3, r2, r3
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800458e:	e9cd 2306 	strd	r2, r3, [sp, #24]
	/* Make sure rounding didn't make fract >= 1.0 */
	if (fract >= BIT64(60)) {
 8004592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004596:	bf08      	it	eq
 8004598:	2a00      	cmpeq	r2, #0
 800459a:	d207      	bcs.n	80045ac <encode_float+0x298>
		_ldiv10(&fract);
		decexp++;
	}

	if (c == 'f') {
 800459c:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80045a0:	d145      	bne.n	800462e <encode_float+0x31a>
		if (decexp > 0) {
 80045a2:	f1b8 0f00 	cmp.w	r8, #0
 80045a6:	dd3d      	ble.n	8004624 <encode_float+0x310>
	char *buf = bps;
 80045a8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80045aa:	e00d      	b.n	80045c8 <encode_float+0x2b4>
		_ldiv10(&fract);
 80045ac:	a806      	add	r0, sp, #24
 80045ae:	f013 fb02 	bl	8017bb6 <_ldiv10>
		decexp++;
 80045b2:	f108 0801 	add.w	r8, r8, #1
 80045b6:	e7f1      	b.n	800459c <encode_float+0x288>
			/* Emit the digits above the decimal point. */
			while (decexp > 0 && digit_count > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
 80045b8:	a905      	add	r1, sp, #20
 80045ba:	a806      	add	r0, sp, #24
 80045bc:	f013 fb07 	bl	8017bce <_get_digit>
 80045c0:	f806 0b01 	strb.w	r0, [r6], #1
				decexp--;
 80045c4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			while (decexp > 0 && digit_count > 0) {
 80045c8:	f1b8 0f00 	cmp.w	r8, #0
 80045cc:	dd02      	ble.n	80045d4 <encode_float+0x2c0>
 80045ce:	9b05      	ldr	r3, [sp, #20]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	dcf1      	bgt.n	80045b8 <encode_float+0x2a4>
			}

			conv->pad0_value = decexp;
 80045d4:	f8ca 8004 	str.w	r8, [sl, #4]

			decexp = 0;
 80045d8:	46a0      	mov	r8, r4
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
 80045da:	f89a 3000 	ldrb.w	r3, [sl]
 80045de:	f013 0f20 	tst.w	r3, #32
 80045e2:	d101      	bne.n	80045e8 <encode_float+0x2d4>
 80045e4:	2d00      	cmp	r5, #0
 80045e6:	dd02      	ble.n	80045ee <encode_float+0x2da>
			*buf++ = '.';
 80045e8:	232e      	movs	r3, #46	; 0x2e
 80045ea:	f806 3b01 	strb.w	r3, [r6], #1
		}

		if (decexp < 0 && precision > 0) {
 80045ee:	f1b8 0f00 	cmp.w	r8, #0
 80045f2:	da33      	bge.n	800465c <encode_float+0x348>
 80045f4:	2d00      	cmp	r5, #0
 80045f6:	dd31      	ble.n	800465c <encode_float+0x348>
			conv->pad0_value = -decexp;
 80045f8:	f1c8 0300 	rsb	r3, r8, #0
 80045fc:	f8ca 3004 	str.w	r3, [sl, #4]
			if (conv->pad0_value > precision) {
 8004600:	429d      	cmp	r5, r3
 8004602:	da01      	bge.n	8004608 <encode_float+0x2f4>
				conv->pad0_value = precision;
 8004604:	f8ca 5004 	str.w	r5, [sl, #4]
			}

			precision -= conv->pad0_value;
 8004608:	f8da 3004 	ldr.w	r3, [sl, #4]
 800460c:	1aed      	subs	r5, r5, r3
			conv->pad_postdp = (conv->pad0_value > 0);
 800460e:	2b00      	cmp	r3, #0
 8004610:	bfd4      	ite	le
 8004612:	2300      	movle	r3, #0
 8004614:	2301      	movgt	r3, #1
 8004616:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800461a:	f363 1245 	bfi	r2, r3, #5, #1
 800461e:	f88a 2002 	strb.w	r2, [sl, #2]
 8004622:	e01b      	b.n	800465c <encode_float+0x348>
			*buf++ = '0';
 8004624:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8004626:	2330      	movs	r3, #48	; 0x30
 8004628:	f806 3b01 	strb.w	r3, [r6], #1
 800462c:	e7d5      	b.n	80045da <encode_float+0x2c6>
		}
	} else { /* e or E */
		/* Emit the one digit before the decimal.  If it's not zero,
		 * this is significant so reduce the base-10 exponent.
		 */
		*buf = _get_digit(&fract, &digit_count);
 800462e:	a905      	add	r1, sp, #20
 8004630:	a806      	add	r0, sp, #24
 8004632:	f013 facc 	bl	8017bce <_get_digit>
 8004636:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8004638:	f806 0b01 	strb.w	r0, [r6], #1
		if (*buf++ != '0') {
 800463c:	2830      	cmp	r0, #48	; 0x30
 800463e:	d001      	beq.n	8004644 <encode_float+0x330>
			decexp--;
 8004640:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
 8004644:	f89a 3000 	ldrb.w	r3, [sl]
 8004648:	f013 0f20 	tst.w	r3, #32
 800464c:	d101      	bne.n	8004652 <encode_float+0x33e>
 800464e:	2d00      	cmp	r5, #0
 8004650:	dd04      	ble.n	800465c <encode_float+0x348>
			*buf++ = '.';
 8004652:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004654:	1c9e      	adds	r6, r3, #2
 8004656:	232e      	movs	r3, #46	; 0x2e
 8004658:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800465a:	7053      	strb	r3, [r2, #1]
		}
	}

	while (precision > 0 && digit_count > 0) {
 800465c:	2d00      	cmp	r5, #0
 800465e:	dd0d      	ble.n	800467c <encode_float+0x368>
 8004660:	9b05      	ldr	r3, [sp, #20]
 8004662:	2b00      	cmp	r3, #0
 8004664:	dd0a      	ble.n	800467c <encode_float+0x368>
		*buf++ = _get_digit(&fract, &digit_count);
 8004666:	a905      	add	r1, sp, #20
 8004668:	a806      	add	r0, sp, #24
 800466a:	f013 fab0 	bl	8017bce <_get_digit>
 800466e:	f806 0b01 	strb.w	r0, [r6], #1
		precision--;
 8004672:	3d01      	subs	r5, #1
 8004674:	e7f2      	b.n	800465c <encode_float+0x348>
 8004676:	bf00      	nop
 8004678:	0801eca9 	.word	0x0801eca9
	}

	conv->pad0_pre_exp = precision;
 800467c:	f8ca 5008 	str.w	r5, [sl, #8]

	if (prune_zero) {
 8004680:	b157      	cbz	r7, 8004698 <encode_float+0x384>
		conv->pad0_pre_exp = 0;
 8004682:	2300      	movs	r3, #0
 8004684:	f8ca 3008 	str.w	r3, [sl, #8]
		while (*--buf == '0') {
 8004688:	4633      	mov	r3, r6
 800468a:	461e      	mov	r6, r3
 800468c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004690:	2a30      	cmp	r2, #48	; 0x30
 8004692:	d0fa      	beq.n	800468a <encode_float+0x376>
			;
		}
		if (*buf != '.') {
 8004694:	2a2e      	cmp	r2, #46	; 0x2e
 8004696:	d043      	beq.n	8004720 <encode_float+0x40c>
			buf++;
		}
	}

	/* Emit the explicit exponent, if format requires it. */
	if ((c == 'e') || (c == 'E')) {
 8004698:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800469c:	d002      	beq.n	80046a4 <encode_float+0x390>
 800469e:	f1bb 0f45 	cmp.w	fp, #69	; 0x45
 80046a2:	d12a      	bne.n	80046fa <encode_float+0x3e6>
		*buf++ = c;
 80046a4:	f886 b000 	strb.w	fp, [r6]
		if (decexp < 0) {
 80046a8:	f1b8 0f00 	cmp.w	r8, #0
 80046ac:	db3a      	blt.n	8004724 <encode_float+0x410>
			decexp = -decexp;
			*buf++ = '-';
		} else {
			*buf++ = '+';
 80046ae:	1cb2      	adds	r2, r6, #2
 80046b0:	232b      	movs	r3, #43	; 0x2b
 80046b2:	7073      	strb	r3, [r6, #1]
		}

		/* At most 3 digits to the decimal.  Spit them out. */
		if (decexp >= 100) {
 80046b4:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 80046b8:	dd0d      	ble.n	80046d6 <encode_float+0x3c2>
			*buf++ = (decexp / 100) + '0';
 80046ba:	4920      	ldr	r1, [pc, #128]	; (800473c <encode_float+0x428>)
 80046bc:	fb81 3108 	smull	r3, r1, r1, r8
 80046c0:	ea4f 73e8 	mov.w	r3, r8, asr #31
 80046c4:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 80046c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80046cc:	f802 1b01 	strb.w	r1, [r2], #1
			decexp %= 100;
 80046d0:	2164      	movs	r1, #100	; 0x64
 80046d2:	fb01 8813 	mls	r8, r1, r3, r8
		}

		*buf++ = (decexp / 10) + '0';
 80046d6:	491a      	ldr	r1, [pc, #104]	; (8004740 <encode_float+0x42c>)
 80046d8:	fb81 3108 	smull	r3, r1, r1, r8
 80046dc:	ea4f 73e8 	mov.w	r3, r8, asr #31
 80046e0:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 80046e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80046e8:	4616      	mov	r6, r2
 80046ea:	f806 1b02 	strb.w	r1, [r6], #2
		*buf++ = (decexp % 10) + '0';
 80046ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80046f2:	eba8 0343 	sub.w	r3, r8, r3, lsl #1
 80046f6:	3330      	adds	r3, #48	; 0x30
 80046f8:	7053      	strb	r3, [r2, #1]
	}

	/* Cache whether there's padding required */
	conv->pad_fp = (conv->pad0_value > 0)
 80046fa:	f8da 3004 	ldr.w	r3, [sl, #4]
		|| (conv->pad0_pre_exp > 0);
 80046fe:	2b00      	cmp	r3, #0
 8004700:	dd16      	ble.n	8004730 <encode_float+0x41c>
 8004702:	2401      	movs	r4, #1
	conv->pad_fp = (conv->pad0_value > 0)
 8004704:	f89a 3002 	ldrb.w	r3, [sl, #2]
 8004708:	f364 1386 	bfi	r3, r4, #6, #1
 800470c:	f88a 3002 	strb.w	r3, [sl, #2]

	/* Set the end of the encoded sequence, and return its start.  Also
	 * store EOS as a non-digit/non-decimal value so we don't have to
	 * check against bpe when iterating in multiple places.
	 */
	*bpe = buf;
 8004710:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004712:	601e      	str	r6, [r3, #0]
	*buf = 0;
 8004714:	2300      	movs	r3, #0
 8004716:	7033      	strb	r3, [r6, #0]
	return bps;
}
 8004718:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800471a:	b009      	add	sp, #36	; 0x24
 800471c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (*--buf == '0') {
 8004720:	461e      	mov	r6, r3
 8004722:	e7b9      	b.n	8004698 <encode_float+0x384>
			decexp = -decexp;
 8004724:	f1c8 0800 	rsb	r8, r8, #0
			*buf++ = '-';
 8004728:	1cb2      	adds	r2, r6, #2
 800472a:	232d      	movs	r3, #45	; 0x2d
 800472c:	7073      	strb	r3, [r6, #1]
 800472e:	e7c1      	b.n	80046b4 <encode_float+0x3a0>
		|| (conv->pad0_pre_exp > 0);
 8004730:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	dde5      	ble.n	8004704 <encode_float+0x3f0>
 8004738:	2401      	movs	r4, #1
 800473a:	e7e3      	b.n	8004704 <encode_float+0x3f0>
 800473c:	51eb851f 	.word	0x51eb851f
 8004740:	66666667 	.word	0x66666667

08004744 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
 8004744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004748:	b099      	sub	sp, #100	; 0x64
 800474a:	4606      	mov	r6, r0
 800474c:	460d      	mov	r5, r1
 800474e:	4617      	mov	r7, r2
 8004750:	9305      	str	r3, [sp, #20]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
 8004752:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
 8004754:	e000      	b.n	8004758 <cbvprintf+0x14>
		if (*fp != '%') {
			OUTC(*fp++);
 8004756:	3401      	adds	r4, #1
	while (*fp != 0) {
 8004758:	7838      	ldrb	r0, [r7, #0]
 800475a:	2800      	cmp	r0, #0
 800475c:	f000 8593 	beq.w	8005286 <cbvprintf+0xb42>
		if (*fp != '%') {
 8004760:	2825      	cmp	r0, #37	; 0x25
 8004762:	d007      	beq.n	8004774 <cbvprintf+0x30>
			OUTC(*fp++);
 8004764:	3701      	adds	r7, #1
 8004766:	4629      	mov	r1, r5
 8004768:	47b0      	blx	r6
 800476a:	2800      	cmp	r0, #0
 800476c:	daf3      	bge.n	8004756 <cbvprintf+0x12>
	}

	return count;
#undef OUTS
#undef OUTC
}
 800476e:	b019      	add	sp, #100	; 0x64
 8004770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} state = {
 8004774:	2300      	movs	r3, #0
 8004776:	930a      	str	r3, [sp, #40]	; 0x28
 8004778:	930b      	str	r3, [sp, #44]	; 0x2c
 800477a:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
 800477c:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
 8004780:	9208      	str	r2, [sp, #32]
		char sign = 0;
 8004782:	f88d 301f 	strb.w	r3, [sp, #31]
	*conv = (struct conversion) {
 8004786:	930c      	str	r3, [sp, #48]	; 0x30
 8004788:	930d      	str	r3, [sp, #52]	; 0x34
 800478a:	930e      	str	r3, [sp, #56]	; 0x38
	++sp;
 800478c:	f107 0901 	add.w	r9, r7, #1
	if (*sp == '%') {
 8004790:	787b      	ldrb	r3, [r7, #1]
 8004792:	2b25      	cmp	r3, #37	; 0x25
 8004794:	d002      	beq.n	800479c <cbvprintf+0x58>
	bool loop = true;
 8004796:	f04f 0801 	mov.w	r8, #1
 800479a:	e031      	b.n	8004800 <cbvprintf+0xbc>
		conv->specifier = *sp++;
 800479c:	f107 0902 	add.w	r9, r7, #2
 80047a0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		return sp;
 80047a4:	e1ae      	b.n	8004b04 <cbvprintf+0x3c0>
			conv->flag_dash = true;
 80047a6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80047aa:	f043 0304 	orr.w	r3, r3, #4
 80047ae:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (loop) {
 80047b2:	f1b8 0f00 	cmp.w	r8, #0
 80047b6:	d020      	beq.n	80047fa <cbvprintf+0xb6>
			++sp;
 80047b8:	f109 0901 	add.w	r9, r9, #1
 80047bc:	e01d      	b.n	80047fa <cbvprintf+0xb6>
			conv->flag_plus = true;
 80047be:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80047c2:	f043 0308 	orr.w	r3, r3, #8
 80047c6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
 80047ca:	e7f2      	b.n	80047b2 <cbvprintf+0x6e>
			conv->flag_space = true;
 80047cc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80047d0:	f043 0310 	orr.w	r3, r3, #16
 80047d4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
 80047d8:	e7eb      	b.n	80047b2 <cbvprintf+0x6e>
			conv->flag_hash = true;
 80047da:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80047de:	f043 0320 	orr.w	r3, r3, #32
 80047e2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
 80047e6:	e7e4      	b.n	80047b2 <cbvprintf+0x6e>
			conv->flag_zero = true;
 80047e8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80047ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047f0:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
 80047f4:	e7dd      	b.n	80047b2 <cbvprintf+0x6e>
		switch (*sp) {
 80047f6:	f04f 0800 	mov.w	r8, #0
	} while (loop);
 80047fa:	f1b8 0f00 	cmp.w	r8, #0
 80047fe:	d029      	beq.n	8004854 <cbvprintf+0x110>
		switch (*sp) {
 8004800:	f899 3000 	ldrb.w	r3, [r9]
 8004804:	3b20      	subs	r3, #32
 8004806:	2b10      	cmp	r3, #16
 8004808:	d8f5      	bhi.n	80047f6 <cbvprintf+0xb2>
 800480a:	a201      	add	r2, pc, #4	; (adr r2, 8004810 <cbvprintf+0xcc>)
 800480c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004810:	080047cd 	.word	0x080047cd
 8004814:	080047f7 	.word	0x080047f7
 8004818:	080047f7 	.word	0x080047f7
 800481c:	080047db 	.word	0x080047db
 8004820:	080047f7 	.word	0x080047f7
 8004824:	080047f7 	.word	0x080047f7
 8004828:	080047f7 	.word	0x080047f7
 800482c:	080047f7 	.word	0x080047f7
 8004830:	080047f7 	.word	0x080047f7
 8004834:	080047f7 	.word	0x080047f7
 8004838:	080047f7 	.word	0x080047f7
 800483c:	080047bf 	.word	0x080047bf
 8004840:	080047f7 	.word	0x080047f7
 8004844:	080047a7 	.word	0x080047a7
 8004848:	080047f7 	.word	0x080047f7
 800484c:	080047f7 	.word	0x080047f7
 8004850:	080047e9 	.word	0x080047e9
	if (conv->flag_zero && conv->flag_dash) {
 8004854:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004858:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800485c:	2b44      	cmp	r3, #68	; 0x44
 800485e:	d06d      	beq.n	800493c <cbvprintf+0x1f8>
	sp = extract_width(conv, sp);
 8004860:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	conv->width_present = true;
 8004864:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	if (*sp == '*') {
 8004870:	f899 3000 	ldrb.w	r3, [r9]
 8004874:	2b2a      	cmp	r3, #42	; 0x2a
 8004876:	d068      	beq.n	800494a <cbvprintf+0x206>
	size_t width = extract_decimal(&sp);
 8004878:	a809      	add	r0, sp, #36	; 0x24
 800487a:	f7ff fcc3 	bl	8004204 <extract_decimal>
	if (sp != wp) {
 800487e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004880:	4599      	cmp	r9, r3
 8004882:	d012      	beq.n	80048aa <cbvprintf+0x166>
		conv->width_present = true;
 8004884:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800488c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		conv->width_value = width;
 8004890:	900d      	str	r0, [sp, #52]	; 0x34
		conv->unsupported |= ((conv->width_value < 0)
 8004892:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
 8004896:	2800      	cmp	r0, #0
 8004898:	db60      	blt.n	800495c <cbvprintf+0x218>
 800489a:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
 800489c:	4313      	orrs	r3, r2
 800489e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80048a2:	f363 0241 	bfi	r2, r3, #1, #1
 80048a6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 80048aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
	sp = extract_prec(conv, sp);
 80048ac:	9309      	str	r3, [sp, #36]	; 0x24
	conv->prec_present = (*sp == '.');
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b2e      	cmp	r3, #46	; 0x2e
 80048b2:	bf14      	ite	ne
 80048b4:	2300      	movne	r3, #0
 80048b6:	2301      	moveq	r3, #1
 80048b8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80048bc:	f363 0241 	bfi	r2, r3, #1, #1
 80048c0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d04b      	beq.n	8004960 <cbvprintf+0x21c>
	++sp;
 80048c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
 80048ce:	785b      	ldrb	r3, [r3, #1]
 80048d0:	2b2a      	cmp	r3, #42	; 0x2a
 80048d2:	d048      	beq.n	8004966 <cbvprintf+0x222>
	size_t prec = extract_decimal(&sp);
 80048d4:	a809      	add	r0, sp, #36	; 0x24
 80048d6:	f7ff fc95 	bl	8004204 <extract_decimal>
	conv->prec_value = prec;
 80048da:	900e      	str	r0, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
 80048dc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80048e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
 80048e4:	2800      	cmp	r0, #0
 80048e6:	db47      	blt.n	8004978 <cbvprintf+0x234>
 80048e8:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80048f0:	f363 0241 	bfi	r2, r3, #1, #1
 80048f4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
 80048f8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
	switch (*sp) {
 80048fc:	f899 3000 	ldrb.w	r3, [r9]
 8004900:	3b4c      	subs	r3, #76	; 0x4c
 8004902:	2b2e      	cmp	r3, #46	; 0x2e
 8004904:	f200 80dc 	bhi.w	8004ac0 <cbvprintf+0x37c>
 8004908:	e8df f003 	tbb	[pc, r3]
 800490c:	dadadaca 	.word	0xdadadaca
 8004910:	dadadada 	.word	0xdadadada
 8004914:	dadadada 	.word	0xdadadada
 8004918:	dadadada 	.word	0xdadadada
 800491c:	dadadada 	.word	0xdadadada
 8004920:	dadadada 	.word	0xdadadada
 8004924:	dadadada 	.word	0xdadadada
 8004928:	da6ada38 	.word	0xda6ada38
 800492c:	dadada51 	.word	0xdadada51
 8004930:	dadadada 	.word	0xdadadada
 8004934:	dadadac0 	.word	0xdadadac0
 8004938:	dada      	.short	0xdada
 800493a:	b6          	.byte	0xb6
 800493b:	00          	.byte	0x00
		conv->flag_zero = false;
 800493c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004940:	f36f 1386 	bfc	r3, #6, #1
 8004944:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8004948:	e78a      	b.n	8004860 <cbvprintf+0x11c>
		conv->width_star = true;
 800494a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		return ++sp;
 8004956:	464b      	mov	r3, r9
 8004958:	3301      	adds	r3, #1
 800495a:	e7a7      	b.n	80048ac <cbvprintf+0x168>
				      || (width != (size_t)conv->width_value));
 800495c:	2201      	movs	r2, #1
 800495e:	e79d      	b.n	800489c <cbvprintf+0x158>
		return sp;
 8004960:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004964:	e7ca      	b.n	80048fc <cbvprintf+0x1b8>
		conv->prec_star = true;
 8004966:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800496a:	f043 0304 	orr.w	r3, r3, #4
 800496e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		return ++sp;
 8004972:	f102 0901 	add.w	r9, r2, #1
 8004976:	e7c1      	b.n	80048fc <cbvprintf+0x1b8>
			      || (prec != (size_t)conv->prec_value));
 8004978:	2201      	movs	r2, #1
 800497a:	e7b6      	b.n	80048ea <cbvprintf+0x1a6>
		if (*++sp == 'h') {
 800497c:	f109 0201 	add.w	r2, r9, #1
 8004980:	f899 3001 	ldrb.w	r3, [r9, #1]
 8004984:	2b68      	cmp	r3, #104	; 0x68
 8004986:	d008      	beq.n	800499a <cbvprintf+0x256>
			conv->length_mod = LENGTH_H;
 8004988:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800498c:	2102      	movs	r1, #2
 800498e:	f361 03c6 	bfi	r3, r1, #3, #4
 8004992:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (*++sp == 'h') {
 8004996:	4691      	mov	r9, r2
 8004998:	e02b      	b.n	80049f2 <cbvprintf+0x2ae>
			conv->length_mod = LENGTH_HH;
 800499a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800499e:	2201      	movs	r2, #1
 80049a0:	f362 03c6 	bfi	r3, r2, #3, #4
 80049a4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
			++sp;
 80049a8:	f109 0902 	add.w	r9, r9, #2
 80049ac:	e021      	b.n	80049f2 <cbvprintf+0x2ae>
		if (*++sp == 'l') {
 80049ae:	f109 0201 	add.w	r2, r9, #1
 80049b2:	f899 3001 	ldrb.w	r3, [r9, #1]
 80049b6:	2b6c      	cmp	r3, #108	; 0x6c
 80049b8:	d008      	beq.n	80049cc <cbvprintf+0x288>
			conv->length_mod = LENGTH_L;
 80049ba:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80049be:	2103      	movs	r1, #3
 80049c0:	f361 03c6 	bfi	r3, r1, #3, #4
 80049c4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (*++sp == 'l') {
 80049c8:	4691      	mov	r9, r2
 80049ca:	e012      	b.n	80049f2 <cbvprintf+0x2ae>
			conv->length_mod = LENGTH_LL;
 80049cc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80049d0:	2204      	movs	r2, #4
 80049d2:	f362 03c6 	bfi	r3, r2, #3, #4
 80049d6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
			++sp;
 80049da:	f109 0902 	add.w	r9, r9, #2
 80049de:	e008      	b.n	80049f2 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
 80049e0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80049e4:	2205      	movs	r2, #5
 80049e6:	f362 03c6 	bfi	r3, r2, #3, #4
 80049ea:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
 80049ee:	f109 0901 	add.w	r9, r9, #1
	conv->specifier = *sp++;
 80049f2:	f819 2b01 	ldrb.w	r2, [r9], #1
 80049f6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
 80049fa:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 80049fe:	2b37      	cmp	r3, #55	; 0x37
 8004a00:	f200 8185 	bhi.w	8004d0e <cbvprintf+0x5ca>
 8004a04:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004a08:	01830131 	.word	0x01830131
 8004a0c:	01830183 	.word	0x01830183
 8004a10:	01310131 	.word	0x01310131
 8004a14:	01830131 	.word	0x01830131
 8004a18:	01830183 	.word	0x01830183
 8004a1c:	01830183 	.word	0x01830183
 8004a20:	01830183 	.word	0x01830183
 8004a24:	01830183 	.word	0x01830183
 8004a28:	01830183 	.word	0x01830183
 8004a2c:	01830183 	.word	0x01830183
 8004a30:	01830183 	.word	0x01830183
 8004a34:	011c0183 	.word	0x011c0183
 8004a38:	01830183 	.word	0x01830183
 8004a3c:	01830183 	.word	0x01830183
 8004a40:	01830183 	.word	0x01830183
 8004a44:	01830183 	.word	0x01830183
 8004a48:	01830131 	.word	0x01830131
 8004a4c:	0063011c 	.word	0x0063011c
 8004a50:	01310131 	.word	0x01310131
 8004a54:	01830131 	.word	0x01830131
 8004a58:	01830063 	.word	0x01830063
 8004a5c:	01830183 	.word	0x01830183
 8004a60:	01620183 	.word	0x01620183
 8004a64:	0173011c 	.word	0x0173011c
 8004a68:	01830183 	.word	0x01830183
 8004a6c:	01830173 	.word	0x01830173
 8004a70:	0183011c 	.word	0x0183011c
 8004a74:	011c0183 	.word	0x011c0183
		conv->length_mod = LENGTH_Z;
 8004a78:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8004a7c:	2206      	movs	r2, #6
 8004a7e:	f362 03c6 	bfi	r3, r2, #3, #4
 8004a82:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
 8004a86:	f109 0901 	add.w	r9, r9, #1
		break;
 8004a8a:	e7b2      	b.n	80049f2 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
 8004a8c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8004a90:	2207      	movs	r2, #7
 8004a92:	f362 03c6 	bfi	r3, r2, #3, #4
 8004a96:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
 8004a9a:	f109 0901 	add.w	r9, r9, #1
		break;
 8004a9e:	e7a8      	b.n	80049f2 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_UPPER_L;
 8004aa0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8004aa4:	2208      	movs	r2, #8
 8004aa6:	f362 03c6 	bfi	r3, r2, #3, #4
 8004aaa:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
 8004aae:	f109 0901 	add.w	r9, r9, #1
		conv->unsupported = true;
 8004ab2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004ab6:	f043 0302 	orr.w	r3, r3, #2
 8004aba:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		break;
 8004abe:	e798      	b.n	80049f2 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_NONE;
 8004ac0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8004ac4:	f36f 03c6 	bfc	r3, #3, #4
 8004ac8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
 8004acc:	e791      	b.n	80049f2 <cbvprintf+0x2ae>
		conv->specifier_cat = SPECIFIER_SINT;
 8004ace:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	f361 0302 	bfi	r3, r1, #0, #3
 8004ad8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 8004adc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8004ae0:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8004ae4:	2b40      	cmp	r3, #64	; 0x40
 8004ae6:	f000 80b3 	beq.w	8004c50 <cbvprintf+0x50c>
		if (conv->specifier == 'c') {
 8004aea:	2a63      	cmp	r2, #99	; 0x63
 8004aec:	f000 80b7 	beq.w	8004c5e <cbvprintf+0x51a>
	conv->unsupported |= unsupported;
 8004af0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004af4:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8004af8:	ea48 0802 	orr.w	r8, r8, r2
 8004afc:	f368 0341 	bfi	r3, r8, #1, #1
 8004b00:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (conv->width_star) {
 8004b04:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8004b08:	f013 0f01 	tst.w	r3, #1
 8004b0c:	f000 8112 	beq.w	8004d34 <cbvprintf+0x5f0>
			width = va_arg(ap, int);
 8004b10:	9b05      	ldr	r3, [sp, #20]
 8004b12:	1d1a      	adds	r2, r3, #4
 8004b14:	9205      	str	r2, [sp, #20]
 8004b16:	f8d3 8000 	ldr.w	r8, [r3]
			if (width < 0) {
 8004b1a:	f1b8 0f00 	cmp.w	r8, #0
 8004b1e:	f2c0 8100 	blt.w	8004d22 <cbvprintf+0x5de>
		if (conv->prec_star) {
 8004b22:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8004b26:	f013 0f04 	tst.w	r3, #4
 8004b2a:	f000 8116 	beq.w	8004d5a <cbvprintf+0x616>
			int arg = va_arg(ap, int);
 8004b2e:	9b05      	ldr	r3, [sp, #20]
 8004b30:	1d1a      	adds	r2, r3, #4
 8004b32:	9205      	str	r2, [sp, #20]
 8004b34:	f8d3 a000 	ldr.w	sl, [r3]
			if (arg < 0) {
 8004b38:	f1ba 0f00 	cmp.w	sl, #0
 8004b3c:	f2c0 8104 	blt.w	8004d48 <cbvprintf+0x604>
		conv->pad0_value = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	930d      	str	r3, [sp, #52]	; 0x34
		conv->pad0_pre_exp = 0;
 8004b44:	930e      	str	r3, [sp, #56]	; 0x38
		    && (conv->specifier_cat == SPECIFIER_FP)
 8004b46:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8004b4a:	f003 0307 	and.w	r3, r3, #7
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	f000 810c 	beq.w	8004d6c <cbvprintf+0x628>
			= (enum specifier_cat_enum)conv->specifier_cat;
 8004b54:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8004b58:	f003 0307 	and.w	r3, r3, #7
			= (enum length_mod_enum)conv->length_mod;
 8004b5c:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
 8004b60:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	f000 8111 	beq.w	8004d8c <cbvprintf+0x648>
		} else if (specifier_cat == SPECIFIER_UINT) {
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	f000 8156 	beq.w	8004e1c <cbvprintf+0x6d8>
		} else if (specifier_cat == SPECIFIER_FP) {
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	f000 81a7 	beq.w	8004ec4 <cbvprintf+0x780>
		} else if (specifier_cat == SPECIFIER_PTR) {
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	f000 81be 	beq.w	8004ef8 <cbvprintf+0x7b4>
		if (conv->invalid || conv->unsupported) {
 8004b7c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8004b80:	f012 0f03 	tst.w	r2, #3
 8004b84:	f040 81be 	bne.w	8004f04 <cbvprintf+0x7c0>
		switch (conv->specifier) {
 8004b88:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b8c:	3b25      	subs	r3, #37	; 0x25
 8004b8e:	2b53      	cmp	r3, #83	; 0x53
 8004b90:	f200 81cb 	bhi.w	8004f2a <cbvprintf+0x7e6>
 8004b94:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004b98:	01c901c2 	.word	0x01c901c2
 8004b9c:	01c901c9 	.word	0x01c901c9
 8004ba0:	01c901c9 	.word	0x01c901c9
 8004ba4:	01c901c9 	.word	0x01c901c9
 8004ba8:	01c901c9 	.word	0x01c901c9
 8004bac:	01c901c9 	.word	0x01c901c9
 8004bb0:	01c901c9 	.word	0x01c901c9
 8004bb4:	01c901c9 	.word	0x01c901c9
 8004bb8:	01c901c9 	.word	0x01c901c9
 8004bbc:	01c901c9 	.word	0x01c901c9
 8004bc0:	01c901c9 	.word	0x01c901c9
 8004bc4:	01c901c9 	.word	0x01c901c9
 8004bc8:	01c901c9 	.word	0x01c901c9
 8004bcc:	01c901c9 	.word	0x01c901c9
 8004bd0:	01c9028a 	.word	0x01c9028a
 8004bd4:	01c901c9 	.word	0x01c901c9
 8004bd8:	028a028a 	.word	0x028a028a
 8004bdc:	01c9028a 	.word	0x01c9028a
 8004be0:	01c901c9 	.word	0x01c901c9
 8004be4:	01c901c9 	.word	0x01c901c9
 8004be8:	01c901c9 	.word	0x01c901c9
 8004bec:	01c901c9 	.word	0x01c901c9
 8004bf0:	01c901c9 	.word	0x01c901c9
 8004bf4:	01c901c9 	.word	0x01c901c9
 8004bf8:	01c901c9 	.word	0x01c901c9
 8004bfc:	022401c9 	.word	0x022401c9
 8004c00:	01c901c9 	.word	0x01c901c9
 8004c04:	01c901c9 	.word	0x01c901c9
 8004c08:	01c901c9 	.word	0x01c901c9
 8004c0c:	01c901c9 	.word	0x01c901c9
 8004c10:	01c9028a 	.word	0x01c9028a
 8004c14:	0216020e 	.word	0x0216020e
 8004c18:	028a028a 	.word	0x028a028a
 8004c1c:	01c9028a 	.word	0x01c9028a
 8004c20:	01c90216 	.word	0x01c90216
 8004c24:	01c901c9 	.word	0x01c901c9
 8004c28:	026601c9 	.word	0x026601c9
 8004c2c:	024e0224 	.word	0x024e0224
 8004c30:	01c901c9 	.word	0x01c901c9
 8004c34:	01c901cb 	.word	0x01c901cb
 8004c38:	01c90224 	.word	0x01c90224
 8004c3c:	022401c9 	.word	0x022401c9
		conv->specifier_cat = SPECIFIER_UINT;
 8004c40:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8004c44:	2102      	movs	r1, #2
 8004c46:	f361 0302 	bfi	r3, r1, #0, #3
 8004c4a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 8004c4e:	e745      	b.n	8004adc <cbvprintf+0x398>
			conv->invalid = true;
 8004c50:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 8004c54:	f041 0101 	orr.w	r1, r1, #1
 8004c58:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 8004c5c:	e745      	b.n	8004aea <cbvprintf+0x3a6>
			unsupported = (conv->length_mod != LENGTH_NONE);
 8004c5e:	f1b3 0800 	subs.w	r8, r3, #0
 8004c62:	bf18      	it	ne
 8004c64:	f04f 0801 	movne.w	r8, #1
 8004c68:	e742      	b.n	8004af0 <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_FP;
 8004c6a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8004c6e:	2104      	movs	r1, #4
 8004c70:	f361 0302 	bfi	r3, r1, #0, #3
 8004c74:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			|| (conv->specifier == 'A');
 8004c78:	2a61      	cmp	r2, #97	; 0x61
 8004c7a:	d01f      	beq.n	8004cbc <cbvprintf+0x578>
 8004c7c:	2a41      	cmp	r2, #65	; 0x41
 8004c7e:	d01b      	beq.n	8004cb8 <cbvprintf+0x574>
 8004c80:	2200      	movs	r2, #0
		conv->specifier_a = (conv->specifier == 'a')
 8004c82:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8004c86:	f362 13c7 	bfi	r3, r2, #7, #1
 8004c8a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (conv->specifier_a
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004c94:	d142      	bne.n	8004d1c <cbvprintf+0x5d8>
		if (conv->length_mod == LENGTH_L) {
 8004c96:	f002 0278 	and.w	r2, r2, #120	; 0x78
 8004c9a:	2a18      	cmp	r2, #24
 8004c9c:	d010      	beq.n	8004cc0 <cbvprintf+0x57c>
		} else if ((conv->length_mod != LENGTH_NONE)
 8004c9e:	2a00      	cmp	r2, #0
 8004ca0:	f43f af26 	beq.w	8004af0 <cbvprintf+0x3ac>
			   && (conv->length_mod != LENGTH_UPPER_L)) {
 8004ca4:	2a40      	cmp	r2, #64	; 0x40
 8004ca6:	f43f af23 	beq.w	8004af0 <cbvprintf+0x3ac>
			conv->invalid = true;
 8004caa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8004cb6:	e71b      	b.n	8004af0 <cbvprintf+0x3ac>
			|| (conv->specifier == 'A');
 8004cb8:	2201      	movs	r2, #1
 8004cba:	e7e2      	b.n	8004c82 <cbvprintf+0x53e>
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	e7e0      	b.n	8004c82 <cbvprintf+0x53e>
			conv->length_mod = LENGTH_NONE;
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f36f 03c6 	bfc	r3, #3, #4
 8004cc6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8004cca:	e711      	b.n	8004af0 <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_PTR;
 8004ccc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8004cd0:	2203      	movs	r2, #3
 8004cd2:	f362 0302 	bfi	r3, r2, #0, #3
 8004cd6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
 8004cda:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8004cde:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8004ce2:	2b40      	cmp	r3, #64	; 0x40
 8004ce4:	f47f af04 	bne.w	8004af0 <cbvprintf+0x3ac>
			unsupported = true;
 8004ce8:	f04f 0801 	mov.w	r8, #1
 8004cec:	e700      	b.n	8004af0 <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_PTR;
 8004cee:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8004cf2:	2203      	movs	r2, #3
 8004cf4:	f362 0302 	bfi	r3, r2, #0, #3
 8004cf8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
 8004cfc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8004d00:	f013 0f78 	tst.w	r3, #120	; 0x78
 8004d04:	f43f aef4 	beq.w	8004af0 <cbvprintf+0x3ac>
			unsupported = true;
 8004d08:	f04f 0801 	mov.w	r8, #1
 8004d0c:	e6f0      	b.n	8004af0 <cbvprintf+0x3ac>
		conv->invalid = true;
 8004d0e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004d12:	f043 0301 	orr.w	r3, r3, #1
 8004d16:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		break;
 8004d1a:	e6e9      	b.n	8004af0 <cbvprintf+0x3ac>
			unsupported = true;
 8004d1c:	f04f 0801 	mov.w	r8, #1
 8004d20:	e6e6      	b.n	8004af0 <cbvprintf+0x3ac>
				conv->flag_dash = true;
 8004d22:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004d26:	f043 0304 	orr.w	r3, r3, #4
 8004d2a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
				width = -width;
 8004d2e:	f1c8 0800 	rsb	r8, r8, #0
 8004d32:	e6f6      	b.n	8004b22 <cbvprintf+0x3de>
		} else if (conv->width_present) {
 8004d34:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	db02      	blt.n	8004d42 <cbvprintf+0x5fe>
		int width = -1;
 8004d3c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004d40:	e6ef      	b.n	8004b22 <cbvprintf+0x3de>
			width = conv->width_value;
 8004d42:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8004d46:	e6ec      	b.n	8004b22 <cbvprintf+0x3de>
				conv->prec_present = false;
 8004d48:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8004d4c:	f36f 0341 	bfc	r3, #1, #1
 8004d50:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
 8004d54:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004d58:	e6f2      	b.n	8004b40 <cbvprintf+0x3fc>
		} else if (conv->prec_present) {
 8004d5a:	f013 0f02 	tst.w	r3, #2
 8004d5e:	d002      	beq.n	8004d66 <cbvprintf+0x622>
			precision = conv->prec_value;
 8004d60:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8004d64:	e6ec      	b.n	8004b40 <cbvprintf+0x3fc>
		int precision = -1;
 8004d66:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004d6a:	e6e9      	b.n	8004b40 <cbvprintf+0x3fc>
		    && !conv->prec_present) {
 8004d6c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8004d70:	f013 0f02 	tst.w	r3, #2
 8004d74:	f47f aeee 	bne.w	8004b54 <cbvprintf+0x410>
			if (conv->specifier_a) {
 8004d78:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	db02      	blt.n	8004d86 <cbvprintf+0x642>
				precision = 6;
 8004d80:	f04f 0a06 	mov.w	sl, #6
 8004d84:	e6e6      	b.n	8004b54 <cbvprintf+0x410>
				precision = FRACTION_HEX;
 8004d86:	f04f 0a0d 	mov.w	sl, #13
 8004d8a:	e6e3      	b.n	8004b54 <cbvprintf+0x410>
			switch (length_mod) {
 8004d8c:	1ecb      	subs	r3, r1, #3
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d804      	bhi.n	8004d9c <cbvprintf+0x658>
 8004d92:	e8df f003 	tbb	[pc, r3]
 8004d96:	1d0b      	.short	0x1d0b
 8004d98:	3529      	.short	0x3529
 8004d9a:	35          	.byte	0x35
 8004d9b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
 8004d9c:	9b05      	ldr	r3, [sp, #20]
 8004d9e:	1d1a      	adds	r2, r3, #4
 8004da0:	9205      	str	r2, [sp, #20]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	17d3      	asrs	r3, r2, #31
 8004da6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
 8004daa:	e006      	b.n	8004dba <cbvprintf+0x676>
					value->sint = va_arg(ap, long);
 8004dac:	9b05      	ldr	r3, [sp, #20]
 8004dae:	1d1a      	adds	r2, r3, #4
 8004db0:	9205      	str	r2, [sp, #20]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	17d3      	asrs	r3, r2, #31
 8004db6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 8004dba:	2901      	cmp	r1, #1
 8004dbc:	d028      	beq.n	8004e10 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
 8004dbe:	2902      	cmp	r1, #2
 8004dc0:	f47f aedc 	bne.w	8004b7c <cbvprintf+0x438>
				value->sint = (short)value->sint;
 8004dc4:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8004dc8:	17d3      	asrs	r3, r2, #31
 8004dca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004dce:	e6d5      	b.n	8004b7c <cbvprintf+0x438>
					(sint_value_type)va_arg(ap, long long);
 8004dd0:	9b05      	ldr	r3, [sp, #20]
 8004dd2:	3307      	adds	r3, #7
 8004dd4:	f023 0307 	bic.w	r3, r3, #7
 8004dd8:	f103 0208 	add.w	r2, r3, #8
 8004ddc:	9205      	str	r2, [sp, #20]
 8004dde:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 8004de2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
 8004de6:	e7e8      	b.n	8004dba <cbvprintf+0x676>
					(sint_value_type)va_arg(ap, intmax_t);
 8004de8:	9b05      	ldr	r3, [sp, #20]
 8004dea:	3307      	adds	r3, #7
 8004dec:	f023 0307 	bic.w	r3, r3, #7
 8004df0:	f103 0208 	add.w	r2, r3, #8
 8004df4:	9205      	str	r2, [sp, #20]
 8004df6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
 8004dfa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
 8004dfe:	e7dc      	b.n	8004dba <cbvprintf+0x676>
					(sint_value_type)va_arg(ap, ptrdiff_t);
 8004e00:	9b05      	ldr	r3, [sp, #20]
 8004e02:	1d1a      	adds	r2, r3, #4
 8004e04:	9205      	str	r2, [sp, #20]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	17d3      	asrs	r3, r2, #31
				value->sint =
 8004e0a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
 8004e0e:	e7d4      	b.n	8004dba <cbvprintf+0x676>
				value->sint = (char)value->sint;
 8004e10:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8004e14:	930a      	str	r3, [sp, #40]	; 0x28
 8004e16:	2300      	movs	r3, #0
 8004e18:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e1a:	e6af      	b.n	8004b7c <cbvprintf+0x438>
			switch (length_mod) {
 8004e1c:	1ecb      	subs	r3, r1, #3
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d804      	bhi.n	8004e2c <cbvprintf+0x6e8>
 8004e22:	e8df f003 	tbb	[pc, r3]
 8004e26:	1f0b      	.short	0x1f0b
 8004e28:	4135      	.short	0x4135
 8004e2a:	41          	.byte	0x41
 8004e2b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
 8004e2c:	9b05      	ldr	r3, [sp, #20]
 8004e2e:	1d1a      	adds	r2, r3, #4
 8004e30:	9205      	str	r2, [sp, #20]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	930a      	str	r3, [sp, #40]	; 0x28
 8004e36:	2300      	movs	r3, #0
 8004e38:	930b      	str	r3, [sp, #44]	; 0x2c
				break;
 8004e3a:	e01e      	b.n	8004e7a <cbvprintf+0x736>
				    && (conv->specifier == 'c')) {
 8004e3c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
				if ((!WCHAR_IS_SIGNED)
 8004e40:	2b63      	cmp	r3, #99	; 0x63
 8004e42:	d007      	beq.n	8004e54 <cbvprintf+0x710>
					value->uint = va_arg(ap, unsigned long);
 8004e44:	9b05      	ldr	r3, [sp, #20]
 8004e46:	1d1a      	adds	r2, r3, #4
 8004e48:	9205      	str	r2, [sp, #20]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	930a      	str	r3, [sp, #40]	; 0x28
 8004e4e:	2300      	movs	r3, #0
 8004e50:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e52:	e012      	b.n	8004e7a <cbvprintf+0x736>
					value->uint = (wchar_t)va_arg(ap,
 8004e54:	9b05      	ldr	r3, [sp, #20]
 8004e56:	1d1a      	adds	r2, r3, #4
 8004e58:	9205      	str	r2, [sp, #20]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	930a      	str	r3, [sp, #40]	; 0x28
 8004e5e:	2300      	movs	r3, #0
 8004e60:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e62:	e00a      	b.n	8004e7a <cbvprintf+0x736>
					(uint_value_type)va_arg(ap,
 8004e64:	9b05      	ldr	r3, [sp, #20]
 8004e66:	3307      	adds	r3, #7
 8004e68:	f023 0307 	bic.w	r3, r3, #7
 8004e6c:	f103 0208 	add.w	r2, r3, #8
 8004e70:	9205      	str	r2, [sp, #20]
 8004e72:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8004e76:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
 8004e7a:	2901      	cmp	r1, #1
 8004e7c:	d01c      	beq.n	8004eb8 <cbvprintf+0x774>
			} else if (length_mod == LENGTH_H) {
 8004e7e:	2902      	cmp	r1, #2
 8004e80:	f47f ae7c 	bne.w	8004b7c <cbvprintf+0x438>
				value->uint = (unsigned short)value->uint;
 8004e84:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8004e88:	930a      	str	r3, [sp, #40]	; 0x28
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e8e:	e675      	b.n	8004b7c <cbvprintf+0x438>
					(uint_value_type)va_arg(ap,
 8004e90:	9b05      	ldr	r3, [sp, #20]
 8004e92:	3307      	adds	r3, #7
 8004e94:	f023 0307 	bic.w	r3, r3, #7
 8004e98:	f103 0208 	add.w	r2, r3, #8
 8004e9c:	9205      	str	r2, [sp, #20]
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
 8004ea2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
 8004ea6:	e7e8      	b.n	8004e7a <cbvprintf+0x736>
					(uint_value_type)va_arg(ap, size_t);
 8004ea8:	9b05      	ldr	r3, [sp, #20]
 8004eaa:	1d1a      	adds	r2, r3, #4
 8004eac:	9205      	str	r2, [sp, #20]
 8004eae:	681b      	ldr	r3, [r3, #0]
				value->uint =
 8004eb0:	930a      	str	r3, [sp, #40]	; 0x28
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	930b      	str	r3, [sp, #44]	; 0x2c
				break;
 8004eb6:	e7e0      	b.n	8004e7a <cbvprintf+0x736>
				value->uint = (unsigned char)value->uint;
 8004eb8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8004ebc:	930a      	str	r3, [sp, #40]	; 0x28
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ec2:	e65b      	b.n	8004b7c <cbvprintf+0x438>
			if (length_mod == LENGTH_UPPER_L) {
 8004ec4:	2908      	cmp	r1, #8
 8004ec6:	d00b      	beq.n	8004ee0 <cbvprintf+0x79c>
				value->dbl = va_arg(ap, double);
 8004ec8:	9b05      	ldr	r3, [sp, #20]
 8004eca:	3307      	adds	r3, #7
 8004ecc:	f023 0307 	bic.w	r3, r3, #7
 8004ed0:	f103 0208 	add.w	r2, r3, #8
 8004ed4:	9205      	str	r2, [sp, #20]
 8004ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eda:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004ede:	e64d      	b.n	8004b7c <cbvprintf+0x438>
				value->ldbl = va_arg(ap, long double);
 8004ee0:	9b05      	ldr	r3, [sp, #20]
 8004ee2:	3307      	adds	r3, #7
 8004ee4:	f023 0307 	bic.w	r3, r3, #7
 8004ee8:	f103 0208 	add.w	r2, r3, #8
 8004eec:	9205      	str	r2, [sp, #20]
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004ef6:	e641      	b.n	8004b7c <cbvprintf+0x438>
			value->ptr = va_arg(ap, void *);
 8004ef8:	9b05      	ldr	r3, [sp, #20]
 8004efa:	1d1a      	adds	r2, r3, #4
 8004efc:	9205      	str	r2, [sp, #20]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	930a      	str	r3, [sp, #40]	; 0x28
 8004f02:	e63b      	b.n	8004b7c <cbvprintf+0x438>
			OUTS(sp, fp);
 8004f04:	464b      	mov	r3, r9
 8004f06:	463a      	mov	r2, r7
 8004f08:	4629      	mov	r1, r5
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	f012 fe7b 	bl	8017c06 <outs>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	f6ff ac2c 	blt.w	800476e <cbvprintf+0x2a>
 8004f16:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
 8004f18:	464f      	mov	r7, r9
			continue;
 8004f1a:	e41d      	b.n	8004758 <cbvprintf+0x14>
			OUTC('%');
 8004f1c:	4629      	mov	r1, r5
 8004f1e:	2025      	movs	r0, #37	; 0x25
 8004f20:	47b0      	blx	r6
 8004f22:	2800      	cmp	r0, #0
 8004f24:	f6ff ac23 	blt.w	800476e <cbvprintf+0x2a>
 8004f28:	3401      	adds	r4, #1
		fp = extract_conversion(conv, sp);
 8004f2a:	464f      	mov	r7, r9
			continue;
 8004f2c:	e414      	b.n	8004758 <cbvprintf+0x14>
			bps = (const char *)value->ptr;
 8004f2e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			if (precision >= 0) {
 8004f30:	f1ba 0f00 	cmp.w	sl, #0
 8004f34:	db3a      	blt.n	8004fac <cbvprintf+0x868>
				len = strnlen(bps, precision);
 8004f36:	4651      	mov	r1, sl
 8004f38:	4638      	mov	r0, r7
 8004f3a:	f017 fde2 	bl	801cb02 <strnlen>
			bpe = bps + len;
 8004f3e:	4438      	add	r0, r7
 8004f40:	9008      	str	r0, [sp, #32]
		if (bps == NULL) {
 8004f42:	2f00      	cmp	r7, #0
 8004f44:	d0f1      	beq.n	8004f2a <cbvprintf+0x7e6>
		size_t nj_len = (bpe - bps);
 8004f46:	9b08      	ldr	r3, [sp, #32]
 8004f48:	1bdb      	subs	r3, r3, r7
		if (sign != 0) {
 8004f4a:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8004f4e:	b100      	cbz	r0, 8004f52 <cbvprintf+0x80e>
			nj_len += 1U;
 8004f50:	3301      	adds	r3, #1
		if (conv->altform_0c) {
 8004f52:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 8004f56:	f011 0f10 	tst.w	r1, #16
 8004f5a:	f000 80b6 	beq.w	80050ca <cbvprintf+0x986>
			nj_len += 2U;
 8004f5e:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
 8004f60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f62:	4413      	add	r3, r2
		if (conv->pad_fp) {
 8004f64:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004f68:	d001      	beq.n	8004f6e <cbvprintf+0x82a>
			nj_len += conv->pad0_pre_exp;
 8004f6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f6c:	4413      	add	r3, r2
		if (width > 0) {
 8004f6e:	f1b8 0f00 	cmp.w	r8, #0
 8004f72:	f340 80c3 	ble.w	80050fc <cbvprintf+0x9b8>
			width -= (int)nj_len;
 8004f76:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
 8004f7a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8004f7e:	f013 0f04 	tst.w	r3, #4
 8004f82:	f040 80bb 	bne.w	80050fc <cbvprintf+0x9b8>
				if (conv->flag_zero) {
 8004f86:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004f8a:	f000 80a4 	beq.w	80050d6 <cbvprintf+0x992>
					if (sign != 0) {
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	f000 80a4 	beq.w	80050dc <cbvprintf+0x998>
						OUTC(sign);
 8004f94:	4629      	mov	r1, r5
 8004f96:	47b0      	blx	r6
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	f6ff abe8 	blt.w	800476e <cbvprintf+0x2a>
 8004f9e:	3401      	adds	r4, #1
						sign = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f88d 301f 	strb.w	r3, [sp, #31]
					pad = '0';
 8004fa6:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8004faa:	e099      	b.n	80050e0 <cbvprintf+0x99c>
				len = strlen(bps);
 8004fac:	4638      	mov	r0, r7
 8004fae:	f7fb ff8d 	bl	8000ecc <strlen>
 8004fb2:	e7c4      	b.n	8004f3e <cbvprintf+0x7fa>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
 8004fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fb6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
			bpe = buf + 1;
 8004fba:	f10d 0345 	add.w	r3, sp, #69	; 0x45
 8004fbe:	9308      	str	r3, [sp, #32]
			bps = buf;
 8004fc0:	af11      	add	r7, sp, #68	; 0x44
			break;
 8004fc2:	e7be      	b.n	8004f42 <cbvprintf+0x7fe>
			if (conv->flag_plus) {
 8004fc4:	f012 0f08 	tst.w	r2, #8
 8004fc8:	d024      	beq.n	8005014 <cbvprintf+0x8d0>
				sign = '+';
 8004fca:	232b      	movs	r3, #43	; 0x2b
 8004fcc:	f88d 301f 	strb.w	r3, [sp, #31]
			sint = value->sint;
 8004fd0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
 8004fd4:	2a00      	cmp	r2, #0
 8004fd6:	f173 0100 	sbcs.w	r1, r3, #0
 8004fda:	db22      	blt.n	8005022 <cbvprintf+0x8de>
				value->uint = (uint_value_type)sint;
 8004fdc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			bps = encode_uint(value->uint, conv, buf, bpe);
 8004fe0:	9b08      	ldr	r3, [sp, #32]
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	ab11      	add	r3, sp, #68	; 0x44
 8004fe6:	aa0c      	add	r2, sp, #48	; 0x30
 8004fe8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004fec:	f7ff f922 	bl	8004234 <encode_uint>
 8004ff0:	4607      	mov	r7, r0
			if (precision >= 0) {
 8004ff2:	f1ba 0f00 	cmp.w	sl, #0
 8004ff6:	dba4      	blt.n	8004f42 <cbvprintf+0x7fe>
				size_t len = bpe - bps;
 8004ff8:	9b08      	ldr	r3, [sp, #32]
 8004ffa:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
 8004ffc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8005000:	f36f 1286 	bfc	r2, #6, #1
 8005004:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
 8005008:	459a      	cmp	sl, r3
 800500a:	d99a      	bls.n	8004f42 <cbvprintf+0x7fe>
					conv->pad0_value = precision - (int)len;
 800500c:	ebaa 0303 	sub.w	r3, sl, r3
 8005010:	930d      	str	r3, [sp, #52]	; 0x34
 8005012:	e796      	b.n	8004f42 <cbvprintf+0x7fe>
			} else if (conv->flag_space) {
 8005014:	f012 0f10 	tst.w	r2, #16
 8005018:	d0da      	beq.n	8004fd0 <cbvprintf+0x88c>
				sign = ' ';
 800501a:	2320      	movs	r3, #32
 800501c:	f88d 301f 	strb.w	r3, [sp, #31]
 8005020:	e7d6      	b.n	8004fd0 <cbvprintf+0x88c>
				sign = '-';
 8005022:	212d      	movs	r1, #45	; 0x2d
 8005024:	f88d 101f 	strb.w	r1, [sp, #31]
				value->uint = (uint_value_type)-sint;
 8005028:	4252      	negs	r2, r2
 800502a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800502e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005032:	e7d5      	b.n	8004fe0 <cbvprintf+0x89c>
			if (value->ptr != NULL) {
 8005034:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005036:	b918      	cbnz	r0, 8005040 <cbvprintf+0x8fc>
			bpe = bps + 5;
 8005038:	4f94      	ldr	r7, [pc, #592]	; (800528c <cbvprintf+0xb48>)
 800503a:	9708      	str	r7, [sp, #32]
			bps = "(nil)";
 800503c:	3f05      	subs	r7, #5
			break;
 800503e:	e780      	b.n	8004f42 <cbvprintf+0x7fe>
				bps = encode_uint((uintptr_t)value->ptr, conv,
 8005040:	9b08      	ldr	r3, [sp, #32]
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	ab11      	add	r3, sp, #68	; 0x44
 8005046:	aa0c      	add	r2, sp, #48	; 0x30
 8005048:	2100      	movs	r1, #0
 800504a:	f7ff f8f3 	bl	8004234 <encode_uint>
 800504e:	4607      	mov	r7, r0
				conv->altform_0c = true;
 8005050:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8005054:	f043 0310 	orr.w	r3, r3, #16
 8005058:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
				conv->specifier = 'x';
 800505c:	2378      	movs	r3, #120	; 0x78
 800505e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
				goto prec_int_pad0;
 8005062:	e7c6      	b.n	8004ff2 <cbvprintf+0x8ae>
				store_count(conv, value->ptr, count);
 8005064:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
 8005066:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800506a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 800506e:	2b07      	cmp	r3, #7
 8005070:	f63f af5b 	bhi.w	8004f2a <cbvprintf+0x7e6>
 8005074:	e8df f003 	tbb	[pc, r3]
 8005078:	0a080604 	.word	0x0a080604
 800507c:	1816110c 	.word	0x1816110c
		*(int *)dp = count;
 8005080:	6014      	str	r4, [r2, #0]
		break;
 8005082:	e752      	b.n	8004f2a <cbvprintf+0x7e6>
		*(signed char *)dp = (signed char)count;
 8005084:	7014      	strb	r4, [r2, #0]
		break;
 8005086:	e750      	b.n	8004f2a <cbvprintf+0x7e6>
		*(short *)dp = (short)count;
 8005088:	8014      	strh	r4, [r2, #0]
		break;
 800508a:	e74e      	b.n	8004f2a <cbvprintf+0x7e6>
		*(long *)dp = (long)count;
 800508c:	6014      	str	r4, [r2, #0]
		break;
 800508e:	e74c      	b.n	8004f2a <cbvprintf+0x7e6>
		*(long long *)dp = (long long)count;
 8005090:	4620      	mov	r0, r4
 8005092:	17e1      	asrs	r1, r4, #31
 8005094:	e9c2 0100 	strd	r0, r1, [r2]
		break;
 8005098:	e747      	b.n	8004f2a <cbvprintf+0x7e6>
		*(intmax_t *)dp = (intmax_t)count;
 800509a:	4620      	mov	r0, r4
 800509c:	17e1      	asrs	r1, r4, #31
 800509e:	e9c2 0100 	strd	r0, r1, [r2]
		break;
 80050a2:	e742      	b.n	8004f2a <cbvprintf+0x7e6>
		*(size_t *)dp = (size_t)count;
 80050a4:	6014      	str	r4, [r2, #0]
		break;
 80050a6:	e740      	b.n	8004f2a <cbvprintf+0x7e6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
 80050a8:	6014      	str	r4, [r2, #0]
}
 80050aa:	e73e      	b.n	8004f2a <cbvprintf+0x7e6>
				bps = encode_float(value->dbl, conv, precision,
 80050ac:	ab08      	add	r3, sp, #32
 80050ae:	9302      	str	r3, [sp, #8]
 80050b0:	ab11      	add	r3, sp, #68	; 0x44
 80050b2:	9301      	str	r3, [sp, #4]
 80050b4:	f10d 031f 	add.w	r3, sp, #31
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	4653      	mov	r3, sl
 80050bc:	aa0c      	add	r2, sp, #48	; 0x30
 80050be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050c2:	f7ff f927 	bl	8004314 <encode_float>
 80050c6:	4607      	mov	r7, r0
			break;
 80050c8:	e73b      	b.n	8004f42 <cbvprintf+0x7fe>
		} else if (conv->altform_0) {
 80050ca:	f011 0f08 	tst.w	r1, #8
 80050ce:	f43f af47 	beq.w	8004f60 <cbvprintf+0x81c>
			nj_len += 1U;
 80050d2:	3301      	adds	r3, #1
 80050d4:	e744      	b.n	8004f60 <cbvprintf+0x81c>
				char pad = ' ';
 80050d6:	f04f 0a20 	mov.w	sl, #32
 80050da:	e001      	b.n	80050e0 <cbvprintf+0x99c>
					pad = '0';
 80050dc:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80050e0:	4643      	mov	r3, r8
				while (width-- > 0) {
 80050e2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	dd08      	ble.n	80050fc <cbvprintf+0x9b8>
					OUTC(pad);
 80050ea:	4629      	mov	r1, r5
 80050ec:	4650      	mov	r0, sl
 80050ee:	47b0      	blx	r6
 80050f0:	2800      	cmp	r0, #0
 80050f2:	f6ff ab3c 	blt.w	800476e <cbvprintf+0x2a>
 80050f6:	3401      	adds	r4, #1
				while (width-- > 0) {
 80050f8:	4643      	mov	r3, r8
 80050fa:	e7f2      	b.n	80050e2 <cbvprintf+0x99e>
		if (sign != 0) {
 80050fc:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8005100:	b128      	cbz	r0, 800510e <cbvprintf+0x9ca>
			OUTC(sign);
 8005102:	4629      	mov	r1, r5
 8005104:	47b0      	blx	r6
 8005106:	2800      	cmp	r0, #0
 8005108:	f6ff ab31 	blt.w	800476e <cbvprintf+0x2a>
 800510c:	3401      	adds	r4, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
 800510e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8005112:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005116:	d072      	beq.n	80051fe <cbvprintf+0xaba>
			if (conv->specifier_a) {
 8005118:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800511c:	2b00      	cmp	r3, #0
 800511e:	db0d      	blt.n	800513c <cbvprintf+0x9f8>
				while (isdigit((int)*cp)) {
 8005120:	7838      	ldrb	r0, [r7, #0]
 8005122:	4b5b      	ldr	r3, [pc, #364]	; (8005290 <cbvprintf+0xb4c>)
 8005124:	5cc3      	ldrb	r3, [r0, r3]
 8005126:	f013 0f04 	tst.w	r3, #4
 800512a:	d012      	beq.n	8005152 <cbvprintf+0xa0e>
					OUTC(*cp++);
 800512c:	3701      	adds	r7, #1
 800512e:	4629      	mov	r1, r5
 8005130:	47b0      	blx	r6
 8005132:	2800      	cmp	r0, #0
 8005134:	f6ff ab1b 	blt.w	800476e <cbvprintf+0x2a>
 8005138:	3401      	adds	r4, #1
 800513a:	e7f1      	b.n	8005120 <cbvprintf+0x9dc>
				while (*cp != 'p') {
 800513c:	7838      	ldrb	r0, [r7, #0]
 800513e:	2870      	cmp	r0, #112	; 0x70
 8005140:	d044      	beq.n	80051cc <cbvprintf+0xa88>
					OUTC(*cp++);
 8005142:	3701      	adds	r7, #1
 8005144:	4629      	mov	r1, r5
 8005146:	47b0      	blx	r6
 8005148:	2800      	cmp	r0, #0
 800514a:	f6ff ab10 	blt.w	800476e <cbvprintf+0x2a>
 800514e:	3401      	adds	r4, #1
 8005150:	e7f4      	b.n	800513c <cbvprintf+0x9f8>
				pad_len = conv->pad0_value;
 8005152:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
				if (!conv->pad_postdp) {
 8005156:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 800515a:	f013 0f20 	tst.w	r3, #32
 800515e:	d010      	beq.n	8005182 <cbvprintf+0xa3e>
				if (*cp == '.') {
 8005160:	7838      	ldrb	r0, [r7, #0]
 8005162:	282e      	cmp	r0, #46	; 0x2e
 8005164:	d01d      	beq.n	80051a2 <cbvprintf+0xa5e>
				while (isdigit((int)*cp)) {
 8005166:	7838      	ldrb	r0, [r7, #0]
 8005168:	4b49      	ldr	r3, [pc, #292]	; (8005290 <cbvprintf+0xb4c>)
 800516a:	5cc3      	ldrb	r3, [r0, r3]
 800516c:	f013 0f04 	tst.w	r3, #4
 8005170:	d02c      	beq.n	80051cc <cbvprintf+0xa88>
					OUTC(*cp++);
 8005172:	3701      	adds	r7, #1
 8005174:	4629      	mov	r1, r5
 8005176:	47b0      	blx	r6
 8005178:	2800      	cmp	r0, #0
 800517a:	f6ff aaf8 	blt.w	800476e <cbvprintf+0x2a>
 800517e:	3401      	adds	r4, #1
 8005180:	e7f1      	b.n	8005166 <cbvprintf+0xa22>
					while (pad_len-- > 0) {
 8005182:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
 8005186:	f1ba 0f00 	cmp.w	sl, #0
 800518a:	dd08      	ble.n	800519e <cbvprintf+0xa5a>
						OUTC('0');
 800518c:	4629      	mov	r1, r5
 800518e:	2030      	movs	r0, #48	; 0x30
 8005190:	47b0      	blx	r6
 8005192:	2800      	cmp	r0, #0
 8005194:	f6ff aaeb 	blt.w	800476e <cbvprintf+0x2a>
 8005198:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
 800519a:	46da      	mov	sl, fp
 800519c:	e7f1      	b.n	8005182 <cbvprintf+0xa3e>
 800519e:	46da      	mov	sl, fp
 80051a0:	e7de      	b.n	8005160 <cbvprintf+0xa1c>
					OUTC(*cp++);
 80051a2:	3701      	adds	r7, #1
 80051a4:	4629      	mov	r1, r5
 80051a6:	47b0      	blx	r6
 80051a8:	2800      	cmp	r0, #0
 80051aa:	f6ff aae0 	blt.w	800476e <cbvprintf+0x2a>
 80051ae:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
 80051b0:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
 80051b4:	f1ba 0f00 	cmp.w	sl, #0
 80051b8:	ddd5      	ble.n	8005166 <cbvprintf+0xa22>
						OUTC('0');
 80051ba:	4629      	mov	r1, r5
 80051bc:	2030      	movs	r0, #48	; 0x30
 80051be:	47b0      	blx	r6
 80051c0:	2800      	cmp	r0, #0
 80051c2:	f6ff aad4 	blt.w	800476e <cbvprintf+0x2a>
 80051c6:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
 80051c8:	46da      	mov	sl, fp
 80051ca:	e7f1      	b.n	80051b0 <cbvprintf+0xa6c>
			pad_len = conv->pad0_pre_exp;
 80051cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			while (pad_len-- > 0) {
 80051ce:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	dd08      	ble.n	80051e8 <cbvprintf+0xaa4>
				OUTC('0');
 80051d6:	4629      	mov	r1, r5
 80051d8:	2030      	movs	r0, #48	; 0x30
 80051da:	47b0      	blx	r6
 80051dc:	2800      	cmp	r0, #0
 80051de:	f6ff aac6 	blt.w	800476e <cbvprintf+0x2a>
 80051e2:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
 80051e4:	4653      	mov	r3, sl
 80051e6:	e7f2      	b.n	80051ce <cbvprintf+0xa8a>
			OUTS(cp, bpe);
 80051e8:	9b08      	ldr	r3, [sp, #32]
 80051ea:	463a      	mov	r2, r7
 80051ec:	4629      	mov	r1, r5
 80051ee:	4630      	mov	r0, r6
 80051f0:	f012 fd09 	bl	8017c06 <outs>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	f6ff aaba 	blt.w	800476e <cbvprintf+0x2a>
 80051fa:	4404      	add	r4, r0
 80051fc:	e033      	b.n	8005266 <cbvprintf+0xb22>
			if (conv->altform_0c | conv->altform_0) {
 80051fe:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8005202:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8005206:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800520a:	4313      	orrs	r3, r2
 800520c:	d006      	beq.n	800521c <cbvprintf+0xad8>
				OUTC('0');
 800520e:	4629      	mov	r1, r5
 8005210:	2030      	movs	r0, #48	; 0x30
 8005212:	47b0      	blx	r6
 8005214:	2800      	cmp	r0, #0
 8005216:	f6ff aaaa 	blt.w	800476e <cbvprintf+0x2a>
 800521a:	3401      	adds	r4, #1
			if (conv->altform_0c) {
 800521c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8005220:	f013 0f10 	tst.w	r3, #16
 8005224:	d007      	beq.n	8005236 <cbvprintf+0xaf2>
				OUTC(conv->specifier);
 8005226:	4629      	mov	r1, r5
 8005228:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800522c:	47b0      	blx	r6
 800522e:	2800      	cmp	r0, #0
 8005230:	f6ff aa9d 	blt.w	800476e <cbvprintf+0x2a>
 8005234:	3401      	adds	r4, #1
			pad_len = conv->pad0_value;
 8005236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			while (pad_len-- > 0) {
 8005238:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800523c:	2b00      	cmp	r3, #0
 800523e:	dd08      	ble.n	8005252 <cbvprintf+0xb0e>
				OUTC('0');
 8005240:	4629      	mov	r1, r5
 8005242:	2030      	movs	r0, #48	; 0x30
 8005244:	47b0      	blx	r6
 8005246:	2800      	cmp	r0, #0
 8005248:	f6ff aa91 	blt.w	800476e <cbvprintf+0x2a>
 800524c:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
 800524e:	4653      	mov	r3, sl
 8005250:	e7f2      	b.n	8005238 <cbvprintf+0xaf4>
			OUTS(bps, bpe);
 8005252:	9b08      	ldr	r3, [sp, #32]
 8005254:	463a      	mov	r2, r7
 8005256:	4629      	mov	r1, r5
 8005258:	4630      	mov	r0, r6
 800525a:	f012 fcd4 	bl	8017c06 <outs>
 800525e:	2800      	cmp	r0, #0
 8005260:	f6ff aa85 	blt.w	800476e <cbvprintf+0x2a>
 8005264:	4404      	add	r4, r0
		while (width > 0) {
 8005266:	f1b8 0f00 	cmp.w	r8, #0
 800526a:	dd09      	ble.n	8005280 <cbvprintf+0xb3c>
			OUTC(' ');
 800526c:	4629      	mov	r1, r5
 800526e:	2020      	movs	r0, #32
 8005270:	47b0      	blx	r6
 8005272:	2800      	cmp	r0, #0
 8005274:	f6ff aa7b 	blt.w	800476e <cbvprintf+0x2a>
 8005278:	3401      	adds	r4, #1
			--width;
 800527a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800527e:	e7f2      	b.n	8005266 <cbvprintf+0xb22>
		fp = extract_conversion(conv, sp);
 8005280:	464f      	mov	r7, r9
 8005282:	f7ff ba69 	b.w	8004758 <cbvprintf+0x14>
	return count;
 8005286:	4620      	mov	r0, r4
 8005288:	f7ff ba71 	b.w	800476e <cbvprintf+0x2a>
 800528c:	0801da15 	.word	0x0801da15
 8005290:	0801eca9 	.word	0x0801eca9

08005294 <z_arm_platform_init>:
#include <soc.h>

#define PMU_FLASH_WS		(0x3U)

void z_arm_platform_init(void)
{
 8005294:	b508      	push	{r3, lr}
	uint32_t temp;
#if 1
	SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8005296:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <z_arm_platform_init+0x30>)
 8005298:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800529c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80052a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                 (3UL << 11*2)  );                 /* set CP11 Full Access */
#endif
	/* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
    SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 80052a4:	695a      	ldr	r2, [r3, #20]
 80052a6:	f022 0208 	bic.w	r2, r2, #8
 80052aa:	615a      	str	r2, [r3, #20]

	/* setup flash wait state */
	temp = FLASH0->FCON;
 80052ac:	4906      	ldr	r1, [pc, #24]	; (80052c8 <z_arm_platform_init+0x34>)
 80052ae:	f241 0214 	movw	r2, #4116	; 0x1014
 80052b2:	588b      	ldr	r3, [r1, r2]
	temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80052b4:	f023 030f 	bic.w	r3, r3, #15
	temp |= PMU_FLASH_WS;
 80052b8:	f043 0303 	orr.w	r3, r3, #3
	FLASH0->FCON = temp;
 80052bc:	508b      	str	r3, [r1, r2]

	/* configure PLL & system clock */
	SystemCoreClockSetup();
 80052be:	f000 fb9d 	bl	80059fc <SystemCoreClockSetup>
}
 80052c2:	bd08      	pop	{r3, pc}
 80052c4:	e000ed00 	.word	0xe000ed00
 80052c8:	58001000 	.word	0x58001000

080052cc <msg_process>:

static void msg_process(union log_msgs msg, bool bypass)
{
	struct log_backend const *backend;

	if (!bypass) {
 80052cc:	bb01      	cbnz	r1, 8005310 <msg_process+0x44>
{
 80052ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d0:	4606      	mov	r6, r0
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
 80052d2:	2400      	movs	r4, #0
 80052d4:	e000      	b.n	80052d8 <msg_process+0xc>
 80052d6:	3401      	adds	r4, #1
 80052d8:	4b0e      	ldr	r3, [pc, #56]	; (8005314 <msg_process+0x48>)
 80052da:	4a0f      	ldr	r2, [pc, #60]	; (8005318 <msg_process+0x4c>)
 80052dc:	1a9b      	subs	r3, r3, r2
 80052de:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 80052e2:	da14      	bge.n	800530e <msg_process+0x42>
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
 80052e4:	4d0c      	ldr	r5, [pc, #48]	; (8005318 <msg_process+0x4c>)
 80052e6:	eb05 1504 	add.w	r5, r5, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
 80052ea:	686b      	ldr	r3, [r5, #4]
 80052ec:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);
			if (log_backend_is_active(backend) &&
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0f1      	beq.n	80052d6 <msg_process+0xa>
			    msg_filter_check(backend, msg)) {
 80052f2:	4631      	mov	r1, r6
 80052f4:	4628      	mov	r0, r5
 80052f6:	f012 fca3 	bl	8017c40 <msg_filter_check>
			if (log_backend_is_active(backend) &&
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d0eb      	beq.n	80052d6 <msg_process+0xa>
	backend->api->process(backend, msg);
 80052fe:	0127      	lsls	r7, r4, #4
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <msg_process+0x4c>)
 8005302:	59db      	ldr	r3, [r3, r7]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4631      	mov	r1, r6
 8005308:	4628      	mov	r0, r5
 800530a:	4798      	blx	r3
}
 800530c:	e7e3      	b.n	80052d6 <msg_process+0xa>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
 800530e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	0801d800 	.word	0x0801d800
 8005318:	0801d7f0 	.word	0x0801d7f0

0800531c <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 800531c:	4b18      	ldr	r3, [pc, #96]	; (8005380 <log_init+0x64>)
 800531e:	f3bf 8f5b 	dmb	ish
 8005322:	e853 2f00 	ldrex	r2, [r3]
 8005326:	1c51      	adds	r1, r2, #1
 8005328:	e843 1000 	strex	r0, r1, [r3]
 800532c:	2800      	cmp	r0, #0
 800532e:	d1f8      	bne.n	8005322 <log_init+0x6>
 8005330:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
 8005334:	bb1a      	cbnz	r2, 800537e <log_init+0x62>
{
 8005336:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
 8005338:	2400      	movs	r4, #0
 800533a:	e009      	b.n	8005350 <log_init+0x34>
					   backend->cb->ctx,
 800533c:	4b11      	ldr	r3, [pc, #68]	; (8005384 <log_init+0x68>)
 800533e:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 8005342:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
 8005344:	2204      	movs	r2, #4
 8005346:	6819      	ldr	r1, [r3, #0]
 8005348:	4628      	mov	r0, r5
 800534a:	f000 f8ab 	bl	80054a4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
 800534e:	3401      	adds	r4, #1
 8005350:	4b0d      	ldr	r3, [pc, #52]	; (8005388 <log_init+0x6c>)
 8005352:	4a0c      	ldr	r2, [pc, #48]	; (8005384 <log_init+0x68>)
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 800535a:	da0f      	bge.n	800537c <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
 800535c:	4626      	mov	r6, r4
	return &__log_backends_start[idx];
 800535e:	4d09      	ldr	r5, [pc, #36]	; (8005384 <log_init+0x68>)
 8005360:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
 8005364:	7b2b      	ldrb	r3, [r5, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0f1      	beq.n	800534e <log_init+0x32>
			if (backend->api->init != NULL) {
 800536a:	0123      	lsls	r3, r4, #4
 800536c:	4a05      	ldr	r2, [pc, #20]	; (8005384 <log_init+0x68>)
 800536e:	58d3      	ldr	r3, [r2, r3]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0e2      	beq.n	800533c <log_init+0x20>
				backend->api->init(backend);
 8005376:	4628      	mov	r0, r5
 8005378:	4798      	blx	r3
 800537a:	e7df      	b.n	800533c <log_init+0x20>
}
 800537c:	bd70      	pop	{r4, r5, r6, pc}
 800537e:	4770      	bx	lr
 8005380:	200030d8 	.word	0x200030d8
 8005384:	0801d7f0 	.word	0x0801d7f0
 8005388:	0801d800 	.word	0x0801d800

0800538c <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
 800538c:	b138      	cbz	r0, 800539e <log_set_timestamp_func+0x12>
{
 800538e:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
 8005390:	4a04      	ldr	r2, [pc, #16]	; (80053a4 <log_set_timestamp_func+0x18>)
 8005392:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
 8005394:	4608      	mov	r0, r1
 8005396:	f000 fa49 	bl	800582c <log_output_timestamp_freq_set>
	return 0;
 800539a:	2000      	movs	r0, #0
}
 800539c:	bd08      	pop	{r3, pc}
		return -EINVAL;
 800539e:	f06f 0015 	mvn.w	r0, #21
}
 80053a2:	4770      	bx	lr
 80053a4:	20000804 	.word	0x20000804

080053a8 <log_core_init>:
{
 80053a8:	b508      	push	{r3, lr}
	panic_mode = false;
 80053aa:	2300      	movs	r3, #0
 80053ac:	4a04      	ldr	r2, [pc, #16]	; (80053c0 <log_core_init+0x18>)
 80053ae:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
 80053b0:	4a04      	ldr	r2, [pc, #16]	; (80053c4 <log_core_init+0x1c>)
 80053b2:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
 80053b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80053b8:	4803      	ldr	r0, [pc, #12]	; (80053c8 <log_core_init+0x20>)
 80053ba:	f7ff ffe7 	bl	800538c <log_set_timestamp_func>
}
 80053be:	bd08      	pop	{r3, pc}
 80053c0:	20003c71 	.word	0x20003c71
 80053c4:	200030d4 	.word	0x200030d4
 80053c8:	08017c45 	.word	0x08017c45

080053cc <z_impl_log_panic>:
	if (panic_mode) {
 80053cc:	4b10      	ldr	r3, [pc, #64]	; (8005410 <z_impl_log_panic+0x44>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	b103      	cbz	r3, 80053d4 <z_impl_log_panic+0x8>
 80053d2:	4770      	bx	lr
{
 80053d4:	b510      	push	{r4, lr}
	log_init();
 80053d6:	f7ff ffa1 	bl	800531c <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
 80053da:	2400      	movs	r4, #0
 80053dc:	e000      	b.n	80053e0 <z_impl_log_panic+0x14>
 80053de:	3401      	adds	r4, #1
 80053e0:	4b0c      	ldr	r3, [pc, #48]	; (8005414 <z_impl_log_panic+0x48>)
 80053e2:	4a0d      	ldr	r2, [pc, #52]	; (8005418 <z_impl_log_panic+0x4c>)
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	ebb4 1f23 	cmp.w	r4, r3, asr #4
 80053ea:	da0c      	bge.n	8005406 <z_impl_log_panic+0x3a>
 80053ec:	480a      	ldr	r0, [pc, #40]	; (8005418 <z_impl_log_panic+0x4c>)
 80053ee:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
 80053f2:	6843      	ldr	r3, [r0, #4]
 80053f4:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f1      	beq.n	80053de <z_impl_log_panic+0x12>
	backend->api->panic(backend);
 80053fa:	0123      	lsls	r3, r4, #4
 80053fc:	4a06      	ldr	r2, [pc, #24]	; (8005418 <z_impl_log_panic+0x4c>)
 80053fe:	58d3      	ldr	r3, [r2, r3]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	4798      	blx	r3
}
 8005404:	e7eb      	b.n	80053de <z_impl_log_panic+0x12>
	panic_mode = true;
 8005406:	4b02      	ldr	r3, [pc, #8]	; (8005410 <z_impl_log_panic+0x44>)
 8005408:	2201      	movs	r2, #1
 800540a:	701a      	strb	r2, [r3, #0]
}
 800540c:	bd10      	pop	{r4, pc}
 800540e:	bf00      	nop
 8005410:	20003c71 	.word	0x20003c71
 8005414:	0801d800 	.word	0x0801d800
 8005418:	0801d7f0 	.word	0x0801d7f0

0800541c <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
 800541c:	4b01      	ldr	r3, [pc, #4]	; (8005424 <z_log_notify_backend_enabled+0x8>)
 800541e:	2201      	movs	r2, #1
 8005420:	701a      	strb	r2, [r3, #0]
}
 8005422:	4770      	bx	lr
 8005424:	20003c70 	.word	0x20003c70

08005428 <z_log_dropped>:
 8005428:	4b0d      	ldr	r3, [pc, #52]	; (8005460 <z_log_dropped+0x38>)
 800542a:	f3bf 8f5b 	dmb	ish
 800542e:	e853 2f00 	ldrex	r2, [r3]
 8005432:	3201      	adds	r2, #1
 8005434:	e843 2100 	strex	r1, r2, [r3]
 8005438:	2900      	cmp	r1, #0
 800543a:	d1f8      	bne.n	800542e <z_log_dropped+0x6>
 800543c:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
 8005440:	b900      	cbnz	r0, 8005444 <z_log_dropped+0x1c>
		atomic_dec(&buffered_cnt);
	}
}
 8005442:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
 8005444:	4b07      	ldr	r3, [pc, #28]	; (8005464 <z_log_dropped+0x3c>)
 8005446:	f3bf 8f5b 	dmb	ish
 800544a:	e853 2f00 	ldrex	r2, [r3]
 800544e:	3a01      	subs	r2, #1
 8005450:	e843 2100 	strex	r1, r2, [r3]
 8005454:	2900      	cmp	r1, #0
 8005456:	d1f8      	bne.n	800544a <z_log_dropped+0x22>
 8005458:	f3bf 8f5b 	dmb	ish
 800545c:	e7f1      	b.n	8005442 <z_log_dropped+0x1a>
 800545e:	bf00      	nop
 8005460:	200030d4 	.word	0x200030d4
 8005464:	200030d0 	.word	0x200030d0

08005468 <z_log_msg2_commit>:
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
 8005468:	b510      	push	{r4, lr}
 800546a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
 800546c:	4b04      	ldr	r3, [pc, #16]	; (8005480 <z_log_msg2_commit+0x18>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4798      	blx	r3
 8005472:	60a0      	str	r0, [r4, #8]
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
 8005474:	2100      	movs	r1, #0
 8005476:	4620      	mov	r0, r4
 8005478:	f7ff ff28 	bl	80052cc <msg_process>
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
 800547c:	bd10      	pop	{r4, pc}
 800547e:	bf00      	nop
 8005480:	20000804 	.word	0x20000804

08005484 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 8005484:	4b05      	ldr	r3, [pc, #20]	; (800549c <log_source_name_get+0x18>)
 8005486:	4a06      	ldr	r2, [pc, #24]	; (80054a0 <log_source_name_get+0x1c>)
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
 800548e:	d202      	bcs.n	8005496 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
 8005490:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
 8005494:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
 8005496:	2000      	movs	r0, #0
}
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	0801d7f0 	.word	0x0801d7f0
 80054a0:	0801d700 	.word	0x0801d700

080054a4 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
 80054a4:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
 80054a6:	4b07      	ldr	r3, [pc, #28]	; (80054c4 <log_backend_enable+0x20>)
 80054a8:	1ac3      	subs	r3, r0, r3
 80054aa:	111b      	asrs	r3, r3, #4
 80054ac:	3301      	adds	r3, #1
	backend->cb->id = id;
 80054ae:	6842      	ldr	r2, [r0, #4]
 80054b0:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
 80054b2:	6843      	ldr	r3, [r0, #4]
 80054b4:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
 80054b6:	6843      	ldr	r3, [r0, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
 80054bc:	f7ff ffae 	bl	800541c <z_log_notify_backend_enabled>
}
 80054c0:	bd08      	pop	{r3, pc}
 80054c2:	bf00      	nop
 80054c4:	0801d7f0 	.word	0x0801d7f0

080054c8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
 80054c8:	b40e      	push	{r1, r2, r3}
 80054ca:	b500      	push	{lr}
 80054cc:	b082      	sub	sp, #8
 80054ce:	4601      	mov	r1, r0
 80054d0:	ab03      	add	r3, sp, #12
 80054d2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
 80054d6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
 80054d8:	4803      	ldr	r0, [pc, #12]	; (80054e8 <print_formatted+0x20>)
 80054da:	f7ff f933 	bl	8004744 <cbvprintf>
	va_end(args);

	return length;
}
 80054de:	b002      	add	sp, #8
 80054e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054e4:	b003      	add	sp, #12
 80054e6:	4770      	bx	lr
 80054e8:	08017c7f 	.word	0x08017c7f

080054ec <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
 80054ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ee:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
 80054f0:	f011 0f44 	tst.w	r1, #68	; 0x44
 80054f4:	d005      	beq.n	8005502 <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
 80054f6:	4b1a      	ldr	r3, [pc, #104]	; (8005560 <timestamp_print+0x74>)
 80054f8:	681c      	ldr	r4, [r3, #0]
 80054fa:	b934      	cbnz	r4, 800550a <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
 80054fc:	2000      	movs	r0, #0
	}

	return length;
}
 80054fe:	b005      	add	sp, #20
 8005500:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
 8005502:	4918      	ldr	r1, [pc, #96]	; (8005564 <timestamp_print+0x78>)
 8005504:	f7ff ffe0 	bl	80054c8 <print_formatted>
 8005508:	e7f9      	b.n	80054fe <timestamp_print+0x12>
		timestamp /= timestamp_div;
 800550a:	4b17      	ldr	r3, [pc, #92]	; (8005568 <timestamp_print+0x7c>)
 800550c:	6819      	ldr	r1, [r3, #0]
 800550e:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
 8005512:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
 8005516:	4a15      	ldr	r2, [pc, #84]	; (800556c <timestamp_print+0x80>)
 8005518:	fba2 3205 	umull	r3, r2, r2, r5
 800551c:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
 800551e:	f44f 6661 	mov.w	r6, #3600	; 0xe10
 8005522:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
 8005526:	4b12      	ldr	r3, [pc, #72]	; (8005570 <timestamp_print+0x84>)
 8005528:	fba3 7306 	umull	r7, r3, r3, r6
 800552c:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
 800552e:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
 8005532:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8005536:	fb05 f101 	mul.w	r1, r5, r1
 800553a:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
 800553e:	fb07 1114 	mls	r1, r7, r4, r1
 8005542:	fb05 f101 	mul.w	r1, r5, r1
 8005546:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
 800554a:	9402      	str	r4, [sp, #8]
 800554c:	9701      	str	r7, [sp, #4]
 800554e:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
 8005552:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
 8005556:	9100      	str	r1, [sp, #0]
 8005558:	4906      	ldr	r1, [pc, #24]	; (8005574 <timestamp_print+0x88>)
 800555a:	f7ff ffb5 	bl	80054c8 <print_formatted>
 800555e:	e7ce      	b.n	80054fe <timestamp_print+0x12>
 8005560:	200030dc 	.word	0x200030dc
 8005564:	0801da1c 	.word	0x0801da1c
 8005568:	200030e0 	.word	0x200030e0
 800556c:	91a2b3c5 	.word	0x91a2b3c5
 8005570:	88888889 	.word	0x88888889
 8005574:	0801da28 	.word	0x0801da28

08005578 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
 8005578:	b161      	cbz	r1, 8005594 <color_print+0x1c>
{
 800557a:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 800557c:	b12a      	cbz	r2, 800558a <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
 800557e:	4a06      	ldr	r2, [pc, #24]	; (8005598 <color_print+0x20>)
 8005580:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005584:	b912      	cbnz	r2, 800558c <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
 8005586:	4a05      	ldr	r2, [pc, #20]	; (800559c <color_print+0x24>)
 8005588:	e000      	b.n	800558c <color_print+0x14>
 800558a:	4a04      	ldr	r2, [pc, #16]	; (800559c <color_print+0x24>)
		print_formatted(output, "%s", log_color);
 800558c:	4904      	ldr	r1, [pc, #16]	; (80055a0 <color_print+0x28>)
 800558e:	f7ff ff9b 	bl	80054c8 <print_formatted>
	}
}
 8005592:	bd08      	pop	{r3, pc}
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	0801da9c 	.word	0x0801da9c
 800559c:	0801da44 	.word	0x0801da44
 80055a0:	0801e938 	.word	0x0801e938

080055a4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
 80055a4:	f011 0f10 	tst.w	r1, #16
 80055a8:	d10b      	bne.n	80055c2 <newline_print+0x1e>
{
 80055aa:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
 80055ac:	f011 0f20 	tst.w	r1, #32
 80055b0:	d003      	beq.n	80055ba <newline_print+0x16>
		print_formatted(ctx, "\n");
 80055b2:	4904      	ldr	r1, [pc, #16]	; (80055c4 <newline_print+0x20>)
 80055b4:	f7ff ff88 	bl	80054c8 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
 80055b8:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
 80055ba:	4903      	ldr	r1, [pc, #12]	; (80055c8 <newline_print+0x24>)
 80055bc:	f7ff ff84 	bl	80054c8 <print_formatted>
 80055c0:	e7fa      	b.n	80055b8 <newline_print+0x14>
 80055c2:	4770      	bx	lr
 80055c4:	0801d99c 	.word	0x0801d99c
 80055c8:	0801da4c 	.word	0x0801da4c

080055cc <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
 80055cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d0:	4605      	mov	r5, r0
 80055d2:	460f      	mov	r7, r1
 80055d4:	4616      	mov	r6, r2
 80055d6:	4698      	mov	r8, r3
	newline_print(output, flags);
 80055d8:	9906      	ldr	r1, [sp, #24]
 80055da:	f7ff ffe3 	bl	80055a4 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
 80055de:	2400      	movs	r4, #0
 80055e0:	4544      	cmp	r4, r8
 80055e2:	da05      	bge.n	80055f0 <hexdump_line_print+0x24>
		print_formatted(output, " ");
 80055e4:	4924      	ldr	r1, [pc, #144]	; (8005678 <hexdump_line_print+0xac>)
 80055e6:	4628      	mov	r0, r5
 80055e8:	f7ff ff6e 	bl	80054c8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
 80055ec:	3401      	adds	r4, #1
 80055ee:	e7f7      	b.n	80055e0 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 80055f0:	2400      	movs	r4, #0
 80055f2:	e009      	b.n	8005608 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 80055f4:	4920      	ldr	r1, [pc, #128]	; (8005678 <hexdump_line_print+0xac>)
 80055f6:	4628      	mov	r0, r5
 80055f8:	f7ff ff66 	bl	80054c8 <print_formatted>
 80055fc:	e00b      	b.n	8005616 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
 80055fe:	491f      	ldr	r1, [pc, #124]	; (800567c <hexdump_line_print+0xb0>)
 8005600:	4628      	mov	r0, r5
 8005602:	f7ff ff61 	bl	80054c8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8005606:	3401      	adds	r4, #1
 8005608:	2c0f      	cmp	r4, #15
 800560a:	dc0c      	bgt.n	8005626 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
 800560c:	2c00      	cmp	r4, #0
 800560e:	dd02      	ble.n	8005616 <hexdump_line_print+0x4a>
 8005610:	f014 0f07 	tst.w	r4, #7
 8005614:	d0ee      	beq.n	80055f4 <hexdump_line_print+0x28>
		if (i < length) {
 8005616:	42b4      	cmp	r4, r6
 8005618:	d2f1      	bcs.n	80055fe <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
 800561a:	5d3a      	ldrb	r2, [r7, r4]
 800561c:	4918      	ldr	r1, [pc, #96]	; (8005680 <hexdump_line_print+0xb4>)
 800561e:	4628      	mov	r0, r5
 8005620:	f7ff ff52 	bl	80054c8 <print_formatted>
 8005624:	e7ef      	b.n	8005606 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
 8005626:	4917      	ldr	r1, [pc, #92]	; (8005684 <hexdump_line_print+0xb8>)
 8005628:	4628      	mov	r0, r5
 800562a:	f7ff ff4d 	bl	80054c8 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 800562e:	2400      	movs	r4, #0
 8005630:	e009      	b.n	8005646 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
 8005632:	4911      	ldr	r1, [pc, #68]	; (8005678 <hexdump_line_print+0xac>)
 8005634:	4628      	mov	r0, r5
 8005636:	f7ff ff47 	bl	80054c8 <print_formatted>
 800563a:	e00b      	b.n	8005654 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
 800563c:	4912      	ldr	r1, [pc, #72]	; (8005688 <hexdump_line_print+0xbc>)
 800563e:	4628      	mov	r0, r5
 8005640:	f7ff ff42 	bl	80054c8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
 8005644:	3401      	adds	r4, #1
 8005646:	2c0f      	cmp	r4, #15
 8005648:	dc13      	bgt.n	8005672 <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
 800564a:	2c00      	cmp	r4, #0
 800564c:	dd02      	ble.n	8005654 <hexdump_line_print+0x88>
 800564e:	f014 0f07 	tst.w	r4, #7
 8005652:	d0ee      	beq.n	8005632 <hexdump_line_print+0x66>
		if (i < length) {
 8005654:	42b4      	cmp	r4, r6
 8005656:	d207      	bcs.n	8005668 <hexdump_line_print+0x9c>
			char c = (char)data[i];
 8005658:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
 800565a:	4b0c      	ldr	r3, [pc, #48]	; (800568c <hexdump_line_print+0xc0>)
 800565c:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
 800565e:	f013 0f97 	tst.w	r3, #151	; 0x97
 8005662:	d1eb      	bne.n	800563c <hexdump_line_print+0x70>
 8005664:	222e      	movs	r2, #46	; 0x2e
 8005666:	e7e9      	b.n	800563c <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
 8005668:	4903      	ldr	r1, [pc, #12]	; (8005678 <hexdump_line_print+0xac>)
 800566a:	4628      	mov	r0, r5
 800566c:	f7ff ff2c 	bl	80054c8 <print_formatted>
 8005670:	e7e8      	b.n	8005644 <hexdump_line_print+0x78>
		}
	}
}
 8005672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005676:	bf00      	nop
 8005678:	0801da74 	.word	0x0801da74
 800567c:	0801da58 	.word	0x0801da58
 8005680:	0801da50 	.word	0x0801da50
 8005684:	0801da5c 	.word	0x0801da5c
 8005688:	0801da60 	.word	0x0801da60
 800568c:	0801eca9 	.word	0x0801eca9

08005690 <ids_print>:
{
 8005690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005694:	4680      	mov	r8, r0
 8005696:	4616      	mov	r6, r2
 8005698:	461d      	mov	r5, r3
 800569a:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
 800569e:	b959      	cbnz	r1, 80056b8 <ids_print+0x28>
	int total = 0;
 80056a0:	2400      	movs	r4, #0
	if (source_id >= 0) {
 80056a2:	2f00      	cmp	r7, #0
 80056a4:	db1c      	blt.n	80056e0 <ids_print+0x50>
		total += print_formatted(output,
 80056a6:	b186      	cbz	r6, 80056ca <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
 80056a8:	2301      	movs	r3, #1
 80056aa:	9a07      	ldr	r2, [sp, #28]
 80056ac:	4093      	lsls	r3, r2
				(func_on &&
 80056ae:	f013 0f10 	tst.w	r3, #16
 80056b2:	d118      	bne.n	80056e6 <ids_print+0x56>
		total += print_formatted(output,
 80056b4:	4e0d      	ldr	r6, [pc, #52]	; (80056ec <ids_print+0x5c>)
 80056b6:	e009      	b.n	80056cc <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
 80056b8:	4b0d      	ldr	r3, [pc, #52]	; (80056f0 <ids_print+0x60>)
 80056ba:	9a07      	ldr	r2, [sp, #28]
 80056bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80056c0:	490c      	ldr	r1, [pc, #48]	; (80056f4 <ids_print+0x64>)
 80056c2:	f7ff ff01 	bl	80054c8 <print_formatted>
 80056c6:	4604      	mov	r4, r0
 80056c8:	e7eb      	b.n	80056a2 <ids_print+0x12>
		total += print_formatted(output,
 80056ca:	4e08      	ldr	r6, [pc, #32]	; (80056ec <ids_print+0x5c>)
 80056cc:	4639      	mov	r1, r7
 80056ce:	4628      	mov	r0, r5
 80056d0:	f7ff fed8 	bl	8005484 <log_source_name_get>
 80056d4:	4602      	mov	r2, r0
 80056d6:	4631      	mov	r1, r6
 80056d8:	4640      	mov	r0, r8
 80056da:	f7ff fef5 	bl	80054c8 <print_formatted>
 80056de:	4404      	add	r4, r0
}
 80056e0:	4620      	mov	r0, r4
 80056e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
 80056e6:	4e04      	ldr	r6, [pc, #16]	; (80056f8 <ids_print+0x68>)
 80056e8:	e7f0      	b.n	80056cc <ids_print+0x3c>
 80056ea:	bf00      	nop
 80056ec:	0801da64 	.word	0x0801da64
 80056f0:	0801dab0 	.word	0x0801dab0
 80056f4:	0801da70 	.word	0x0801da70
 80056f8:	0801da6c 	.word	0x0801da6c

080056fc <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
 80056fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005700:	b085      	sub	sp, #20
 8005702:	4605      	mov	r5, r0
 8005704:	460c      	mov	r4, r1
 8005706:	4616      	mov	r6, r2
 8005708:	9303      	str	r3, [sp, #12]
 800570a:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
 800570e:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
 8005712:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
 8005716:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
 800571a:	f012 faae 	bl	8017c7a <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
 800571e:	b1e8      	cbz	r0, 800575c <prefix_print+0x60>
 8005720:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
 8005722:	4913      	ldr	r1, [pc, #76]	; (8005770 <prefix_print+0x74>)
 8005724:	4628      	mov	r0, r5
 8005726:	f7ff fecf 	bl	80054c8 <print_formatted>
 800572a:	4607      	mov	r7, r0
	}

	if (stamp) {
 800572c:	f1bb 0f00 	cmp.w	fp, #0
 8005730:	d116      	bne.n	8005760 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
 8005732:	4642      	mov	r2, r8
 8005734:	4651      	mov	r1, sl
 8005736:	4628      	mov	r0, r5
 8005738:	f012 facb 	bl	8017cd2 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
 800573c:	f8cd 8004 	str.w	r8, [sp, #4]
 8005740:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 800574a:	4632      	mov	r2, r6
 800574c:	4649      	mov	r1, r9
 800574e:	4628      	mov	r0, r5
 8005750:	f7ff ff9e 	bl	8005690 <ids_print>
			domain_id, source_id, level);


	return length;
}
 8005754:	4438      	add	r0, r7
 8005756:	b005      	add	sp, #20
 8005758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
 800575c:	2700      	movs	r7, #0
 800575e:	e7e5      	b.n	800572c <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
 8005760:	9a03      	ldr	r2, [sp, #12]
 8005762:	4621      	mov	r1, r4
 8005764:	4628      	mov	r0, r5
 8005766:	f7ff fec1 	bl	80054ec <timestamp_print>
 800576a:	4407      	add	r7, r0
 800576c:	e7e1      	b.n	8005732 <prefix_print+0x36>
 800576e:	bf00      	nop
 8005770:	0801da78 	.word	0x0801da78

08005774 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
 8005774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005778:	b085      	sub	sp, #20
 800577a:	4606      	mov	r6, r0
 800577c:	460c      	mov	r4, r1
 800577e:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
 8005780:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
 8005782:	880a      	ldrh	r2, [r1, #0]
 8005784:	f3c2 1882 	ubfx	r8, r2, #6, #3
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYST) {
		log_output_msg2_syst_process(output, msg, flags);
		return;
	}

	if (!raw_string) {
 8005788:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
 800578c:	d035      	beq.n	80057fa <log_output_msg2_process+0x86>
	return msg->hdr.source;
 800578e:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
 8005790:	7809      	ldrb	r1, [r1, #0]
 8005792:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
 8005796:	b36a      	cbz	r2, 80057f4 <log_output_msg2_process+0x80>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
 8005798:	4820      	ldr	r0, [pc, #128]	; (800581c <log_output_msg2_process+0xa8>)
 800579a:	1a12      	subs	r2, r2, r0
 800579c:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
 80057a0:	9202      	str	r2, [sp, #8]
 80057a2:	9101      	str	r1, [sp, #4]
 80057a4:	f8cd 8000 	str.w	r8, [sp]
 80057a8:	2200      	movs	r2, #0
 80057aa:	4639      	mov	r1, r7
 80057ac:	4630      	mov	r0, r6
 80057ae:	f7ff ffa5 	bl	80056fc <prefix_print>
 80057b2:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
 80057b4:	4625      	mov	r5, r4
 80057b6:	f855 3b0c 	ldr.w	r3, [r5], #12
 80057ba:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
 80057be:	b143      	cbz	r3, 80057d2 <log_output_msg2_process+0x5e>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
 80057c0:	f1b8 0f00 	cmp.w	r8, #0
 80057c4:	d11c      	bne.n	8005800 <log_output_msg2_process+0x8c>
 80057c6:	4816      	ldr	r0, [pc, #88]	; (8005820 <log_output_msg2_process+0xac>)
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
 80057c8:	462b      	mov	r3, r5
 80057ca:	4632      	mov	r2, r6
 80057cc:	4915      	ldr	r1, [pc, #84]	; (8005824 <log_output_msg2_process+0xb0>)
 80057ce:	f011 ff78 	bl	80176c2 <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
 80057d2:	8862      	ldrh	r2, [r4, #2]
 80057d4:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
 80057d8:	6821      	ldr	r1, [r4, #0]
 80057da:	f3c1 2149 	ubfx	r1, r1, #9, #10
 80057de:	4429      	add	r1, r5
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
 80057e0:	b982      	cbnz	r2, 8005804 <log_output_msg2_process+0x90>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
 80057e2:	f1b8 0f00 	cmp.w	r8, #0
 80057e6:	d113      	bne.n	8005810 <log_output_msg2_process+0x9c>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
 80057e8:	4630      	mov	r0, r6
 80057ea:	f012 faa5 	bl	8017d38 <log_output_flush>
}
 80057ee:	b005      	add	sp, #20
 80057f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		int16_t source_id = source ?
 80057f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057f8:	e7d2      	b.n	80057a0 <log_output_msg2_process+0x2c>
		prefix_offset = 0;
 80057fa:	f04f 0900 	mov.w	r9, #0
 80057fe:	e7d9      	b.n	80057b4 <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
 8005800:	4809      	ldr	r0, [pc, #36]	; (8005828 <log_output_msg2_process+0xb4>)
 8005802:	e7e1      	b.n	80057c8 <log_output_msg2_process+0x54>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
 8005804:	9700      	str	r7, [sp, #0]
 8005806:	464b      	mov	r3, r9
 8005808:	4630      	mov	r0, r6
 800580a:	f012 fa7a 	bl	8017d02 <log_msg2_hexdump>
 800580e:	e7e8      	b.n	80057e2 <log_output_msg2_process+0x6e>
		postfix_print(output, flags, level);
 8005810:	4642      	mov	r2, r8
 8005812:	4639      	mov	r1, r7
 8005814:	4630      	mov	r0, r6
 8005816:	f012 fa68 	bl	8017cea <postfix_print>
 800581a:	e7e5      	b.n	80057e8 <log_output_msg2_process+0x74>
 800581c:	0801d700 	.word	0x0801d700
 8005820:	08017c9d 	.word	0x08017c9d
 8005824:	08004745 	.word	0x08004745
 8005828:	08017c7f 	.word	0x08017c7f

0800582c <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
 800582c:	4b07      	ldr	r3, [pc, #28]	; (800584c <log_output_timestamp_freq_set+0x20>)
 800582e:	2201      	movs	r2, #1
 8005830:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
 8005832:	4b07      	ldr	r3, [pc, #28]	; (8005850 <log_output_timestamp_freq_set+0x24>)
 8005834:	4298      	cmp	r0, r3
 8005836:	d905      	bls.n	8005844 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
 8005838:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
 800583a:	4a04      	ldr	r2, [pc, #16]	; (800584c <log_output_timestamp_freq_set+0x20>)
 800583c:	6813      	ldr	r3, [r2, #0]
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	e7f6      	b.n	8005832 <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
 8005844:	4b03      	ldr	r3, [pc, #12]	; (8005854 <log_output_timestamp_freq_set+0x28>)
 8005846:	6018      	str	r0, [r3, #0]
}
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	200030e0 	.word	0x200030e0
 8005850:	000f4240 	.word	0x000f4240
 8005854:	200030dc 	.word	0x200030dc

08005858 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
 8005858:	4b01      	ldr	r3, [pc, #4]	; (8005860 <log_backend_rtt_init+0x8>)
 800585a:	2201      	movs	r2, #1
 800585c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
 800585e:	4770      	bx	lr
 8005860:	20003c72 	.word	0x20003c72

08005864 <on_failed_write>:
{
 8005864:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
 8005866:	b918      	cbnz	r0, 8005870 <on_failed_write+0xc>
		host_present = false;
 8005868:	4b04      	ldr	r3, [pc, #16]	; (800587c <on_failed_write+0x18>)
 800586a:	2200      	movs	r2, #0
 800586c:	701a      	strb	r2, [r3, #0]
}
 800586e:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
 8005870:	f241 3088 	movw	r0, #5000	; 0x1388
 8005874:	f011 f8d6 	bl	8016a24 <z_impl_k_busy_wait>
 8005878:	e7f9      	b.n	800586e <on_failed_write+0xa>
 800587a:	bf00      	nop
 800587c:	20003c72 	.word	0x20003c72

08005880 <on_write>:
{
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4604      	mov	r4, r0
	host_present = true;
 8005884:	4b0a      	ldr	r3, [pc, #40]	; (80058b0 <on_write+0x30>)
 8005886:	2201      	movs	r2, #1
 8005888:	701a      	strb	r2, [r3, #0]
	return panic_mode;
 800588a:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <on_write+0x34>)
 800588c:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
 800588e:	b903      	cbnz	r3, 8005892 <on_write+0x12>
}
 8005890:	bd38      	pop	{r3, r4, r5, pc}
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
 8005892:	2000      	movs	r0, #0
 8005894:	f00f f82a 	bl	80148ec <SEGGER_RTT_HasDataUp>
 8005898:	2800      	cmp	r0, #0
 800589a:	d0f9      	beq.n	8005890 <on_write+0x10>
 800589c:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <on_write+0x30>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0f5      	beq.n	8005890 <on_write+0x10>
			on_failed_write(retry_cnt--);
 80058a4:	1e65      	subs	r5, r4, #1
 80058a6:	4620      	mov	r0, r4
 80058a8:	f7ff ffdc 	bl	8005864 <on_failed_write>
 80058ac:	462c      	mov	r4, r5
 80058ae:	e7f0      	b.n	8005892 <on_write+0x12>
 80058b0:	20003c72 	.word	0x20003c72
 80058b4:	20003c73 	.word	0x20003c73

080058b8 <data_out_block_mode>:
{
 80058b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ba:	4606      	mov	r6, r0
 80058bc:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
 80058be:	2704      	movs	r7, #4
 80058c0:	e006      	b.n	80058d0 <data_out_block_mode+0x18>
			on_write(retry_cnt);
 80058c2:	4638      	mov	r0, r7
 80058c4:	f7ff ffdc 	bl	8005880 <on_write>
	} while ((ret == 0) && host_present);
 80058c8:	b99c      	cbnz	r4, 80058f2 <data_out_block_mode+0x3a>
 80058ca:	4b0d      	ldr	r3, [pc, #52]	; (8005900 <data_out_block_mode+0x48>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	b183      	cbz	r3, 80058f2 <data_out_block_mode+0x3a>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
 80058d0:	462a      	mov	r2, r5
 80058d2:	4631      	mov	r1, r6
 80058d4:	2000      	movs	r0, #0
 80058d6:	f00e ff6f 	bl	80147b8 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
 80058da:	4604      	mov	r4, r0
 80058dc:	2800      	cmp	r0, #0
 80058de:	d1f0      	bne.n	80058c2 <data_out_block_mode+0xa>
		} else if (host_present) {
 80058e0:	4b07      	ldr	r3, [pc, #28]	; (8005900 <data_out_block_mode+0x48>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0ef      	beq.n	80058c8 <data_out_block_mode+0x10>
			retry_cnt--;
 80058e8:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
 80058ea:	4638      	mov	r0, r7
 80058ec:	f7ff ffba 	bl	8005864 <on_failed_write>
 80058f0:	e7ea      	b.n	80058c8 <data_out_block_mode+0x10>
	return ((ret == 0) && host_present) ? 0 : length;
 80058f2:	b914      	cbnz	r4, 80058fa <data_out_block_mode+0x42>
 80058f4:	4b02      	ldr	r3, [pc, #8]	; (8005900 <data_out_block_mode+0x48>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	b903      	cbnz	r3, 80058fc <data_out_block_mode+0x44>
 80058fa:	462c      	mov	r4, r5
}
 80058fc:	4620      	mov	r0, r4
 80058fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005900:	20003c72 	.word	0x20003c72

08005904 <panic>:

static void panic(struct log_backend const *const backend)
{
 8005904:	b508      	push	{r3, lr}
	panic_mode = true;
 8005906:	4b03      	ldr	r3, [pc, #12]	; (8005914 <panic+0x10>)
 8005908:	2201      	movs	r2, #1
 800590a:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
 800590c:	4802      	ldr	r0, [pc, #8]	; (8005918 <panic+0x14>)
 800590e:	f012 fa13 	bl	8017d38 <log_output_flush>
	log_backend_std_panic(&log_output_rtt);
}
 8005912:	bd08      	pop	{r3, pc}
 8005914:	20003c73 	.word	0x20003c73
 8005918:	0801daf0 	.word	0x0801daf0

0800591c <process>:
				     timestamp, metadata, data, length);
}

static void process(const struct log_backend *const backend,
		union log_msg2_generic *msg)
{
 800591c:	b508      	push	{r3, lr}
	uint32_t flags = log_backend_std_get_flags();

	flags |= IS_ENABLED(CONFIG_LOG_BACKEND_RTT_SYST_ENABLE) ? LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_output_msg2_process(&log_output_rtt, &msg->log, flags);
 800591e:	220f      	movs	r2, #15
 8005920:	4801      	ldr	r0, [pc, #4]	; (8005928 <process+0xc>)
 8005922:	f7ff ff27 	bl	8005774 <log_output_msg2_process>
}
 8005926:	bd08      	pop	{r3, pc}
 8005928:	0801daf0 	.word	0x0801daf0

0800592c <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
 800592c:	b510      	push	{r4, lr}
	for (func_ptr *func = __init_array_start;
 800592e:	4c04      	ldr	r4, [pc, #16]	; (8005940 <__do_init_array_aux+0x14>)
 8005930:	4b04      	ldr	r3, [pc, #16]	; (8005944 <__do_init_array_aux+0x18>)
 8005932:	429c      	cmp	r4, r3
 8005934:	d203      	bcs.n	800593e <__do_init_array_aux+0x12>
		func < __init_array_end;
		func++) {
		(*func)();
 8005936:	f854 3b04 	ldr.w	r3, [r4], #4
 800593a:	4798      	blx	r3
		func++) {
 800593c:	e7f8      	b.n	8005930 <__do_init_array_aux+0x4>
	}
}
 800593e:	bd10      	pop	{r4, pc}
 8005940:	0801d700 	.word	0x0801d700
 8005944:	0801d700 	.word	0x0801d700

08005948 <__do_global_ctors_aux>:
 */
void __do_global_ctors_aux(void)
{
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
 8005948:	4b06      	ldr	r3, [pc, #24]	; (8005964 <__do_global_ctors_aux+0x1c>)
 800594a:	681b      	ldr	r3, [r3, #0]

	while (nCtors >= 1U) {
 800594c:	b14b      	cbz	r3, 8005962 <__do_global_ctors_aux+0x1a>
{
 800594e:	b510      	push	{r4, lr}
		__CTOR_LIST__[nCtors--]();
 8005950:	1e5c      	subs	r4, r3, #1
 8005952:	4a04      	ldr	r2, [pc, #16]	; (8005964 <__do_global_ctors_aux+0x1c>)
 8005954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005958:	4798      	blx	r3
 800595a:	4623      	mov	r3, r4
	while (nCtors >= 1U) {
 800595c:	2c00      	cmp	r4, #0
 800595e:	d1f7      	bne.n	8005950 <__do_global_ctors_aux+0x8>
	}
}
 8005960:	bd10      	pop	{r4, pc}
 8005962:	4770      	bx	lr
 8005964:	0801d6f8 	.word	0x0801d6f8

08005968 <OSCHP_GetFrequency>:
}

__WEAK uint32_t OSCHP_GetFrequency(void)
{
  return OSCHP_FREQUENCY;
}
 8005968:	4800      	ldr	r0, [pc, #0]	; (800596c <OSCHP_GetFrequency+0x4>)
 800596a:	4770      	bx	lr
 800596c:	00b71b00 	.word	0x00b71b00

08005970 <SystemCoreClockUpdate>:
{
 8005970:	b510      	push	{r4, lr}
  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8005972:	4b1e      	ldr	r3, [pc, #120]	; (80059ec <SystemCoreClockUpdate+0x7c>)
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800597a:	d027      	beq.n	80059cc <SystemCoreClockUpdate+0x5c>
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800597c:	4b1c      	ldr	r3, [pc, #112]	; (80059f0 <SystemCoreClockUpdate+0x80>)
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f013 0f01 	tst.w	r3, #1
 8005984:	d017      	beq.n	80059b6 <SystemCoreClockUpdate+0x46>
      temp = OFI_FREQUENCY;
 8005986:	481b      	ldr	r0, [pc, #108]	; (80059f4 <SystemCoreClockUpdate+0x84>)
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8005988:	4b19      	ldr	r3, [pc, #100]	; (80059f0 <SystemCoreClockUpdate+0x80>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f013 0f04 	tst.w	r3, #4
 8005990:	d014      	beq.n	80059bc <SystemCoreClockUpdate+0x4c>
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8005992:	4a17      	ldr	r2, [pc, #92]	; (80059f0 <SystemCoreClockUpdate+0x80>)
 8005994:	6894      	ldr	r4, [r2, #8]
 8005996:	f3c4 6403 	ubfx	r4, r4, #24, #4
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 800599a:	6891      	ldr	r1, [r2, #8]
 800599c:	f3c1 2106 	ubfx	r1, r1, #8, #7
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80059a0:	6892      	ldr	r2, [r2, #8]
 80059a2:	f3c2 4206 	ubfx	r2, r2, #16, #7
 80059a6:	1c53      	adds	r3, r2, #1
      temp = (temp / (pdiv * kdiv)) * ndiv;
 80059a8:	fb04 3303 	mla	r3, r4, r3, r3
 80059ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80059b0:	fb01 3303 	mla	r3, r1, r3, r3
 80059b4:	e00b      	b.n	80059ce <SystemCoreClockUpdate+0x5e>
      temp = OSCHP_GetFrequency();
 80059b6:	f7ff ffd7 	bl	8005968 <OSCHP_GetFrequency>
 80059ba:	e7e5      	b.n	8005988 <SystemCoreClockUpdate+0x18>
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80059bc:	4b0c      	ldr	r3, [pc, #48]	; (80059f0 <SystemCoreClockUpdate+0x80>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059c4:	3301      	adds	r3, #1
      temp = (temp / kdiv);
 80059c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ca:	e000      	b.n	80059ce <SystemCoreClockUpdate+0x5e>
    temp = OFI_FREQUENCY;
 80059cc:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <SystemCoreClockUpdate+0x84>)
  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80059ce:	4a07      	ldr	r2, [pc, #28]	; (80059ec <SystemCoreClockUpdate+0x7c>)
 80059d0:	68d0      	ldr	r0, [r2, #12]
 80059d2:	b2c0      	uxtb	r0, r0
 80059d4:	3001      	adds	r0, #1
 80059d6:	fbb3 f3f0 	udiv	r3, r3, r0
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80059da:	6912      	ldr	r2, [r2, #16]
 80059dc:	f002 0201 	and.w	r2, r2, #1
 80059e0:	3201      	adds	r2, #1
 80059e2:	fbb3 f3f2 	udiv	r3, r3, r2
  SystemCoreClock = temp;
 80059e6:	4a04      	ldr	r2, [pc, #16]	; (80059f8 <SystemCoreClockUpdate+0x88>)
 80059e8:	6013      	str	r3, [r2, #0]
}
 80059ea:	bd10      	pop	{r4, pc}
 80059ec:	50004600 	.word	0x50004600
 80059f0:	50004710 	.word	0x50004710
 80059f4:	016e3600 	.word	0x016e3600
 80059f8:	2000e220 	.word	0x2000e220

080059fc <SystemCoreClockSetup>:
{
 80059fc:	b510      	push	{r4, lr}
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80059fe:	4b5f      	ldr	r3, [pc, #380]	; (8005b7c <SystemCoreClockSetup+0x180>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f013 0f01 	tst.w	r3, #1
 8005a06:	d109      	bne.n	8005a1c <SystemCoreClockSetup+0x20>
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8005a08:	4a5c      	ldr	r2, [pc, #368]	; (8005b7c <SystemCoreClockSetup+0x180>)
 8005a0a:	6853      	ldr	r3, [r2, #4]
 8005a0c:	f043 0301 	orr.w	r3, r3, #1
 8005a10:	6053      	str	r3, [r2, #4]
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8005a12:	4b5a      	ldr	r3, [pc, #360]	; (8005b7c <SystemCoreClockSetup+0x180>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f013 0f01 	tst.w	r3, #1
 8005a1a:	d0fa      	beq.n	8005a12 <SystemCoreClockSetup+0x16>
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8005a1c:	4b58      	ldr	r3, [pc, #352]	; (8005b80 <SystemCoreClockSetup+0x184>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005a24:	d17f      	bne.n	8005b26 <SystemCoreClockSetup+0x12a>
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 8005a26:	4c57      	ldr	r4, [pc, #348]	; (8005b84 <SystemCoreClockSetup+0x188>)
 8005a28:	6863      	ldr	r3, [r4, #4]
 8005a2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a2e:	6063      	str	r3, [r4, #4]
  delay(DELAY_CNT_50US_50MHZ);
 8005a30:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8005a34:	f012 f9f3 	bl	8017e1e <delay>
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8005a38:	6863      	ldr	r3, [r4, #4]
 8005a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a3e:	f023 0302 	bic.w	r3, r3, #2
 8005a42:	6063      	str	r3, [r4, #4]
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8005a44:	4b50      	ldr	r3, [pc, #320]	; (8005b88 <SystemCoreClockSetup+0x18c>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f013 0f30 	tst.w	r3, #48	; 0x30
 8005a4c:	d175      	bne.n	8005b3a <SystemCoreClockSetup+0x13e>
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8005a4e:	4a4d      	ldr	r2, [pc, #308]	; (8005b84 <SystemCoreClockSetup+0x188>)
 8005a50:	6853      	ldr	r3, [r2, #4]
 8005a52:	f043 0301 	orr.w	r3, r3, #1
 8005a56:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8005a58:	4b4a      	ldr	r3, [pc, #296]	; (8005b84 <SystemCoreClockSetup+0x188>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f013 0f01 	tst.w	r3, #1
 8005a60:	d0fa      	beq.n	8005a58 <SystemCoreClockSetup+0x5c>
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8005a62:	4b48      	ldr	r3, [pc, #288]	; (8005b84 <SystemCoreClockSetup+0x188>)
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	f042 0210 	orr.w	r2, r2, #16
 8005a6a:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8005a6c:	4a47      	ldr	r2, [pc, #284]	; (8005b8c <SystemCoreClockSetup+0x190>)
 8005a6e:	609a      	str	r2, [r3, #8]
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a76:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	f022 0210 	bic.w	r2, r2, #16
 8005a7e:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005a86:	605a      	str	r2, [r3, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8005a88:	4b3e      	ldr	r3, [pc, #248]	; (8005b84 <SystemCoreClockSetup+0x188>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f013 0f04 	tst.w	r3, #4
 8005a90:	d0fa      	beq.n	8005a88 <SystemCoreClockSetup+0x8c>
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8005a92:	4a3c      	ldr	r2, [pc, #240]	; (8005b84 <SystemCoreClockSetup+0x188>)
 8005a94:	6853      	ldr	r3, [r2, #4]
 8005a96:	f023 0301 	bic.w	r3, r3, #1
 8005a9a:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8005a9c:	4b39      	ldr	r3, [pc, #228]	; (8005b84 <SystemCoreClockSetup+0x188>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f013 0f01 	tst.w	r3, #1
 8005aa4:	d1fa      	bne.n	8005a9c <SystemCoreClockSetup+0xa0>
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 8005aa6:	4b3a      	ldr	r3, [pc, #232]	; (8005b90 <SystemCoreClockSetup+0x194>)
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005aae:	60da      	str	r2, [r3, #12]
  SCU_CLK->PBCLKCR = PBCLKDIV;
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 8005ab4:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 8005ab6:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8005ab8:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8005aba:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8005abc:	2203      	movs	r2, #3
 8005abe:	619a      	str	r2, [r3, #24]
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8005ac0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aca:	605a      	str	r2, [r3, #4]
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8005acc:	4a31      	ldr	r2, [pc, #196]	; (8005b94 <SystemCoreClockSetup+0x198>)
 8005ace:	609a      	str	r2, [r3, #8]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8005ad0:	4b2c      	ldr	r3, [pc, #176]	; (8005b84 <SystemCoreClockSetup+0x188>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f013 0f20 	tst.w	r3, #32
 8005ad8:	d0fa      	beq.n	8005ad0 <SystemCoreClockSetup+0xd4>
  delay(DELAY_CNT_50US_60MHZ);
 8005ada:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005ade:	f012 f99e 	bl	8017e1e <delay>
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8005ae2:	4b28      	ldr	r3, [pc, #160]	; (8005b84 <SystemCoreClockSetup+0x188>)
 8005ae4:	4a2c      	ldr	r2, [pc, #176]	; (8005b98 <SystemCoreClockSetup+0x19c>)
 8005ae6:	609a      	str	r2, [r3, #8]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8005ae8:	4b26      	ldr	r3, [pc, #152]	; (8005b84 <SystemCoreClockSetup+0x188>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f013 0f20 	tst.w	r3, #32
 8005af0:	d0fa      	beq.n	8005ae8 <SystemCoreClockSetup+0xec>
  delay(DELAY_CNT_50US_90MHZ);
 8005af2:	f241 1094 	movw	r0, #4500	; 0x1194
 8005af6:	f012 f992 	bl	8017e1e <delay>
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8005afa:	4b22      	ldr	r3, [pc, #136]	; (8005b84 <SystemCoreClockSetup+0x188>)
 8005afc:	4a27      	ldr	r2, [pc, #156]	; (8005b9c <SystemCoreClockSetup+0x1a0>)
 8005afe:	609a      	str	r2, [r3, #8]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8005b00:	4b20      	ldr	r3, [pc, #128]	; (8005b84 <SystemCoreClockSetup+0x188>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f013 0f20 	tst.w	r3, #32
 8005b08:	d0fa      	beq.n	8005b00 <SystemCoreClockSetup+0x104>
  delay(DELAY_CNT_50US_120MHZ);
 8005b0a:	f241 7070 	movw	r0, #6000	; 0x1770
 8005b0e:	f012 f986 	bl	8017e1e <delay>
  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8005b12:	4b23      	ldr	r3, [pc, #140]	; (8005ba0 <SystemCoreClockSetup+0x1a4>)
 8005b14:	2205      	movs	r2, #5
 8005b16:	60da      	str	r2, [r3, #12]
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8005b18:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	605a      	str	r2, [r3, #4]
  SystemCoreClockUpdate();
 8005b20:	f7ff ff26 	bl	8005970 <SystemCoreClockUpdate>
}
 8005b24:	bd10      	pop	{r4, pc}
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8005b26:	4a16      	ldr	r2, [pc, #88]	; (8005b80 <SystemCoreClockSetup+0x184>)
 8005b28:	6893      	ldr	r3, [r2, #8]
 8005b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b2e:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 8005b30:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8005b34:	f012 f973 	bl	8017e1e <delay>
 8005b38:	e775      	b.n	8005a26 <SystemCoreClockSetup+0x2a>
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8005b3a:	3c10      	subs	r4, #16
 8005b3c:	6863      	ldr	r3, [r4, #4]
 8005b3e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005b42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005b46:	6063      	str	r3, [r4, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8005b48:	f7ff ff0e 	bl	8005968 <OSCHP_GetFrequency>
 8005b4c:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <SystemCoreClockSetup+0x1a8>)
 8005b4e:	fba3 2300 	umull	r2, r3, r3, r0
 8005b52:	0d1b      	lsrs	r3, r3, #20
 8005b54:	3b01      	subs	r3, #1
 8005b56:	6862      	ldr	r2, [r4, #4]
 8005b58:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8005b5c:	6063      	str	r3, [r4, #4]
    SCU_PLL->PLLCON2 = 0;
 8005b5e:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <SystemCoreClockSetup+0x188>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	60da      	str	r2, [r3, #12]
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005b6a:	605a      	str	r2, [r3, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8005b6c:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <SystemCoreClockSetup+0x188>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8005b74:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8005b78:	d1f8      	bne.n	8005b6c <SystemCoreClockSetup+0x170>
 8005b7a:	e768      	b.n	8005a4e <SystemCoreClockSetup+0x52>
 8005b7c:	50004200 	.word	0x50004200
 8005b80:	50004400 	.word	0x50004400
 8005b84:	50004710 	.word	0x50004710
 8005b88:	50004700 	.word	0x50004700
 8005b8c:	01134f00 	.word	0x01134f00
 8005b90:	50004600 	.word	0x50004600
 8005b94:	01074f00 	.word	0x01074f00
 8005b98:	01044f00 	.word	0x01044f00
 8005b9c:	01034f00 	.word	0x01034f00
 8005ba0:	50004160 	.word	0x50004160
 8005ba4:	6b5fca6b 	.word	0x6b5fca6b

08005ba8 <XMC_USIC_CH_SetBaudrate>:

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8005ba8:	2963      	cmp	r1, #99	; 0x63
 8005baa:	d93f      	bls.n	8005c2c <XMC_USIC_CH_SetBaudrate+0x84>
{
 8005bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb0:	4606      	mov	r6, r0
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	4615      	mov	r5, r2
  if ((rate >= 100U) && (oversampling != 0U))
 8005bb6:	b912      	cbnz	r2, 8005bbe <XMC_USIC_CH_SetBaudrate+0x16>

    status = XMC_USIC_CH_STATUS_OK;
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8005bb8:	2001      	movs	r0, #1
  }

  return status;
}
 8005bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8005bbe:	f000 f913 	bl	8005de8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8005bc2:	4b1b      	ldr	r3, [pc, #108]	; (8005c30 <XMC_USIC_CH_SetBaudrate+0x88>)
 8005bc4:	fba3 2700 	umull	r2, r7, r3, r0
 8005bc8:	097f      	lsrs	r7, r7, #5
    rate = rate / 100U;
 8005bca:	fba3 3004 	umull	r3, r0, r3, r4
 8005bce:	0940      	lsrs	r0, r0, #5
    pdiv_frac_min = 0x3ffU;
 8005bd0:	f240 3cff 	movw	ip, #1023	; 0x3ff
    pdiv_int_min = 1U;
 8005bd4:	f04f 0e01 	mov.w	lr, #1
    clock_divider_min = 1024U;
 8005bd8:	f44f 6880 	mov.w	r8, #1024	; 0x400
    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8005bdc:	4641      	mov	r1, r8
 8005bde:	e000      	b.n	8005be2 <XMC_USIC_CH_SetBaudrate+0x3a>
 8005be0:	3901      	subs	r1, #1
 8005be2:	b189      	cbz	r1, 8005c08 <XMC_USIC_CH_SetBaudrate+0x60>
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8005be4:	fb07 f301 	mul.w	r3, r7, r1
 8005be8:	fb00 f205 	mul.w	r2, r0, r5
 8005bec:	fbb3 f3f2 	udiv	r3, r3, r2
      pdiv_int = pdiv >> 10U;
 8005bf0:	0a9c      	lsrs	r4, r3, #10
      pdiv_frac = pdiv & 0x3ffU;
 8005bf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 8005bf6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8005bfa:	d8f1      	bhi.n	8005be0 <XMC_USIC_CH_SetBaudrate+0x38>
 8005bfc:	459c      	cmp	ip, r3
 8005bfe:	d9ef      	bls.n	8005be0 <XMC_USIC_CH_SetBaudrate+0x38>
        pdiv_frac_min = pdiv_frac;
 8005c00:	469c      	mov	ip, r3
        pdiv_int_min = pdiv_int;
 8005c02:	46a6      	mov	lr, r4
        clock_divider_min = clock_divider;
 8005c04:	4688      	mov	r8, r1
 8005c06:	e7eb      	b.n	8005be0 <XMC_USIC_CH_SetBaudrate+0x38>
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 8005c08:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8005c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c10:	6133      	str	r3, [r6, #16]
    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8005c12:	6972      	ldr	r2, [r6, #20]
 8005c14:	4b07      	ldr	r3, [pc, #28]	; (8005c34 <XMC_USIC_CH_SetBaudrate+0x8c>)
 8005c16:	4013      	ands	r3, r2
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8005c18:	3d01      	subs	r5, #1
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8005c1a:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8005c1e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8005c22:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8005c26:	6173      	str	r3, [r6, #20]
    status = XMC_USIC_CH_STATUS_OK;
 8005c28:	2000      	movs	r0, #0
 8005c2a:	e7c6      	b.n	8005bba <XMC_USIC_CH_SetBaudrate+0x12>
    status = XMC_USIC_CH_STATUS_ERROR;
 8005c2c:	2001      	movs	r0, #1
}
 8005c2e:	4770      	bx	lr
 8005c30:	51eb851f 	.word	0x51eb851f
 8005c34:	fc0080ef 	.word	0xfc0080ef

08005c38 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 8005c38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3c:	4607      	mov	r7, r0
 8005c3e:	4688      	mov	r8, r1
 8005c40:	4616      	mov	r6, r2
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8005c42:	f000 f8d1 	bl	8005de8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
  int32_t brg_clock = rate * oversampling;
 8005c46:	fb06 f208 	mul.w	r2, r6, r8
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 8005c4a:	4290      	cmp	r0, r2
 8005c4c:	dd39      	ble.n	8005cc2 <XMC_USIC_CH_SetBaudrateEx+0x8a>
 8005c4e:	4601      	mov	r1, r0
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8005c50:	fb90 f4f2 	sdiv	r4, r0, r2
  uint32_t pdiv = 1;
 8005c54:	2501      	movs	r5, #1
    while (divider_step >= 1023)
 8005c56:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8005c5a:	429c      	cmp	r4, r3
 8005c5c:	d905      	bls.n	8005c6a <XMC_USIC_CH_SetBaudrateEx+0x32>
    {
      pdiv++;
 8005c5e:	3501      	adds	r5, #1
      brg_clock = rate * oversampling * pdiv;
 8005c60:	fb05 f402 	mul.w	r4, r5, r2
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8005c64:	fb91 f4f4 	sdiv	r4, r1, r4
 8005c68:	e7f5      	b.n	8005c56 <XMC_USIC_CH_SetBaudrateEx+0x1e>
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 8005c6a:	fb04 fa06 	mul.w	sl, r4, r6
 8005c6e:	fb05 fa0a 	mul.w	sl, r5, sl
 8005c72:	fbb0 fafa 	udiv	sl, r0, sl
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 8005c76:	f104 0901 	add.w	r9, r4, #1
 8005c7a:	fb04 6306 	mla	r3, r4, r6, r6
 8005c7e:	fb05 f303 	mul.w	r3, r5, r3
 8005c82:	fbb0 f0f3 	udiv	r0, r0, r3

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8005c86:	eba8 0000 	sub.w	r0, r8, r0
 8005c8a:	f016 fdb7 	bl	801c7fc <abs>
 8005c8e:	4683      	mov	fp, r0
 8005c90:	eba8 000a 	sub.w	r0, r8, sl
 8005c94:	f016 fdb2 	bl	801c7fc <abs>
 8005c98:	4583      	cmp	fp, r0
 8005c9a:	db00      	blt.n	8005c9e <XMC_USIC_CH_SetBaudrateEx+0x66>
 8005c9c:	46a1      	mov	r9, r4
    {
      divider_step += 1;
    }

    divider_step = 1024 - divider_step;
 8005c9e:	f5c9 6980 	rsb	r9, r9, #1024	; 0x400


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8005ca2:	f449 4380 	orr.w	r3, r9, #16384	; 0x4000
 8005ca6:	613b      	str	r3, [r7, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4b07      	ldr	r3, [pc, #28]	; (8005cc8 <XMC_USIC_CH_SetBaudrateEx+0x90>)
 8005cac:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8005cae:	3e01      	subs	r6, #1
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8005cb0:	ea43 2686 	orr.w	r6, r3, r6, lsl #10
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 8005cb4:	1e6b      	subs	r3, r5, #1
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8005cb6:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8005cba:	617b      	str	r3, [r7, #20]

    status = XMC_USIC_CH_STATUS_OK;
 8005cbc:	2000      	movs	r0, #0
  {
    status = XMC_USIC_CH_STATUS_ERROR;
  }

  return status;
}
 8005cbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    status = XMC_USIC_CH_STATUS_ERROR;
 8005cc2:	2001      	movs	r0, #1
 8005cc4:	e7fb      	b.n	8005cbe <XMC_USIC_CH_SetBaudrateEx+0x86>
 8005cc6:	bf00      	nop
 8005cc8:	fc0080ef 	.word	0xfc0080ef

08005ccc <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                              (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8005ccc:	b508      	push	{r3, lr}
  if (usic == USIC0)
 8005cce:	4b13      	ldr	r3, [pc, #76]	; (8005d1c <XMC_USIC_Enable+0x50>)
 8005cd0:	4298      	cmp	r0, r3
 8005cd2:	d006      	beq.n	8005ce2 <XMC_USIC_Enable+0x16>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 8005cd4:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <XMC_USIC_Enable+0x54>)
 8005cd6:	4298      	cmp	r0, r3
 8005cd8:	d00e      	beq.n	8005cf8 <XMC_USIC_Enable+0x2c>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
#endif
  }
#endif
#if defined(USIC2)
  else if (usic == USIC2)
 8005cda:	4b12      	ldr	r3, [pc, #72]	; (8005d24 <XMC_USIC_Enable+0x58>)
 8005cdc:	4298      	cmp	r0, r3
 8005cde:	d014      	beq.n	8005d0a <XMC_USIC_Enable+0x3e>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8005ce0:	bd08      	pop	{r3, pc}
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8005ce2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005ce6:	f000 f863 	bl	8005db0 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8005cea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005cee:	f000 f86b 	bl	8005dc8 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	d1f9      	bne.n	8005cea <XMC_USIC_Enable+0x1e>
 8005cf6:	e7f3      	b.n	8005ce0 <XMC_USIC_Enable+0x14>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8005cf8:	480b      	ldr	r0, [pc, #44]	; (8005d28 <XMC_USIC_Enable+0x5c>)
 8005cfa:	f000 f859 	bl	8005db0 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8005cfe:	480a      	ldr	r0, [pc, #40]	; (8005d28 <XMC_USIC_Enable+0x5c>)
 8005d00:	f000 f862 	bl	8005dc8 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d1fa      	bne.n	8005cfe <XMC_USIC_Enable+0x32>
 8005d08:	e7ea      	b.n	8005ce0 <XMC_USIC_Enable+0x14>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8005d0a:	4808      	ldr	r0, [pc, #32]	; (8005d2c <XMC_USIC_Enable+0x60>)
 8005d0c:	f000 f850 	bl	8005db0 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 8005d10:	4806      	ldr	r0, [pc, #24]	; (8005d2c <XMC_USIC_Enable+0x60>)
 8005d12:	f000 f859 	bl	8005dc8 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d1fa      	bne.n	8005d10 <XMC_USIC_Enable+0x44>
 8005d1a:	e7e1      	b.n	8005ce0 <XMC_USIC_Enable+0x14>
 8005d1c:	40030008 	.word	0x40030008
 8005d20:	48020008 	.word	0x48020008
 8005d24:	48024008 	.word	0x48024008
 8005d28:	10000080 	.word	0x10000080
 8005d2c:	10000100 	.word	0x10000100

08005d30 <XMC_USIC_CH_Enable>:
{
 8005d30:	b510      	push	{r4, lr}
 8005d32:	4604      	mov	r4, r0
  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8005d34:	4b15      	ldr	r3, [pc, #84]	; (8005d8c <XMC_USIC_CH_Enable+0x5c>)
 8005d36:	4298      	cmp	r0, r3
 8005d38:	d015      	beq.n	8005d66 <XMC_USIC_CH_Enable+0x36>
 8005d3a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005d3e:	4298      	cmp	r0, r3
 8005d40:	d011      	beq.n	8005d66 <XMC_USIC_CH_Enable+0x36>
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8005d42:	4b13      	ldr	r3, [pc, #76]	; (8005d90 <XMC_USIC_CH_Enable+0x60>)
 8005d44:	4298      	cmp	r0, r3
 8005d46:	d01c      	beq.n	8005d82 <XMC_USIC_CH_Enable+0x52>
 8005d48:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005d4c:	4298      	cmp	r0, r3
 8005d4e:	d018      	beq.n	8005d82 <XMC_USIC_CH_Enable+0x52>
  else if ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8005d50:	4b10      	ldr	r3, [pc, #64]	; (8005d94 <XMC_USIC_CH_Enable+0x64>)
 8005d52:	4298      	cmp	r0, r3
 8005d54:	d003      	beq.n	8005d5e <XMC_USIC_CH_Enable+0x2e>
 8005d56:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005d5a:	4298      	cmp	r0, r3
 8005d5c:	d106      	bne.n	8005d6c <XMC_USIC_CH_Enable+0x3c>
    XMC_USIC_Enable(XMC_USIC2);
 8005d5e:	480e      	ldr	r0, [pc, #56]	; (8005d98 <XMC_USIC_CH_Enable+0x68>)
 8005d60:	f7ff ffb4 	bl	8005ccc <XMC_USIC_Enable>
 8005d64:	e002      	b.n	8005d6c <XMC_USIC_CH_Enable+0x3c>
    XMC_USIC_Enable(XMC_USIC0);
 8005d66:	480d      	ldr	r0, [pc, #52]	; (8005d9c <XMC_USIC_CH_Enable+0x6c>)
 8005d68:	f7ff ffb0 	bl	8005ccc <XMC_USIC_Enable>
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	60e3      	str	r3, [r4, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8005d70:	68e3      	ldr	r3, [r4, #12]
 8005d72:	f013 0f01 	tst.w	r3, #1
 8005d76:	d0fb      	beq.n	8005d70 <XMC_USIC_CH_Enable+0x40>
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8005d78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d7a:	f023 030f 	bic.w	r3, r3, #15
 8005d7e:	6423      	str	r3, [r4, #64]	; 0x40
}
 8005d80:	bd10      	pop	{r4, pc}
    XMC_USIC_Enable(XMC_USIC1);
 8005d82:	4807      	ldr	r0, [pc, #28]	; (8005da0 <XMC_USIC_CH_Enable+0x70>)
 8005d84:	f7ff ffa2 	bl	8005ccc <XMC_USIC_Enable>
 8005d88:	e7f0      	b.n	8005d6c <XMC_USIC_CH_Enable+0x3c>
 8005d8a:	bf00      	nop
 8005d8c:	40030000 	.word	0x40030000
 8005d90:	48020000 	.word	0x48020000
 8005d94:	48024000 	.word	0x48024000
 8005d98:	48024008 	.word	0x48024008
 8005d9c:	40030008 	.word	0x40030008
 8005da0:	48020008 	.word	0x48020008

08005da4 <XMC_SCU_INTERRUPT_ClearEventStatus>:
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8005da4:	4b01      	ldr	r3, [pc, #4]	; (8005dac <XMC_SCU_INTERRUPT_ClearEventStatus+0x8>)
 8005da6:	60d8      	str	r0, [r3, #12]
}
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	50004074 	.word	0x50004074

08005db0 <XMC_SCU_RESET_DeassertPeripheralReset>:
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8005db0:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8005db2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8005db6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4a01      	ldr	r2, [pc, #4]	; (8005dc4 <XMC_SCU_RESET_DeassertPeripheralReset+0x14>)
 8005dbe:	5098      	str	r0, [r3, r2]
}
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	50004414 	.word	0x50004414

08005dc8 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8005dc8:	0f03      	lsrs	r3, r0, #28
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8005dca:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8005dce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4a03      	ldr	r2, [pc, #12]	; (8005de4 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x1c>)
 8005dd6:	589b      	ldr	r3, [r3, r2]
 8005dd8:	4203      	tst	r3, r0
}
 8005dda:	bf14      	ite	ne
 8005ddc:	2001      	movne	r0, #1
 8005dde:	2000      	moveq	r0, #0
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	5000440c 	.word	0x5000440c

08005de8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
  return SystemCoreClock;
 8005de8:	4b03      	ldr	r3, [pc, #12]	; (8005df8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x10>)
 8005dea:	6818      	ldr	r0, [r3, #0]
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 8005dec:	4b03      	ldr	r3, [pc, #12]	; (8005dfc <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x14>)
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	f003 0301 	and.w	r3, r3, #1
}
 8005df4:	40d8      	lsrs	r0, r3
 8005df6:	4770      	bx	lr
 8005df8:	2000e220 	.word	0x2000e220
 8005dfc:	50004600 	.word	0x50004600

08005e00 <XMC_SCU_CLOCK_EnableClock>:
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8005e00:	4b01      	ldr	r3, [pc, #4]	; (8005e08 <XMC_SCU_CLOCK_EnableClock+0x8>)
 8005e02:	6058      	str	r0, [r3, #4]
}
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	50004600 	.word	0x50004600

08005e0c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8005e0c:	b4f0      	push	{r4, r5, r6, r7}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8005e0e:	088b      	lsrs	r3, r1, #2
 8005e10:	1d1f      	adds	r7, r3, #4
 8005e12:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
 8005e16:	f001 0403 	and.w	r4, r1, #3
 8005e1a:	00e4      	lsls	r4, r4, #3
 8005e1c:	26f8      	movs	r6, #248	; 0xf8
 8005e1e:	40a6      	lsls	r6, r4
 8005e20:	ea25 0506 	bic.w	r5, r5, r6
 8005e24:	f840 5027 	str.w	r5, [r0, r7, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8005e28:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8005e2a:	004f      	lsls	r7, r1, #1
 8005e2c:	2603      	movs	r6, #3
 8005e2e:	40be      	lsls	r6, r7
 8005e30:	ea25 0506 	bic.w	r5, r5, r6
 8005e34:	6745      	str	r5, [r0, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8005e36:	4d1b      	ldr	r5, [pc, #108]	; (8005ea4 <XMC_GPIO_Init+0x98>)
 8005e38:	42a8      	cmp	r0, r5
 8005e3a:	d020      	beq.n	8005e7e <XMC_GPIO_Init+0x72>
 8005e3c:	f505 7580 	add.w	r5, r5, #256	; 0x100
 8005e40:	42a8      	cmp	r0, r5
 8005e42:	d01c      	beq.n	8005e7e <XMC_GPIO_Init+0x72>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8005e44:	f992 5000 	ldrsb.w	r5, [r2]
 8005e48:	2d00      	cmp	r5, #0
 8005e4a:	da1f      	bge.n	8005e8c <XMC_GPIO_Init+0x80>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8005e4c:	6855      	ldr	r5, [r2, #4]
 8005e4e:	408d      	lsls	r5, r1
 8005e50:	6045      	str	r5, [r0, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8005e52:	08cd      	lsrs	r5, r1, #3
 8005e54:	3510      	adds	r5, #16
 8005e56:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8005e5a:	f001 0107 	and.w	r1, r1, #7
 8005e5e:	0089      	lsls	r1, r1, #2
 8005e60:	2707      	movs	r7, #7
 8005e62:	408f      	lsls	r7, r1
 8005e64:	ea26 0607 	bic.w	r6, r6, r7
 8005e68:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8005e6c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8005e70:	7a17      	ldrb	r7, [r2, #8]
 8005e72:	fa07 f101 	lsl.w	r1, r7, r1
 8005e76:	4331      	orrs	r1, r6
 8005e78:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8005e7c:	e006      	b.n	8005e8c <XMC_GPIO_Init+0x80>
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8005e7e:	6e05      	ldr	r5, [r0, #96]	; 0x60
 8005e80:	2601      	movs	r6, #1
 8005e82:	fa06 f101 	lsl.w	r1, r6, r1
 8005e86:	ea25 0101 	bic.w	r1, r5, r1
 8005e8a:	6601      	str	r1, [r0, #96]	; 0x60
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8005e92:	7812      	ldrb	r2, [r2, #0]
 8005e94:	fa02 f404 	lsl.w	r4, r2, r4
 8005e98:	430c      	orrs	r4, r1
 8005e9a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
 8005e9e:	bcf0      	pop	{r4, r5, r6, r7}
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	48028e00 	.word	0x48028e00

08005ea8 <XMC_ERU_Enable>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* Enable the clock and De-assert the ERU module from the reset state. */
void XMC_ERU_Enable(XMC_ERU_t *const eru)
{
 8005ea8:	b508      	push	{r3, lr}
#if defined(XMC_ERU1)
  if (eru == XMC_ERU1)
 8005eaa:	4b04      	ldr	r3, [pc, #16]	; (8005ebc <XMC_ERU_Enable+0x14>)
 8005eac:	4298      	cmp	r0, r3
 8005eae:	d000      	beq.n	8005eb2 <XMC_ERU_Enable+0xa>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
  }
#else
  XMC_UNUSED_ARG(eru);
#endif
}
 8005eb0:	bd08      	pop	{r3, pc}
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ERU1);
 8005eb2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005eb6:	f7ff ff7b 	bl	8005db0 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8005eba:	e7f9      	b.n	8005eb0 <XMC_ERU_Enable+0x8>
 8005ebc:	40044000 	.word	0x40044000

08005ec0 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8005ec0:	b510      	push	{r4, lr}
 8005ec2:	4604      	mov	r4, r0
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8005ec4:	2010      	movs	r0, #16
 8005ec6:	f7ff ff9b 	bl	8005e00 <XMC_SCU_CLOCK_EnableClock>
  if (module == CCU40)
 8005eca:	4b0e      	ldr	r3, [pc, #56]	; (8005f04 <XMC_CCU4_EnableModule+0x44>)
 8005ecc:	429c      	cmp	r4, r3
 8005ece:	d009      	beq.n	8005ee4 <XMC_CCU4_EnableModule+0x24>
  else if (module == CCU41)
 8005ed0:	4b0d      	ldr	r3, [pc, #52]	; (8005f08 <XMC_CCU4_EnableModule+0x48>)
 8005ed2:	429c      	cmp	r4, r3
 8005ed4:	d00a      	beq.n	8005eec <XMC_CCU4_EnableModule+0x2c>
  else if (module == CCU42)
 8005ed6:	4b0d      	ldr	r3, [pc, #52]	; (8005f0c <XMC_CCU4_EnableModule+0x4c>)
 8005ed8:	429c      	cmp	r4, r3
 8005eda:	d00b      	beq.n	8005ef4 <XMC_CCU4_EnableModule+0x34>
  else if (module == CCU43)
 8005edc:	4b0c      	ldr	r3, [pc, #48]	; (8005f10 <XMC_CCU4_EnableModule+0x50>)
 8005ede:	429c      	cmp	r4, r3
 8005ee0:	d00c      	beq.n	8005efc <XMC_CCU4_EnableModule+0x3c>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
#endif
}
 8005ee2:	bd10      	pop	{r4, pc}
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8005ee4:	2004      	movs	r0, #4
 8005ee6:	f7ff ff63 	bl	8005db0 <XMC_SCU_RESET_DeassertPeripheralReset>
 8005eea:	e7fa      	b.n	8005ee2 <XMC_CCU4_EnableModule+0x22>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8005eec:	2008      	movs	r0, #8
 8005eee:	f7ff ff5f 	bl	8005db0 <XMC_SCU_RESET_DeassertPeripheralReset>
 8005ef2:	e7f6      	b.n	8005ee2 <XMC_CCU4_EnableModule+0x22>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8005ef4:	2010      	movs	r0, #16
 8005ef6:	f7ff ff5b 	bl	8005db0 <XMC_SCU_RESET_DeassertPeripheralReset>
 8005efa:	e7f2      	b.n	8005ee2 <XMC_CCU4_EnableModule+0x22>
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8005efc:	4805      	ldr	r0, [pc, #20]	; (8005f14 <XMC_CCU4_EnableModule+0x54>)
 8005efe:	f7ff ff57 	bl	8005db0 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 8005f02:	e7ee      	b.n	8005ee2 <XMC_CCU4_EnableModule+0x22>
 8005f04:	4000c000 	.word	0x4000c000
 8005f08:	40010000 	.word	0x40010000
 8005f0c:	40014000 	.word	0x40014000
 8005f10:	48004000 	.word	0x48004000
 8005f14:	10000001 	.word	0x10000001

08005f18 <XMC_ETH_MAC_InitTxDescriptors>:
  eth_mac->rx_index = 0U;
}

/* Initialize TX descriptors */
void XMC_ETH_MAC_InitTxDescriptors(XMC_ETH_MAC_t *const eth_mac)
{
 8005f18:	b410      	push	{r4}
  uint32_t next;

  XMC_ASSERT("XMC_ETH_MAC_InitTxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  /* Chained structure (ETH_MAC_DMA_TDES0_TCH), second address in the descriptor (buffer2) is the next descriptor address */
  for (i = 0U; i < eth_mac->num_tx_buf; ++i)
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	e00a      	b.n	8005f34 <XMC_ETH_MAC_InitTxDescriptors+0x1c>
    {
      eth_mac->tx_desc[i].buffer1 = (uint32_t) & (eth_mac->tx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
    }
    else
    {
      eth_mac->tx_desc[i].buffer1 = 0;
 8005f1e:	6942      	ldr	r2, [r0, #20]
 8005f20:	440a      	add	r2, r1
 8005f22:	2400      	movs	r4, #0
 8005f24:	6094      	str	r4, [r2, #8]
 8005f26:	e017      	b.n	8005f58 <XMC_ETH_MAC_InitTxDescriptors+0x40>
    }

    next = i + 1U;
    if (next == eth_mac->num_tx_buf)
    {
      next = 0U;
 8005f28:	2400      	movs	r4, #0
    }
    eth_mac->tx_desc[i].buffer2 = (uint32_t) & (eth_mac->tx_desc[next]);
 8005f2a:	6942      	ldr	r2, [r0, #20]
 8005f2c:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8005f30:	440a      	add	r2, r1
 8005f32:	60d4      	str	r4, [r2, #12]
  for (i = 0U; i < eth_mac->num_tx_buf; ++i)
 8005f34:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d914      	bls.n	8005f66 <XMC_ETH_MAC_InitTxDescriptors+0x4e>
    eth_mac->tx_desc[i].status = ETH_MAC_DMA_TDES0_TCH | ETH_MAC_DMA_TDES0_LS | ETH_MAC_DMA_TDES0_FS | ETH_MAC_DMA_TDES0_IC;
 8005f3c:	6942      	ldr	r2, [r0, #20]
 8005f3e:	0159      	lsls	r1, r3, #5
 8005f40:	4c0e      	ldr	r4, [pc, #56]	; (8005f7c <XMC_ETH_MAC_InitTxDescriptors+0x64>)
 8005f42:	5054      	str	r4, [r2, r1]
    if (eth_mac->tx_buf != NULL)
 8005f44:	69c2      	ldr	r2, [r0, #28]
 8005f46:	2a00      	cmp	r2, #0
 8005f48:	d0e9      	beq.n	8005f1e <XMC_ETH_MAC_InitTxDescriptors+0x6>
      eth_mac->tx_desc[i].buffer1 = (uint32_t) & (eth_mac->tx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 8005f4a:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8005f4e:	fb04 2403 	mla	r4, r4, r3, r2
 8005f52:	6942      	ldr	r2, [r0, #20]
 8005f54:	440a      	add	r2, r1
 8005f56:	6094      	str	r4, [r2, #8]
    next = i + 1U;
 8005f58:	3301      	adds	r3, #1
    if (next == eth_mac->num_tx_buf)
 8005f5a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d0e2      	beq.n	8005f28 <XMC_ETH_MAC_InitTxDescriptors+0x10>
    next = i + 1U;
 8005f62:	461c      	mov	r4, r3
 8005f64:	e7e1      	b.n	8005f2a <XMC_ETH_MAC_InitTxDescriptors+0x12>
  }
  eth_mac->regs->TRANSMIT_DESCRIPTOR_LIST_ADDRESS = (uint32_t) & (eth_mac->tx_desc[0]);
 8005f66:	6941      	ldr	r1, [r0, #20]
 8005f68:	6802      	ldr	r2, [r0, #0]
 8005f6a:	f241 0310 	movw	r3, #4112	; 0x1010
 8005f6e:	50d1      	str	r1, [r2, r3]
  eth_mac->tx_index = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
}
 8005f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	70100000 	.word	0x70100000

08005f80 <XMC_ETH_MAC_InitEx>:
{
 8005f80:	b510      	push	{r4, lr}
 8005f82:	4604      	mov	r4, r0
  eth_mac->regs->BUS_MODE |= (uint32_t)ETH_BUS_MODE_SWR_Msk;
 8005f84:	6803      	ldr	r3, [r0, #0]
 8005f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	f042 0201 	orr.w	r2, r2, #1
 8005f90:	601a      	str	r2, [r3, #0]
  while ((eth_mac->regs->BUS_MODE & (uint32_t)ETH_BUS_MODE_SWR_Msk) != 0U)
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8005f98:	6812      	ldr	r2, [r2, #0]
 8005f9a:	f012 0f01 	tst.w	r2, #1
 8005f9e:	d1f8      	bne.n	8005f92 <XMC_ETH_MAC_InitEx+0x12>
  eth_mac->regs->MAC_CONFIGURATION = (uint32_t)ETH_MAC_CONFIGURATION_IPC_Msk;
 8005fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fa4:	601a      	str	r2, [r3, #0]
  eth_mac->regs->FLOW_CONTROL = ETH_FLOW_CONTROL_DZPQ_Msk; /* Disable Zero Quanta Pause */
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	2280      	movs	r2, #128	; 0x80
 8005faa:	619a      	str	r2, [r3, #24]
  eth_mac->regs->OPERATION_MODE = (uint32_t)ETH_OPERATION_MODE_RSF_Msk |
 8005fac:	6822      	ldr	r2, [r4, #0]
 8005fae:	f241 0318 	movw	r3, #4120	; 0x1018
 8005fb2:	4913      	ldr	r1, [pc, #76]	; (8006000 <XMC_ETH_MAC_InitEx+0x80>)
 8005fb4:	50d1      	str	r1, [r2, r3]
  eth_mac->regs->BUS_MODE = (uint32_t)ETH_BUS_MODE_ATDS_Msk |
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fbc:	4a11      	ldr	r2, [pc, #68]	; (8006004 <XMC_ETH_MAC_InitEx+0x84>)
 8005fbe:	601a      	str	r2, [r3, #0]
  XMC_ETH_MAC_InitRxDescriptors(eth_mac);
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f011 ffad 	bl	8017f20 <XMC_ETH_MAC_InitRxDescriptors>
  XMC_ETH_MAC_InitTxDescriptors(eth_mac);
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f7ff ffa6 	bl	8005f18 <XMC_ETH_MAC_InitTxDescriptors>
  eth_mac->regs->STATUS = 0xFFFFFFFFUL;
 8005fcc:	6822      	ldr	r2, [r4, #0]
 8005fce:	f241 0314 	movw	r3, #4116	; 0x1014
 8005fd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005fd6:	50d1      	str	r1, [r2, r3]
  eth_mac->regs->MMC_TRANSMIT_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_INTERRUPT_MSK;
 8005fd8:	6822      	ldr	r2, [r4, #0]
 8005fda:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 8005fde:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  eth_mac->regs->MMC_RECEIVE_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_INTERRUPT_MSK;
 8005fe2:	6822      	ldr	r2, [r4, #0]
 8005fe4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  eth_mac->regs->MMC_IPC_RECEIVE_INTERRUPT_MASK = ETH_MAC_DISABLE_MMC_IPC_RECEIVE_INTERRUPT_MSK;
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8005fee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  eth_mac->regs->INTERRUPT_MASK = ETH_INTERRUPT_MASK_PMTIM_Msk | ETH_INTERRUPT_MASK_TSIM_Msk;
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	f44f 7202 	mov.w	r2, #520	; 0x208
 8005ff8:	63da      	str	r2, [r3, #60]	; 0x3c
  eth_mac->frame_end = NULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	6223      	str	r3, [r4, #32]
}
 8005ffe:	bd10      	pop	{r4, pc}
 8006000:	02200004 	.word	0x02200004
 8006004:	02012080 	.word	0x02012080

08006008 <XMC_ETH_MAC_SetManagmentClockDivider>:
 8006008:	4b1b      	ldr	r3, [pc, #108]	; (8006078 <XMC_ETH_MAC_SetManagmentClockDivider+0x70>)
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	f002 0201 	and.w	r2, r2, #1
 8006010:	4b1a      	ldr	r3, [pc, #104]	; (800607c <XMC_ETH_MAC_SetManagmentClockDivider+0x74>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4093      	lsls	r3, r2
  __IO uint32_t *reg;

  eth_mac_clk = XMC_SCU_CLOCK_GetEthernetClockFrequency();
  status = XMC_ETH_MAC_STATUS_OK;

  reg = &(eth_mac->regs->GMII_ADDRESS);
 8006016:	6801      	ldr	r1, [r0, #0]
  if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_35MHZ)
 8006018:	4a19      	ldr	r2, [pc, #100]	; (8006080 <XMC_ETH_MAC_SetManagmentClockDivider+0x78>)
 800601a:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 800601e:	d303      	bcc.n	8006028 <XMC_ETH_MAC_SetManagmentClockDivider+0x20>
  {
    *reg = XMC_ETH_MAC_MDC_DIVIDER_16;
 8006020:	2308      	movs	r3, #8
 8006022:	610b      	str	r3, [r1, #16]
  status = XMC_ETH_MAC_STATUS_OK;
 8006024:	2000      	movs	r0, #0
  {
    status = XMC_ETH_MAC_STATUS_ERROR;
  }

  return status;
}
 8006026:	4770      	bx	lr
{
 8006028:	b410      	push	{r4}
 800602a:	085c      	lsrs	r4, r3, #1
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_60MHZ)
 800602c:	4b15      	ldr	r3, [pc, #84]	; (8006084 <XMC_ETH_MAC_SetManagmentClockDivider+0x7c>)
 800602e:	429c      	cmp	r4, r3
 8006030:	d805      	bhi.n	800603e <XMC_ETH_MAC_SetManagmentClockDivider+0x36>
    *reg = XMC_ETH_MAC_MDC_DIVIDER_26;
 8006032:	230c      	movs	r3, #12
 8006034:	610b      	str	r3, [r1, #16]
  status = XMC_ETH_MAC_STATUS_OK;
 8006036:	2000      	movs	r0, #0
}
 8006038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800603c:	4770      	bx	lr
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_100MHZ)
 800603e:	4b12      	ldr	r3, [pc, #72]	; (8006088 <XMC_ETH_MAC_SetManagmentClockDivider+0x80>)
 8006040:	429c      	cmp	r4, r3
 8006042:	d802      	bhi.n	800604a <XMC_ETH_MAC_SetManagmentClockDivider+0x42>
    *reg = XMC_ETH_MAC_MDC_DIVIDER_42;
 8006044:	2000      	movs	r0, #0
 8006046:	6108      	str	r0, [r1, #16]
 8006048:	e7f6      	b.n	8006038 <XMC_ETH_MAC_SetManagmentClockDivider+0x30>
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_150MHZ)
 800604a:	4b10      	ldr	r3, [pc, #64]	; (800608c <XMC_ETH_MAC_SetManagmentClockDivider+0x84>)
 800604c:	429c      	cmp	r4, r3
 800604e:	d803      	bhi.n	8006058 <XMC_ETH_MAC_SetManagmentClockDivider+0x50>
    *reg = XMC_ETH_MAC_MDC_DIVIDER_62;
 8006050:	2304      	movs	r3, #4
 8006052:	610b      	str	r3, [r1, #16]
  status = XMC_ETH_MAC_STATUS_OK;
 8006054:	2000      	movs	r0, #0
 8006056:	e7ef      	b.n	8006038 <XMC_ETH_MAC_SetManagmentClockDivider+0x30>
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_200MHZ)
 8006058:	4b0d      	ldr	r3, [pc, #52]	; (8006090 <XMC_ETH_MAC_SetManagmentClockDivider+0x88>)
 800605a:	429c      	cmp	r4, r3
 800605c:	d803      	bhi.n	8006066 <XMC_ETH_MAC_SetManagmentClockDivider+0x5e>
    *reg = XMC_ETH_MAC_MDC_DIVIDER_102;
 800605e:	2310      	movs	r3, #16
 8006060:	610b      	str	r3, [r1, #16]
  status = XMC_ETH_MAC_STATUS_OK;
 8006062:	2000      	movs	r0, #0
 8006064:	e7e8      	b.n	8006038 <XMC_ETH_MAC_SetManagmentClockDivider+0x30>
  else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_250MHZ)
 8006066:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <XMC_ETH_MAC_SetManagmentClockDivider+0x8c>)
 8006068:	429c      	cmp	r4, r3
 800606a:	d803      	bhi.n	8006074 <XMC_ETH_MAC_SetManagmentClockDivider+0x6c>
    *reg = XMC_ETH_MAC_MDC_DIVIDER_124;
 800606c:	2314      	movs	r3, #20
 800606e:	610b      	str	r3, [r1, #16]
  status = XMC_ETH_MAC_STATUS_OK;
 8006070:	2000      	movs	r0, #0
 8006072:	e7e1      	b.n	8006038 <XMC_ETH_MAC_SetManagmentClockDivider+0x30>
    status = XMC_ETH_MAC_STATUS_ERROR;
 8006074:	2002      	movs	r0, #2
 8006076:	e7df      	b.n	8006038 <XMC_ETH_MAC_SetManagmentClockDivider+0x30>
 8006078:	50004600 	.word	0x50004600
 800607c:	2000e220 	.word	0x2000e220
 8006080:	02160ec0 	.word	0x02160ec0
 8006084:	03938700 	.word	0x03938700
 8006088:	05f5e100 	.word	0x05f5e100
 800608c:	08f0d180 	.word	0x08f0d180
 8006090:	0bebc200 	.word	0x0bebc200
 8006094:	0ee6b280 	.word	0x0ee6b280

08006098 <XMC_ETH_MAC_Enable>:

/* ETH MAC enable */
void XMC_ETH_MAC_Enable(XMC_ETH_MAC_t *const eth_mac)
{
 8006098:	b508      	push	{r3, lr}
  XMC_UNUSED_ARG(eth_mac);

  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_ETH);
 800609a:	2004      	movs	r0, #4
 800609c:	f7ff feb0 	bl	8005e00 <XMC_SCU_CLOCK_EnableClock>
#if UC_DEVICE != XMC4500
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ETH0);
#endif
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ETH0);
 80060a0:	4801      	ldr	r0, [pc, #4]	; (80060a8 <XMC_ETH_MAC_Enable+0x10>)
 80060a2:	f7ff fe85 	bl	8005db0 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 80060a6:	bd08      	pop	{r3, pc}
 80060a8:	20000004 	.word	0x20000004

080060ac <XMC_ETH_MAC_InitPTP>:
void XMC_ETH_MAC_InitPTP(XMC_ETH_MAC_t *const eth_mac, uint32_t config)
{
  XMC_ASSERT("XMC_ETH_MAC_InitPTP: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  /* Mask the time stamp interrupt */
  eth_mac->regs->INTERRUPT_MASK |= (uint32_t)ETH_INTERRUPT_MASK_TSIM_Msk;
 80060ac:	6802      	ldr	r2, [r0, #0]
 80060ae:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80060b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060b4:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* Enable time stamp, rollover mode of nanosecond counter set to digital mode, i.e. after 0x3B9AC9FF */
  eth_mac->regs->TIMESTAMP_CONTROL = ETH_TIMESTAMP_CONTROL_TSENA_Msk | ETH_TIMESTAMP_CONTROL_TSCTRLSSR_Msk | config;
 80060b6:	6802      	ldr	r2, [r0, #0]
 80060b8:	f441 7300 	orr.w	r3, r1, #512	; 0x200
 80060bc:	f043 0301 	orr.w	r3, r3, #1
 80060c0:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700

  if ((config & (uint32_t)XMC_ETH_MAC_TIMESTAMP_CONFIG_FINE_UPDATE) != 0U)
 80060c4:	f011 0f02 	tst.w	r1, #2
 80060c8:	d03c      	beq.n	8006144 <XMC_ETH_MAC_InitPTP+0x98>
  {
    /* Program sub-second increment register based on PTP clock frequency ~ 50MHz */
    eth_mac->regs->SUB_SECOND_INCREMENT = 20;
 80060ca:	6803      	ldr	r3, [r0, #0]
 80060cc:	2214      	movs	r2, #20
 80060ce:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
 80060d2:	4b2a      	ldr	r3, [pc, #168]	; (800617c <XMC_ETH_MAC_InitPTP+0xd0>)
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	f002 0201 	and.w	r2, r2, #1
 80060da:	4b29      	ldr	r3, [pc, #164]	; (8006180 <XMC_ETH_MAC_InitPTP+0xd4>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4093      	lsls	r3, r2

    /* fSYS = Reference Clock for the Time Stamp Update Logic*/
    float ratio = (float)XMC_SCU_CLOCK_GetSystemClockFrequency() / (float)XMC_ETH_SUB_SECOND_UPDATE_FREQ;
 80060e0:	ee07 3a90 	vmov	s15, r3
 80060e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006184 <XMC_ETH_MAC_InitPTP+0xd8>
 80060ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    eth_mac->regs->TIMESTAMP_ADDEND = (uint32_t)(((float)0x100000000ULL / ratio) + 0.5F);
 80060f0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006188 <XMC_ETH_MAC_InitPTP+0xdc>
 80060f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80060fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006100:	6803      	ldr	r3, [r0, #0]
 8006102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006106:	ee17 2a90 	vmov	r2, s15
 800610a:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718

    /* Addend register update */
    eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSADDREG_Msk;
 800610e:	6802      	ldr	r2, [r0, #0]
 8006110:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
 8006114:	f043 0320 	orr.w	r3, r3, #32
 8006118:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700

    /* Poll the Timestamp Control register until the bit TSADDREG is cleared */
    while (eth_mac->regs->TIMESTAMP_CONTROL & ETH_TIMESTAMP_CONTROL_TSADDREG_Msk);
 800611c:	6803      	ldr	r3, [r0, #0]
 800611e:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 8006122:	f013 0f20 	tst.w	r3, #32
 8006126:	d1f9      	bne.n	800611c <XMC_ETH_MAC_InitPTP+0x70>
  {
    /* Program sub-second increment register based on PTP clock frequency = fSYS/2 */
    eth_mac->regs->SUB_SECOND_INCREMENT = (uint32_t)(((float)1000000000 / (float)XMC_SCU_CLOCK_GetSystemClockFrequency()) + 0.5F);
  }

  eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSINIT_Msk;
 8006128:	6802      	ldr	r2, [r0, #0]
 800612a:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
 800612e:	f043 0304 	orr.w	r3, r3, #4
 8006132:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
  while (eth_mac->regs->TIMESTAMP_CONTROL & ETH_TIMESTAMP_CONTROL_TSINIT_Msk);
 8006136:	6803      	ldr	r3, [r0, #0]
 8006138:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 800613c:	f013 0f04 	tst.w	r3, #4
 8006140:	d1f9      	bne.n	8006136 <XMC_ETH_MAC_InitPTP+0x8a>
}
 8006142:	4770      	bx	lr
 8006144:	4b0d      	ldr	r3, [pc, #52]	; (800617c <XMC_ETH_MAC_InitPTP+0xd0>)
 8006146:	691a      	ldr	r2, [r3, #16]
 8006148:	f002 0201 	and.w	r2, r2, #1
 800614c:	4b0c      	ldr	r3, [pc, #48]	; (8006180 <XMC_ETH_MAC_InitPTP+0xd4>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4093      	lsls	r3, r2
    eth_mac->regs->SUB_SECOND_INCREMENT = (uint32_t)(((float)1000000000 / (float)XMC_SCU_CLOCK_GetSystemClockFrequency()) + 0.5F);
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800615a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800618c <XMC_ETH_MAC_InitPTP+0xe0>
 800615e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006162:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006166:	ee77 7a87 	vadd.f32	s15, s15, s14
 800616a:	6803      	ldr	r3, [r0, #0]
 800616c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006170:	ee17 2a90 	vmov	r2, s15
 8006174:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
 8006178:	e7d6      	b.n	8006128 <XMC_ETH_MAC_InitPTP+0x7c>
 800617a:	bf00      	nop
 800617c:	50004600 	.word	0x50004600
 8006180:	2000e220 	.word	0x2000e220
 8006184:	4c3ebc20 	.word	0x4c3ebc20
 8006188:	4f800000 	.word	0x4f800000
 800618c:	4e6e6b28 	.word	0x4e6e6b28

08006190 <XMC_ETH_MAC_SetPTPTime>:
/* Set PTP time */
void XMC_ETH_MAC_SetPTPTime(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *const time)
{
  XMC_ASSERT("XMC_ETH_MAC_GetPTPTime: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));

  eth_mac->regs->SYSTEM_TIME_SECONDS_UPDATE = time->seconds;
 8006190:	6803      	ldr	r3, [r0, #0]
 8006192:	680a      	ldr	r2, [r1, #0]
 8006194:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
  eth_mac->regs->SYSTEM_TIME_NANOSECONDS_UPDATE = time->nanoseconds;
 8006198:	6803      	ldr	r3, [r0, #0]
 800619a:	684a      	ldr	r2, [r1, #4]
 800619c:	f8c3 2714 	str.w	r2, [r3, #1812]	; 0x714

  /* Initialize precision timer */
  ETH0->TIMESTAMP_CONTROL |= ETH_TIMESTAMP_CONTROL_TSINIT_Msk;
 80061a0:	4a06      	ldr	r2, [pc, #24]	; (80061bc <XMC_ETH_MAC_SetPTPTime+0x2c>)
 80061a2:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
 80061a6:	f043 0304 	orr.w	r3, r3, #4
 80061aa:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
  while (eth_mac->regs->TIMESTAMP_CONTROL & ETH_TIMESTAMP_CONTROL_TSINIT_Msk);
 80061ae:	6803      	ldr	r3, [r0, #0]
 80061b0:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 80061b4:	f013 0f04 	tst.w	r3, #4
 80061b8:	d1f9      	bne.n	80061ae <XMC_ETH_MAC_SetPTPTime+0x1e>
}
 80061ba:	4770      	bx	lr
 80061bc:	5000c000 	.word	0x5000c000

080061c0 <XMC_ETH_MAC_GetTxTimeStamp>:
  return status;
}

/* Get TX time-stamp */
XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_GetTxTimeStamp(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *const time)
{
 80061c0:	b410      	push	{r4}
  XMC_ETH_MAC_STATUS_t status;

  XMC_ASSERT("XMC_ETH_MAC_GetTxTimeStamp: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
  XMC_ASSERT("XMC_ETH_MAC_GetTxTimeStamp: time is invalid", time != NULL);

  tx_desc = &eth_mac->tx_desc[eth_mac->tx_ts_index];
 80061c2:	6942      	ldr	r2, [r0, #20]
 80061c4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80061c8:	0158      	lsls	r0, r3, #5
 80061ca:	eb02 1343 	add.w	r3, r2, r3, lsl #5
  if (tx_desc->status & ETH_MAC_DMA_TDES0_OWN)
 80061ce:	5814      	ldr	r4, [r2, r0]
 80061d0:	2c00      	cmp	r4, #0
 80061d2:	db0b      	blt.n	80061ec <XMC_ETH_MAC_GetTxTimeStamp+0x2c>
  {
    status = XMC_ETH_MAC_STATUS_BUSY;
  }
  else
  {
    if ((tx_desc->status & (ETH_MAC_DMA_TDES0_TTSS | ETH_MAC_DMA_TDES0_LS)) == (ETH_MAC_DMA_TDES0_TTSS | ETH_MAC_DMA_TDES0_LS))
 80061d4:	5810      	ldr	r0, [r2, r0]
 80061d6:	4a07      	ldr	r2, [pc, #28]	; (80061f4 <XMC_ETH_MAC_GetTxTimeStamp+0x34>)
 80061d8:	4382      	bics	r2, r0
 80061da:	d001      	beq.n	80061e0 <XMC_ETH_MAC_GetTxTimeStamp+0x20>

      status = XMC_ETH_MAC_STATUS_OK;
    }
    else
    {
      status = XMC_ETH_MAC_STATUS_ERROR;
 80061dc:	2002      	movs	r0, #2
 80061de:	e006      	b.n	80061ee <XMC_ETH_MAC_GetTxTimeStamp+0x2e>
      time->nanoseconds = (int32_t)(tx_desc->time_stamp_nanoseconds); /* accuracy of 1 ns */
 80061e0:	699a      	ldr	r2, [r3, #24]
 80061e2:	604a      	str	r2, [r1, #4]
      time->seconds = tx_desc->time_stamp_seconds;
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	600b      	str	r3, [r1, #0]
      status = XMC_ETH_MAC_STATUS_OK;
 80061e8:	2000      	movs	r0, #0
 80061ea:	e000      	b.n	80061ee <XMC_ETH_MAC_GetTxTimeStamp+0x2e>
    status = XMC_ETH_MAC_STATUS_BUSY;
 80061ec:	2001      	movs	r0, #1
    }
  }

  return status;
}
 80061ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	20020000 	.word	0x20020000

080061f8 <z_arm_cpu_idle_init>:
 *
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
	bx	lr
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop

080061fc <arch_cpu_idle>:
#define NOP128() NOP32 NOP32 NOP32 NOP32
		/*** NOP128(); ***/
#undef NOP128
#undef NOP16
#undef NOP4
	bx	lr
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop

08006200 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
 8006200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006204:	b094      	sub	sp, #80	; 0x50
 8006206:	af00      	add	r7, sp, #0
 8006208:	4606      	mov	r6, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 800620a:	466c      	mov	r4, sp
 800620c:	b088      	sub	sp, #32
 800620e:	4668      	mov	r0, sp
 8006210:	f110 030c 	adds.w	r3, r0, #12
 8006214:	f000 80a0 	beq.w	8006358 <esf_dump+0x158>
 8006218:	2214      	movs	r2, #20
 800621a:	b11b      	cbz	r3, 8006224 <esf_dump+0x24>
 800621c:	2a04      	cmp	r2, #4
 800621e:	dd01      	ble.n	8006224 <esf_dump+0x24>
 8006220:	4999      	ldr	r1, [pc, #612]	; (8006488 <esf_dump+0x288>)
 8006222:	6101      	str	r1, [r0, #16]
 8006224:	6831      	ldr	r1, [r6, #0]
 8006226:	b113      	cbz	r3, 800622e <esf_dump+0x2e>
 8006228:	2a08      	cmp	r2, #8
 800622a:	dd00      	ble.n	800622e <esf_dump+0x2e>
 800622c:	6141      	str	r1, [r0, #20]
 800622e:	6871      	ldr	r1, [r6, #4]
 8006230:	b113      	cbz	r3, 8006238 <esf_dump+0x38>
 8006232:	2a0c      	cmp	r2, #12
 8006234:	dd00      	ble.n	8006238 <esf_dump+0x38>
 8006236:	6181      	str	r1, [r0, #24]
 8006238:	68b1      	ldr	r1, [r6, #8]
 800623a:	b113      	cbz	r3, 8006242 <esf_dump+0x42>
 800623c:	2a10      	cmp	r2, #16
 800623e:	dd00      	ble.n	8006242 <esf_dump+0x42>
 8006240:	61c1      	str	r1, [r0, #28]
 8006242:	2a13      	cmp	r2, #19
 8006244:	f340 808b 	ble.w	800635e <esf_dump+0x15e>
 8006248:	2114      	movs	r1, #20
 800624a:	b143      	cbz	r3, 800625e <esf_dump+0x5e>
 800624c:	2300      	movs	r3, #0
 800624e:	f8a7 3005 	strh.w	r3, [r7, #5]
 8006252:	71fb      	strb	r3, [r7, #7]
 8006254:	2205      	movs	r2, #5
 8006256:	713a      	strb	r2, [r7, #4]
 8006258:	71bb      	strb	r3, [r7, #6]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60c3      	str	r3, [r0, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f36f 0200 	bfc	r2, #0, #1
 8006264:	f36f 0241 	bfc	r2, #1, #1
 8006268:	f36f 0282 	bfc	r2, #2, #1
 800626c:	f36f 02c5 	bfc	r2, #3, #3
 8006270:	2301      	movs	r3, #1
 8006272:	f363 1288 	bfi	r2, r3, #6, #3
 8006276:	f401 737d 	and.w	r3, r1, #1012	; 0x3f4
 800627a:	f363 2252 	bfi	r2, r3, #9, #10
 800627e:	2300      	movs	r3, #0
 8006280:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006284:	4981      	ldr	r1, [pc, #516]	; (800648c <esf_dump+0x28c>)
 8006286:	f011 fd64 	bl	8017d52 <z_log_msg2_finalize>
 800628a:	46a5      	mov	sp, r4
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 800628c:	466c      	mov	r4, sp
 800628e:	b088      	sub	sp, #32
 8006290:	4668      	mov	r0, sp
 8006292:	f110 030c 	adds.w	r3, r0, #12
 8006296:	d065      	beq.n	8006364 <esf_dump+0x164>
 8006298:	2214      	movs	r2, #20
 800629a:	b11b      	cbz	r3, 80062a4 <esf_dump+0xa4>
 800629c:	2a04      	cmp	r2, #4
 800629e:	dd01      	ble.n	80062a4 <esf_dump+0xa4>
 80062a0:	497b      	ldr	r1, [pc, #492]	; (8006490 <esf_dump+0x290>)
 80062a2:	6101      	str	r1, [r0, #16]
 80062a4:	68f1      	ldr	r1, [r6, #12]
 80062a6:	b113      	cbz	r3, 80062ae <esf_dump+0xae>
 80062a8:	2a08      	cmp	r2, #8
 80062aa:	dd00      	ble.n	80062ae <esf_dump+0xae>
 80062ac:	6141      	str	r1, [r0, #20]
 80062ae:	6931      	ldr	r1, [r6, #16]
 80062b0:	b113      	cbz	r3, 80062b8 <esf_dump+0xb8>
 80062b2:	2a0c      	cmp	r2, #12
 80062b4:	dd00      	ble.n	80062b8 <esf_dump+0xb8>
 80062b6:	6181      	str	r1, [r0, #24]
 80062b8:	6971      	ldr	r1, [r6, #20]
 80062ba:	b113      	cbz	r3, 80062c2 <esf_dump+0xc2>
 80062bc:	2a10      	cmp	r2, #16
 80062be:	dd00      	ble.n	80062c2 <esf_dump+0xc2>
 80062c0:	61c1      	str	r1, [r0, #28]
 80062c2:	2a13      	cmp	r2, #19
 80062c4:	dd51      	ble.n	800636a <esf_dump+0x16a>
 80062c6:	2114      	movs	r1, #20
 80062c8:	b143      	cbz	r3, 80062dc <esf_dump+0xdc>
 80062ca:	2300      	movs	r3, #0
 80062cc:	f8a7 3005 	strh.w	r3, [r7, #5]
 80062d0:	71fb      	strb	r3, [r7, #7]
 80062d2:	2205      	movs	r2, #5
 80062d4:	713a      	strb	r2, [r7, #4]
 80062d6:	71bb      	strb	r3, [r7, #6]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	60c3      	str	r3, [r0, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f36f 0200 	bfc	r2, #0, #1
 80062e2:	f36f 0241 	bfc	r2, #1, #1
 80062e6:	f36f 0282 	bfc	r2, #2, #1
 80062ea:	f36f 02c5 	bfc	r2, #3, #3
 80062ee:	f04f 0901 	mov.w	r9, #1
 80062f2:	f369 1288 	bfi	r2, r9, #6, #3
 80062f6:	f401 737d 	and.w	r3, r1, #1012	; 0x3f4
 80062fa:	f363 2252 	bfi	r2, r3, #9, #10
 80062fe:	f8df 818c 	ldr.w	r8, [pc, #396]	; 800648c <esf_dump+0x28c>
 8006302:	2300      	movs	r3, #0
 8006304:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006308:	4641      	mov	r1, r8
 800630a:	f011 fd22 	bl	8017d52 <z_log_msg2_finalize>
 800630e:	46a5      	mov	sp, r4
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
 8006310:	69f3      	ldr	r3, [r6, #28]
 8006312:	4a60      	ldr	r2, [pc, #384]	; (8006494 <esf_dump+0x294>)
 8006314:	61ba      	str	r2, [r7, #24]
 8006316:	61fb      	str	r3, [r7, #28]
 8006318:	2400      	movs	r4, #0
 800631a:	f8a7 4005 	strh.w	r4, [r7, #5]
 800631e:	71fc      	strb	r4, [r7, #7]
 8006320:	2303      	movs	r3, #3
 8006322:	713b      	strb	r3, [r7, #4]
 8006324:	71bc      	strb	r4, [r7, #6]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	4622      	mov	r2, r4
 800632c:	f364 0200 	bfi	r2, r4, #0, #1
 8006330:	f364 0241 	bfi	r2, r4, #1, #1
 8006334:	f364 0282 	bfi	r2, r4, #2, #1
 8006338:	f364 02c5 	bfi	r2, r4, #3, #3
 800633c:	f369 1288 	bfi	r2, r9, #6, #3
 8006340:	230c      	movs	r3, #12
 8006342:	f363 2252 	bfi	r2, r3, #9, #10
 8006346:	4623      	mov	r3, r4
 8006348:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800634c:	4641      	mov	r1, r8
 800634e:	f107 0008 	add.w	r0, r7, #8
 8006352:	f011 fcfe 	bl	8017d52 <z_log_msg2_finalize>
#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
 8006356:	e036      	b.n	80063c6 <esf_dump+0x1c6>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
 8006358:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800635c:	e75d      	b.n	800621a <esf_dump+0x1a>
 800635e:	f06f 011b 	mvn.w	r1, #27
 8006362:	e772      	b.n	800624a <esf_dump+0x4a>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
 8006364:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006368:	e797      	b.n	800629a <esf_dump+0x9a>
 800636a:	f06f 011b 	mvn.w	r1, #27
 800636e:	e7ab      	b.n	80062c8 <esf_dump+0xc8>
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
 8006370:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006374:	e035      	b.n	80063e2 <esf_dump+0x1e2>
 8006376:	2b27      	cmp	r3, #39	; 0x27
 8006378:	f340 8082 	ble.w	8006480 <esf_dump+0x280>
 800637c:	2328      	movs	r3, #40	; 0x28
 800637e:	b142      	cbz	r2, 8006392 <esf_dump+0x192>
 8006380:	2200      	movs	r2, #0
 8006382:	f8a7 2005 	strh.w	r2, [r7, #5]
 8006386:	71fa      	strb	r2, [r7, #7]
 8006388:	210a      	movs	r1, #10
 800638a:	7139      	strb	r1, [r7, #4]
 800638c:	71ba      	strb	r2, [r7, #6]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	60c2      	str	r2, [r0, #12]
 8006392:	f36f 0500 	bfc	r5, #0, #1
 8006396:	f36f 0541 	bfc	r5, #1, #1
 800639a:	f36f 0582 	bfc	r5, #2, #1
 800639e:	f36f 05c5 	bfc	r5, #3, #3
 80063a2:	2201      	movs	r2, #1
 80063a4:	f362 1588 	bfi	r5, r2, #6, #3
 80063a8:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
 80063ac:	f363 2552 	bfi	r5, r3, #9, #10
 80063b0:	f36f 45de 	bfc	r5, #19, #12
 80063b4:	f36f 75df 	bfc	r5, #31, #1
 80063b8:	2300      	movs	r3, #0
 80063ba:	462a      	mov	r2, r5
 80063bc:	4933      	ldr	r1, [pc, #204]	; (800648c <esf_dump+0x28c>)
 80063be:	f011 fcc8 	bl	8017d52 <z_log_msg2_finalize>
 80063c2:	46c5      	mov	sp, r8
	for (int i = 0; i < ARRAY_SIZE(esf->s); i += 4) {
 80063c4:	3404      	adds	r4, #4
 80063c6:	2c0f      	cmp	r4, #15
 80063c8:	dc68      	bgt.n	800649c <esf_dump+0x29c>
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
 80063ca:	f104 0e01 	add.w	lr, r4, #1
 80063ce:	f104 0c02 	add.w	ip, r4, #2
 80063d2:	1ce1      	adds	r1, r4, #3
 80063d4:	46e8      	mov	r8, sp
 80063d6:	b08e      	sub	sp, #56	; 0x38
 80063d8:	4668      	mov	r0, sp
 80063da:	f110 020c 	adds.w	r2, r0, #12
 80063de:	d0c7      	beq.n	8006370 <esf_dump+0x170>
 80063e0:	2328      	movs	r3, #40	; 0x28
 80063e2:	b12a      	cbz	r2, 80063f0 <esf_dump+0x1f0>
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	dd03      	ble.n	80063f0 <esf_dump+0x1f0>
 80063e8:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8006498 <esf_dump+0x298>
 80063ec:	f8c0 9010 	str.w	r9, [r0, #16]
 80063f0:	b112      	cbz	r2, 80063f8 <esf_dump+0x1f8>
 80063f2:	2b08      	cmp	r3, #8
 80063f4:	dd00      	ble.n	80063f8 <esf_dump+0x1f8>
 80063f6:	6144      	str	r4, [r0, #20]
 80063f8:	f104 0908 	add.w	r9, r4, #8
 80063fc:	eb06 0989 	add.w	r9, r6, r9, lsl #2
 8006400:	edd9 7a00 	vldr	s15, [r9]
 8006404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006408:	b11a      	cbz	r2, 8006412 <esf_dump+0x212>
 800640a:	2b0c      	cmp	r3, #12
 800640c:	dd01      	ble.n	8006412 <esf_dump+0x212>
 800640e:	edc0 7a06 	vstr	s15, [r0, #24]
 8006412:	b11a      	cbz	r2, 800641c <esf_dump+0x21c>
 8006414:	2b10      	cmp	r3, #16
 8006416:	dd01      	ble.n	800641c <esf_dump+0x21c>
 8006418:	f8c0 e01c 	str.w	lr, [r0, #28]
 800641c:	f10e 0e08 	add.w	lr, lr, #8
 8006420:	eb06 0e8e 	add.w	lr, r6, lr, lsl #2
 8006424:	edde 7a00 	vldr	s15, [lr]
 8006428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800642c:	b11a      	cbz	r2, 8006436 <esf_dump+0x236>
 800642e:	2b14      	cmp	r3, #20
 8006430:	dd01      	ble.n	8006436 <esf_dump+0x236>
 8006432:	edc0 7a08 	vstr	s15, [r0, #32]
 8006436:	b11a      	cbz	r2, 8006440 <esf_dump+0x240>
 8006438:	2b18      	cmp	r3, #24
 800643a:	dd01      	ble.n	8006440 <esf_dump+0x240>
 800643c:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
 8006440:	f10c 0c08 	add.w	ip, ip, #8
 8006444:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
 8006448:	eddc 7a00 	vldr	s15, [ip]
 800644c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006450:	b11a      	cbz	r2, 800645a <esf_dump+0x25a>
 8006452:	2b1c      	cmp	r3, #28
 8006454:	dd01      	ble.n	800645a <esf_dump+0x25a>
 8006456:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
 800645a:	b112      	cbz	r2, 8006462 <esf_dump+0x262>
 800645c:	2b20      	cmp	r3, #32
 800645e:	dd00      	ble.n	8006462 <esf_dump+0x262>
 8006460:	62c1      	str	r1, [r0, #44]	; 0x2c
 8006462:	3108      	adds	r1, #8
 8006464:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8006468:	edd1 7a00 	vldr	s15, [r1]
 800646c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006470:	2a00      	cmp	r2, #0
 8006472:	d080      	beq.n	8006376 <esf_dump+0x176>
 8006474:	2b24      	cmp	r3, #36	; 0x24
 8006476:	f77f af7e 	ble.w	8006376 <esf_dump+0x176>
 800647a:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
 800647e:	e77a      	b.n	8006376 <esf_dump+0x176>
 8006480:	f06f 031b 	mvn.w	r3, #27
 8006484:	e77b      	b.n	800637e <esf_dump+0x17e>
 8006486:	bf00      	nop
 8006488:	0801db00 	.word	0x0801db00
 800648c:	0801d7e0 	.word	0x0801d7e0
 8006490:	0801db30 	.word	0x0801db30
 8006494:	0801db60 	.word	0x0801db60
 8006498:	0801db70 	.word	0x0801db70
			i, (uint32_t)esf->s[i],
			i + 1, (uint32_t)esf->s[i + 1],
			i + 2, (uint32_t)esf->s[i + 2],
			i + 3, (uint32_t)esf->s[i + 3]);
	}
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
 800649c:	6e33      	ldr	r3, [r6, #96]	; 0x60
 800649e:	4a26      	ldr	r2, [pc, #152]	; (8006538 <esf_dump+0x338>)
 80064a0:	633a      	str	r2, [r7, #48]	; 0x30
 80064a2:	637b      	str	r3, [r7, #52]	; 0x34
 80064a4:	2400      	movs	r4, #0
 80064a6:	f8a7 4005 	strh.w	r4, [r7, #5]
 80064aa:	71fc      	strb	r4, [r7, #7]
 80064ac:	f04f 0a03 	mov.w	sl, #3
 80064b0:	f887 a004 	strb.w	sl, [r7, #4]
 80064b4:	71bc      	strb	r4, [r7, #6]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ba:	4622      	mov	r2, r4
 80064bc:	f364 0200 	bfi	r2, r4, #0, #1
 80064c0:	f364 0241 	bfi	r2, r4, #1, #1
 80064c4:	f364 0282 	bfi	r2, r4, #2, #1
 80064c8:	f364 02c5 	bfi	r2, r4, #3, #3
 80064cc:	f04f 0901 	mov.w	r9, #1
 80064d0:	f369 1288 	bfi	r2, r9, #6, #3
 80064d4:	f04f 080c 	mov.w	r8, #12
 80064d8:	f368 2252 	bfi	r2, r8, #9, #10
 80064dc:	4d17      	ldr	r5, [pc, #92]	; (800653c <esf_dump+0x33c>)
 80064de:	4623      	mov	r3, r4
 80064e0:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80064e4:	4629      	mov	r1, r5
 80064e6:	f107 0020 	add.w	r0, r7, #32
 80064ea:	f011 fc32 	bl	8017d52 <z_log_msg2_finalize>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
 80064ee:	69b3      	ldr	r3, [r6, #24]
 80064f0:	4a13      	ldr	r2, [pc, #76]	; (8006540 <esf_dump+0x340>)
 80064f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80064f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064f6:	f8a7 4005 	strh.w	r4, [r7, #5]
 80064fa:	71fc      	strb	r4, [r7, #7]
 80064fc:	f887 a004 	strb.w	sl, [r7, #4]
 8006500:	71bc      	strb	r4, [r7, #6]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	647b      	str	r3, [r7, #68]	; 0x44
 8006506:	4622      	mov	r2, r4
 8006508:	f364 0200 	bfi	r2, r4, #0, #1
 800650c:	f364 0241 	bfi	r2, r4, #1, #1
 8006510:	f364 0282 	bfi	r2, r4, #2, #1
 8006514:	f364 02c5 	bfi	r2, r4, #3, #3
 8006518:	f369 1288 	bfi	r2, r9, #6, #3
 800651c:	f368 2252 	bfi	r2, r8, #9, #10
 8006520:	4623      	mov	r3, r4
 8006522:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006526:	4629      	mov	r1, r5
 8006528:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800652c:	f011 fc11 	bl	8017d52 <z_log_msg2_finalize>
		esf->basic.pc);
}
 8006530:	3750      	adds	r7, #80	; 0x50
 8006532:	46bd      	mov	sp, r7
 8006534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006538:	0801dbb4 	.word	0x0801dbb4
 800653c:	0801d7e0 	.word	0x0801d7e0
 8006540:	0801dbc4 	.word	0x0801dbc4

08006544 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8006544:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8006546:	2b00      	cmp	r3, #0
 8006548:	db08      	blt.n	800655c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800654a:	f000 001f 	and.w	r0, r0, #31
 800654e:	095b      	lsrs	r3, r3, #5
 8006550:	2201      	movs	r2, #1
 8006552:	fa02 f000 	lsl.w	r0, r2, r0
 8006556:	4a02      	ldr	r2, [pc, #8]	; (8006560 <arch_irq_enable+0x1c>)
 8006558:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	e000e100 	.word	0xe000e100

08006564 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
 8006564:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8006566:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8006568:	2b00      	cmp	r3, #0
 800656a:	db08      	blt.n	800657e <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800656c:	0089      	lsls	r1, r1, #2
 800656e:	b2c9      	uxtb	r1, r1
 8006570:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8006574:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8006578:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 800657c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800657e:	f000 000f 	and.w	r0, r0, #15
 8006582:	0089      	lsls	r1, r1, #2
 8006584:	b2c9      	uxtb	r1, r1
 8006586:	4b01      	ldr	r3, [pc, #4]	; (800658c <z_arm_irq_priority_set+0x28>)
 8006588:	5419      	strb	r1, [r3, r0]
}
 800658a:	4770      	bx	lr
 800658c:	e000ed14 	.word	0xe000ed14

08006590 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8006590:	bf30      	wfi
    b z_SysNmiOnReset
 8006592:	f7ff bffd 	b.w	8006590 <z_SysNmiOnReset>
 8006596:	bf00      	nop

08006598 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
 8006598:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800659a:	4b14      	ldr	r3, [pc, #80]	; (80065ec <z_arm_prep_c+0x54>)
 800659c:	4a14      	ldr	r2, [pc, #80]	; (80065f0 <z_arm_prep_c+0x58>)
 800659e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80065a2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80065a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80065a8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 80065ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80065b0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80065b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 80065b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80065bc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80065c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 80065c4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80065c8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 80065cc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80065ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80065d2:	f3bf 8f6f 	isb	sy
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 80065d6:	2300      	movs	r3, #0
 80065d8:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 80065dc:	f00f f848 	bl	8015670 <z_bss_zero>
	z_data_copy();
 80065e0:	f010 f888 	bl	80166f4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 80065e4:	f000 ff6a 	bl	80074bc <z_arm_interrupt_init>
	z_cstart();
 80065e8:	f00f f84e 	bl	8015688 <z_cstart>
 80065ec:	e000ed00 	.word	0xe000ed00
 80065f0:	08000000 	.word	0x08000000

080065f4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
 80065f4:	4a0a      	ldr	r2, [pc, #40]	; (8006620 <arch_swap+0x2c>)
 80065f6:	6893      	ldr	r3, [r2, #8]
 80065f8:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	_current->arch.swap_return_value = _k_neg_eagain;
 80065fc:	4909      	ldr	r1, [pc, #36]	; (8006624 <arch_swap+0x30>)
 80065fe:	6809      	ldr	r1, [r1, #0]
 8006600:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8006604:	4908      	ldr	r1, [pc, #32]	; (8006628 <arch_swap+0x34>)
 8006606:	684b      	ldr	r3, [r1, #4]
 8006608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800660c:	604b      	str	r3, [r1, #4]
 800660e:	2300      	movs	r3, #0
 8006610:	f383 8811 	msr	BASEPRI, r3
 8006614:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8006618:	6893      	ldr	r3, [r2, #8]
}
 800661a:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
 800661e:	4770      	bx	lr
 8006620:	20003c14 	.word	0x20003c14
 8006624:	0801eb44 	.word	0x0801eb44
 8006628:	e000ed00 	.word	0xe000ed00

0800662c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 800662c:	4922      	ldr	r1, [pc, #136]	; (80066b8 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
 800662e:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
 8006630:	f882 e0e1 	strb.w	lr, [r2, #225]	; 0xe1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8006634:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
 8006638:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 800663a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 800663e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
 8006642:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
 8006646:	d103      	bne.n	8006650 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
 8006648:	f102 00a0 	add.w	r0, r2, #160	; 0xa0
    vstmia r0, {s16-s31}
 800664c:	ec80 8a10 	vstmia	r0, {s16-s31}

08006650 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8006650:	2004      	movs	r0, #4
    msr BASEPRI_MAX, r0
 8006652:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8006656:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 800665a:	4f18      	ldr	r7, [pc, #96]	; (80066bc <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 800665c:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8006660:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
 8006662:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8006664:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
 8006666:	f992 e0e1 	ldrsb.w	lr, [r2, #225]	; 0xe1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 800666a:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    movs r3, #0
 800666e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8006670:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8006674:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
 8006678:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
 800667c:	d003      	beq.n	8006686 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
 800667e:	2300      	movs	r3, #0
    vmsr fpscr, r3
 8006680:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
 8006684:	e003      	b.n	800668e <in_fp_endif>

08006686 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
 8006686:	f102 00a0 	add.w	r0, r2, #160	; 0xa0
    vldmia r0, {s16-s31}
 800668a:	ec90 8a10 	vldmia	r0, {s16-s31}

0800668e <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
 800668e:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
 8006692:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
 8006696:	f383 8814 	msr	CONTROL, r3
    isb
 800669a:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
 800669e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 80066a0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 80066a2:	f000 ff67 	bl	8007574 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 80066a6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 80066aa:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
 80066ae:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 80066b2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
 80066b6:	4770      	bx	lr
    ldr r1, =_kernel
 80066b8:	20003c14 	.word	0x20003c14
    ldr v4, =_SCS_ICSR
 80066bc:	e000ed04 	.word	0xe000ed04

080066c0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
 80066c0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 80066c4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 80066c6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 80066ca:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 80066ce:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 80066d0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 80066d4:	2902      	cmp	r1, #2
    beq _oops
 80066d6:	d0ff      	beq.n	80066d8 <_oops>

080066d8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 80066d8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 80066da:	f011 fe9f 	bl	801841c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 80066de:	bd01      	pop	{r0, pc}

080066e0 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
 80066e0:	b410      	push	{r4}
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 80066e2:	7b01      	ldrb	r1, [r0, #12]
 80066e4:	f011 0f02 	tst.w	r1, #2
 80066e8:	d009      	beq.n	80066fe <arch_new_thread+0x1e>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
 80066ea:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80066ee:	3160      	adds	r1, #96	; 0x60
 80066f0:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
 80066f4:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 80066f8:	3960      	subs	r1, #96	; 0x60
 80066fa:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 80066fe:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
 8006702:	4915      	ldr	r1, [pc, #84]	; (8006758 <arch_new_thread+0x78>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
 8006704:	f021 0101 	bic.w	r1, r1, #1
 8006708:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
 800670c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8006710:	9b01      	ldr	r3, [sp, #4]
 8006712:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
 8006716:	9b02      	ldr	r3, [sp, #8]
 8006718:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 800671c:	9b03      	ldr	r3, [sp, #12]
 800671e:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8006722:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006726:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
 800672a:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
 800672c:	2300      	movs	r3, #0
 800672e:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
 8006732:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
 8006736:	23fd      	movs	r3, #253	; 0xfd
 8006738:	f880 30e1 	strb.w	r3, [r0, #225]	; 0xe1
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
 800673c:	7b03      	ldrb	r3, [r0, #12]
 800673e:	f013 0f02 	tst.w	r3, #2
 8006742:	d005      	beq.n	8006750 <arch_new_thread+0x70>
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8006744:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 8006748:	f043 0308 	orr.w	r3, r3, #8
 800674c:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8006750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	08017793 	.word	0x08017793

0800675c <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 800675c:	7b03      	ldrb	r3, [r0, #12]
 800675e:	f013 0f02 	tst.w	r3, #2
 8006762:	d11e      	bne.n	80067a2 <z_arm_mpu_stack_guard_and_fpu_adjust+0x46>
		((thread->arch.mode_exc_return & EXC_RETURN_FTYPE) == 0)) {
 8006764:	f890 30e1 	ldrb.w	r3, [r0, #225]	; 0xe1
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
 8006768:	f013 0f10 	tst.w	r3, #16
 800676c:	d019      	beq.n	80067a2 <z_arm_mpu_stack_guard_and_fpu_adjust+0x46>
	/* Thread is not pre-tagged with K_FP_REGS, and it has
	 * not been using the FPU. Since there is no active FPU
	 * context, de-activate lazy stacking and program the
	 * default MPU guard size.
	 */
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
 800676e:	4a1d      	ldr	r2, [pc, #116]	; (80067e4 <z_arm_mpu_stack_guard_and_fpu_adjust+0x88>)
 8006770:	6853      	ldr	r3, [r2, #4]
 8006772:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006776:	6053      	str	r3, [r2, #4]
		if ((thread->arch.mode &
 8006778:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800677c:	f013 0f08 	tst.w	r3, #8
 8006780:	d02d      	beq.n	80067de <z_arm_mpu_stack_guard_and_fpu_adjust+0x82>
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 8006782:	f023 0308 	bic.w	r3, r3, #8
 8006786:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
				thread->stack_info.start -=
 800678a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800678e:	3b60      	subs	r3, #96	; 0x60
 8006790:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
				thread->stack_info.size +=
 8006794:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8006798:	3360      	adds	r3, #96	; 0x60
 800679a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
 800679e:	2020      	movs	r0, #32
 80067a0:	4770      	bx	lr
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
 80067a2:	4a10      	ldr	r2, [pc, #64]	; (80067e4 <z_arm_mpu_stack_guard_and_fpu_adjust+0x88>)
 80067a4:	6853      	ldr	r3, [r2, #4]
 80067a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067aa:	6053      	str	r3, [r2, #4]
		if ((thread->arch.mode &
 80067ac:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 80067b0:	f013 0f08 	tst.w	r3, #8
 80067b4:	d10d      	bne.n	80067d2 <z_arm_mpu_stack_guard_and_fpu_adjust+0x76>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
 80067b6:	f043 0308 	orr.w	r3, r3, #8
 80067ba:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
				thread->stack_info.start +=
 80067be:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80067c2:	3360      	adds	r3, #96	; 0x60
 80067c4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
				thread->stack_info.size -=
 80067c8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80067cc:	3b60      	subs	r3, #96	; 0x60
 80067ce:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
		thread->base.user_options |= K_FP_REGS;
 80067d2:	7b03      	ldrb	r3, [r0, #12]
 80067d4:	f043 0302 	orr.w	r3, r3, #2
 80067d8:	7303      	strb	r3, [r0, #12]
		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
 80067da:	2080      	movs	r0, #128	; 0x80
 80067dc:	4770      	bx	lr
	return MPU_GUARD_ALIGN_AND_SIZE;
 80067de:	2020      	movs	r0, #32
}
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	e000ef30 	.word	0xe000ef30

080067e8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
 80067e8:	4b1a      	ldr	r3, [pc, #104]	; (8006854 <z_check_thread_stack_fail+0x6c>)
 80067ea:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
 80067ec:	b31b      	cbz	r3, 8006836 <z_check_thread_stack_fail+0x4e>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
 80067ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
 80067f2:	f012 0f08 	tst.w	r2, #8
 80067f6:	d00f      	beq.n	8006818 <z_check_thread_stack_fail+0x30>
 80067f8:	2280      	movs	r2, #128	; 0x80
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 80067fa:	f110 0f16 	cmn.w	r0, #22
 80067fe:	d01c      	beq.n	800683a <z_check_thread_stack_fail+0x52>
{
 8006800:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8006802:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8006806:	1aa2      	subs	r2, r4, r2
 8006808:	4282      	cmp	r2, r0
 800680a:	d807      	bhi.n	800681c <z_check_thread_stack_fail+0x34>
 800680c:	4284      	cmp	r4, r0
 800680e:	d90b      	bls.n	8006828 <z_check_thread_stack_fail+0x40>
 8006810:	428c      	cmp	r4, r1
 8006812:	d80b      	bhi.n	800682c <z_check_thread_stack_fail+0x44>
 8006814:	2100      	movs	r1, #0
 8006816:	e002      	b.n	800681e <z_check_thread_stack_fail+0x36>
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
 8006818:	2220      	movs	r2, #32
 800681a:	e7ee      	b.n	80067fa <z_check_thread_stack_fail+0x12>
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 800681c:	2100      	movs	r1, #0
 800681e:	b939      	cbnz	r1, 8006830 <z_check_thread_stack_fail+0x48>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
 8006820:	2000      	movs	r0, #0
}
 8006822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006826:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 8006828:	2100      	movs	r1, #0
 800682a:	e7f8      	b.n	800681e <z_check_thread_stack_fail+0x36>
 800682c:	2101      	movs	r1, #1
 800682e:	e7f6      	b.n	800681e <z_check_thread_stack_fail+0x36>
		return thread->stack_info.start;
 8006830:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8006834:	e7f5      	b.n	8006822 <z_check_thread_stack_fail+0x3a>
		return 0;
 8006836:	2000      	movs	r0, #0
 8006838:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
 800683a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800683e:	428a      	cmp	r2, r1
 8006840:	bf94      	ite	ls
 8006842:	2100      	movls	r1, #0
 8006844:	2101      	movhi	r1, #1
 8006846:	b909      	cbnz	r1, 800684c <z_check_thread_stack_fail+0x64>
	return 0;
 8006848:	2000      	movs	r0, #0
}
 800684a:	4770      	bx	lr
		return thread->stack_info.start;
 800684c:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	20003c14 	.word	0x20003c14

08006858 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8006858:	b508      	push	{r3, lr}
 800685a:	4604      	mov	r4, r0
 800685c:	460e      	mov	r6, r1
 800685e:	4615      	mov	r5, r2
	z_arm_prepare_switch_to_main();
 8006860:	f011 fdee 	bl	8018440 <z_arm_prepare_switch_to_main>

	_current = main_thread;
 8006864:	4b08      	ldr	r3, [pc, #32]	; (8006888 <arch_switch_to_main_thread+0x30>)
 8006866:	609c      	str	r4, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8006868:	4620      	mov	r0, r4
 800686a:	f000 fe83 	bl	8007574 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 800686e:	4628      	mov	r0, r5
 8006870:	f386 8809 	msr	PSP, r6
 8006874:	2100      	movs	r1, #0
 8006876:	b663      	cpsie	if
 8006878:	f381 8811 	msr	BASEPRI, r1
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	2200      	movs	r2, #0
 8006882:	2300      	movs	r3, #0
 8006884:	f010 ff85 	bl	8017792 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8006888:	20003c14 	.word	0x20003c14

0800688c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 800688c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 800688e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8006892:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8006896:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 800689a:	4904      	ldr	r1, [pc, #16]	; (80068ac <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 800689c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 800689e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
 80068a0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 80068a2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 80068a6:	4902      	ldr	r1, [pc, #8]	; (80068b0 <_isr_wrapper+0x24>)
	bx r1
 80068a8:	4708      	bx	r1
 80068aa:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 80068ac:	0801d378 	.word	0x0801d378
	ldr r1, =z_arm_int_exit
 80068b0:	080068b5 	.word	0x080068b5

080068b4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 80068b4:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 80068b6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 80068b8:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
 80068ba:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 80068bc:	d003      	beq.n	80068c6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 80068be:	4903      	ldr	r1, [pc, #12]	; (80068cc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 80068c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 80068c4:	600a      	str	r2, [r1, #0]

080068c6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 80068c6:	4770      	bx	lr
	ldr r3, =_kernel
 80068c8:	20003c14 	.word	0x20003c14
	ldr r1, =_SCS_ICSR
 80068cc:	e000ed04 	.word	0xe000ed04

080068d0 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
 80068d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068d2:	b0b3      	sub	sp, #204	; 0xcc
 80068d4:	4606      	mov	r6, r0
 80068d6:	460f      	mov	r7, r1
 80068d8:	4615      	mov	r5, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
 80068da:	4bae      	ldr	r3, [pc, #696]	; (8006b94 <bus_fault+0x2c4>)
 80068dc:	9306      	str	r3, [sp, #24]
 80068de:	2300      	movs	r3, #0
 80068e0:	f8ad 3005 	strh.w	r3, [sp, #5]
 80068e4:	f88d 3007 	strb.w	r3, [sp, #7]
 80068e8:	2202      	movs	r2, #2
 80068ea:	f88d 2004 	strb.w	r2, [sp, #4]
 80068ee:	f88d 3006 	strb.w	r3, [sp, #6]
 80068f2:	9a01      	ldr	r2, [sp, #4]
 80068f4:	9205      	str	r2, [sp, #20]
 80068f6:	461c      	mov	r4, r3
 80068f8:	f363 0400 	bfi	r4, r3, #0, #1
 80068fc:	f363 0441 	bfi	r4, r3, #1, #1
 8006900:	f363 0482 	bfi	r4, r3, #2, #1
 8006904:	f363 04c5 	bfi	r4, r3, #3, #3
 8006908:	2201      	movs	r2, #1
 800690a:	f362 1488 	bfi	r4, r2, #6, #3
 800690e:	2208      	movs	r2, #8
 8006910:	f362 2452 	bfi	r4, r2, #9, #10
 8006914:	f3c4 0212 	ubfx	r2, r4, #0, #19
 8006918:	499f      	ldr	r1, [pc, #636]	; (8006b98 <bus_fault+0x2c8>)
 800691a:	a802      	add	r0, sp, #8
 800691c:	f011 fa19 	bl	8017d52 <z_log_msg2_finalize>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8006920:	4b9e      	ldr	r3, [pc, #632]	; (8006b9c <bus_fault+0x2cc>)
 8006922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006924:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006928:	d128      	bne.n	800697c <bus_fault+0xac>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 800692a:	4b9c      	ldr	r3, [pc, #624]	; (8006b9c <bus_fault+0x2cc>)
 800692c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006932:	d147      	bne.n	80069c4 <bus_fault+0xf4>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8006934:	4b99      	ldr	r3, [pc, #612]	; (8006b9c <bus_fault+0x2cc>)
 8006936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006938:	f413 7f00 	tst.w	r3, #512	; 0x200
 800693c:	d166      	bne.n	8006a0c <bus_fault+0x13c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 800693e:	4b97      	ldr	r3, [pc, #604]	; (8006b9c <bus_fault+0x2cc>)
 8006940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006942:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006946:	f040 80b8 	bne.w	8006aba <bus_fault+0x1ea>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 800694a:	4b94      	ldr	r3, [pc, #592]	; (8006b9c <bus_fault+0x2cc>)
 800694c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006952:	f040 80d6 	bne.w	8006b02 <bus_fault+0x232>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8006956:	4b91      	ldr	r3, [pc, #580]	; (8006b9c <bus_fault+0x2cc>)
 8006958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800695e:	f040 80f4 	bne.w	8006b4a <bus_fault+0x27a>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8006962:	4a8e      	ldr	r2, [pc, #568]	; (8006b9c <bus_fault+0x2cc>)
 8006964:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006966:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 800696a:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
 800696c:	2101      	movs	r1, #1
 800696e:	4630      	mov	r0, r6
 8006970:	f011 fd74 	bl	801845c <memory_fault_recoverable>
 8006974:	7028      	strb	r0, [r5, #0]

	return reason;
}
 8006976:	2000      	movs	r0, #0
 8006978:	b033      	add	sp, #204	; 0xcc
 800697a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error");
 800697c:	4b88      	ldr	r3, [pc, #544]	; (8006ba0 <bus_fault+0x2d0>)
 800697e:	930c      	str	r3, [sp, #48]	; 0x30
 8006980:	2300      	movs	r3, #0
 8006982:	f8ad 3005 	strh.w	r3, [sp, #5]
 8006986:	f88d 3007 	strb.w	r3, [sp, #7]
 800698a:	2202      	movs	r2, #2
 800698c:	f88d 2004 	strb.w	r2, [sp, #4]
 8006990:	f88d 3006 	strb.w	r3, [sp, #6]
 8006994:	9a01      	ldr	r2, [sp, #4]
 8006996:	920b      	str	r2, [sp, #44]	; 0x2c
 8006998:	461a      	mov	r2, r3
 800699a:	f363 0200 	bfi	r2, r3, #0, #1
 800699e:	f363 0241 	bfi	r2, r3, #1, #1
 80069a2:	f363 0282 	bfi	r2, r3, #2, #1
 80069a6:	f363 02c5 	bfi	r2, r3, #3, #3
 80069aa:	2101      	movs	r1, #1
 80069ac:	f361 1288 	bfi	r2, r1, #6, #3
 80069b0:	2108      	movs	r1, #8
 80069b2:	f361 2252 	bfi	r2, r1, #9, #10
 80069b6:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80069ba:	4977      	ldr	r1, [pc, #476]	; (8006b98 <bus_fault+0x2c8>)
 80069bc:	a808      	add	r0, sp, #32
 80069be:	f011 f9c8 	bl	8017d52 <z_log_msg2_finalize>
 80069c2:	e7b2      	b.n	800692a <bus_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
 80069c4:	4b77      	ldr	r3, [pc, #476]	; (8006ba4 <bus_fault+0x2d4>)
 80069c6:	9312      	str	r3, [sp, #72]	; 0x48
 80069c8:	2300      	movs	r3, #0
 80069ca:	f8ad 3005 	strh.w	r3, [sp, #5]
 80069ce:	f88d 3007 	strb.w	r3, [sp, #7]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f88d 2004 	strb.w	r2, [sp, #4]
 80069d8:	f88d 3006 	strb.w	r3, [sp, #6]
 80069dc:	9a01      	ldr	r2, [sp, #4]
 80069de:	9211      	str	r2, [sp, #68]	; 0x44
 80069e0:	461a      	mov	r2, r3
 80069e2:	f363 0200 	bfi	r2, r3, #0, #1
 80069e6:	f363 0241 	bfi	r2, r3, #1, #1
 80069ea:	f363 0282 	bfi	r2, r3, #2, #1
 80069ee:	f363 02c5 	bfi	r2, r3, #3, #3
 80069f2:	2101      	movs	r1, #1
 80069f4:	f361 1288 	bfi	r2, r1, #6, #3
 80069f8:	2108      	movs	r1, #8
 80069fa:	f361 2252 	bfi	r2, r1, #9, #10
 80069fe:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006a02:	4965      	ldr	r1, [pc, #404]	; (8006b98 <bus_fault+0x2c8>)
 8006a04:	a80e      	add	r0, sp, #56	; 0x38
 8006a06:	f011 f9a4 	bl	8017d52 <z_log_msg2_finalize>
 8006a0a:	e793      	b.n	8006934 <bus_fault+0x64>
		PR_FAULT_INFO("  Precise data bus error");
 8006a0c:	4b66      	ldr	r3, [pc, #408]	; (8006ba8 <bus_fault+0x2d8>)
 8006a0e:	9318      	str	r3, [sp, #96]	; 0x60
 8006a10:	2300      	movs	r3, #0
 8006a12:	f8ad 3005 	strh.w	r3, [sp, #5]
 8006a16:	f88d 3007 	strb.w	r3, [sp, #7]
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	f88d 2004 	strb.w	r2, [sp, #4]
 8006a20:	f88d 3006 	strb.w	r3, [sp, #6]
 8006a24:	9a01      	ldr	r2, [sp, #4]
 8006a26:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a28:	461a      	mov	r2, r3
 8006a2a:	f363 0200 	bfi	r2, r3, #0, #1
 8006a2e:	f363 0241 	bfi	r2, r3, #1, #1
 8006a32:	f363 0282 	bfi	r2, r3, #2, #1
 8006a36:	f363 02c5 	bfi	r2, r3, #3, #3
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	f361 1288 	bfi	r2, r1, #6, #3
 8006a40:	2108      	movs	r1, #8
 8006a42:	f361 2252 	bfi	r2, r1, #9, #10
 8006a46:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006a4a:	4953      	ldr	r1, [pc, #332]	; (8006b98 <bus_fault+0x2c8>)
 8006a4c:	a814      	add	r0, sp, #80	; 0x50
 8006a4e:	f011 f980 	bl	8017d52 <z_log_msg2_finalize>
		STORE_xFAR(bfar, SCB->BFAR);
 8006a52:	4b52      	ldr	r3, [pc, #328]	; (8006b9c <bus_fault+0x2cc>)
 8006a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8006a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a58:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8006a5c:	f43f af6f 	beq.w	800693e <bus_fault+0x6e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
 8006a60:	4b52      	ldr	r3, [pc, #328]	; (8006bac <bus_fault+0x2dc>)
 8006a62:	931e      	str	r3, [sp, #120]	; 0x78
 8006a64:	921f      	str	r2, [sp, #124]	; 0x7c
 8006a66:	2300      	movs	r3, #0
 8006a68:	f8ad 3005 	strh.w	r3, [sp, #5]
 8006a6c:	f88d 3007 	strb.w	r3, [sp, #7]
 8006a70:	2203      	movs	r2, #3
 8006a72:	f88d 2004 	strb.w	r2, [sp, #4]
 8006a76:	f88d 3006 	strb.w	r3, [sp, #6]
 8006a7a:	9a01      	ldr	r2, [sp, #4]
 8006a7c:	921d      	str	r2, [sp, #116]	; 0x74
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f363 0200 	bfi	r2, r3, #0, #1
 8006a84:	f363 0241 	bfi	r2, r3, #1, #1
 8006a88:	f363 0282 	bfi	r2, r3, #2, #1
 8006a8c:	f363 02c5 	bfi	r2, r3, #3, #3
 8006a90:	2101      	movs	r1, #1
 8006a92:	f361 1288 	bfi	r2, r1, #6, #3
 8006a96:	210c      	movs	r1, #12
 8006a98:	f361 2252 	bfi	r2, r1, #9, #10
 8006a9c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006aa0:	493d      	ldr	r1, [pc, #244]	; (8006b98 <bus_fault+0x2c8>)
 8006aa2:	a81a      	add	r0, sp, #104	; 0x68
 8006aa4:	f011 f955 	bl	8017d52 <z_log_msg2_finalize>
			if (from_hard_fault != 0) {
 8006aa8:	2f00      	cmp	r7, #0
 8006aaa:	f43f af48 	beq.w	800693e <bus_fault+0x6e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8006aae:	4a3b      	ldr	r2, [pc, #236]	; (8006b9c <bus_fault+0x2cc>)
 8006ab0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006ab2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ab6:	6293      	str	r3, [r2, #40]	; 0x28
 8006ab8:	e741      	b.n	800693e <bus_fault+0x6e>
		PR_FAULT_INFO("  Imprecise data bus error");
 8006aba:	4b3d      	ldr	r3, [pc, #244]	; (8006bb0 <bus_fault+0x2e0>)
 8006abc:	9324      	str	r3, [sp, #144]	; 0x90
 8006abe:	2300      	movs	r3, #0
 8006ac0:	f8ad 3005 	strh.w	r3, [sp, #5]
 8006ac4:	f88d 3007 	strb.w	r3, [sp, #7]
 8006ac8:	2202      	movs	r2, #2
 8006aca:	f88d 2004 	strb.w	r2, [sp, #4]
 8006ace:	f88d 3006 	strb.w	r3, [sp, #6]
 8006ad2:	9a01      	ldr	r2, [sp, #4]
 8006ad4:	9223      	str	r2, [sp, #140]	; 0x8c
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f363 0200 	bfi	r2, r3, #0, #1
 8006adc:	f363 0241 	bfi	r2, r3, #1, #1
 8006ae0:	f363 0282 	bfi	r2, r3, #2, #1
 8006ae4:	f363 02c5 	bfi	r2, r3, #3, #3
 8006ae8:	2101      	movs	r1, #1
 8006aea:	f361 1288 	bfi	r2, r1, #6, #3
 8006aee:	2108      	movs	r1, #8
 8006af0:	f361 2252 	bfi	r2, r1, #9, #10
 8006af4:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006af8:	4927      	ldr	r1, [pc, #156]	; (8006b98 <bus_fault+0x2c8>)
 8006afa:	a820      	add	r0, sp, #128	; 0x80
 8006afc:	f011 f929 	bl	8017d52 <z_log_msg2_finalize>
 8006b00:	e723      	b.n	800694a <bus_fault+0x7a>
		PR_FAULT_INFO("  Instruction bus error");
 8006b02:	4b2c      	ldr	r3, [pc, #176]	; (8006bb4 <bus_fault+0x2e4>)
 8006b04:	9330      	str	r3, [sp, #192]	; 0xc0
 8006b06:	2300      	movs	r3, #0
 8006b08:	f8ad 3005 	strh.w	r3, [sp, #5]
 8006b0c:	f88d 3007 	strb.w	r3, [sp, #7]
 8006b10:	2202      	movs	r2, #2
 8006b12:	f88d 2004 	strb.w	r2, [sp, #4]
 8006b16:	f88d 3006 	strb.w	r3, [sp, #6]
 8006b1a:	9a01      	ldr	r2, [sp, #4]
 8006b1c:	922f      	str	r2, [sp, #188]	; 0xbc
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f363 0200 	bfi	r2, r3, #0, #1
 8006b24:	f363 0241 	bfi	r2, r3, #1, #1
 8006b28:	f363 0282 	bfi	r2, r3, #2, #1
 8006b2c:	f363 02c5 	bfi	r2, r3, #3, #3
 8006b30:	2101      	movs	r1, #1
 8006b32:	f361 1288 	bfi	r2, r1, #6, #3
 8006b36:	2108      	movs	r1, #8
 8006b38:	f361 2252 	bfi	r2, r1, #9, #10
 8006b3c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006b40:	4915      	ldr	r1, [pc, #84]	; (8006b98 <bus_fault+0x2c8>)
 8006b42:	a82c      	add	r0, sp, #176	; 0xb0
 8006b44:	f011 f905 	bl	8017d52 <z_log_msg2_finalize>
 8006b48:	e70b      	b.n	8006962 <bus_fault+0x92>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
 8006b4a:	4b1b      	ldr	r3, [pc, #108]	; (8006bb8 <bus_fault+0x2e8>)
 8006b4c:	932a      	str	r3, [sp, #168]	; 0xa8
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f8ad 3005 	strh.w	r3, [sp, #5]
 8006b54:	f88d 3007 	strb.w	r3, [sp, #7]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	f88d 2004 	strb.w	r2, [sp, #4]
 8006b5e:	f88d 3006 	strb.w	r3, [sp, #6]
 8006b62:	9a01      	ldr	r2, [sp, #4]
 8006b64:	9229      	str	r2, [sp, #164]	; 0xa4
 8006b66:	461a      	mov	r2, r3
 8006b68:	f363 0200 	bfi	r2, r3, #0, #1
 8006b6c:	f363 0241 	bfi	r2, r3, #1, #1
 8006b70:	f363 0282 	bfi	r2, r3, #2, #1
 8006b74:	f363 02c5 	bfi	r2, r3, #3, #3
 8006b78:	2101      	movs	r1, #1
 8006b7a:	f361 1288 	bfi	r2, r1, #6, #3
 8006b7e:	2108      	movs	r1, #8
 8006b80:	f361 2252 	bfi	r2, r1, #9, #10
 8006b84:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006b88:	4903      	ldr	r1, [pc, #12]	; (8006b98 <bus_fault+0x2c8>)
 8006b8a:	a826      	add	r0, sp, #152	; 0x98
 8006b8c:	f011 f8e1 	bl	8017d52 <z_log_msg2_finalize>
 8006b90:	e6e7      	b.n	8006962 <bus_fault+0x92>
 8006b92:	bf00      	nop
 8006b94:	0801dbf4 	.word	0x0801dbf4
 8006b98:	0801d7e0 	.word	0x0801d7e0
 8006b9c:	e000ed00 	.word	0xe000ed00
 8006ba0:	0801dc0c 	.word	0x0801dc0c
 8006ba4:	0801dc20 	.word	0x0801dc20
 8006ba8:	0801dc34 	.word	0x0801dc34
 8006bac:	0801dc50 	.word	0x0801dc50
 8006bb0:	0801dc68 	.word	0x0801dc68
 8006bb4:	0801dc84 	.word	0x0801dc84
 8006bb8:	0801dc9c 	.word	0x0801dc9c

08006bbc <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
 8006bbc:	b500      	push	{lr}
 8006bbe:	b0ad      	sub	sp, #180	; 0xb4
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
 8006bc0:	4b93      	ldr	r3, [pc, #588]	; (8006e10 <usage_fault+0x254>)
 8006bc2:	9306      	str	r3, [sp, #24]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f8ad 3005 	strh.w	r3, [sp, #5]
 8006bca:	f88d 3007 	strb.w	r3, [sp, #7]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	f88d 2004 	strb.w	r2, [sp, #4]
 8006bd4:	f88d 3006 	strb.w	r3, [sp, #6]
 8006bd8:	9a01      	ldr	r2, [sp, #4]
 8006bda:	9205      	str	r2, [sp, #20]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	f363 0200 	bfi	r2, r3, #0, #1
 8006be2:	f363 0241 	bfi	r2, r3, #1, #1
 8006be6:	f363 0282 	bfi	r2, r3, #2, #1
 8006bea:	f363 02c5 	bfi	r2, r3, #3, #3
 8006bee:	2101      	movs	r1, #1
 8006bf0:	f361 1288 	bfi	r2, r1, #6, #3
 8006bf4:	2108      	movs	r1, #8
 8006bf6:	f361 2252 	bfi	r2, r1, #9, #10
 8006bfa:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006bfe:	4985      	ldr	r1, [pc, #532]	; (8006e14 <usage_fault+0x258>)
 8006c00:	a802      	add	r0, sp, #8
 8006c02:	f011 f8a6 	bl	8017d52 <z_log_msg2_finalize>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8006c06:	4b84      	ldr	r3, [pc, #528]	; (8006e18 <usage_fault+0x25c>)
 8006c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006c0e:	d126      	bne.n	8006c5e <usage_fault+0xa2>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8006c10:	4b81      	ldr	r3, [pc, #516]	; (8006e18 <usage_fault+0x25c>)
 8006c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c14:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006c18:	d145      	bne.n	8006ca6 <usage_fault+0xea>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8006c1a:	4b7f      	ldr	r3, [pc, #508]	; (8006e18 <usage_fault+0x25c>)
 8006c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8006c22:	d164      	bne.n	8006cee <usage_fault+0x132>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8006c24:	4b7c      	ldr	r3, [pc, #496]	; (8006e18 <usage_fault+0x25c>)
 8006c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c28:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8006c2c:	f040 8083 	bne.w	8006d36 <usage_fault+0x17a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8006c30:	4b79      	ldr	r3, [pc, #484]	; (8006e18 <usage_fault+0x25c>)
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006c38:	f040 80a1 	bne.w	8006d7e <usage_fault+0x1c2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8006c3c:	4b76      	ldr	r3, [pc, #472]	; (8006e18 <usage_fault+0x25c>)
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c40:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006c44:	f040 80bf 	bne.w	8006dc6 <usage_fault+0x20a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8006c48:	4a73      	ldr	r2, [pc, #460]	; (8006e18 <usage_fault+0x25c>)
 8006c4a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006c4c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8006c50:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8006c54:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
 8006c56:	2000      	movs	r0, #0
 8006c58:	b02d      	add	sp, #180	; 0xb4
 8006c5a:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
 8006c5e:	4b6f      	ldr	r3, [pc, #444]	; (8006e1c <usage_fault+0x260>)
 8006c60:	930c      	str	r3, [sp, #48]	; 0x30
 8006c62:	2300      	movs	r3, #0
 8006c64:	f8ad 3005 	strh.w	r3, [sp, #5]
 8006c68:	f88d 3007 	strb.w	r3, [sp, #7]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	f88d 2004 	strb.w	r2, [sp, #4]
 8006c72:	f88d 3006 	strb.w	r3, [sp, #6]
 8006c76:	9a01      	ldr	r2, [sp, #4]
 8006c78:	920b      	str	r2, [sp, #44]	; 0x2c
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f363 0200 	bfi	r2, r3, #0, #1
 8006c80:	f363 0241 	bfi	r2, r3, #1, #1
 8006c84:	f363 0282 	bfi	r2, r3, #2, #1
 8006c88:	f363 02c5 	bfi	r2, r3, #3, #3
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	f361 1288 	bfi	r2, r1, #6, #3
 8006c92:	2108      	movs	r1, #8
 8006c94:	f361 2252 	bfi	r2, r1, #9, #10
 8006c98:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006c9c:	495d      	ldr	r1, [pc, #372]	; (8006e14 <usage_fault+0x258>)
 8006c9e:	a808      	add	r0, sp, #32
 8006ca0:	f011 f857 	bl	8017d52 <z_log_msg2_finalize>
 8006ca4:	e7b4      	b.n	8006c10 <usage_fault+0x54>
		PR_FAULT_INFO("  Unaligned memory access");
 8006ca6:	4b5e      	ldr	r3, [pc, #376]	; (8006e20 <usage_fault+0x264>)
 8006ca8:	9312      	str	r3, [sp, #72]	; 0x48
 8006caa:	2300      	movs	r3, #0
 8006cac:	f8ad 3005 	strh.w	r3, [sp, #5]
 8006cb0:	f88d 3007 	strb.w	r3, [sp, #7]
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	f88d 2004 	strb.w	r2, [sp, #4]
 8006cba:	f88d 3006 	strb.w	r3, [sp, #6]
 8006cbe:	9a01      	ldr	r2, [sp, #4]
 8006cc0:	9211      	str	r2, [sp, #68]	; 0x44
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f363 0200 	bfi	r2, r3, #0, #1
 8006cc8:	f363 0241 	bfi	r2, r3, #1, #1
 8006ccc:	f363 0282 	bfi	r2, r3, #2, #1
 8006cd0:	f363 02c5 	bfi	r2, r3, #3, #3
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	f361 1288 	bfi	r2, r1, #6, #3
 8006cda:	2108      	movs	r1, #8
 8006cdc:	f361 2252 	bfi	r2, r1, #9, #10
 8006ce0:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006ce4:	494b      	ldr	r1, [pc, #300]	; (8006e14 <usage_fault+0x258>)
 8006ce6:	a80e      	add	r0, sp, #56	; 0x38
 8006ce8:	f011 f833 	bl	8017d52 <z_log_msg2_finalize>
 8006cec:	e795      	b.n	8006c1a <usage_fault+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
 8006cee:	4b4d      	ldr	r3, [pc, #308]	; (8006e24 <usage_fault+0x268>)
 8006cf0:	9318      	str	r3, [sp, #96]	; 0x60
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f8ad 3005 	strh.w	r3, [sp, #5]
 8006cf8:	f88d 3007 	strb.w	r3, [sp, #7]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	f88d 2004 	strb.w	r2, [sp, #4]
 8006d02:	f88d 3006 	strb.w	r3, [sp, #6]
 8006d06:	9a01      	ldr	r2, [sp, #4]
 8006d08:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	f363 0200 	bfi	r2, r3, #0, #1
 8006d10:	f363 0241 	bfi	r2, r3, #1, #1
 8006d14:	f363 0282 	bfi	r2, r3, #2, #1
 8006d18:	f363 02c5 	bfi	r2, r3, #3, #3
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	f361 1288 	bfi	r2, r1, #6, #3
 8006d22:	2108      	movs	r1, #8
 8006d24:	f361 2252 	bfi	r2, r1, #9, #10
 8006d28:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006d2c:	4939      	ldr	r1, [pc, #228]	; (8006e14 <usage_fault+0x258>)
 8006d2e:	a814      	add	r0, sp, #80	; 0x50
 8006d30:	f011 f80f 	bl	8017d52 <z_log_msg2_finalize>
 8006d34:	e776      	b.n	8006c24 <usage_fault+0x68>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
 8006d36:	4b3c      	ldr	r3, [pc, #240]	; (8006e28 <usage_fault+0x26c>)
 8006d38:	931e      	str	r3, [sp, #120]	; 0x78
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f8ad 3005 	strh.w	r3, [sp, #5]
 8006d40:	f88d 3007 	strb.w	r3, [sp, #7]
 8006d44:	2202      	movs	r2, #2
 8006d46:	f88d 2004 	strb.w	r2, [sp, #4]
 8006d4a:	f88d 3006 	strb.w	r3, [sp, #6]
 8006d4e:	9a01      	ldr	r2, [sp, #4]
 8006d50:	921d      	str	r2, [sp, #116]	; 0x74
 8006d52:	461a      	mov	r2, r3
 8006d54:	f363 0200 	bfi	r2, r3, #0, #1
 8006d58:	f363 0241 	bfi	r2, r3, #1, #1
 8006d5c:	f363 0282 	bfi	r2, r3, #2, #1
 8006d60:	f363 02c5 	bfi	r2, r3, #3, #3
 8006d64:	2101      	movs	r1, #1
 8006d66:	f361 1288 	bfi	r2, r1, #6, #3
 8006d6a:	2108      	movs	r1, #8
 8006d6c:	f361 2252 	bfi	r2, r1, #9, #10
 8006d70:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006d74:	4927      	ldr	r1, [pc, #156]	; (8006e14 <usage_fault+0x258>)
 8006d76:	a81a      	add	r0, sp, #104	; 0x68
 8006d78:	f010 ffeb 	bl	8017d52 <z_log_msg2_finalize>
 8006d7c:	e758      	b.n	8006c30 <usage_fault+0x74>
		PR_FAULT_INFO("  Illegal use of the EPSR");
 8006d7e:	4b2b      	ldr	r3, [pc, #172]	; (8006e2c <usage_fault+0x270>)
 8006d80:	9324      	str	r3, [sp, #144]	; 0x90
 8006d82:	2300      	movs	r3, #0
 8006d84:	f8ad 3005 	strh.w	r3, [sp, #5]
 8006d88:	f88d 3007 	strb.w	r3, [sp, #7]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	f88d 2004 	strb.w	r2, [sp, #4]
 8006d92:	f88d 3006 	strb.w	r3, [sp, #6]
 8006d96:	9a01      	ldr	r2, [sp, #4]
 8006d98:	9223      	str	r2, [sp, #140]	; 0x8c
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f363 0200 	bfi	r2, r3, #0, #1
 8006da0:	f363 0241 	bfi	r2, r3, #1, #1
 8006da4:	f363 0282 	bfi	r2, r3, #2, #1
 8006da8:	f363 02c5 	bfi	r2, r3, #3, #3
 8006dac:	2101      	movs	r1, #1
 8006dae:	f361 1288 	bfi	r2, r1, #6, #3
 8006db2:	2108      	movs	r1, #8
 8006db4:	f361 2252 	bfi	r2, r1, #9, #10
 8006db8:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006dbc:	4915      	ldr	r1, [pc, #84]	; (8006e14 <usage_fault+0x258>)
 8006dbe:	a820      	add	r0, sp, #128	; 0x80
 8006dc0:	f010 ffc7 	bl	8017d52 <z_log_msg2_finalize>
 8006dc4:	e73a      	b.n	8006c3c <usage_fault+0x80>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
 8006dc6:	4b1a      	ldr	r3, [pc, #104]	; (8006e30 <usage_fault+0x274>)
 8006dc8:	932a      	str	r3, [sp, #168]	; 0xa8
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f8ad 3005 	strh.w	r3, [sp, #5]
 8006dd0:	f88d 3007 	strb.w	r3, [sp, #7]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	f88d 2004 	strb.w	r2, [sp, #4]
 8006dda:	f88d 3006 	strb.w	r3, [sp, #6]
 8006dde:	9a01      	ldr	r2, [sp, #4]
 8006de0:	9229      	str	r2, [sp, #164]	; 0xa4
 8006de2:	461a      	mov	r2, r3
 8006de4:	f363 0200 	bfi	r2, r3, #0, #1
 8006de8:	f363 0241 	bfi	r2, r3, #1, #1
 8006dec:	f363 0282 	bfi	r2, r3, #2, #1
 8006df0:	f363 02c5 	bfi	r2, r3, #3, #3
 8006df4:	2101      	movs	r1, #1
 8006df6:	f361 1288 	bfi	r2, r1, #6, #3
 8006dfa:	2108      	movs	r1, #8
 8006dfc:	f361 2252 	bfi	r2, r1, #9, #10
 8006e00:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006e04:	4903      	ldr	r1, [pc, #12]	; (8006e14 <usage_fault+0x258>)
 8006e06:	a826      	add	r0, sp, #152	; 0x98
 8006e08:	f010 ffa3 	bl	8017d52 <z_log_msg2_finalize>
 8006e0c:	e71c      	b.n	8006c48 <usage_fault+0x8c>
 8006e0e:	bf00      	nop
 8006e10:	0801dccc 	.word	0x0801dccc
 8006e14:	0801d7e0 	.word	0x0801d7e0
 8006e18:	e000ed00 	.word	0xe000ed00
 8006e1c:	0801dce4 	.word	0x0801dce4
 8006e20:	0801dcf8 	.word	0x0801dcf8
 8006e24:	0801dd14 	.word	0x0801dd14
 8006e28:	0801dd34 	.word	0x0801dd34
 8006e2c:	0801dd5c 	.word	0x0801dd5c
 8006e30:	0801dd78 	.word	0x0801dd78

08006e34 <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
 8006e34:	b500      	push	{lr}
 8006e36:	b089      	sub	sp, #36	; 0x24
	*recoverable = false;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	700b      	strb	r3, [r1, #0]

	PR_FAULT_INFO(
 8006e3c:	4a12      	ldr	r2, [pc, #72]	; (8006e88 <debug_monitor+0x54>)
 8006e3e:	9206      	str	r2, [sp, #24]
 8006e40:	f8ad 3005 	strh.w	r3, [sp, #5]
 8006e44:	f88d 3007 	strb.w	r3, [sp, #7]
 8006e48:	2202      	movs	r2, #2
 8006e4a:	f88d 2004 	strb.w	r2, [sp, #4]
 8006e4e:	f88d 3006 	strb.w	r3, [sp, #6]
 8006e52:	9a01      	ldr	r2, [sp, #4]
 8006e54:	9205      	str	r2, [sp, #20]
 8006e56:	461a      	mov	r2, r3
 8006e58:	f363 0200 	bfi	r2, r3, #0, #1
 8006e5c:	f363 0241 	bfi	r2, r3, #1, #1
 8006e60:	f363 0282 	bfi	r2, r3, #2, #1
 8006e64:	f363 02c5 	bfi	r2, r3, #3, #3
 8006e68:	2101      	movs	r1, #1
 8006e6a:	f361 1288 	bfi	r2, r1, #6, #3
 8006e6e:	2108      	movs	r1, #8
 8006e70:	f361 2252 	bfi	r2, r1, #9, #10
 8006e74:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006e78:	4904      	ldr	r1, [pc, #16]	; (8006e8c <debug_monitor+0x58>)
 8006e7a:	a802      	add	r0, sp, #8
 8006e7c:	f010 ff69 	bl	8017d52 <z_log_msg2_finalize>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
 8006e80:	b009      	add	sp, #36	; 0x24
 8006e82:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e86:	bf00      	nop
 8006e88:	0801dda4 	.word	0x0801dda4
 8006e8c:	0801d7e0 	.word	0x0801d7e0

08006e90 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
 8006e90:	b500      	push	{lr}
 8006e92:	b085      	sub	sp, #20
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
 8006e94:	290f      	cmp	r1, #15
 8006e96:	dc0f      	bgt.n	8006eb8 <reserved_exception+0x28>
 8006e98:	4b08      	ldr	r3, [pc, #32]	; (8006ebc <reserved_exception+0x2c>)
 8006e9a:	3910      	subs	r1, #16
 8006e9c:	9103      	str	r1, [sp, #12]
 8006e9e:	9302      	str	r3, [sp, #8]
 8006ea0:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <reserved_exception+0x30>)
 8006ea2:	9301      	str	r3, [sp, #4]
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	9000      	str	r0, [sp, #0]
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2201      	movs	r2, #1
 8006eac:	4905      	ldr	r1, [pc, #20]	; (8006ec4 <reserved_exception+0x34>)
 8006eae:	f011 fad7 	bl	8018460 <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
 8006eb2:	b005      	add	sp, #20
 8006eb4:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
 8006eb8:	4b03      	ldr	r3, [pc, #12]	; (8006ec8 <reserved_exception+0x38>)
 8006eba:	e7ee      	b.n	8006e9a <reserved_exception+0xa>
 8006ebc:	0801dde4 	.word	0x0801dde4
 8006ec0:	0801ddfc 	.word	0x0801ddfc
 8006ec4:	0801d7e0 	.word	0x0801d7e0
 8006ec8:	0801ddc8 	.word	0x0801ddc8

08006ecc <mem_manage_fault>:
{
 8006ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed0:	b0ac      	sub	sp, #176	; 0xb0
 8006ed2:	4605      	mov	r5, r0
 8006ed4:	460f      	mov	r7, r1
 8006ed6:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
 8006ed8:	4baa      	ldr	r3, [pc, #680]	; (8007184 <mem_manage_fault+0x2b8>)
 8006eda:	9306      	str	r3, [sp, #24]
 8006edc:	2300      	movs	r3, #0
 8006ede:	f8ad 3005 	strh.w	r3, [sp, #5]
 8006ee2:	f88d 3007 	strb.w	r3, [sp, #7]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f88d 2004 	strb.w	r2, [sp, #4]
 8006eec:	f88d 3006 	strb.w	r3, [sp, #6]
 8006ef0:	9a01      	ldr	r2, [sp, #4]
 8006ef2:	9205      	str	r2, [sp, #20]
 8006ef4:	461c      	mov	r4, r3
 8006ef6:	f363 0400 	bfi	r4, r3, #0, #1
 8006efa:	f363 0441 	bfi	r4, r3, #1, #1
 8006efe:	f363 0482 	bfi	r4, r3, #2, #1
 8006f02:	f363 04c5 	bfi	r4, r3, #3, #3
 8006f06:	2201      	movs	r2, #1
 8006f08:	f362 1488 	bfi	r4, r2, #6, #3
 8006f0c:	2208      	movs	r2, #8
 8006f0e:	f362 2452 	bfi	r4, r2, #9, #10
 8006f12:	f3c4 0212 	ubfx	r2, r4, #0, #19
 8006f16:	499c      	ldr	r1, [pc, #624]	; (8007188 <mem_manage_fault+0x2bc>)
 8006f18:	a802      	add	r0, sp, #8
 8006f1a:	f010 ff1a 	bl	8017d52 <z_log_msg2_finalize>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8006f1e:	4b9b      	ldr	r3, [pc, #620]	; (800718c <mem_manage_fault+0x2c0>)
 8006f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f22:	f013 0f10 	tst.w	r3, #16
 8006f26:	d135      	bne.n	8006f94 <mem_manage_fault+0xc8>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8006f28:	4b98      	ldr	r3, [pc, #608]	; (800718c <mem_manage_fault+0x2c0>)
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2c:	f013 0f08 	tst.w	r3, #8
 8006f30:	d154      	bne.n	8006fdc <mem_manage_fault+0x110>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8006f32:	4b96      	ldr	r3, [pc, #600]	; (800718c <mem_manage_fault+0x2c0>)
 8006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f36:	f013 0f02 	tst.w	r3, #2
 8006f3a:	d173      	bne.n	8007024 <mem_manage_fault+0x158>
	uint32_t mmfar = -EINVAL;
 8006f3c:	f06f 0815 	mvn.w	r8, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8006f40:	4b92      	ldr	r3, [pc, #584]	; (800718c <mem_manage_fault+0x2c0>)
 8006f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f44:	f013 0f01 	tst.w	r3, #1
 8006f48:	f040 80c7 	bne.w	80070da <mem_manage_fault+0x20e>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8006f4c:	4b8f      	ldr	r3, [pc, #572]	; (800718c <mem_manage_fault+0x2c0>)
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f50:	f013 0f20 	tst.w	r3, #32
 8006f54:	f040 80e5 	bne.w	8007122 <mem_manage_fault+0x256>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8006f58:	4b8c      	ldr	r3, [pc, #560]	; (800718c <mem_manage_fault+0x2c0>)
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5c:	f013 0f10 	tst.w	r3, #16
 8006f60:	d104      	bne.n	8006f6c <mem_manage_fault+0xa0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
 8006f62:	4b8a      	ldr	r3, [pc, #552]	; (800718c <mem_manage_fault+0x2c0>)
 8006f64:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
 8006f66:	f014 0402 	ands.w	r4, r4, #2
 8006f6a:	d005      	beq.n	8006f78 <mem_manage_fault+0xac>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
 8006f6c:	4b87      	ldr	r3, [pc, #540]	; (800718c <mem_manage_fault+0x2c0>)
 8006f6e:	685c      	ldr	r4, [r3, #4]
 8006f70:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8006f74:	f040 80f9 	bne.w	800716a <mem_manage_fault+0x29e>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8006f78:	4a84      	ldr	r2, [pc, #528]	; (800718c <mem_manage_fault+0x2c0>)
 8006f7a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006f7c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8006f80:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
 8006f82:	2101      	movs	r1, #1
 8006f84:	4628      	mov	r0, r5
 8006f86:	f011 fa69 	bl	801845c <memory_fault_recoverable>
 8006f8a:	7030      	strb	r0, [r6, #0]
}
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	b02c      	add	sp, #176	; 0xb0
 8006f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
 8006f94:	4b7e      	ldr	r3, [pc, #504]	; (8007190 <mem_manage_fault+0x2c4>)
 8006f96:	930c      	str	r3, [sp, #48]	; 0x30
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f8ad 3005 	strh.w	r3, [sp, #5]
 8006f9e:	f88d 3007 	strb.w	r3, [sp, #7]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f88d 2004 	strb.w	r2, [sp, #4]
 8006fa8:	f88d 3006 	strb.w	r3, [sp, #6]
 8006fac:	9a01      	ldr	r2, [sp, #4]
 8006fae:	920b      	str	r2, [sp, #44]	; 0x2c
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	f363 0200 	bfi	r2, r3, #0, #1
 8006fb6:	f363 0241 	bfi	r2, r3, #1, #1
 8006fba:	f363 0282 	bfi	r2, r3, #2, #1
 8006fbe:	f363 02c5 	bfi	r2, r3, #3, #3
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	f361 1288 	bfi	r2, r1, #6, #3
 8006fc8:	2108      	movs	r1, #8
 8006fca:	f361 2252 	bfi	r2, r1, #9, #10
 8006fce:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006fd2:	496d      	ldr	r1, [pc, #436]	; (8007188 <mem_manage_fault+0x2bc>)
 8006fd4:	a808      	add	r0, sp, #32
 8006fd6:	f010 febc 	bl	8017d52 <z_log_msg2_finalize>
 8006fda:	e7a5      	b.n	8006f28 <mem_manage_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
 8006fdc:	4b6d      	ldr	r3, [pc, #436]	; (8007194 <mem_manage_fault+0x2c8>)
 8006fde:	9312      	str	r3, [sp, #72]	; 0x48
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f8ad 3005 	strh.w	r3, [sp, #5]
 8006fe6:	f88d 3007 	strb.w	r3, [sp, #7]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f88d 2004 	strb.w	r2, [sp, #4]
 8006ff0:	f88d 3006 	strb.w	r3, [sp, #6]
 8006ff4:	9a01      	ldr	r2, [sp, #4]
 8006ff6:	9211      	str	r2, [sp, #68]	; 0x44
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	f363 0200 	bfi	r2, r3, #0, #1
 8006ffe:	f363 0241 	bfi	r2, r3, #1, #1
 8007002:	f363 0282 	bfi	r2, r3, #2, #1
 8007006:	f363 02c5 	bfi	r2, r3, #3, #3
 800700a:	2101      	movs	r1, #1
 800700c:	f361 1288 	bfi	r2, r1, #6, #3
 8007010:	2108      	movs	r1, #8
 8007012:	f361 2252 	bfi	r2, r1, #9, #10
 8007016:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800701a:	495b      	ldr	r1, [pc, #364]	; (8007188 <mem_manage_fault+0x2bc>)
 800701c:	a80e      	add	r0, sp, #56	; 0x38
 800701e:	f010 fe98 	bl	8017d52 <z_log_msg2_finalize>
 8007022:	e786      	b.n	8006f32 <mem_manage_fault+0x66>
		PR_FAULT_INFO("  Data Access Violation");
 8007024:	4b5c      	ldr	r3, [pc, #368]	; (8007198 <mem_manage_fault+0x2cc>)
 8007026:	9318      	str	r3, [sp, #96]	; 0x60
 8007028:	2300      	movs	r3, #0
 800702a:	f8ad 3005 	strh.w	r3, [sp, #5]
 800702e:	f88d 3007 	strb.w	r3, [sp, #7]
 8007032:	2202      	movs	r2, #2
 8007034:	f88d 2004 	strb.w	r2, [sp, #4]
 8007038:	f88d 3006 	strb.w	r3, [sp, #6]
 800703c:	9a01      	ldr	r2, [sp, #4]
 800703e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007040:	461a      	mov	r2, r3
 8007042:	f363 0200 	bfi	r2, r3, #0, #1
 8007046:	f363 0241 	bfi	r2, r3, #1, #1
 800704a:	f363 0282 	bfi	r2, r3, #2, #1
 800704e:	f363 02c5 	bfi	r2, r3, #3, #3
 8007052:	2101      	movs	r1, #1
 8007054:	f361 1288 	bfi	r2, r1, #6, #3
 8007058:	2108      	movs	r1, #8
 800705a:	f361 2252 	bfi	r2, r1, #9, #10
 800705e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007062:	4949      	ldr	r1, [pc, #292]	; (8007188 <mem_manage_fault+0x2bc>)
 8007064:	a814      	add	r0, sp, #80	; 0x50
 8007066:	f010 fe74 	bl	8017d52 <z_log_msg2_finalize>
		uint32_t temp = SCB->MMFAR;
 800706a:	4b48      	ldr	r3, [pc, #288]	; (800718c <mem_manage_fault+0x2c0>)
 800706c:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8007070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007072:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007076:	d102      	bne.n	800707e <mem_manage_fault+0x1b2>
	uint32_t mmfar = -EINVAL;
 8007078:	f06f 0815 	mvn.w	r8, #21
 800707c:	e760      	b.n	8006f40 <mem_manage_fault+0x74>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
 800707e:	4b47      	ldr	r3, [pc, #284]	; (800719c <mem_manage_fault+0x2d0>)
 8007080:	931e      	str	r3, [sp, #120]	; 0x78
 8007082:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
 8007086:	2300      	movs	r3, #0
 8007088:	f8ad 3005 	strh.w	r3, [sp, #5]
 800708c:	f88d 3007 	strb.w	r3, [sp, #7]
 8007090:	2203      	movs	r2, #3
 8007092:	f88d 2004 	strb.w	r2, [sp, #4]
 8007096:	f88d 3006 	strb.w	r3, [sp, #6]
 800709a:	9a01      	ldr	r2, [sp, #4]
 800709c:	921d      	str	r2, [sp, #116]	; 0x74
 800709e:	461a      	mov	r2, r3
 80070a0:	f363 0200 	bfi	r2, r3, #0, #1
 80070a4:	f363 0241 	bfi	r2, r3, #1, #1
 80070a8:	f363 0282 	bfi	r2, r3, #2, #1
 80070ac:	f363 02c5 	bfi	r2, r3, #3, #3
 80070b0:	2101      	movs	r1, #1
 80070b2:	f361 1288 	bfi	r2, r1, #6, #3
 80070b6:	210c      	movs	r1, #12
 80070b8:	f361 2252 	bfi	r2, r1, #9, #10
 80070bc:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80070c0:	4931      	ldr	r1, [pc, #196]	; (8007188 <mem_manage_fault+0x2bc>)
 80070c2:	a81a      	add	r0, sp, #104	; 0x68
 80070c4:	f010 fe45 	bl	8017d52 <z_log_msg2_finalize>
			if (from_hard_fault != 0) {
 80070c8:	2f00      	cmp	r7, #0
 80070ca:	f43f af39 	beq.w	8006f40 <mem_manage_fault+0x74>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 80070ce:	4a2f      	ldr	r2, [pc, #188]	; (800718c <mem_manage_fault+0x2c0>)
 80070d0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80070d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070d6:	6293      	str	r3, [r2, #40]	; 0x28
 80070d8:	e732      	b.n	8006f40 <mem_manage_fault+0x74>
		PR_FAULT_INFO("  Instruction Access Violation");
 80070da:	4b31      	ldr	r3, [pc, #196]	; (80071a0 <mem_manage_fault+0x2d4>)
 80070dc:	9324      	str	r3, [sp, #144]	; 0x90
 80070de:	2300      	movs	r3, #0
 80070e0:	f8ad 3005 	strh.w	r3, [sp, #5]
 80070e4:	f88d 3007 	strb.w	r3, [sp, #7]
 80070e8:	2202      	movs	r2, #2
 80070ea:	f88d 2004 	strb.w	r2, [sp, #4]
 80070ee:	f88d 3006 	strb.w	r3, [sp, #6]
 80070f2:	9a01      	ldr	r2, [sp, #4]
 80070f4:	9223      	str	r2, [sp, #140]	; 0x8c
 80070f6:	461a      	mov	r2, r3
 80070f8:	f363 0200 	bfi	r2, r3, #0, #1
 80070fc:	f363 0241 	bfi	r2, r3, #1, #1
 8007100:	f363 0282 	bfi	r2, r3, #2, #1
 8007104:	f363 02c5 	bfi	r2, r3, #3, #3
 8007108:	2101      	movs	r1, #1
 800710a:	f361 1288 	bfi	r2, r1, #6, #3
 800710e:	2108      	movs	r1, #8
 8007110:	f361 2252 	bfi	r2, r1, #9, #10
 8007114:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007118:	491b      	ldr	r1, [pc, #108]	; (8007188 <mem_manage_fault+0x2bc>)
 800711a:	a820      	add	r0, sp, #128	; 0x80
 800711c:	f010 fe19 	bl	8017d52 <z_log_msg2_finalize>
 8007120:	e714      	b.n	8006f4c <mem_manage_fault+0x80>
		PR_FAULT_INFO(
 8007122:	4b20      	ldr	r3, [pc, #128]	; (80071a4 <mem_manage_fault+0x2d8>)
 8007124:	932a      	str	r3, [sp, #168]	; 0xa8
 8007126:	2300      	movs	r3, #0
 8007128:	f8ad 3005 	strh.w	r3, [sp, #5]
 800712c:	f88d 3007 	strb.w	r3, [sp, #7]
 8007130:	2202      	movs	r2, #2
 8007132:	f88d 2004 	strb.w	r2, [sp, #4]
 8007136:	f88d 3006 	strb.w	r3, [sp, #6]
 800713a:	9a01      	ldr	r2, [sp, #4]
 800713c:	9229      	str	r2, [sp, #164]	; 0xa4
 800713e:	461a      	mov	r2, r3
 8007140:	f363 0200 	bfi	r2, r3, #0, #1
 8007144:	f363 0241 	bfi	r2, r3, #1, #1
 8007148:	f363 0282 	bfi	r2, r3, #2, #1
 800714c:	f363 02c5 	bfi	r2, r3, #3, #3
 8007150:	2101      	movs	r1, #1
 8007152:	f361 1288 	bfi	r2, r1, #6, #3
 8007156:	2108      	movs	r1, #8
 8007158:	f361 2252 	bfi	r2, r1, #9, #10
 800715c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007160:	4909      	ldr	r1, [pc, #36]	; (8007188 <mem_manage_fault+0x2bc>)
 8007162:	a826      	add	r0, sp, #152	; 0x98
 8007164:	f010 fdf5 	bl	8017d52 <z_log_msg2_finalize>
 8007168:	e6f6      	b.n	8006f58 <mem_manage_fault+0x8c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
 800716a:	4629      	mov	r1, r5
 800716c:	4640      	mov	r0, r8
 800716e:	f7ff fb3b 	bl	80067e8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
 8007172:	4604      	mov	r4, r0
 8007174:	2800      	cmp	r0, #0
 8007176:	f43f aeff 	beq.w	8006f78 <mem_manage_fault+0xac>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 800717a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
 800717e:	2402      	movs	r4, #2
 8007180:	e6fa      	b.n	8006f78 <mem_manage_fault+0xac>
 8007182:	bf00      	nop
 8007184:	0801de10 	.word	0x0801de10
 8007188:	0801d7e0 	.word	0x0801d7e0
 800718c:	e000ed00 	.word	0xe000ed00
 8007190:	0801de28 	.word	0x0801de28
 8007194:	0801dc20 	.word	0x0801dc20
 8007198:	0801de5c 	.word	0x0801de5c
 800719c:	0801de74 	.word	0x0801de74
 80071a0:	0801de8c 	.word	0x0801de8c
 80071a4:	0801dc9c 	.word	0x0801dc9c

080071a8 <hard_fault>:
{
 80071a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071aa:	b0a1      	sub	sp, #132	; 0x84
 80071ac:	4607      	mov	r7, r0
 80071ae:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
 80071b0:	4b77      	ldr	r3, [pc, #476]	; (8007390 <hard_fault+0x1e8>)
 80071b2:	9306      	str	r3, [sp, #24]
 80071b4:	2400      	movs	r4, #0
 80071b6:	f8ad 4005 	strh.w	r4, [sp, #5]
 80071ba:	f88d 4007 	strb.w	r4, [sp, #7]
 80071be:	2302      	movs	r3, #2
 80071c0:	f88d 3004 	strb.w	r3, [sp, #4]
 80071c4:	f88d 4006 	strb.w	r4, [sp, #6]
 80071c8:	9b01      	ldr	r3, [sp, #4]
 80071ca:	9305      	str	r3, [sp, #20]
 80071cc:	4622      	mov	r2, r4
 80071ce:	f364 0200 	bfi	r2, r4, #0, #1
 80071d2:	f364 0241 	bfi	r2, r4, #1, #1
 80071d6:	f364 0282 	bfi	r2, r4, #2, #1
 80071da:	f364 02c5 	bfi	r2, r4, #3, #3
 80071de:	2301      	movs	r3, #1
 80071e0:	f363 1288 	bfi	r2, r3, #6, #3
 80071e4:	2308      	movs	r3, #8
 80071e6:	f363 2252 	bfi	r2, r3, #9, #10
 80071ea:	4623      	mov	r3, r4
 80071ec:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80071f0:	4968      	ldr	r1, [pc, #416]	; (8007394 <hard_fault+0x1ec>)
 80071f2:	a802      	add	r0, sp, #8
 80071f4:	f010 fdad 	bl	8017d52 <z_log_msg2_finalize>
	*recoverable = false;
 80071f8:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80071fa:	4b67      	ldr	r3, [pc, #412]	; (8007398 <hard_fault+0x1f0>)
 80071fc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80071fe:	f015 0502 	ands.w	r5, r5, #2
 8007202:	d10a      	bne.n	800721a <hard_fault+0x72>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
 8007204:	4b64      	ldr	r3, [pc, #400]	; (8007398 <hard_fault+0x1f0>)
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	2b00      	cmp	r3, #0
 800720a:	db2b      	blt.n	8007264 <hard_fault+0xbc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 800720c:	4b62      	ldr	r3, [pc, #392]	; (8007398 <hard_fault+0x1f0>)
 800720e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007210:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 8007214:	d14b      	bne.n	80072ae <hard_fault+0x106>
}
 8007216:	b021      	add	sp, #132	; 0x84
 8007218:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
 800721a:	4b60      	ldr	r3, [pc, #384]	; (800739c <hard_fault+0x1f4>)
 800721c:	931e      	str	r3, [sp, #120]	; 0x78
 800721e:	f8ad 4005 	strh.w	r4, [sp, #5]
 8007222:	f88d 4007 	strb.w	r4, [sp, #7]
 8007226:	2302      	movs	r3, #2
 8007228:	f88d 3004 	strb.w	r3, [sp, #4]
 800722c:	f88d 4006 	strb.w	r4, [sp, #6]
 8007230:	9b01      	ldr	r3, [sp, #4]
 8007232:	931d      	str	r3, [sp, #116]	; 0x74
 8007234:	4622      	mov	r2, r4
 8007236:	f364 0200 	bfi	r2, r4, #0, #1
 800723a:	f364 0241 	bfi	r2, r4, #1, #1
 800723e:	f364 0282 	bfi	r2, r4, #2, #1
 8007242:	f364 02c5 	bfi	r2, r4, #3, #3
 8007246:	2301      	movs	r3, #1
 8007248:	f363 1288 	bfi	r2, r3, #6, #3
 800724c:	2308      	movs	r3, #8
 800724e:	f363 2252 	bfi	r2, r3, #9, #10
 8007252:	4623      	mov	r3, r4
 8007254:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007258:	494e      	ldr	r1, [pc, #312]	; (8007394 <hard_fault+0x1ec>)
 800725a:	a81a      	add	r0, sp, #104	; 0x68
 800725c:	f010 fd79 	bl	8017d52 <z_log_msg2_finalize>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 8007260:	4620      	mov	r0, r4
 8007262:	e7d8      	b.n	8007216 <hard_fault+0x6e>
		PR_EXC("  Debug event");
 8007264:	4b4e      	ldr	r3, [pc, #312]	; (80073a0 <hard_fault+0x1f8>)
 8007266:	9318      	str	r3, [sp, #96]	; 0x60
 8007268:	2300      	movs	r3, #0
 800726a:	f8ad 3005 	strh.w	r3, [sp, #5]
 800726e:	f88d 3007 	strb.w	r3, [sp, #7]
 8007272:	2202      	movs	r2, #2
 8007274:	f88d 2004 	strb.w	r2, [sp, #4]
 8007278:	f88d 3006 	strb.w	r3, [sp, #6]
 800727c:	9a01      	ldr	r2, [sp, #4]
 800727e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007280:	461a      	mov	r2, r3
 8007282:	f363 0200 	bfi	r2, r3, #0, #1
 8007286:	f363 0241 	bfi	r2, r3, #1, #1
 800728a:	f363 0282 	bfi	r2, r3, #2, #1
 800728e:	f363 02c5 	bfi	r2, r3, #3, #3
 8007292:	2101      	movs	r1, #1
 8007294:	f361 1288 	bfi	r2, r1, #6, #3
 8007298:	2108      	movs	r1, #8
 800729a:	f361 2252 	bfi	r2, r1, #9, #10
 800729e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80072a2:	493c      	ldr	r1, [pc, #240]	; (8007394 <hard_fault+0x1ec>)
 80072a4:	a814      	add	r0, sp, #80	; 0x50
 80072a6:	f010 fd54 	bl	8017d52 <z_log_msg2_finalize>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80072aa:	4628      	mov	r0, r5
 80072ac:	e7b3      	b.n	8007216 <hard_fault+0x6e>
		PR_EXC("  Fault escalation (see below)");
 80072ae:	4b3d      	ldr	r3, [pc, #244]	; (80073a4 <hard_fault+0x1fc>)
 80072b0:	930c      	str	r3, [sp, #48]	; 0x30
 80072b2:	2300      	movs	r3, #0
 80072b4:	f8ad 3005 	strh.w	r3, [sp, #5]
 80072b8:	f88d 3007 	strb.w	r3, [sp, #7]
 80072bc:	2202      	movs	r2, #2
 80072be:	f88d 2004 	strb.w	r2, [sp, #4]
 80072c2:	f88d 3006 	strb.w	r3, [sp, #6]
 80072c6:	9a01      	ldr	r2, [sp, #4]
 80072c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80072ca:	461a      	mov	r2, r3
 80072cc:	f363 0200 	bfi	r2, r3, #0, #1
 80072d0:	f363 0241 	bfi	r2, r3, #1, #1
 80072d4:	f363 0282 	bfi	r2, r3, #2, #1
 80072d8:	f363 02c5 	bfi	r2, r3, #3, #3
 80072dc:	2101      	movs	r1, #1
 80072de:	f361 1288 	bfi	r2, r1, #6, #3
 80072e2:	2108      	movs	r1, #8
 80072e4:	f361 2252 	bfi	r2, r1, #9, #10
 80072e8:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80072ec:	4929      	ldr	r1, [pc, #164]	; (8007394 <hard_fault+0x1ec>)
 80072ee:	a808      	add	r0, sp, #32
 80072f0:	f010 fd2f 	bl	8017d52 <z_log_msg2_finalize>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
 80072f4:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
 80072f6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
 80072fa:	f64d 7302 	movw	r3, #57090	; 0xdf02
 80072fe:	429a      	cmp	r2, r3
 8007300:	d00e      	beq.n	8007320 <hard_fault+0x178>
		} else if (SCB_MMFSR != 0) {
 8007302:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8007306:	f603 6326 	addw	r3, r3, #3622	; 0xe26
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	bb7b      	cbnz	r3, 800736e <hard_fault+0x1c6>
		} else if (SCB_BFSR != 0) {
 800730e:	4b26      	ldr	r3, [pc, #152]	; (80073a8 <hard_fault+0x200>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	bb93      	cbnz	r3, 800737a <hard_fault+0x1d2>
		} else if (SCB_UFSR != 0) {
 8007314:	4b25      	ldr	r3, [pc, #148]	; (80073ac <hard_fault+0x204>)
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	b29b      	uxth	r3, r3
 800731a:	bba3      	cbnz	r3, 8007386 <hard_fault+0x1de>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800731c:	4628      	mov	r0, r5
	return reason;
 800731e:	e77a      	b.n	8007216 <hard_fault+0x6e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
 8007320:	4b23      	ldr	r3, [pc, #140]	; (80073b0 <hard_fault+0x208>)
 8007322:	9312      	str	r3, [sp, #72]	; 0x48
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	9313      	str	r3, [sp, #76]	; 0x4c
 8007328:	2300      	movs	r3, #0
 800732a:	f8ad 3005 	strh.w	r3, [sp, #5]
 800732e:	f88d 3007 	strb.w	r3, [sp, #7]
 8007332:	2203      	movs	r2, #3
 8007334:	f88d 2004 	strb.w	r2, [sp, #4]
 8007338:	f88d 3006 	strb.w	r3, [sp, #6]
 800733c:	9a01      	ldr	r2, [sp, #4]
 800733e:	9211      	str	r2, [sp, #68]	; 0x44
 8007340:	461a      	mov	r2, r3
 8007342:	f363 0200 	bfi	r2, r3, #0, #1
 8007346:	f363 0241 	bfi	r2, r3, #1, #1
 800734a:	f363 0282 	bfi	r2, r3, #2, #1
 800734e:	f363 02c5 	bfi	r2, r3, #3, #3
 8007352:	2101      	movs	r1, #1
 8007354:	f361 1288 	bfi	r2, r1, #6, #3
 8007358:	210c      	movs	r1, #12
 800735a:	f361 2252 	bfi	r2, r1, #9, #10
 800735e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007362:	490c      	ldr	r1, [pc, #48]	; (8007394 <hard_fault+0x1ec>)
 8007364:	a80e      	add	r0, sp, #56	; 0x38
 8007366:	f010 fcf4 	bl	8017d52 <z_log_msg2_finalize>
			reason = esf->basic.r0;
 800736a:	6838      	ldr	r0, [r7, #0]
 800736c:	e753      	b.n	8007216 <hard_fault+0x6e>
			reason = mem_manage_fault(esf, 1, recoverable);
 800736e:	4632      	mov	r2, r6
 8007370:	2101      	movs	r1, #1
 8007372:	4638      	mov	r0, r7
 8007374:	f7ff fdaa 	bl	8006ecc <mem_manage_fault>
 8007378:	e74d      	b.n	8007216 <hard_fault+0x6e>
			reason = bus_fault(esf, 1, recoverable);
 800737a:	4632      	mov	r2, r6
 800737c:	2101      	movs	r1, #1
 800737e:	4638      	mov	r0, r7
 8007380:	f7ff faa6 	bl	80068d0 <bus_fault>
 8007384:	e747      	b.n	8007216 <hard_fault+0x6e>
			reason = usage_fault(esf);
 8007386:	4638      	mov	r0, r7
 8007388:	f7ff fc18 	bl	8006bbc <usage_fault>
 800738c:	e743      	b.n	8007216 <hard_fault+0x6e>
 800738e:	bf00      	nop
 8007390:	0801deac 	.word	0x0801deac
 8007394:	0801d7e0 	.word	0x0801d7e0
 8007398:	e000ed00 	.word	0xe000ed00
 800739c:	0801dec4 	.word	0x0801dec4
 80073a0:	0801dee8 	.word	0x0801dee8
 80073a4:	0801def8 	.word	0x0801def8
 80073a8:	e000ed29 	.word	0xe000ed29
 80073ac:	e000ed2a 	.word	0xe000ed2a
 80073b0:	0801df18 	.word	0x0801df18

080073b4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
 80073b4:	b570      	push	{r4, r5, r6, lr}
 80073b6:	b0a2      	sub	sp, #136	; 0x88
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80073b8:	4b34      	ldr	r3, [pc, #208]	; (800748c <z_arm_fault+0xd8>)
 80073ba:	685d      	ldr	r5, [r3, #4]
 80073bc:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80073c0:	2300      	movs	r3, #0
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80073ca:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
 80073ce:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80073d2:	d13d      	bne.n	8007450 <z_arm_fault+0x9c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80073d4:	f002 030c 	and.w	r3, r2, #12
 80073d8:	2b08      	cmp	r3, #8
 80073da:	d010      	beq.n	80073fe <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80073dc:	f012 0f08 	tst.w	r2, #8
 80073e0:	d033      	beq.n	800744a <z_arm_fault+0x96>
			ptr_esf =  (z_arch_esf_t *)psp;
 80073e2:	460c      	mov	r4, r1
	*nested_exc = false;
 80073e4:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
 80073e6:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
 80073ea:	4629      	mov	r1, r5
 80073ec:	4620      	mov	r0, r4
 80073ee:	f011 f844 	bl	801847a <fault_handle>
 80073f2:	4605      	mov	r5, r0
	if (recoverable) {
 80073f4:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
 80073f8:	b36b      	cbz	r3, 8007456 <z_arm_fault+0xa2>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
 80073fa:	b022      	add	sp, #136	; 0x88
 80073fc:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
 80073fe:	4b24      	ldr	r3, [pc, #144]	; (8007490 <z_arm_fault+0xdc>)
 8007400:	9320      	str	r3, [sp, #128]	; 0x80
 8007402:	2400      	movs	r4, #0
 8007404:	f8ad 4001 	strh.w	r4, [sp, #1]
 8007408:	f88d 4003 	strb.w	r4, [sp, #3]
 800740c:	2302      	movs	r3, #2
 800740e:	f88d 3000 	strb.w	r3, [sp]
 8007412:	f88d 4002 	strb.w	r4, [sp, #2]
 8007416:	9b00      	ldr	r3, [sp, #0]
 8007418:	931f      	str	r3, [sp, #124]	; 0x7c
 800741a:	4622      	mov	r2, r4
 800741c:	f364 0200 	bfi	r2, r4, #0, #1
 8007420:	f364 0241 	bfi	r2, r4, #1, #1
 8007424:	f364 0282 	bfi	r2, r4, #2, #1
 8007428:	f364 02c5 	bfi	r2, r4, #3, #3
 800742c:	2301      	movs	r3, #1
 800742e:	f363 1288 	bfi	r2, r3, #6, #3
 8007432:	2308      	movs	r3, #8
 8007434:	f363 2252 	bfi	r2, r3, #9, #10
 8007438:	4623      	mov	r3, r4
 800743a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800743e:	4915      	ldr	r1, [pc, #84]	; (8007494 <z_arm_fault+0xe0>)
 8007440:	a81c      	add	r0, sp, #112	; 0x70
 8007442:	f010 fc86 	bl	8017d52 <z_log_msg2_finalize>
	*nested_exc = false;
 8007446:	4626      	mov	r6, r4
		return NULL;
 8007448:	e7cd      	b.n	80073e6 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 800744a:	4604      	mov	r4, r0
			*nested_exc = true;
 800744c:	2601      	movs	r6, #1
 800744e:	e7ca      	b.n	80073e6 <z_arm_fault+0x32>
	*nested_exc = false;
 8007450:	2600      	movs	r6, #0
		return NULL;
 8007452:	4634      	mov	r4, r6
 8007454:	e7c7      	b.n	80073e6 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8007456:	2268      	movs	r2, #104	; 0x68
 8007458:	4621      	mov	r1, r4
 800745a:	a801      	add	r0, sp, #4
 800745c:	f015 f9ec 	bl	801c838 <memcpy>
	if (nested_exc) {
 8007460:	b14e      	cbz	r6, 8007476 <z_arm_fault+0xc2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8007462:	9b08      	ldr	r3, [sp, #32]
 8007464:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007468:	b95a      	cbnz	r2, 8007482 <z_arm_fault+0xce>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 800746a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 800746e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8007472:	9308      	str	r3, [sp, #32]
 8007474:	e005      	b.n	8007482 <z_arm_fault+0xce>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8007476:	9b08      	ldr	r3, [sp, #32]
 8007478:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800747c:	f023 0301 	bic.w	r3, r3, #1
 8007480:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
 8007482:	a901      	add	r1, sp, #4
 8007484:	4628      	mov	r0, r5
 8007486:	f010 ffbd 	bl	8018404 <z_arm_fatal_error>
 800748a:	e7b6      	b.n	80073fa <z_arm_fault+0x46>
 800748c:	e000ed00 	.word	0xe000ed00
 8007490:	0801df34 	.word	0x0801df34
 8007494:	0801d7e0 	.word	0x0801d7e0

08007498 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8007498:	4a02      	ldr	r2, [pc, #8]	; (80074a4 <z_arm_fault_init+0xc>)
 800749a:	6953      	ldr	r3, [r2, #20]
 800749c:	f043 0310 	orr.w	r3, r3, #16
 80074a0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 80074a2:	4770      	bx	lr
 80074a4:	e000ed00 	.word	0xe000ed00

080074a8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 80074a8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 80074ac:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
 80074b0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
 80074b2:	4672      	mov	r2, lr
	bl z_arm_fault
 80074b4:	f7ff ff7e 	bl	80073b4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
 80074b8:	bd01      	pop	{r0, pc}
 80074ba:	bf00      	nop

080074bc <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 80074bc:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80074be:	e006      	b.n	80074ce <z_arm_interrupt_init+0x12>
 80074c0:	f002 010f 	and.w	r1, r2, #15
 80074c4:	4b09      	ldr	r3, [pc, #36]	; (80074ec <z_arm_interrupt_init+0x30>)
 80074c6:	440b      	add	r3, r1
 80074c8:	2104      	movs	r1, #4
 80074ca:	7619      	strb	r1, [r3, #24]
 80074cc:	3201      	adds	r2, #1
 80074ce:	2a6f      	cmp	r2, #111	; 0x6f
 80074d0:	dc0a      	bgt.n	80074e8 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
 80074d2:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	dbf3      	blt.n	80074c0 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074d8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80074dc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80074e0:	2104      	movs	r1, #4
 80074e2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
 80074e6:	e7f1      	b.n	80074cc <z_arm_interrupt_init+0x10>
	}
}
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	e000ecfc 	.word	0xe000ecfc

080074f0 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
 80074f0:	f7fd fed0 	bl	8005294 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80074f4:	2004      	movs	r0, #4
    msr BASEPRI, r0
 80074f6:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
 80074fa:	480b      	ldr	r0, [pc, #44]	; (8007528 <__start+0x38>)
    ldr r1, =0xaa
 80074fc:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 8007500:	f44f 6202 	mov.w	r2, #2080	; 0x820
    bl memset
 8007504:	f015 f9b9 	bl	801c87a <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8007508:	4807      	ldr	r0, [pc, #28]	; (8007528 <__start+0x38>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
 800750a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
 800750e:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8007510:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8007514:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8007518:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 800751a:	4308      	orrs	r0, r1
    msr CONTROL, r0
 800751c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8007520:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8007524:	f7ff f838 	bl	8006598 <z_arm_prep_c>
    ldr r0, =z_interrupt_stacks
 8007528:	20009980 	.word	0x20009980

0800752c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
 800752c:	b508      	push	{r3, lr}
	if (_current == thread) {
 800752e:	4b08      	ldr	r3, [pc, #32]	; (8007550 <z_impl_k_thread_abort+0x24>)
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	4283      	cmp	r3, r0
 8007534:	d002      	beq.n	800753c <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
 8007536:	f00f f8a3 	bl	8016680 <z_thread_abort>
}
 800753a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800753c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
 8007540:	2b00      	cmp	r3, #0
 8007542:	d0f8      	beq.n	8007536 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8007544:	4a03      	ldr	r2, [pc, #12]	; (8007554 <z_impl_k_thread_abort+0x28>)
 8007546:	6853      	ldr	r3, [r2, #4]
 8007548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800754c:	6053      	str	r3, [r2, #4]
 800754e:	e7f2      	b.n	8007536 <z_impl_k_thread_abort+0xa>
 8007550:	20003c14 	.word	0x20003c14
 8007554:	e000ed00 	.word	0xe000ed00

08007558 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 8007558:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 800755a:	4b03      	ldr	r3, [pc, #12]	; (8007568 <z_arm_configure_static_mpu_regions+0x10>)
 800755c:	4a03      	ldr	r2, [pc, #12]	; (800756c <z_arm_configure_static_mpu_regions+0x14>)
 800755e:	2101      	movs	r1, #1
 8007560:	4803      	ldr	r0, [pc, #12]	; (8007570 <z_arm_configure_static_mpu_regions+0x18>)
 8007562:	f010 ffdf 	bl	8018524 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 8007566:	bd08      	pop	{r3, pc}
 8007568:	20010000 	.word	0x20010000
 800756c:	20000000 	.word	0x20000000
 8007570:	0801df64 	.word	0x0801df64

08007574 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8007574:	b510      	push	{r4, lr}
 8007576:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
 8007578:	f7ff f8f0 	bl	800675c <z_arm_mpu_stack_guard_and_fpu_adjust>
 800757c:	4603      	mov	r3, r0
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
 800757e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8007582:	1a12      	subs	r2, r2, r0
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
 8007584:	4804      	ldr	r0, [pc, #16]	; (8007598 <z_arm_configure_dynamic_mpu_regions+0x24>)
 8007586:	6002      	str	r2, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
 8007588:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
 800758a:	4b04      	ldr	r3, [pc, #16]	; (800759c <z_arm_configure_dynamic_mpu_regions+0x28>)
 800758c:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
 800758e:	2101      	movs	r1, #1
 8007590:	f010 ffcc 	bl	801852c <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
 8007594:	bd10      	pop	{r4, pc}
 8007596:	bf00      	nop
 8007598:	200030fc 	.word	0x200030fc
 800759c:	150b0000 	.word	0x150b0000

080075a0 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
 80075a0:	4a06      	ldr	r2, [pc, #24]	; (80075bc <region_init+0x1c>)
 80075a2:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80075a4:	680b      	ldr	r3, [r1, #0]
 80075a6:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80075aa:	4303      	orrs	r3, r0
 80075ac:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80075b0:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80075b2:	688b      	ldr	r3, [r1, #8]
 80075b4:	f043 0301 	orr.w	r3, r3, #1
 80075b8:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
 80075ba:	4770      	bx	lr
 80075bc:	e000ed90 	.word	0xe000ed90

080075c0 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
 80075c0:	b510      	push	{r4, lr}
 80075c2:	b088      	sub	sp, #32
 80075c4:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
 80075c6:	2807      	cmp	r0, #7
 80075c8:	d804      	bhi.n	80075d4 <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
 80075ca:	f7ff ffe9 	bl	80075a0 <region_init>

	return index;
 80075ce:	4620      	mov	r0, r4
}
 80075d0:	b008      	add	sp, #32
 80075d2:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
 80075d4:	4b13      	ldr	r3, [pc, #76]	; (8007624 <region_allocate_and_init+0x64>)
 80075d6:	9306      	str	r3, [sp, #24]
 80075d8:	9007      	str	r0, [sp, #28]
 80075da:	2300      	movs	r3, #0
 80075dc:	f8ad 3005 	strh.w	r3, [sp, #5]
 80075e0:	f88d 3007 	strb.w	r3, [sp, #7]
 80075e4:	2203      	movs	r2, #3
 80075e6:	f88d 2004 	strb.w	r2, [sp, #4]
 80075ea:	f88d 3006 	strb.w	r3, [sp, #6]
 80075ee:	9a01      	ldr	r2, [sp, #4]
 80075f0:	9205      	str	r2, [sp, #20]
 80075f2:	461a      	mov	r2, r3
 80075f4:	f363 0200 	bfi	r2, r3, #0, #1
 80075f8:	f363 0241 	bfi	r2, r3, #1, #1
 80075fc:	f363 0282 	bfi	r2, r3, #2, #1
 8007600:	f363 02c5 	bfi	r2, r3, #3, #3
 8007604:	2101      	movs	r1, #1
 8007606:	f361 1288 	bfi	r2, r1, #6, #3
 800760a:	210c      	movs	r1, #12
 800760c:	f361 2252 	bfi	r2, r1, #9, #10
 8007610:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007614:	4904      	ldr	r1, [pc, #16]	; (8007628 <region_allocate_and_init+0x68>)
 8007616:	a802      	add	r0, sp, #8
 8007618:	f010 fb9b 	bl	8017d52 <z_log_msg2_finalize>
		return -EINVAL;
 800761c:	f06f 0015 	mvn.w	r0, #21
 8007620:	e7d6      	b.n	80075d0 <region_allocate_and_init+0x10>
 8007622:	bf00      	nop
 8007624:	0801df70 	.word	0x0801df70
 8007628:	0801d718 	.word	0x0801d718

0800762c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 800762c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007630:	b089      	sub	sp, #36	; 0x24
 8007632:	4680      	mov	r8, r0
 8007634:	460f      	mov	r7, r1
 8007636:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
 8007638:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
 800763a:	2500      	movs	r5, #0
 800763c:	e009      	b.n	8007652 <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
 800763e:	4621      	mov	r1, r4
 8007640:	b2f0      	uxtb	r0, r6
 8007642:	f010 ff50 	bl	80184e6 <mpu_configure_region>
 8007646:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
 8007648:	f110 0f16 	cmn.w	r0, #22
 800764c:	d038      	beq.n	80076c0 <mpu_configure_regions+0x94>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
 800764e:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
 8007650:	3501      	adds	r5, #1
 8007652:	42bd      	cmp	r5, r7
 8007654:	da34      	bge.n	80076c0 <mpu_configure_regions+0x94>
		if (regions[i].size == 0U) {
 8007656:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800765a:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 800765e:	6862      	ldr	r2, [r4, #4]
 8007660:	2a00      	cmp	r2, #0
 8007662:	d0f5      	beq.n	8007650 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
 8007664:	f1b9 0f00 	cmp.w	r9, #0
 8007668:	d0e9      	beq.n	800763e <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
 800766a:	4620      	mov	r0, r4
 800766c:	f010 ff2a 	bl	80184c4 <mpu_partition_is_valid>
		if (do_sanity_check &&
 8007670:	2800      	cmp	r0, #0
 8007672:	d1e4      	bne.n	800763e <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
 8007674:	4b14      	ldr	r3, [pc, #80]	; (80076c8 <mpu_configure_regions+0x9c>)
 8007676:	9306      	str	r3, [sp, #24]
 8007678:	9507      	str	r5, [sp, #28]
 800767a:	2300      	movs	r3, #0
 800767c:	f8ad 3005 	strh.w	r3, [sp, #5]
 8007680:	f88d 3007 	strb.w	r3, [sp, #7]
 8007684:	2203      	movs	r2, #3
 8007686:	f88d 2004 	strb.w	r2, [sp, #4]
 800768a:	f88d 3006 	strb.w	r3, [sp, #6]
 800768e:	9a01      	ldr	r2, [sp, #4]
 8007690:	9205      	str	r2, [sp, #20]
 8007692:	461a      	mov	r2, r3
 8007694:	f363 0200 	bfi	r2, r3, #0, #1
 8007698:	f363 0241 	bfi	r2, r3, #1, #1
 800769c:	f363 0282 	bfi	r2, r3, #2, #1
 80076a0:	f363 02c5 	bfi	r2, r3, #3, #3
 80076a4:	2101      	movs	r1, #1
 80076a6:	f361 1288 	bfi	r2, r1, #6, #3
 80076aa:	210c      	movs	r1, #12
 80076ac:	f361 2252 	bfi	r2, r1, #9, #10
 80076b0:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80076b4:	4905      	ldr	r1, [pc, #20]	; (80076cc <mpu_configure_regions+0xa0>)
 80076b6:	a802      	add	r0, sp, #8
 80076b8:	f010 fb4b 	bl	8017d52 <z_log_msg2_finalize>
			return -EINVAL;
 80076bc:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
 80076c0:	4630      	mov	r0, r6
 80076c2:	b009      	add	sp, #36	; 0x24
 80076c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076c8:	0801df98 	.word	0x0801df98
 80076cc:	0801d718 	.word	0x0801d718

080076d0 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
 80076d0:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
 80076d2:	4c03      	ldr	r4, [pc, #12]	; (80076e0 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 80076d4:	2301      	movs	r3, #1
 80076d6:	7822      	ldrb	r2, [r4, #0]
 80076d8:	f7ff ffa8 	bl	800762c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 80076dc:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
 80076de:	bd10      	pop	{r4, pc}
 80076e0:	20003c74 	.word	0x20003c74

080076e4 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
 80076e4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 80076e6:	2300      	movs	r3, #0
 80076e8:	4a08      	ldr	r2, [pc, #32]	; (800770c <mpu_configure_dynamic_mpu_regions+0x28>)
 80076ea:	7812      	ldrb	r2, [r2, #0]
 80076ec:	f7ff ff9e 	bl	800762c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 80076f0:	f110 0f16 	cmn.w	r0, #22
 80076f4:	d008      	beq.n	8007708 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b07      	cmp	r3, #7
 80076fa:	dc05      	bgt.n	8007708 <mpu_configure_dynamic_mpu_regions+0x24>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 80076fc:	4a04      	ldr	r2, [pc, #16]	; (8007710 <mpu_configure_dynamic_mpu_regions+0x2c>)
 80076fe:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
 8007700:	2100      	movs	r1, #0
 8007702:	6111      	str	r1, [r2, #16]
 8007704:	3301      	adds	r3, #1
 8007706:	e7f7      	b.n	80076f8 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
 8007708:	bd08      	pop	{r3, pc}
 800770a:	bf00      	nop
 800770c:	20003c74 	.word	0x20003c74
 8007710:	e000ed90 	.word	0xe000ed90

08007714 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8007714:	4b03      	ldr	r3, [pc, #12]	; (8007724 <arm_core_mpu_enable+0x10>)
 8007716:	2205      	movs	r2, #5
 8007718:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800771a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800771e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8007722:	4770      	bx	lr
 8007724:	e000ed90 	.word	0xe000ed90

08007728 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8007728:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 800772c:	4b01      	ldr	r3, [pc, #4]	; (8007734 <arm_core_mpu_disable+0xc>)
 800772e:	2200      	movs	r2, #0
 8007730:	605a      	str	r2, [r3, #4]
}
 8007732:	4770      	bx	lr
 8007734:	e000ed90 	.word	0xe000ed90

08007738 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
 8007738:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 800773a:	4b0e      	ldr	r3, [pc, #56]	; (8007774 <z_arm_mpu_init+0x3c>)
 800773c:	681d      	ldr	r5, [r3, #0]
 800773e:	2d08      	cmp	r5, #8
 8007740:	d815      	bhi.n	800776e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 8007742:	f7ff fff1 	bl	8007728 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8007746:	2400      	movs	r4, #0
 8007748:	42a5      	cmp	r5, r4
 800774a:	d90a      	bls.n	8007762 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
 800774c:	4b09      	ldr	r3, [pc, #36]	; (8007774 <z_arm_mpu_init+0x3c>)
 800774e:	6859      	ldr	r1, [r3, #4]
 8007750:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8007754:	0093      	lsls	r3, r2, #2
 8007756:	4419      	add	r1, r3
 8007758:	4620      	mov	r0, r4
 800775a:	f7ff ff21 	bl	80075a0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800775e:	3401      	adds	r4, #1
 8007760:	e7f2      	b.n	8007748 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8007762:	4b05      	ldr	r3, [pc, #20]	; (8007778 <z_arm_mpu_init+0x40>)
 8007764:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
 8007766:	f7ff ffd5 	bl	8007714 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
 800776a:	2000      	movs	r0, #0
}
 800776c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
 800776e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007772:	e7fb      	b.n	800776c <z_arm_mpu_init+0x34>
 8007774:	0801dfec 	.word	0x0801dfec
 8007778:	20003c74 	.word	0x20003c74

0800777c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 800777c:	4b01      	ldr	r3, [pc, #4]	; (8007784 <__stdout_hook_install+0x8>)
 800777e:	6018      	str	r0, [r3, #0]
}
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	20000808 	.word	0x20000808

08007788 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	4605      	mov	r5, r0
 800778c:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 800778e:	2400      	movs	r4, #0
 8007790:	e004      	b.n	800779c <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
 8007792:	4b09      	ldr	r3, [pc, #36]	; (80077b8 <z_impl_zephyr_write_stdout+0x30>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	7830      	ldrb	r0, [r6, #0]
 8007798:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
 800779a:	3401      	adds	r4, #1
 800779c:	42bc      	cmp	r4, r7
 800779e:	da08      	bge.n	80077b2 <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
 80077a0:	192e      	adds	r6, r5, r4
 80077a2:	5d2b      	ldrb	r3, [r5, r4]
 80077a4:	2b0a      	cmp	r3, #10
 80077a6:	d1f4      	bne.n	8007792 <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
 80077a8:	4b03      	ldr	r3, [pc, #12]	; (80077b8 <z_impl_zephyr_write_stdout+0x30>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	200d      	movs	r0, #13
 80077ae:	4798      	blx	r3
 80077b0:	e7ef      	b.n	8007792 <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
 80077b2:	4638      	mov	r0, r7
 80077b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077b6:	bf00      	nop
 80077b8:	20000808 	.word	0x20000808

080077bc <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
 80077bc:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
 80077be:	4b08      	ldr	r3, [pc, #32]	; (80077e0 <_sbrk+0x24>)
 80077c0:	6819      	ldr	r1, [r3, #0]
 80077c2:	4b08      	ldr	r3, [pc, #32]	; (80077e4 <_sbrk+0x28>)
 80077c4:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 80077c6:	440a      	add	r2, r1
 80077c8:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
 80077cc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d202      	bcs.n	80077da <_sbrk+0x1e>
		heap_sz += count;
 80077d4:	4b02      	ldr	r3, [pc, #8]	; (80077e0 <_sbrk+0x24>)
 80077d6:	601a      	str	r2, [r3, #0]
		ret = ptr;
 80077d8:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
 80077da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
 80077de:	4770      	bx	lr
 80077e0:	20003108 	.word	0x20003108
 80077e4:	2000e234 	.word	0x2000e234

080077e8 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
 80077e8:	b508      	push	{r3, lr}
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
 80077ea:	221d      	movs	r2, #29
 80077ec:	4904      	ldr	r1, [pc, #16]	; (8007800 <__chk_fail+0x18>)
 80077ee:	2002      	movs	r0, #2
 80077f0:	f010 fea5 	bl	801853e <_write>
	k_oops();
 80077f4:	4040      	eors	r0, r0
 80077f6:	f380 8811 	msr	BASEPRI, r0
 80077fa:	f04f 0003 	mov.w	r0, #3
 80077fe:	df02      	svc	2
	CODE_UNREACHABLE;
 8007800:	0801dfbc 	.word	0x0801dfbc

08007804 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
 8007804:	4b03      	ldr	r3, [pc, #12]	; (8007814 <pool_id+0x10>)
 8007806:	1ac0      	subs	r0, r0, r3
 8007808:	1100      	asrs	r0, r0, #4
}
 800780a:	4b03      	ldr	r3, [pc, #12]	; (8007818 <pool_id+0x14>)
 800780c:	fb03 f000 	mul.w	r0, r3, r0
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	20001164 	.word	0x20001164
 8007818:	aaaaaaab 	.word	0xaaaaaaab

0800781c <net_buf_pool_get>:
	return &_net_buf_pool_list[id];
 800781c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
}
 8007820:	4b01      	ldr	r3, [pc, #4]	; (8007828 <net_buf_pool_get+0xc>)
 8007822:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8007826:	4770      	bx	lr
 8007828:	20001164 	.word	0x20001164

0800782c <ethernet_fill_in_dst_on_ipv6_mcast>:
#endif
}

static inline uint8_t net_pkt_family(struct net_pkt *pkt)
{
	return pkt->family;
 800782c:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8007830:	f3c3 0342 	ubfx	r3, r3, #1, #3

#ifdef CONFIG_NET_IPV6
static bool ethernet_fill_in_dst_on_ipv6_mcast(struct net_pkt *pkt,
					       struct net_eth_addr *dst)
{
	if (net_pkt_family(pkt) == AF_INET6 &&
 8007834:	2b02      	cmp	r3, #2
 8007836:	d001      	beq.n	800783c <ethernet_fill_in_dst_on_ipv6_mcast+0x10>
		       sizeof(struct net_eth_addr) - 2);

		return true;
	}

	return false;
 8007838:	2000      	movs	r0, #0
 800783a:	4770      	bx	lr
	return pkt->frags->data;
}

static inline uint8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
 800783c:	6883      	ldr	r3, [r0, #8]
 800783e:	689b      	ldr	r3, [r3, #8]
 *
 * @return True if address is multicast address, False otherwise.
 */
static inline bool net_ipv6_is_addr_mcast(const struct in6_addr *addr)
{
	return addr->s6_addr[0] == 0xFF;
 8007840:	7e1b      	ldrb	r3, [r3, #24]
	if (net_pkt_family(pkt) == AF_INET6 &&
 8007842:	2bff      	cmp	r3, #255	; 0xff
 8007844:	d001      	beq.n	800784a <ethernet_fill_in_dst_on_ipv6_mcast+0x1e>
	return false;
 8007846:	2000      	movs	r0, #0
}
 8007848:	4770      	bx	lr
 800784a:	4b05      	ldr	r3, [pc, #20]	; (8007860 <ethernet_fill_in_dst_on_ipv6_mcast+0x34>)
 800784c:	881b      	ldrh	r3, [r3, #0]
 800784e:	800b      	strh	r3, [r1, #0]
 8007850:	6883      	ldr	r3, [r0, #8]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007856:	f8c1 3002 	str.w	r3, [r1, #2]
		return true;
 800785a:	2001      	movs	r0, #1
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	0801e038 	.word	0x0801e038

08007864 <net_eth_broadcast_addr>:
}
 8007864:	4800      	ldr	r0, [pc, #0]	; (8007868 <net_eth_broadcast_addr+0x4>)
 8007866:	4770      	bx	lr
 8007868:	0801e030 	.word	0x0801e030

0800786c <ethernet_send>:

	net_pkt_frag_unref(buf);
}

static int ethernet_send(struct net_if *iface, struct net_pkt *pkt)
{
 800786c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
 800786e:	6803      	ldr	r3, [r0, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
	const struct ethernet_api *api = net_if_get_device(iface)->api;
 8007872:	6895      	ldr	r5, [r2, #8]
	return iface->if_dev->l2_data;
 8007874:	689f      	ldr	r7, [r3, #8]
	struct ethernet_context *ctx = net_if_l2_data(iface);
	uint16_t ptype;
	int ret;

	if (!api) {
 8007876:	2d00      	cmp	r5, #0
 8007878:	d073      	beq.n	8007962 <ethernet_send+0xf6>
 800787a:	4606      	mov	r6, r0
 800787c:	460c      	mov	r4, r1
	return pkt->family;
 800787e:	f891 304b 	ldrb.w	r3, [r1, #75]	; 0x4b
 8007882:	f3c3 0342 	ubfx	r3, r3, #1, #3
		}
		ethernet_update_tx_stats(iface, pkt);
		ret = net_pkt_get_len(pkt);
		net_pkt_unref(pkt);
		return ret;
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8007886:	2b01      	cmp	r3, #1
 8007888:	d015      	beq.n	80078b6 <ethernet_send+0x4a>
				net_pkt_set_family(pkt, AF_INET);
			} else {
				ptype = htons(NET_ETH_PTYPE_IP);
			}
		}
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800788a:	2b02      	cmp	r3, #2
 800788c:	d026      	beq.n	80078dc <ethernet_send+0x70>
	return !!(pkt->ptp_pkt);
 800788e:	f891 304a 	ldrb.w	r3, [r1, #74]	; 0x4a
						sizeof(struct net_eth_addr);
			ptype = dst_addr->sll_protocol;
		} else {
			goto send;
		}
	} else if (IS_ENABLED(CONFIG_NET_L2_PTP) && net_pkt_is_ptp(pkt)) {
 8007892:	f013 0f01 	tst.w	r3, #1
 8007896:	d144      	bne.n	8007922 <ethernet_send+0xb6>
#endif /* CONFIG_NET_IPV4_AUTO */

#if defined(CONFIG_NET_LLDP)
static inline bool net_pkt_is_lldp(struct net_pkt *pkt)
{
	return pkt->lldp_pkt;
 8007898:	f891 304c 	ldrb.w	r3, [r1, #76]	; 0x4c
		ptype = htons(NET_ETH_PTYPE_PTP);
	} else if (IS_ENABLED(CONFIG_NET_LLDP) && net_pkt_is_lldp(pkt)) {
 800789c:	f013 0f01 	tst.w	r3, #1
 80078a0:	d142      	bne.n	8007928 <ethernet_send+0xbc>
	pkt->family = family;
 80078a2:	f891 304b 	ldrb.w	r3, [r1, #75]	; 0x4b
 80078a6:	2201      	movs	r2, #1
 80078a8:	f362 0343 	bfi	r3, r2, #1, #3
 80078ac:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b
		ptype = htons(NET_ETH_PTYPE_LLDP);
	} else if (IS_ENABLED(CONFIG_NET_ARP)) {
		/* Unktown type: Unqueued pkt is an ARP reply.
		 */
		ptype = htons(NET_ETH_PTYPE_ARP);
 80078b0:	f44f 62c1 	mov.w	r2, #1544	; 0x608
}
 80078b4:	e014      	b.n	80078e0 <ethernet_send+0x74>
			tmp = ethernet_ll_prepare_on_ipv4(iface, pkt);
 80078b6:	f011 f9d7 	bl	8018c68 <ethernet_ll_prepare_on_ipv4>
			if (!tmp) {
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d054      	beq.n	8007968 <ethernet_send+0xfc>
			} else if (IS_ENABLED(CONFIG_NET_ARP) && tmp != pkt) {
 80078be:	4284      	cmp	r4, r0
 80078c0:	d00a      	beq.n	80078d8 <ethernet_send+0x6c>
	pkt->family = family;
 80078c2:	f890 204b 	ldrb.w	r2, [r0, #75]	; 0x4b
 80078c6:	2101      	movs	r1, #1
 80078c8:	f361 0243 	bfi	r2, r1, #1, #3
 80078cc:	f880 204b 	strb.w	r2, [r0, #75]	; 0x4b
				pkt = tmp;
 80078d0:	4604      	mov	r4, r0
				ptype = htons(NET_ETH_PTYPE_ARP);
 80078d2:	f44f 62c1 	mov.w	r2, #1544	; 0x608
}
 80078d6:	e003      	b.n	80078e0 <ethernet_send+0x74>
				ptype = htons(NET_ETH_PTYPE_IP);
 80078d8:	2208      	movs	r2, #8
 80078da:	e001      	b.n	80078e0 <ethernet_send+0x74>
		ptype = htons(NET_ETH_PTYPE_IPV6);
 80078dc:	f64d 5286 	movw	r2, #56710	; 0xdd86

	/* If the ll dst addr has not been set before, let's assume
	 * temporarily it's a broadcast one. When filling the header,
	 * it might detect this should be multicast and act accordingly.
	 */
	if (!net_pkt_lladdr_dst(pkt)->addr) {
 80078e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80078e2:	b323      	cbz	r3, 800792e <ethernet_send+0xc2>
		set_vlan_priority(ctx, pkt);
	}

	/* Then set the ethernet header.
	 */
	if (!ethernet_fill_header(ctx, pkt, ptype)) {
 80078e4:	4621      	mov	r1, r4
 80078e6:	4638      	mov	r0, r7
 80078e8:	f011 fa30 	bl	8018d4c <ethernet_fill_header>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d03e      	beq.n	800796e <ethernet_send+0x102>
		ret = -ENOMEM;
		goto error;
	}

	net_pkt_cursor_init(pkt);
 80078f0:	4620      	mov	r0, r4
 80078f2:	f012 fdb2 	bl	801a45a <net_pkt_cursor_init>

send:
	ret = net_l2_send(api->send, net_if_get_device(iface), iface, pkt);
 80078f6:	6a2b      	ldr	r3, [r5, #32]
	return iface->if_dev->dev;
 80078f8:	6832      	ldr	r2, [r6, #0]
			      struct net_if *iface,
			      struct net_pkt *pkt)
{
	net_capture_pkt(iface, pkt);

	return send_fn(dev, pkt);
 80078fa:	4621      	mov	r1, r4
 80078fc:	6810      	ldr	r0, [r2, #0]
 80078fe:	4798      	blx	r3
	if (ret != 0) {
 8007900:	4605      	mov	r5, r0
 8007902:	b1d0      	cbz	r0, 800793a <ethernet_send+0xce>
 8007904:	6833      	ldr	r3, [r6, #0]
 8007906:	6818      	ldr	r0, [r3, #0]
}

static inline void eth_stats_update_errors_tx(struct net_if *iface)
{
	struct net_stats_eth *stats;
	const struct ethernet_api *api = ((const struct ethernet_api *)
 8007908:	6883      	ldr	r3, [r0, #8]
		net_if_get_device(iface)->api);

	if (!api->get_stats) {
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	b123      	cbz	r3, 8007918 <ethernet_send+0xac>
		return;
	}

	stats = api->get_stats(net_if_get_device(iface));
 800790e:	4798      	blx	r3
	if (!stats) {
 8007910:	b110      	cbz	r0, 8007918 <ethernet_send+0xac>
		return;
	}

	stats->errors.tx++;
 8007912:	6a03      	ldr	r3, [r0, #32]
 8007914:	3301      	adds	r3, #1
 8007916:	6203      	str	r3, [r0, #32]
		eth_stats_update_errors_tx(iface);
		ethernet_remove_l2_header(pkt);
 8007918:	4620      	mov	r0, r4
 800791a:	f011 f830 	bl	801897e <ethernet_remove_l2_header>
	ethernet_remove_l2_header(pkt);

	net_pkt_unref(pkt);
error:
	return ret;
}
 800791e:	4628      	mov	r0, r5
 8007920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ptype = htons(NET_ETH_PTYPE_PTP);
 8007922:	f24f 7288 	movw	r2, #63368	; 0xf788
 8007926:	e7db      	b.n	80078e0 <ethernet_send+0x74>
		ptype = htons(NET_ETH_PTYPE_LLDP);
 8007928:	f64c 4288 	movw	r2, #52360	; 0xcc88
 800792c:	e7d8      	b.n	80078e0 <ethernet_send+0x74>
		net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)broadcast_eth_addr.addr;
 800792e:	4b11      	ldr	r3, [pc, #68]	; (8007974 <ethernet_send+0x108>)
 8007930:	63e3      	str	r3, [r4, #60]	; 0x3c
		net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
 8007932:	2306      	movs	r3, #6
 8007934:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007938:	e7d4      	b.n	80078e4 <ethernet_send+0x78>
	ethernet_update_tx_stats(iface, pkt);
 800793a:	4621      	mov	r1, r4
 800793c:	4630      	mov	r0, r6
 800793e:	f010 ffa3 	bl	8018888 <ethernet_update_tx_stats>
	return net_buf_frags_len(pkt->frags);
 8007942:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
 8007944:	2000      	movs	r0, #0

	while (buf) {
 8007946:	e002      	b.n	800794e <ethernet_send+0xe2>
		bytes += buf->len;
 8007948:	899a      	ldrh	r2, [r3, #12]
 800794a:	4410      	add	r0, r2
		buf = buf->frags;
 800794c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1fa      	bne.n	8007948 <ethernet_send+0xdc>
	ret = net_pkt_get_len(pkt);
 8007952:	4605      	mov	r5, r0
	ethernet_remove_l2_header(pkt);
 8007954:	4620      	mov	r0, r4
 8007956:	f011 f812 	bl	801897e <ethernet_remove_l2_header>
	net_pkt_unref(pkt);
 800795a:	4620      	mov	r0, r4
 800795c:	f012 fd1c 	bl	801a398 <net_pkt_unref>
 8007960:	e7dd      	b.n	800791e <ethernet_send+0xb2>
		ret = -ENOENT;
 8007962:	f06f 0501 	mvn.w	r5, #1
 8007966:	e7da      	b.n	800791e <ethernet_send+0xb2>
				ret = -ENOMEM;
 8007968:	f06f 050b 	mvn.w	r5, #11
 800796c:	e7d7      	b.n	800791e <ethernet_send+0xb2>
		ret = -ENOMEM;
 800796e:	f06f 050b 	mvn.w	r5, #11
	return ret;
 8007972:	e7d4      	b.n	800791e <ethernet_send+0xb2>
 8007974:	0801e030 	.word	0x0801e030

08007978 <net_eth_get_ptp_clock>:
	}
}

#if defined(CONFIG_PTP_CLOCK)
const struct device *net_eth_get_ptp_clock(struct net_if *iface)
{
 8007978:	b538      	push	{r3, r4, r5, lr}
 800797a:	4605      	mov	r5, r0
 800797c:	6803      	ldr	r3, [r0, #0]
 800797e:	6818      	ldr	r0, [r3, #0]
	const struct device *dev = net_if_get_device(iface);
	const struct ethernet_api *api = dev->api;
 8007980:	6884      	ldr	r4, [r0, #8]

	if (!api) {
 8007982:	b184      	cbz	r4, 80079a6 <net_eth_get_ptp_clock+0x2e>
	if (!iface || !iface->if_dev) {
 8007984:	b18d      	cbz	r5, 80079aa <net_eth_get_ptp_clock+0x32>
 8007986:	b103      	cbz	r3, 800798a <net_eth_get_ptp_clock+0x12>
	return iface->if_dev->l2;
 8007988:	685b      	ldr	r3, [r3, #4]
		return NULL;
	}

	if (net_if_l2(iface) != &NET_L2_GET_NAME(ETHERNET)) {
 800798a:	4a0c      	ldr	r2, [pc, #48]	; (80079bc <net_eth_get_ptp_clock+0x44>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d10e      	bne.n	80079ae <net_eth_get_ptp_clock+0x36>
		return NULL;
	}

	if (!(api->get_capabilities(dev) & ETHERNET_PTP)) {
 8007990:	6923      	ldr	r3, [r4, #16]
 8007992:	4798      	blx	r3
 8007994:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007998:	d00b      	beq.n	80079b2 <net_eth_get_ptp_clock+0x3a>
		return NULL;
	}

	if (!api->get_ptp_clock) {
 800799a:	69e3      	ldr	r3, [r4, #28]
 800799c:	b15b      	cbz	r3, 80079b6 <net_eth_get_ptp_clock+0x3e>
	return iface->if_dev->dev;
 800799e:	682a      	ldr	r2, [r5, #0]
		return NULL;
	}

	return api->get_ptp_clock(net_if_get_device(iface));
 80079a0:	6810      	ldr	r0, [r2, #0]
 80079a2:	4798      	blx	r3
 80079a4:	4604      	mov	r4, r0
}
 80079a6:	4620      	mov	r0, r4
 80079a8:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
 80079aa:	462b      	mov	r3, r5
 80079ac:	e7ed      	b.n	800798a <net_eth_get_ptp_clock+0x12>
		return NULL;
 80079ae:	2400      	movs	r4, #0
 80079b0:	e7f9      	b.n	80079a6 <net_eth_get_ptp_clock+0x2e>
		return NULL;
 80079b2:	2400      	movs	r4, #0
 80079b4:	e7f7      	b.n	80079a6 <net_eth_get_ptp_clock+0x2e>
		return NULL;
 80079b6:	2400      	movs	r4, #0
 80079b8:	e7f5      	b.n	80079a6 <net_eth_get_ptp_clock+0x2e>
 80079ba:	bf00      	nop
 80079bc:	200013fc 	.word	0x200013fc

080079c0 <ethernet_init>:
	return net_mgmt(NET_REQUEST_ETHERNET_SET_PROMISC_MODE, iface,
			&params, sizeof(struct ethernet_req_params));
}

void ethernet_init(struct net_if *iface)
{
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	4605      	mov	r5, r0
	return iface->if_dev->l2_data;
 80079c4:	6803      	ldr	r3, [r0, #0]
 80079c6:	689c      	ldr	r4, [r3, #8]
	int i;
#endif

	NET_DBG("Initializing Ethernet L2 %p for iface %p", ctx, iface);

	ctx->ethernet_l2_flags = NET_L2_MULTICAST;
 80079c8:	2301      	movs	r3, #1
 80079ca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	ctx->iface = iface;
 80079ce:	6160      	str	r0, [r4, #20]
	k_work_init(&ctx->carrier_work, carrier_on_off);
 80079d0:	490e      	ldr	r1, [pc, #56]	; (8007a0c <ethernet_init+0x4c>)
 80079d2:	1d20      	adds	r0, r4, #4
 80079d4:	f014 fb6a 	bl	801c0ac <k_work_init>
	return iface->if_dev->dev;
 80079d8:	682b      	ldr	r3, [r5, #0]
 80079da:	6818      	ldr	r0, [r3, #0]
 * @return Hardware capabilities
 */
static inline
enum ethernet_hw_caps net_eth_get_hw_capabilities(struct net_if *iface)
{
	const struct ethernet_api *eth =
 80079dc:	6883      	ldr	r3, [r0, #8]
		(struct ethernet_api *)net_if_get_device(iface)->api;

	if (!eth->get_capabilities) {
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	b193      	cbz	r3, 8007a08 <ethernet_init+0x48>
		return (enum ethernet_hw_caps)0;
	}

	return eth->get_capabilities(net_if_get_device(iface));
 80079e2:	4798      	blx	r3

	if (net_eth_get_hw_capabilities(iface) & ETHERNET_PROMISC_MODE) {
 80079e4:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80079e8:	d005      	beq.n	80079f6 <ethernet_init+0x36>
		ctx->ethernet_l2_flags |= NET_L2_PROMISC_MODE;
 80079ea:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80079ee:	f043 0304 	orr.w	r3, r3, #4
 80079f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			break;
		}
	}
#endif

	net_arp_init();
 80079f6:	f000 fb41 	bl	800807c <net_arp_init>

	ctx->is_init = true;
 80079fa:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80079fe:	f043 0302 	orr.w	r3, r3, #2
 8007a02:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 8007a06:	bd38      	pop	{r3, r4, r5, pc}
		return (enum ethernet_hw_caps)0;
 8007a08:	2000      	movs	r0, #0
 8007a0a:	e7eb      	b.n	80079e4 <ethernet_init+0x24>
 8007a0c:	08018c29 	.word	0x08018c29

08007a10 <arp_entry_get_free>:
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
 8007a10:	4b06      	ldr	r3, [pc, #24]	; (8007a2c <arp_entry_get_free+0x1c>)
 8007a12:	6818      	ldr	r0, [r3, #0]
static struct arp_entry *arp_entry_get_free(void)
{
	sys_snode_t *node;

	node = sys_slist_peek_head(&arp_free_entries);
	if (!node) {
 8007a14:	b130      	cbz	r0, 8007a24 <arp_entry_get_free+0x14>
	return node->next;
 8007a16:	6802      	ldr	r2, [r0, #0]
	list->head = node;
 8007a18:	601a      	str	r2, [r3, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
 8007a1a:	685b      	ldr	r3, [r3, #4]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
 8007a1c:	4298      	cmp	r0, r3
 8007a1e:	d002      	beq.n	8007a26 <arp_entry_get_free+0x16>
	parent->next = child;
 8007a20:	2300      	movs	r3, #0
 8007a22:	6003      	str	r3, [r0, #0]

	/* We remove the node from the free list */
	sys_slist_remove(&arp_free_entries, NULL, node);

	return CONTAINER_OF(node, struct arp_entry, node);
}
 8007a24:	4770      	bx	lr
	list->tail = node;
 8007a26:	4b01      	ldr	r3, [pc, #4]	; (8007a2c <arp_entry_get_free+0x1c>)
 8007a28:	605a      	str	r2, [r3, #4]
}
 8007a2a:	e7f9      	b.n	8007a20 <arp_entry_get_free+0x10>
 8007a2c:	2000313c 	.word	0x2000313c

08007a30 <arp_entry_get_last_from_table>:
	return list->tail;
 8007a30:	4b0e      	ldr	r3, [pc, #56]	; (8007a6c <arp_entry_get_last_from_table+0x3c>)
 8007a32:	6858      	ldr	r0, [r3, #4]
	/* We assume last entry is the oldest one,
	 * so is the preferred one to be taken out.
	 */

	node = sys_slist_peek_tail(&arp_table);
	if (!node) {
 8007a34:	b1c8      	cbz	r0, 8007a6a <arp_entry_get_last_from_table+0x3a>
	return list->head;
 8007a36:	681b      	ldr	r3, [r3, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	b1b3      	cbz	r3, 8007a6a <arp_entry_get_last_from_table+0x3a>
 8007a3c:	4298      	cmp	r0, r3
 8007a3e:	d002      	beq.n	8007a46 <arp_entry_get_last_from_table+0x16>
 8007a40:	461a      	mov	r2, r3
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	e7f9      	b.n	8007a3a <arp_entry_get_last_from_table+0xa>
Z_GENLIST_REMOVE(slist, snode)
 8007a46:	b142      	cbz	r2, 8007a5a <arp_entry_get_last_from_table+0x2a>
	return node->next;
 8007a48:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
 8007a4a:	6013      	str	r3, [r2, #0]
	return list->tail;
 8007a4c:	4b07      	ldr	r3, [pc, #28]	; (8007a6c <arp_entry_get_last_from_table+0x3c>)
 8007a4e:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8007a50:	4298      	cmp	r0, r3
 8007a52:	d007      	beq.n	8007a64 <arp_entry_get_last_from_table+0x34>
	parent->next = child;
 8007a54:	2300      	movs	r3, #0
 8007a56:	6003      	str	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8007a58:	4770      	bx	lr
	return node->next;
 8007a5a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
 8007a5c:	4b03      	ldr	r3, [pc, #12]	; (8007a6c <arp_entry_get_last_from_table+0x3c>)
 8007a5e:	601a      	str	r2, [r3, #0]
	list->tail = node;
 8007a60:	605a      	str	r2, [r3, #4]
}
 8007a62:	e7f7      	b.n	8007a54 <arp_entry_get_last_from_table+0x24>
	list->tail = node;
 8007a64:	4b01      	ldr	r3, [pc, #4]	; (8007a6c <arp_entry_get_last_from_table+0x3c>)
 8007a66:	605a      	str	r2, [r3, #4]
}
 8007a68:	e7f4      	b.n	8007a54 <arp_entry_get_last_from_table+0x24>
	}

	sys_slist_find_and_remove(&arp_table, node);

	return CONTAINER_OF(node, struct arp_entry, node);
}
 8007a6a:	4770      	bx	lr
 8007a6c:	2000314c 	.word	0x2000314c

08007a70 <arp_gratuitous>:
}

static void arp_gratuitous(struct net_if *iface,
			   struct in_addr *src,
			   struct net_eth_addr *hwaddr)
{
 8007a70:	b510      	push	{r4, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	4614      	mov	r4, r2
	sys_snode_t *prev = NULL;
 8007a76:	2300      	movs	r3, #0
 8007a78:	9301      	str	r3, [sp, #4]
	struct arp_entry *entry;

	entry = arp_entry_find(&arp_table, iface, src, &prev);
 8007a7a:	ab01      	add	r3, sp, #4
 8007a7c:	460a      	mov	r2, r1
 8007a7e:	4601      	mov	r1, r0
 8007a80:	4804      	ldr	r0, [pc, #16]	; (8007a94 <arp_gratuitous+0x24>)
 8007a82:	f011 f99e 	bl	8018dc2 <arp_entry_find>
	if (entry) {
 8007a86:	b118      	cbz	r0, 8007a90 <arp_gratuitous+0x20>
 8007a88:	6822      	ldr	r2, [r4, #0]
 8007a8a:	6102      	str	r2, [r0, #16]
 8007a8c:	88a2      	ldrh	r2, [r4, #4]
 8007a8e:	8282      	strh	r2, [r0, #20]
					   (const uint8_t *)hwaddr,
					   sizeof(struct net_eth_addr))));

		memcpy(&entry->eth, hwaddr, sizeof(struct net_eth_addr));
	}
}
 8007a90:	b002      	add	sp, #8
 8007a92:	bd10      	pop	{r4, pc}
 8007a94:	2000314c 	.word	0x2000314c

08007a98 <arp_entry_register_pending>:
{
 8007a98:	b510      	push	{r4, lr}
 8007a9a:	4604      	mov	r4, r0
	parent->next = child;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	6003      	str	r3, [r0, #0]
	return list->tail;
 8007aa0:	4b0f      	ldr	r3, [pc, #60]	; (8007ae0 <arp_entry_register_pending+0x48>)
 8007aa2:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
 8007aa4:	b183      	cbz	r3, 8007ac8 <arp_entry_register_pending+0x30>
	parent->next = child;
 8007aa6:	6018      	str	r0, [r3, #0]
	list->tail = node;
 8007aa8:	4b0d      	ldr	r3, [pc, #52]	; (8007ae0 <arp_entry_register_pending+0x48>)
 8007aaa:	6058      	str	r0, [r3, #4]
	return z_impl_k_uptime_ticks();
 8007aac:	f014 fdac 	bl	801c608 <z_impl_k_uptime_ticks>
 8007ab0:	220a      	movs	r2, #10
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f7f9 f842 	bl	8000b3c <__aeabi_uldivmod>
	entry->req_start = k_uptime_get_32();
 8007ab8:	6060      	str	r0, [r4, #4]
}

static inline k_ticks_t k_work_delayable_remaining_get(
	const struct k_work_delayable *dwork)
{
	return z_timeout_remaining(&dwork->timeout);
 8007aba:	480a      	ldr	r0, [pc, #40]	; (8007ae4 <arp_entry_register_pending+0x4c>)
 8007abc:	f014 fd5d 	bl	801c57a <z_timeout_remaining>
	if (!k_work_delayable_remaining_get(&arp_request_timer)) {
 8007ac0:	ea50 0301 	orrs.w	r3, r0, r1
 8007ac4:	d004      	beq.n	8007ad0 <arp_entry_register_pending+0x38>
}
 8007ac6:	bd10      	pop	{r4, pc}
 8007ac8:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <arp_entry_register_pending+0x48>)
 8007aca:	6058      	str	r0, [r3, #4]
	list->head = node;
 8007acc:	6018      	str	r0, [r3, #0]
}
 8007ace:	e7ed      	b.n	8007aac <arp_entry_register_pending+0x14>
		k_work_reschedule(&arp_request_timer,
 8007ad0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	4804      	ldr	r0, [pc, #16]	; (8007ae8 <arp_entry_register_pending+0x50>)
 8007ad8:	f00e fa1c 	bl	8015f14 <k_work_reschedule>
}
 8007adc:	e7f3      	b.n	8007ac6 <arp_entry_register_pending+0x2e>
 8007ade:	bf00      	nop
 8007ae0:	20003144 	.word	0x20003144
 8007ae4:	20001450 	.word	0x20001450
 8007ae8:	20001440 	.word	0x20001440

08007aec <arp_request_timeout>:
{
 8007aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aee:	f014 fd8b 	bl	801c608 <z_impl_k_uptime_ticks>
 8007af2:	220a      	movs	r2, #10
 8007af4:	2300      	movs	r3, #0
 8007af6:	f7f9 f821 	bl	8000b3c <__aeabi_uldivmod>
 8007afa:	4607      	mov	r7, r0
	return (uint32_t)k_uptime_get();
 8007afc:	4606      	mov	r6, r0
	return list->head;
 8007afe:	4b27      	ldr	r3, [pc, #156]	; (8007b9c <arp_request_timeout+0xb0>)
 8007b00:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
 8007b02:	b11c      	cbz	r4, 8007b0c <arp_request_timeout+0x20>
 8007b04:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 8007b06:	b16c      	cbz	r4, 8007b24 <arp_request_timeout+0x38>
	return node->next;
 8007b08:	6825      	ldr	r5, [r4, #0]
 8007b0a:	e00b      	b.n	8007b24 <arp_request_timeout+0x38>
 8007b0c:	4625      	mov	r5, r4
 8007b0e:	e009      	b.n	8007b24 <arp_request_timeout+0x38>
	list->tail = node;
 8007b10:	4b22      	ldr	r3, [pc, #136]	; (8007b9c <arp_request_timeout+0xb0>)
 8007b12:	6059      	str	r1, [r3, #4]
}
 8007b14:	e018      	b.n	8007b48 <arp_request_timeout+0x5c>
	list->tail = node;
 8007b16:	4b22      	ldr	r3, [pc, #136]	; (8007ba0 <arp_request_timeout+0xb4>)
 8007b18:	605a      	str	r2, [r3, #4]
	list->head = node;
 8007b1a:	601a      	str	r2, [r3, #0]
}
 8007b1c:	e01d      	b.n	8007b5a <arp_request_timeout+0x6e>
 8007b1e:	462b      	mov	r3, r5
 8007b20:	462c      	mov	r4, r5
 8007b22:	461d      	mov	r5, r3
 8007b24:	b304      	cbz	r4, 8007b68 <arp_request_timeout+0x7c>
		if ((int32_t)(entry->req_start +
 8007b26:	6863      	ldr	r3, [r4, #4]
			    ARP_REQUEST_TIMEOUT - current) > 0) {
 8007b28:	1b9b      	subs	r3, r3, r6
 8007b2a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
		if ((int32_t)(entry->req_start +
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	dc1a      	bgt.n	8007b68 <arp_request_timeout+0x7c>
		arp_entry_cleanup(entry, true);
 8007b32:	2101      	movs	r1, #1
 8007b34:	4620      	mov	r0, r4
 8007b36:	f011 f980 	bl	8018e3a <arp_entry_cleanup>
		sys_slist_remove(&arp_pending_entries, NULL, &entry->node);
 8007b3a:	4622      	mov	r2, r4
	return node->next;
 8007b3c:	6821      	ldr	r1, [r4, #0]
	list->head = node;
 8007b3e:	4b17      	ldr	r3, [pc, #92]	; (8007b9c <arp_request_timeout+0xb0>)
 8007b40:	6019      	str	r1, [r3, #0]
	return list->tail;
 8007b42:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8007b44:	429c      	cmp	r4, r3
 8007b46:	d0e3      	beq.n	8007b10 <arp_request_timeout+0x24>
	parent->next = child;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	6023      	str	r3, [r4, #0]
	return list->tail;
 8007b4c:	4b14      	ldr	r3, [pc, #80]	; (8007ba0 <arp_request_timeout+0xb4>)
 8007b4e:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d0e0      	beq.n	8007b16 <arp_request_timeout+0x2a>
	parent->next = child;
 8007b54:	601a      	str	r2, [r3, #0]
	list->tail = node;
 8007b56:	4b12      	ldr	r3, [pc, #72]	; (8007ba0 <arp_request_timeout+0xb4>)
 8007b58:	605a      	str	r2, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
 8007b5a:	2d00      	cmp	r5, #0
 8007b5c:	d0df      	beq.n	8007b1e <arp_request_timeout+0x32>
 8007b5e:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
 8007b60:	2d00      	cmp	r5, #0
 8007b62:	d0dd      	beq.n	8007b20 <arp_request_timeout+0x34>
	return node->next;
 8007b64:	682b      	ldr	r3, [r5, #0]
 8007b66:	e7db      	b.n	8007b20 <arp_request_timeout+0x34>
	if (entry) {
 8007b68:	b1a4      	cbz	r4, 8007b94 <arp_request_timeout+0xa8>
				  K_MSEC(entry->req_start +
 8007b6a:	6860      	ldr	r0, [r4, #4]
 8007b6c:	1bc7      	subs	r7, r0, r7
 8007b6e:	f517 6ffa 	cmn.w	r7, #2000	; 0x7d0
 8007b72:	d010      	beq.n	8007b96 <arp_request_timeout+0xaa>
 8007b74:	f507 62fa 	add.w	r2, r7, #2000	; 0x7d0
 8007b78:	4617      	mov	r7, r2
 8007b7a:	2100      	movs	r1, #0
			return t * ((uint64_t)to_hz / from_hz);
 8007b7c:	0088      	lsls	r0, r1, #2
 8007b7e:	00ba      	lsls	r2, r7, #2
 8007b80:	ea40 7397 	orr.w	r3, r0, r7, lsr #30
 8007b84:	19d2      	adds	r2, r2, r7
 8007b86:	eb41 0303 	adc.w	r3, r1, r3
		k_work_reschedule(&arp_request_timer,
 8007b8a:	1892      	adds	r2, r2, r2
 8007b8c:	415b      	adcs	r3, r3
 8007b8e:	4805      	ldr	r0, [pc, #20]	; (8007ba4 <arp_request_timeout+0xb8>)
 8007b90:	f00e f9c0 	bl	8015f14 <k_work_reschedule>
}
 8007b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				  K_MSEC(entry->req_start +
 8007b96:	2700      	movs	r7, #0
 8007b98:	4639      	mov	r1, r7
 8007b9a:	e7ef      	b.n	8007b7c <arp_request_timeout+0x90>
 8007b9c:	20003144 	.word	0x20003144
 8007ba0:	2000313c 	.word	0x2000313c
 8007ba4:	20001440 	.word	0x20001440

08007ba8 <arp_entry_get_pending>:
{
 8007ba8:	b510      	push	{r4, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	460a      	mov	r2, r1
	sys_snode_t *prev = NULL;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	9301      	str	r3, [sp, #4]
	entry = arp_entry_find(&arp_pending_entries, iface, dst, &prev);
 8007bb2:	ab01      	add	r3, sp, #4
 8007bb4:	4601      	mov	r1, r0
 8007bb6:	4812      	ldr	r0, [pc, #72]	; (8007c00 <arp_entry_get_pending+0x58>)
 8007bb8:	f011 f903 	bl	8018dc2 <arp_entry_find>
	if (entry) {
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	b148      	cbz	r0, 8007bd4 <arp_entry_get_pending+0x2c>
		sys_slist_remove(&arp_pending_entries, prev, &entry->node);
 8007bc0:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
 8007bc2:	b16b      	cbz	r3, 8007be0 <arp_entry_get_pending+0x38>
	return node->next;
 8007bc4:	6802      	ldr	r2, [r0, #0]
	parent->next = child;
 8007bc6:	601a      	str	r2, [r3, #0]
	return list->tail;
 8007bc8:	4a0d      	ldr	r2, [pc, #52]	; (8007c00 <arp_entry_get_pending+0x58>)
 8007bca:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_REMOVE(slist, snode)
 8007bcc:	4282      	cmp	r2, r0
 8007bce:	d010      	beq.n	8007bf2 <arp_entry_get_pending+0x4a>
	parent->next = child;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	6023      	str	r3, [r4, #0]
	return list->head;
 8007bd4:	4b0a      	ldr	r3, [pc, #40]	; (8007c00 <arp_entry_get_pending+0x58>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
	if (sys_slist_is_empty(&arp_pending_entries)) {
 8007bd8:	b173      	cbz	r3, 8007bf8 <arp_entry_get_pending+0x50>
}
 8007bda:	4620      	mov	r0, r4
 8007bdc:	b002      	add	sp, #8
 8007bde:	bd10      	pop	{r4, pc}
	return node->next;
 8007be0:	6802      	ldr	r2, [r0, #0]
	list->head = node;
 8007be2:	4b07      	ldr	r3, [pc, #28]	; (8007c00 <arp_entry_get_pending+0x58>)
 8007be4:	601a      	str	r2, [r3, #0]
	return list->tail;
 8007be6:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8007be8:	4283      	cmp	r3, r0
 8007bea:	d1f1      	bne.n	8007bd0 <arp_entry_get_pending+0x28>
	list->tail = node;
 8007bec:	4b04      	ldr	r3, [pc, #16]	; (8007c00 <arp_entry_get_pending+0x58>)
 8007bee:	605a      	str	r2, [r3, #4]
}
 8007bf0:	e7ee      	b.n	8007bd0 <arp_entry_get_pending+0x28>
	list->tail = node;
 8007bf2:	4a03      	ldr	r2, [pc, #12]	; (8007c00 <arp_entry_get_pending+0x58>)
 8007bf4:	6053      	str	r3, [r2, #4]
}
 8007bf6:	e7eb      	b.n	8007bd0 <arp_entry_get_pending+0x28>
		k_work_cancel_delayable(&arp_request_timer);
 8007bf8:	4802      	ldr	r0, [pc, #8]	; (8007c04 <arp_entry_get_pending+0x5c>)
 8007bfa:	f014 faaf 	bl	801c15c <k_work_cancel_delayable>
	return entry;
 8007bfe:	e7ec      	b.n	8007bda <arp_entry_get_pending+0x32>
 8007c00:	20003144 	.word	0x20003144
 8007c04:	20001440 	.word	0x20001440

08007c08 <arp_update>:
static void arp_update(struct net_if *iface,
		       struct in_addr *src,
		       struct net_eth_addr *hwaddr,
		       bool gratuitous,
		       bool force)
{
 8007c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	4606      	mov	r6, r0
 8007c10:	4688      	mov	r8, r1
 8007c12:	4615      	mov	r5, r2
 8007c14:	461f      	mov	r7, r3
 8007c16:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	struct arp_entry *entry;
	struct net_pkt *pkt;

	NET_DBG("src %s", log_strdup(net_sprint_ipv4_addr(src)));

	entry = arp_entry_get_pending(iface, src);
 8007c1a:	f7ff ffc5 	bl	8007ba8 <arp_entry_get_pending>
	if (!entry) {
 8007c1e:	b1e8      	cbz	r0, 8007c5c <arp_update+0x54>

		return;
	}

	/* Set the dst in the pending packet */
	net_pkt_lladdr_dst(entry->pending)->len = sizeof(struct net_eth_addr);
 8007c20:	6903      	ldr	r3, [r0, #16]
 8007c22:	2206      	movs	r2, #6
 8007c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	net_pkt_lladdr_dst(entry->pending)->addr =
		(uint8_t *) &NET_ETH_HDR(entry->pending)->dst.addr;
 8007c28:	6903      	ldr	r3, [r0, #16]
	return pkt->frags->data;
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	6892      	ldr	r2, [r2, #8]
	net_pkt_lladdr_dst(entry->pending)->addr =
 8007c2e:	63da      	str	r2, [r3, #60]	; 0x3c

	NET_DBG("dst %s pending %p frag %p",
		log_strdup(net_sprint_ipv4_addr(&entry->ip)),
		entry->pending, entry->pending->frags);

	pkt = entry->pending;
 8007c30:	6901      	ldr	r1, [r0, #16]
	entry->pending = NULL;
 8007c32:	4603      	mov	r3, r0
 8007c34:	2200      	movs	r2, #0
 8007c36:	f843 2f10 	str.w	r2, [r3, #16]!
 8007c3a:	682a      	ldr	r2, [r5, #0]
 8007c3c:	6102      	str	r2, [r0, #16]
 8007c3e:	88aa      	ldrh	r2, [r5, #4]
 8007c40:	809a      	strh	r2, [r3, #4]
	return list->head;
 8007c42:	4b25      	ldr	r3, [pc, #148]	; (8007cd8 <arp_update+0xd0>)
 8007c44:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 8007c46:	6002      	str	r2, [r0, #0]
	list->head = node;
 8007c48:	6018      	str	r0, [r3, #0]
	return list->tail;
 8007c4a:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d040      	beq.n	8007cd2 <arp_update+0xca>
	memcpy(&entry->eth, hwaddr, sizeof(struct net_eth_addr));

	/* Inserting entry into the table */
	sys_slist_prepend(&arp_table, &entry->node);

	net_if_queue_tx(iface, pkt);
 8007c50:	4630      	mov	r0, r6
 8007c52:	f005 fbaf 	bl	800d3b4 <net_if_queue_tx>
}
 8007c56:	b003      	add	sp, #12
 8007c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (IS_ENABLED(CONFIG_NET_ARP_GRATUITOUS) && gratuitous) {
 8007c5c:	b987      	cbnz	r7, 8007c80 <arp_update+0x78>
		if (force) {
 8007c5e:	f1b9 0f00 	cmp.w	r9, #0
 8007c62:	d0f8      	beq.n	8007c56 <arp_update+0x4e>
			sys_snode_t *prev = NULL;
 8007c64:	2300      	movs	r3, #0
 8007c66:	9301      	str	r3, [sp, #4]
			entry = arp_entry_find(&arp_table, iface, src, &prev);
 8007c68:	ab01      	add	r3, sp, #4
 8007c6a:	4642      	mov	r2, r8
 8007c6c:	4631      	mov	r1, r6
 8007c6e:	481a      	ldr	r0, [pc, #104]	; (8007cd8 <arp_update+0xd0>)
 8007c70:	f011 f8a7 	bl	8018dc2 <arp_entry_find>
			if (entry) {
 8007c74:	b150      	cbz	r0, 8007c8c <arp_update+0x84>
 8007c76:	682a      	ldr	r2, [r5, #0]
 8007c78:	6102      	str	r2, [r0, #16]
 8007c7a:	88aa      	ldrh	r2, [r5, #4]
 8007c7c:	8282      	strh	r2, [r0, #20]
 8007c7e:	e7ea      	b.n	8007c56 <arp_update+0x4e>
			arp_gratuitous(iface, src, hwaddr);
 8007c80:	462a      	mov	r2, r5
 8007c82:	4641      	mov	r1, r8
 8007c84:	4630      	mov	r0, r6
 8007c86:	f7ff fef3 	bl	8007a70 <arp_gratuitous>
 8007c8a:	e7e8      	b.n	8007c5e <arp_update+0x56>
				entry = arp_entry_get_free();
 8007c8c:	f7ff fec0 	bl	8007a10 <arp_entry_get_free>
				if (!entry) {
 8007c90:	4604      	mov	r4, r0
 8007c92:	b1d0      	cbz	r0, 8007cca <arp_update+0xc2>
				if (entry) {
 8007c94:	2c00      	cmp	r4, #0
 8007c96:	d0de      	beq.n	8007c56 <arp_update+0x4e>
 8007c98:	f014 fcb6 	bl	801c608 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8007c9c:	220a      	movs	r2, #10
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f7f8 ff4c 	bl	8000b3c <__aeabi_uldivmod>
					entry->req_start = k_uptime_get_32();
 8007ca4:	6060      	str	r0, [r4, #4]
					entry->iface = iface;
 8007ca6:	60a6      	str	r6, [r4, #8]
					net_ipaddr_copy(&entry->ip, src);
 8007ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8007cac:	60e3      	str	r3, [r4, #12]
 8007cae:	682b      	ldr	r3, [r5, #0]
 8007cb0:	6123      	str	r3, [r4, #16]
 8007cb2:	88ab      	ldrh	r3, [r5, #4]
 8007cb4:	82a3      	strh	r3, [r4, #20]
	return list->head;
 8007cb6:	4b08      	ldr	r3, [pc, #32]	; (8007cd8 <arp_update+0xd0>)
 8007cb8:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 8007cba:	6022      	str	r2, [r4, #0]
	list->head = node;
 8007cbc:	601c      	str	r4, [r3, #0]
	return list->tail;
 8007cbe:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1c8      	bne.n	8007c56 <arp_update+0x4e>
	list->tail = node;
 8007cc4:	4b04      	ldr	r3, [pc, #16]	; (8007cd8 <arp_update+0xd0>)
 8007cc6:	605c      	str	r4, [r3, #4]
		return;
 8007cc8:	e7c5      	b.n	8007c56 <arp_update+0x4e>
					entry = arp_entry_get_last_from_table();
 8007cca:	f7ff feb1 	bl	8007a30 <arp_entry_get_last_from_table>
 8007cce:	4604      	mov	r4, r0
 8007cd0:	e7e0      	b.n	8007c94 <arp_update+0x8c>
 8007cd2:	4b01      	ldr	r3, [pc, #4]	; (8007cd8 <arp_update+0xd0>)
 8007cd4:	6058      	str	r0, [r3, #4]
}
 8007cd6:	e7bb      	b.n	8007c50 <arp_update+0x48>
 8007cd8:	2000314c 	.word	0x2000314c

08007cdc <net_arp_prepare>:
{
 8007cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce0:	b08b      	sub	sp, #44	; 0x2c
	if (!pkt || !pkt->buffer) {
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	f000 8137 	beq.w	8007f58 <net_arp_prepare+0x27c>
 8007cea:	460e      	mov	r6, r1
 8007cec:	4690      	mov	r8, r2
 8007cee:	6887      	ldr	r7, [r0, #8]
 8007cf0:	2f00      	cmp	r7, #0
 8007cf2:	d02f      	beq.n	8007d54 <net_arp_prepare+0x78>
	if (!current_ip &&
 8007cf4:	2a00      	cmp	r2, #0
 8007cf6:	d031      	beq.n	8007d5c <net_arp_prepare+0x80>
	sys_snode_t *prev = NULL;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	9303      	str	r3, [sp, #12]
	entry = arp_entry_find(&arp_table, iface, dst, &prev);
 8007cfc:	ab03      	add	r3, sp, #12
 8007cfe:	4632      	mov	r2, r6
 8007d00:	69a9      	ldr	r1, [r5, #24]
 8007d02:	4896      	ldr	r0, [pc, #600]	; (8007f5c <net_arp_prepare+0x280>)
 8007d04:	f011 f85d 	bl	8018dc2 <arp_entry_find>
	if (entry) {
 8007d08:	4604      	mov	r4, r0
 8007d0a:	b1a8      	cbz	r0, 8007d38 <net_arp_prepare+0x5c>
	return list->head;
 8007d0c:	4b93      	ldr	r3, [pc, #588]	; (8007f5c <net_arp_prepare+0x280>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
		if (&entry->node != sys_slist_peek_head(&arp_table)) {
 8007d10:	4298      	cmp	r0, r3
 8007d12:	d011      	beq.n	8007d38 <net_arp_prepare+0x5c>
			sys_slist_remove(&arp_table, prev, &entry->node);
 8007d14:	9b03      	ldr	r3, [sp, #12]
Z_GENLIST_REMOVE(slist, snode)
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d055      	beq.n	8007dc6 <net_arp_prepare+0xea>
	return node->next;
 8007d1a:	6802      	ldr	r2, [r0, #0]
	parent->next = child;
 8007d1c:	601a      	str	r2, [r3, #0]
	return list->tail;
 8007d1e:	4a8f      	ldr	r2, [pc, #572]	; (8007f5c <net_arp_prepare+0x280>)
 8007d20:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_REMOVE(slist, snode)
 8007d22:	4290      	cmp	r0, r2
 8007d24:	d058      	beq.n	8007dd8 <net_arp_prepare+0xfc>
	parent->next = child;
 8007d26:	2300      	movs	r3, #0
 8007d28:	6023      	str	r3, [r4, #0]
	return list->head;
 8007d2a:	4b8c      	ldr	r3, [pc, #560]	; (8007f5c <net_arp_prepare+0x280>)
 8007d2c:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 8007d2e:	6022      	str	r2, [r4, #0]
	list->head = node;
 8007d30:	601c      	str	r4, [r3, #0]
	return list->tail;
 8007d32:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d052      	beq.n	8007dde <net_arp_prepare+0x102>
	if (!entry) {
 8007d38:	2c00      	cmp	r4, #0
 8007d3a:	d053      	beq.n	8007de4 <net_arp_prepare+0x108>
		(uint8_t *)net_if_get_link_addr(entry->iface)->addr;
 8007d3c:	68a3      	ldr	r3, [r4, #8]
 *
 * @return a pointer to the network link address
 */
static inline struct net_linkaddr *net_if_get_link_addr(struct net_if *iface)
{
	return &iface->if_dev->link_addr;
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	691b      	ldr	r3, [r3, #16]
	net_pkt_lladdr_src(pkt)->addr =
 8007d42:	636b      	str	r3, [r5, #52]	; 0x34
	net_pkt_lladdr_src(pkt)->len = sizeof(struct net_eth_addr);
 8007d44:	2306      	movs	r3, #6
 8007d46:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)&entry->eth;
 8007d4a:	3410      	adds	r4, #16
 8007d4c:	63ec      	str	r4, [r5, #60]	; 0x3c
	net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
 8007d4e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
	return pkt;
 8007d52:	462f      	mov	r7, r5
}
 8007d54:	4638      	mov	r0, r7
 8007d56:	b00b      	add	sp, #44	; 0x2c
 8007d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !net_if_ipv4_addr_mask_cmp(net_pkt_iface(pkt), request_ip)) {
 8007d5c:	6980      	ldr	r0, [r0, #24]
 8007d5e:	f006 fe35 	bl	800e9cc <net_if_ipv4_addr_mask_cmp>
	if (!current_ip &&
 8007d62:	2800      	cmp	r0, #0
 8007d64:	d1c8      	bne.n	8007cf8 <net_arp_prepare+0x1c>
	return pkt->iface;
 8007d66:	69aa      	ldr	r2, [r5, #24]
		struct net_if_ipv4 *ipv4 = net_pkt_iface(pkt)->config.ip.ipv4;
 8007d68:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
		if (ipv4) {
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d0c3      	beq.n	8007cf8 <net_arp_prepare+0x1c>
			addr = &ipv4->gw;
 8007d70:	f103 0648 	add.w	r6, r3, #72	; 0x48
 *
 *  @return True if the address is unspecified, false otherwise.
 */
static inline bool net_ipv4_is_addr_unspecified(const struct in_addr *addr)
{
	return UNALIGNED_GET(&addr->s_addr) == 0;
 8007d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
			if (net_ipv4_is_addr_unspecified(addr)) {
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1be      	bne.n	8007cf8 <net_arp_prepare+0x1c>
				NET_ERR("Gateway not set for iface %p",
 8007d7a:	4b79      	ldr	r3, [pc, #484]	; (8007f60 <net_arp_prepare+0x284>)
 8007d7c:	9308      	str	r3, [sp, #32]
 8007d7e:	9209      	str	r2, [sp, #36]	; 0x24
 8007d80:	2300      	movs	r3, #0
 8007d82:	f8ad 300d 	strh.w	r3, [sp, #13]
 8007d86:	f88d 300f 	strb.w	r3, [sp, #15]
 8007d8a:	2203      	movs	r2, #3
 8007d8c:	f88d 200c 	strb.w	r2, [sp, #12]
 8007d90:	f88d 300e 	strb.w	r3, [sp, #14]
 8007d94:	9a03      	ldr	r2, [sp, #12]
 8007d96:	9207      	str	r2, [sp, #28]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	f363 0200 	bfi	r2, r3, #0, #1
 8007d9e:	f363 0241 	bfi	r2, r3, #1, #1
 8007da2:	f363 0282 	bfi	r2, r3, #2, #1
 8007da6:	f363 02c5 	bfi	r2, r3, #3, #3
 8007daa:	2101      	movs	r1, #1
 8007dac:	f361 1288 	bfi	r2, r1, #6, #3
 8007db0:	210c      	movs	r1, #12
 8007db2:	f361 2252 	bfi	r2, r1, #9, #10
 8007db6:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007dba:	496a      	ldr	r1, [pc, #424]	; (8007f64 <net_arp_prepare+0x288>)
 8007dbc:	a804      	add	r0, sp, #16
 8007dbe:	f00f ffc8 	bl	8017d52 <z_log_msg2_finalize>
				return NULL;
 8007dc2:	4647      	mov	r7, r8
 8007dc4:	e7c6      	b.n	8007d54 <net_arp_prepare+0x78>
	return node->next;
 8007dc6:	6802      	ldr	r2, [r0, #0]
	list->head = node;
 8007dc8:	4b64      	ldr	r3, [pc, #400]	; (8007f5c <net_arp_prepare+0x280>)
 8007dca:	601a      	str	r2, [r3, #0]
	return list->tail;
 8007dcc:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8007dce:	4298      	cmp	r0, r3
 8007dd0:	d1a9      	bne.n	8007d26 <net_arp_prepare+0x4a>
	list->tail = node;
 8007dd2:	4b62      	ldr	r3, [pc, #392]	; (8007f5c <net_arp_prepare+0x280>)
 8007dd4:	605a      	str	r2, [r3, #4]
}
 8007dd6:	e7a6      	b.n	8007d26 <net_arp_prepare+0x4a>
	list->tail = node;
 8007dd8:	4a60      	ldr	r2, [pc, #384]	; (8007f5c <net_arp_prepare+0x280>)
 8007dda:	6053      	str	r3, [r2, #4]
}
 8007ddc:	e7a3      	b.n	8007d26 <net_arp_prepare+0x4a>
	list->tail = node;
 8007dde:	4b5f      	ldr	r3, [pc, #380]	; (8007f5c <net_arp_prepare+0x280>)
 8007de0:	605c      	str	r4, [r3, #4]
}
 8007de2:	e7a9      	b.n	8007d38 <net_arp_prepare+0x5c>
	return arp_entry_find(&arp_pending_entries, iface, dst, NULL);
 8007de4:	2300      	movs	r3, #0
 8007de6:	4632      	mov	r2, r6
 8007de8:	69a9      	ldr	r1, [r5, #24]
 8007dea:	485f      	ldr	r0, [pc, #380]	; (8007f68 <net_arp_prepare+0x28c>)
 8007dec:	f010 ffe9 	bl	8018dc2 <arp_entry_find>
		if (!entry) {
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d05d      	beq.n	8007eb0 <net_arp_prepare+0x1d4>
			entry = NULL;
 8007df4:	46a2      	mov	sl, r4
 8007df6:	f8d5 b018 	ldr.w	fp, [r5, #24]
	if (current_ip) {
 8007dfa:	f1b8 0f00 	cmp.w	r8, #0
 8007dfe:	d060      	beq.n	8007ec2 <net_arp_prepare+0x1e6>
		pkt = pending;
 8007e00:	462f      	mov	r7, r5
	net_buf_add(pkt->buffer, sizeof(struct net_arp_hdr));
 8007e02:	68b8      	ldr	r0, [r7, #8]
	return net_buf_simple_add(&buf->b, len);
 8007e04:	211c      	movs	r1, #28
 8007e06:	3008      	adds	r0, #8
 8007e08:	f010 fcc9 	bl	801879e <net_buf_simple_add>
	return pkt->frags->data;
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	f8d3 9008 	ldr.w	r9, [r3, #8]
	if (entry) {
 8007e12:	f1ba 0f00 	cmp.w	sl, #0
 8007e16:	d063      	beq.n	8007ee0 <net_arp_prepare+0x204>
		entry->pending = net_pkt_ref(pending);
 8007e18:	4628      	mov	r0, r5
 8007e1a:	f012 fa95 	bl	801a348 <net_pkt_ref>
 8007e1e:	f8ca 0010 	str.w	r0, [sl, #16]
	return pkt->iface;
 8007e22:	69bb      	ldr	r3, [r7, #24]
		entry->iface = net_pkt_iface(pkt);
 8007e24:	f8ca 3008 	str.w	r3, [sl, #8]
		net_ipaddr_copy(&entry->ip, next_addr);
 8007e28:	6833      	ldr	r3, [r6, #0]
 8007e2a:	f8ca 300c 	str.w	r3, [sl, #12]
			(uint8_t *)net_if_get_link_addr(entry->iface)->addr;
 8007e2e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	691b      	ldr	r3, [r3, #16]
		net_pkt_lladdr_src(pkt)->addr =
 8007e36:	637b      	str	r3, [r7, #52]	; 0x34
		arp_entry_register_pending(entry);
 8007e38:	4650      	mov	r0, sl
 8007e3a:	f7ff fe2d 	bl	8007a98 <arp_entry_register_pending>
	net_pkt_lladdr_src(pkt)->len = sizeof(struct net_eth_addr);
 8007e3e:	f04f 0b06 	mov.w	fp, #6
 8007e42:	f887 b038 	strb.w	fp, [r7, #56]	; 0x38
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)net_eth_broadcast_addr();
 8007e46:	f7ff fd0d 	bl	8007864 <net_eth_broadcast_addr>
 8007e4a:	63f8      	str	r0, [r7, #60]	; 0x3c
	net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
 8007e4c:	f887 b040 	strb.w	fp, [r7, #64]	; 0x40
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
 8007e50:	2300      	movs	r3, #0
 8007e52:	f889 3000 	strb.w	r3, [r9]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f889 2001 	strb.w	r2, [r9, #1]
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
 8007e5c:	2108      	movs	r1, #8
 8007e5e:	f889 1002 	strb.w	r1, [r9, #2]
 8007e62:	f889 3003 	strb.w	r3, [r9, #3]
	hdr->hwlen = sizeof(struct net_eth_addr);
 8007e66:	f889 b004 	strb.w	fp, [r9, #4]
	hdr->protolen = sizeof(struct in_addr);
 8007e6a:	2104      	movs	r1, #4
 8007e6c:	f889 1005 	strb.w	r1, [r9, #5]
	hdr->opcode = htons(NET_ARP_REQUEST);
 8007e70:	f889 3006 	strb.w	r3, [r9, #6]
 8007e74:	f889 2007 	strb.w	r2, [r9, #7]
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 8007e78:	f8c9 3012 	str.w	r3, [r9, #18]
 8007e7c:	f8a9 3016 	strh.w	r3, [r9, #22]
 *  @param src Source IP address.
 */
static inline void net_ipv4_addr_copy_raw(uint8_t *dest,
					  const uint8_t *src)
{
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
 8007e80:	6833      	ldr	r3, [r6, #0]
 8007e82:	f8c9 3018 	str.w	r3, [r9, #24]
	memcpy(hdr->src_hwaddr.addr, net_pkt_lladdr_src(pkt)->addr,
 8007e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	f8c9 2008 	str.w	r2, [r9, #8]
 8007e8e:	889b      	ldrh	r3, [r3, #4]
 8007e90:	f8a9 300c 	strh.w	r3, [r9, #12]
	} else if (!entry) {
 8007e94:	f1ba 0f00 	cmp.w	sl, #0
 8007e98:	d027      	beq.n	8007eea <net_arp_prepare+0x20e>
		my_addr = if_get_addr(entry->iface, current_ip);
 8007e9a:	f8da 3008 	ldr.w	r3, [sl, #8]
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
 8007e9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
	if (!ipv4) {
 8007ea2:	bb33      	cbnz	r3, 8007ef2 <net_arp_prepare+0x216>
	if (my_addr) {
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d053      	beq.n	8007f50 <net_arp_prepare+0x274>
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f8c9 300e 	str.w	r3, [r9, #14]
}
 8007eae:	e751      	b.n	8007d54 <net_arp_prepare+0x78>
			entry = arp_entry_get_free();
 8007eb0:	f7ff fdae 	bl	8007a10 <arp_entry_get_free>
			if (!entry) {
 8007eb4:	4682      	mov	sl, r0
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	d19d      	bne.n	8007df6 <net_arp_prepare+0x11a>
				entry = arp_entry_get_last_from_table();
 8007eba:	f7ff fdb9 	bl	8007a30 <arp_entry_get_last_from_table>
 8007ebe:	4682      	mov	sl, r0
 8007ec0:	e799      	b.n	8007df6 <net_arp_prepare+0x11a>
						AF_UNSPEC, 0, NET_BUF_TIMEOUT);
 8007ec2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ec6:	2300      	movs	r3, #0
		pkt = net_pkt_alloc_with_buffer(iface,
 8007ec8:	e9cd 2300 	strd	r2, r3, [sp]
 8007ecc:	2300      	movs	r3, #0
 8007ece:	461a      	mov	r2, r3
 8007ed0:	211c      	movs	r1, #28
 8007ed2:	4658      	mov	r0, fp
 8007ed4:	f007 fe56 	bl	800fb84 <net_pkt_alloc_with_buffer>
		if (!pkt) {
 8007ed8:	4607      	mov	r7, r0
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d191      	bne.n	8007e02 <net_arp_prepare+0x126>
 8007ede:	e739      	b.n	8007d54 <net_arp_prepare+0x78>
 8007ee0:	f8db 3000 	ldr.w	r3, [fp]
			(uint8_t *)net_if_get_link_addr(iface)->addr;
 8007ee4:	691b      	ldr	r3, [r3, #16]
		net_pkt_lladdr_src(pkt)->addr =
 8007ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee8:	e7a9      	b.n	8007e3e <net_arp_prepare+0x162>
	return pkt->frags->data;
 8007eea:	68ab      	ldr	r3, [r5, #8]
 8007eec:	689b      	ldr	r3, [r3, #8]
		my_addr = (struct in_addr *)NET_IPV4_HDR(pending)->src;
 8007eee:	330c      	adds	r3, #12
 8007ef0:	e7d8      	b.n	8007ea4 <net_arp_prepare+0x1c8>
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	2900      	cmp	r1, #0
 8007ef6:	dd01      	ble.n	8007efc <net_arp_prepare+0x220>
	return NULL;
 8007ef8:	4623      	mov	r3, r4
 8007efa:	e7d3      	b.n	8007ea4 <net_arp_prepare+0x1c8>
		if (ipv4->unicast[i].is_used &&
 8007efc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007f00:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8007f04:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8007f08:	f012 0f02 	tst.w	r2, #2
 8007f0c:	d005      	beq.n	8007f1a <net_arp_prepare+0x23e>
		    ipv4->unicast[i].address.family == AF_INET &&
 8007f0e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007f12:	0112      	lsls	r2, r2, #4
 8007f14:	5a9a      	ldrh	r2, [r3, r2]
		if (ipv4->unicast[i].is_used &&
 8007f16:	2a01      	cmp	r2, #1
 8007f18:	d001      	beq.n	8007f1e <net_arp_prepare+0x242>
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
 8007f1a:	3101      	adds	r1, #1
 8007f1c:	e7ea      	b.n	8007ef4 <net_arp_prepare+0x218>
		    ipv4->unicast[i].addr_state == NET_ADDR_PREFERRED &&
 8007f1e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007f22:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8007f26:	f992 202d 	ldrsb.w	r2, [r2, #45]	; 0x2d
		    ipv4->unicast[i].address.family == AF_INET &&
 8007f2a:	2a01      	cmp	r2, #1
 8007f2c:	d1f5      	bne.n	8007f1a <net_arp_prepare+0x23e>
		    ipv4->unicast[i].addr_state == NET_ADDR_PREFERRED &&
 8007f2e:	f1b8 0f00 	cmp.w	r8, #0
 8007f32:	d008      	beq.n	8007f46 <net_arp_prepare+0x26a>
				       &ipv4->unicast[i].address.in_addr))) {
 8007f34:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007f38:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv4_addr_cmp(const struct in_addr *addr1,
				     const struct in_addr *addr2)
{
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8007f3c:	f8d8 0000 	ldr.w	r0, [r8]
 8007f40:	6852      	ldr	r2, [r2, #4]
		    (!addr ||
 8007f42:	4290      	cmp	r0, r2
 8007f44:	d1e9      	bne.n	8007f1a <net_arp_prepare+0x23e>
			return &ipv4->unicast[i].address.in_addr;
 8007f46:	2230      	movs	r2, #48	; 0x30
 8007f48:	fb02 3301 	mla	r3, r2, r1, r3
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	e7a9      	b.n	8007ea4 <net_arp_prepare+0x1c8>
__ssp_bos_icheck3(memset, void *, int)
 8007f50:	2300      	movs	r3, #0
 8007f52:	f8c9 300e 	str.w	r3, [r9, #14]
		return req;
 8007f56:	e6fd      	b.n	8007d54 <net_arp_prepare+0x78>
		return NULL;
 8007f58:	4607      	mov	r7, r0
 8007f5a:	e6fb      	b.n	8007d54 <net_arp_prepare+0x78>
 8007f5c:	2000314c 	.word	0x2000314c
 8007f60:	0801e040 	.word	0x0801e040
 8007f64:	0801d720 	.word	0x0801d720
 8007f68:	20003144 	.word	0x20003144

08007f6c <net_arp_clear_cache>:

	return NET_OK;
}

void net_arp_clear_cache(struct net_if *iface)
{
 8007f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6e:	4607      	mov	r7, r0
	return list->head;
 8007f70:	4b3e      	ldr	r3, [pc, #248]	; (800806c <net_arp_clear_cache+0x100>)
 8007f72:	681c      	ldr	r4, [r3, #0]
	sys_snode_t *prev = NULL;
	struct arp_entry *entry, *next;

	NET_DBG("Flushing ARP table");

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_table, entry, next, node) {
 8007f74:	b124      	cbz	r4, 8007f80 <net_arp_clear_cache+0x14>
 8007f76:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 8007f78:	b104      	cbz	r4, 8007f7c <net_arp_clear_cache+0x10>
	return node->next;
 8007f7a:	6825      	ldr	r5, [r4, #0]
 8007f7c:	2600      	movs	r6, #0
 8007f7e:	e009      	b.n	8007f94 <net_arp_clear_cache+0x28>
 8007f80:	4625      	mov	r5, r4
 8007f82:	e7fb      	b.n	8007f7c <net_arp_clear_cache+0x10>
		if (iface && iface != entry->iface) {
			prev = &entry->node;
 8007f84:	4626      	mov	r6, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_table, entry, next, node) {
 8007f86:	2d00      	cmp	r5, #0
 8007f88:	d02b      	beq.n	8007fe2 <net_arp_clear_cache+0x76>
 8007f8a:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
 8007f8c:	b105      	cbz	r5, 8007f90 <net_arp_clear_cache+0x24>
	return node->next;
 8007f8e:	682b      	ldr	r3, [r5, #0]
 8007f90:	462c      	mov	r4, r5
 8007f92:	461d      	mov	r5, r3
 8007f94:	b33c      	cbz	r4, 8007fe6 <net_arp_clear_cache+0x7a>
		if (iface && iface != entry->iface) {
 8007f96:	b117      	cbz	r7, 8007f9e <net_arp_clear_cache+0x32>
 8007f98:	68a3      	ldr	r3, [r4, #8]
 8007f9a:	42bb      	cmp	r3, r7
 8007f9c:	d1f2      	bne.n	8007f84 <net_arp_clear_cache+0x18>
			continue;
		}

		arp_entry_cleanup(entry, false);
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f010 ff4a 	bl	8018e3a <arp_entry_cleanup>

		sys_slist_remove(&arp_table, prev, &entry->node);
 8007fa6:	4622      	mov	r2, r4
Z_GENLIST_REMOVE(slist, snode)
 8007fa8:	b17e      	cbz	r6, 8007fca <net_arp_clear_cache+0x5e>
	return node->next;
 8007faa:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
 8007fac:	6033      	str	r3, [r6, #0]
	return list->tail;
 8007fae:	4b2f      	ldr	r3, [pc, #188]	; (800806c <net_arp_clear_cache+0x100>)
 8007fb0:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8007fb2:	429c      	cmp	r4, r3
 8007fb4:	d012      	beq.n	8007fdc <net_arp_clear_cache+0x70>
	return list->head;
 8007fb6:	4b2e      	ldr	r3, [pc, #184]	; (8008070 <net_arp_clear_cache+0x104>)
 8007fb8:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
 8007fba:	6021      	str	r1, [r4, #0]
	list->head = node;
 8007fbc:	601a      	str	r2, [r3, #0]
	return list->tail;
 8007fbe:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e0      	bne.n	8007f86 <net_arp_clear_cache+0x1a>
	list->tail = node;
 8007fc4:	4b2a      	ldr	r3, [pc, #168]	; (8008070 <net_arp_clear_cache+0x104>)
 8007fc6:	605a      	str	r2, [r3, #4]
}
 8007fc8:	e7dd      	b.n	8007f86 <net_arp_clear_cache+0x1a>
	return node->next;
 8007fca:	6821      	ldr	r1, [r4, #0]
	list->head = node;
 8007fcc:	4b27      	ldr	r3, [pc, #156]	; (800806c <net_arp_clear_cache+0x100>)
 8007fce:	6019      	str	r1, [r3, #0]
	return list->tail;
 8007fd0:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8007fd2:	429c      	cmp	r4, r3
 8007fd4:	d1ef      	bne.n	8007fb6 <net_arp_clear_cache+0x4a>
	list->tail = node;
 8007fd6:	4b25      	ldr	r3, [pc, #148]	; (800806c <net_arp_clear_cache+0x100>)
 8007fd8:	6059      	str	r1, [r3, #4]
}
 8007fda:	e7ec      	b.n	8007fb6 <net_arp_clear_cache+0x4a>
	list->tail = node;
 8007fdc:	4b23      	ldr	r3, [pc, #140]	; (800806c <net_arp_clear_cache+0x100>)
 8007fde:	605e      	str	r6, [r3, #4]
}
 8007fe0:	e7e9      	b.n	8007fb6 <net_arp_clear_cache+0x4a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_table, entry, next, node) {
 8007fe2:	462b      	mov	r3, r5
 8007fe4:	e7d4      	b.n	8007f90 <net_arp_clear_cache+0x24>
	return list->head;
 8007fe6:	4b23      	ldr	r3, [pc, #140]	; (8008074 <net_arp_clear_cache+0x108>)
 8007fe8:	681d      	ldr	r5, [r3, #0]

	prev = NULL;

	NET_DBG("Flushing ARP pending requests");

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
 8007fea:	b11d      	cbz	r5, 8007ff4 <net_arp_clear_cache+0x88>
 8007fec:	462e      	mov	r6, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
 8007fee:	b15d      	cbz	r5, 8008008 <net_arp_clear_cache+0x9c>
	return node->next;
 8007ff0:	682e      	ldr	r6, [r5, #0]
 8007ff2:	e009      	b.n	8008008 <net_arp_clear_cache+0x9c>
 8007ff4:	462e      	mov	r6, r5
 8007ff6:	e007      	b.n	8008008 <net_arp_clear_cache+0x9c>
					  entry, next, node) {
		if (iface && iface != entry->iface) {
			prev = &entry->node;
 8007ff8:	462c      	mov	r4, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
 8007ffa:	2e00      	cmp	r6, #0
 8007ffc:	d02b      	beq.n	8008056 <net_arp_clear_cache+0xea>
 8007ffe:	4633      	mov	r3, r6
Z_GENLIST_PEEK_NEXT(slist, snode)
 8008000:	b106      	cbz	r6, 8008004 <net_arp_clear_cache+0x98>
	return node->next;
 8008002:	6833      	ldr	r3, [r6, #0]
 8008004:	4635      	mov	r5, r6
 8008006:	461e      	mov	r6, r3
 8008008:	b33d      	cbz	r5, 800805a <net_arp_clear_cache+0xee>
		if (iface && iface != entry->iface) {
 800800a:	b117      	cbz	r7, 8008012 <net_arp_clear_cache+0xa6>
 800800c:	68ab      	ldr	r3, [r5, #8]
 800800e:	429f      	cmp	r7, r3
 8008010:	d1f2      	bne.n	8007ff8 <net_arp_clear_cache+0x8c>
			continue;
		}

		arp_entry_cleanup(entry, true);
 8008012:	2101      	movs	r1, #1
 8008014:	4628      	mov	r0, r5
 8008016:	f010 ff10 	bl	8018e3a <arp_entry_cleanup>

		sys_slist_remove(&arp_pending_entries, prev, &entry->node);
 800801a:	462a      	mov	r2, r5
Z_GENLIST_REMOVE(slist, snode)
 800801c:	b17c      	cbz	r4, 800803e <net_arp_clear_cache+0xd2>
	return node->next;
 800801e:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
 8008020:	6023      	str	r3, [r4, #0]
	return list->tail;
 8008022:	4b14      	ldr	r3, [pc, #80]	; (8008074 <net_arp_clear_cache+0x108>)
 8008024:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8008026:	42ab      	cmp	r3, r5
 8008028:	d012      	beq.n	8008050 <net_arp_clear_cache+0xe4>
	return list->head;
 800802a:	4b11      	ldr	r3, [pc, #68]	; (8008070 <net_arp_clear_cache+0x104>)
 800802c:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
 800802e:	6029      	str	r1, [r5, #0]
	list->head = node;
 8008030:	601a      	str	r2, [r3, #0]
	return list->tail;
 8008032:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e0      	bne.n	8007ffa <net_arp_clear_cache+0x8e>
	list->tail = node;
 8008038:	4b0d      	ldr	r3, [pc, #52]	; (8008070 <net_arp_clear_cache+0x104>)
 800803a:	605a      	str	r2, [r3, #4]
}
 800803c:	e7dd      	b.n	8007ffa <net_arp_clear_cache+0x8e>
	return node->next;
 800803e:	6829      	ldr	r1, [r5, #0]
	list->head = node;
 8008040:	4b0c      	ldr	r3, [pc, #48]	; (8008074 <net_arp_clear_cache+0x108>)
 8008042:	6019      	str	r1, [r3, #0]
	return list->tail;
 8008044:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8008046:	42ab      	cmp	r3, r5
 8008048:	d1ef      	bne.n	800802a <net_arp_clear_cache+0xbe>
	list->tail = node;
 800804a:	4b0a      	ldr	r3, [pc, #40]	; (8008074 <net_arp_clear_cache+0x108>)
 800804c:	6059      	str	r1, [r3, #4]
}
 800804e:	e7ec      	b.n	800802a <net_arp_clear_cache+0xbe>
	list->tail = node;
 8008050:	4b08      	ldr	r3, [pc, #32]	; (8008074 <net_arp_clear_cache+0x108>)
 8008052:	605c      	str	r4, [r3, #4]
}
 8008054:	e7e9      	b.n	800802a <net_arp_clear_cache+0xbe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&arp_pending_entries,
 8008056:	4633      	mov	r3, r6
 8008058:	e7d4      	b.n	8008004 <net_arp_clear_cache+0x98>
	return list->head;
 800805a:	4b06      	ldr	r3, [pc, #24]	; (8008074 <net_arp_clear_cache+0x108>)
 800805c:	681b      	ldr	r3, [r3, #0]
		sys_slist_prepend(&arp_free_entries, &entry->node);
	}

	if (sys_slist_is_empty(&arp_pending_entries)) {
 800805e:	b103      	cbz	r3, 8008062 <net_arp_clear_cache+0xf6>
		k_work_cancel_delayable(&arp_request_timer);
	}
}
 8008060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_work_cancel_delayable(&arp_request_timer);
 8008062:	4805      	ldr	r0, [pc, #20]	; (8008078 <net_arp_clear_cache+0x10c>)
 8008064:	f014 f87a 	bl	801c15c <k_work_cancel_delayable>
}
 8008068:	e7fa      	b.n	8008060 <net_arp_clear_cache+0xf4>
 800806a:	bf00      	nop
 800806c:	2000314c 	.word	0x2000314c
 8008070:	2000313c 	.word	0x2000313c
 8008074:	20003144 	.word	0x20003144
 8008078:	20001440 	.word	0x20001440

0800807c <net_arp_init>:

	return ret;
}

void net_arp_init(void)
{
 800807c:	b538      	push	{r3, r4, r5, lr}
	int i;

	if (arp_cache_initialized) {
 800807e:	4b13      	ldr	r3, [pc, #76]	; (80080cc <net_arp_init+0x50>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	bb13      	cbnz	r3, 80080ca <net_arp_init+0x4e>
	list->head = NULL;
 8008084:	4a12      	ldr	r2, [pc, #72]	; (80080d0 <net_arp_init+0x54>)
 8008086:	6013      	str	r3, [r2, #0]
	list->tail = NULL;
 8008088:	6053      	str	r3, [r2, #4]
	list->head = NULL;
 800808a:	4a12      	ldr	r2, [pc, #72]	; (80080d4 <net_arp_init+0x58>)
 800808c:	6013      	str	r3, [r2, #0]
	list->tail = NULL;
 800808e:	6053      	str	r3, [r2, #4]
	list->head = NULL;
 8008090:	4a11      	ldr	r2, [pc, #68]	; (80080d8 <net_arp_init+0x5c>)
 8008092:	6013      	str	r3, [r2, #0]
	list->tail = NULL;
 8008094:	6053      	str	r3, [r2, #4]

	sys_slist_init(&arp_free_entries);
	sys_slist_init(&arp_pending_entries);
	sys_slist_init(&arp_table);

	for (i = 0; i < CONFIG_NET_ARP_TABLE_SIZE; i++) {
 8008096:	e002      	b.n	800809e <net_arp_init+0x22>
	list->tail = node;
 8008098:	4a0d      	ldr	r2, [pc, #52]	; (80080d0 <net_arp_init+0x54>)
 800809a:	6054      	str	r4, [r2, #4]
 800809c:	3301      	adds	r3, #1
 800809e:	2b01      	cmp	r3, #1
 80080a0:	dc0c      	bgt.n	80080bc <net_arp_init+0x40>
		/* Inserting entry as free */
		sys_slist_prepend(&arp_free_entries, &arp_entries[i].node);
 80080a2:	480e      	ldr	r0, [pc, #56]	; (80080dc <net_arp_init+0x60>)
 80080a4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80080a8:	00d1      	lsls	r1, r2, #3
 80080aa:	1844      	adds	r4, r0, r1
	return list->head;
 80080ac:	4a08      	ldr	r2, [pc, #32]	; (80080d0 <net_arp_init+0x54>)
 80080ae:	6815      	ldr	r5, [r2, #0]
	parent->next = child;
 80080b0:	5045      	str	r5, [r0, r1]
	list->head = node;
 80080b2:	6014      	str	r4, [r2, #0]
	return list->tail;
 80080b4:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_PREPEND(slist, snode)
 80080b6:	2a00      	cmp	r2, #0
 80080b8:	d1f0      	bne.n	800809c <net_arp_init+0x20>
 80080ba:	e7ed      	b.n	8008098 <net_arp_init+0x1c>
	}

	k_work_init_delayable(&arp_request_timer, arp_request_timeout);
 80080bc:	4908      	ldr	r1, [pc, #32]	; (80080e0 <net_arp_init+0x64>)
 80080be:	4809      	ldr	r0, [pc, #36]	; (80080e4 <net_arp_init+0x68>)
 80080c0:	f014 f81a 	bl	801c0f8 <k_work_init_delayable>

	arp_cache_initialized = true;
 80080c4:	4b01      	ldr	r3, [pc, #4]	; (80080cc <net_arp_init+0x50>)
 80080c6:	2201      	movs	r2, #1
 80080c8:	701a      	strb	r2, [r3, #0]
}
 80080ca:	bd38      	pop	{r3, r4, r5, pc}
 80080cc:	20003c75 	.word	0x20003c75
 80080d0:	2000313c 	.word	0x2000313c
 80080d4:	20003144 	.word	0x20003144
 80080d8:	2000314c 	.word	0x2000314c
 80080dc:	2000310c 	.word	0x2000310c
 80080e0:	08007aed 	.word	0x08007aed
 80080e4:	20001440 	.word	0x20001440

080080e8 <gptp_compute_clock_identity>:
	struct net_if *iface = GPTP_PORT_IFACE(port);
 80080e8:	f200 13b5 	addw	r3, r0, #437	; 0x1b5
 80080ec:	4815      	ldr	r0, [pc, #84]	; (8008144 <gptp_compute_clock_identity+0x5c>)
 80080ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80080f2:	6842      	ldr	r2, [r0, #4]
	if (iface) {
 80080f4:	b322      	cbz	r2, 8008140 <gptp_compute_clock_identity+0x58>
 80080f6:	6813      	ldr	r3, [r2, #0]
		default_ds->clk_id[0] = net_if_get_link_addr(iface)->addr[0];
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	7819      	ldrb	r1, [r3, #0]
 80080fc:	4b11      	ldr	r3, [pc, #68]	; (8008144 <gptp_compute_clock_identity+0x5c>)
 80080fe:	f883 111d 	strb.w	r1, [r3, #285]	; 0x11d
 8008102:	6811      	ldr	r1, [r2, #0]
		default_ds->clk_id[1] = net_if_get_link_addr(iface)->addr[1];
 8008104:	6909      	ldr	r1, [r1, #16]
 8008106:	7849      	ldrb	r1, [r1, #1]
 8008108:	f883 111e 	strb.w	r1, [r3, #286]	; 0x11e
 800810c:	6811      	ldr	r1, [r2, #0]
		default_ds->clk_id[2] = net_if_get_link_addr(iface)->addr[2];
 800810e:	6909      	ldr	r1, [r1, #16]
 8008110:	7889      	ldrb	r1, [r1, #2]
 8008112:	f883 111f 	strb.w	r1, [r3, #287]	; 0x11f
		default_ds->clk_id[3] = 0xFF;
 8008116:	21ff      	movs	r1, #255	; 0xff
 8008118:	f883 1120 	strb.w	r1, [r3, #288]	; 0x120
		default_ds->clk_id[4] = 0xFE;
 800811c:	21fe      	movs	r1, #254	; 0xfe
 800811e:	f883 1121 	strb.w	r1, [r3, #289]	; 0x121
 8008122:	6811      	ldr	r1, [r2, #0]
		default_ds->clk_id[5] = net_if_get_link_addr(iface)->addr[3];
 8008124:	6909      	ldr	r1, [r1, #16]
 8008126:	78c9      	ldrb	r1, [r1, #3]
 8008128:	f883 1122 	strb.w	r1, [r3, #290]	; 0x122
 800812c:	6811      	ldr	r1, [r2, #0]
		default_ds->clk_id[6] = net_if_get_link_addr(iface)->addr[4];
 800812e:	6909      	ldr	r1, [r1, #16]
 8008130:	7909      	ldrb	r1, [r1, #4]
 8008132:	f883 1123 	strb.w	r1, [r3, #291]	; 0x123
 8008136:	6812      	ldr	r2, [r2, #0]
		default_ds->clk_id[7] = net_if_get_link_addr(iface)->addr[5];
 8008138:	6912      	ldr	r2, [r2, #16]
 800813a:	7952      	ldrb	r2, [r2, #5]
 800813c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
}
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	20001470 	.word	0x20001470

08008148 <timer_get_remaining_and_stop>:
	return (tmp & INT32_MAX);

}

static int32_t timer_get_remaining_and_stop(struct k_timer *timer)
{
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	4605      	mov	r5, r0
	__asm__ volatile(
 800814c:	f04f 0304 	mov.w	r3, #4
 8008150:	f3ef 8611 	mrs	r6, BASEPRI
 8008154:	f383 8812 	msr	BASEPRI_MAX, r3
 8008158:	f3bf 8f6f 	isb	sy
	return z_timeout_remaining(&timer->timeout);
 800815c:	f014 fa0d 	bl	801c57a <z_timeout_remaining>
			return ((uint32_t)t) / (from_hz / to_hz);
 8008160:	4c06      	ldr	r4, [pc, #24]	; (800817c <timer_get_remaining_and_stop+0x34>)
 8008162:	fba4 3400 	umull	r3, r4, r4, r0
 8008166:	08e4      	lsrs	r4, r4, #3
	z_impl_k_timer_stop(timer);
 8008168:	4628      	mov	r0, r5
 800816a:	f014 fa8d 	bl	801c688 <z_impl_k_timer_stop>
	__asm__ volatile(
 800816e:	f386 8811 	msr	BASEPRI, r6
 8008172:	f3bf 8f6f 	isb	sy
	/* Stop timer as the period is about to be modified. */
	k_timer_stop(timer);
	irq_unlock(key);

	return timer_value;
}
 8008176:	4620      	mov	r0, r4
 8008178:	bd70      	pop	{r4, r5, r6, pc}
 800817a:	bf00      	nop
 800817c:	cccccccd 	.word	0xcccccccd

08008180 <gptp_state_machine>:
{
 8008180:	b538      	push	{r3, r4, r5, lr}
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 8008182:	2401      	movs	r4, #1
 8008184:	4b22      	ldr	r3, [pc, #136]	; (8008210 <gptp_state_machine+0x90>)
 8008186:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800818a:	429c      	cmp	r4, r3
 800818c:	dd02      	ble.n	8008194 <gptp_state_machine+0x14>
	gptp_mi_state_machines();
 800818e:	f011 f916 	bl	80193be <gptp_mi_state_machines>
}
 8008192:	bd38      	pop	{r3, r4, r5, pc}
		struct gptp_port_ds *port_ds = GPTP_PORT_DS(port);
 8008194:	1e65      	subs	r5, r4, #1
		if (net_if_flag_is_set(GPTP_PORT_IFACE(port), NET_IF_UP)) {
 8008196:	f204 13b5 	addw	r3, r4, #437	; 0x1b5
 800819a:	4a1d      	ldr	r2, [pc, #116]	; (8008210 <gptp_state_machine+0x90>)
 800819c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80081a0:	685b      	ldr	r3, [r3, #4]
	if (iface == NULL) {
 80081a2:	b1eb      	cbz	r3, 80081e0 <gptp_state_machine+0x60>
	return atomic_test_bit(iface->if_dev->flags, value);
 80081a4:	681b      	ldr	r3, [r3, #0]
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 80081a6:	f3bf 8f5b 	dmb	ish
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	f3bf 8f5b 	dmb	ish
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	b1a3      	cbz	r3, 80081e0 <gptp_state_machine+0x60>
			switch (GPTP_GLOBAL_DS()->selected_role[port]) {
 80081b6:	4613      	mov	r3, r2
 80081b8:	4423      	add	r3, r4
 80081ba:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
 80081be:	2a08      	cmp	r2, #8
 80081c0:	d813      	bhi.n	80081ea <gptp_state_machine+0x6a>
 80081c2:	2301      	movs	r3, #1
 80081c4:	4093      	lsls	r3, r2
 80081c6:	f413 7fb2 	tst.w	r3, #356	; 0x164
 80081ca:	d00e      	beq.n	80081ea <gptp_state_machine+0x6a>
				gptp_md_state_machines(port);
 80081cc:	4620      	mov	r0, r4
 80081ce:	f010 ffc8 	bl	8019162 <gptp_md_state_machines>
				gptp_mi_port_sync_state_machines(port);
 80081d2:	4620      	mov	r0, r4
 80081d4:	f011 f8e0 	bl	8019398 <gptp_mi_port_sync_state_machines>
				gptp_mi_port_bmca_state_machines(port);
 80081d8:	4620      	mov	r0, r4
 80081da:	f011 f8e5 	bl	80193a8 <gptp_mi_port_bmca_state_machines>
				break;
 80081de:	e004      	b.n	80081ea <gptp_state_machine+0x6a>
			GPTP_GLOBAL_DS()->selected_role[port] = GPTP_PORT_DISABLED;
 80081e0:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <gptp_state_machine+0x90>)
 80081e2:	4423      	add	r3, r4
 80081e4:	2202      	movs	r2, #2
 80081e6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
		port_ds->prev_ptt_port_enabled = port_ds->ptt_port_enabled;
 80081ea:	4b09      	ldr	r3, [pc, #36]	; (8008210 <gptp_state_machine+0x90>)
 80081ec:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80081f0:	014a      	lsls	r2, r1, #5
 80081f2:	441a      	add	r2, r3
 80081f4:	f892 130d 	ldrb.w	r1, [r2, #781]	; 0x30d
 80081f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081fc:	016a      	lsls	r2, r5, #5
 80081fe:	4413      	add	r3, r2
 8008200:	f893 230d 	ldrb.w	r2, [r3, #781]	; 0x30d
 8008204:	f361 0241 	bfi	r2, r1, #1, #1
 8008208:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800820c:	3401      	adds	r4, #1
 800820e:	e7b9      	b.n	8008184 <gptp_state_machine+0x4>
 8008210:	20001470 	.word	0x20001470

08008214 <gptp_add_port>:
{
 8008214:	b538      	push	{r3, r4, r5, lr}
	if (*num_ports >= CONFIG_NET_GPTP_NUM_PORTS) {
 8008216:	680b      	ldr	r3, [r1, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	dd00      	ble.n	800821e <gptp_add_port+0xa>
}
 800821c:	bd38      	pop	{r3, r4, r5, pc}
 800821e:	4605      	mov	r5, r0
 8008220:	460c      	mov	r4, r1
	clk = net_eth_get_ptp_clock(iface);
 8008222:	f7ff fba9 	bl	8007978 <net_eth_get_ptp_clock>
	if (clk) {
 8008226:	2800      	cmp	r0, #0
 8008228:	d0f8      	beq.n	800821c <gptp_add_port+0x8>
		gptp_domain.iface[*num_ports] = iface;
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	f503 72db 	add.w	r2, r3, #438	; 0x1b6
 8008230:	4b05      	ldr	r3, [pc, #20]	; (8008248 <gptp_add_port+0x34>)
 8008232:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8008236:	605d      	str	r5, [r3, #4]
		net_eth_set_ptp_port(iface, *num_ports);
 8008238:	6821      	ldr	r1, [r4, #0]
 800823a:	4628      	mov	r0, r5
 800823c:	f010 fdbd 	bl	8018dba <net_eth_set_ptp_port>
		(*num_ports)++;
 8008240:	6823      	ldr	r3, [r4, #0]
 8008242:	3301      	adds	r3, #1
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	e7e9      	b.n	800821c <gptp_add_port+0x8>
 8008248:	20001470 	.word	0x20001470

0800824c <init_ports>:

	return 0;
}

static void init_ports(void)
{
 800824c:	b510      	push	{r4, lr}
 800824e:	b088      	sub	sp, #32
	net_if_foreach(gptp_add_port, &gptp_domain.default_ds.nb_ports);
 8008250:	490f      	ldr	r1, [pc, #60]	; (8008290 <init_ports+0x44>)
 8008252:	4810      	ldr	r0, [pc, #64]	; (8008294 <init_ports+0x48>)
 8008254:	f006 ff0e 	bl	800f074 <net_if_foreach>

	/* Only initialize the state machine once the ports are known. */
	gptp_init_state_machine();
 8008258:	f010 ff47 	bl	80190ea <gptp_init_state_machine>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800825c:	4c0e      	ldr	r4, [pc, #56]	; (8008298 <init_ports+0x4c>)
 800825e:	2200      	movs	r2, #0
 8008260:	2300      	movs	r3, #0
 8008262:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008266:	2300      	movs	r3, #0
 8008268:	9304      	str	r3, [sp, #16]
 800826a:	f06f 020a 	mvn.w	r2, #10
 800826e:	9203      	str	r2, [sp, #12]
 8008270:	9302      	str	r3, [sp, #8]
 8008272:	9301      	str	r3, [sp, #4]
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	4b09      	ldr	r3, [pc, #36]	; (800829c <init_ports+0x50>)
 8008278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800827c:	4908      	ldr	r1, [pc, #32]	; (80082a0 <init_ports+0x54>)
 800827e:	4620      	mov	r0, r4
 8008280:	f013 fda0 	bl	801bdc4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 8008284:	4907      	ldr	r1, [pc, #28]	; (80082a4 <init_ports+0x58>)
 8008286:	4620      	mov	r0, r4
 8008288:	f00d fa9c 	bl	80157c4 <z_impl_k_thread_name_set>
	tid = k_thread_create(&gptp_thread_data, gptp_stack,
			      K_KERNEL_STACK_SIZEOF(gptp_stack),
			      (k_thread_entry_t)gptp_thread,
			      NULL, NULL, NULL, K_PRIO_COOP(5), 0, K_NO_WAIT);
	k_thread_name_set(&gptp_thread_data, "gptp");
}
 800828c:	b008      	add	sp, #32
 800828e:	bd10      	pop	{r4, pc}
 8008290:	2000159b 	.word	0x2000159b
 8008294:	08008215 	.word	0x08008215
 8008298:	20001b50 	.word	0x20001b50
 800829c:	080087a1 	.word	0x080087a1
 80082a0:	20003c80 	.word	0x20003c80
 80082a4:	0801e07c 	.word	0x0801e07c

080082a8 <gptp_get_port_number>:
{
 80082a8:	b510      	push	{r4, lr}
 80082aa:	4604      	mov	r4, r0
	int port = net_eth_get_ptp_port(iface) + 1;
 80082ac:	f010 fd81 	bl	8018db2 <net_eth_get_ptp_port>
 80082b0:	3001      	adds	r0, #1
	if (port >= GPTP_PORT_START && port < GPTP_PORT_END) {
 80082b2:	2800      	cmp	r0, #0
 80082b4:	dd06      	ble.n	80082c4 <gptp_get_port_number+0x1c>
 80082b6:	4b0d      	ldr	r3, [pc, #52]	; (80082ec <gptp_get_port_number+0x44>)
 80082b8:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 80082bc:	4283      	cmp	r3, r0
 80082be:	da13      	bge.n	80082e8 <gptp_get_port_number+0x40>
 80082c0:	2001      	movs	r0, #1
 80082c2:	e000      	b.n	80082c6 <gptp_get_port_number+0x1e>
 80082c4:	2001      	movs	r0, #1
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 80082c6:	4b09      	ldr	r3, [pc, #36]	; (80082ec <gptp_get_port_number+0x44>)
 80082c8:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 80082cc:	4283      	cmp	r3, r0
 80082ce:	db09      	blt.n	80082e4 <gptp_get_port_number+0x3c>
		if (GPTP_PORT_IFACE(port) == iface) {
 80082d0:	f200 13b5 	addw	r3, r0, #437	; 0x1b5
 80082d4:	4a05      	ldr	r2, [pc, #20]	; (80082ec <gptp_get_port_number+0x44>)
 80082d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	42a3      	cmp	r3, r4
 80082de:	d003      	beq.n	80082e8 <gptp_get_port_number+0x40>
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 80082e0:	3001      	adds	r0, #1
 80082e2:	e7f0      	b.n	80082c6 <gptp_get_port_number+0x1e>
	return -ENODEV;
 80082e4:	f06f 0012 	mvn.w	r0, #18
}
 80082e8:	bd10      	pop	{r4, pc}
 80082ea:	bf00      	nop
 80082ec:	20001470 	.word	0x20001470

080082f0 <gptp_handle_critical_msg>:
{
 80082f0:	b570      	push	{r4, r5, r6, lr}
 80082f2:	4606      	mov	r6, r0
 80082f4:	460d      	mov	r5, r1
	struct gptp_hdr *hdr = GPTP_HDR(pkt);
 80082f6:	4608      	mov	r0, r1
 80082f8:	f010 ff41 	bl	801917e <gptp_get_hdr>
	switch (hdr->message_type) {
 80082fc:	7803      	ldrb	r3, [r0, #0]
 80082fe:	f003 030f 	and.w	r3, r3, #15
 8008302:	2b02      	cmp	r3, #2
 8008304:	d001      	beq.n	800830a <gptp_handle_critical_msg+0x1a>
	bool handled = false;
 8008306:	2000      	movs	r0, #0
}
 8008308:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_frags_len(pkt->frags);
 800830a:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
 800830c:	2200      	movs	r2, #0
	while (buf) {
 800830e:	b11b      	cbz	r3, 8008318 <gptp_handle_critical_msg+0x28>
		bytes += buf->len;
 8008310:	899c      	ldrh	r4, [r3, #12]
 8008312:	4422      	add	r2, r4
		buf = buf->frags;
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	e7fa      	b.n	800830e <gptp_handle_critical_msg+0x1e>
		if (GPTP_CHECK_LEN(pkt, GPTP_PDELAY_REQ_LEN)) {
 8008318:	2a36      	cmp	r2, #54	; 0x36
 800831a:	d009      	beq.n	8008330 <gptp_handle_critical_msg+0x40>
 800831c:	4628      	mov	r0, r5
 800831e:	f010 ff2e 	bl	801917e <gptp_get_hdr>
	return pkt->frags->data;
 8008322:	68ab      	ldr	r3, [r5, #8]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	1ac0      	subs	r0, r0, r3
 8008328:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800832c:	2835      	cmp	r0, #53	; 0x35
 800832e:	d915      	bls.n	800835c <gptp_handle_critical_msg+0x6c>
		port = gptp_get_port_number(iface);
 8008330:	4630      	mov	r0, r6
 8008332:	f7ff ffb9 	bl	80082a8 <gptp_get_port_number>
		if (port == -ENODEV) {
 8008336:	f110 0f13 	cmn.w	r0, #19
 800833a:	d011      	beq.n	8008360 <gptp_handle_critical_msg+0x70>
		if (GPTP_PORT_STATE(port)->pdelay_resp.state !=
 800833c:	1e43      	subs	r3, r0, #1
 800833e:	4a09      	ldr	r2, [pc, #36]	; (8008364 <gptp_handle_critical_msg+0x74>)
 8008340:	f44f 715a 	mov.w	r1, #872	; 0x368
 8008344:	fb01 2303 	mla	r3, r1, r3, r2
 8008348:	f893 3670 	ldrb.w	r3, [r3, #1648]	; 0x670
 800834c:	b90b      	cbnz	r3, 8008352 <gptp_handle_critical_msg+0x62>
		handled = true;
 800834e:	2001      	movs	r0, #1
 8008350:	e7da      	b.n	8008308 <gptp_handle_critical_msg+0x18>
			gptp_handle_pdelay_req(port, pkt);
 8008352:	4629      	mov	r1, r5
 8008354:	f002 f9e6 	bl	800a724 <gptp_handle_pdelay_req>
		handled = true;
 8008358:	2001      	movs	r0, #1
 800835a:	e7d5      	b.n	8008308 <gptp_handle_critical_msg+0x18>
	bool handled = false;
 800835c:	2000      	movs	r0, #0
 800835e:	e7d3      	b.n	8008308 <gptp_handle_critical_msg+0x18>
			return handled;
 8008360:	2000      	movs	r0, #0
 8008362:	e7d1      	b.n	8008308 <gptp_handle_critical_msg+0x18>
 8008364:	20001470 	.word	0x20001470

08008368 <gptp_handle_msg>:
{
 8008368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836a:	4604      	mov	r4, r0
	struct gptp_hdr *hdr = GPTP_HDR(pkt);
 800836c:	f010 ff07 	bl	801917e <gptp_get_hdr>
 8008370:	4607      	mov	r7, r0
	port = gptp_get_port_number(net_pkt_iface(pkt));
 8008372:	69a0      	ldr	r0, [r4, #24]
 8008374:	f7ff ff98 	bl	80082a8 <gptp_get_port_number>
	if (port == -ENODEV) {
 8008378:	f110 0f13 	cmn.w	r0, #19
 800837c:	d035      	beq.n	80083ea <gptp_handle_msg+0x82>
 800837e:	4605      	mov	r5, r0
	pdelay_req_state = &GPTP_PORT_STATE(port)->pdelay_req;
 8008380:	1e46      	subs	r6, r0, #1
	switch (hdr->message_type) {
 8008382:	783b      	ldrb	r3, [r7, #0]
 8008384:	f003 030f 	and.w	r3, r3, #15
 8008388:	2b0c      	cmp	r3, #12
 800838a:	d82e      	bhi.n	80083ea <gptp_handle_msg+0x82>
 800838c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008390:	002d000d 	.word	0x002d000d
 8008394:	0039002d 	.word	0x0039002d
 8008398:	002d002d 	.word	0x002d002d
 800839c:	002d002d 	.word	0x002d002d
 80083a0:	002d0066 	.word	0x002d0066
 80083a4:	00c00092 	.word	0x00c00092
 80083a8:	0115      	.short	0x0115
	return net_buf_frags_len(pkt->frags);
 80083aa:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
 80083ac:	2200      	movs	r2, #0
	while (buf) {
 80083ae:	b11b      	cbz	r3, 80083b8 <gptp_handle_msg+0x50>
		bytes += buf->len;
 80083b0:	8999      	ldrh	r1, [r3, #12]
 80083b2:	440a      	add	r2, r1
		buf = buf->frags;
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	e7fa      	b.n	80083ae <gptp_handle_msg+0x46>
		if (GPTP_CHECK_LEN(pkt, GPTP_SYNC_LEN)) {
 80083b8:	2a2c      	cmp	r2, #44	; 0x2c
 80083ba:	d117      	bne.n	80083ec <gptp_handle_msg+0x84>
		sync_rcv_state->rcvd_sync = true;
 80083bc:	4a8b      	ldr	r2, [pc, #556]	; (80085ec <gptp_handle_msg+0x284>)
 80083be:	f44f 735a 	mov.w	r3, #872	; 0x368
 80083c2:	fb03 2306 	mla	r3, r3, r6, r2
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 23c1 	strb.w	r2, [r3, #961]	; 0x3c1
		if (sync_rcv_state->rcvd_sync_ptr) {
 80083cc:	f8d3 03b8 	ldr.w	r0, [r3, #952]	; 0x3b8
 80083d0:	b108      	cbz	r0, 80083d6 <gptp_handle_msg+0x6e>
			net_pkt_unref(sync_rcv_state->rcvd_sync_ptr);
 80083d2:	f011 ffe1 	bl	801a398 <net_pkt_unref>
		net_pkt_ref(pkt);
 80083d6:	4620      	mov	r0, r4
 80083d8:	f011 ffb6 	bl	801a348 <net_pkt_ref>
		sync_rcv_state->rcvd_sync_ptr = pkt;
 80083dc:	4a83      	ldr	r2, [pc, #524]	; (80085ec <gptp_handle_msg+0x284>)
 80083de:	f44f 735a 	mov.w	r3, #872	; 0x368
 80083e2:	fb03 2606 	mla	r6, r3, r6, r2
 80083e6:	f8c6 43b8 	str.w	r4, [r6, #952]	; 0x3b8
}
 80083ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (GPTP_CHECK_LEN(pkt, GPTP_SYNC_LEN)) {
 80083ec:	4620      	mov	r0, r4
 80083ee:	f010 fec6 	bl	801917e <gptp_get_hdr>
	return pkt->frags->data;
 80083f2:	68a3      	ldr	r3, [r4, #8]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	1ac3      	subs	r3, r0, r3
 80083f8:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 80083fc:	2b2b      	cmp	r3, #43	; 0x2b
 80083fe:	d9f4      	bls.n	80083ea <gptp_handle_msg+0x82>
 8008400:	e7dc      	b.n	80083bc <gptp_handle_msg+0x54>
	return net_buf_frags_len(pkt->frags);
 8008402:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
 8008404:	2200      	movs	r2, #0
	while (buf) {
 8008406:	b11b      	cbz	r3, 8008410 <gptp_handle_msg+0xa8>
		bytes += buf->len;
 8008408:	8999      	ldrh	r1, [r3, #12]
 800840a:	440a      	add	r2, r1
		buf = buf->frags;
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	e7fa      	b.n	8008406 <gptp_handle_msg+0x9e>
		if (GPTP_CHECK_LEN(pkt, GPTP_PDELAY_RESP_LEN)) {
 8008410:	2a36      	cmp	r2, #54	; 0x36
 8008412:	d118      	bne.n	8008446 <gptp_handle_msg+0xde>
		pdelay_req_state->rcvd_pdelay_resp++;
 8008414:	4a75      	ldr	r2, [pc, #468]	; (80085ec <gptp_handle_msg+0x284>)
 8008416:	f44f 735a 	mov.w	r3, #872	; 0x368
 800841a:	fb03 2306 	mla	r3, r3, r6, r2
 800841e:	f8d3 2364 	ldr.w	r2, [r3, #868]	; 0x364
 8008422:	3201      	adds	r2, #1
 8008424:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
		if (pdelay_req_state->rcvd_pdelay_resp_ptr) {
 8008428:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1dc      	bne.n	80083ea <gptp_handle_msg+0x82>
		net_pkt_ref(pkt);
 8008430:	4620      	mov	r0, r4
 8008432:	f011 ff89 	bl	801a348 <net_pkt_ref>
		pdelay_req_state->rcvd_pdelay_resp_ptr = pkt;
 8008436:	4a6d      	ldr	r2, [pc, #436]	; (80085ec <gptp_handle_msg+0x284>)
 8008438:	f44f 735a 	mov.w	r3, #872	; 0x368
 800843c:	fb03 2606 	mla	r6, r3, r6, r2
 8008440:	f8c6 4358 	str.w	r4, [r6, #856]	; 0x358
		break;
 8008444:	e7d1      	b.n	80083ea <gptp_handle_msg+0x82>
		if (GPTP_CHECK_LEN(pkt, GPTP_PDELAY_RESP_LEN)) {
 8008446:	4620      	mov	r0, r4
 8008448:	f010 fe99 	bl	801917e <gptp_get_hdr>
	return pkt->frags->data;
 800844c:	68a3      	ldr	r3, [r4, #8]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	1ac3      	subs	r3, r0, r3
 8008452:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8008456:	2b35      	cmp	r3, #53	; 0x35
 8008458:	d9c7      	bls.n	80083ea <gptp_handle_msg+0x82>
 800845a:	e7db      	b.n	8008414 <gptp_handle_msg+0xac>
	return net_buf_frags_len(pkt->frags);
 800845c:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
 800845e:	2200      	movs	r2, #0
	while (buf) {
 8008460:	b11b      	cbz	r3, 800846a <gptp_handle_msg+0x102>
		bytes += buf->len;
 8008462:	8999      	ldrh	r1, [r3, #12]
 8008464:	440a      	add	r2, r1
		buf = buf->frags;
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	e7fa      	b.n	8008460 <gptp_handle_msg+0xf8>
		if (GPTP_CHECK_LEN(pkt, GPTP_FOLLOW_UP_LEN)) {
 800846a:	2a4c      	cmp	r2, #76	; 0x4c
 800846c:	d117      	bne.n	800849e <gptp_handle_msg+0x136>
		sync_rcv_state->rcvd_follow_up = true;
 800846e:	4a5f      	ldr	r2, [pc, #380]	; (80085ec <gptp_handle_msg+0x284>)
 8008470:	f44f 735a 	mov.w	r3, #872	; 0x368
 8008474:	fb03 2306 	mla	r3, r3, r6, r2
 8008478:	2201      	movs	r2, #1
 800847a:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
		if (sync_rcv_state->rcvd_follow_up_ptr) {
 800847e:	f8d3 03bc 	ldr.w	r0, [r3, #956]	; 0x3bc
 8008482:	b108      	cbz	r0, 8008488 <gptp_handle_msg+0x120>
			net_pkt_unref(sync_rcv_state->rcvd_follow_up_ptr);
 8008484:	f011 ff88 	bl	801a398 <net_pkt_unref>
		sync_rcv_state->rcvd_follow_up_ptr = net_pkt_ref(pkt);
 8008488:	4620      	mov	r0, r4
 800848a:	f011 ff5d 	bl	801a348 <net_pkt_ref>
 800848e:	4a57      	ldr	r2, [pc, #348]	; (80085ec <gptp_handle_msg+0x284>)
 8008490:	f44f 735a 	mov.w	r3, #872	; 0x368
 8008494:	fb03 2606 	mla	r6, r3, r6, r2
 8008498:	f8c6 03bc 	str.w	r0, [r6, #956]	; 0x3bc
		NET_DBG("Keeping %s seq %d pkt %p", "FOLLOWUP",
 800849c:	e7a5      	b.n	80083ea <gptp_handle_msg+0x82>
		if (GPTP_CHECK_LEN(pkt, GPTP_FOLLOW_UP_LEN)) {
 800849e:	4620      	mov	r0, r4
 80084a0:	f010 fe6d 	bl	801917e <gptp_get_hdr>
	return pkt->frags->data;
 80084a4:	68a3      	ldr	r3, [r4, #8]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	1ac3      	subs	r3, r0, r3
 80084aa:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 80084ae:	2b4b      	cmp	r3, #75	; 0x4b
 80084b0:	d99b      	bls.n	80083ea <gptp_handle_msg+0x82>
 80084b2:	e7dc      	b.n	800846e <gptp_handle_msg+0x106>
	return net_buf_frags_len(pkt->frags);
 80084b4:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
 80084b6:	2200      	movs	r2, #0
	while (buf) {
 80084b8:	b11b      	cbz	r3, 80084c2 <gptp_handle_msg+0x15a>
		bytes += buf->len;
 80084ba:	8999      	ldrh	r1, [r3, #12]
 80084bc:	440a      	add	r2, r1
		buf = buf->frags;
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	e7fa      	b.n	80084b8 <gptp_handle_msg+0x150>
		if (GPTP_CHECK_LEN(pkt, GPTP_PDELAY_RESP_FUP_LEN)) {
 80084c2:	2a36      	cmp	r2, #54	; 0x36
 80084c4:	d118      	bne.n	80084f8 <gptp_handle_msg+0x190>
		pdelay_req_state->rcvd_pdelay_follow_up++;
 80084c6:	4a49      	ldr	r2, [pc, #292]	; (80085ec <gptp_handle_msg+0x284>)
 80084c8:	f44f 735a 	mov.w	r3, #872	; 0x368
 80084cc:	fb06 3003 	mla	r0, r6, r3, r3
 80084d0:	5811      	ldr	r1, [r2, r0]
 80084d2:	3101      	adds	r1, #1
 80084d4:	5011      	str	r1, [r2, r0]
		if (pdelay_req_state->rcvd_pdelay_follow_up_ptr) {
 80084d6:	fb03 2306 	mla	r3, r3, r6, r2
 80084da:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d183      	bne.n	80083ea <gptp_handle_msg+0x82>
		net_pkt_ref(pkt);
 80084e2:	4620      	mov	r0, r4
 80084e4:	f011 ff30 	bl	801a348 <net_pkt_ref>
		pdelay_req_state->rcvd_pdelay_follow_up_ptr = pkt;
 80084e8:	4a40      	ldr	r2, [pc, #256]	; (80085ec <gptp_handle_msg+0x284>)
 80084ea:	f44f 735a 	mov.w	r3, #872	; 0x368
 80084ee:	fb03 2606 	mla	r6, r3, r6, r2
 80084f2:	f8c6 435c 	str.w	r4, [r6, #860]	; 0x35c
		break;
 80084f6:	e778      	b.n	80083ea <gptp_handle_msg+0x82>
		if (GPTP_CHECK_LEN(pkt, GPTP_PDELAY_RESP_FUP_LEN)) {
 80084f8:	4620      	mov	r0, r4
 80084fa:	f010 fe40 	bl	801917e <gptp_get_hdr>
	return pkt->frags->data;
 80084fe:	68a3      	ldr	r3, [r4, #8]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	1ac3      	subs	r3, r0, r3
 8008504:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8008508:	2b35      	cmp	r3, #53	; 0x35
 800850a:	f67f af6e 	bls.w	80083ea <gptp_handle_msg+0x82>
 800850e:	e7da      	b.n	80084c6 <gptp_handle_msg+0x15e>
	return net_buf_frags_len(pkt->frags);
 8008510:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
 8008512:	2500      	movs	r5, #0
	while (buf) {
 8008514:	b11b      	cbz	r3, 800851e <gptp_handle_msg+0x1b6>
		bytes += buf->len;
 8008516:	899a      	ldrh	r2, [r3, #12]
 8008518:	4415      	add	r5, r2
		buf = buf->frags;
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	e7fa      	b.n	8008514 <gptp_handle_msg+0x1ac>
 800851e:	4620      	mov	r0, r4
 8008520:	f010 fe2d 	bl	801917e <gptp_get_hdr>
		if (GPTP_ANNOUNCE_CHECK_LEN(pkt)) {
 8008524:	f8b0 7042 	ldrh.w	r7, [r0, #66]	; 0x42
 8008528:	0a3f      	lsrs	r7, r7, #8
 800852a:	4620      	mov	r0, r4
 800852c:	f010 fe27 	bl	801917e <gptp_get_hdr>
 8008530:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
 8008534:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8008538:	b2bf      	uxth	r7, r7
 800853a:	3744      	adds	r7, #68	; 0x44
 800853c:	42af      	cmp	r7, r5
 800853e:	d121      	bne.n	8008584 <gptp_handle_msg+0x21c>
		if (pa_rcv_state->rcvd_announce == false &&
 8008540:	4a2a      	ldr	r2, [pc, #168]	; (80085ec <gptp_handle_msg+0x284>)
 8008542:	f44f 735a 	mov.w	r3, #872	; 0x368
 8008546:	fb03 2306 	mla	r3, r3, r6, r2
 800854a:	f893 3672 	ldrb.w	r3, [r3, #1650]	; 0x672
 800854e:	2b00      	cmp	r3, #0
 8008550:	f47f af4b 	bne.w	80083ea <gptp_handle_msg+0x82>
				bmca_data->rcvd_announce_ptr == NULL) {
 8008554:	2364      	movs	r3, #100	; 0x64
 8008556:	fb03 2306 	mla	r3, r3, r6, r2
 800855a:	f8d3 3678 	ldr.w	r3, [r3, #1656]	; 0x678
		if (pa_rcv_state->rcvd_announce == false &&
 800855e:	2b00      	cmp	r3, #0
 8008560:	f47f af43 	bne.w	80083ea <gptp_handle_msg+0x82>
			pa_rcv_state->rcvd_announce = true;
 8008564:	f44f 735a 	mov.w	r3, #872	; 0x368
 8008568:	fb03 2306 	mla	r3, r3, r6, r2
 800856c:	2101      	movs	r1, #1
 800856e:	f883 1672 	strb.w	r1, [r3, #1650]	; 0x672
			bmca_data->rcvd_announce_ptr = pkt;
 8008572:	2364      	movs	r3, #100	; 0x64
 8008574:	fb03 2606 	mla	r6, r3, r6, r2
 8008578:	f8c6 4678 	str.w	r4, [r6, #1656]	; 0x678
			net_pkt_ref(pkt);
 800857c:	4620      	mov	r0, r4
 800857e:	f011 fee3 	bl	801a348 <net_pkt_ref>
 8008582:	e732      	b.n	80083ea <gptp_handle_msg+0x82>
 8008584:	4620      	mov	r0, r4
 8008586:	f010 fdfa 	bl	801917e <gptp_get_hdr>
		if (GPTP_ANNOUNCE_CHECK_LEN(pkt)) {
 800858a:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
 800858e:	0a2d      	lsrs	r5, r5, #8
 8008590:	4620      	mov	r0, r4
 8008592:	f010 fdf4 	bl	801917e <gptp_get_hdr>
 8008596:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
 800859a:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 800859e:	b2ad      	uxth	r5, r5
 80085a0:	3544      	adds	r5, #68	; 0x44
 80085a2:	4620      	mov	r0, r4
 80085a4:	f010 fdeb 	bl	801917e <gptp_get_hdr>
	return pkt->frags->data;
 80085a8:	68a3      	ldr	r3, [r4, #8]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	1ac3      	subs	r3, r0, r3
 80085ae:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 80085b2:	429d      	cmp	r5, r3
 80085b4:	f63f af19 	bhi.w	80083ea <gptp_handle_msg+0x82>
 80085b8:	e7c2      	b.n	8008540 <gptp_handle_msg+0x1d8>
	return net_buf_frags_len(pkt->frags);
 80085ba:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
 80085bc:	2200      	movs	r2, #0
	while (buf) {
 80085be:	b11b      	cbz	r3, 80085c8 <gptp_handle_msg+0x260>
		bytes += buf->len;
 80085c0:	8999      	ldrh	r1, [r3, #12]
 80085c2:	440a      	add	r2, r1
		buf = buf->frags;
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	e7fa      	b.n	80085be <gptp_handle_msg+0x256>
		if (GPTP_CHECK_LEN(pkt, GPTP_SIGNALING_LEN)) {
 80085c8:	2a3c      	cmp	r2, #60	; 0x3c
 80085ca:	d00a      	beq.n	80085e2 <gptp_handle_msg+0x27a>
 80085cc:	4620      	mov	r0, r4
 80085ce:	f010 fdd6 	bl	801917e <gptp_get_hdr>
	return pkt->frags->data;
 80085d2:	68a3      	ldr	r3, [r4, #8]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	1ac0      	subs	r0, r0, r3
 80085d8:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 80085dc:	283b      	cmp	r0, #59	; 0x3b
 80085de:	f67f af04 	bls.w	80083ea <gptp_handle_msg+0x82>
		gptp_handle_signaling(port, pkt);
 80085e2:	4621      	mov	r1, r4
 80085e4:	4628      	mov	r0, r5
 80085e6:	f002 f821 	bl	800a62c <gptp_handle_signaling>
		break;
 80085ea:	e6fe      	b.n	80083ea <gptp_handle_msg+0x82>
 80085ec:	20001470 	.word	0x20001470

080085f0 <gptp_is_slave_port>:
	return (GPTP_GLOBAL_DS()->selected_role[port] == GPTP_PORT_SLAVE);
 80085f0:	4b04      	ldr	r3, [pc, #16]	; (8008604 <gptp_is_slave_port+0x14>)
 80085f2:	4403      	add	r3, r0
 80085f4:	f893 0114 	ldrb.w	r0, [r3, #276]	; 0x114
}
 80085f8:	2808      	cmp	r0, #8
 80085fa:	bf14      	ite	ne
 80085fc:	2000      	movne	r0, #0
 80085fe:	2001      	moveq	r0, #1
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	20001470 	.word	0x20001470

08008608 <net_gptp_recv>:
{
 8008608:	b570      	push	{r4, r5, r6, lr}
 800860a:	4606      	mov	r6, r0
 800860c:	460d      	mov	r5, r1
	struct gptp_hdr *hdr = GPTP_HDR(pkt);
 800860e:	4608      	mov	r0, r1
 8008610:	f010 fdb5 	bl	801917e <gptp_get_hdr>
	if ((hdr->ptp_version != GPTP_VERSION) ||
 8008614:	7844      	ldrb	r4, [r0, #1]
 8008616:	f004 040f 	and.w	r4, r4, #15
 800861a:	2c02      	cmp	r4, #2
 800861c:	d10f      	bne.n	800863e <net_gptp_recv+0x36>
			(hdr->transport_specific != GPTP_TRANSPORT_802_1_AS)) {
 800861e:	7803      	ldrb	r3, [r0, #0]
 8008620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	if ((hdr->ptp_version != GPTP_VERSION) ||
 8008624:	2b10      	cmp	r3, #16
 8008626:	d10b      	bne.n	8008640 <net_gptp_recv+0x38>
	if (!gptp_handle_critical_msg(iface, pkt)) {
 8008628:	4629      	mov	r1, r5
 800862a:	4630      	mov	r0, r6
 800862c:	f7ff fe60 	bl	80082f0 <gptp_handle_critical_msg>
 8008630:	b930      	cbnz	r0, 8008640 <net_gptp_recv+0x38>
		k_fifo_put(&gptp_rx_queue, pkt);
 8008632:	4629      	mov	r1, r5
 8008634:	4803      	ldr	r0, [pc, #12]	; (8008644 <net_gptp_recv+0x3c>)
 8008636:	f013 fc98 	bl	801bf6a <k_queue_append>
		return NET_OK;
 800863a:	2400      	movs	r4, #0
 800863c:	e000      	b.n	8008640 <net_gptp_recv+0x38>
		return NET_DROP;
 800863e:	2402      	movs	r4, #2
}
 8008640:	4620      	mov	r0, r4
 8008642:	bd70      	pop	{r4, r5, r6, pc}
 8008644:	2000112c 	.word	0x2000112c

08008648 <gptp_set_time_itv>:
	if (seconds == 0U) {
 8008648:	b191      	cbz	r1, 8008670 <gptp_set_time_itv+0x28>
{
 800864a:	b5f0      	push	{r4, r5, r6, r7, lr}
	} else if (log_msg_interval >= 96) {
 800864c:	2a5f      	cmp	r2, #95	; 0x5f
 800864e:	dc1d      	bgt.n	800868c <gptp_set_time_itv+0x44>
	} else if (log_msg_interval <= -64) {
 8008650:	f112 0f3f 	cmn.w	r2, #63	; 0x3f
 8008654:	db29      	blt.n	80086aa <gptp_set_time_itv+0x62>
	interval->low =	(seconds * (uint64_t)NSEC_PER_SEC) << 16;
 8008656:	4b51      	ldr	r3, [pc, #324]	; (800879c <gptp_set_time_itv+0x154>)
 8008658:	fba1 6703 	umull	r6, r7, r1, r3
 800865c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8008660:	ea4e 4e16 	orr.w	lr, lr, r6, lsr #16
 8008664:	ea4f 4c06 	mov.w	ip, r6, lsl #16
	if (log_msg_interval <= 0) {
 8008668:	2a00      	cmp	r2, #0
 800866a:	dd2c      	ble.n	80086c6 <gptp_set_time_itv+0x7e>
		for (i = 63; i >= 0; i--) {
 800866c:	233f      	movs	r3, #63	; 0x3f
 800866e:	e042      	b.n	80086f6 <gptp_set_time_itv+0xae>
		interval->low = 0U;
 8008670:	2300      	movs	r3, #0
 8008672:	7103      	strb	r3, [r0, #4]
 8008674:	7143      	strb	r3, [r0, #5]
 8008676:	7183      	strb	r3, [r0, #6]
 8008678:	71c3      	strb	r3, [r0, #7]
 800867a:	7203      	strb	r3, [r0, #8]
 800867c:	7243      	strb	r3, [r0, #9]
 800867e:	7283      	strb	r3, [r0, #10]
 8008680:	72c3      	strb	r3, [r0, #11]
		interval->high = 0U;
 8008682:	7003      	strb	r3, [r0, #0]
 8008684:	7043      	strb	r3, [r0, #1]
 8008686:	7083      	strb	r3, [r0, #2]
 8008688:	70c3      	strb	r3, [r0, #3]
		return;
 800868a:	4770      	bx	lr
		interval->low = UINT64_MAX;
 800868c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008690:	7103      	strb	r3, [r0, #4]
 8008692:	7143      	strb	r3, [r0, #5]
 8008694:	7183      	strb	r3, [r0, #6]
 8008696:	71c3      	strb	r3, [r0, #7]
 8008698:	7203      	strb	r3, [r0, #8]
 800869a:	7243      	strb	r3, [r0, #9]
 800869c:	7283      	strb	r3, [r0, #10]
 800869e:	72c3      	strb	r3, [r0, #11]
		interval->high = UINT32_MAX;
 80086a0:	7003      	strb	r3, [r0, #0]
 80086a2:	7043      	strb	r3, [r0, #1]
 80086a4:	7083      	strb	r3, [r0, #2]
 80086a6:	70c3      	strb	r3, [r0, #3]
}
 80086a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		interval->low = 0U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	7103      	strb	r3, [r0, #4]
 80086ae:	7143      	strb	r3, [r0, #5]
 80086b0:	7183      	strb	r3, [r0, #6]
 80086b2:	71c3      	strb	r3, [r0, #7]
 80086b4:	7203      	strb	r3, [r0, #8]
 80086b6:	7243      	strb	r3, [r0, #9]
 80086b8:	7283      	strb	r3, [r0, #10]
 80086ba:	72c3      	strb	r3, [r0, #11]
		interval->high = 0U;
 80086bc:	7003      	strb	r3, [r0, #0]
 80086be:	7043      	strb	r3, [r0, #1]
 80086c0:	7083      	strb	r3, [r0, #2]
 80086c2:	70c3      	strb	r3, [r0, #3]
		return;
 80086c4:	e7f0      	b.n	80086a8 <gptp_set_time_itv+0x60>
		interval->low >>= -log_msg_interval;
 80086c6:	4251      	negs	r1, r2
 80086c8:	f102 0320 	add.w	r3, r2, #32
 80086cc:	f1a1 0420 	sub.w	r4, r1, #32
 80086d0:	fa2c f601 	lsr.w	r6, ip, r1
 80086d4:	fa0e f303 	lsl.w	r3, lr, r3
 80086d8:	431e      	orrs	r6, r3
 80086da:	fa2e f404 	lsr.w	r4, lr, r4
 80086de:	4326      	orrs	r6, r4
 80086e0:	fa2e f701 	lsr.w	r7, lr, r1
 80086e4:	6046      	str	r6, [r0, #4]
 80086e6:	6087      	str	r7, [r0, #8]
		interval->high = 0U;
 80086e8:	2300      	movs	r3, #0
 80086ea:	7003      	strb	r3, [r0, #0]
 80086ec:	7043      	strb	r3, [r0, #1]
 80086ee:	7083      	strb	r3, [r0, #2]
 80086f0:	70c3      	strb	r3, [r0, #3]
 80086f2:	e7d9      	b.n	80086a8 <gptp_set_time_itv+0x60>
		for (i = 63; i >= 0; i--) {
 80086f4:	3b01      	subs	r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	db10      	blt.n	800871c <gptp_set_time_itv+0xd4>
			if (interval->low >> i) {
 80086fa:	f1c3 0620 	rsb	r6, r3, #32
 80086fe:	f1a3 0120 	sub.w	r1, r3, #32
 8008702:	fa2c f403 	lsr.w	r4, ip, r3
 8008706:	fa0e f606 	lsl.w	r6, lr, r6
 800870a:	4334      	orrs	r4, r6
 800870c:	fa2e f101 	lsr.w	r1, lr, r1
 8008710:	430c      	orrs	r4, r1
 8008712:	fa2e f503 	lsr.w	r5, lr, r3
 8008716:	ea54 0105 	orrs.w	r1, r4, r5
 800871a:	d0eb      	beq.n	80086f4 <gptp_set_time_itv+0xac>
		if ((i + log_msg_interval) >= 96 || log_msg_interval > 64) {
 800871c:	4413      	add	r3, r2
 800871e:	2b5f      	cmp	r3, #95	; 0x5f
 8008720:	dc01      	bgt.n	8008726 <gptp_set_time_itv+0xde>
 8008722:	2a40      	cmp	r2, #64	; 0x40
 8008724:	dd0e      	ble.n	8008744 <gptp_set_time_itv+0xfc>
			interval->low = UINT64_MAX;
 8008726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800872a:	7103      	strb	r3, [r0, #4]
 800872c:	7143      	strb	r3, [r0, #5]
 800872e:	7183      	strb	r3, [r0, #6]
 8008730:	71c3      	strb	r3, [r0, #7]
 8008732:	7203      	strb	r3, [r0, #8]
 8008734:	7243      	strb	r3, [r0, #9]
 8008736:	7283      	strb	r3, [r0, #10]
 8008738:	72c3      	strb	r3, [r0, #11]
			interval->high = UINT32_MAX;
 800873a:	7003      	strb	r3, [r0, #0]
 800873c:	7043      	strb	r3, [r0, #1]
 800873e:	7083      	strb	r3, [r0, #2]
 8008740:	70c3      	strb	r3, [r0, #3]
 8008742:	e7b1      	b.n	80086a8 <gptp_set_time_itv+0x60>
				interval->low >> (64 - log_msg_interval);
 8008744:	f1c2 0340 	rsb	r3, r2, #64	; 0x40
 8008748:	f1a2 0420 	sub.w	r4, r2, #32
 800874c:	f1c2 0120 	rsb	r1, r2, #32
 8008750:	fa2c f303 	lsr.w	r3, ip, r3
 8008754:	fa0e f404 	lsl.w	r4, lr, r4
 8008758:	4323      	orrs	r3, r4
 800875a:	fa2e f101 	lsr.w	r1, lr, r1
 800875e:	430b      	orrs	r3, r1
			interval->high =
 8008760:	6003      	str	r3, [r0, #0]
			if (log_msg_interval == 64) {
 8008762:	2a40      	cmp	r2, #64	; 0x40
 8008764:	d010      	beq.n	8008788 <gptp_set_time_itv+0x140>
				interval->low <<= log_msg_interval;
 8008766:	f1a2 0120 	sub.w	r1, r2, #32
 800876a:	f1c2 0320 	rsb	r3, r2, #32
 800876e:	fa0e f702 	lsl.w	r7, lr, r2
 8008772:	fa0c f101 	lsl.w	r1, ip, r1
 8008776:	430f      	orrs	r7, r1
 8008778:	fa2c f303 	lsr.w	r3, ip, r3
 800877c:	431f      	orrs	r7, r3
 800877e:	fa0c f302 	lsl.w	r3, ip, r2
 8008782:	6043      	str	r3, [r0, #4]
 8008784:	6087      	str	r7, [r0, #8]
 8008786:	e78f      	b.n	80086a8 <gptp_set_time_itv+0x60>
				interval->low = 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	7103      	strb	r3, [r0, #4]
 800878c:	7143      	strb	r3, [r0, #5]
 800878e:	7183      	strb	r3, [r0, #6]
 8008790:	71c3      	strb	r3, [r0, #7]
 8008792:	7203      	strb	r3, [r0, #8]
 8008794:	7243      	strb	r3, [r0, #9]
 8008796:	7283      	strb	r3, [r0, #10]
 8008798:	72c3      	strb	r3, [r0, #11]
 800879a:	e785      	b.n	80086a8 <gptp_set_time_itv+0x60>
 800879c:	3b9aca00 	.word	0x3b9aca00

080087a0 <gptp_thread>:
{
 80087a0:	b510      	push	{r4, lr}
	gptp_init_clock_ds();
 80087a2:	f7f8 fb9d 	bl	8000ee0 <gptp_init_clock_ds>
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 80087a6:	2401      	movs	r4, #1
 80087a8:	e007      	b.n	80087ba <gptp_thread+0x1a>
		gptp_init_port_ds(port);
 80087aa:	4620      	mov	r0, r4
 80087ac:	f7f8 fc1c 	bl	8000fe8 <gptp_init_port_ds>
		gptp_change_port_state(port, GPTP_PORT_DISABLED);
 80087b0:	2102      	movs	r1, #2
 80087b2:	4620      	mov	r0, r4
 80087b4:	f002 ff60 	bl	800b678 <gptp_change_port_state>
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 80087b8:	3401      	adds	r4, #1
 80087ba:	4b0b      	ldr	r3, [pc, #44]	; (80087e8 <gptp_thread+0x48>)
 80087bc:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 80087c0:	429c      	cmp	r4, r3
 80087c2:	ddf2      	ble.n	80087aa <gptp_thread+0xa>
 80087c4:	e001      	b.n	80087ca <gptp_thread+0x2a>
		gptp_state_machine();
 80087c6:	f7ff fcdb 	bl	8008180 <gptp_state_machine>
	return z_impl_k_queue_get(queue, timeout);
 80087ca:	220a      	movs	r2, #10
 80087cc:	2300      	movs	r3, #0
 80087ce:	4807      	ldr	r0, [pc, #28]	; (80087ec <gptp_thread+0x4c>)
 80087d0:	f00d f972 	bl	8015ab8 <z_impl_k_queue_get>
		if (pkt) {
 80087d4:	4604      	mov	r4, r0
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d0f5      	beq.n	80087c6 <gptp_thread+0x26>
			gptp_handle_msg(pkt);
 80087da:	f7ff fdc5 	bl	8008368 <gptp_handle_msg>
			net_pkt_unref(pkt);
 80087de:	4620      	mov	r0, r4
 80087e0:	f011 fdda 	bl	801a398 <net_pkt_unref>
 80087e4:	e7ef      	b.n	80087c6 <gptp_thread+0x26>
 80087e6:	bf00      	nop
 80087e8:	20001470 	.word	0x20001470
 80087ec:	2000112c 	.word	0x2000112c

080087f0 <gptp_uscaled_ns_to_timer_ms>:
{
 80087f0:	b538      	push	{r3, r4, r5, lr}
	if (usns->high) {
 80087f2:	6803      	ldr	r3, [r0, #0]
 80087f4:	b9db      	cbnz	r3, 800882e <gptp_uscaled_ns_to_timer_ms+0x3e>
	tmp = (usns->low >> 16) / USEC_PER_SEC;
 80087f6:	6842      	ldr	r2, [r0, #4]
 80087f8:	6883      	ldr	r3, [r0, #8]
 80087fa:	0c14      	lsrs	r4, r2, #16
 80087fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008800:	0c1d      	lsrs	r5, r3, #16
 8008802:	4a0f      	ldr	r2, [pc, #60]	; (8008840 <gptp_uscaled_ns_to_timer_ms+0x50>)
 8008804:	2300      	movs	r3, #0
 8008806:	4620      	mov	r0, r4
 8008808:	4629      	mov	r1, r5
 800880a:	f7f8 f997 	bl	8000b3c <__aeabi_uldivmod>
	if (tmp == 0U) {
 800880e:	4a0d      	ldr	r2, [pc, #52]	; (8008844 <gptp_uscaled_ns_to_timer_ms+0x54>)
 8008810:	2300      	movs	r3, #0
 8008812:	42ab      	cmp	r3, r5
 8008814:	bf08      	it	eq
 8008816:	42a2      	cmpeq	r2, r4
 8008818:	d20c      	bcs.n	8008834 <gptp_uscaled_ns_to_timer_ms+0x44>
	if (tmp > INT32_MAX) {
 800881a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800881e:	4b0a      	ldr	r3, [pc, #40]	; (8008848 <gptp_uscaled_ns_to_timer_ms+0x58>)
 8008820:	42ab      	cmp	r3, r5
 8008822:	bf08      	it	eq
 8008824:	42a2      	cmpeq	r2, r4
 8008826:	d307      	bcc.n	8008838 <gptp_uscaled_ns_to_timer_ms+0x48>
	return (tmp & INT32_MAX);
 8008828:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
}
 800882c:	bd38      	pop	{r3, r4, r5, pc}
		return INT32_MAX;
 800882e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8008832:	e7fb      	b.n	800882c <gptp_uscaled_ns_to_timer_ms+0x3c>
		return 1;
 8008834:	2001      	movs	r0, #1
 8008836:	e7f9      	b.n	800882c <gptp_uscaled_ns_to_timer_ms+0x3c>
		return INT32_MAX;
 8008838:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800883c:	e7f6      	b.n	800882c <gptp_uscaled_ns_to_timer_ms+0x3c>
 800883e:	bf00      	nop
 8008840:	000f4240 	.word	0x000f4240
 8008844:	000f423f 	.word	0x000f423f
 8008848:	0007a11f 	.word	0x0007a11f

0800884c <gptp_update_pdelay_req_interval>:
{
 800884c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008850:	b083      	sub	sp, #12
 8008852:	468a      	mov	sl, r1
	port_ds = GPTP_PORT_DS(port);
 8008854:	f100 3bff 	add.w	fp, r0, #4294967295	; 0xffffffff
	remaining = timer_get_remaining_and_stop(&state_pdelay->pdelay_timer);
 8008858:	4f22      	ldr	r7, [pc, #136]	; (80088e4 <gptp_update_pdelay_req_interval+0x98>)
 800885a:	f44f 755a 	mov.w	r5, #872	; 0x368
 800885e:	fb05 f50b 	mul.w	r5, r5, fp
 8008862:	f505 7548 	add.w	r5, r5, #800	; 0x320
 8008866:	443d      	add	r5, r7
 8008868:	4628      	mov	r0, r5
 800886a:	f7ff fc6d 	bl	8008148 <timer_get_remaining_and_stop>
 800886e:	4681      	mov	r9, r0
	old_itv = gptp_uscaled_ns_to_timer_ms(&port_ds->pdelay_req_itv);
 8008870:	ea4f 064b 	mov.w	r6, fp, lsl #1
 8008874:	eb0b 044b 	add.w	r4, fp, fp, lsl #1
 8008878:	0164      	lsls	r4, r4, #5
 800887a:	f504 743a 	add.w	r4, r4, #744	; 0x2e8
 800887e:	443c      	add	r4, r7
 8008880:	3406      	adds	r4, #6
 8008882:	4620      	mov	r0, r4
 8008884:	f7ff ffb4 	bl	80087f0 <gptp_uscaled_ns_to_timer_ms>
 8008888:	4680      	mov	r8, r0
	new_itv = update_itv(&port_ds->pdelay_req_itv,
 800888a:	eb06 020b 	add.w	r2, r6, fp
 800888e:	0152      	lsls	r2, r2, #5
 8008890:	f502 7242 	add.w	r2, r2, #776	; 0x308
 8008894:	443a      	add	r2, r7
 8008896:	4611      	mov	r1, r2
 8008898:	2300      	movs	r3, #0
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	4653      	mov	r3, sl
 800889e:	3202      	adds	r2, #2
 80088a0:	3103      	adds	r1, #3
 80088a2:	4620      	mov	r0, r4
 80088a4:	f010 fc27 	bl	80190f6 <update_itv>
	new_itv -= (old_itv-remaining);
 80088a8:	eba8 0809 	sub.w	r8, r8, r9
 80088ac:	eba0 0008 	sub.w	r0, r0, r8
	if (new_itv <= 0) {
 80088b0:	2800      	cmp	r0, #0
 80088b2:	dd15      	ble.n	80088e0 <gptp_update_pdelay_req_interval+0x94>
	k_timer_start(&state_pdelay->pdelay_timer, K_MSEC(new_itv), K_NO_WAIT);
 80088b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80088b8:	17c7      	asrs	r7, r0, #31
			return t * ((uint64_t)to_hz / from_hz);
 80088ba:	00b9      	lsls	r1, r7, #2
 80088bc:	0082      	lsls	r2, r0, #2
 80088be:	ea41 7390 	orr.w	r3, r1, r0, lsr #30
 80088c2:	1812      	adds	r2, r2, r0
 80088c4:	eb47 0303 	adc.w	r3, r7, r3
 80088c8:	1892      	adds	r2, r2, r2
 80088ca:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 80088cc:	2000      	movs	r0, #0
 80088ce:	2100      	movs	r1, #0
 80088d0:	e9cd 0100 	strd	r0, r1, [sp]
 80088d4:	4628      	mov	r0, r5
 80088d6:	f00e f909 	bl	8016aec <z_impl_k_timer_start>
}
 80088da:	b003      	add	sp, #12
 80088dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_itv = 1;
 80088e0:	2001      	movs	r0, #1
 80088e2:	e7e7      	b.n	80088b4 <gptp_update_pdelay_req_interval+0x68>
 80088e4:	20001470 	.word	0x20001470

080088e8 <gptp_update_sync_interval>:
{
 80088e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ec:	b085      	sub	sp, #20
 80088ee:	468b      	mov	fp, r1
	port_ds = GPTP_PORT_DS(port);
 80088f0:	1e46      	subs	r6, r0, #1
		timer_get_remaining_and_stop(
 80088f2:	f8df 8100 	ldr.w	r8, [pc, #256]	; 80089f4 <gptp_update_sync_interval+0x10c>
 80088f6:	f44f 7a5a 	mov.w	sl, #872	; 0x368
 80088fa:	fb0a fa06 	mul.w	sl, sl, r6
 80088fe:	f50a 699c 	add.w	r9, sl, #1248	; 0x4e0
 8008902:	44c1      	add	r9, r8
 8008904:	4648      	mov	r0, r9
 8008906:	f7ff fc1f 	bl	8008148 <timer_get_remaining_and_stop>
 800890a:	4604      	mov	r4, r0
	old_itv = gptp_uscaled_ns_to_timer_ms(&port_ds->half_sync_itv);
 800890c:	0077      	lsls	r7, r6, #1
 800890e:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8008912:	016d      	lsls	r5, r5, #5
 8008914:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 8008918:	4445      	add	r5, r8
 800891a:	3502      	adds	r5, #2
 800891c:	4628      	mov	r0, r5
 800891e:	f7ff ff67 	bl	80087f0 <gptp_uscaled_ns_to_timer_ms>
 8008922:	9003      	str	r0, [sp, #12]
	new_itv = update_itv(&port_ds->half_sync_itv,
 8008924:	19ba      	adds	r2, r7, r6
 8008926:	0152      	lsls	r2, r2, #5
 8008928:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800892c:	4442      	add	r2, r8
 800892e:	19b9      	adds	r1, r7, r6
 8008930:	0149      	lsls	r1, r1, #5
 8008932:	f501 7142 	add.w	r1, r1, #776	; 0x308
 8008936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	465b      	mov	r3, fp
 800893e:	3207      	adds	r2, #7
 8008940:	4441      	add	r1, r8
 8008942:	4628      	mov	r0, r5
 8008944:	f010 fbd7 	bl	80190f6 <update_itv>
	time_spent = old_itv;
 8008948:	9903      	ldr	r1, [sp, #12]
 800894a:	460b      	mov	r3, r1
	if (state_pss_send->half_sync_itv_timer_expired) {
 800894c:	44d0      	add	r8, sl
 800894e:	f898 25e1 	ldrb.w	r2, [r8, #1505]	; 0x5e1
 8008952:	b102      	cbz	r2, 8008956 <gptp_update_sync_interval+0x6e>
		time_spent *= 2U;
 8008954:	004b      	lsls	r3, r1, #1
	time_spent -= remaining;
 8008956:	1b1a      	subs	r2, r3, r4
	if ((time_spent / 2U) > new_itv) {
 8008958:	ebb0 0f52 	cmp.w	r0, r2, lsr #1
 800895c:	d229      	bcs.n	80089b2 <gptp_update_sync_interval+0xca>
		state_pss_send->sync_itv_timer_expired = true;
 800895e:	4a25      	ldr	r2, [pc, #148]	; (80089f4 <gptp_update_sync_interval+0x10c>)
 8008960:	f44f 735a 	mov.w	r3, #872	; 0x368
 8008964:	fb03 2606 	mla	r6, r3, r6, r2
 8008968:	2401      	movs	r4, #1
 800896a:	f886 45e2 	strb.w	r4, [r6, #1506]	; 0x5e2
		state_pss_send->half_sync_itv_timer_expired = true;
 800896e:	f886 45e1 	strb.w	r4, [r6, #1505]	; 0x5e1
	k_timer_start(&state_pss_send->half_sync_itv_timer, K_MSEC(new_itv),
 8008972:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008976:	17e7      	asrs	r7, r4, #31
 8008978:	00b9      	lsls	r1, r7, #2
 800897a:	00a2      	lsls	r2, r4, #2
 800897c:	ea41 7394 	orr.w	r3, r1, r4, lsr #30
 8008980:	1912      	adds	r2, r2, r4
 8008982:	eb47 0303 	adc.w	r3, r7, r3
 8008986:	1892      	adds	r2, r2, r2
 8008988:	415b      	adcs	r3, r3
		      K_MSEC(period));
 800898a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800898e:	17c7      	asrs	r7, r0, #31
 8008990:	00bd      	lsls	r5, r7, #2
 8008992:	0081      	lsls	r1, r0, #2
 8008994:	ea45 7490 	orr.w	r4, r5, r0, lsr #30
 8008998:	1809      	adds	r1, r1, r0
 800899a:	eb44 0007 	adc.w	r0, r4, r7
 800899e:	1849      	adds	r1, r1, r1
 80089a0:	4140      	adcs	r0, r0
 80089a2:	9100      	str	r1, [sp, #0]
 80089a4:	9001      	str	r0, [sp, #4]
 80089a6:	4648      	mov	r0, r9
 80089a8:	f00e f8a0 	bl	8016aec <z_impl_k_timer_start>
}
 80089ac:	b005      	add	sp, #20
 80089ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (time_spent > new_itv) {
 80089b2:	4290      	cmp	r0, r2
 80089b4:	d211      	bcs.n	80089da <gptp_update_sync_interval+0xf2>
		state_pss_send->sync_itv_timer_expired = false;
 80089b6:	490f      	ldr	r1, [pc, #60]	; (80089f4 <gptp_update_sync_interval+0x10c>)
 80089b8:	f44f 725a 	mov.w	r2, #872	; 0x368
 80089bc:	fb02 1606 	mla	r6, r2, r6, r1
 80089c0:	2200      	movs	r2, #0
 80089c2:	f886 25e2 	strb.w	r2, [r6, #1506]	; 0x5e2
		state_pss_send->half_sync_itv_timer_expired = true;
 80089c6:	2201      	movs	r2, #1
 80089c8:	f886 25e1 	strb.w	r2, [r6, #1505]	; 0x5e1
		new_itv -= (time_spent - new_itv);
 80089cc:	1ae4      	subs	r4, r4, r3
 80089ce:	eb04 0440 	add.w	r4, r4, r0, lsl #1
	if (new_itv <= 0) {
 80089d2:	2c00      	cmp	r4, #0
 80089d4:	dccd      	bgt.n	8008972 <gptp_update_sync_interval+0x8a>
		new_itv = 1;
 80089d6:	2401      	movs	r4, #1
 80089d8:	e7cb      	b.n	8008972 <gptp_update_sync_interval+0x8a>
		state_pss_send->sync_itv_timer_expired = false;
 80089da:	4a06      	ldr	r2, [pc, #24]	; (80089f4 <gptp_update_sync_interval+0x10c>)
 80089dc:	f44f 715a 	mov.w	r1, #872	; 0x368
 80089e0:	fb01 2606 	mla	r6, r1, r6, r2
 80089e4:	2200      	movs	r2, #0
 80089e6:	f886 25e2 	strb.w	r2, [r6, #1506]	; 0x5e2
		state_pss_send->half_sync_itv_timer_expired = false;
 80089ea:	f886 25e1 	strb.w	r2, [r6, #1505]	; 0x5e1
		new_itv -= time_spent;
 80089ee:	1ae4      	subs	r4, r4, r3
 80089f0:	4404      	add	r4, r0
 80089f2:	e7ee      	b.n	80089d2 <gptp_update_sync_interval+0xea>
 80089f4:	20001470 	.word	0x20001470

080089f8 <gptp_update_announce_interval>:
{
 80089f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089fc:	b082      	sub	sp, #8
 80089fe:	468a      	mov	sl, r1
	port_ds = GPTP_PORT_DS(port);
 8008a00:	1e44      	subs	r4, r0, #1
	remaining = timer_get_remaining_and_stop(
 8008a02:	4f24      	ldr	r7, [pc, #144]	; (8008a94 <gptp_update_announce_interval+0x9c>)
 8008a04:	f44f 765a 	mov.w	r6, #872	; 0x368
 8008a08:	fb06 f604 	mul.w	r6, r6, r4
 8008a0c:	f506 66c6 	add.w	r6, r6, #1584	; 0x630
 8008a10:	443e      	add	r6, r7
 8008a12:	4630      	mov	r0, r6
 8008a14:	f7ff fb98 	bl	8008148 <timer_get_remaining_and_stop>
 8008a18:	4681      	mov	r9, r0
	old_itv = gptp_uscaled_ns_to_timer_ms(&bmca_data->announce_interval);
 8008a1a:	2564      	movs	r5, #100	; 0x64
 8008a1c:	fb05 f504 	mul.w	r5, r5, r4
 8008a20:	f505 65d6 	add.w	r5, r5, #1712	; 0x6b0
 8008a24:	443d      	add	r5, r7
 8008a26:	3504      	adds	r5, #4
 8008a28:	4628      	mov	r0, r5
 8008a2a:	f7ff fee1 	bl	80087f0 <gptp_uscaled_ns_to_timer_ms>
 8008a2e:	4680      	mov	r8, r0
	new_itv = update_itv(&bmca_data->announce_interval,
 8008a30:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8008a34:	0152      	lsls	r2, r2, #5
 8008a36:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8008a3a:	443a      	add	r2, r7
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	2300      	movs	r3, #0
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	4653      	mov	r3, sl
 8008a44:	3204      	adds	r2, #4
 8008a46:	3105      	adds	r1, #5
 8008a48:	4628      	mov	r0, r5
 8008a4a:	f010 fb54 	bl	80190f6 <update_itv>
	new_itv -= (old_itv-remaining);
 8008a4e:	eba8 0809 	sub.w	r8, r8, r9
 8008a52:	eba0 0808 	sub.w	r8, r0, r8
	if (new_itv <= 0) {
 8008a56:	f1b8 0f00 	cmp.w	r8, #0
 8008a5a:	dd18      	ble.n	8008a8e <gptp_update_announce_interval+0x96>
	k_timer_start(&state_ann->ann_send_periodic_timer, K_MSEC(new_itv),
 8008a5c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8008a60:	4640      	mov	r0, r8
 8008a62:	17c1      	asrs	r1, r0, #31
 8008a64:	008c      	lsls	r4, r1, #2
 8008a66:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8008a6a:	ea44 7398 	orr.w	r3, r4, r8, lsr #30
 8008a6e:	eb12 0208 	adds.w	r2, r2, r8
 8008a72:	eb41 0303 	adc.w	r3, r1, r3
 8008a76:	1892      	adds	r2, r2, r2
 8008a78:	415b      	adcs	r3, r3
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	e9cd 0100 	strd	r0, r1, [sp]
 8008a82:	4630      	mov	r0, r6
 8008a84:	f00e f832 	bl	8016aec <z_impl_k_timer_start>
}
 8008a88:	b002      	add	sp, #8
 8008a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		new_itv = 1;
 8008a8e:	f04f 0801 	mov.w	r8, #1
 8008a92:	e7e3      	b.n	8008a5c <gptp_update_announce_interval+0x64>
 8008a94:	20001470 	.word	0x20001470

08008a98 <gptp_get_domain>:
}
 8008a98:	4800      	ldr	r0, [pc, #0]	; (8008a9c <gptp_get_domain+0x4>)
 8008a9a:	4770      	bx	lr
 8008a9c:	20001470 	.word	0x20001470

08008aa0 <gptp_get_port_data>:
{
 8008aa0:	b4f0      	push	{r4, r5, r6, r7}
 8008aa2:	9e04      	ldr	r6, [sp, #16]
 8008aa4:	9d05      	ldr	r5, [sp, #20]
 8008aa6:	9c06      	ldr	r4, [sp, #24]
	if (domain != &gptp_domain) {
 8008aa8:	4f1f      	ldr	r7, [pc, #124]	; (8008b28 <gptp_get_port_data+0x88>)
 8008aaa:	4287      	cmp	r7, r0
 8008aac:	d131      	bne.n	8008b12 <gptp_get_port_data+0x72>
	if (port < GPTP_PORT_START || port >= GPTP_PORT_END) {
 8008aae:	2900      	cmp	r1, #0
 8008ab0:	dd32      	ble.n	8008b18 <gptp_get_port_data+0x78>
 8008ab2:	f897 012b 	ldrb.w	r0, [r7, #299]	; 0x12b
 8008ab6:	4288      	cmp	r0, r1
 8008ab8:	db31      	blt.n	8008b1e <gptp_get_port_data+0x7e>
	if (port_ds) {
 8008aba:	b13a      	cbz	r2, 8008acc <gptp_get_port_data+0x2c>
		*port_ds = GPTP_PORT_DS(port);
 8008abc:	1e48      	subs	r0, r1, #1
 8008abe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8008ac2:	0140      	lsls	r0, r0, #5
 8008ac4:	f500 702c 	add.w	r0, r0, #688	; 0x2b0
 8008ac8:	4438      	add	r0, r7
 8008aca:	6010      	str	r0, [r2, #0]
	if (port_param_ds) {
 8008acc:	b10b      	cbz	r3, 8008ad2 <gptp_get_port_data+0x32>
		*port_param_ds = NULL;
 8008ace:	2200      	movs	r2, #0
 8008ad0:	601a      	str	r2, [r3, #0]
	if (port_state) {
 8008ad2:	b14e      	cbz	r6, 8008ae8 <gptp_get_port_data+0x48>
		*port_state = GPTP_PORT_STATE(port);
 8008ad4:	1e4a      	subs	r2, r1, #1
 8008ad6:	f44f 735a 	mov.w	r3, #872	; 0x368
 8008ada:	fb03 f302 	mul.w	r3, r3, r2
 8008ade:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8008ae2:	4a11      	ldr	r2, [pc, #68]	; (8008b28 <gptp_get_port_data+0x88>)
 8008ae4:	4413      	add	r3, r2
 8008ae6:	6033      	str	r3, [r6, #0]
	if (port_bmca_data) {
 8008ae8:	b145      	cbz	r5, 8008afc <gptp_get_port_data+0x5c>
		*port_bmca_data = GPTP_PORT_BMCA_DATA(port);
 8008aea:	1e4a      	subs	r2, r1, #1
 8008aec:	2364      	movs	r3, #100	; 0x64
 8008aee:	fb03 f302 	mul.w	r3, r3, r2
 8008af2:	f503 63cf 	add.w	r3, r3, #1656	; 0x678
 8008af6:	4a0c      	ldr	r2, [pc, #48]	; (8008b28 <gptp_get_port_data+0x88>)
 8008af8:	4413      	add	r3, r2
 8008afa:	602b      	str	r3, [r5, #0]
	if (iface) {
 8008afc:	b194      	cbz	r4, 8008b24 <gptp_get_port_data+0x84>
		*iface = GPTP_PORT_IFACE(port);
 8008afe:	f201 11b5 	addw	r1, r1, #437	; 0x1b5
 8008b02:	4b09      	ldr	r3, [pc, #36]	; (8008b28 <gptp_get_port_data+0x88>)
 8008b04:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008b08:	684b      	ldr	r3, [r1, #4]
 8008b0a:	6023      	str	r3, [r4, #0]
	return 0;
 8008b0c:	2000      	movs	r0, #0
}
 8008b0e:	bcf0      	pop	{r4, r5, r6, r7}
 8008b10:	4770      	bx	lr
		return -ENOENT;
 8008b12:	f06f 0001 	mvn.w	r0, #1
 8008b16:	e7fa      	b.n	8008b0e <gptp_get_port_data+0x6e>
		return -EINVAL;
 8008b18:	f06f 0015 	mvn.w	r0, #21
 8008b1c:	e7f7      	b.n	8008b0e <gptp_get_port_data+0x6e>
 8008b1e:	f06f 0015 	mvn.w	r0, #21
 8008b22:	e7f4      	b.n	8008b0e <gptp_get_port_data+0x6e>
	return 0;
 8008b24:	2000      	movs	r0, #0
 8008b26:	e7f2      	b.n	8008b0e <gptp_get_port_data+0x6e>
 8008b28:	20001470 	.word	0x20001470

08008b2c <net_gptp_init>:
	net_mgmt_add_event_callback(&vlan_cb);
}
#endif /* CONFIG_NET_GPTP_VLAN */

void net_gptp_init(void)
{
 8008b2c:	b508      	push	{r3, lr}
	gptp_domain.default_ds.nb_ports = 0U;
 8008b2e:	4b03      	ldr	r3, [pc, #12]	; (8008b3c <net_gptp_init+0x10>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 212b 	strb.w	r2, [r3, #299]	; 0x12b
			 CONFIG_NET_GPTP_VLAN_TAG);

		init_ports();
	}
#else
	init_ports();
 8008b36:	f7ff fb89 	bl	800824c <init_ports>
#endif
}
 8008b3a:	bd08      	pop	{r3, pc}
 8008b3c:	20001470 	.word	0x20001470

08008b40 <gptp_register_phase_dis_cb>:

static sys_slist_t phase_dis_callbacks;

void gptp_register_phase_dis_cb(struct gptp_phase_dis_cb *phase_dis,
				gptp_phase_dis_callback_t cb)
{
 8008b40:	b410      	push	{r4}
	sys_slist_find_and_remove(&phase_dis_callbacks, &phase_dis->node);
 8008b42:	4604      	mov	r4, r0
	return list->head;
 8008b44:	4b15      	ldr	r3, [pc, #84]	; (8008b9c <gptp_register_phase_dis_cb+0x5c>)
 8008b46:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8008b48:	2200      	movs	r2, #0
 8008b4a:	b16b      	cbz	r3, 8008b68 <gptp_register_phase_dis_cb+0x28>
 8008b4c:	429c      	cmp	r4, r3
 8008b4e:	d002      	beq.n	8008b56 <gptp_register_phase_dis_cb+0x16>
 8008b50:	461a      	mov	r2, r3
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	e7f9      	b.n	8008b4a <gptp_register_phase_dis_cb+0xa>
Z_GENLIST_REMOVE(slist, snode)
 8008b56:	b18a      	cbz	r2, 8008b7c <gptp_register_phase_dis_cb+0x3c>
	return node->next;
 8008b58:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
 8008b5a:	6013      	str	r3, [r2, #0]
	return list->tail;
 8008b5c:	4b0f      	ldr	r3, [pc, #60]	; (8008b9c <gptp_register_phase_dis_cb+0x5c>)
 8008b5e:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8008b60:	4298      	cmp	r0, r3
 8008b62:	d014      	beq.n	8008b8e <gptp_register_phase_dis_cb+0x4e>
	parent->next = child;
 8008b64:	2300      	movs	r3, #0
 8008b66:	6003      	str	r3, [r0, #0]
	return list->head;
 8008b68:	4b0c      	ldr	r3, [pc, #48]	; (8008b9c <gptp_register_phase_dis_cb+0x5c>)
 8008b6a:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 8008b6c:	6002      	str	r2, [r0, #0]
	list->head = node;
 8008b6e:	6018      	str	r0, [r3, #0]
	return list->tail;
 8008b70:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 8008b72:	b17b      	cbz	r3, 8008b94 <gptp_register_phase_dis_cb+0x54>
	sys_slist_prepend(&phase_dis_callbacks, &phase_dis->node);

	phase_dis->cb = cb;
 8008b74:	6041      	str	r1, [r0, #4]
}
 8008b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b7a:	4770      	bx	lr
	return node->next;
 8008b7c:	6802      	ldr	r2, [r0, #0]
	list->head = node;
 8008b7e:	4b07      	ldr	r3, [pc, #28]	; (8008b9c <gptp_register_phase_dis_cb+0x5c>)
 8008b80:	601a      	str	r2, [r3, #0]
	return list->tail;
 8008b82:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8008b84:	4298      	cmp	r0, r3
 8008b86:	d1ed      	bne.n	8008b64 <gptp_register_phase_dis_cb+0x24>
	list->tail = node;
 8008b88:	4b04      	ldr	r3, [pc, #16]	; (8008b9c <gptp_register_phase_dis_cb+0x5c>)
 8008b8a:	605a      	str	r2, [r3, #4]
}
 8008b8c:	e7ea      	b.n	8008b64 <gptp_register_phase_dis_cb+0x24>
	list->tail = node;
 8008b8e:	4b03      	ldr	r3, [pc, #12]	; (8008b9c <gptp_register_phase_dis_cb+0x5c>)
 8008b90:	605a      	str	r2, [r3, #4]
}
 8008b92:	e7e7      	b.n	8008b64 <gptp_register_phase_dis_cb+0x24>
	list->tail = node;
 8008b94:	4b01      	ldr	r3, [pc, #4]	; (8008b9c <gptp_register_phase_dis_cb+0x5c>)
 8008b96:	6058      	str	r0, [r3, #4]
}
 8008b98:	e7ec      	b.n	8008b74 <gptp_register_phase_dis_cb+0x34>
 8008b9a:	bf00      	nop
 8008b9c:	20003154 	.word	0x20003154

08008ba0 <gptp_call_phase_dis_cb>:
{
	sys_slist_find_and_remove(&phase_dis_callbacks, &phase_dis->node);
}

void gptp_call_phase_dis_cb(void)
{
 8008ba0:	b538      	push	{r3, r4, r5, lr}
	return list->head;
 8008ba2:	4b0c      	ldr	r3, [pc, #48]	; (8008bd4 <gptp_call_phase_dis_cb+0x34>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
 8008ba6:	b10b      	cbz	r3, 8008bac <gptp_call_phase_dis_cb+0xc>
	return node->next;
 8008ba8:	681c      	ldr	r4, [r3, #0]
 8008baa:	e004      	b.n	8008bb6 <gptp_call_phase_dis_cb+0x16>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8008bac:	461c      	mov	r4, r3
 8008bae:	e002      	b.n	8008bb6 <gptp_call_phase_dis_cb+0x16>
 8008bb0:	4622      	mov	r2, r4
 8008bb2:	4623      	mov	r3, r4
 8008bb4:	4614      	mov	r4, r2
	uint8_t *gm_id;

	global_ds = GPTP_GLOBAL_DS();
	gm_id = &global_ds->gm_priority.root_system_id.grand_master_id[0];

	SYS_SLIST_FOR_EACH_NODE_SAFE(&phase_dis_callbacks, sn, sns) {
 8008bb6:	b163      	cbz	r3, 8008bd2 <gptp_call_phase_dis_cb+0x32>
		struct gptp_phase_dis_cb *phase_dis =
			CONTAINER_OF(sn, struct gptp_phase_dis_cb, node);

		phase_dis->cb(gm_id,
 8008bb8:	685d      	ldr	r5, [r3, #4]
 8008bba:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <gptp_call_phase_dis_cb+0x38>)
 8008bbc:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8008bc0:	f103 01e6 	add.w	r1, r3, #230	; 0xe6
 8008bc4:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 8008bc8:	47a8      	blx	r5
 8008bca:	2c00      	cmp	r4, #0
 8008bcc:	d0f0      	beq.n	8008bb0 <gptp_call_phase_dis_cb+0x10>
	return node->next;
 8008bce:	6822      	ldr	r2, [r4, #0]
 8008bd0:	e7ef      	b.n	8008bb2 <gptp_call_phase_dis_cb+0x12>
			      &global_ds->gm_time_base_indicator,
			      &global_ds->clk_src_last_gm_phase_change,
			      &global_ds->clk_src_last_gm_freq_change);
	}
}
 8008bd2:	bd38      	pop	{r3, r4, r5, pc}
 8008bd4:	20003154 	.word	0x20003154
 8008bd8:	20001488 	.word	0x20001488

08008bdc <gptp_md_pdelay_reset>:
	state = &GPTP_PORT_STATE(port)->pdelay_req;
 8008bdc:	1e43      	subs	r3, r0, #1
	if (state->lost_responses < port_ds->allowed_lost_responses) {
 8008bde:	4a16      	ldr	r2, [pc, #88]	; (8008c38 <gptp_md_pdelay_reset+0x5c>)
 8008be0:	f44f 715a 	mov.w	r1, #872	; 0x368
 8008be4:	fb01 2000 	mla	r0, r1, r0, r2
 8008be8:	8881      	ldrh	r1, [r0, #4]
 8008bea:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8008bee:	eb02 1240 	add.w	r2, r2, r0, lsl #5
 8008bf2:	f8b2 22fa 	ldrh.w	r2, [r2, #762]	; 0x2fa
 8008bf6:	4291      	cmp	r1, r2
 8008bf8:	d208      	bcs.n	8008c0c <gptp_md_pdelay_reset+0x30>
		state->lost_responses += 1U;
 8008bfa:	f44f 725a 	mov.w	r2, #872	; 0x368
 8008bfe:	fb03 2202 	mla	r2, r3, r2, r2
 8008c02:	4b0d      	ldr	r3, [pc, #52]	; (8008c38 <gptp_md_pdelay_reset+0x5c>)
 8008c04:	441a      	add	r2, r3
 8008c06:	3101      	adds	r1, #1
 8008c08:	8091      	strh	r1, [r2, #4]
 8008c0a:	4770      	bx	lr
		port_ds->is_measuring_delay = false;
 8008c0c:	480a      	ldr	r0, [pc, #40]	; (8008c38 <gptp_md_pdelay_reset+0x5c>)
 8008c0e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8008c12:	eb00 1242 	add.w	r2, r0, r2, lsl #5
 8008c16:	f892 130d 	ldrb.w	r1, [r2, #781]	; 0x30d
		port_ds->as_capable = false;
 8008c1a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8008c1e:	f36f 01c3 	bfc	r1, #3, #1
 8008c22:	f882 130d 	strb.w	r1, [r2, #781]	; 0x30d
		state->init_pdelay_compute = true;
 8008c26:	f44f 725a 	mov.w	r2, #872	; 0x368
 8008c2a:	fb02 0303 	mla	r3, r2, r3, r0
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
}
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	20001470 	.word	0x20001470

08008c3c <gptp_md_pdelay_req_timeout>:
static void gptp_md_pdelay_req_timeout(struct k_timer *timer)
{
	struct gptp_pdelay_req_state *state;
	int port;

	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	4b11      	ldr	r3, [pc, #68]	; (8008c84 <gptp_md_pdelay_req_timeout+0x48>)
 8008c40:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8008c44:	4293      	cmp	r3, r2
 8008c46:	da08      	bge.n	8008c5a <gptp_md_pdelay_req_timeout+0x1e>
 8008c48:	4770      	bx	lr
		state = &GPTP_PORT_STATE(port)->pdelay_req;
		if (timer == &state->pdelay_timer) {
			state->pdelay_timer_expired = true;
 8008c4a:	f44f 735a 	mov.w	r3, #872	; 0x368
 8008c4e:	fb01 3303 	mla	r3, r1, r3, r3
 8008c52:	4423      	add	r3, r4
 8008c54:	2101      	movs	r1, #1
 8008c56:	71d9      	strb	r1, [r3, #7]

			if (state->rcvd_pdelay_resp == 0U) {
 8008c58:	e00b      	b.n	8008c72 <gptp_md_pdelay_req_timeout+0x36>
{
 8008c5a:	b410      	push	{r4}
		state = &GPTP_PORT_STATE(port)->pdelay_req;
 8008c5c:	1e51      	subs	r1, r2, #1
		if (timer == &state->pdelay_timer) {
 8008c5e:	f44f 735a 	mov.w	r3, #872	; 0x368
 8008c62:	fb03 f301 	mul.w	r3, r3, r1
 8008c66:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8008c6a:	4c06      	ldr	r4, [pc, #24]	; (8008c84 <gptp_md_pdelay_req_timeout+0x48>)
 8008c6c:	4423      	add	r3, r4
 8008c6e:	4283      	cmp	r3, r0
 8008c70:	d0eb      	beq.n	8008c4a <gptp_md_pdelay_req_timeout+0xe>
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 8008c72:	3201      	adds	r2, #1
 8008c74:	4b03      	ldr	r3, [pc, #12]	; (8008c84 <gptp_md_pdelay_req_timeout+0x48>)
 8008c76:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	daee      	bge.n	8008c5c <gptp_md_pdelay_req_timeout+0x20>
				GPTP_STATS_INC(port,
					pdelay_allowed_lost_resp_exceed_count);
			}
		}
	}
}
 8008c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	20001470 	.word	0x20001470

08008c88 <gptp_md_start_pdelay_req>:

static void gptp_md_start_pdelay_req(int port)
{
 8008c88:	b430      	push	{r4, r5}
	struct gptp_pdelay_req_state *state;
	struct gptp_port_ds *port_ds;

	port_ds = GPTP_PORT_DS(port);
 8008c8a:	1e43      	subs	r3, r0, #1
	state = &GPTP_PORT_STATE(port)->pdelay_req;

	port_ds->neighbor_rate_ratio = 1.0;
 8008c8c:	4910      	ldr	r1, [pc, #64]	; (8008cd0 <gptp_md_start_pdelay_req+0x48>)
 8008c8e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8008c92:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 8008c96:	2400      	movs	r4, #0
 8008c98:	4d0e      	ldr	r5, [pc, #56]	; (8008cd4 <gptp_md_start_pdelay_req+0x4c>)
 8008c9a:	e9c2 45b4 	strd	r4, r5, [r2, #720]	; 0x2d0
	port_ds->is_measuring_delay = false;
 8008c9e:	f892 430d 	ldrb.w	r4, [r2, #781]	; 0x30d
	port_ds->as_capable = false;
 8008ca2:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
 8008ca6:	f36f 04c3 	bfc	r4, #3, #1
 8008caa:	f882 430d 	strb.w	r4, [r2, #781]	; 0x30d
	state->lost_responses = 0U;
 8008cae:	f44f 745a 	mov.w	r4, #872	; 0x368
 8008cb2:	fb04 f000 	mul.w	r0, r4, r0
 8008cb6:	180d      	adds	r5, r1, r0
 8008cb8:	2200      	movs	r2, #0
 8008cba:	80aa      	strh	r2, [r5, #4]
	state->rcvd_pdelay_resp = 0U;
 8008cbc:	fb04 1303 	mla	r3, r4, r3, r1
 8008cc0:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
	state->rcvd_pdelay_follow_up = 0U;
 8008cc4:	500a      	str	r2, [r1, r0]
	state->multiple_resp_count = 0U;
 8008cc6:	f883 2372 	strb.w	r2, [r3, #882]	; 0x372
}
 8008cca:	bc30      	pop	{r4, r5}
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	20001470 	.word	0x20001470
 8008cd4:	3ff00000 	.word	0x3ff00000

08008cd8 <gptp_md_follow_up_receipt_timeout>:
static void gptp_md_follow_up_receipt_timeout(struct k_timer *timer)
{
	struct gptp_sync_rcv_state *state;
	int port;

	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 8008cd8:	2201      	movs	r2, #1
 8008cda:	4b12      	ldr	r3, [pc, #72]	; (8008d24 <gptp_md_follow_up_receipt_timeout+0x4c>)
 8008cdc:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	dd09      	ble.n	8008cf8 <gptp_md_follow_up_receipt_timeout+0x20>
 8008ce4:	4770      	bx	lr
		state = &GPTP_PORT_STATE(port)->sync_rcv;
		if (timer == &state->follow_up_discard_timer) {
			NET_WARN("No %s received after %s message",
				 "FOLLOWUP", "SYNC");
			state->follow_up_timeout_expired = true;
 8008ce6:	4623      	mov	r3, r4
 8008ce8:	f44f 745a 	mov.w	r4, #872	; 0x368
 8008cec:	fb04 3101 	mla	r1, r4, r1, r3
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	f881 33c3 	strb.w	r3, [r1, #963]	; 0x3c3
 8008cf6:	e00b      	b.n	8008d10 <gptp_md_follow_up_receipt_timeout+0x38>
{
 8008cf8:	b410      	push	{r4}
		state = &GPTP_PORT_STATE(port)->sync_rcv;
 8008cfa:	1e51      	subs	r1, r2, #1
		if (timer == &state->follow_up_discard_timer) {
 8008cfc:	f44f 735a 	mov.w	r3, #872	; 0x368
 8008d00:	fb03 f301 	mul.w	r3, r3, r1
 8008d04:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8008d08:	4c06      	ldr	r4, [pc, #24]	; (8008d24 <gptp_md_follow_up_receipt_timeout+0x4c>)
 8008d0a:	4423      	add	r3, r4
 8008d0c:	4283      	cmp	r3, r0
 8008d0e:	d0ea      	beq.n	8008ce6 <gptp_md_follow_up_receipt_timeout+0xe>
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 8008d10:	3201      	adds	r2, #1
 8008d12:	4b04      	ldr	r3, [pc, #16]	; (8008d24 <gptp_md_follow_up_receipt_timeout+0x4c>)
 8008d14:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	ddee      	ble.n	8008cfa <gptp_md_follow_up_receipt_timeout+0x22>
		}
	}
}
 8008d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	20001470 	.word	0x20001470

08008d28 <gptp_md_init_pdelay_resp_state_machine>:

static void gptp_md_init_pdelay_resp_state_machine(int port)
{
	struct gptp_pdelay_resp_state *state;

	state = &GPTP_PORT_STATE(port)->pdelay_resp;
 8008d28:	3801      	subs	r0, #1

	state->state = GPTP_PDELAY_RESP_NOT_ENABLED;
 8008d2a:	4b04      	ldr	r3, [pc, #16]	; (8008d3c <gptp_md_init_pdelay_resp_state_machine+0x14>)
 8008d2c:	f44f 725a 	mov.w	r2, #872	; 0x368
 8008d30:	fb02 3000 	mla	r0, r2, r0, r3
 8008d34:	2300      	movs	r3, #0
 8008d36:	f880 3670 	strb.w	r3, [r0, #1648]	; 0x670
}
 8008d3a:	4770      	bx	lr
 8008d3c:	20001470 	.word	0x20001470

08008d40 <gptp_md_init_sync_send_state_machine>:

static void gptp_md_init_sync_send_state_machine(int port)
{
	struct gptp_sync_send_state *state;

	state = &GPTP_PORT_STATE(port)->sync_send;
 8008d40:	3801      	subs	r0, #1

	state->rcvd_md_sync = false;
 8008d42:	4b08      	ldr	r3, [pc, #32]	; (8008d64 <gptp_md_init_sync_send_state_machine+0x24>)
 8008d44:	f44f 725a 	mov.w	r2, #872	; 0x368
 8008d48:	fb02 3000 	mla	r0, r2, r0, r3
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	f880 33d1 	strb.w	r3, [r0, #977]	; 0x3d1
	state->md_sync_timestamp_avail = false;
 8008d52:	f880 33d2 	strb.w	r3, [r0, #978]	; 0x3d2
	state->sync_send_ptr = NULL;
 8008d56:	f8c0 33c8 	str.w	r3, [r0, #968]	; 0x3c8
	state->sync_ptr = NULL;
 8008d5a:	f8c0 33cc 	str.w	r3, [r0, #972]	; 0x3cc

	state->state = GPTP_SYNC_SEND_INITIALIZING;
 8008d5e:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
}
 8008d62:	4770      	bx	lr
 8008d64:	20001470 	.word	0x20001470

08008d68 <gptp_md_pdelay_resp_state_machine>:
static void gptp_md_pdelay_resp_state_machine(int port)
{
	struct gptp_port_ds *port_ds;
	struct gptp_pdelay_resp_state *state;

	state = &GPTP_PORT_STATE(port)->pdelay_resp;
 8008d68:	3801      	subs	r0, #1
	port_ds = GPTP_PORT_DS(port);

	if (!port_ds->ptt_port_enabled) {
 8008d6a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8008d6e:	4b15      	ldr	r3, [pc, #84]	; (8008dc4 <gptp_md_pdelay_resp_state_machine+0x5c>)
 8008d70:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8008d74:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 8008d78:	f013 0f01 	tst.w	r3, #1
 8008d7c:	d107      	bne.n	8008d8e <gptp_md_pdelay_resp_state_machine+0x26>
		state->state = GPTP_PDELAY_RESP_NOT_ENABLED;
 8008d7e:	4a11      	ldr	r2, [pc, #68]	; (8008dc4 <gptp_md_pdelay_resp_state_machine+0x5c>)
 8008d80:	f44f 735a 	mov.w	r3, #872	; 0x368
 8008d84:	fb03 2300 	mla	r3, r3, r0, r2
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2670 	strb.w	r2, [r3, #1648]	; 0x670
	}

	switch (state->state) {
 8008d8e:	4a0d      	ldr	r2, [pc, #52]	; (8008dc4 <gptp_md_pdelay_resp_state_machine+0x5c>)
 8008d90:	f44f 735a 	mov.w	r3, #872	; 0x368
 8008d94:	fb03 2300 	mla	r3, r3, r0, r2
 8008d98:	f893 3670 	ldrb.w	r3, [r3, #1648]	; 0x670
 8008d9c:	b983      	cbnz	r3, 8008dc0 <gptp_md_pdelay_resp_state_machine+0x58>
	case GPTP_PDELAY_RESP_NOT_ENABLED:
		if (port_ds->ptt_port_enabled) {
 8008d9e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8008da2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8008da6:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 8008daa:	f013 0f01 	tst.w	r3, #1
 8008dae:	d007      	beq.n	8008dc0 <gptp_md_pdelay_resp_state_machine+0x58>
			state->state = GPTP_PDELAY_RESP_INITIAL_WAIT_REQ;
 8008db0:	4613      	mov	r3, r2
 8008db2:	f44f 725a 	mov.w	r2, #872	; 0x368
 8008db6:	fb02 3000 	mla	r0, r2, r0, r3
 8008dba:	2301      	movs	r3, #1
 8008dbc:	f880 3670 	strb.w	r3, [r0, #1648]	; 0x670
	case GPTP_PDELAY_RESP_WAIT_TSTAMP:
		/* Handled in gptp_follow_up_callback. */
		break;
	}

}
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	20001470 	.word	0x20001470

08008dc8 <gptp_md_init_pdelay_req_state_machine>:
{
 8008dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dca:	4607      	mov	r7, r0
	state = &GPTP_PORT_STATE(port)->pdelay_req;
 8008dcc:	1e43      	subs	r3, r0, #1
	k_timer_init(&state->pdelay_timer, gptp_md_pdelay_req_timeout, NULL);
 8008dce:	f44f 755a 	mov.w	r5, #872	; 0x368
 8008dd2:	fb05 f403 	mul.w	r4, r5, r3
 8008dd6:	f504 7048 	add.w	r0, r4, #800	; 0x320
 8008dda:	4e11      	ldr	r6, [pc, #68]	; (8008e20 <gptp_md_init_pdelay_req_state_machine+0x58>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	4911      	ldr	r1, [pc, #68]	; (8008e24 <gptp_md_init_pdelay_req_state_machine+0x5c>)
 8008de0:	4430      	add	r0, r6
 8008de2:	f013 fc45 	bl	801c670 <k_timer_init>
	state->state = GPTP_PDELAY_REQ_NOT_ENABLED;
 8008de6:	fb05 f507 	mul.w	r5, r5, r7
 8008dea:	1971      	adds	r1, r6, r5
 8008dec:	2200      	movs	r2, #0
 8008dee:	718a      	strb	r2, [r1, #6]
	state->neighbor_rate_ratio_valid = false;
 8008df0:	1933      	adds	r3, r6, r4
 8008df2:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
	state->init_pdelay_compute = true;
 8008df6:	2001      	movs	r0, #1
 8008df8:	f883 0371 	strb.w	r0, [r3, #881]	; 0x371
	state->rcvd_pdelay_resp = 0U;
 8008dfc:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
	state->rcvd_pdelay_follow_up = 0U;
 8008e00:	5172      	str	r2, [r6, r5]
	state->pdelay_timer_expired = false;
 8008e02:	71ca      	strb	r2, [r1, #7]
	state->rcvd_pdelay_resp_ptr = NULL;
 8008e04:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
	state->rcvd_pdelay_follow_up_ptr = NULL;
 8008e08:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
	state->tx_pdelay_req_ptr = NULL;
 8008e0c:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
	state->ini_resp_evt_tstamp = 0U;
 8008e10:	2400      	movs	r4, #0
 8008e12:	2500      	movs	r5, #0
 8008e14:	e9c3 45c4 	strd	r4, r5, [r3, #784]	; 0x310
	state->ini_resp_ingress_tstamp = 0U;
 8008e18:	e9c3 45c6 	strd	r4, r5, [r3, #792]	; 0x318
	state->lost_responses = 0U;
 8008e1c:	808a      	strh	r2, [r1, #4]
}
 8008e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e20:	20001470 	.word	0x20001470
 8008e24:	08008c3d 	.word	0x08008c3d

08008e28 <gptp_md_init_sync_rcv_state_machine>:
{
 8008e28:	b538      	push	{r3, r4, r5, lr}
	state = &GPTP_PORT_STATE(port)->sync_rcv;
 8008e2a:	3801      	subs	r0, #1
	k_timer_init(&state->follow_up_discard_timer,
 8008e2c:	f44f 755a 	mov.w	r5, #872	; 0x368
 8008e30:	fb05 f500 	mul.w	r5, r5, r0
 8008e34:	f505 7060 	add.w	r0, r5, #896	; 0x380
 8008e38:	4c0c      	ldr	r4, [pc, #48]	; (8008e6c <gptp_md_init_sync_rcv_state_machine+0x44>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	490c      	ldr	r1, [pc, #48]	; (8008e70 <gptp_md_init_sync_rcv_state_machine+0x48>)
 8008e3e:	4420      	add	r0, r4
 8008e40:	f013 fc16 	bl	801c670 <k_timer_init>
	state->rcvd_sync = false;
 8008e44:	1960      	adds	r0, r4, r5
 8008e46:	2300      	movs	r3, #0
 8008e48:	f880 33c1 	strb.w	r3, [r0, #961]	; 0x3c1
	state->rcvd_follow_up = false;
 8008e4c:	f880 33c2 	strb.w	r3, [r0, #962]	; 0x3c2
	state->rcvd_sync_ptr = NULL;
 8008e50:	f8c0 33b8 	str.w	r3, [r0, #952]	; 0x3b8
	state->rcvd_follow_up_ptr = NULL;
 8008e54:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc
	state->follow_up_timeout_expired = false;
 8008e58:	f880 33c3 	strb.w	r3, [r0, #963]	; 0x3c3
	state->follow_up_receipt_timeout = 0U;
 8008e5c:	2400      	movs	r4, #0
 8008e5e:	2500      	movs	r5, #0
 8008e60:	e9c0 45de 	strd	r4, r5, [r0, #888]	; 0x378
	state->state = GPTP_SYNC_RCV_DISCARD;
 8008e64:	f880 33c0 	strb.w	r3, [r0, #960]	; 0x3c0
}
 8008e68:	bd38      	pop	{r3, r4, r5, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20001470 	.word	0x20001470
 8008e70:	08008cd9 	.word	0x08008cd9

08008e74 <gptp_md_pdelay_check_multiple_resp>:
{
 8008e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e78:	b082      	sub	sp, #8
	state = &GPTP_PORT_STATE(port)->pdelay_req;
 8008e7a:	1e44      	subs	r4, r0, #1
	if ((state->rcvd_pdelay_resp > 1) ||
 8008e7c:	4a3b      	ldr	r2, [pc, #236]	; (8008f6c <gptp_md_pdelay_check_multiple_resp+0xf8>)
 8008e7e:	f44f 735a 	mov.w	r3, #872	; 0x368
 8008e82:	fb03 2304 	mla	r3, r3, r4, r2
 8008e86:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d927      	bls.n	8008ede <gptp_md_pdelay_check_multiple_resp+0x6a>
		port_ds->as_capable = false;
 8008e8e:	4937      	ldr	r1, [pc, #220]	; (8008f6c <gptp_md_pdelay_check_multiple_resp+0xf8>)
 8008e90:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8008e94:	eb01 1242 	add.w	r2, r1, r2, lsl #5
 8008e98:	f892 330d 	ldrb.w	r3, [r2, #781]	; 0x30d
 8008e9c:	f36f 03c3 	bfc	r3, #3, #1
 8008ea0:	f882 330d 	strb.w	r3, [r2, #781]	; 0x30d
		state->multiple_resp_count++;
 8008ea4:	f44f 735a 	mov.w	r3, #872	; 0x368
 8008ea8:	fb03 1304 	mla	r3, r3, r4, r1
 8008eac:	f893 2372 	ldrb.w	r2, [r3, #882]	; 0x372
 8008eb0:	3201      	adds	r2, #1
 8008eb2:	f883 2372 	strb.w	r2, [r3, #882]	; 0x372
	if (state->multiple_resp_count >= 3U) {
 8008eb6:	4a2d      	ldr	r2, [pc, #180]	; (8008f6c <gptp_md_pdelay_check_multiple_resp+0xf8>)
 8008eb8:	f44f 735a 	mov.w	r3, #872	; 0x368
 8008ebc:	fb03 2304 	mla	r3, r3, r4, r2
 8008ec0:	f893 3372 	ldrb.w	r3, [r3, #882]	; 0x372
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d81a      	bhi.n	8008efe <gptp_md_pdelay_check_multiple_resp+0x8a>
		state->state = GPTP_PDELAY_REQ_SEND_REQ;
 8008ec8:	f44f 705a 	mov.w	r0, #872	; 0x368
 8008ecc:	fb04 0000 	mla	r0, r4, r0, r0
 8008ed0:	4c26      	ldr	r4, [pc, #152]	; (8008f6c <gptp_md_pdelay_check_multiple_resp+0xf8>)
 8008ed2:	4420      	add	r0, r4
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	7183      	strb	r3, [r0, #6]
}
 8008ed8:	b002      	add	sp, #8
 8008eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(state->rcvd_pdelay_follow_up > 1)) {
 8008ede:	f44f 735a 	mov.w	r3, #872	; 0x368
 8008ee2:	fb04 3303 	mla	r3, r4, r3, r3
 8008ee6:	58d3      	ldr	r3, [r2, r3]
	if ((state->rcvd_pdelay_resp > 1) ||
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d8d0      	bhi.n	8008e8e <gptp_md_pdelay_check_multiple_resp+0x1a>
		state->multiple_resp_count = 0U;
 8008eec:	4a1f      	ldr	r2, [pc, #124]	; (8008f6c <gptp_md_pdelay_check_multiple_resp+0xf8>)
 8008eee:	f44f 735a 	mov.w	r3, #872	; 0x368
 8008ef2:	fb03 2304 	mla	r3, r3, r4, r2
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 2372 	strb.w	r2, [r3, #882]	; 0x372
 8008efc:	e7db      	b.n	8008eb6 <gptp_md_pdelay_check_multiple_resp+0x42>
		state->multiple_resp_count = 0U;
 8008efe:	4617      	mov	r7, r2
 8008f00:	f44f 765a 	mov.w	r6, #872	; 0x368
 8008f04:	fb06 f504 	mul.w	r5, r6, r4
 8008f08:	1953      	adds	r3, r2, r5
 8008f0a:	f04f 0800 	mov.w	r8, #0
 8008f0e:	f883 8372 	strb.w	r8, [r3, #882]	; 0x372
		k_timer_stop(&state->pdelay_timer);
 8008f12:	f505 7548 	add.w	r5, r5, #800	; 0x320
 8008f16:	4415      	add	r5, r2
	z_impl_k_timer_stop(timer);
 8008f18:	4628      	mov	r0, r5
 8008f1a:	f013 fbb5 	bl	801c688 <z_impl_k_timer_stop>
		state->pdelay_timer_expired = false;
 8008f1e:	fb04 6606 	mla	r6, r4, r6, r6
 8008f22:	443e      	add	r6, r7
 8008f24:	f886 8007 	strb.w	r8, [r6, #7]
			gptp_uscaled_ns_to_timer_ms(&port_ds->pdelay_req_itv);
 8008f28:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8008f2c:	0140      	lsls	r0, r0, #5
 8008f2e:	f500 703a 	add.w	r0, r0, #744	; 0x2e8
 8008f32:	4438      	add	r0, r7
 8008f34:	3006      	adds	r0, #6
 8008f36:	f7ff fc5b 	bl	80087f0 <gptp_uscaled_ns_to_timer_ms>
		duration = GPTP_MULTIPLE_PDELAY_RESP_WAIT -
 8008f3a:	f5c0 2092 	rsb	r0, r0, #299008	; 0x49000
 8008f3e:	f500 7078 	add.w	r0, r0, #992	; 0x3e0
		k_timer_start(&state->pdelay_timer, K_MSEC(duration),
 8008f42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008f46:	17c7      	asrs	r7, r0, #31
 8008f48:	00b9      	lsls	r1, r7, #2
 8008f4a:	0082      	lsls	r2, r0, #2
 8008f4c:	ea41 7390 	orr.w	r3, r1, r0, lsr #30
 8008f50:	1812      	adds	r2, r2, r0
 8008f52:	eb47 0303 	adc.w	r3, r7, r3
 8008f56:	1892      	adds	r2, r2, r2
 8008f58:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	e9cd 0100 	strd	r0, r1, [sp]
 8008f62:	4628      	mov	r0, r5
 8008f64:	f00d fdc2 	bl	8016aec <z_impl_k_timer_start>
 8008f68:	e7b6      	b.n	8008ed8 <gptp_md_pdelay_check_multiple_resp+0x64>
 8008f6a:	bf00      	nop
 8008f6c:	20001470 	.word	0x20001470

08008f70 <gptp_md_compute_pdelay_rate_ratio>:
{
 8008f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	b083      	sub	sp, #12
	state = &GPTP_PORT_STATE(port)->pdelay_req;
 8008f76:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
	pkt = state->rcvd_pdelay_resp_ptr;
 8008f7a:	4a81      	ldr	r2, [pc, #516]	; (8009180 <gptp_md_compute_pdelay_rate_ratio+0x210>)
 8008f7c:	f44f 735a 	mov.w	r3, #872	; 0x368
 8008f80:	fb03 230a 	mla	r3, r3, sl, r2
 8008f84:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
	if (pkt) {
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 80b6 	beq.w	80090fa <gptp_md_compute_pdelay_rate_ratio+0x18a>
	if (!ts) {
 8008f8e:	f113 0f20 	cmn.w	r3, #32
 8008f92:	f000 80b5 	beq.w	8009100 <gptp_md_compute_pdelay_rate_ratio+0x190>
	return (ts->second * NSEC_PER_SEC) + ts->nanosecond;
 8008f96:	6a1c      	ldr	r4, [r3, #32]
 8008f98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008f9a:	4a7a      	ldr	r2, [pc, #488]	; (8009184 <gptp_md_compute_pdelay_rate_ratio+0x214>)
 8008f9c:	fba4 4502 	umull	r4, r5, r4, r2
 8008fa0:	fb02 5501 	mla	r5, r2, r1, r5
 8008fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa6:	18e4      	adds	r4, r4, r3
 8008fa8:	f145 0500 	adc.w	r5, r5, #0
	pkt = state->rcvd_pdelay_follow_up_ptr;
 8008fac:	4a74      	ldr	r2, [pc, #464]	; (8009180 <gptp_md_compute_pdelay_rate_ratio+0x210>)
 8008fae:	f44f 735a 	mov.w	r3, #872	; 0x368
 8008fb2:	fb03 230a 	mla	r3, r3, sl, r2
 8008fb6:	f8d3 935c 	ldr.w	r9, [r3, #860]	; 0x35c
	if (pkt) {
 8008fba:	f1b9 0f00 	cmp.w	r9, #0
 8008fbe:	f000 80a2 	beq.w	8009106 <gptp_md_compute_pdelay_rate_ratio+0x196>
		hdr = GPTP_HDR(pkt);
 8008fc2:	4648      	mov	r0, r9
 8008fc4:	f010 f8db 	bl	801917e <gptp_get_hdr>
 8008fc8:	4680      	mov	r8, r0
 8008fca:	4648      	mov	r0, r9
 8008fcc:	f010 f8d7 	bl	801917e <gptp_get_hdr>
 8008fd0:	4684      	mov	ip, r0
		resp_evt_tstamp = ntohs(fup->resp_orig_ts_secs_high);
 8008fd2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8008fd4:	0a18      	lsrs	r0, r3, #8
 8008fd6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8008fda:	b282      	uxth	r2, r0
 8008fdc:	2300      	movs	r3, #0
 8008fde:	e9cd 2300 	strd	r2, r3, [sp]
		resp_evt_tstamp |= ntohl(fup->resp_orig_ts_secs_low);
 8008fe2:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8008fe6:	0a1a      	lsrs	r2, r3, #8
 8008fe8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8008fec:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8008ff0:	0219      	lsls	r1, r3, #8
 8008ff2:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
		resp_evt_tstamp *= NSEC_PER_SEC;
 8008ffc:	4961      	ldr	r1, [pc, #388]	; (8009184 <gptp_md_compute_pdelay_rate_ratio+0x214>)
 8008ffe:	fba2 2301 	umull	r2, r3, r2, r1
 8009002:	9800      	ldr	r0, [sp, #0]
 8009004:	fb01 3300 	mla	r3, r1, r0, r3
		resp_evt_tstamp += ntohl(fup->resp_orig_ts_nsecs);
 8009008:	f8dc 0028 	ldr.w	r0, [ip, #40]	; 0x28
 800900c:	0a01      	lsrs	r1, r0, #8
 800900e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8009012:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8009016:	ea4f 2c00 	mov.w	ip, r0, lsl #8
 800901a:	f40c 0c7f 	and.w	ip, ip, #16711680	; 0xff0000
 800901e:	ea41 010c 	orr.w	r1, r1, ip
 8009022:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 8009026:	1852      	adds	r2, r2, r1
 8009028:	f143 0300 	adc.w	r3, r3, #0
		resp_evt_tstamp += (ntohll(hdr->correction_field) >> 16);
 800902c:	f8d8 c008 	ldr.w	ip, [r8, #8]
 8009030:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8009034:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8009038:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 800903c:	ea4e 6e11 	orr.w	lr, lr, r1, lsr #24
 8009040:	ea4f 601c 	mov.w	r0, ip, lsr #24
 8009044:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8009048:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800904c:	ea4e 0e00 	orr.w	lr, lr, r0
 8009050:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8009054:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8009058:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 800905c:	ea4e 0e00 	orr.w	lr, lr, r0
 8009060:	0208      	lsls	r0, r1, #8
 8009062:	ea40 601c 	orr.w	r0, r0, ip, lsr #24
 8009066:	ea4f 280c 	mov.w	r8, ip, lsl #8
 800906a:	f000 00ff 	and.w	r0, r0, #255	; 0xff
 800906e:	0609      	lsls	r1, r1, #24
 8009070:	ea41 211c 	orr.w	r1, r1, ip, lsr #8
 8009074:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8009078:	4301      	orrs	r1, r0
 800907a:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 800907e:	ea41 0108 	orr.w	r1, r1, r8
 8009082:	ea41 6c0c 	orr.w	ip, r1, ip, lsl #24
 8009086:	ea4f 401e 	mov.w	r0, lr, lsr #16
 800908a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800908e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8009092:	1886      	adds	r6, r0, r2
 8009094:	eb48 0703 	adc.w	r7, r8, r3
	if (state->init_pdelay_compute) {
 8009098:	4a39      	ldr	r2, [pc, #228]	; (8009180 <gptp_md_compute_pdelay_rate_ratio+0x210>)
 800909a:	f44f 735a 	mov.w	r3, #872	; 0x368
 800909e:	fb03 230a 	mla	r3, r3, sl, r2
 80090a2:	f893 3371 	ldrb.w	r3, [r3, #881]	; 0x371
 80090a6:	b38b      	cbz	r3, 800910c <gptp_md_compute_pdelay_rate_ratio+0x19c>
		state->init_pdelay_compute = false;
 80090a8:	f44f 735a 	mov.w	r3, #872	; 0x368
 80090ac:	fb03 230a 	mla	r3, r3, sl, r2
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
		state->ini_resp_ingress_tstamp = ingress_tstamp;
 80090b6:	e9c3 45c6 	strd	r4, r5, [r3, #792]	; 0x318
		state->ini_resp_evt_tstamp = resp_evt_tstamp;
 80090ba:	e9c3 67c4 	strd	r6, r7, [r3, #784]	; 0x310
		state->neighbor_rate_ratio_valid = false;
 80090be:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
		neighbor_rate_ratio = 1.0;
 80090c2:	2000      	movs	r0, #0
 80090c4:	4930      	ldr	r1, [pc, #192]	; (8009188 <gptp_md_compute_pdelay_rate_ratio+0x218>)
	port_ds->neighbor_rate_ratio = neighbor_rate_ratio;
 80090c6:	4b2e      	ldr	r3, [pc, #184]	; (8009180 <gptp_md_compute_pdelay_rate_ratio+0x210>)
 80090c8:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
 80090cc:	eb03 1242 	add.w	r2, r3, r2, lsl #5
 80090d0:	e9c2 01b4 	strd	r0, r1, [r2, #720]	; 0x2d0
	port_ds->neighbor_rate_ratio_valid = state->neighbor_rate_ratio_valid;
 80090d4:	f44f 725a 	mov.w	r2, #872	; 0x368
 80090d8:	fb02 320a 	mla	r2, r2, sl, r3
 80090dc:	f892 2370 	ldrb.w	r2, [r2, #880]	; 0x370
 80090e0:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80090e4:	eb03 1a4a 	add.w	sl, r3, sl, lsl #5
 80090e8:	f89a 330d 	ldrb.w	r3, [sl, #781]	; 0x30d
 80090ec:	f362 1386 	bfi	r3, r2, #6, #1
 80090f0:	f88a 330d 	strb.w	r3, [sl, #781]	; 0x30d
}
 80090f4:	b003      	add	sp, #12
 80090f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint64_t ingress_tstamp = 0U;
 80090fa:	2400      	movs	r4, #0
 80090fc:	2500      	movs	r5, #0
 80090fe:	e755      	b.n	8008fac <gptp_md_compute_pdelay_rate_ratio+0x3c>
		return 0;
 8009100:	2400      	movs	r4, #0
 8009102:	2500      	movs	r5, #0
 8009104:	e752      	b.n	8008fac <gptp_md_compute_pdelay_rate_ratio+0x3c>
	uint64_t resp_evt_tstamp = 0U;
 8009106:	2600      	movs	r6, #0
 8009108:	2700      	movs	r7, #0
 800910a:	e7c5      	b.n	8009098 <gptp_md_compute_pdelay_rate_ratio+0x128>
		if (resp_evt_tstamp == state->ini_resp_evt_tstamp) {
 800910c:	4a1c      	ldr	r2, [pc, #112]	; (8009180 <gptp_md_compute_pdelay_rate_ratio+0x210>)
 800910e:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009112:	fb03 230a 	mla	r3, r3, sl, r2
 8009116:	e9d3 23c4 	ldrd	r2, r3, [r3, #784]	; 0x310
 800911a:	42bb      	cmp	r3, r7
 800911c:	bf08      	it	eq
 800911e:	42b2      	cmpeq	r2, r6
 8009120:	d022      	beq.n	8009168 <gptp_md_compute_pdelay_rate_ratio+0x1f8>
			neighbor_rate_ratio =
 8009122:	1ab0      	subs	r0, r6, r2
 8009124:	eb67 0103 	sbc.w	r1, r7, r3
 8009128:	f7f7 f9f0 	bl	800050c <__aeabi_ul2d>
 800912c:	4680      	mov	r8, r0
 800912e:	4689      	mov	r9, r1
				 state->ini_resp_ingress_tstamp);
 8009130:	4b13      	ldr	r3, [pc, #76]	; (8009180 <gptp_md_compute_pdelay_rate_ratio+0x210>)
 8009132:	f44f 7b5a 	mov.w	fp, #872	; 0x368
 8009136:	fb0b 3b0a 	mla	fp, fp, sl, r3
 800913a:	f8db 0318 	ldr.w	r0, [fp, #792]	; 0x318
 800913e:	f8db 131c 	ldr.w	r1, [fp, #796]	; 0x31c
			neighbor_rate_ratio /=
 8009142:	1a20      	subs	r0, r4, r0
 8009144:	eb65 0101 	sbc.w	r1, r5, r1
 8009148:	f7f7 f9e0 	bl	800050c <__aeabi_ul2d>
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	4640      	mov	r0, r8
 8009152:	4649      	mov	r1, r9
 8009154:	f7f7 fb3a 	bl	80007cc <__aeabi_ddiv>
			state->ini_resp_ingress_tstamp = ingress_tstamp;
 8009158:	e9cb 45c6 	strd	r4, r5, [fp, #792]	; 0x318
			state->ini_resp_evt_tstamp = resp_evt_tstamp;
 800915c:	e9cb 67c4 	strd	r6, r7, [fp, #784]	; 0x310
			state->neighbor_rate_ratio_valid = true;
 8009160:	2301      	movs	r3, #1
 8009162:	f88b 3370 	strb.w	r3, [fp, #880]	; 0x370
 8009166:	e7ae      	b.n	80090c6 <gptp_md_compute_pdelay_rate_ratio+0x156>
			state->neighbor_rate_ratio_valid = false;
 8009168:	4a05      	ldr	r2, [pc, #20]	; (8009180 <gptp_md_compute_pdelay_rate_ratio+0x210>)
 800916a:	f44f 735a 	mov.w	r3, #872	; 0x368
 800916e:	fb03 230a 	mla	r3, r3, sl, r2
 8009172:	2200      	movs	r2, #0
 8009174:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
			neighbor_rate_ratio = 1.0;
 8009178:	2000      	movs	r0, #0
 800917a:	4903      	ldr	r1, [pc, #12]	; (8009188 <gptp_md_compute_pdelay_rate_ratio+0x218>)
 800917c:	e7a3      	b.n	80090c6 <gptp_md_compute_pdelay_rate_ratio+0x156>
 800917e:	bf00      	nop
 8009180:	20001470 	.word	0x20001470
 8009184:	3b9aca00 	.word	0x3b9aca00
 8009188:	3ff00000 	.word	0x3ff00000

0800918c <gptp_md_pdelay_compute>:
{
 800918c:	b538      	push	{r3, r4, r5, lr}
	state = &GPTP_PORT_STATE(port)->pdelay_req;
 800918e:	1e44      	subs	r4, r0, #1
	if (!state->tx_pdelay_req_ptr || !state->rcvd_pdelay_resp_ptr ||
 8009190:	4a61      	ldr	r2, [pc, #388]	; (8009318 <gptp_md_pdelay_compute+0x18c>)
 8009192:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009196:	fb03 2304 	mla	r3, r3, r4, r2
 800919a:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d064      	beq.n	800926c <gptp_md_pdelay_compute+0xe0>
 80091a2:	4605      	mov	r5, r0
 80091a4:	f44f 735a 	mov.w	r3, #872	; 0x368
 80091a8:	fb03 2304 	mla	r3, r3, r4, r2
 80091ac:	f8d3 3358 	ldr.w	r3, [r3, #856]	; 0x358
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d05b      	beq.n	800926c <gptp_md_pdelay_compute+0xe0>
	    !state->rcvd_pdelay_follow_up_ptr) {
 80091b4:	f44f 735a 	mov.w	r3, #872	; 0x368
 80091b8:	fb03 2304 	mla	r3, r3, r4, r2
 80091bc:	f8d3 335c 	ldr.w	r3, [r3, #860]	; 0x35c
	if (!state->tx_pdelay_req_ptr || !state->rcvd_pdelay_resp_ptr ||
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d053      	beq.n	800926c <gptp_md_pdelay_compute+0xe0>
	if (port_ds->compute_neighbor_rate_ratio) {
 80091c4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80091c8:	4a53      	ldr	r2, [pc, #332]	; (8009318 <gptp_md_pdelay_compute+0x18c>)
 80091ca:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80091ce:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 80091d2:	f013 0f10 	tst.w	r3, #16
 80091d6:	f040 808b 	bne.w	80092f0 <gptp_md_pdelay_compute+0x164>
	if (port_ds->compute_neighbor_prop_delay) {
 80091da:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80091de:	4a4e      	ldr	r2, [pc, #312]	; (8009318 <gptp_md_pdelay_compute+0x18c>)
 80091e0:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80091e4:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 80091e8:	f013 0f20 	tst.w	r3, #32
 80091ec:	f040 8083 	bne.w	80092f6 <gptp_md_pdelay_compute+0x16a>
	state->lost_responses = 0U;
 80091f0:	4d49      	ldr	r5, [pc, #292]	; (8009318 <gptp_md_pdelay_compute+0x18c>)
 80091f2:	f44f 735a 	mov.w	r3, #872	; 0x368
 80091f6:	fb04 3203 	mla	r2, r4, r3, r3
 80091fa:	442a      	add	r2, r5
 80091fc:	2100      	movs	r1, #0
 80091fe:	8091      	strh	r1, [r2, #4]
	port_ds->is_measuring_delay = true;
 8009200:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8009204:	eb05 1242 	add.w	r2, r5, r2, lsl #5
 8009208:	f892 130d 	ldrb.w	r1, [r2, #781]	; 0x30d
 800920c:	f041 0104 	orr.w	r1, r1, #4
 8009210:	f882 130d 	strb.w	r1, [r2, #781]	; 0x30d
	pkt = state->rcvd_pdelay_follow_up_ptr;
 8009214:	fb03 5304 	mla	r3, r3, r4, r5
	hdr = GPTP_HDR(pkt);
 8009218:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
 800921c:	f00f ffaf 	bl	801917e <gptp_get_hdr>
	local_clock = !memcmp(gptp_domain.default_ds.clk_id,
 8009220:	2208      	movs	r2, #8
 8009222:	f100 0114 	add.w	r1, r0, #20
 8009226:	f205 101d 	addw	r0, r5, #285	; 0x11d
 800922a:	f013 faf7 	bl	801c81c <memcmp>
	if (local_clock) {
 800922e:	b340      	cbz	r0, 8009282 <gptp_md_pdelay_compute+0xf6>
	if (!state->neighbor_rate_ratio_valid) {
 8009230:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009234:	fb03 5304 	mla	r3, r3, r4, r5
 8009238:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 800923c:	b30b      	cbz	r3, 8009282 <gptp_md_pdelay_compute+0xf6>
	if ((port_ds->neighbor_prop_delay <=
 800923e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8009242:	eb05 1141 	add.w	r1, r5, r1, lsl #5
 8009246:	e9d1 23b2 	ldrd	r2, r3, [r1, #712]	; 0x2c8
 800924a:	e9d1 01b0 	ldrd	r0, r1, [r1, #704]	; 0x2c0
 800924e:	f7f7 fc0f 	bl	8000a70 <__aeabi_dcmple>
 8009252:	2800      	cmp	r0, #0
 8009254:	d053      	beq.n	80092fe <gptp_md_pdelay_compute+0x172>
		port_ds->as_capable = true;
 8009256:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800925a:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 800925e:	f893 230d 	ldrb.w	r2, [r3, #781]	; 0x30d
 8009262:	f042 0208 	orr.w	r2, r2, #8
 8009266:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
 800926a:	e00a      	b.n	8009282 <gptp_md_pdelay_compute+0xf6>
		port_ds->as_capable = false;
 800926c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8009270:	4a29      	ldr	r2, [pc, #164]	; (8009318 <gptp_md_pdelay_compute+0x18c>)
 8009272:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8009276:	f893 230d 	ldrb.w	r2, [r3, #781]	; 0x30d
 800927a:	f36f 02c3 	bfc	r2, #3, #1
 800927e:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
	if (state->tx_pdelay_req_ptr) {
 8009282:	4a25      	ldr	r2, [pc, #148]	; (8009318 <gptp_md_pdelay_compute+0x18c>)
 8009284:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009288:	fb03 2304 	mla	r3, r3, r4, r2
 800928c:	f8d3 0360 	ldr.w	r0, [r3, #864]	; 0x360
 8009290:	b148      	cbz	r0, 80092a6 <gptp_md_pdelay_compute+0x11a>
		net_pkt_unref(state->tx_pdelay_req_ptr);
 8009292:	f011 f881 	bl	801a398 <net_pkt_unref>
		state->tx_pdelay_req_ptr = NULL;
 8009296:	4a20      	ldr	r2, [pc, #128]	; (8009318 <gptp_md_pdelay_compute+0x18c>)
 8009298:	f44f 735a 	mov.w	r3, #872	; 0x368
 800929c:	fb03 2304 	mla	r3, r3, r4, r2
 80092a0:	2200      	movs	r2, #0
 80092a2:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
	if (state->rcvd_pdelay_resp_ptr) {
 80092a6:	4a1c      	ldr	r2, [pc, #112]	; (8009318 <gptp_md_pdelay_compute+0x18c>)
 80092a8:	f44f 735a 	mov.w	r3, #872	; 0x368
 80092ac:	fb03 2304 	mla	r3, r3, r4, r2
 80092b0:	f8d3 0358 	ldr.w	r0, [r3, #856]	; 0x358
 80092b4:	b148      	cbz	r0, 80092ca <gptp_md_pdelay_compute+0x13e>
		net_pkt_unref(state->rcvd_pdelay_resp_ptr);
 80092b6:	f011 f86f 	bl	801a398 <net_pkt_unref>
		state->rcvd_pdelay_resp_ptr = NULL;
 80092ba:	4a17      	ldr	r2, [pc, #92]	; (8009318 <gptp_md_pdelay_compute+0x18c>)
 80092bc:	f44f 735a 	mov.w	r3, #872	; 0x368
 80092c0:	fb03 2304 	mla	r3, r3, r4, r2
 80092c4:	2200      	movs	r2, #0
 80092c6:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
	if (state->rcvd_pdelay_follow_up_ptr) {
 80092ca:	4a13      	ldr	r2, [pc, #76]	; (8009318 <gptp_md_pdelay_compute+0x18c>)
 80092cc:	f44f 735a 	mov.w	r3, #872	; 0x368
 80092d0:	fb03 2304 	mla	r3, r3, r4, r2
 80092d4:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
 80092d8:	b148      	cbz	r0, 80092ee <gptp_md_pdelay_compute+0x162>
		net_pkt_unref(state->rcvd_pdelay_follow_up_ptr);
 80092da:	f011 f85d 	bl	801a398 <net_pkt_unref>
		state->rcvd_pdelay_follow_up_ptr = NULL;
 80092de:	4b0e      	ldr	r3, [pc, #56]	; (8009318 <gptp_md_pdelay_compute+0x18c>)
 80092e0:	f44f 725a 	mov.w	r2, #872	; 0x368
 80092e4:	fb02 3404 	mla	r4, r2, r4, r3
 80092e8:	2300      	movs	r3, #0
 80092ea:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
}
 80092ee:	bd38      	pop	{r3, r4, r5, pc}
		gptp_md_compute_pdelay_rate_ratio(port);
 80092f0:	f7ff fe3e 	bl	8008f70 <gptp_md_compute_pdelay_rate_ratio>
 80092f4:	e771      	b.n	80091da <gptp_md_pdelay_compute+0x4e>
		gptp_md_compute_prop_time(port);
 80092f6:	4628      	mov	r0, r5
 80092f8:	f7f7 fef2 	bl	80010e0 <gptp_md_compute_prop_time>
		NET_DBG("Neighbor prop delay %d",
 80092fc:	e778      	b.n	80091f0 <gptp_md_pdelay_compute+0x64>
		port_ds->as_capable = false;
 80092fe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8009302:	4a05      	ldr	r2, [pc, #20]	; (8009318 <gptp_md_pdelay_compute+0x18c>)
 8009304:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8009308:	f893 230d 	ldrb.w	r2, [r3, #781]	; 0x30d
 800930c:	f36f 02c3 	bfc	r2, #3, #1
 8009310:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
		NET_WARN("Not AS capable: %u ns > %u ns",
 8009314:	e7b5      	b.n	8009282 <gptp_md_pdelay_compute+0xf6>
 8009316:	bf00      	nop
 8009318:	20001470 	.word	0x20001470

0800931c <gptp_md_pdelay_req_state_machine>:
{
 800931c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009320:	b082      	sub	sp, #8
 8009322:	4605      	mov	r5, r0
	state = &GPTP_PORT_STATE(port)->pdelay_req;
 8009324:	1e44      	subs	r4, r0, #1
	if (state->rcvd_pdelay_resp > 1 || state->rcvd_pdelay_follow_up > 1) {
 8009326:	4ac0      	ldr	r2, [pc, #768]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 8009328:	f44f 735a 	mov.w	r3, #872	; 0x368
 800932c:	fb03 2304 	mla	r3, r3, r4, r2
 8009330:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 8009334:	2b01      	cmp	r3, #1
 8009336:	d927      	bls.n	8009388 <gptp_md_pdelay_req_state_machine+0x6c>
		port_ds->as_capable = false;
 8009338:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800933c:	4aba      	ldr	r2, [pc, #744]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 800933e:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8009342:	f893 230d 	ldrb.w	r2, [r3, #781]	; 0x30d
 8009346:	f36f 02c3 	bfc	r2, #3, #1
 800934a:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
	if (!port_ds->ptt_port_enabled) {
 800934e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8009352:	4ab5      	ldr	r2, [pc, #724]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 8009354:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8009358:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 800935c:	f013 0f01 	tst.w	r3, #1
 8009360:	d01a      	beq.n	8009398 <gptp_md_pdelay_req_state_machine+0x7c>
	switch (state->state) {
 8009362:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009366:	fb04 3303 	mla	r3, r4, r3, r3
 800936a:	4aaf      	ldr	r2, [pc, #700]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 800936c:	4413      	add	r3, r2
 800936e:	799b      	ldrb	r3, [r3, #6]
 8009370:	2b06      	cmp	r3, #6
 8009372:	f200 80cd 	bhi.w	8009510 <gptp_md_pdelay_req_state_machine+0x1f4>
 8009376:	e8df f013 	tbh	[pc, r3, lsl #1]
 800937a:	001f      	.short	0x001f
 800937c:	004c0058 	.word	0x004c0058
 8009380:	00d3005b 	.word	0x00d3005b
 8009384:	013f0108 	.word	0x013f0108
	if (state->rcvd_pdelay_resp > 1 || state->rcvd_pdelay_follow_up > 1) {
 8009388:	f44f 735a 	mov.w	r3, #872	; 0x368
 800938c:	fb04 3303 	mla	r3, r4, r3, r3
 8009390:	58d3      	ldr	r3, [r2, r3]
 8009392:	2b01      	cmp	r3, #1
 8009394:	d8d0      	bhi.n	8009338 <gptp_md_pdelay_req_state_machine+0x1c>
 8009396:	e7da      	b.n	800934e <gptp_md_pdelay_req_state_machine+0x32>
		k_timer_stop(&state->pdelay_timer);
 8009398:	f44f 765a 	mov.w	r6, #872	; 0x368
 800939c:	fb06 f004 	mul.w	r0, r6, r4
 80093a0:	f500 7048 	add.w	r0, r0, #800	; 0x320
 80093a4:	4617      	mov	r7, r2
 80093a6:	4410      	add	r0, r2
	z_impl_k_timer_stop(timer);
 80093a8:	f013 f96e 	bl	801c688 <z_impl_k_timer_stop>
		state->state = GPTP_PDELAY_REQ_NOT_ENABLED;
 80093ac:	fb04 6606 	mla	r6, r4, r6, r6
 80093b0:	443e      	add	r6, r7
 80093b2:	2300      	movs	r3, #0
 80093b4:	71b3      	strb	r3, [r6, #6]
 80093b6:	e7d4      	b.n	8009362 <gptp_md_pdelay_req_state_machine+0x46>
		if (port_ds->ptt_port_enabled) {
 80093b8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80093bc:	4a9a      	ldr	r2, [pc, #616]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 80093be:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80093c2:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 80093c6:	f013 0f01 	tst.w	r3, #1
 80093ca:	f000 80a1 	beq.w	8009510 <gptp_md_pdelay_req_state_machine+0x1f4>
				port_ds->ini_log_pdelay_req_itv;
 80093ce:	4615      	mov	r5, r2
 80093d0:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80093d4:	eb02 1646 	add.w	r6, r2, r6, lsl #5
 80093d8:	f996 230a 	ldrsb.w	r2, [r6, #778]	; 0x30a
			port_ds->cur_log_pdelay_req_itv =
 80093dc:	f886 230b 	strb.w	r2, [r6, #779]	; 0x30b
			gptp_set_time_itv(&port_ds->pdelay_req_itv, 1,
 80093e0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80093e4:	0140      	lsls	r0, r0, #5
 80093e6:	f500 703a 	add.w	r0, r0, #744	; 0x2e8
 80093ea:	4428      	add	r0, r5
 80093ec:	2101      	movs	r1, #1
 80093ee:	3006      	adds	r0, #6
 80093f0:	f7ff f92a 	bl	8008648 <gptp_set_time_itv>
			port_ds->compute_neighbor_rate_ratio = true;
 80093f4:	f896 330d 	ldrb.w	r3, [r6, #781]	; 0x30d
			port_ds->compute_neighbor_prop_delay = true;
 80093f8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80093fc:	f886 330d 	strb.w	r3, [r6, #781]	; 0x30d
			state->pdelay_timer_expired = true;
 8009400:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009404:	fb04 3303 	mla	r3, r4, r3, r3
 8009408:	441d      	add	r5, r3
 800940a:	2301      	movs	r3, #1
 800940c:	71eb      	strb	r3, [r5, #7]
			state->state = GPTP_PDELAY_REQ_INITIAL_SEND_REQ;
 800940e:	71ab      	strb	r3, [r5, #6]
 8009410:	e07e      	b.n	8009510 <gptp_md_pdelay_req_state_machine+0x1f4>
		gptp_md_pdelay_reset(port);
 8009412:	4628      	mov	r0, r5
 8009414:	f7ff fbe2 	bl	8008bdc <gptp_md_pdelay_reset>
		state->state = GPTP_PDELAY_REQ_WAIT_ITV_TIMER;
 8009418:	f44f 735a 	mov.w	r3, #872	; 0x368
 800941c:	fb04 3303 	mla	r3, r4, r3, r3
 8009420:	4c81      	ldr	r4, [pc, #516]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 8009422:	4423      	add	r3, r4
 8009424:	2206      	movs	r2, #6
 8009426:	719a      	strb	r2, [r3, #6]
		break;
 8009428:	e072      	b.n	8009510 <gptp_md_pdelay_req_state_machine+0x1f4>
		gptp_md_start_pdelay_req(port);
 800942a:	4628      	mov	r0, r5
 800942c:	f7ff fc2c 	bl	8008c88 <gptp_md_start_pdelay_req>
		if (state->tx_pdelay_req_ptr) {
 8009430:	4a7d      	ldr	r2, [pc, #500]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 8009432:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009436:	fb03 2304 	mla	r3, r3, r4, r2
 800943a:	f8d3 0360 	ldr.w	r0, [r3, #864]	; 0x360
 800943e:	b148      	cbz	r0, 8009454 <gptp_md_pdelay_req_state_machine+0x138>
			net_pkt_unref(state->tx_pdelay_req_ptr);
 8009440:	f010 ffaa 	bl	801a398 <net_pkt_unref>
			state->tx_pdelay_req_ptr = NULL;
 8009444:	4a78      	ldr	r2, [pc, #480]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 8009446:	f44f 735a 	mov.w	r3, #872	; 0x368
 800944a:	fb03 2304 	mla	r3, r3, r4, r2
 800944e:	2200      	movs	r2, #0
 8009450:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
		if (state->rcvd_pdelay_resp_ptr) {
 8009454:	4a74      	ldr	r2, [pc, #464]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 8009456:	f44f 735a 	mov.w	r3, #872	; 0x368
 800945a:	fb03 2304 	mla	r3, r3, r4, r2
 800945e:	f8d3 0358 	ldr.w	r0, [r3, #856]	; 0x358
 8009462:	b148      	cbz	r0, 8009478 <gptp_md_pdelay_req_state_machine+0x15c>
			net_pkt_unref(state->rcvd_pdelay_resp_ptr);
 8009464:	f010 ff98 	bl	801a398 <net_pkt_unref>
			state->rcvd_pdelay_resp_ptr = NULL;
 8009468:	4a6f      	ldr	r2, [pc, #444]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 800946a:	f44f 735a 	mov.w	r3, #872	; 0x368
 800946e:	fb03 2304 	mla	r3, r3, r4, r2
 8009472:	2200      	movs	r2, #0
 8009474:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
		if (state->rcvd_pdelay_follow_up_ptr) {
 8009478:	4a6b      	ldr	r2, [pc, #428]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 800947a:	f44f 735a 	mov.w	r3, #872	; 0x368
 800947e:	fb03 2304 	mla	r3, r3, r4, r2
 8009482:	f8d3 035c 	ldr.w	r0, [r3, #860]	; 0x35c
 8009486:	b148      	cbz	r0, 800949c <gptp_md_pdelay_req_state_machine+0x180>
			net_pkt_unref(state->rcvd_pdelay_follow_up_ptr);
 8009488:	f010 ff86 	bl	801a398 <net_pkt_unref>
			state->rcvd_pdelay_follow_up_ptr = NULL;
 800948c:	4a66      	ldr	r2, [pc, #408]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 800948e:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009492:	fb03 2304 	mla	r3, r3, r4, r2
 8009496:	2200      	movs	r2, #0
 8009498:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
		gptp_send_pdelay_req(port);
 800949c:	4628      	mov	r0, r5
 800949e:	f001 f91f 	bl	800a6e0 <gptp_send_pdelay_req>
		k_timer_stop(&state->pdelay_timer);
 80094a2:	f44f 775a 	mov.w	r7, #872	; 0x368
 80094a6:	fb07 f604 	mul.w	r6, r7, r4
 80094aa:	f506 7648 	add.w	r6, r6, #800	; 0x320
 80094ae:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8009628 <gptp_md_pdelay_req_state_machine+0x30c>
 80094b2:	4446      	add	r6, r8
 80094b4:	4630      	mov	r0, r6
 80094b6:	f013 f8e7 	bl	801c688 <z_impl_k_timer_stop>
		state->pdelay_timer_expired = false;
 80094ba:	fb04 7707 	mla	r7, r4, r7, r7
 80094be:	4447      	add	r7, r8
 80094c0:	2300      	movs	r3, #0
 80094c2:	71fb      	strb	r3, [r7, #7]
			      K_MSEC(gptp_uscaled_ns_to_timer_ms(
 80094c4:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80094c8:	016d      	lsls	r5, r5, #5
 80094ca:	f505 753a 	add.w	r5, r5, #744	; 0x2e8
 80094ce:	4445      	add	r5, r8
 80094d0:	3506      	adds	r5, #6
 80094d2:	4628      	mov	r0, r5
 80094d4:	f7ff f98c 	bl	80087f0 <gptp_uscaled_ns_to_timer_ms>
 80094d8:	2800      	cmp	r0, #0
 80094da:	dc1c      	bgt.n	8009516 <gptp_md_pdelay_req_state_machine+0x1fa>
 80094dc:	2000      	movs	r0, #0
 80094de:	2100      	movs	r1, #0
 80094e0:	008d      	lsls	r5, r1, #2
 80094e2:	0082      	lsls	r2, r0, #2
 80094e4:	ea45 7390 	orr.w	r3, r5, r0, lsr #30
 80094e8:	1812      	adds	r2, r2, r0
 80094ea:	eb41 0303 	adc.w	r3, r1, r3
 80094ee:	1892      	adds	r2, r2, r2
 80094f0:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 80094f2:	2000      	movs	r0, #0
 80094f4:	2100      	movs	r1, #0
 80094f6:	e9cd 0100 	strd	r0, r1, [sp]
 80094fa:	4630      	mov	r0, r6
 80094fc:	f00d faf6 	bl	8016aec <z_impl_k_timer_start>
		state->state = GPTP_PDELAY_REQ_WAIT_RESP;
 8009500:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009504:	fb04 3303 	mla	r3, r4, r3, r3
 8009508:	4c47      	ldr	r4, [pc, #284]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 800950a:	4423      	add	r3, r4
 800950c:	2204      	movs	r2, #4
 800950e:	719a      	strb	r2, [r3, #6]
}
 8009510:	b002      	add	sp, #8
 8009512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			      K_MSEC(gptp_uscaled_ns_to_timer_ms(
 8009516:	4628      	mov	r0, r5
 8009518:	f7ff f96a 	bl	80087f0 <gptp_uscaled_ns_to_timer_ms>
 800951c:	17c1      	asrs	r1, r0, #31
 800951e:	e7df      	b.n	80094e0 <gptp_md_pdelay_req_state_machine+0x1c4>
		if (state->pdelay_timer_expired) {
 8009520:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009524:	fb04 3303 	mla	r3, r4, r3, r3
 8009528:	4a3f      	ldr	r2, [pc, #252]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 800952a:	4413      	add	r3, r2
 800952c:	79db      	ldrb	r3, [r3, #7]
 800952e:	b13b      	cbz	r3, 8009540 <gptp_md_pdelay_req_state_machine+0x224>
			state->state = GPTP_PDELAY_REQ_RESET;
 8009530:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009534:	fb04 3303 	mla	r3, r4, r3, r3
 8009538:	4413      	add	r3, r2
 800953a:	2202      	movs	r2, #2
 800953c:	719a      	strb	r2, [r3, #6]
 800953e:	e7e7      	b.n	8009510 <gptp_md_pdelay_req_state_machine+0x1f4>
		} else if (state->rcvd_pdelay_resp != 0U) {
 8009540:	4a39      	ldr	r2, [pc, #228]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 8009542:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009546:	fb03 2304 	mla	r3, r3, r4, r2
 800954a:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 800954e:	2b00      	cmp	r3, #0
 8009550:	d0de      	beq.n	8009510 <gptp_md_pdelay_req_state_machine+0x1f4>
			pkt = state->rcvd_pdelay_resp_ptr;
 8009552:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009556:	fb03 2304 	mla	r3, r3, r4, r2
			if (!gptp_handle_pdelay_resp(port, pkt)) {
 800955a:	f8d3 1358 	ldr.w	r1, [r3, #856]	; 0x358
 800955e:	4628      	mov	r0, r5
 8009560:	f000 ffc8 	bl	800a4f4 <gptp_handle_pdelay_resp>
 8009564:	b940      	cbnz	r0, 8009578 <gptp_md_pdelay_req_state_machine+0x25c>
				state->state = GPTP_PDELAY_REQ_WAIT_FOLLOW_UP;
 8009566:	f44f 735a 	mov.w	r3, #872	; 0x368
 800956a:	fb04 3303 	mla	r3, r4, r3, r3
 800956e:	4a2e      	ldr	r2, [pc, #184]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 8009570:	4413      	add	r3, r2
 8009572:	2205      	movs	r2, #5
 8009574:	719a      	strb	r2, [r3, #6]
 8009576:	e7cb      	b.n	8009510 <gptp_md_pdelay_req_state_machine+0x1f4>
				state->state = GPTP_PDELAY_REQ_RESET;
 8009578:	f44f 735a 	mov.w	r3, #872	; 0x368
 800957c:	fb04 3303 	mla	r3, r4, r3, r3
 8009580:	4a29      	ldr	r2, [pc, #164]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 8009582:	4413      	add	r3, r2
 8009584:	2202      	movs	r2, #2
 8009586:	719a      	strb	r2, [r3, #6]
 8009588:	e7c2      	b.n	8009510 <gptp_md_pdelay_req_state_machine+0x1f4>
		if (state->pdelay_timer_expired) {
 800958a:	f44f 735a 	mov.w	r3, #872	; 0x368
 800958e:	fb04 3303 	mla	r3, r4, r3, r3
 8009592:	4a25      	ldr	r2, [pc, #148]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 8009594:	4413      	add	r3, r2
 8009596:	79db      	ldrb	r3, [r3, #7]
 8009598:	b13b      	cbz	r3, 80095aa <gptp_md_pdelay_req_state_machine+0x28e>
			state->state = GPTP_PDELAY_REQ_RESET;
 800959a:	f44f 735a 	mov.w	r3, #872	; 0x368
 800959e:	fb04 3303 	mla	r3, r4, r3, r3
 80095a2:	4413      	add	r3, r2
 80095a4:	2202      	movs	r2, #2
 80095a6:	719a      	strb	r2, [r3, #6]
 80095a8:	e7b2      	b.n	8009510 <gptp_md_pdelay_req_state_machine+0x1f4>
		} else if (state->rcvd_pdelay_follow_up != 0U) {
 80095aa:	f44f 735a 	mov.w	r3, #872	; 0x368
 80095ae:	fb04 3303 	mla	r3, r4, r3, r3
 80095b2:	4a1d      	ldr	r2, [pc, #116]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 80095b4:	58d3      	ldr	r3, [r2, r3]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d0aa      	beq.n	8009510 <gptp_md_pdelay_req_state_machine+0x1f4>
			pkt = state->rcvd_pdelay_follow_up_ptr;
 80095ba:	f44f 735a 	mov.w	r3, #872	; 0x368
 80095be:	fb03 2304 	mla	r3, r3, r4, r2
			if (!gptp_handle_pdelay_follow_up(port, pkt)) {
 80095c2:	f8d3 135c 	ldr.w	r1, [r3, #860]	; 0x35c
 80095c6:	4628      	mov	r0, r5
 80095c8:	f000 ffd6 	bl	800a578 <gptp_handle_pdelay_follow_up>
 80095cc:	b140      	cbz	r0, 80095e0 <gptp_md_pdelay_req_state_machine+0x2c4>
				state->state = GPTP_PDELAY_REQ_RESET;
 80095ce:	f44f 735a 	mov.w	r3, #872	; 0x368
 80095d2:	fb04 3303 	mla	r3, r4, r3, r3
 80095d6:	4a14      	ldr	r2, [pc, #80]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 80095d8:	4413      	add	r3, r2
 80095da:	2202      	movs	r2, #2
 80095dc:	719a      	strb	r2, [r3, #6]
 80095de:	e797      	b.n	8009510 <gptp_md_pdelay_req_state_machine+0x1f4>
				gptp_md_pdelay_compute(port);
 80095e0:	4628      	mov	r0, r5
 80095e2:	f7ff fdd3 	bl	800918c <gptp_md_pdelay_compute>
				state->state = GPTP_PDELAY_REQ_WAIT_ITV_TIMER;
 80095e6:	f44f 735a 	mov.w	r3, #872	; 0x368
 80095ea:	fb04 3303 	mla	r3, r4, r3, r3
 80095ee:	4a0e      	ldr	r2, [pc, #56]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 80095f0:	4413      	add	r3, r2
 80095f2:	2206      	movs	r2, #6
 80095f4:	719a      	strb	r2, [r3, #6]
 80095f6:	e78b      	b.n	8009510 <gptp_md_pdelay_req_state_machine+0x1f4>
		if (state->pdelay_timer_expired) {
 80095f8:	f44f 735a 	mov.w	r3, #872	; 0x368
 80095fc:	fb04 3303 	mla	r3, r4, r3, r3
 8009600:	4a09      	ldr	r2, [pc, #36]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 8009602:	4413      	add	r3, r2
 8009604:	79db      	ldrb	r3, [r3, #7]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d082      	beq.n	8009510 <gptp_md_pdelay_req_state_machine+0x1f4>
			gptp_md_pdelay_check_multiple_resp(port);
 800960a:	4628      	mov	r0, r5
 800960c:	f7ff fc32 	bl	8008e74 <gptp_md_pdelay_check_multiple_resp>
			state->rcvd_pdelay_resp = 0U;
 8009610:	4a05      	ldr	r2, [pc, #20]	; (8009628 <gptp_md_pdelay_req_state_machine+0x30c>)
 8009612:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009616:	fb03 2004 	mla	r0, r3, r4, r2
 800961a:	2100      	movs	r1, #0
 800961c:	f8c0 1364 	str.w	r1, [r0, #868]	; 0x364
			state->rcvd_pdelay_follow_up = 0U;
 8009620:	fb04 3303 	mla	r3, r4, r3, r3
 8009624:	50d1      	str	r1, [r2, r3]
}
 8009626:	e773      	b.n	8009510 <gptp_md_pdelay_req_state_machine+0x1f4>
 8009628:	20001470 	.word	0x20001470

0800962c <gptp_set_md_sync_receive>:
{
 800962c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	b083      	sub	sp, #12
	state = &GPTP_PORT_STATE(port)->sync_rcv;
 8009632:	1e46      	subs	r6, r0, #1
	if (!state->rcvd_sync_ptr || !state->rcvd_follow_up_ptr) {
 8009634:	4a96      	ldr	r2, [pc, #600]	; (8009890 <gptp_set_md_sync_receive+0x264>)
 8009636:	f44f 735a 	mov.w	r3, #872	; 0x368
 800963a:	fb03 2306 	mla	r3, r3, r6, r2
 800963e:	f8d3 03b8 	ldr.w	r0, [r3, #952]	; 0x3b8
 8009642:	2800      	cmp	r0, #0
 8009644:	f000 811d 	beq.w	8009882 <gptp_set_md_sync_receive+0x256>
 8009648:	460c      	mov	r4, r1
 800964a:	f44f 735a 	mov.w	r3, #872	; 0x368
 800964e:	fb03 2306 	mla	r3, r3, r6, r2
 8009652:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009656:	2b00      	cmp	r3, #0
 8009658:	f000 8116 	beq.w	8009888 <gptp_set_md_sync_receive+0x25c>
	sync_hdr = GPTP_HDR(state->rcvd_sync_ptr);
 800965c:	f00f fd8f 	bl	801917e <gptp_get_hdr>
 8009660:	4680      	mov	r8, r0
	fup_hdr = GPTP_HDR(state->rcvd_follow_up_ptr);
 8009662:	4f8b      	ldr	r7, [pc, #556]	; (8009890 <gptp_set_md_sync_receive+0x264>)
 8009664:	f44f 7a5a 	mov.w	sl, #872	; 0x368
 8009668:	fb0a 7a06 	mla	sl, sl, r6, r7
 800966c:	f8da 03bc 	ldr.w	r0, [sl, #956]	; 0x3bc
 8009670:	f00f fd85 	bl	801917e <gptp_get_hdr>
 8009674:	4681      	mov	r9, r0
 8009676:	f8da 03bc 	ldr.w	r0, [sl, #956]	; 0x3bc
 800967a:	f00f fd80 	bl	801917e <gptp_get_hdr>
 800967e:	4605      	mov	r5, r0
	sync_ts = &state->rcvd_sync_ptr->timestamp;
 8009680:	f8da 03b8 	ldr.w	r0, [sl, #952]	; 0x3b8
		ntohll(fup_hdr->correction_field);
 8009684:	f8d9 c008 	ldr.w	ip, [r9, #8]
 8009688:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800968c:	1219      	asrs	r1, r3, #8
 800968e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8009692:	ea41 6113 	orr.w	r1, r1, r3, lsr #24
 8009696:	ea4f 621c 	mov.w	r2, ip, lsr #24
 800969a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800969e:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80096a2:	4311      	orrs	r1, r2
 80096a4:	ea4f 221c 	mov.w	r2, ip, lsr #8
 80096a8:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 80096ac:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80096b0:	4311      	orrs	r1, r2
 80096b2:	021a      	lsls	r2, r3, #8
 80096b4:	ea42 621c 	orr.w	r2, r2, ip, lsr #24
 80096b8:	ea4f 2e0c 	mov.w	lr, ip, lsl #8
 80096bc:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 80096c0:	061b      	lsls	r3, r3, #24
 80096c2:	ea43 231c 	orr.w	r3, r3, ip, lsr #8
 80096c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80096ca:	4313      	orrs	r3, r2
 80096cc:	f40e 0e7f 	and.w	lr, lr, #16711680	; 0xff0000
 80096d0:	ea43 030e 	orr.w	r3, r3, lr
 80096d4:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
	sync_rcv->follow_up_correction_field =
 80096d8:	6221      	str	r1, [r4, #32]
 80096da:	6263      	str	r3, [r4, #36]	; 0x24
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80096dc:	f858 2f14 	ldr.w	r2, [r8, #20]!
 80096e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80096e4:	6422      	str	r2, [r4, #64]	; 0x40
 80096e6:	6463      	str	r3, [r4, #68]	; 0x44
 80096e8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80096ec:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	sync_rcv->log_msg_interval = fup_hdr->log_msg_interval;
 80096f0:	f999 3021 	ldrsb.w	r3, [r9, #33]	; 0x21
 80096f4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
		ntohs(fup->prec_orig_ts_secs_high);
 80096f8:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
 80096fa:	0a13      	lsrs	r3, r2, #8
 80096fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	sync_rcv->precise_orig_ts._sec.high =
 8009700:	82a3      	strh	r3, [r4, #20]
	sync_rcv->precise_orig_ts._sec.low = ntohl(fup->prec_orig_ts_secs_low);
 8009702:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8009704:	0a13      	lsrs	r3, r2, #8
 8009706:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800970a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800970e:	0211      	lsls	r1, r2, #8
 8009710:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8009714:	430b      	orrs	r3, r1
 8009716:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800971a:	6123      	str	r3, [r4, #16]
	sync_rcv->precise_orig_ts.nanosecond = ntohl(fup->prec_orig_ts_nsecs);
 800971c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800971e:	0a13      	lsrs	r3, r2, #8
 8009720:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009724:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009728:	0211      	lsls	r1, r2, #8
 800972a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800972e:	430b      	orrs	r3, r1
 8009730:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009734:	61a3      	str	r3, [r4, #24]
	sync_rcv->upstream_tx_time = sync_ts->second;
 8009736:	6a01      	ldr	r1, [r0, #32]
 8009738:	6a43      	ldr	r3, [r0, #36]	; 0x24
	sync_rcv->upstream_tx_time *= NSEC_PER_SEC;
 800973a:	4a56      	ldr	r2, [pc, #344]	; (8009894 <gptp_set_md_sync_receive+0x268>)
 800973c:	fba1 8902 	umull	r8, r9, r1, r2
 8009740:	fb02 9903 	mla	r9, r2, r3, r9
 8009744:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
	sync_rcv->upstream_tx_time += sync_ts->nanosecond;
 8009748:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800974a:	eb18 0803 	adds.w	r8, r8, r3
 800974e:	f149 0900 	adc.w	r9, r9, #0
 8009752:	e9c4 890a 	strd	r8, r9, [r4, #40]	; 0x28
	prop_delay_rated = port_ds->neighbor_prop_delay;
 8009756:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800975a:	eb07 1a4a 	add.w	sl, r7, sl, lsl #5
	prop_delay_rated /= port_ds->neighbor_rate_ratio;
 800975e:	e9da 23b4 	ldrd	r2, r3, [sl, #720]	; 0x2d0
 8009762:	e9da 01b0 	ldrd	r0, r1, [sl, #704]	; 0x2c0
 8009766:	f7f7 f831 	bl	80007cc <__aeabi_ddiv>
 800976a:	e9cd 0100 	strd	r0, r1, [sp]
	sync_rcv->upstream_tx_time -= prop_delay_rated;
 800976e:	4640      	mov	r0, r8
 8009770:	4649      	mov	r1, r9
 8009772:	f7f6 fecb 	bl	800050c <__aeabi_ul2d>
 8009776:	e9dd 2300 	ldrd	r2, r3, [sp]
 800977a:	f7f6 fd45 	bl	8000208 <__aeabi_dsub>
 800977e:	f7f7 fa0d 	bl	8000b9c <__aeabi_d2ulz>
 8009782:	4681      	mov	r9, r0
 8009784:	4688      	mov	r8, r1
 8009786:	62a0      	str	r0, [r4, #40]	; 0x28
 8009788:	62e1      	str	r1, [r4, #44]	; 0x2c
	delay_asymmetry_rated = port_ds->delay_asymmetry;
 800978a:	e9da 01ae 	ldrd	r0, r1, [sl, #696]	; 0x2b8
 800978e:	f7f6 fec5 	bl	800051c <__aeabi_l2d>
	delay_asymmetry_rated /= port_ds->neighbor_rate_ratio;
 8009792:	e9da 23b4 	ldrd	r2, r3, [sl, #720]	; 0x2d0
 8009796:	f7f7 f819 	bl	80007cc <__aeabi_ddiv>
 800979a:	4606      	mov	r6, r0
 800979c:	460f      	mov	r7, r1
	sync_rcv->upstream_tx_time -= delay_asymmetry_rated;
 800979e:	4648      	mov	r0, r9
 80097a0:	4641      	mov	r1, r8
 80097a2:	f7f6 feb3 	bl	800050c <__aeabi_ul2d>
 80097a6:	4632      	mov	r2, r6
 80097a8:	463b      	mov	r3, r7
 80097aa:	f7f6 fd2d 	bl	8000208 <__aeabi_dsub>
 80097ae:	f7f7 f9f5 	bl	8000b9c <__aeabi_d2ulz>
 80097b2:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
	sync_rcv->rate_ratio = ntohl(fup->tlv.cumulative_scaled_rate_offset);
 80097b6:	f8d5 0036 	ldr.w	r0, [r5, #54]	; 0x36
 80097ba:	1203      	asrs	r3, r0, #8
 80097bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80097c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80097c4:	0202      	lsls	r2, r0, #8
 80097c6:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80097ca:	4313      	orrs	r3, r2
 80097cc:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 80097d0:	f7f6 fe58 	bl	8000484 <__aeabi_ui2d>
	sync_rcv->rate_ratio /= GPTP_POW2_41;
 80097d4:	2200      	movs	r2, #0
 80097d6:	4b30      	ldr	r3, [pc, #192]	; (8009898 <gptp_set_md_sync_receive+0x26c>)
 80097d8:	f7f6 fece 	bl	8000578 <__aeabi_dmul>
	sync_rcv->rate_ratio += 1;
 80097dc:	2200      	movs	r2, #0
 80097de:	4b2f      	ldr	r3, [pc, #188]	; (800989c <gptp_set_md_sync_receive+0x270>)
 80097e0:	f7f6 fd14 	bl	800020c <__adddf3>
 80097e4:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
		ntohs(fup->tlv.gm_time_base_indicator);
 80097e8:	8f6a      	ldrh	r2, [r5, #58]	; 0x3a
 80097ea:	0a13      	lsrs	r3, r2, #8
 80097ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	sync_rcv->gm_time_base_indicator =
 80097f0:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		ntohl(fup->tlv.last_gm_phase_change.high);
 80097f4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80097f6:	1213      	asrs	r3, r2, #8
 80097f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80097fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009800:	0211      	lsls	r1, r2, #8
 8009802:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8009806:	430b      	orrs	r3, r1
 8009808:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	sync_rcv->last_gm_phase_change.high =
 800980c:	6023      	str	r3, [r4, #0]
		ntohll(fup->tlv.last_gm_phase_change.low);
 800980e:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8009810:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8009812:	1219      	asrs	r1, r3, #8
 8009814:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8009818:	ea41 6113 	orr.w	r1, r1, r3, lsr #24
 800981c:	0e02      	lsrs	r2, r0, #24
 800981e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009822:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8009826:	4311      	orrs	r1, r2
 8009828:	0a02      	lsrs	r2, r0, #8
 800982a:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 800982e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009832:	4311      	orrs	r1, r2
 8009834:	021a      	lsls	r2, r3, #8
 8009836:	ea42 6210 	orr.w	r2, r2, r0, lsr #24
 800983a:	0206      	lsls	r6, r0, #8
 800983c:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 8009840:	061b      	lsls	r3, r3, #24
 8009842:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8009846:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800984a:	4313      	orrs	r3, r2
 800984c:	f406 027f 	and.w	r2, r6, #16711680	; 0xff0000
 8009850:	4313      	orrs	r3, r2
 8009852:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
	sync_rcv->last_gm_phase_change.low =
 8009856:	6061      	str	r1, [r4, #4]
 8009858:	60a3      	str	r3, [r4, #8]
		ntohl(fup->tlv.scaled_last_gm_freq_change);
 800985a:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800985c:	1203      	asrs	r3, r0, #8
 800985e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009862:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009866:	0202      	lsls	r2, r0, #8
 8009868:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800986c:	4313      	orrs	r3, r2
	sync_rcv->last_gm_freq_change =
 800986e:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
 8009872:	f7f6 fe07 	bl	8000484 <__aeabi_ui2d>
 8009876:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
	return 0;
 800987a:	2000      	movs	r0, #0
}
 800987c:	b003      	add	sp, #12
 800987e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
 8009882:	f06f 0015 	mvn.w	r0, #21
 8009886:	e7f9      	b.n	800987c <gptp_set_md_sync_receive+0x250>
 8009888:	f06f 0015 	mvn.w	r0, #21
 800988c:	e7f6      	b.n	800987c <gptp_set_md_sync_receive+0x250>
 800988e:	bf00      	nop
 8009890:	20001470 	.word	0x20001470
 8009894:	3b9aca00 	.word	0x3b9aca00
 8009898:	3d600000 	.word	0x3d600000
 800989c:	3ff00000 	.word	0x3ff00000

080098a0 <gptp_md_sync_receive_state_machine>:

static void gptp_md_sync_receive_state_machine(int port)
{
 80098a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gptp_port_ds *port_ds;
	struct gptp_sync_rcv_state *state;
	struct gptp_pss_rcv_state *pss_state;

	state = &GPTP_PORT_STATE(port)->sync_rcv;
 80098a2:	1e44      	subs	r4, r0, #1
	pss_state = &GPTP_PORT_STATE(port)->pss_rcv;
	port_ds = GPTP_PORT_DS(port);

	if ((!port_ds->ptt_port_enabled) || !port_ds->as_capable) {
 80098a4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80098a8:	4b95      	ldr	r3, [pc, #596]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 80098aa:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80098ae:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 80098b2:	f013 0f01 	tst.w	r3, #1
 80098b6:	d06b      	beq.n	8009990 <gptp_md_sync_receive_state_machine+0xf0>
 80098b8:	4605      	mov	r5, r0
 80098ba:	4613      	mov	r3, r2
 80098bc:	4a90      	ldr	r2, [pc, #576]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 80098be:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80098c2:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 80098c6:	f013 0f08 	tst.w	r3, #8
 80098ca:	d061      	beq.n	8009990 <gptp_md_sync_receive_state_machine+0xf0>
		state->rcvd_follow_up = false;
		state->state = GPTP_SYNC_RCV_DISCARD;
		return;
	}

	switch (state->state) {
 80098cc:	4a8c      	ldr	r2, [pc, #560]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 80098ce:	f44f 735a 	mov.w	r3, #872	; 0x368
 80098d2:	fb03 2304 	mla	r3, r3, r4, r2
 80098d6:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80098da:	2b01      	cmp	r3, #1
 80098dc:	f240 808a 	bls.w	80099f4 <gptp_md_sync_receive_state_machine+0x154>
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	f040 8086 	bne.w	80099f2 <gptp_md_sync_receive_state_machine+0x152>

		break;

	case GPTP_SYNC_RCV_WAIT_FOLLOW_UP:
		/* Never received a follow up for a sync message. */
		if (state->follow_up_timeout_expired) {
 80098e6:	4a86      	ldr	r2, [pc, #536]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 80098e8:	f44f 735a 	mov.w	r3, #872	; 0x368
 80098ec:	fb03 2304 	mla	r3, r3, r4, r2
 80098f0:	f893 33c3 	ldrb.w	r3, [r3, #963]	; 0x3c3
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f040 80b7 	bne.w	8009a68 <gptp_md_sync_receive_state_machine+0x1c8>
				net_pkt_unref(state->rcvd_sync_ptr);
				state->rcvd_sync_ptr = NULL;
			}

			state->rcvd_sync = false;
		} else if (state->rcvd_sync) {
 80098fa:	4a81      	ldr	r2, [pc, #516]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 80098fc:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009900:	fb03 2304 	mla	r3, r3, r4, r2
 8009904:	f893 33c1 	ldrb.w	r3, [r3, #961]	; 0x3c1
 8009908:	2b00      	cmp	r3, #0
 800990a:	f040 80ec 	bne.w	8009ae6 <gptp_md_sync_receive_state_machine+0x246>
			/* Handle received extra sync. */
			gptp_handle_sync(port, state->rcvd_sync_ptr);
			state->rcvd_sync = false;
		} else if (state->rcvd_follow_up) {
 800990e:	4a7c      	ldr	r2, [pc, #496]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 8009910:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009914:	fb03 2304 	mla	r3, r3, r4, r2
 8009918:	f893 33c2 	ldrb.w	r3, [r3, #962]	; 0x3c2
 800991c:	2b00      	cmp	r3, #0
 800991e:	f000 80c7 	beq.w	8009ab0 <gptp_md_sync_receive_state_machine+0x210>
			if (!gptp_handle_follow_up(
 8009922:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009926:	fb03 2304 	mla	r3, r3, r4, r2
 800992a:	f8d3 13bc 	ldr.w	r1, [r3, #956]	; 0x3bc
 800992e:	f000 fdc5 	bl	800a4bc <gptp_handle_follow_up>
 8009932:	2800      	cmp	r0, #0
 8009934:	f040 80bc 	bne.w	8009ab0 <gptp_md_sync_receive_state_machine+0x210>

				/*
				 * Fill the structure to be sent to
				 * PortSyncSyncReceive.
				 */
				gptp_set_md_sync_receive(port,
 8009938:	f44f 735a 	mov.w	r3, #872	; 0x368
 800993c:	fb03 f704 	mul.w	r7, r3, r4
 8009940:	f507 7176 	add.w	r1, r7, #984	; 0x3d8
 8009944:	4e6e      	ldr	r6, [pc, #440]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 8009946:	4431      	add	r1, r6
 8009948:	4628      	mov	r0, r5
 800994a:	f7ff fe6f 	bl	800962c <gptp_set_md_sync_receive>
							 &pss_state->sync_rcv);

				pss_state->rcvd_md_sync = true;
 800994e:	19f3      	adds	r3, r6, r7
 8009950:	2201      	movs	r2, #1
 8009952:	f883 24c9 	strb.w	r2, [r3, #1225]	; 0x4c9

				state->state = GPTP_SYNC_RCV_WAIT_SYNC;
 8009956:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

				/* Buffers can be released now. */
				if (state->rcvd_sync_ptr) {
 800995a:	f8d3 03b8 	ldr.w	r0, [r3, #952]	; 0x3b8
 800995e:	b140      	cbz	r0, 8009972 <gptp_md_sync_receive_state_machine+0xd2>
					net_pkt_unref(state->rcvd_sync_ptr);
 8009960:	f010 fd1a 	bl	801a398 <net_pkt_unref>
					state->rcvd_sync_ptr = NULL;
 8009964:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009968:	fb03 6304 	mla	r3, r3, r4, r6
 800996c:	2200      	movs	r2, #0
 800996e:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
				}

				k_timer_stop(&state->follow_up_discard_timer);
 8009972:	f44f 755a 	mov.w	r5, #872	; 0x368
 8009976:	fb05 f604 	mul.w	r6, r5, r4
 800997a:	f506 7060 	add.w	r0, r6, #896	; 0x380
 800997e:	4d60      	ldr	r5, [pc, #384]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 8009980:	4428      	add	r0, r5
	z_impl_k_timer_stop(timer);
 8009982:	f012 fe81 	bl	801c688 <z_impl_k_timer_stop>
				state->follow_up_timeout_expired = false;
 8009986:	4435      	add	r5, r6
 8009988:	2300      	movs	r3, #0
 800998a:	f885 33c3 	strb.w	r3, [r5, #963]	; 0x3c3
 800998e:	e08f      	b.n	8009ab0 <gptp_md_sync_receive_state_machine+0x210>
		k_timer_stop(&state->follow_up_discard_timer);
 8009990:	f44f 755a 	mov.w	r5, #872	; 0x368
 8009994:	fb05 f604 	mul.w	r6, r5, r4
 8009998:	f506 7060 	add.w	r0, r6, #896	; 0x380
 800999c:	4d58      	ldr	r5, [pc, #352]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 800999e:	4428      	add	r0, r5
 80099a0:	f012 fe72 	bl	801c688 <z_impl_k_timer_stop>
		if (state->rcvd_sync_ptr) {
 80099a4:	4435      	add	r5, r6
 80099a6:	f8d5 03b8 	ldr.w	r0, [r5, #952]	; 0x3b8
 80099aa:	b120      	cbz	r0, 80099b6 <gptp_md_sync_receive_state_machine+0x116>
			net_pkt_unref(state->rcvd_sync_ptr);
 80099ac:	f010 fcf4 	bl	801a398 <net_pkt_unref>
			state->rcvd_sync_ptr = NULL;
 80099b0:	2200      	movs	r2, #0
 80099b2:	f8c5 23b8 	str.w	r2, [r5, #952]	; 0x3b8
		if (state->rcvd_follow_up_ptr) {
 80099b6:	4a52      	ldr	r2, [pc, #328]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 80099b8:	f44f 735a 	mov.w	r3, #872	; 0x368
 80099bc:	fb03 2304 	mla	r3, r3, r4, r2
 80099c0:	f8d3 03bc 	ldr.w	r0, [r3, #956]	; 0x3bc
 80099c4:	b148      	cbz	r0, 80099da <gptp_md_sync_receive_state_machine+0x13a>
			net_pkt_unref(state->rcvd_follow_up_ptr);
 80099c6:	f010 fce7 	bl	801a398 <net_pkt_unref>
			state->rcvd_follow_up_ptr = NULL;
 80099ca:	4a4d      	ldr	r2, [pc, #308]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 80099cc:	f44f 735a 	mov.w	r3, #872	; 0x368
 80099d0:	fb03 2304 	mla	r3, r3, r4, r2
 80099d4:	2200      	movs	r2, #0
 80099d6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
		state->rcvd_sync = false;
 80099da:	4a49      	ldr	r2, [pc, #292]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 80099dc:	f44f 735a 	mov.w	r3, #872	; 0x368
 80099e0:	fb03 2404 	mla	r4, r3, r4, r2
 80099e4:	2300      	movs	r3, #0
 80099e6:	f884 33c1 	strb.w	r3, [r4, #961]	; 0x3c1
		state->rcvd_follow_up = false;
 80099ea:	f884 33c2 	strb.w	r3, [r4, #962]	; 0x3c2
		state->state = GPTP_SYNC_RCV_DISCARD;
 80099ee:	f884 33c0 	strb.w	r3, [r4, #960]	; 0x3c0
		}

		state->rcvd_follow_up = false;
		break;
	}
}
 80099f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (state->rcvd_sync) {
 80099f4:	4a42      	ldr	r2, [pc, #264]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 80099f6:	f44f 735a 	mov.w	r3, #872	; 0x368
 80099fa:	fb03 2304 	mla	r3, r3, r4, r2
 80099fe:	f893 33c1 	ldrb.w	r3, [r3, #961]	; 0x3c1
 8009a02:	bb13      	cbnz	r3, 8009a4a <gptp_md_sync_receive_state_machine+0x1aa>
		} else if (state->rcvd_follow_up) {
 8009a04:	4a3e      	ldr	r2, [pc, #248]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 8009a06:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009a0a:	fb03 2304 	mla	r3, r3, r4, r2
 8009a0e:	f893 33c2 	ldrb.w	r3, [r3, #962]	; 0x3c2
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d0ed      	beq.n	80099f2 <gptp_md_sync_receive_state_machine+0x152>
			if (state->rcvd_follow_up_ptr) {
 8009a16:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009a1a:	fb03 2304 	mla	r3, r3, r4, r2
 8009a1e:	f8d3 03bc 	ldr.w	r0, [r3, #956]	; 0x3bc
 8009a22:	b148      	cbz	r0, 8009a38 <gptp_md_sync_receive_state_machine+0x198>
				net_pkt_unref(state->rcvd_follow_up_ptr);
 8009a24:	f010 fcb8 	bl	801a398 <net_pkt_unref>
				state->rcvd_follow_up_ptr = NULL;
 8009a28:	4a35      	ldr	r2, [pc, #212]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 8009a2a:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009a2e:	fb03 2304 	mla	r3, r3, r4, r2
 8009a32:	2200      	movs	r2, #0
 8009a34:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
			state->rcvd_follow_up = false;
 8009a38:	4a31      	ldr	r2, [pc, #196]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 8009a3a:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009a3e:	fb03 2404 	mla	r4, r3, r4, r2
 8009a42:	2300      	movs	r3, #0
 8009a44:	f884 33c2 	strb.w	r3, [r4, #962]	; 0x3c2
 8009a48:	e7d3      	b.n	80099f2 <gptp_md_sync_receive_state_machine+0x152>
			gptp_handle_sync(port, state->rcvd_sync_ptr);
 8009a4a:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009a4e:	fb03 2404 	mla	r4, r3, r4, r2
 8009a52:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
 8009a56:	f7f7 fccb 	bl	80013f0 <gptp_handle_sync>
			state->rcvd_sync = false;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	f884 33c1 	strb.w	r3, [r4, #961]	; 0x3c1
			state->state = GPTP_SYNC_RCV_WAIT_FOLLOW_UP;
 8009a60:	2302      	movs	r3, #2
 8009a62:	f884 33c0 	strb.w	r3, [r4, #960]	; 0x3c0
 8009a66:	e7c4      	b.n	80099f2 <gptp_md_sync_receive_state_machine+0x152>
			k_timer_stop(&state->follow_up_discard_timer);
 8009a68:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009a6c:	fb03 f604 	mul.w	r6, r3, r4
 8009a70:	f506 7060 	add.w	r0, r6, #896	; 0x380
 8009a74:	4615      	mov	r5, r2
 8009a76:	4410      	add	r0, r2
 8009a78:	f012 fe06 	bl	801c688 <z_impl_k_timer_stop>
			state->follow_up_timeout_expired = false;
 8009a7c:	19ab      	adds	r3, r5, r6
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 23c3 	strb.w	r2, [r3, #963]	; 0x3c3
			state->state = GPTP_SYNC_RCV_DISCARD;
 8009a84:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
			if (state->rcvd_sync_ptr) {
 8009a88:	f8d3 03b8 	ldr.w	r0, [r3, #952]	; 0x3b8
 8009a8c:	b140      	cbz	r0, 8009aa0 <gptp_md_sync_receive_state_machine+0x200>
				net_pkt_unref(state->rcvd_sync_ptr);
 8009a8e:	f010 fc83 	bl	801a398 <net_pkt_unref>
				state->rcvd_sync_ptr = NULL;
 8009a92:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009a96:	fb03 5304 	mla	r3, r3, r4, r5
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
			state->rcvd_sync = false;
 8009aa0:	4a17      	ldr	r2, [pc, #92]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 8009aa2:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009aa6:	fb03 2304 	mla	r3, r3, r4, r2
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 23c1 	strb.w	r2, [r3, #961]	; 0x3c1
		if (state->rcvd_follow_up_ptr) {
 8009ab0:	4a13      	ldr	r2, [pc, #76]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 8009ab2:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009ab6:	fb03 2304 	mla	r3, r3, r4, r2
 8009aba:	f8d3 03bc 	ldr.w	r0, [r3, #956]	; 0x3bc
 8009abe:	b148      	cbz	r0, 8009ad4 <gptp_md_sync_receive_state_machine+0x234>
			net_pkt_unref(state->rcvd_follow_up_ptr);
 8009ac0:	f010 fc6a 	bl	801a398 <net_pkt_unref>
			state->rcvd_follow_up_ptr = NULL;
 8009ac4:	4a0e      	ldr	r2, [pc, #56]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 8009ac6:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009aca:	fb03 2304 	mla	r3, r3, r4, r2
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
		state->rcvd_follow_up = false;
 8009ad4:	4b0a      	ldr	r3, [pc, #40]	; (8009b00 <gptp_md_sync_receive_state_machine+0x260>)
 8009ad6:	f44f 725a 	mov.w	r2, #872	; 0x368
 8009ada:	fb02 3404 	mla	r4, r2, r4, r3
 8009ade:	2300      	movs	r3, #0
 8009ae0:	f884 33c2 	strb.w	r3, [r4, #962]	; 0x3c2
		break;
 8009ae4:	e785      	b.n	80099f2 <gptp_md_sync_receive_state_machine+0x152>
			gptp_handle_sync(port, state->rcvd_sync_ptr);
 8009ae6:	f44f 765a 	mov.w	r6, #872	; 0x368
 8009aea:	fb06 2604 	mla	r6, r6, r4, r2
 8009aee:	f8d6 13b8 	ldr.w	r1, [r6, #952]	; 0x3b8
 8009af2:	f7f7 fc7d 	bl	80013f0 <gptp_handle_sync>
			state->rcvd_sync = false;
 8009af6:	2300      	movs	r3, #0
 8009af8:	f886 33c1 	strb.w	r3, [r6, #961]	; 0x3c1
 8009afc:	e7d8      	b.n	8009ab0 <gptp_md_sync_receive_state_machine+0x210>
 8009afe:	bf00      	nop
 8009b00:	20001470 	.word	0x20001470

08009b04 <gptp_md_follow_up_prepare>:
{
 8009b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b08:	4604      	mov	r4, r0
 8009b0a:	460d      	mov	r5, r1
 8009b0c:	4617      	mov	r7, r2
	hdr = GPTP_HDR(pkt);
 8009b0e:	f00f fb36 	bl	801917e <gptp_get_hdr>
 8009b12:	4606      	mov	r6, r0
 8009b14:	4620      	mov	r0, r4
 8009b16:	f00f fb32 	bl	801917e <gptp_get_hdr>
 8009b1a:	4604      	mov	r4, r0
	hdr->correction_field -= sync_send->upstream_tx_time;
 8009b1c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009b1e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009b20:	68b0      	ldr	r0, [r6, #8]
 8009b22:	68f1      	ldr	r1, [r6, #12]
 8009b24:	1a80      	subs	r0, r0, r2
 8009b26:	eb61 0103 	sbc.w	r1, r1, r3
 8009b2a:	60b0      	str	r0, [r6, #8]
 8009b2c:	60f1      	str	r1, [r6, #12]
	hdr->correction_field *= sync_send->rate_ratio;
 8009b2e:	e9d5 890e 	ldrd	r8, r9, [r5, #56]	; 0x38
 8009b32:	f7f6 fcf3 	bl	800051c <__aeabi_l2d>
 8009b36:	4642      	mov	r2, r8
 8009b38:	464b      	mov	r3, r9
 8009b3a:	f7f6 fd1d 	bl	8000578 <__aeabi_dmul>
 8009b3e:	f7f7 f815 	bl	8000b6c <__aeabi_d2lz>
 8009b42:	60b0      	str	r0, [r6, #8]
 8009b44:	60f1      	str	r1, [r6, #12]
	hdr->correction_field += sync_send->follow_up_correction_field;
 8009b46:	6a2a      	ldr	r2, [r5, #32]
 8009b48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009b4a:	1880      	adds	r0, r0, r2
 8009b4c:	eb43 0101 	adc.w	r1, r3, r1
	hdr->correction_field <<= 16;
 8009b50:	0409      	lsls	r1, r1, #16
 8009b52:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8009b56:	0400      	lsls	r0, r0, #16
 8009b58:	60b0      	str	r0, [r6, #8]
 8009b5a:	60f1      	str	r1, [r6, #12]
	memcpy(&hdr->port_id.clk_id, &sync_send->src_port_id.clk_id,
 8009b5c:	462b      	mov	r3, r5
 8009b5e:	f853 2f40 	ldr.w	r2, [r3, #64]!
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	6172      	str	r2, [r6, #20]
 8009b66:	61b3      	str	r3, [r6, #24]
	hdr->port_id.port_number = htons(port_number);
 8009b68:	f3c7 2207 	ubfx	r2, r7, #8, #8
 8009b6c:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
 8009b70:	83b7      	strh	r7, [r6, #28]
	hdr->log_msg_interval = sync_send->log_msg_interval;
 8009b72:	f995 304c 	ldrsb.w	r3, [r5, #76]	; 0x4c
 8009b76:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
		htons(sync_send->precise_orig_ts._sec.high);
 8009b7a:	8aaa      	ldrh	r2, [r5, #20]
 8009b7c:	0a13      	lsrs	r3, r2, #8
	fup->prec_orig_ts_secs_high =
 8009b7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009b82:	8463      	strh	r3, [r4, #34]	; 0x22
		htonl(sync_send->precise_orig_ts._sec.low);
 8009b84:	692a      	ldr	r2, [r5, #16]
 8009b86:	0a13      	lsrs	r3, r2, #8
 8009b88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009b8c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009b90:	0211      	lsls	r1, r2, #8
 8009b92:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8009b96:	430b      	orrs	r3, r1
 8009b98:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	fup->prec_orig_ts_secs_low =
 8009b9c:	6263      	str	r3, [r4, #36]	; 0x24
		htonl(sync_send->precise_orig_ts.nanosecond);
 8009b9e:	69aa      	ldr	r2, [r5, #24]
 8009ba0:	0a13      	lsrs	r3, r2, #8
 8009ba2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009ba6:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009baa:	0211      	lsls	r1, r2, #8
 8009bac:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8009bb0:	430b      	orrs	r3, r1
 8009bb2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	fup->prec_orig_ts_nsecs =
 8009bb6:	62a3      	str	r3, [r4, #40]	; 0x28
	fup->tlv_hdr.type = htons(GPTP_TLV_ORGANIZATION_EXT);
 8009bb8:	2300      	movs	r3, #0
 8009bba:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8009bbe:	2203      	movs	r2, #3
 8009bc0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
	fup->tlv_hdr.len = htons(sizeof(struct gptp_follow_up_tlv));
 8009bc4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8009bc8:	221c      	movs	r2, #28
 8009bca:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	fup->tlv.org_id[0] = GPTP_FUP_TLV_ORG_ID_BYTE_0;
 8009bce:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	fup->tlv.org_id[1] = GPTP_FUP_TLV_ORG_ID_BYTE_1;
 8009bd2:	2280      	movs	r2, #128	; 0x80
 8009bd4:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	fup->tlv.org_id[2] = GPTP_FUP_TLV_ORG_ID_BYTE_2;
 8009bd8:	22c2      	movs	r2, #194	; 0xc2
 8009bda:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
	fup->tlv.org_sub_type[0] = 0U;
 8009bde:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	fup->tlv.org_sub_type[1] = 0U;
 8009be2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	fup->tlv.org_sub_type[2] = GPTP_FUP_TLV_ORG_SUB_TYPE;
 8009be6:	2301      	movs	r3, #1
 8009be8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		(sync_send->rate_ratio - 1.0) * GPTP_POW2_41;
 8009bec:	2200      	movs	r2, #0
 8009bee:	4b32      	ldr	r3, [pc, #200]	; (8009cb8 <gptp_md_follow_up_prepare+0x1b4>)
 8009bf0:	e9d5 010e 	ldrd	r0, r1, [r5, #56]	; 0x38
 8009bf4:	f7f6 fb08 	bl	8000208 <__aeabi_dsub>
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 8009bfe:	f7f6 fcbb 	bl	8000578 <__aeabi_dmul>
	fup->tlv.cumulative_scaled_rate_offset =
 8009c02:	f7f6 ff53 	bl	8000aac <__aeabi_d2iz>
		ntohl(fup->tlv.cumulative_scaled_rate_offset);
 8009c06:	1203      	asrs	r3, r0, #8
 8009c08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009c0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c10:	0202      	lsls	r2, r0, #8
 8009c12:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8009c16:	4313      	orrs	r3, r2
 8009c18:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
	fup->tlv.cumulative_scaled_rate_offset =
 8009c1c:	f8c4 0036 	str.w	r0, [r4, #54]	; 0x36
		ntohs(sync_send->gm_time_base_indicator);
 8009c20:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
 8009c24:	0a13      	lsrs	r3, r2, #8
	fup->tlv.gm_time_base_indicator =
 8009c26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009c2a:	8763      	strh	r3, [r4, #58]	; 0x3a
		ntohl(sync_send->last_gm_phase_change.high);
 8009c2c:	682a      	ldr	r2, [r5, #0]
 8009c2e:	1213      	asrs	r3, r2, #8
 8009c30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009c34:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009c38:	0211      	lsls	r1, r2, #8
 8009c3a:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8009c3e:	430b      	orrs	r3, r1
 8009c40:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	fup->tlv.last_gm_phase_change.high =
 8009c44:	63e3      	str	r3, [r4, #60]	; 0x3c
		ntohll(sync_send->last_gm_phase_change.low);
 8009c46:	6868      	ldr	r0, [r5, #4]
 8009c48:	68ab      	ldr	r3, [r5, #8]
 8009c4a:	1219      	asrs	r1, r3, #8
 8009c4c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8009c50:	ea41 6113 	orr.w	r1, r1, r3, lsr #24
 8009c54:	0e02      	lsrs	r2, r0, #24
 8009c56:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8009c5a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8009c5e:	4311      	orrs	r1, r2
 8009c60:	0a02      	lsrs	r2, r0, #8
 8009c62:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8009c66:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009c6a:	4311      	orrs	r1, r2
 8009c6c:	021a      	lsls	r2, r3, #8
 8009c6e:	ea42 6210 	orr.w	r2, r2, r0, lsr #24
 8009c72:	0206      	lsls	r6, r0, #8
 8009c74:	f002 02ff 	and.w	r2, r2, #255	; 0xff
 8009c78:	061b      	lsls	r3, r3, #24
 8009c7a:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8009c7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009c82:	4313      	orrs	r3, r2
 8009c84:	f406 027f 	and.w	r2, r6, #16711680	; 0xff0000
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
	fup->tlv.last_gm_phase_change.low =
 8009c8e:	6421      	str	r1, [r4, #64]	; 0x40
 8009c90:	6463      	str	r3, [r4, #68]	; 0x44
	fup->tlv.scaled_last_gm_freq_change = sync_send->last_gm_freq_change;
 8009c92:	e9d5 010c 	ldrd	r0, r1, [r5, #48]	; 0x30
 8009c96:	f7f6 ff09 	bl	8000aac <__aeabi_d2iz>
		ntohl(fup->tlv.scaled_last_gm_freq_change);
 8009c9a:	1203      	asrs	r3, r0, #8
 8009c9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009ca0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009ca4:	0202      	lsls	r2, r0, #8
 8009ca6:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8009caa:	4313      	orrs	r3, r2
 8009cac:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
	fup->tlv.scaled_last_gm_freq_change =
 8009cb0:	64a0      	str	r0, [r4, #72]	; 0x48
}
 8009cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cb6:	bf00      	nop
 8009cb8:	3ff00000 	.word	0x3ff00000

08009cbc <gptp_md_sync_send_state_machine>:

static void gptp_md_sync_send_state_machine(int port)
{
 8009cbc:	b570      	push	{r4, r5, r6, lr}
	struct gptp_port_ds *port_ds;
	struct gptp_sync_send_state *state;
	struct net_pkt *pkt;

	state = &GPTP_PORT_STATE(port)->sync_send;
 8009cbe:	1e44      	subs	r4, r0, #1
	port_ds = GPTP_PORT_DS(port);

	if ((!port_ds->ptt_port_enabled) || !port_ds->as_capable) {
 8009cc0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8009cc4:	4b49      	ldr	r3, [pc, #292]	; (8009dec <gptp_md_sync_send_state_machine+0x130>)
 8009cc6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8009cca:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 8009cce:	f013 0f01 	tst.w	r3, #1
 8009cd2:	d01d      	beq.n	8009d10 <gptp_md_sync_send_state_machine+0x54>
 8009cd4:	4605      	mov	r5, r0
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	4a44      	ldr	r2, [pc, #272]	; (8009dec <gptp_md_sync_send_state_machine+0x130>)
 8009cda:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8009cde:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 8009ce2:	f013 0f08 	tst.w	r3, #8
 8009ce6:	d013      	beq.n	8009d10 <gptp_md_sync_send_state_machine+0x54>
		/* Sync sequence id is initialized in the port_ds init function
		 */
		return;
	}

	switch (state->state) {
 8009ce8:	4a40      	ldr	r2, [pc, #256]	; (8009dec <gptp_md_sync_send_state_machine+0x130>)
 8009cea:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009cee:	fb03 2304 	mla	r3, r3, r4, r2
 8009cf2:	f893 33d0 	ldrb.w	r3, [r3, #976]	; 0x3d0
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d015      	beq.n	8009d26 <gptp_md_sync_send_state_machine+0x6a>
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d03f      	beq.n	8009d7e <gptp_md_sync_send_state_machine+0xc2>
 8009cfe:	b98b      	cbnz	r3, 8009d24 <gptp_md_sync_send_state_machine+0x68>
	case GPTP_SYNC_SEND_INITIALIZING:
		state->state = GPTP_SYNC_SEND_SEND_SYNC;
 8009d00:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009d04:	fb03 2404 	mla	r4, r3, r4, r2
 8009d08:	2301      	movs	r3, #1
 8009d0a:	f884 33d0 	strb.w	r3, [r4, #976]	; 0x3d0
		break;
 8009d0e:	e009      	b.n	8009d24 <gptp_md_sync_send_state_machine+0x68>
		state->rcvd_md_sync = false;
 8009d10:	4a36      	ldr	r2, [pc, #216]	; (8009dec <gptp_md_sync_send_state_machine+0x130>)
 8009d12:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009d16:	fb03 2404 	mla	r4, r3, r4, r2
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f884 33d1 	strb.w	r3, [r4, #977]	; 0x3d1
		state->state = GPTP_SYNC_SEND_INITIALIZING;
 8009d20:	f884 33d0 	strb.w	r3, [r4, #976]	; 0x3d0
			state->state = GPTP_SYNC_SEND_SEND_SYNC;
		}

		break;
	}
}
 8009d24:	bd70      	pop	{r4, r5, r6, pc}
		if (state->rcvd_md_sync) {
 8009d26:	4a31      	ldr	r2, [pc, #196]	; (8009dec <gptp_md_sync_send_state_machine+0x130>)
 8009d28:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009d2c:	fb03 2304 	mla	r3, r3, r4, r2
 8009d30:	f893 33d1 	ldrb.w	r3, [r3, #977]	; 0x3d1
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d0f5      	beq.n	8009d24 <gptp_md_sync_send_state_machine+0x68>
			pkt = gptp_prepare_sync(port);
 8009d38:	f000 f8ca 	bl	8009ed0 <gptp_prepare_sync>
			if (pkt) {
 8009d3c:	4606      	mov	r6, r0
 8009d3e:	b190      	cbz	r0, 8009d66 <gptp_md_sync_send_state_machine+0xaa>
				state->sync_ptr = net_pkt_ref(pkt);
 8009d40:	f010 fb02 	bl	801a348 <net_pkt_ref>
 8009d44:	4a29      	ldr	r2, [pc, #164]	; (8009dec <gptp_md_sync_send_state_machine+0x130>)
 8009d46:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009d4a:	fb03 2304 	mla	r3, r3, r4, r2
 8009d4e:	f8c3 03cc 	str.w	r0, [r3, #972]	; 0x3cc
				gptp_md_sync_prepare(pkt,
 8009d52:	462a      	mov	r2, r5
 8009d54:	f8d3 13c8 	ldr.w	r1, [r3, #968]	; 0x3c8
 8009d58:	4630      	mov	r0, r6
 8009d5a:	f00f f9ed 	bl	8019138 <gptp_md_sync_prepare>
				gptp_send_sync(port, pkt);
 8009d5e:	4631      	mov	r1, r6
 8009d60:	4628      	mov	r0, r5
 8009d62:	f000 fca1 	bl	800a6a8 <gptp_send_sync>
			state->rcvd_md_sync = false;
 8009d66:	4a21      	ldr	r2, [pc, #132]	; (8009dec <gptp_md_sync_send_state_machine+0x130>)
 8009d68:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009d6c:	fb03 2404 	mla	r4, r3, r4, r2
 8009d70:	2300      	movs	r3, #0
 8009d72:	f884 33d1 	strb.w	r3, [r4, #977]	; 0x3d1
			state->state = GPTP_SYNC_SEND_SEND_FUP;
 8009d76:	2302      	movs	r3, #2
 8009d78:	f884 33d0 	strb.w	r3, [r4, #976]	; 0x3d0
 8009d7c:	e7d2      	b.n	8009d24 <gptp_md_sync_send_state_machine+0x68>
		if (state->md_sync_timestamp_avail) {
 8009d7e:	4a1b      	ldr	r2, [pc, #108]	; (8009dec <gptp_md_sync_send_state_machine+0x130>)
 8009d80:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009d84:	fb03 2304 	mla	r3, r3, r4, r2
 8009d88:	f893 33d2 	ldrb.w	r3, [r3, #978]	; 0x3d2
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d0c9      	beq.n	8009d24 <gptp_md_sync_send_state_machine+0x68>
			state->md_sync_timestamp_avail = false;
 8009d90:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009d94:	fb03 2304 	mla	r3, r3, r4, r2
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
			if (!state->sync_ptr) {
 8009d9e:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 8009da2:	2900      	cmp	r1, #0
 8009da4:	d0be      	beq.n	8009d24 <gptp_md_sync_send_state_machine+0x68>
			pkt = gptp_prepare_follow_up(port, state->sync_ptr);
 8009da6:	f000 f8e7 	bl	8009f78 <gptp_prepare_follow_up>
			if (pkt) {
 8009daa:	4606      	mov	r6, r0
 8009dac:	b168      	cbz	r0, 8009dca <gptp_md_sync_send_state_machine+0x10e>
				gptp_md_follow_up_prepare(pkt,
 8009dae:	4a0f      	ldr	r2, [pc, #60]	; (8009dec <gptp_md_sync_send_state_machine+0x130>)
 8009db0:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009db4:	fb03 2304 	mla	r3, r3, r4, r2
 8009db8:	462a      	mov	r2, r5
 8009dba:	f8d3 13c8 	ldr.w	r1, [r3, #968]	; 0x3c8
 8009dbe:	f7ff fea1 	bl	8009b04 <gptp_md_follow_up_prepare>
				gptp_send_follow_up(port, pkt);
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	f00f f9e6 	bl	8019196 <gptp_send_follow_up>
			net_pkt_unref(state->sync_ptr);
 8009dca:	4b08      	ldr	r3, [pc, #32]	; (8009dec <gptp_md_sync_send_state_machine+0x130>)
 8009dcc:	f44f 725a 	mov.w	r2, #872	; 0x368
 8009dd0:	fb02 3404 	mla	r4, r2, r4, r3
 8009dd4:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 8009dd8:	f010 fade 	bl	801a398 <net_pkt_unref>
			state->sync_ptr = NULL;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	f8c4 33cc 	str.w	r3, [r4, #972]	; 0x3cc
			state->state = GPTP_SYNC_SEND_SEND_SYNC;
 8009de2:	2301      	movs	r3, #1
 8009de4:	f884 33d0 	strb.w	r3, [r4, #976]	; 0x3d0
 8009de8:	e79c      	b.n	8009d24 <gptp_md_sync_send_state_machine+0x68>
 8009dea:	bf00      	nop
 8009dec:	20001470 	.word	0x20001470

08009df0 <gptp_md_init_state_machine>:
{
 8009df0:	b510      	push	{r4, lr}
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 8009df2:	2401      	movs	r4, #1
 8009df4:	4b09      	ldr	r3, [pc, #36]	; (8009e1c <gptp_md_init_state_machine+0x2c>)
 8009df6:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 8009dfa:	42a3      	cmp	r3, r4
 8009dfc:	db0d      	blt.n	8009e1a <gptp_md_init_state_machine+0x2a>
		gptp_md_init_pdelay_req_state_machine(port);
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f7fe ffe2 	bl	8008dc8 <gptp_md_init_pdelay_req_state_machine>
		gptp_md_init_pdelay_resp_state_machine(port);
 8009e04:	4620      	mov	r0, r4
 8009e06:	f7fe ff8f 	bl	8008d28 <gptp_md_init_pdelay_resp_state_machine>
		gptp_md_init_sync_rcv_state_machine(port);
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f7ff f80c 	bl	8008e28 <gptp_md_init_sync_rcv_state_machine>
		gptp_md_init_sync_send_state_machine(port);
 8009e10:	4620      	mov	r0, r4
 8009e12:	f7fe ff95 	bl	8008d40 <gptp_md_init_sync_send_state_machine>
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 8009e16:	3401      	adds	r4, #1
 8009e18:	e7ec      	b.n	8009df4 <gptp_md_init_state_machine+0x4>
}
 8009e1a:	bd10      	pop	{r4, pc}
 8009e1c:	20001470 	.word	0x20001470

08009e20 <setup_gptp_frame>:
{
 8009e20:	b570      	push	{r4, r5, r6, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	4606      	mov	r6, r0
	pkt = net_pkt_alloc_with_buffer(iface, sizeof(struct gptp_hdr) +
 8009e26:	f101 0522 	add.w	r5, r1, #34	; 0x22
					NET_BUF_TIMEOUT);
 8009e2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e2e:	2300      	movs	r3, #0
	pkt = net_pkt_alloc_with_buffer(iface, sizeof(struct gptp_hdr) +
 8009e30:	e9cd 2300 	strd	r2, r3, [sp]
 8009e34:	2300      	movs	r3, #0
 8009e36:	461a      	mov	r2, r3
 8009e38:	4629      	mov	r1, r5
 8009e3a:	f005 fea3 	bl	800fb84 <net_pkt_alloc_with_buffer>
	if (!pkt) {
 8009e3e:	4604      	mov	r4, r0
 8009e40:	b1b0      	cbz	r0, 8009e70 <setup_gptp_frame+0x50>
	net_buf_add(pkt->buffer, sizeof(struct gptp_hdr) + extra_header);
 8009e42:	6880      	ldr	r0, [r0, #8]
	return net_buf_simple_add(&buf->b, len);
 8009e44:	4629      	mov	r1, r5
 8009e46:	3008      	adds	r0, #8
 8009e48:	f00e fca9 	bl	801879e <net_buf_simple_add>
	pkt->ptp_pkt = is_ptp;
 8009e4c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8009e50:	f043 0301 	orr.w	r3, r3, #1
 8009e54:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	return &iface->if_dev->link_addr;
 8009e58:	6833      	ldr	r3, [r6, #0]
	net_pkt_lladdr_src(pkt)->addr = net_if_get_link_addr(iface)->addr;
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	6363      	str	r3, [r4, #52]	; 0x34
 8009e5e:	6833      	ldr	r3, [r6, #0]
	net_pkt_lladdr_src(pkt)->len = net_if_get_link_addr(iface)->len;
 8009e60:	7d1b      	ldrb	r3, [r3, #20]
 8009e62:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)&gptp_multicast_eth_addr;
 8009e66:	4b04      	ldr	r3, [pc, #16]	; (8009e78 <setup_gptp_frame+0x58>)
 8009e68:	63e3      	str	r3, [r4, #60]	; 0x3c
	net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
 8009e6a:	2306      	movs	r3, #6
 8009e6c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8009e70:	4620      	mov	r0, r4
 8009e72:	b002      	add	sp, #8
 8009e74:	bd70      	pop	{r4, r5, r6, pc}
 8009e76:	bf00      	nop
 8009e78:	0801e084 	.word	0x0801e084

08009e7c <gptp_sync_timestamp_callback>:
{
 8009e7c:	b538      	push	{r3, r4, r5, lr}
 8009e7e:	4605      	mov	r5, r0
	port = gptp_get_port_number(net_pkt_iface(pkt));
 8009e80:	6980      	ldr	r0, [r0, #24]
 8009e82:	f7fe fa11 	bl	80082a8 <gptp_get_port_number>
	if (port == -ENODEV) {
 8009e86:	f110 0f13 	cmn.w	r0, #19
 8009e8a:	d007      	beq.n	8009e9c <gptp_sync_timestamp_callback+0x20>
	state = &GPTP_PORT_STATE(port)->sync_send;
 8009e8c:	1e44      	subs	r4, r0, #1
	hdr = GPTP_HDR(pkt);
 8009e8e:	4628      	mov	r0, r5
 8009e90:	f00f f975 	bl	801917e <gptp_get_hdr>
	if (hdr->message_type == GPTP_SYNC_MESSAGE) {
 8009e94:	7803      	ldrb	r3, [r0, #0]
 8009e96:	f013 0f0f 	tst.w	r3, #15
 8009e9a:	d000      	beq.n	8009e9e <gptp_sync_timestamp_callback+0x22>
}
 8009e9c:	bd38      	pop	{r3, r4, r5, pc}
		state->md_sync_timestamp_avail = true;
 8009e9e:	4809      	ldr	r0, [pc, #36]	; (8009ec4 <gptp_sync_timestamp_callback+0x48>)
 8009ea0:	f44f 735a 	mov.w	r3, #872	; 0x368
 8009ea4:	fb03 0404 	mla	r4, r3, r4, r0
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	f884 33d2 	strb.w	r3, [r4, #978]	; 0x3d2
		net_if_unregister_timestamp_cb(&sync_timestamp_cb);
 8009eae:	4806      	ldr	r0, [pc, #24]	; (8009ec8 <gptp_sync_timestamp_callback+0x4c>)
 8009eb0:	f005 f9ae 	bl	800f210 <net_if_unregister_timestamp_cb>
		sync_cb_registered = false;
 8009eb4:	4b05      	ldr	r3, [pc, #20]	; (8009ecc <gptp_sync_timestamp_callback+0x50>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	701a      	strb	r2, [r3, #0]
		net_pkt_unref(pkt);
 8009eba:	4628      	mov	r0, r5
 8009ebc:	f010 fa6c 	bl	801a398 <net_pkt_unref>
 8009ec0:	e7ec      	b.n	8009e9c <gptp_sync_timestamp_callback+0x20>
 8009ec2:	bf00      	nop
 8009ec4:	20001470 	.word	0x20001470
 8009ec8:	2000316c 	.word	0x2000316c
 8009ecc:	20003c76 	.word	0x20003c76

08009ed0 <gptp_prepare_sync>:
{
 8009ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	iface = GPTP_PORT_IFACE(port);
 8009ed2:	1e44      	subs	r4, r0, #1
 8009ed4:	f200 10b5 	addw	r0, r0, #437	; 0x1b5
 8009ed8:	4b26      	ldr	r3, [pc, #152]	; (8009f74 <gptp_prepare_sync+0xa4>)
 8009eda:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	pkt = setup_gptp_frame(iface, sizeof(struct gptp_sync));
 8009ede:	210a      	movs	r1, #10
 8009ee0:	6840      	ldr	r0, [r0, #4]
 8009ee2:	f7ff ff9d 	bl	8009e20 <setup_gptp_frame>
	if (!pkt) {
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	d040      	beq.n	8009f6e <gptp_prepare_sync+0x9e>
	pkt->priority = priority;
 8009eec:	2303      	movs	r3, #3
 8009eee:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
 8009ef2:	f00f f944 	bl	801917e <gptp_get_hdr>
	hdr->transport_specific = GPTP_TRANSPORT_802_1_AS;
 8009ef6:	7803      	ldrb	r3, [r0, #0]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	f362 1307 	bfi	r3, r2, #4, #4
	hdr->message_type = GPTP_SYNC_MESSAGE;
 8009efe:	f36f 0303 	bfc	r3, #0, #4
 8009f02:	7003      	strb	r3, [r0, #0]
	hdr->ptp_version = GPTP_VERSION;
 8009f04:	7843      	ldrb	r3, [r0, #1]
 8009f06:	2602      	movs	r6, #2
 8009f08:	f366 0303 	bfi	r3, r6, #0, #4
 8009f0c:	7043      	strb	r3, [r0, #1]
	hdr->sequence_id = htons(port_ds->sync_seq_id);
 8009f0e:	4a19      	ldr	r2, [pc, #100]	; (8009f74 <gptp_prepare_sync+0xa4>)
 8009f10:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8009f14:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 8009f18:	f8b1 72fc 	ldrh.w	r7, [r1, #764]	; 0x2fc
 8009f1c:	0a3b      	lsrs	r3, r7, #8
 8009f1e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8009f22:	83c3      	strh	r3, [r0, #30]
	hdr->domain_number = 0U;
 8009f24:	2300      	movs	r3, #0
 8009f26:	7103      	strb	r3, [r0, #4]
	hdr->correction_field = 0;
 8009f28:	7203      	strb	r3, [r0, #8]
 8009f2a:	7243      	strb	r3, [r0, #9]
 8009f2c:	7283      	strb	r3, [r0, #10]
 8009f2e:	72c3      	strb	r3, [r0, #11]
 8009f30:	7303      	strb	r3, [r0, #12]
 8009f32:	7343      	strb	r3, [r0, #13]
 8009f34:	7383      	strb	r3, [r0, #14]
 8009f36:	73c3      	strb	r3, [r0, #15]
	hdr->flags.octets[0] = GPTP_FLAG_TWO_STEP;
 8009f38:	7186      	strb	r6, [r0, #6]
	hdr->flags.octets[1] = GPTP_FLAG_PTP_TIMESCALE;
 8009f3a:	2608      	movs	r6, #8
 8009f3c:	71c6      	strb	r6, [r0, #7]
	hdr->message_length = htons(sizeof(struct gptp_hdr) +
 8009f3e:	7083      	strb	r3, [r0, #2]
 8009f40:	262c      	movs	r6, #44	; 0x2c
 8009f42:	70c6      	strb	r6, [r0, #3]
	hdr->control = GPTP_SYNC_CONTROL_VALUE;
 8009f44:	f880 3020 	strb.w	r3, [r0, #32]
	hdr->reserved0 = 0U;
 8009f48:	7846      	ldrb	r6, [r0, #1]
 8009f4a:	f363 1607 	bfi	r6, r3, #4, #4
 8009f4e:	7046      	strb	r6, [r0, #1]
	hdr->reserved1 = 0U;
 8009f50:	7143      	strb	r3, [r0, #5]
	hdr->reserved2 = 0U;
 8009f52:	7403      	strb	r3, [r0, #16]
 8009f54:	7443      	strb	r3, [r0, #17]
 8009f56:	7483      	strb	r3, [r0, #18]
 8009f58:	74c3      	strb	r3, [r0, #19]
__ssp_bos_icheck3(memset, void *, int)
 8009f5a:	f8c0 3022 	str.w	r3, [r0, #34]	; 0x22
 8009f5e:	f8c0 3026 	str.w	r3, [r0, #38]	; 0x26
 8009f62:	8543      	strh	r3, [r0, #42]	; 0x2a
	port_ds->sync_seq_id++;
 8009f64:	f8b1 32fc 	ldrh.w	r3, [r1, #764]	; 0x2fc
 8009f68:	3301      	adds	r3, #1
 8009f6a:	f8a1 32fc 	strh.w	r3, [r1, #764]	; 0x2fc
}
 8009f6e:	4628      	mov	r0, r5
 8009f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f72:	bf00      	nop
 8009f74:	20001470 	.word	0x20001470

08009f78 <gptp_prepare_follow_up>:
{
 8009f78:	b570      	push	{r4, r5, r6, lr}
 8009f7a:	460d      	mov	r5, r1
	iface = GPTP_PORT_IFACE(port);
 8009f7c:	f200 13b5 	addw	r3, r0, #437	; 0x1b5
 8009f80:	4825      	ldr	r0, [pc, #148]	; (800a018 <gptp_prepare_follow_up+0xa0>)
 8009f82:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	pkt = setup_gptp_frame(iface, sizeof(struct gptp_follow_up));
 8009f86:	212a      	movs	r1, #42	; 0x2a
 8009f88:	6840      	ldr	r0, [r0, #4]
 8009f8a:	f7ff ff49 	bl	8009e20 <setup_gptp_frame>
	if (!pkt) {
 8009f8e:	4606      	mov	r6, r0
 8009f90:	2800      	cmp	r0, #0
 8009f92:	d03c      	beq.n	800a00e <gptp_prepare_follow_up+0x96>
 8009f94:	2306      	movs	r3, #6
 8009f96:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
	hdr = GPTP_HDR(pkt);
 8009f9a:	f00f f8f0 	bl	801917e <gptp_get_hdr>
 8009f9e:	4604      	mov	r4, r0
	sync_hdr = GPTP_HDR(sync);
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	f00f f8ec 	bl	801917e <gptp_get_hdr>
	hdr->transport_specific = GPTP_TRANSPORT_802_1_AS;
 8009fa6:	7823      	ldrb	r3, [r4, #0]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	f362 1307 	bfi	r3, r2, #4, #4
	hdr->message_type = GPTP_FOLLOWUP_MESSAGE;
 8009fae:	2208      	movs	r2, #8
 8009fb0:	f362 0303 	bfi	r3, r2, #0, #4
 8009fb4:	7023      	strb	r3, [r4, #0]
	hdr->ptp_version = GPTP_VERSION;
 8009fb6:	7863      	ldrb	r3, [r4, #1]
 8009fb8:	2202      	movs	r2, #2
 8009fba:	f362 0303 	bfi	r3, r2, #0, #4
 8009fbe:	7063      	strb	r3, [r4, #1]
	hdr->sequence_id = sync_hdr->sequence_id;
 8009fc0:	8bc3      	ldrh	r3, [r0, #30]
 8009fc2:	83e3      	strh	r3, [r4, #30]
	hdr->domain_number = 0U;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	7123      	strb	r3, [r4, #4]
	if (!ts) {
 8009fc8:	f115 0f20 	cmn.w	r5, #32
 8009fcc:	d021      	beq.n	800a012 <gptp_prepare_follow_up+0x9a>
	return (ts->second * NSEC_PER_SEC) + ts->nanosecond;
 8009fce:	6a2a      	ldr	r2, [r5, #32]
 8009fd0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009fd2:	4912      	ldr	r1, [pc, #72]	; (800a01c <gptp_prepare_follow_up+0xa4>)
 8009fd4:	fba2 2301 	umull	r2, r3, r2, r1
 8009fd8:	fb01 3300 	mla	r3, r1, r0, r3
 8009fdc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8009fde:	1852      	adds	r2, r2, r1
 8009fe0:	f143 0300 	adc.w	r3, r3, #0
	hdr->correction_field = gptp_timestamp_to_nsec(&sync->timestamp);
 8009fe4:	60a2      	str	r2, [r4, #8]
 8009fe6:	60e3      	str	r3, [r4, #12]
	hdr->flags.octets[0] = 0U;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	71a3      	strb	r3, [r4, #6]
	hdr->flags.octets[1] = GPTP_FLAG_PTP_TIMESCALE;
 8009fec:	2208      	movs	r2, #8
 8009fee:	71e2      	strb	r2, [r4, #7]
	hdr->message_length = htons(sizeof(struct gptp_hdr) +
 8009ff0:	70a3      	strb	r3, [r4, #2]
 8009ff2:	224c      	movs	r2, #76	; 0x4c
 8009ff4:	70e2      	strb	r2, [r4, #3]
	hdr->control = GPTP_FUP_CONTROL_VALUE;
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	f884 2020 	strb.w	r2, [r4, #32]
	hdr->reserved0 = 0U;
 8009ffc:	7862      	ldrb	r2, [r4, #1]
 8009ffe:	f363 1207 	bfi	r2, r3, #4, #4
 800a002:	7062      	strb	r2, [r4, #1]
	hdr->reserved1 = 0U;
 800a004:	7163      	strb	r3, [r4, #5]
	hdr->reserved2 = 0U;
 800a006:	7423      	strb	r3, [r4, #16]
 800a008:	7463      	strb	r3, [r4, #17]
 800a00a:	74a3      	strb	r3, [r4, #18]
 800a00c:	74e3      	strb	r3, [r4, #19]
}
 800a00e:	4630      	mov	r0, r6
 800a010:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 800a012:	2200      	movs	r2, #0
 800a014:	2300      	movs	r3, #0
 800a016:	e7e5      	b.n	8009fe4 <gptp_prepare_follow_up+0x6c>
 800a018:	20001470 	.word	0x20001470
 800a01c:	3b9aca00 	.word	0x3b9aca00

0800a020 <gptp_prepare_pdelay_req>:
{
 800a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	iface = GPTP_PORT_IFACE(port);
 800a022:	1e44      	subs	r4, r0, #1
 800a024:	f200 10b5 	addw	r0, r0, #437	; 0x1b5
 800a028:	4b33      	ldr	r3, [pc, #204]	; (800a0f8 <gptp_prepare_pdelay_req+0xd8>)
 800a02a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
	pkt = setup_gptp_frame(iface, sizeof(struct gptp_pdelay_req));
 800a02e:	2114      	movs	r1, #20
 800a030:	6840      	ldr	r0, [r0, #4]
 800a032:	f7ff fef5 	bl	8009e20 <setup_gptp_frame>
	if (!pkt) {
 800a036:	4605      	mov	r5, r0
 800a038:	2800      	cmp	r0, #0
 800a03a:	d05a      	beq.n	800a0f2 <gptp_prepare_pdelay_req+0xd2>
 800a03c:	2303      	movs	r3, #3
 800a03e:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
 800a042:	f00f f89c 	bl	801917e <gptp_get_hdr>
	hdr->transport_specific = GPTP_TRANSPORT_802_1_AS;
 800a046:	7803      	ldrb	r3, [r0, #0]
 800a048:	2201      	movs	r2, #1
 800a04a:	f362 1307 	bfi	r3, r2, #4, #4
	hdr->message_type = GPTP_PATH_DELAY_REQ_MESSAGE;
 800a04e:	2202      	movs	r2, #2
 800a050:	f362 0303 	bfi	r3, r2, #0, #4
 800a054:	7003      	strb	r3, [r0, #0]
	hdr->ptp_version = GPTP_VERSION;
 800a056:	7843      	ldrb	r3, [r0, #1]
 800a058:	f362 0303 	bfi	r3, r2, #0, #4
 800a05c:	7043      	strb	r3, [r0, #1]
	hdr->sequence_id = htons(port_ds->pdelay_req_seq_id);
 800a05e:	4a26      	ldr	r2, [pc, #152]	; (800a0f8 <gptp_prepare_pdelay_req+0xd8>)
 800a060:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800a064:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 800a068:	f8b1 62fe 	ldrh.w	r6, [r1, #766]	; 0x2fe
 800a06c:	0a33      	lsrs	r3, r6, #8
 800a06e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 800a072:	83c3      	strh	r3, [r0, #30]
	hdr->domain_number = 0U;
 800a074:	2300      	movs	r3, #0
 800a076:	7103      	strb	r3, [r0, #4]
	hdr->correction_field = 0;
 800a078:	7203      	strb	r3, [r0, #8]
 800a07a:	7243      	strb	r3, [r0, #9]
 800a07c:	7283      	strb	r3, [r0, #10]
 800a07e:	72c3      	strb	r3, [r0, #11]
 800a080:	7303      	strb	r3, [r0, #12]
 800a082:	7343      	strb	r3, [r0, #13]
 800a084:	7383      	strb	r3, [r0, #14]
 800a086:	73c3      	strb	r3, [r0, #15]
	hdr->flags.octets[0] = 0U;
 800a088:	7183      	strb	r3, [r0, #6]
	hdr->flags.octets[1] = GPTP_FLAG_PTP_TIMESCALE;
 800a08a:	2608      	movs	r6, #8
 800a08c:	71c6      	strb	r6, [r0, #7]
	hdr->message_length = htons(sizeof(struct gptp_hdr) +
 800a08e:	7083      	strb	r3, [r0, #2]
 800a090:	2636      	movs	r6, #54	; 0x36
 800a092:	70c6      	strb	r6, [r0, #3]
	hdr->port_id.port_number = htons(port_ds->port_id.port_number);
 800a094:	f8b1 72e0 	ldrh.w	r7, [r1, #736]	; 0x2e0
 800a098:	0a3e      	lsrs	r6, r7, #8
 800a09a:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
 800a09e:	8386      	strh	r6, [r0, #28]
	hdr->control = GPTP_OTHER_CONTROL_VALUE;
 800a0a0:	2605      	movs	r6, #5
 800a0a2:	f880 6020 	strb.w	r6, [r0, #32]
	hdr->log_msg_interval = port_ds->cur_log_pdelay_req_itv;
 800a0a6:	f991 630b 	ldrsb.w	r6, [r1, #779]	; 0x30b
 800a0aa:	f880 6021 	strb.w	r6, [r0, #33]	; 0x21
	hdr->reserved0 = 0U;
 800a0ae:	7846      	ldrb	r6, [r0, #1]
 800a0b0:	f363 1607 	bfi	r6, r3, #4, #4
 800a0b4:	7046      	strb	r6, [r0, #1]
	hdr->reserved1 = 0U;
 800a0b6:	7143      	strb	r3, [r0, #5]
	hdr->reserved2 = 0U;
 800a0b8:	7403      	strb	r3, [r0, #16]
 800a0ba:	7443      	strb	r3, [r0, #17]
 800a0bc:	7483      	strb	r3, [r0, #18]
 800a0be:	74c3      	strb	r3, [r0, #19]
	memcpy(hdr->port_id.clk_id,
 800a0c0:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 800a0c4:	0176      	lsls	r6, r6, #5
 800a0c6:	f506 7636 	add.w	r6, r6, #728	; 0x2d8
 800a0ca:	eb06 0c02 	add.w	ip, r6, r2
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800a0ce:	5997      	ldr	r7, [r2, r6]
 800a0d0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800a0d4:	6147      	str	r7, [r0, #20]
 800a0d6:	6186      	str	r6, [r0, #24]
__ssp_bos_icheck3(memset, void *, int)
 800a0d8:	f8c0 3022 	str.w	r3, [r0, #34]	; 0x22
 800a0dc:	f8c0 3026 	str.w	r3, [r0, #38]	; 0x26
 800a0e0:	8543      	strh	r3, [r0, #42]	; 0x2a
 800a0e2:	62c3      	str	r3, [r0, #44]	; 0x2c
 800a0e4:	6303      	str	r3, [r0, #48]	; 0x30
 800a0e6:	8683      	strh	r3, [r0, #52]	; 0x34
	port_ds->pdelay_req_seq_id++;
 800a0e8:	f8b1 32fe 	ldrh.w	r3, [r1, #766]	; 0x2fe
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	f8a1 32fe 	strh.w	r3, [r1, #766]	; 0x2fe
}
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	20001470 	.word	0x20001470

0800a0fc <gptp_prepare_pdelay_resp>:
{
 800a0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a100:	4605      	mov	r5, r0
 800a102:	460f      	mov	r7, r1
	pkt = setup_gptp_frame(iface, sizeof(struct gptp_pdelay_resp));
 800a104:	2114      	movs	r1, #20
 800a106:	69b8      	ldr	r0, [r7, #24]
 800a108:	f7ff fe8a 	bl	8009e20 <setup_gptp_frame>
	if (!pkt) {
 800a10c:	4606      	mov	r6, r0
 800a10e:	2800      	cmp	r0, #0
 800a110:	d064      	beq.n	800a1dc <gptp_prepare_pdelay_resp+0xe0>
 800a112:	f04f 0803 	mov.w	r8, #3
 800a116:	f880 8052 	strb.w	r8, [r0, #82]	; 0x52
	port_ds = GPTP_PORT_DS(port);
 800a11a:	3d01      	subs	r5, #1
 800a11c:	f00f f82f 	bl	801917e <gptp_get_hdr>
 800a120:	4604      	mov	r4, r0
 800a122:	4638      	mov	r0, r7
 800a124:	f00f f82b 	bl	801917e <gptp_get_hdr>
	hdr->transport_specific = GPTP_TRANSPORT_802_1_AS;
 800a128:	7823      	ldrb	r3, [r4, #0]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f362 1307 	bfi	r3, r2, #4, #4
	hdr->message_type = GPTP_PATH_DELAY_RESP_MESSAGE;
 800a130:	f368 0303 	bfi	r3, r8, #0, #4
 800a134:	7023      	strb	r3, [r4, #0]
	hdr->ptp_version = GPTP_VERSION;
 800a136:	7862      	ldrb	r2, [r4, #1]
 800a138:	2302      	movs	r3, #2
 800a13a:	f363 0203 	bfi	r2, r3, #0, #4
 800a13e:	7062      	strb	r2, [r4, #1]
	hdr->sequence_id = query->sequence_id;
 800a140:	8bc2      	ldrh	r2, [r0, #30]
 800a142:	83e2      	strh	r2, [r4, #30]
	hdr->domain_number = query->domain_number;
 800a144:	7902      	ldrb	r2, [r0, #4]
 800a146:	7122      	strb	r2, [r4, #4]
	hdr->correction_field = query->correction_field;
 800a148:	6881      	ldr	r1, [r0, #8]
 800a14a:	68c2      	ldr	r2, [r0, #12]
 800a14c:	60a1      	str	r1, [r4, #8]
 800a14e:	60e2      	str	r2, [r4, #12]
	hdr->flags.octets[0] = GPTP_FLAG_TWO_STEP;
 800a150:	71a3      	strb	r3, [r4, #6]
	hdr->flags.octets[1] = GPTP_FLAG_PTP_TIMESCALE;
 800a152:	2308      	movs	r3, #8
 800a154:	71e3      	strb	r3, [r4, #7]
	hdr->message_length = htons(sizeof(struct gptp_hdr) +
 800a156:	2300      	movs	r3, #0
 800a158:	70a3      	strb	r3, [r4, #2]
 800a15a:	2236      	movs	r2, #54	; 0x36
 800a15c:	70e2      	strb	r2, [r4, #3]
	hdr->port_id.port_number = htons(port_ds->port_id.port_number);
 800a15e:	4a21      	ldr	r2, [pc, #132]	; (800a1e4 <gptp_prepare_pdelay_resp+0xe8>)
 800a160:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a164:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 800a168:	f8b1 72e0 	ldrh.w	r7, [r1, #736]	; 0x2e0
 800a16c:	0a39      	lsrs	r1, r7, #8
 800a16e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800a172:	83a1      	strh	r1, [r4, #28]
	hdr->control = GPTP_OTHER_CONTROL_VALUE;
 800a174:	2105      	movs	r1, #5
 800a176:	f884 1020 	strb.w	r1, [r4, #32]
	hdr->log_msg_interval = GPTP_RESP_LOG_MSG_ITV;
 800a17a:	217f      	movs	r1, #127	; 0x7f
 800a17c:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
	hdr->reserved0 = 0U;
 800a180:	7861      	ldrb	r1, [r4, #1]
 800a182:	f363 1107 	bfi	r1, r3, #4, #4
 800a186:	7061      	strb	r1, [r4, #1]
	hdr->reserved1 = 0U;
 800a188:	7163      	strb	r3, [r4, #5]
	hdr->reserved2 = 0U;
 800a18a:	7423      	strb	r3, [r4, #16]
 800a18c:	7463      	strb	r3, [r4, #17]
 800a18e:	74a3      	strb	r3, [r4, #18]
 800a190:	74e3      	strb	r3, [r4, #19]
	memcpy(hdr->port_id.clk_id, port_ds->port_id.clk_id,
 800a192:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a196:	016d      	lsls	r5, r5, #5
 800a198:	f505 7536 	add.w	r5, r5, #728	; 0x2d8
 800a19c:	18af      	adds	r7, r5, r2
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800a19e:	5951      	ldr	r1, [r2, r5]
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	6161      	str	r1, [r4, #20]
 800a1a4:	61a2      	str	r2, [r4, #24]
	pdelay_resp->req_receipt_ts_secs_high = 0U;
 800a1a6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800a1aa:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdelay_resp->req_receipt_ts_secs_low = 0U;
 800a1ae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800a1b2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 800a1b6:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 800a1ba:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	pdelay_resp->req_receipt_ts_nsecs = 0U;
 800a1be:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800a1c2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 800a1c6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 800a1ca:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
 800a1ce:	f850 2f14 	ldr.w	r2, [r0, #20]!
 800a1d2:	6843      	ldr	r3, [r0, #4]
 800a1d4:	62e2      	str	r2, [r4, #44]	; 0x2c
 800a1d6:	6323      	str	r3, [r4, #48]	; 0x30
 800a1d8:	8903      	ldrh	r3, [r0, #8]
 800a1da:	86a3      	strh	r3, [r4, #52]	; 0x34
}
 800a1dc:	4630      	mov	r0, r6
 800a1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e2:	bf00      	nop
 800a1e4:	20001470 	.word	0x20001470

0800a1e8 <gptp_prepare_pdelay_follow_up>:
{
 800a1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ea:	4605      	mov	r5, r0
 800a1ec:	460f      	mov	r7, r1
	pkt = setup_gptp_frame(iface,
 800a1ee:	2114      	movs	r1, #20
 800a1f0:	69b8      	ldr	r0, [r7, #24]
 800a1f2:	f7ff fe15 	bl	8009e20 <setup_gptp_frame>
	if (!pkt) {
 800a1f6:	4606      	mov	r6, r0
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	d068      	beq.n	800a2ce <gptp_prepare_pdelay_follow_up+0xe6>
 800a1fc:	2306      	movs	r3, #6
 800a1fe:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
	port_ds = GPTP_PORT_DS(port);
 800a202:	3d01      	subs	r5, #1
 800a204:	f00e ffbb 	bl	801917e <gptp_get_hdr>
 800a208:	4604      	mov	r4, r0
 800a20a:	4638      	mov	r0, r7
 800a20c:	f00e ffb7 	bl	801917e <gptp_get_hdr>
	hdr->transport_specific = GPTP_TRANSPORT_802_1_AS;
 800a210:	7823      	ldrb	r3, [r4, #0]
 800a212:	2201      	movs	r2, #1
 800a214:	f362 1307 	bfi	r3, r2, #4, #4
	hdr->ptp_version = GPTP_VERSION;
 800a218:	7862      	ldrb	r2, [r4, #1]
 800a21a:	2102      	movs	r1, #2
 800a21c:	f361 0203 	bfi	r2, r1, #0, #4
 800a220:	7062      	strb	r2, [r4, #1]
	hdr->message_type = GPTP_PATH_DELAY_FOLLOWUP_MESSAGE;
 800a222:	220a      	movs	r2, #10
 800a224:	f362 0303 	bfi	r3, r2, #0, #4
 800a228:	7023      	strb	r3, [r4, #0]
	hdr->sequence_id = resp_hdr->sequence_id;
 800a22a:	8bc3      	ldrh	r3, [r0, #30]
 800a22c:	83e3      	strh	r3, [r4, #30]
	hdr->domain_number = resp_hdr->domain_number;
 800a22e:	7903      	ldrb	r3, [r0, #4]
 800a230:	7123      	strb	r3, [r4, #4]
	hdr->correction_field = 0;
 800a232:	2300      	movs	r3, #0
 800a234:	7223      	strb	r3, [r4, #8]
 800a236:	7263      	strb	r3, [r4, #9]
 800a238:	72a3      	strb	r3, [r4, #10]
 800a23a:	72e3      	strb	r3, [r4, #11]
 800a23c:	7323      	strb	r3, [r4, #12]
 800a23e:	7363      	strb	r3, [r4, #13]
 800a240:	73a3      	strb	r3, [r4, #14]
 800a242:	73e3      	strb	r3, [r4, #15]
	hdr->message_length = htons(sizeof(struct gptp_hdr) +
 800a244:	70a3      	strb	r3, [r4, #2]
 800a246:	2236      	movs	r2, #54	; 0x36
 800a248:	70e2      	strb	r2, [r4, #3]
	hdr->port_id.port_number = htons(port_ds->port_id.port_number);
 800a24a:	4a22      	ldr	r2, [pc, #136]	; (800a2d4 <gptp_prepare_pdelay_follow_up+0xec>)
 800a24c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a250:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 800a254:	f8b1 72e0 	ldrh.w	r7, [r1, #736]	; 0x2e0
 800a258:	0a39      	lsrs	r1, r7, #8
 800a25a:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800a25e:	83a1      	strh	r1, [r4, #28]
	hdr->control = GPTP_OTHER_CONTROL_VALUE;
 800a260:	2105      	movs	r1, #5
 800a262:	f884 1020 	strb.w	r1, [r4, #32]
	hdr->log_msg_interval = GPTP_RESP_LOG_MSG_ITV;
 800a266:	217f      	movs	r1, #127	; 0x7f
 800a268:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
	hdr->flags.octets[0] = 0U;
 800a26c:	71a3      	strb	r3, [r4, #6]
	hdr->flags.octets[1] = GPTP_FLAG_PTP_TIMESCALE;
 800a26e:	2108      	movs	r1, #8
 800a270:	71e1      	strb	r1, [r4, #7]
	hdr->reserved0 = 0U;
 800a272:	7861      	ldrb	r1, [r4, #1]
 800a274:	f363 1107 	bfi	r1, r3, #4, #4
 800a278:	7061      	strb	r1, [r4, #1]
	hdr->reserved1 = 0U;
 800a27a:	7163      	strb	r3, [r4, #5]
	hdr->reserved2 = 0U;
 800a27c:	7423      	strb	r3, [r4, #16]
 800a27e:	7463      	strb	r3, [r4, #17]
 800a280:	74a3      	strb	r3, [r4, #18]
 800a282:	74e3      	strb	r3, [r4, #19]
	memcpy(hdr->port_id.clk_id, port_ds->port_id.clk_id,
 800a284:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a288:	016d      	lsls	r5, r5, #5
 800a28a:	f505 7536 	add.w	r5, r5, #728	; 0x2d8
 800a28e:	18af      	adds	r7, r5, r2
 800a290:	5951      	ldr	r1, [r2, r5]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	6161      	str	r1, [r4, #20]
 800a296:	61a2      	str	r2, [r4, #24]
	follow_up->resp_orig_ts_secs_high = 0U;
 800a298:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800a29c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	follow_up->resp_orig_ts_secs_low = 0U;
 800a2a0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800a2a4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 800a2a8:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 800a2ac:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	follow_up->resp_orig_ts_nsecs = 0U;
 800a2b0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800a2b4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 800a2b8:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
 800a2bc:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
 800a2c0:	f850 2f2c 	ldr.w	r2, [r0, #44]!
 800a2c4:	6843      	ldr	r3, [r0, #4]
 800a2c6:	62e2      	str	r2, [r4, #44]	; 0x2c
 800a2c8:	6323      	str	r3, [r4, #48]	; 0x30
 800a2ca:	8903      	ldrh	r3, [r0, #8]
 800a2cc:	86a3      	strh	r3, [r4, #52]	; 0x34
}
 800a2ce:	4630      	mov	r0, r6
 800a2d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	20001470 	.word	0x20001470

0800a2d8 <gptp_prepare_announce>:
{
 800a2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2da:	4606      	mov	r6, r0
	iface = GPTP_PORT_IFACE(port);
 800a2dc:	1e45      	subs	r5, r0, #1
 800a2de:	4a76      	ldr	r2, [pc, #472]	; (800a4b8 <gptp_prepare_announce+0x1e0>)
 800a2e0:	f200 13b5 	addw	r3, r0, #437	; 0x1b5
 800a2e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			       ntohs(global_ds->path_trace.len));
 800a2e8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800a2ec:	0a11      	lsrs	r1, r2, #8
 800a2ee:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 800a2f2:	b289      	uxth	r1, r1
	pkt = setup_gptp_frame(iface, sizeof(struct gptp_announce) - 8 +
 800a2f4:	3122      	adds	r1, #34	; 0x22
 800a2f6:	6858      	ldr	r0, [r3, #4]
 800a2f8:	f7ff fd92 	bl	8009e20 <setup_gptp_frame>
	if (!pkt) {
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	2800      	cmp	r0, #0
 800a300:	f000 80d8 	beq.w	800a4b4 <gptp_prepare_announce+0x1dc>
 800a304:	2306      	movs	r3, #6
 800a306:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
	hdr = GPTP_HDR(pkt);
 800a30a:	f00e ff38 	bl	801917e <gptp_get_hdr>
	hdr->message_type = GPTP_ANNOUNCE_MESSAGE;
 800a30e:	7803      	ldrb	r3, [r0, #0]
 800a310:	220b      	movs	r2, #11
 800a312:	f362 0303 	bfi	r3, r2, #0, #4
	hdr->transport_specific = GPTP_TRANSPORT_802_1_AS;
 800a316:	2201      	movs	r2, #1
 800a318:	f362 1307 	bfi	r3, r2, #4, #4
 800a31c:	7003      	strb	r3, [r0, #0]
	hdr->ptp_version = GPTP_VERSION;
 800a31e:	7843      	ldrb	r3, [r0, #1]
 800a320:	2202      	movs	r2, #2
 800a322:	f362 0303 	bfi	r3, r2, #0, #4
 800a326:	7043      	strb	r3, [r0, #1]
	hdr->domain_number = 0U;
 800a328:	2300      	movs	r3, #0
 800a32a:	7103      	strb	r3, [r0, #4]
	hdr->correction_field = 0;
 800a32c:	7203      	strb	r3, [r0, #8]
 800a32e:	7243      	strb	r3, [r0, #9]
 800a330:	7283      	strb	r3, [r0, #10]
 800a332:	72c3      	strb	r3, [r0, #11]
 800a334:	7303      	strb	r3, [r0, #12]
 800a336:	7343      	strb	r3, [r0, #13]
 800a338:	7383      	strb	r3, [r0, #14]
 800a33a:	73c3      	strb	r3, [r0, #15]
	hdr->flags.octets[0] = 0U;
 800a33c:	7183      	strb	r3, [r0, #6]
		global_ds->global_flags.octets[1] | GPTP_FLAG_PTP_TIMESCALE;
 800a33e:	4a5e      	ldr	r2, [pc, #376]	; (800a4b8 <gptp_prepare_announce+0x1e0>)
 800a340:	f892 1059 	ldrb.w	r1, [r2, #89]	; 0x59
	hdr->flags.octets[1] =
 800a344:	f041 0108 	orr.w	r1, r1, #8
 800a348:	71c1      	strb	r1, [r0, #7]
 800a34a:	f8d2 711d 	ldr.w	r7, [r2, #285]	; 0x11d
 800a34e:	f8d2 1121 	ldr.w	r1, [r2, #289]	; 0x121
 800a352:	6147      	str	r7, [r0, #20]
 800a354:	6181      	str	r1, [r0, #24]
	hdr->port_id.port_number = htons(port);
 800a356:	f3c6 2107 	ubfx	r1, r6, #8, #8
 800a35a:	ea41 2606 	orr.w	r6, r1, r6, lsl #8
 800a35e:	8386      	strh	r6, [r0, #28]
	hdr->control = GPTP_OTHER_CONTROL_VALUE;
 800a360:	2105      	movs	r1, #5
 800a362:	f880 1020 	strb.w	r1, [r0, #32]
	hdr->log_msg_interval = port_ds->cur_log_announce_itv;
 800a366:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800a36a:	eb02 1141 	add.w	r1, r2, r1, lsl #5
 800a36e:	f991 1305 	ldrsb.w	r1, [r1, #773]	; 0x305
 800a372:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
	hdr->reserved0 = 0U;
 800a376:	7841      	ldrb	r1, [r0, #1]
 800a378:	f363 1107 	bfi	r1, r3, #4, #4
 800a37c:	7041      	strb	r1, [r0, #1]
	hdr->reserved1 = 0U;
 800a37e:	7143      	strb	r3, [r0, #5]
	hdr->reserved2 = 0U;
 800a380:	7403      	strb	r3, [r0, #16]
 800a382:	7443      	strb	r3, [r0, #17]
 800a384:	7483      	strb	r3, [r0, #18]
 800a386:	74c3      	strb	r3, [r0, #19]
	ann->cur_utc_offset = global_ds->current_utc_offset;
 800a388:	f9b2 310a 	ldrsh.w	r3, [r2, #266]	; 0x10a
 800a38c:	8583      	strh	r3, [r0, #44]	; 0x2c
	ann->time_source = global_ds->time_source;
 800a38e:	f892 3112 	ldrb.w	r3, [r2, #274]	; 0x112
 800a392:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
	switch (GPTP_PORT_BMCA_DATA(port)->info_is) {
 800a396:	2364      	movs	r3, #100	; 0x64
 800a398:	fb03 2205 	mla	r2, r3, r5, r2
 800a39c:	f892 36cc 	ldrb.w	r3, [r2, #1740]	; 0x6cc
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d06e      	beq.n	800a482 <gptp_prepare_announce+0x1aa>
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	f040 8081 	bne.w	800a4ac <gptp_prepare_announce+0x1d4>
		ann->root_system_id.grand_master_prio1 = default_ds->priority1;
 800a3aa:	4b43      	ldr	r3, [pc, #268]	; (800a4b8 <gptp_prepare_announce+0x1e0>)
 800a3ac:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 800a3b0:	f880 202f 	strb.w	r2, [r0, #47]	; 0x2f
		ann->root_system_id.grand_master_prio2 = default_ds->priority2;
 800a3b4:	f893 212d 	ldrb.w	r2, [r3, #301]	; 0x12d
 800a3b8:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
 800a3bc:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800a3c0:	6302      	str	r2, [r0, #48]	; 0x30
 800a3c2:	f8d3 211d 	ldr.w	r2, [r3, #285]	; 0x11d
 800a3c6:	f8d3 3121 	ldr.w	r3, [r3, #289]	; 0x121
 800a3ca:	f8c0 2035 	str.w	r2, [r0, #53]	; 0x35
 800a3ce:	f8c0 3039 	str.w	r3, [r0, #57]	; 0x39
	ann->steps_removed = global_ds->master_steps_removed;
 800a3d2:	4a39      	ldr	r2, [pc, #228]	; (800a4b8 <gptp_prepare_announce+0x1e0>)
 800a3d4:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
 800a3d8:	f8a0 303d 	strh.w	r3, [r0, #61]	; 0x3d
	hdr->sequence_id = htons(port_ds->announce_seq_id);
 800a3dc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800a3e0:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800a3e4:	f8b3 6300 	ldrh.w	r6, [r3, #768]	; 0x300
 800a3e8:	0a31      	lsrs	r1, r6, #8
 800a3ea:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 800a3ee:	83c1      	strh	r1, [r0, #30]
	port_ds->announce_seq_id++;
 800a3f0:	f8b3 3300 	ldrh.w	r3, [r3, #768]	; 0x300
 800a3f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3f8:	eb02 1545 	add.w	r5, r2, r5, lsl #5
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	f8a5 3300 	strh.w	r3, [r5, #768]	; 0x300
	ann->tlv.type = GPTP_ANNOUNCE_MSG_PATH_SEQ_TYPE;
 800a402:	2300      	movs	r3, #0
 800a404:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800a408:	2108      	movs	r1, #8
 800a40a:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
__ssp_bos_icheck3(memset, void *, int)
 800a40e:	f8c0 3022 	str.w	r3, [r0, #34]	; 0x22
 800a412:	f8c0 3026 	str.w	r3, [r0, #38]	; 0x26
 800a416:	8543      	strh	r3, [r0, #42]	; 0x2a
	ann->reserved2 = 0U;
 800a418:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
	hdr->message_length = htons(sizeof(struct gptp_hdr) +
 800a41c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 800a420:	0a0b      	lsrs	r3, r1, #8
 800a422:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800a426:	b29b      	uxth	r3, r3
 800a428:	3344      	adds	r3, #68	; 0x44
 800a42a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a42e:	b29b      	uxth	r3, r3
 800a430:	021b      	lsls	r3, r3, #8
 800a432:	b29b      	uxth	r3, r3
 800a434:	430b      	orrs	r3, r1
 800a436:	8043      	strh	r3, [r0, #2]
	ann->tlv.len = global_ds->path_trace.len;
 800a438:	f8b2 305c 	ldrh.w	r3, [r2, #92]	; 0x5c
 800a43c:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	net_pkt_cursor_init(pkt);
 800a440:	4620      	mov	r0, r4
 800a442:	f010 f80a 	bl	801a45a <net_pkt_cursor_init>
				    (struct in6_addr *)NET_IPV6_HDR(pkt)->src);
}

static inline void net_pkt_set_overwrite(struct net_pkt *pkt, bool overwrite)
{
	pkt->overwrite = overwrite;
 800a446:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 800a44a:	f043 0301 	orr.w	r3, r3, #1
 800a44e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (net_pkt_skip(pkt, sizeof(struct gptp_hdr) +
 800a452:	2144      	movs	r1, #68	; 0x44
 800a454:	4620      	mov	r0, r4
 800a456:	f010 f876 	bl	801a546 <net_pkt_skip>
 800a45a:	bb38      	cbnz	r0, 800a4ac <gptp_prepare_announce+0x1d4>
			  ntohs(global_ds->path_trace.len))) {
 800a45c:	4916      	ldr	r1, [pc, #88]	; (800a4b8 <gptp_prepare_announce+0x1e0>)
 800a45e:	f8b1 305c 	ldrh.w	r3, [r1, #92]	; 0x5c
 800a462:	0a1a      	lsrs	r2, r3, #8
 800a464:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	    net_pkt_write(pkt, &global_ds->path_trace.path_sequence[0][0],
 800a468:	b292      	uxth	r2, r2
 800a46a:	315e      	adds	r1, #94	; 0x5e
 800a46c:	4620      	mov	r0, r4
 800a46e:	f010 f9a7 	bl	801a7c0 <net_pkt_write>
			 sizeof(struct gptp_announce) - 8) ||
 800a472:	b9d8      	cbnz	r0, 800a4ac <gptp_prepare_announce+0x1d4>
 800a474:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 800a478:	f36f 0300 	bfc	r3, #0, #1
 800a47c:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	return pkt;
 800a480:	e018      	b.n	800a4b4 <gptp_prepare_announce+0x1dc>
		memcpy(&ann->root_system_id,
 800a482:	2364      	movs	r3, #100	; 0x64
 800a484:	fb03 f305 	mul.w	r3, r3, r5
 800a488:	f503 62cf 	add.w	r2, r3, #1656	; 0x678
 800a48c:	4b0a      	ldr	r3, [pc, #40]	; (800a4b8 <gptp_prepare_announce+0x1e0>)
 800a48e:	4413      	add	r3, r2
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800a490:	f853 6f04 	ldr.w	r6, [r3, #4]!
 800a494:	6859      	ldr	r1, [r3, #4]
 800a496:	689a      	ldr	r2, [r3, #8]
 800a498:	f8c0 602f 	str.w	r6, [r0, #47]	; 0x2f
 800a49c:	f8c0 1033 	str.w	r1, [r0, #51]	; 0x33
 800a4a0:	f8c0 2037 	str.w	r2, [r0, #55]	; 0x37
 800a4a4:	899b      	ldrh	r3, [r3, #12]
 800a4a6:	f8a0 303b 	strh.w	r3, [r0, #59]	; 0x3b
 800a4aa:	e792      	b.n	800a3d2 <gptp_prepare_announce+0xfa>
	net_pkt_unref(pkt);
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f00f ff73 	bl	801a398 <net_pkt_unref>
	return NULL;
 800a4b2:	2400      	movs	r4, #0
}
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4b8:	20001470 	.word	0x20001470

0800a4bc <gptp_handle_follow_up>:

int gptp_handle_follow_up(int port, struct net_pkt *pkt)
{
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	460d      	mov	r5, r1
	struct gptp_sync_rcv_state *state;
	struct gptp_hdr *sync_hdr, *hdr;
	struct gptp_port_ds *port_ds;

	state = &GPTP_PORT_STATE(port)->sync_rcv;
 800a4c0:	3801      	subs	r0, #1
	port_ds = GPTP_PORT_DS(port);

	sync_hdr = GPTP_HDR(state->rcvd_sync_ptr);
 800a4c2:	4b0b      	ldr	r3, [pc, #44]	; (800a4f0 <gptp_handle_follow_up+0x34>)
 800a4c4:	f44f 725a 	mov.w	r2, #872	; 0x368
 800a4c8:	fb02 3000 	mla	r0, r2, r0, r3
 800a4cc:	f8d0 03b8 	ldr.w	r0, [r0, #952]	; 0x3b8
 800a4d0:	f00e fe55 	bl	801917e <gptp_get_hdr>
 800a4d4:	4604      	mov	r4, r0
	hdr = GPTP_HDR(pkt);
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	f00e fe51 	bl	801917e <gptp_get_hdr>

	if (sync_hdr->sequence_id != hdr->sequence_id) {
 800a4dc:	8be2      	ldrh	r2, [r4, #30]
 800a4de:	8bc3      	ldrh	r3, [r0, #30]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d101      	bne.n	800a4e8 <gptp_handle_follow_up+0x2c>
		return -EINVAL;
	}

	GPTP_STATS_INC(port, rx_fup_count);

	return 0;
 800a4e4:	2000      	movs	r0, #0
}
 800a4e6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 800a4e8:	f06f 0015 	mvn.w	r0, #21
 800a4ec:	e7fb      	b.n	800a4e6 <gptp_handle_follow_up+0x2a>
 800a4ee:	bf00      	nop
 800a4f0:	20001470 	.word	0x20001470

0800a4f4 <gptp_handle_pdelay_resp>:

	gptp_send_pdelay_resp(port, reply, net_pkt_timestamp(pkt));
}

int gptp_handle_pdelay_resp(int port, struct net_pkt *pkt)
{
 800a4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f6:	4605      	mov	r5, r0
	struct gptp_port_ds *port_ds;
	struct net_eth_hdr *eth;
	struct gptp_hdr *hdr, *req_hdr;

	eth = NET_ETH_HDR(pkt);
	hdr = GPTP_HDR(pkt);
 800a4f8:	4608      	mov	r0, r1
 800a4fa:	f00e fe40 	bl	801917e <gptp_get_hdr>
 800a4fe:	4604      	mov	r4, r0
	resp = GPTP_PDELAY_RESP(pkt);
	state = &GPTP_PORT_STATE(port)->pdelay_req;
 800a500:	1e6b      	subs	r3, r5, #1
	port_ds = GPTP_PORT_DS(port);
	default_ds = GPTP_DEFAULT_DS();

	if (!state->tx_pdelay_req_ptr) {
 800a502:	4a1b      	ldr	r2, [pc, #108]	; (800a570 <gptp_handle_pdelay_resp+0x7c>)
 800a504:	f44f 715a 	mov.w	r1, #872	; 0x368
 800a508:	fb01 2303 	mla	r3, r1, r3, r2
 800a50c:	f8d3 0360 	ldr.w	r0, [r3, #864]	; 0x360
 800a510:	b1f8      	cbz	r0, 800a552 <gptp_handle_pdelay_resp+0x5e>
		goto reset;
	}

	req_hdr = GPTP_HDR(state->tx_pdelay_req_ptr);
 800a512:	f00e fe34 	bl	801917e <gptp_get_hdr>
 800a516:	4607      	mov	r7, r0

	/* Check clock identity. */
	if (memcmp(default_ds->clk_id, resp->requesting_port_id.clk_id,
 800a518:	2208      	movs	r2, #8
 800a51a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 800a51e:	4815      	ldr	r0, [pc, #84]	; (800a574 <gptp_handle_pdelay_resp+0x80>)
 800a520:	f012 f97c 	bl	801c81c <memcmp>
 800a524:	4606      	mov	r6, r0
 800a526:	b9b8      	cbnz	r0, 800a558 <gptp_handle_pdelay_resp+0x64>
		   GPTP_CLOCK_ID_LEN)) {
		NET_WARN("Requesting Clock Identity %s", "does not match");
		goto reset;
	}
	if (memcmp(default_ds->clk_id, hdr->port_id.clk_id,
 800a528:	2208      	movs	r2, #8
 800a52a:	f104 0114 	add.w	r1, r4, #20
 800a52e:	4811      	ldr	r0, [pc, #68]	; (800a574 <gptp_handle_pdelay_resp+0x80>)
 800a530:	f012 f974 	bl	801c81c <memcmp>
 800a534:	b198      	cbz	r0, 800a55e <gptp_handle_pdelay_resp+0x6a>
		NET_WARN("Source Clock Identity is local Clock Identity");
		goto reset;
	}

	/* Check port number. */
	if (resp->requesting_port_id.port_number != htons(port)) {
 800a536:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800a538:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800a53c:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
 800a540:	b2ad      	uxth	r5, r5
 800a542:	42aa      	cmp	r2, r5
 800a544:	d10e      	bne.n	800a564 <gptp_handle_pdelay_resp+0x70>
		NET_WARN("Requesting Port Number %s", "does not match");
		goto reset;
	}

	/* Check sequence id. */
	if (hdr->sequence_id != req_hdr->sequence_id) {
 800a546:	8be2      	ldrh	r2, [r4, #30]
 800a548:	8bfb      	ldrh	r3, [r7, #30]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d10d      	bne.n	800a56a <gptp_handle_pdelay_resp+0x76>

	return 0;

reset:
	return -EINVAL;
}
 800a54e:	4630      	mov	r0, r6
 800a550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return -EINVAL;
 800a552:	f06f 0615 	mvn.w	r6, #21
 800a556:	e7fa      	b.n	800a54e <gptp_handle_pdelay_resp+0x5a>
 800a558:	f06f 0615 	mvn.w	r6, #21
 800a55c:	e7f7      	b.n	800a54e <gptp_handle_pdelay_resp+0x5a>
 800a55e:	f06f 0615 	mvn.w	r6, #21
 800a562:	e7f4      	b.n	800a54e <gptp_handle_pdelay_resp+0x5a>
 800a564:	f06f 0615 	mvn.w	r6, #21
 800a568:	e7f1      	b.n	800a54e <gptp_handle_pdelay_resp+0x5a>
 800a56a:	f06f 0615 	mvn.w	r6, #21
 800a56e:	e7ee      	b.n	800a54e <gptp_handle_pdelay_resp+0x5a>
 800a570:	20001470 	.word	0x20001470
 800a574:	2000158d 	.word	0x2000158d

0800a578 <gptp_handle_pdelay_follow_up>:

int gptp_handle_pdelay_follow_up(int port, struct net_pkt *pkt)
{
 800a578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57a:	4605      	mov	r5, r0
	struct gptp_default_ds *default_ds;
	struct gptp_port_ds *port_ds;
	struct net_eth_hdr *eth;

	eth = NET_ETH_HDR(pkt);
	hdr = GPTP_HDR(pkt);
 800a57c:	4608      	mov	r0, r1
 800a57e:	f00e fdfe 	bl	801917e <gptp_get_hdr>
 800a582:	4604      	mov	r4, r0
	follow_up = GPTP_PDELAY_RESP_FOLLOWUP(pkt);
	state = &GPTP_PORT_STATE(port)->pdelay_req;
 800a584:	1e6e      	subs	r6, r5, #1
	port_ds = GPTP_PORT_DS(port);
	default_ds = GPTP_DEFAULT_DS();

	if (!state->tx_pdelay_req_ptr) {
 800a586:	4a27      	ldr	r2, [pc, #156]	; (800a624 <gptp_handle_pdelay_follow_up+0xac>)
 800a588:	f44f 735a 	mov.w	r3, #872	; 0x368
 800a58c:	fb03 2306 	mla	r3, r3, r6, r2
 800a590:	f8d3 0360 	ldr.w	r0, [r3, #864]	; 0x360
 800a594:	b380      	cbz	r0, 800a5f8 <gptp_handle_pdelay_follow_up+0x80>
		goto reset;
	}

	req_hdr = GPTP_HDR(state->tx_pdelay_req_ptr);
 800a596:	f00e fdf2 	bl	801917e <gptp_get_hdr>
 800a59a:	4607      	mov	r7, r0

	if (!state->rcvd_pdelay_resp_ptr) {
 800a59c:	4b21      	ldr	r3, [pc, #132]	; (800a624 <gptp_handle_pdelay_follow_up+0xac>)
 800a59e:	f44f 725a 	mov.w	r2, #872	; 0x368
 800a5a2:	fb02 3606 	mla	r6, r2, r6, r3
 800a5a6:	f8d6 0358 	ldr.w	r0, [r6, #856]	; 0x358
 800a5aa:	b340      	cbz	r0, 800a5fe <gptp_handle_pdelay_follow_up+0x86>
		goto reset;
	}

	resp_hdr = GPTP_HDR(state->rcvd_pdelay_resp_ptr);
 800a5ac:	f00e fde7 	bl	801917e <gptp_get_hdr>
 800a5b0:	4606      	mov	r6, r0

	/* Check clock identity. */
	if (memcmp(default_ds->clk_id, follow_up->requesting_port_id.clk_id,
 800a5b2:	2208      	movs	r2, #8
 800a5b4:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 800a5b8:	481b      	ldr	r0, [pc, #108]	; (800a628 <gptp_handle_pdelay_follow_up+0xb0>)
 800a5ba:	f012 f92f 	bl	801c81c <memcmp>
 800a5be:	bb08      	cbnz	r0, 800a604 <gptp_handle_pdelay_follow_up+0x8c>
		   GPTP_CLOCK_ID_LEN)) {
		NET_WARN("Requesting Clock Identity %s", "does not match");
		goto reset;
	}

	if (memcmp(default_ds->clk_id, hdr->port_id.clk_id,
 800a5c0:	2208      	movs	r2, #8
 800a5c2:	f104 0114 	add.w	r1, r4, #20
 800a5c6:	4818      	ldr	r0, [pc, #96]	; (800a628 <gptp_handle_pdelay_follow_up+0xb0>)
 800a5c8:	f012 f928 	bl	801c81c <memcmp>
 800a5cc:	b1e8      	cbz	r0, 800a60a <gptp_handle_pdelay_follow_up+0x92>
		NET_WARN("Source Clock Identity is local Clock Identity");
		goto reset;
	}

	/* Check port number. */
	if (follow_up->requesting_port_id.port_number != htons(port)) {
 800a5ce:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800a5d0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800a5d4:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
 800a5d8:	b2ad      	uxth	r5, r5
 800a5da:	42aa      	cmp	r2, r5
 800a5dc:	d118      	bne.n	800a610 <gptp_handle_pdelay_follow_up+0x98>
		NET_WARN("Requesting Port Number %s", "does not match");
		goto reset;
	}

	/* Check sequence id. */
	if (hdr->sequence_id != req_hdr->sequence_id) {
 800a5de:	8be2      	ldrh	r2, [r4, #30]
 800a5e0:	8bfb      	ldrh	r3, [r7, #30]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d117      	bne.n	800a616 <gptp_handle_pdelay_follow_up+0x9e>
			 ntohs(req_hdr->sequence_id));
		goto reset;
	}

	/* Check source port. */
	if (memcmp(&hdr->port_id, &resp_hdr->port_id,
 800a5e6:	220a      	movs	r2, #10
 800a5e8:	f106 0114 	add.w	r1, r6, #20
 800a5ec:	f104 0014 	add.w	r0, r4, #20
 800a5f0:	f012 f914 	bl	801c81c <memcmp>
 800a5f4:	b990      	cbnz	r0, 800a61c <gptp_handle_pdelay_follow_up+0xa4>

	return 0;

reset:
	return -EINVAL;
}
 800a5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return -EINVAL;
 800a5f8:	f06f 0015 	mvn.w	r0, #21
 800a5fc:	e7fb      	b.n	800a5f6 <gptp_handle_pdelay_follow_up+0x7e>
 800a5fe:	f06f 0015 	mvn.w	r0, #21
 800a602:	e7f8      	b.n	800a5f6 <gptp_handle_pdelay_follow_up+0x7e>
 800a604:	f06f 0015 	mvn.w	r0, #21
 800a608:	e7f5      	b.n	800a5f6 <gptp_handle_pdelay_follow_up+0x7e>
 800a60a:	f06f 0015 	mvn.w	r0, #21
 800a60e:	e7f2      	b.n	800a5f6 <gptp_handle_pdelay_follow_up+0x7e>
 800a610:	f06f 0015 	mvn.w	r0, #21
 800a614:	e7ef      	b.n	800a5f6 <gptp_handle_pdelay_follow_up+0x7e>
 800a616:	f06f 0015 	mvn.w	r0, #21
 800a61a:	e7ec      	b.n	800a5f6 <gptp_handle_pdelay_follow_up+0x7e>
 800a61c:	f06f 0015 	mvn.w	r0, #21
 800a620:	e7e9      	b.n	800a5f6 <gptp_handle_pdelay_follow_up+0x7e>
 800a622:	bf00      	nop
 800a624:	20001470 	.word	0x20001470
 800a628:	2000158d 	.word	0x2000158d

0800a62c <gptp_handle_signaling>:

void gptp_handle_signaling(int port, struct net_pkt *pkt)
{
 800a62c:	b570      	push	{r4, r5, r6, lr}
 800a62e:	4605      	mov	r5, r0
 800a630:	4608      	mov	r0, r1
 800a632:	f00e fda4 	bl	801917e <gptp_get_hdr>
	struct gptp_port_ds *port_ds;
	struct gptp_signaling *sig;

	sig = GPTP_SIGNALING(pkt);
	port_ds = GPTP_PORT_DS(port);
 800a636:	1e6c      	subs	r4, r5, #1

	/* If time-synchronization not enabled, drop packet. */
	if (!port_ds->ptt_port_enabled) {
 800a638:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a63c:	4b19      	ldr	r3, [pc, #100]	; (800a6a4 <gptp_handle_signaling+0x78>)
 800a63e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a642:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 800a646:	f013 0f01 	tst.w	r3, #1
 800a64a:	d100      	bne.n	800a64e <gptp_handle_signaling+0x22>

	port_ds->compute_neighbor_rate_ratio =
		sig->tlv.compute_neighbor_rate_ratio;
	port_ds->compute_neighbor_prop_delay =
		sig->tlv.compute_neighbor_prop_delay;
}
 800a64c:	bd70      	pop	{r4, r5, r6, pc}
 800a64e:	4606      	mov	r6, r0
	gptp_update_pdelay_req_interval(port, sig->tlv.link_delay_itv);
 800a650:	f990 1036 	ldrsb.w	r1, [r0, #54]	; 0x36
 800a654:	4628      	mov	r0, r5
 800a656:	f7fe f8f9 	bl	800884c <gptp_update_pdelay_req_interval>
	gptp_update_sync_interval(port, sig->tlv.time_sync_itv);
 800a65a:	f996 1037 	ldrsb.w	r1, [r6, #55]	; 0x37
 800a65e:	4628      	mov	r0, r5
 800a660:	f7fe f942 	bl	80088e8 <gptp_update_sync_interval>
	gptp_update_announce_interval(port, sig->tlv.announce_itv);
 800a664:	f996 1038 	ldrsb.w	r1, [r6, #56]	; 0x38
 800a668:	4628      	mov	r0, r5
 800a66a:	f7fe f9c5 	bl	80089f8 <gptp_update_announce_interval>
		sig->tlv.compute_neighbor_rate_ratio;
 800a66e:	f896 0039 	ldrb.w	r0, [r6, #57]	; 0x39
	port_ds->compute_neighbor_rate_ratio =
 800a672:	4b0c      	ldr	r3, [pc, #48]	; (800a6a4 <gptp_handle_signaling+0x78>)
 800a674:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800a678:	eb03 1242 	add.w	r2, r3, r2, lsl #5
 800a67c:	f892 130d 	ldrb.w	r1, [r2, #781]	; 0x30d
 800a680:	f360 1104 	bfi	r1, r0, #4, #1
 800a684:	f882 130d 	strb.w	r1, [r2, #781]	; 0x30d
		sig->tlv.compute_neighbor_prop_delay;
 800a688:	f896 2039 	ldrb.w	r2, [r6, #57]	; 0x39
 800a68c:	f3c2 0240 	ubfx	r2, r2, #1, #1
	port_ds->compute_neighbor_prop_delay =
 800a690:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a694:	eb03 1444 	add.w	r4, r3, r4, lsl #5
 800a698:	b2cb      	uxtb	r3, r1
 800a69a:	f362 1345 	bfi	r3, r2, #5, #1
 800a69e:	f884 330d 	strb.w	r3, [r4, #781]	; 0x30d
 800a6a2:	e7d3      	b.n	800a64c <gptp_handle_signaling+0x20>
 800a6a4:	20001470 	.word	0x20001470

0800a6a8 <gptp_send_sync>:

void gptp_send_sync(int port, struct net_pkt *pkt)
{
 800a6a8:	b510      	push	{r4, lr}
 800a6aa:	460c      	mov	r4, r1
	if (!sync_cb_registered) {
 800a6ac:	4b09      	ldr	r3, [pc, #36]	; (800a6d4 <gptp_send_sync+0x2c>)
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	b13b      	cbz	r3, 800a6c2 <gptp_send_sync+0x1a>
	/* TS thread will send this back to us so increment ref count
	 * so that the packet is not removed when sending it.
	 * This will be unref'ed by timestamp callback in
	 * gptp_sync_timestamp_callback()
	 */
	net_pkt_ref(pkt);
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f00f fe48 	bl	801a348 <net_pkt_ref>

	NET_GPTP_INFO("SYNC", pkt);

	net_if_queue_tx(net_pkt_iface(pkt), pkt);
 800a6b8:	4621      	mov	r1, r4
 800a6ba:	69a0      	ldr	r0, [r4, #24]
 800a6bc:	f002 fe7a 	bl	800d3b4 <net_if_queue_tx>
}
 800a6c0:	bd10      	pop	{r4, pc}
		net_if_register_timestamp_cb(&sync_timestamp_cb,
 800a6c2:	4b05      	ldr	r3, [pc, #20]	; (800a6d8 <gptp_send_sync+0x30>)
 800a6c4:	698a      	ldr	r2, [r1, #24]
 800a6c6:	4805      	ldr	r0, [pc, #20]	; (800a6dc <gptp_send_sync+0x34>)
 800a6c8:	f004 fd5e 	bl	800f188 <net_if_register_timestamp_cb>
		sync_cb_registered = true;
 800a6cc:	4b01      	ldr	r3, [pc, #4]	; (800a6d4 <gptp_send_sync+0x2c>)
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	701a      	strb	r2, [r3, #0]
 800a6d2:	e7ee      	b.n	800a6b2 <gptp_send_sync+0xa>
 800a6d4:	20003c76 	.word	0x20003c76
 800a6d8:	08009e7d 	.word	0x08009e7d
 800a6dc:	2000316c 	.word	0x2000316c

0800a6e0 <gptp_send_pdelay_req>:

	net_if_queue_tx(net_pkt_iface(pkt), pkt);
}

void gptp_send_pdelay_req(int port)
{
 800a6e0:	b538      	push	{r3, r4, r5, lr}
	struct gptp_pdelay_req_state *state;
	struct gptp_port_ds *port_ds;
	struct net_pkt *pkt;

	NET_ASSERT((port >= GPTP_PORT_START) && (port <= GPTP_PORT_END));
	state = &GPTP_PORT_STATE(port)->pdelay_req;
 800a6e2:	1e44      	subs	r4, r0, #1
	port_ds = GPTP_PORT_DS(port);

	pkt = gptp_prepare_pdelay_req(port);
 800a6e4:	f7ff fc9c 	bl	800a020 <gptp_prepare_pdelay_req>
	if (pkt) {
 800a6e8:	b1c0      	cbz	r0, 800a71c <gptp_send_pdelay_req+0x3c>
 800a6ea:	4605      	mov	r5, r0
		if (state->tx_pdelay_req_ptr) {
 800a6ec:	4a0c      	ldr	r2, [pc, #48]	; (800a720 <gptp_send_pdelay_req+0x40>)
 800a6ee:	f44f 735a 	mov.w	r3, #872	; 0x368
 800a6f2:	fb03 2304 	mla	r3, r3, r4, r2
 800a6f6:	f8d3 0360 	ldr.w	r0, [r3, #864]	; 0x360
 800a6fa:	b108      	cbz	r0, 800a700 <gptp_send_pdelay_req+0x20>
			NET_DBG("Unref pending %s %p", "PDELAY_REQ",
				state->tx_pdelay_req_ptr);

			net_pkt_unref(state->tx_pdelay_req_ptr);
 800a6fc:	f00f fe4c 	bl	801a398 <net_pkt_unref>
		}

		/* Keep the buffer alive until pdelay_rate_ratio is computed. */
		state->tx_pdelay_req_ptr = net_pkt_ref(pkt);
 800a700:	4628      	mov	r0, r5
 800a702:	f00f fe21 	bl	801a348 <net_pkt_ref>
 800a706:	4b06      	ldr	r3, [pc, #24]	; (800a720 <gptp_send_pdelay_req+0x40>)
 800a708:	f44f 725a 	mov.w	r2, #872	; 0x368
 800a70c:	fb02 3404 	mla	r4, r2, r4, r3
 800a710:	f8c4 0360 	str.w	r0, [r4, #864]	; 0x360

		GPTP_STATS_INC(port, tx_pdelay_req_count);

		NET_GPTP_INFO("PDELAY_REQ", pkt);

		net_if_queue_tx(net_pkt_iface(pkt), pkt);
 800a714:	4629      	mov	r1, r5
 800a716:	69a8      	ldr	r0, [r5, #24]
 800a718:	f002 fe4c 	bl	800d3b4 <net_if_queue_tx>
	} else {
		NET_ERR("Failed to prepare %s", "PDELAY_REQ");
	}
}
 800a71c:	bd38      	pop	{r3, r4, r5, pc}
 800a71e:	bf00      	nop
 800a720:	20001470 	.word	0x20001470

0800a724 <gptp_handle_pdelay_req>:
{
 800a724:	b570      	push	{r4, r5, r6, lr}
 800a726:	4606      	mov	r6, r0
 800a728:	460c      	mov	r4, r1
	if (ts_cb_registered == true) {
 800a72a:	4b13      	ldr	r3, [pc, #76]	; (800a778 <gptp_handle_pdelay_req+0x54>)
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	b9c3      	cbnz	r3, 800a762 <gptp_handle_pdelay_req+0x3e>
	reply = gptp_prepare_pdelay_resp(port, pkt);
 800a730:	4621      	mov	r1, r4
 800a732:	4630      	mov	r0, r6
 800a734:	f7ff fce2 	bl	800a0fc <gptp_prepare_pdelay_resp>
	if (!reply) {
 800a738:	4605      	mov	r5, r0
 800a73a:	b188      	cbz	r0, 800a760 <gptp_handle_pdelay_req+0x3c>
	net_if_register_timestamp_cb(&pdelay_response_timestamp_cb,
 800a73c:	4b0f      	ldr	r3, [pc, #60]	; (800a77c <gptp_handle_pdelay_req+0x58>)
 800a73e:	69a2      	ldr	r2, [r4, #24]
 800a740:	4601      	mov	r1, r0
 800a742:	480f      	ldr	r0, [pc, #60]	; (800a780 <gptp_handle_pdelay_req+0x5c>)
 800a744:	f004 fd20 	bl	800f188 <net_if_register_timestamp_cb>
	net_pkt_ref(reply);
 800a748:	4628      	mov	r0, r5
 800a74a:	f00f fdfd 	bl	801a348 <net_pkt_ref>
	ts_cb_registered = true;
 800a74e:	4b0a      	ldr	r3, [pc, #40]	; (800a778 <gptp_handle_pdelay_req+0x54>)
 800a750:	2201      	movs	r2, #1
 800a752:	701a      	strb	r2, [r3, #0]
	gptp_send_pdelay_resp(port, reply, net_pkt_timestamp(pkt));
 800a754:	f104 0220 	add.w	r2, r4, #32
 800a758:	4629      	mov	r1, r5
 800a75a:	4630      	mov	r0, r6
 800a75c:	f00e fd25 	bl	80191aa <gptp_send_pdelay_resp>
}
 800a760:	bd70      	pop	{r4, r5, r6, pc}
		net_if_unregister_timestamp_cb(&pdelay_response_timestamp_cb);
 800a762:	4d07      	ldr	r5, [pc, #28]	; (800a780 <gptp_handle_pdelay_req+0x5c>)
 800a764:	4628      	mov	r0, r5
 800a766:	f004 fd53 	bl	800f210 <net_if_unregister_timestamp_cb>
		net_pkt_unref(pdelay_response_timestamp_cb.pkt);
 800a76a:	6868      	ldr	r0, [r5, #4]
 800a76c:	f00f fe14 	bl	801a398 <net_pkt_unref>
		ts_cb_registered = false;
 800a770:	4b01      	ldr	r3, [pc, #4]	; (800a778 <gptp_handle_pdelay_req+0x54>)
 800a772:	2200      	movs	r2, #0
 800a774:	701a      	strb	r2, [r3, #0]
 800a776:	e7db      	b.n	800a730 <gptp_handle_pdelay_req+0xc>
 800a778:	20003c77 	.word	0x20003c77
 800a77c:	0800a785 	.word	0x0800a785
 800a780:	2000315c 	.word	0x2000315c

0800a784 <gptp_pdelay_response_timestamp_callback>:
{
 800a784:	b570      	push	{r4, r5, r6, lr}
 800a786:	4604      	mov	r4, r0
	port = gptp_get_port_number(net_pkt_iface(pkt));
 800a788:	6980      	ldr	r0, [r0, #24]
 800a78a:	f7fd fd8d 	bl	80082a8 <gptp_get_port_number>
	if (port == -ENODEV) {
 800a78e:	f110 0f13 	cmn.w	r0, #19
 800a792:	d01b      	beq.n	800a7cc <gptp_pdelay_response_timestamp_callback+0x48>
 800a794:	4605      	mov	r5, r0
	hdr = GPTP_HDR(pkt);
 800a796:	4620      	mov	r0, r4
 800a798:	f00e fcf1 	bl	801917e <gptp_get_hdr>
	if (hdr->message_type == GPTP_PATH_DELAY_RESP_MESSAGE) {
 800a79c:	7803      	ldrb	r3, [r0, #0]
 800a79e:	f003 030f 	and.w	r3, r3, #15
 800a7a2:	2b03      	cmp	r3, #3
 800a7a4:	d000      	beq.n	800a7a8 <gptp_pdelay_response_timestamp_callback+0x24>
}
 800a7a6:	bd70      	pop	{r4, r5, r6, pc}
		follow_up = gptp_prepare_pdelay_follow_up(port, pkt);
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	4628      	mov	r0, r5
 800a7ac:	f7ff fd1c 	bl	800a1e8 <gptp_prepare_pdelay_follow_up>
		if (!follow_up) {
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	b158      	cbz	r0, 800a7cc <gptp_pdelay_response_timestamp_callback+0x48>
		net_if_unregister_timestamp_cb(&pdelay_response_timestamp_cb);
 800a7b4:	4807      	ldr	r0, [pc, #28]	; (800a7d4 <gptp_pdelay_response_timestamp_callback+0x50>)
 800a7b6:	f004 fd2b 	bl	800f210 <net_if_unregister_timestamp_cb>
		ts_cb_registered = false;
 800a7ba:	4b07      	ldr	r3, [pc, #28]	; (800a7d8 <gptp_pdelay_response_timestamp_callback+0x54>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	701a      	strb	r2, [r3, #0]
		gptp_send_pdelay_follow_up(port, follow_up,
 800a7c0:	f104 0220 	add.w	r2, r4, #32
 800a7c4:	4631      	mov	r1, r6
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	f00e fd25 	bl	8019216 <gptp_send_pdelay_follow_up>
		net_pkt_unref(pkt);
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	f00f fde3 	bl	801a398 <net_pkt_unref>
}
 800a7d2:	e7e8      	b.n	800a7a6 <gptp_pdelay_response_timestamp_callback+0x22>
 800a7d4:	2000315c 	.word	0x2000315c
 800a7d8:	20003c77 	.word	0x20003c77

0800a7dc <gptp_mi_rcv_sync_receipt_timeout>:
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800a7dc:	2201      	movs	r2, #1
 800a7de:	4b12      	ldr	r3, [pc, #72]	; (800a828 <gptp_mi_rcv_sync_receipt_timeout+0x4c>)
 800a7e0:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	da09      	bge.n	800a7fc <gptp_mi_rcv_sync_receipt_timeout+0x20>
 800a7e8:	4770      	bx	lr
			state->rcv_sync_receipt_timeout_timer_expired = true;
 800a7ea:	4623      	mov	r3, r4
 800a7ec:	f44f 745a 	mov.w	r4, #872	; 0x368
 800a7f0:	fb04 3101 	mla	r1, r4, r1, r3
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	f881 34ca 	strb.w	r3, [r1, #1226]	; 0x4ca
 800a7fa:	e00b      	b.n	800a814 <gptp_mi_rcv_sync_receipt_timeout+0x38>
{
 800a7fc:	b410      	push	{r4}
		state = &GPTP_PORT_STATE(port)->pss_rcv;
 800a7fe:	1e51      	subs	r1, r2, #1
		if (&state->rcv_sync_receipt_timeout_timer == timer) {
 800a800:	f44f 735a 	mov.w	r3, #872	; 0x368
 800a804:	fb03 f301 	mul.w	r3, r3, r1
 800a808:	f503 6391 	add.w	r3, r3, #1160	; 0x488
 800a80c:	4c06      	ldr	r4, [pc, #24]	; (800a828 <gptp_mi_rcv_sync_receipt_timeout+0x4c>)
 800a80e:	4423      	add	r3, r4
 800a810:	4283      	cmp	r3, r0
 800a812:	d0ea      	beq.n	800a7ea <gptp_mi_rcv_sync_receipt_timeout+0xe>
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800a814:	3201      	adds	r2, #1
 800a816:	4b04      	ldr	r3, [pc, #16]	; (800a828 <gptp_mi_rcv_sync_receipt_timeout+0x4c>)
 800a818:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800a81c:	4293      	cmp	r3, r2
 800a81e:	daee      	bge.n	800a7fe <gptp_mi_rcv_sync_receipt_timeout+0x22>
}
 800a820:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	20001470 	.word	0x20001470

0800a82c <gptp_mi_send_sync_receipt_timeout>:
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800a82c:	2201      	movs	r2, #1
 800a82e:	4b12      	ldr	r3, [pc, #72]	; (800a878 <gptp_mi_send_sync_receipt_timeout+0x4c>)
 800a830:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800a834:	4293      	cmp	r3, r2
 800a836:	da09      	bge.n	800a84c <gptp_mi_send_sync_receipt_timeout+0x20>
 800a838:	4770      	bx	lr
			state->send_sync_receipt_timeout_timer_expired = true;
 800a83a:	4623      	mov	r3, r4
 800a83c:	f44f 745a 	mov.w	r4, #872	; 0x368
 800a840:	fb04 3101 	mla	r1, r4, r1, r3
 800a844:	2301      	movs	r3, #1
 800a846:	f881 35ed 	strb.w	r3, [r1, #1517]	; 0x5ed
 800a84a:	e00b      	b.n	800a864 <gptp_mi_send_sync_receipt_timeout+0x38>
{
 800a84c:	b410      	push	{r4}
		state = &GPTP_PORT_STATE(port)->pss_send;
 800a84e:	1e51      	subs	r1, r2, #1
		if (&state->send_sync_receipt_timeout_timer == timer) {
 800a850:	f44f 735a 	mov.w	r3, #872	; 0x368
 800a854:	fb03 f301 	mul.w	r3, r3, r1
 800a858:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 800a85c:	4c06      	ldr	r4, [pc, #24]	; (800a878 <gptp_mi_send_sync_receipt_timeout+0x4c>)
 800a85e:	4423      	add	r3, r4
 800a860:	4283      	cmp	r3, r0
 800a862:	d0ea      	beq.n	800a83a <gptp_mi_send_sync_receipt_timeout+0xe>
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800a864:	3201      	adds	r2, #1
 800a866:	4b04      	ldr	r3, [pc, #16]	; (800a878 <gptp_mi_send_sync_receipt_timeout+0x4c>)
 800a868:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800a86c:	4293      	cmp	r3, r2
 800a86e:	daee      	bge.n	800a84e <gptp_mi_send_sync_receipt_timeout+0x22>
}
 800a870:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	20001470 	.word	0x20001470

0800a87c <announce_timer_handler>:
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800a87c:	2201      	movs	r2, #1
 800a87e:	4b11      	ldr	r3, [pc, #68]	; (800a8c4 <announce_timer_handler+0x48>)
 800a880:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800a884:	4293      	cmp	r3, r2
 800a886:	db1c      	blt.n	800a8c2 <announce_timer_handler+0x46>
{
 800a888:	b410      	push	{r4}
		state = &GPTP_PORT_STATE(port)->pa_info;
 800a88a:	1e51      	subs	r1, r2, #1
		if (&state->ann_rcpt_expiry_timer == timer) {
 800a88c:	f44f 735a 	mov.w	r3, #872	; 0x368
 800a890:	fb03 f301 	mul.w	r3, r3, r1
 800a894:	f503 63be 	add.w	r3, r3, #1520	; 0x5f0
 800a898:	4c0a      	ldr	r4, [pc, #40]	; (800a8c4 <announce_timer_handler+0x48>)
 800a89a:	4423      	add	r3, r4
 800a89c:	4283      	cmp	r3, r0
 800a89e:	d006      	beq.n	800a8ae <announce_timer_handler+0x32>
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800a8a0:	3201      	adds	r2, #1
 800a8a2:	4b08      	ldr	r3, [pc, #32]	; (800a8c4 <announce_timer_handler+0x48>)
 800a8a4:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	daee      	bge.n	800a88a <announce_timer_handler+0xe>
 800a8ac:	e006      	b.n	800a8bc <announce_timer_handler+0x40>
			state->ann_expired = true;
 800a8ae:	f44f 725a 	mov.w	r2, #872	; 0x368
 800a8b2:	fb02 4101 	mla	r1, r2, r1, r4
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	f881 3629 	strb.w	r3, [r1, #1577]	; 0x629
}
 800a8bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8c0:	4770      	bx	lr
 800a8c2:	4770      	bx	lr
 800a8c4:	20001470 	.word	0x20001470

0800a8c8 <announce_periodic_timer_handler>:
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	4b11      	ldr	r3, [pc, #68]	; (800a910 <announce_periodic_timer_handler+0x48>)
 800a8cc:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	db1c      	blt.n	800a90e <announce_periodic_timer_handler+0x46>
{
 800a8d4:	b410      	push	{r4}
		state = &GPTP_PORT_STATE(port)->pa_transmit;
 800a8d6:	1e51      	subs	r1, r2, #1
		if (&state->ann_send_periodic_timer == timer) {
 800a8d8:	f44f 735a 	mov.w	r3, #872	; 0x368
 800a8dc:	fb03 f301 	mul.w	r3, r3, r1
 800a8e0:	f503 63c6 	add.w	r3, r3, #1584	; 0x630
 800a8e4:	4c0a      	ldr	r4, [pc, #40]	; (800a910 <announce_periodic_timer_handler+0x48>)
 800a8e6:	4423      	add	r3, r4
 800a8e8:	4283      	cmp	r3, r0
 800a8ea:	d006      	beq.n	800a8fa <announce_periodic_timer_handler+0x32>
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800a8ec:	3201      	adds	r2, #1
 800a8ee:	4b08      	ldr	r3, [pc, #32]	; (800a910 <announce_periodic_timer_handler+0x48>)
 800a8f0:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	daee      	bge.n	800a8d6 <announce_periodic_timer_handler+0xe>
 800a8f8:	e006      	b.n	800a908 <announce_periodic_timer_handler+0x40>
			state->ann_trigger = true;
 800a8fa:	f44f 725a 	mov.w	r2, #872	; 0x368
 800a8fe:	fb02 4101 	mla	r1, r2, r1, r4
 800a902:	2301      	movs	r3, #1
 800a904:	f881 3669 	strb.w	r3, [r1, #1641]	; 0x669
}
 800a908:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a90c:	4770      	bx	lr
 800a90e:	4770      	bx	lr
 800a910:	20001470 	.word	0x20001470

0800a914 <gptp_mi_init_port_role_selection_sm>:
	GPTP_STATE()->pr_sel.state = GPTP_PR_SELECTION_INIT_BRIDGE;
 800a914:	4b02      	ldr	r3, [pc, #8]	; (800a920 <gptp_mi_init_port_role_selection_sm+0xc>)
 800a916:	2200      	movs	r2, #0
 800a918:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
}
 800a91c:	4770      	bx	lr
 800a91e:	bf00      	nop
 800a920:	20001470 	.word	0x20001470

0800a924 <gptp_mi_site_ss_send_to_pss>:
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800a924:	2301      	movs	r3, #1
 800a926:	4a0a      	ldr	r2, [pc, #40]	; (800a950 <gptp_mi_site_ss_send_to_pss+0x2c>)
 800a928:	f892 212b 	ldrb.w	r2, [r2, #299]	; 0x12b
 800a92c:	429a      	cmp	r2, r3
 800a92e:	da00      	bge.n	800a932 <gptp_mi_site_ss_send_to_pss+0xe>
}
 800a930:	4770      	bx	lr
		pss_send = &GPTP_PORT_STATE(port)->pss_send;
 800a932:	1e5a      	subs	r2, r3, #1
		pss_send->pss_sync_ptr = &state->pss_send;
 800a934:	4906      	ldr	r1, [pc, #24]	; (800a950 <gptp_mi_site_ss_send_to_pss+0x2c>)
 800a936:	f44f 705a 	mov.w	r0, #872	; 0x368
 800a93a:	fb00 1202 	mla	r2, r0, r2, r1
 800a93e:	f501 71c8 	add.w	r1, r1, #400	; 0x190
 800a942:	f8c2 1570 	str.w	r1, [r2, #1392]	; 0x570
		pss_send->rcvd_pss_sync = true;
 800a946:	2101      	movs	r1, #1
 800a948:	f882 15e0 	strb.w	r1, [r2, #1504]	; 0x5e0
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800a94c:	440b      	add	r3, r1
 800a94e:	e7ea      	b.n	800a926 <gptp_mi_site_ss_send_to_pss+0x2>
 800a950:	20001470 	.word	0x20001470

0800a954 <gptp_clear_reselect_tree>:
}

static void gptp_clear_reselect_tree(void)
{
	/* Set all the elements of the reselect array to FALSE. */
	GPTP_GLOBAL_DS()->reselect_array = 0;
 800a954:	4b02      	ldr	r3, [pc, #8]	; (800a960 <gptp_clear_reselect_tree+0xc>)
 800a956:	2200      	movs	r2, #0
 800a958:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	20001470 	.word	0x20001470

0800a964 <gptp_set_selected_tree>:
}

static void gptp_set_selected_tree(void)
{
	/* Set all the elements of the selected array to TRUE. */
	GPTP_GLOBAL_DS()->selected_array = ~0;
 800a964:	4b02      	ldr	r3, [pc, #8]	; (800a970 <gptp_set_selected_tree+0xc>)
 800a966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a96a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
 800a96e:	4770      	bx	lr
 800a970:	20001470 	.word	0x20001470

0800a974 <gptp_mi_init_port_announce_rcv_sm>:
	pa_rcv = &GPTP_PORT_STATE(port)->pa_rcv;
 800a974:	3801      	subs	r0, #1
 800a976:	f44f 735a 	mov.w	r3, #872	; 0x368
 800a97a:	fb03 f000 	mul.w	r0, r3, r0
 800a97e:	f500 62ce 	add.w	r2, r0, #1648	; 0x670
 800a982:	4b04      	ldr	r3, [pc, #16]	; (800a994 <gptp_mi_init_port_announce_rcv_sm+0x20>)
 800a984:	441a      	add	r2, r3
__ssp_bos_icheck3(memset, void *, int)
 800a986:	2100      	movs	r1, #0
 800a988:	f8a2 1001 	strh.w	r1, [r2, #1]
	pa_rcv->state = GPTP_PA_RCV_DISCARD;
 800a98c:	4403      	add	r3, r0
 800a98e:	f883 1671 	strb.w	r1, [r3, #1649]	; 0x671
}
 800a992:	4770      	bx	lr
 800a994:	20001470 	.word	0x20001470

0800a998 <gptp_mi_init_port_sync_sync_rcv_sm>:
{
 800a998:	b538      	push	{r3, r4, r5, lr}
	pss_rcv = &GPTP_PORT_STATE(port)->pss_rcv;
 800a99a:	1e45      	subs	r5, r0, #1
 800a99c:	f44f 745a 	mov.w	r4, #872	; 0x368
 800a9a0:	fb04 f505 	mul.w	r5, r4, r5
 800a9a4:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 800a9a8:	4c08      	ldr	r4, [pc, #32]	; (800a9cc <gptp_mi_init_port_sync_sync_rcv_sm+0x34>)
 800a9aa:	22f8      	movs	r2, #248	; 0xf8
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	4420      	add	r0, r4
 800a9b0:	f011 ff63 	bl	801c87a <memset>
	k_timer_init(&pss_rcv->rcv_sync_receipt_timeout_timer,
 800a9b4:	f505 6091 	add.w	r0, r5, #1160	; 0x488
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	4905      	ldr	r1, [pc, #20]	; (800a9d0 <gptp_mi_init_port_sync_sync_rcv_sm+0x38>)
 800a9bc:	4420      	add	r0, r4
 800a9be:	f011 fe57 	bl	801c670 <k_timer_init>
	pss_rcv->state = GPTP_PSS_RCV_DISCARD;
 800a9c2:	442c      	add	r4, r5
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	f884 34c8 	strb.w	r3, [r4, #1224]	; 0x4c8
}
 800a9ca:	bd38      	pop	{r3, r4, r5, pc}
 800a9cc:	20001470 	.word	0x20001470
 800a9d0:	0800a7dd 	.word	0x0800a7dd

0800a9d4 <gptp_mi_init_port_sync_sync_send_sm>:
{
 800a9d4:	b538      	push	{r3, r4, r5, lr}
	pss_send = &GPTP_PORT_STATE(port)->pss_send;
 800a9d6:	1e45      	subs	r5, r0, #1
 800a9d8:	f44f 745a 	mov.w	r4, #872	; 0x368
 800a9dc:	fb04 f505 	mul.w	r5, r4, r5
 800a9e0:	f505 609a 	add.w	r0, r5, #1232	; 0x4d0
 800a9e4:	4c0c      	ldr	r4, [pc, #48]	; (800aa18 <gptp_mi_init_port_sync_sync_send_sm+0x44>)
 800a9e6:	f44f 7290 	mov.w	r2, #288	; 0x120
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	4420      	add	r0, r4
 800a9ee:	f011 ff44 	bl	801c87a <memset>
	k_timer_init(&pss_send->half_sync_itv_timer,
 800a9f2:	f505 609c 	add.w	r0, r5, #1248	; 0x4e0
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	4908      	ldr	r1, [pc, #32]	; (800aa1c <gptp_mi_init_port_sync_sync_send_sm+0x48>)
 800a9fa:	4420      	add	r0, r4
 800a9fc:	f011 fe38 	bl	801c670 <k_timer_init>
	k_timer_init(&pss_send->send_sync_receipt_timeout_timer,
 800aa00:	f505 60a3 	add.w	r0, r5, #1304	; 0x518
 800aa04:	2200      	movs	r2, #0
 800aa06:	4906      	ldr	r1, [pc, #24]	; (800aa20 <gptp_mi_init_port_sync_sync_send_sm+0x4c>)
 800aa08:	4420      	add	r0, r4
 800aa0a:	f011 fe31 	bl	801c670 <k_timer_init>
	pss_send->state = GPTP_PSS_SEND_TRANSMIT_INIT;
 800aa0e:	442c      	add	r4, r5
 800aa10:	2300      	movs	r3, #0
 800aa12:	f884 3588 	strb.w	r3, [r4, #1416]	; 0x588
}
 800aa16:	bd38      	pop	{r3, r4, r5, pc}
 800aa18:	20001470 	.word	0x20001470
 800aa1c:	0800aa59 	.word	0x0800aa59
 800aa20:	0800a82d 	.word	0x0800a82d

0800aa24 <gptp_mi_init_port_announce_transmit_sm>:
{
 800aa24:	b538      	push	{r3, r4, r5, lr}
	state = &GPTP_PORT_STATE(port)->pa_transmit;
 800aa26:	1e45      	subs	r5, r0, #1
	k_timer_init(&state->ann_send_periodic_timer,
 800aa28:	f44f 745a 	mov.w	r4, #872	; 0x368
 800aa2c:	fb04 f505 	mul.w	r5, r4, r5
 800aa30:	f505 60c6 	add.w	r0, r5, #1584	; 0x630
 800aa34:	4c06      	ldr	r4, [pc, #24]	; (800aa50 <gptp_mi_init_port_announce_transmit_sm+0x2c>)
 800aa36:	2200      	movs	r2, #0
 800aa38:	4906      	ldr	r1, [pc, #24]	; (800aa54 <gptp_mi_init_port_announce_transmit_sm+0x30>)
 800aa3a:	4420      	add	r0, r4
 800aa3c:	f011 fe18 	bl	801c670 <k_timer_init>
	state->ann_trigger = false;
 800aa40:	442c      	add	r4, r5
 800aa42:	2300      	movs	r3, #0
 800aa44:	f884 3669 	strb.w	r3, [r4, #1641]	; 0x669
	state->state = GPTP_PA_TRANSMIT_INIT;
 800aa48:	f884 3668 	strb.w	r3, [r4, #1640]	; 0x668
}
 800aa4c:	bd38      	pop	{r3, r4, r5, pc}
 800aa4e:	bf00      	nop
 800aa50:	20001470 	.word	0x20001470
 800aa54:	0800a8c9 	.word	0x0800a8c9

0800aa58 <gptp_mi_half_sync_itv_timeout>:
{
 800aa58:	b570      	push	{r4, r5, r6, lr}
 800aa5a:	4605      	mov	r5, r0
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800aa5c:	2401      	movs	r4, #1
 800aa5e:	4b17      	ldr	r3, [pc, #92]	; (800aabc <gptp_mi_half_sync_itv_timeout+0x64>)
 800aa60:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800aa64:	42a3      	cmp	r3, r4
 800aa66:	da00      	bge.n	800aa6a <gptp_mi_half_sync_itv_timeout+0x12>
}
 800aa68:	bd70      	pop	{r4, r5, r6, pc}
		state = &GPTP_PORT_STATE(port)->pss_send;
 800aa6a:	1e66      	subs	r6, r4, #1
		if (&state->half_sync_itv_timer == timer) {
 800aa6c:	f44f 735a 	mov.w	r3, #872	; 0x368
 800aa70:	fb03 f306 	mul.w	r3, r3, r6
 800aa74:	f503 639c 	add.w	r3, r3, #1248	; 0x4e0
 800aa78:	4a10      	ldr	r2, [pc, #64]	; (800aabc <gptp_mi_half_sync_itv_timeout+0x64>)
 800aa7a:	4413      	add	r3, r2
 800aa7c:	42ab      	cmp	r3, r5
 800aa7e:	d001      	beq.n	800aa84 <gptp_mi_half_sync_itv_timeout+0x2c>
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800aa80:	3401      	adds	r4, #1
 800aa82:	e7ec      	b.n	800aa5e <gptp_mi_half_sync_itv_timeout+0x6>
			if (!state->half_sync_itv_timer_expired) {
 800aa84:	f44f 735a 	mov.w	r3, #872	; 0x368
 800aa88:	fb03 2306 	mla	r3, r3, r6, r2
 800aa8c:	f893 35e1 	ldrb.w	r3, [r3, #1505]	; 0x5e1
 800aa90:	b93b      	cbnz	r3, 800aaa2 <gptp_mi_half_sync_itv_timeout+0x4a>
				state->half_sync_itv_timer_expired = true;
 800aa92:	f44f 735a 	mov.w	r3, #872	; 0x368
 800aa96:	fb03 2606 	mla	r6, r3, r6, r2
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	f886 35e1 	strb.w	r3, [r6, #1505]	; 0x5e1
 800aaa0:	e7ee      	b.n	800aa80 <gptp_mi_half_sync_itv_timeout+0x28>
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	f011 fdf0 	bl	801c688 <z_impl_k_timer_stop>
				state->sync_itv_timer_expired = true;
 800aaa8:	4b04      	ldr	r3, [pc, #16]	; (800aabc <gptp_mi_half_sync_itv_timeout+0x64>)
 800aaaa:	f44f 725a 	mov.w	r2, #872	; 0x368
 800aaae:	fb02 3606 	mla	r6, r2, r6, r3
 800aab2:	2301      	movs	r3, #1
 800aab4:	f886 35e2 	strb.w	r3, [r6, #1506]	; 0x5e2
 800aab8:	e7e2      	b.n	800aa80 <gptp_mi_half_sync_itv_timeout+0x28>
 800aaba:	bf00      	nop
 800aabc:	20001470 	.word	0x20001470

0800aac0 <gptp_mi_init_bmca_data>:
{
 800aac0:	b570      	push	{r4, r5, r6, lr}
	bmca_data = GPTP_PORT_BMCA_DATA(port);
 800aac2:	1e45      	subs	r5, r0, #1
 800aac4:	2264      	movs	r2, #100	; 0x64
 800aac6:	fb02 f505 	mul.w	r5, r2, r5
 800aaca:	f505 64cf 	add.w	r4, r5, #1656	; 0x678
 800aace:	4e11      	ldr	r6, [pc, #68]	; (800ab14 <gptp_mi_init_bmca_data+0x54>)
 800aad0:	4434      	add	r4, r6
 800aad2:	2100      	movs	r1, #0
 800aad4:	4620      	mov	r0, r4
 800aad6:	f011 fed0 	bl	801c87a <memset>
	gptp_set_time_itv(&bmca_data->announce_interval, 1,
 800aada:	f505 60d6 	add.w	r0, r5, #1712	; 0x6b0
 800aade:	4430      	add	r0, r6
 800aae0:	2200      	movs	r2, #0
 800aae2:	2101      	movs	r1, #1
 800aae4:	3004      	adds	r0, #4
 800aae6:	f7fd fdaf 	bl	8008648 <gptp_set_time_itv>
	(void)memset(&bmca_data->port_priority, 0xFF,
 800aaea:	f505 65d3 	add.w	r5, r5, #1688	; 0x698
 800aaee:	19aa      	adds	r2, r5, r6
 800aaf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aaf4:	51ab      	str	r3, [r5, r6]
 800aaf6:	6053      	str	r3, [r2, #4]
 800aaf8:	6093      	str	r3, [r2, #8]
 800aafa:	60d3      	str	r3, [r2, #12]
 800aafc:	6113      	str	r3, [r2, #16]
 800aafe:	6153      	str	r3, [r2, #20]
 800ab00:	6193      	str	r3, [r2, #24]
 800ab02:	6063      	str	r3, [r4, #4]
 800ab04:	60a3      	str	r3, [r4, #8]
 800ab06:	60e3      	str	r3, [r4, #12]
 800ab08:	6123      	str	r3, [r4, #16]
 800ab0a:	6163      	str	r3, [r4, #20]
 800ab0c:	61a3      	str	r3, [r4, #24]
 800ab0e:	61e3      	str	r3, [r4, #28]
}
 800ab10:	bd70      	pop	{r4, r5, r6, pc}
 800ab12:	bf00      	nop
 800ab14:	20001470 	.word	0x20001470

0800ab18 <gptp_mi_pss_store_last_pss>:
{
 800ab18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	state = &GPTP_PORT_STATE(port)->pss_send;
 800ab1c:	1e43      	subs	r3, r0, #1
	pss_ptr = state->pss_sync_ptr;
 800ab1e:	4923      	ldr	r1, [pc, #140]	; (800abac <gptp_mi_pss_store_last_pss+0x94>)
 800ab20:	f44f 705a 	mov.w	r0, #872	; 0x368
 800ab24:	fb00 f003 	mul.w	r0, r0, r3
 800ab28:	180b      	adds	r3, r1, r0
 800ab2a:	f8d3 2570 	ldr.w	r2, [r3, #1392]	; 0x570
	state->last_rcvd_port_num = pss_ptr->local_port_number;
 800ab2e:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
 800ab32:	f8a3 458c 	strh.w	r4, [r3, #1420]	; 0x58c
	memcpy(&state->last_precise_orig_ts, &sync_info->precise_orig_ts,
 800ab36:	f500 679a 	add.w	r7, r0, #1232	; 0x4d0
 800ab3a:	187e      	adds	r6, r7, r1
 800ab3c:	4615      	mov	r5, r2
 800ab3e:	4614      	mov	r4, r2
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800ab40:	f854 8f18 	ldr.w	r8, [r4, #24]!
 800ab44:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800ab48:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800ab4c:	68e4      	ldr	r4, [r4, #12]
 800ab4e:	f847 8001 	str.w	r8, [r7, r1]
 800ab52:	f8c6 e004 	str.w	lr, [r6, #4]
 800ab56:	f8c6 c008 	str.w	ip, [r6, #8]
 800ab5a:	60f4      	str	r4, [r6, #12]
	memcpy(&state->last_gm_phase_change, &sync_info->last_gm_phase_change,
 800ab5c:	f500 60aa 	add.w	r0, r0, #1360	; 0x550
 800ab60:	1844      	adds	r4, r0, r1
 800ab62:	f855 7f08 	ldr.w	r7, [r5, #8]!
 800ab66:	686e      	ldr	r6, [r5, #4]
 800ab68:	68ad      	ldr	r5, [r5, #8]
 800ab6a:	5047      	str	r7, [r0, r1]
 800ab6c:	6066      	str	r6, [r4, #4]
 800ab6e:	60a5      	str	r5, [r4, #8]
		sync_info->follow_up_correction_field;
 800ab70:	e9d2 010a 	ldrd	r0, r1, [r2, #40]	; 0x28
	state->last_follow_up_correction_field =
 800ab74:	f503 64ac 	add.w	r4, r3, #1376	; 0x560
 800ab78:	e9c4 0100 	strd	r0, r1, [r4]
	state->last_rate_ratio = sync_info->rate_ratio;
 800ab7c:	e9d2 4510 	ldrd	r4, r5, [r2, #64]	; 0x40
 800ab80:	f503 61af 	add.w	r1, r3, #1400	; 0x578
 800ab84:	e9c1 4500 	strd	r4, r5, [r1]
	state->last_upstream_tx_time = sync_info->upstream_tx_time;
 800ab88:	e9d2 010c 	ldrd	r0, r1, [r2, #48]	; 0x30
 800ab8c:	f503 64ad 	add.w	r4, r3, #1384	; 0x568
 800ab90:	e9c4 0100 	strd	r0, r1, [r4]
	state->last_gm_time_base_indicator = sync_info->gm_time_base_indicator;
 800ab94:	f8b2 1052 	ldrh.w	r1, [r2, #82]	; 0x52
 800ab98:	f8a3 158a 	strh.w	r1, [r3, #1418]	; 0x58a
	state->last_gm_freq_change = sync_info->last_gm_freq_change;
 800ab9c:	e9d2 010e 	ldrd	r0, r1, [r2, #56]	; 0x38
 800aba0:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 800aba4:	e9c3 0100 	strd	r0, r1, [r3]
}
 800aba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abac:	20001470 	.word	0x20001470

0800abb0 <gptp_mi_pss_send_md_sync_send>:
{
 800abb0:	b538      	push	{r3, r4, r5, lr}
	state = &GPTP_PORT_STATE(port)->pss_send;
 800abb2:	1e44      	subs	r4, r0, #1
	pss_ptr = state->pss_sync_ptr;
 800abb4:	4b0a      	ldr	r3, [pc, #40]	; (800abe0 <gptp_mi_pss_send_md_sync_send+0x30>)
 800abb6:	f44f 705a 	mov.w	r0, #872	; 0x368
 800abba:	fb00 f004 	mul.w	r0, r0, r4
 800abbe:	181d      	adds	r5, r3, r0
 800abc0:	f8d5 1570 	ldr.w	r1, [r5, #1392]	; 0x570
	memcpy(&state->sync_send, &pss_ptr->sync_info,
 800abc4:	f500 60b2 	add.w	r0, r0, #1424	; 0x590
 800abc8:	18c4      	adds	r4, r0, r3
 800abca:	2250      	movs	r2, #80	; 0x50
 800abcc:	3108      	adds	r1, #8
 800abce:	4620      	mov	r0, r4
 800abd0:	f011 fe32 	bl	801c838 <memcpy>
	sync_send->sync_send_ptr = &state->sync_send;
 800abd4:	f8c5 43c8 	str.w	r4, [r5, #968]	; 0x3c8
	sync_send->rcvd_md_sync = true;
 800abd8:	2301      	movs	r3, #1
 800abda:	f885 33d1 	strb.w	r3, [r5, #977]	; 0x3d1
}
 800abde:	bd38      	pop	{r3, r4, r5, pc}
 800abe0:	20001470 	.word	0x20001470

0800abe4 <copy_path_trace>:
{
 800abe4:	b570      	push	{r4, r5, r6, lr}
	int len = ntohs(announce->tlv.len);
 800abe6:	8c03      	ldrh	r3, [r0, #32]
 800abe8:	0a1c      	lsrs	r4, r3, #8
 800abea:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800abee:	b2a4      	uxth	r4, r4
	if (len > GPTP_MAX_PATHTRACE_SIZE) {
 800abf0:	2c08      	cmp	r4, #8
 800abf2:	dd00      	ble.n	800abf6 <copy_path_trace+0x12>
}
 800abf4:	bd70      	pop	{r4, r5, r6, pc}
	sys_path_trace->len = htons(len + GPTP_CLOCK_ID_LEN);
 800abf6:	f104 0208 	add.w	r2, r4, #8
 800abfa:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800abfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ac02:	4d0a      	ldr	r5, [pc, #40]	; (800ac2c <copy_path_trace+0x48>)
 800ac04:	f8a5 305c 	strh.w	r3, [r5, #92]	; 0x5c
	memcpy(sys_path_trace->path_sequence, announce->tlv.path_sequence,
 800ac08:	f105 065e 	add.w	r6, r5, #94	; 0x5e
 800ac0c:	f240 6382 	movw	r3, #1666	; 0x682
 800ac10:	4622      	mov	r2, r4
 800ac12:	f100 0122 	add.w	r1, r0, #34	; 0x22
 800ac16:	4630      	mov	r0, r6
 800ac18:	f011 fe1c 	bl	801c854 <__memcpy_chk>
	memcpy((uint8_t *)sys_path_trace->path_sequence + len,
 800ac1c:	19a3      	adds	r3, r4, r6
 800ac1e:	f8d5 111d 	ldr.w	r1, [r5, #285]	; 0x11d
 800ac22:	f8d5 2121 	ldr.w	r2, [r5, #289]	; 0x121
 800ac26:	51a1      	str	r1, [r4, r6]
 800ac28:	605a      	str	r2, [r3, #4]
 800ac2a:	e7e3      	b.n	800abf4 <copy_path_trace+0x10>
 800ac2c:	20001470 	.word	0x20001470

0800ac30 <start_rcv_sync_timer>:
{
 800ac30:	b530      	push	{r4, r5, lr}
 800ac32:	b083      	sub	sp, #12
 800ac34:	460c      	mov	r4, r1
	duration = K_MSEC(port_ds->sync_receipt_timeout_time_itv /
 800ac36:	e9d0 0100 	ldrd	r0, r1, [r0]
 800ac3a:	4a10      	ldr	r2, [pc, #64]	; (800ac7c <start_rcv_sync_timer+0x4c>)
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	428b      	cmp	r3, r1
 800ac40:	bf08      	it	eq
 800ac42:	4282      	cmpeq	r2, r0
 800ac44:	d216      	bcs.n	800ac74 <start_rcv_sync_timer+0x44>
 800ac46:	4a0e      	ldr	r2, [pc, #56]	; (800ac80 <start_rcv_sync_timer+0x50>)
 800ac48:	2300      	movs	r3, #0
 800ac4a:	f7f5 ff77 	bl	8000b3c <__aeabi_uldivmod>
 800ac4e:	008d      	lsls	r5, r1, #2
 800ac50:	0082      	lsls	r2, r0, #2
 800ac52:	ea45 7390 	orr.w	r3, r5, r0, lsr #30
 800ac56:	1812      	adds	r2, r2, r0
 800ac58:	eb41 0303 	adc.w	r3, r1, r3
 800ac5c:	1892      	adds	r2, r2, r2
 800ac5e:	415b      	adcs	r3, r3
	k_timer_start(&state->rcv_sync_receipt_timeout_timer, duration,
 800ac60:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
	z_impl_k_timer_start(timer, duration, period);
 800ac64:	2400      	movs	r4, #0
 800ac66:	2500      	movs	r5, #0
 800ac68:	e9cd 4500 	strd	r4, r5, [sp]
 800ac6c:	f00b ff3e 	bl	8016aec <z_impl_k_timer_start>
}
 800ac70:	b003      	add	sp, #12
 800ac72:	bd30      	pop	{r4, r5, pc}
	duration = K_MSEC(port_ds->sync_receipt_timeout_time_itv /
 800ac74:	2000      	movs	r0, #0
 800ac76:	4601      	mov	r1, r0
 800ac78:	e7e9      	b.n	800ac4e <start_rcv_sync_timer+0x1e>
 800ac7a:	bf00      	nop
 800ac7c:	000f423f 	.word	0x000f423f
 800ac80:	000f4240 	.word	0x000f4240

0800ac84 <gptp_mi_pss_send_state_machine>:
{
 800ac84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac88:	b083      	sub	sp, #12
 800ac8a:	4605      	mov	r5, r0
	state = &GPTP_PORT_STATE(port)->pss_send;
 800ac8c:	1e44      	subs	r4, r0, #1
	if (port_ds->ptt_port_enabled && !port_ds->prev_ptt_port_enabled) {
 800ac8e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800ac92:	4bb1      	ldr	r3, [pc, #708]	; (800af58 <gptp_mi_pss_send_state_machine+0x2d4>)
 800ac94:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800ac98:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 800ac9c:	f013 0f01 	tst.w	r3, #1
 800aca0:	d008      	beq.n	800acb4 <gptp_mi_pss_send_state_machine+0x30>
 800aca2:	4613      	mov	r3, r2
 800aca4:	4aac      	ldr	r2, [pc, #688]	; (800af58 <gptp_mi_pss_send_state_machine+0x2d4>)
 800aca6:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800acaa:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 800acae:	f013 0f02 	tst.w	r3, #2
 800acb2:	d07d      	beq.n	800adb0 <gptp_mi_pss_send_state_machine+0x12c>
	if (state->rcvd_pss_sync && ((!port_ds->ptt_port_enabled) ||
 800acb4:	4aa8      	ldr	r2, [pc, #672]	; (800af58 <gptp_mi_pss_send_state_machine+0x2d4>)
 800acb6:	f44f 735a 	mov.w	r3, #872	; 0x368
 800acba:	fb03 2304 	mla	r3, r3, r4, r2
 800acbe:	f893 25e0 	ldrb.w	r2, [r3, #1504]	; 0x5e0
 800acc2:	b192      	cbz	r2, 800acea <gptp_mi_pss_send_state_machine+0x66>
 800acc4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800acc8:	49a3      	ldr	r1, [pc, #652]	; (800af58 <gptp_mi_pss_send_state_machine+0x2d4>)
 800acca:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 800acce:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 800acd2:	f013 0f01 	tst.w	r3, #1
 800acd6:	d06f      	beq.n	800adb8 <gptp_mi_pss_send_state_machine+0x134>
				     !port_ds->as_capable)) {
 800acd8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800acdc:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 800ace0:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
	if (state->rcvd_pss_sync && ((!port_ds->ptt_port_enabled) ||
 800ace4:	f013 0f08 	tst.w	r3, #8
 800ace8:	d066      	beq.n	800adb8 <gptp_mi_pss_send_state_machine+0x134>
	switch (state->state) {
 800acea:	499b      	ldr	r1, [pc, #620]	; (800af58 <gptp_mi_pss_send_state_machine+0x2d4>)
 800acec:	f44f 735a 	mov.w	r3, #872	; 0x368
 800acf0:	fb03 1304 	mla	r3, r3, r4, r1
 800acf4:	f893 3588 	ldrb.w	r3, [r3, #1416]	; 0x588
 800acf8:	2b02      	cmp	r3, #2
 800acfa:	d01c      	beq.n	800ad36 <gptp_mi_pss_send_state_machine+0xb2>
 800acfc:	d869      	bhi.n	800add2 <gptp_mi_pss_send_state_machine+0x14e>
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d864      	bhi.n	800adcc <gptp_mi_pss_send_state_machine+0x148>
		if (state->rcvd_pss_sync &&
 800ad02:	2a00      	cmp	r2, #0
 800ad04:	d062      	beq.n	800adcc <gptp_mi_pss_send_state_machine+0x148>
		    (state->pss_sync_ptr->local_port_number != port) &&
 800ad06:	4994      	ldr	r1, [pc, #592]	; (800af58 <gptp_mi_pss_send_state_machine+0x2d4>)
 800ad08:	f44f 735a 	mov.w	r3, #872	; 0x368
 800ad0c:	fb03 1304 	mla	r3, r3, r4, r1
 800ad10:	f8d3 3570 	ldr.w	r3, [r3, #1392]	; 0x570
 800ad14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
		if (state->rcvd_pss_sync &&
 800ad18:	42ab      	cmp	r3, r5
 800ad1a:	d057      	beq.n	800adcc <gptp_mi_pss_send_state_machine+0x148>
		    (global_ds->selected_role[port] == GPTP_PORT_MASTER)) {
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	442b      	add	r3, r5
 800ad20:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
		    (state->pss_sync_ptr->local_port_number != port) &&
 800ad24:	2b05      	cmp	r3, #5
 800ad26:	d151      	bne.n	800adcc <gptp_mi_pss_send_state_machine+0x148>
			state->state = GPTP_PSS_SEND_SEND_MD_SYNC;
 800ad28:	f44f 735a 	mov.w	r3, #872	; 0x368
 800ad2c:	fb03 1304 	mla	r3, r3, r4, r1
 800ad30:	2102      	movs	r1, #2
 800ad32:	f883 1588 	strb.w	r1, [r3, #1416]	; 0x588
		if (state->rcvd_pss_sync) {
 800ad36:	2a00      	cmp	r2, #0
 800ad38:	d17e      	bne.n	800ae38 <gptp_mi_pss_send_state_machine+0x1b4>
		k_timer_stop(&state->half_sync_itv_timer);
 800ad3a:	f44f 785a 	mov.w	r8, #872	; 0x368
 800ad3e:	fb08 f804 	mul.w	r8, r8, r4
 800ad42:	f508 679c 	add.w	r7, r8, #1248	; 0x4e0
 800ad46:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800af58 <gptp_mi_pss_send_state_machine+0x2d4>
 800ad4a:	444f      	add	r7, r9
	z_impl_k_timer_stop(timer);
 800ad4c:	4638      	mov	r0, r7
 800ad4e:	f011 fc9b 	bl	801c688 <z_impl_k_timer_stop>
		k_timer_stop(&state->send_sync_receipt_timeout_timer);
 800ad52:	f508 60a3 	add.w	r0, r8, #1304	; 0x518
 800ad56:	4448      	add	r0, r9
 800ad58:	f011 fc96 	bl	801c688 <z_impl_k_timer_stop>
		state->half_sync_itv_timer_expired = false;
 800ad5c:	44c8      	add	r8, r9
 800ad5e:	2300      	movs	r3, #0
 800ad60:	f888 35e1 	strb.w	r3, [r8, #1505]	; 0x5e1
		state->sync_itv_timer_expired = false;
 800ad64:	f888 35e2 	strb.w	r3, [r8, #1506]	; 0x5e2
		state->send_sync_receipt_timeout_timer_expired = false;
 800ad68:	f888 35ed 	strb.w	r3, [r8, #1517]	; 0x5ed
		duration = K_MSEC(gptp_uscaled_ns_to_timer_ms(
 800ad6c:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 800ad70:	0176      	lsls	r6, r6, #5
 800ad72:	f506 7638 	add.w	r6, r6, #736	; 0x2e0
 800ad76:	444e      	add	r6, r9
 800ad78:	3602      	adds	r6, #2
 800ad7a:	4630      	mov	r0, r6
 800ad7c:	f7fd fd38 	bl	80087f0 <gptp_uscaled_ns_to_timer_ms>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	dc65      	bgt.n	800ae50 <gptp_mi_pss_send_state_machine+0x1cc>
 800ad84:	2000      	movs	r0, #0
 800ad86:	2100      	movs	r1, #0
 800ad88:	008e      	lsls	r6, r1, #2
 800ad8a:	0082      	lsls	r2, r0, #2
 800ad8c:	ea46 7390 	orr.w	r3, r6, r0, lsr #30
 800ad90:	1812      	adds	r2, r2, r0
 800ad92:	eb41 0303 	adc.w	r3, r1, r3
 800ad96:	1892      	adds	r2, r2, r2
 800ad98:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 800ad9a:	2000      	movs	r0, #0
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	e9cd 0100 	strd	r0, r1, [sp]
 800ada2:	4638      	mov	r0, r7
 800ada4:	f00b fea2 	bl	8016aec <z_impl_k_timer_start>
		gptp_mi_pss_send_md_sync_send(port);
 800ada8:	4628      	mov	r0, r5
 800adaa:	f7ff ff01 	bl	800abb0 <gptp_mi_pss_send_md_sync_send>
 800adae:	e012      	b.n	800add6 <gptp_mi_pss_send_state_machine+0x152>
		gptp_update_sync_interval(port, GPTP_ITV_SET_TO_INIT);
 800adb0:	217e      	movs	r1, #126	; 0x7e
 800adb2:	f7fd fd99 	bl	80088e8 <gptp_update_sync_interval>
 800adb6:	e77d      	b.n	800acb4 <gptp_mi_pss_send_state_machine+0x30>
		state->rcvd_pss_sync = false;
 800adb8:	4a67      	ldr	r2, [pc, #412]	; (800af58 <gptp_mi_pss_send_state_machine+0x2d4>)
 800adba:	f44f 735a 	mov.w	r3, #872	; 0x368
 800adbe:	fb03 2404 	mla	r4, r3, r4, r2
 800adc2:	2300      	movs	r3, #0
 800adc4:	f884 35e0 	strb.w	r3, [r4, #1504]	; 0x5e0
		state->state = GPTP_PSS_SEND_TRANSMIT_INIT;
 800adc8:	f884 3588 	strb.w	r3, [r4, #1416]	; 0x588
}
 800adcc:	b003      	add	sp, #12
 800adce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (state->state) {
 800add2:	2b03      	cmp	r3, #3
 800add4:	d1fa      	bne.n	800adcc <gptp_mi_pss_send_state_machine+0x148>
		if ((global_ds->selected_role[port] == GPTP_PORT_MASTER) &&
 800add6:	4b60      	ldr	r3, [pc, #384]	; (800af58 <gptp_mi_pss_send_state_machine+0x2d4>)
 800add8:	442b      	add	r3, r5
 800adda:	f893 1114 	ldrb.w	r1, [r3, #276]	; 0x114
 800adde:	2905      	cmp	r1, #5
 800ade0:	d03b      	beq.n	800ae5a <gptp_mi_pss_send_state_machine+0x1d6>
		} else if ((state->state == GPTP_PSS_SEND_SEND_MD_SYNC) ||
 800ade2:	4a5d      	ldr	r2, [pc, #372]	; (800af58 <gptp_mi_pss_send_state_machine+0x2d4>)
 800ade4:	f44f 735a 	mov.w	r3, #872	; 0x368
 800ade8:	fb03 2304 	mla	r3, r3, r4, r2
 800adec:	f893 3588 	ldrb.w	r3, [r3, #1416]	; 0x588
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d07a      	beq.n	800aeea <gptp_mi_pss_send_state_machine+0x266>
			   (state->rcvd_pss_sync &&
 800adf4:	f44f 735a 	mov.w	r3, #872	; 0x368
 800adf8:	fb03 2304 	mla	r3, r3, r4, r2
 800adfc:	f893 35e0 	ldrb.w	r3, [r3, #1504]	; 0x5e0
		} else if ((state->state == GPTP_PSS_SEND_SEND_MD_SYNC) ||
 800ae00:	b143      	cbz	r3, 800ae14 <gptp_mi_pss_send_state_machine+0x190>
			    !state->sync_itv_timer_expired &&
 800ae02:	f44f 735a 	mov.w	r3, #872	; 0x368
 800ae06:	fb03 2304 	mla	r3, r3, r4, r2
 800ae0a:	f893 35e2 	ldrb.w	r3, [r3, #1506]	; 0x5e2
			   (state->rcvd_pss_sync &&
 800ae0e:	b90b      	cbnz	r3, 800ae14 <gptp_mi_pss_send_state_machine+0x190>
			    !state->sync_itv_timer_expired &&
 800ae10:	2905      	cmp	r1, #5
 800ae12:	d060      	beq.n	800aed6 <gptp_mi_pss_send_state_machine+0x252>
		} else if (state->send_sync_receipt_timeout_timer_expired) {
 800ae14:	4a50      	ldr	r2, [pc, #320]	; (800af58 <gptp_mi_pss_send_state_machine+0x2d4>)
 800ae16:	f44f 735a 	mov.w	r3, #872	; 0x368
 800ae1a:	fb03 2304 	mla	r3, r3, r4, r2
 800ae1e:	f893 35ed 	ldrb.w	r3, [r3, #1517]	; 0x5ed
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d0d2      	beq.n	800adcc <gptp_mi_pss_send_state_machine+0x148>
			state->state = GPTP_PSS_SEND_SYNC_RECEIPT_TIMEOUT;
 800ae26:	4613      	mov	r3, r2
 800ae28:	f44f 725a 	mov.w	r2, #872	; 0x368
 800ae2c:	fb02 3404 	mla	r4, r2, r4, r3
 800ae30:	2301      	movs	r3, #1
 800ae32:	f884 3588 	strb.w	r3, [r4, #1416]	; 0x588
 800ae36:	e7c9      	b.n	800adcc <gptp_mi_pss_send_state_machine+0x148>
			gptp_mi_pss_store_last_pss(port);
 800ae38:	4628      	mov	r0, r5
 800ae3a:	f7ff fe6d 	bl	800ab18 <gptp_mi_pss_store_last_pss>
			state->rcvd_pss_sync = false;
 800ae3e:	4a46      	ldr	r2, [pc, #280]	; (800af58 <gptp_mi_pss_send_state_machine+0x2d4>)
 800ae40:	f44f 735a 	mov.w	r3, #872	; 0x368
 800ae44:	fb03 2304 	mla	r3, r3, r4, r2
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f883 25e0 	strb.w	r2, [r3, #1504]	; 0x5e0
 800ae4e:	e774      	b.n	800ad3a <gptp_mi_pss_send_state_machine+0xb6>
		duration = K_MSEC(gptp_uscaled_ns_to_timer_ms(
 800ae50:	4630      	mov	r0, r6
 800ae52:	f7fd fccd 	bl	80087f0 <gptp_uscaled_ns_to_timer_ms>
 800ae56:	17c1      	asrs	r1, r0, #31
 800ae58:	e796      	b.n	800ad88 <gptp_mi_pss_send_state_machine+0x104>
		    ((state->rcvd_pss_sync &&
 800ae5a:	4a3f      	ldr	r2, [pc, #252]	; (800af58 <gptp_mi_pss_send_state_machine+0x2d4>)
 800ae5c:	f44f 735a 	mov.w	r3, #872	; 0x368
 800ae60:	fb03 2304 	mla	r3, r3, r4, r2
 800ae64:	f893 35e0 	ldrb.w	r3, [r3, #1504]	; 0x5e0
		if ((global_ds->selected_role[port] == GPTP_PORT_MASTER) &&
 800ae68:	b1cb      	cbz	r3, 800ae9e <gptp_mi_pss_send_state_machine+0x21a>
		      state->half_sync_itv_timer_expired &&
 800ae6a:	f44f 735a 	mov.w	r3, #872	; 0x368
 800ae6e:	fb03 2304 	mla	r3, r3, r4, r2
 800ae72:	f893 35e1 	ldrb.w	r3, [r3, #1505]	; 0x5e1
		    ((state->rcvd_pss_sync &&
 800ae76:	b193      	cbz	r3, 800ae9e <gptp_mi_pss_send_state_machine+0x21a>
		      state->pss_sync_ptr->local_port_number != port) ||
 800ae78:	f44f 735a 	mov.w	r3, #872	; 0x368
 800ae7c:	fb03 2304 	mla	r3, r3, r4, r2
 800ae80:	f8d3 3570 	ldr.w	r3, [r3, #1392]	; 0x570
 800ae84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
		      state->half_sync_itv_timer_expired &&
 800ae88:	42ab      	cmp	r3, r5
 800ae8a:	d008      	beq.n	800ae9e <gptp_mi_pss_send_state_machine+0x21a>
			state->state = GPTP_PSS_SEND_SEND_MD_SYNC;
 800ae8c:	4a32      	ldr	r2, [pc, #200]	; (800af58 <gptp_mi_pss_send_state_machine+0x2d4>)
 800ae8e:	f44f 735a 	mov.w	r3, #872	; 0x368
 800ae92:	fb03 2404 	mla	r4, r3, r4, r2
 800ae96:	2302      	movs	r3, #2
 800ae98:	f884 3588 	strb.w	r3, [r4, #1416]	; 0x588
 800ae9c:	e796      	b.n	800adcc <gptp_mi_pss_send_state_machine+0x148>
		     (state->sync_itv_timer_expired &&
 800ae9e:	4a2e      	ldr	r2, [pc, #184]	; (800af58 <gptp_mi_pss_send_state_machine+0x2d4>)
 800aea0:	f44f 735a 	mov.w	r3, #872	; 0x368
 800aea4:	fb03 2304 	mla	r3, r3, r4, r2
 800aea8:	f893 35e2 	ldrb.w	r3, [r3, #1506]	; 0x5e2
		      state->pss_sync_ptr->local_port_number != port) ||
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d098      	beq.n	800ade2 <gptp_mi_pss_send_state_machine+0x15e>
		      (state->last_rcvd_port_num != port) &&
 800aeb0:	f44f 735a 	mov.w	r3, #872	; 0x368
 800aeb4:	fb03 2304 	mla	r3, r3, r4, r2
 800aeb8:	f8b3 358c 	ldrh.w	r3, [r3, #1420]	; 0x58c
		     (state->sync_itv_timer_expired &&
 800aebc:	42ab      	cmp	r3, r5
 800aebe:	d090      	beq.n	800ade2 <gptp_mi_pss_send_state_machine+0x15e>
		      port_ds->as_capable && port_ds->ptt_port_enabled))) {
 800aec0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800aec4:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800aec8:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 800aecc:	f003 0309 	and.w	r3, r3, #9
 800aed0:	2b09      	cmp	r3, #9
 800aed2:	d186      	bne.n	800ade2 <gptp_mi_pss_send_state_machine+0x15e>
 800aed4:	e7da      	b.n	800ae8c <gptp_mi_pss_send_state_machine+0x208>
			    state->pss_sync_ptr->local_port_number != port)) {
 800aed6:	f44f 735a 	mov.w	r3, #872	; 0x368
 800aeda:	fb03 2304 	mla	r3, r3, r4, r2
 800aede:	f8d3 3570 	ldr.w	r3, [r3, #1392]	; 0x570
 800aee2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
							GPTP_PORT_MASTER) &&
 800aee6:	42ab      	cmp	r3, r5
 800aee8:	d094      	beq.n	800ae14 <gptp_mi_pss_send_state_machine+0x190>
			state->state = GPTP_PSS_SEND_SET_SYNC_RECEIPT_TIMEOUT;
 800aeea:	4e1b      	ldr	r6, [pc, #108]	; (800af58 <gptp_mi_pss_send_state_machine+0x2d4>)
 800aeec:	f44f 755a 	mov.w	r5, #872	; 0x368
 800aef0:	fb05 f504 	mul.w	r5, r5, r4
 800aef4:	1977      	adds	r7, r6, r5
 800aef6:	2303      	movs	r3, #3
 800aef8:	f887 3588 	strb.w	r3, [r7, #1416]	; 0x588
			k_timer_stop(&state->send_sync_receipt_timeout_timer);
 800aefc:	f505 65a3 	add.w	r5, r5, #1304	; 0x518
 800af00:	4435      	add	r5, r6
	z_impl_k_timer_stop(timer);
 800af02:	4628      	mov	r0, r5
 800af04:	f011 fbc0 	bl	801c688 <z_impl_k_timer_stop>
			state->send_sync_receipt_timeout_timer_expired = false;
 800af08:	2300      	movs	r3, #0
 800af0a:	f887 35ed 	strb.w	r3, [r7, #1517]	; 0x5ed
				K_MSEC(port_ds->sync_receipt_timeout_time_itv /
 800af0e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800af12:	eb06 1644 	add.w	r6, r6, r4, lsl #5
 800af16:	e9d6 01ac 	ldrd	r0, r1, [r6, #688]	; 0x2b0
 800af1a:	4a10      	ldr	r2, [pc, #64]	; (800af5c <gptp_mi_pss_send_state_machine+0x2d8>)
 800af1c:	2300      	movs	r3, #0
 800af1e:	428b      	cmp	r3, r1
 800af20:	bf08      	it	eq
 800af22:	4282      	cmpeq	r2, r0
 800af24:	d204      	bcs.n	800af30 <gptp_mi_pss_send_state_machine+0x2ac>
 800af26:	4a0e      	ldr	r2, [pc, #56]	; (800af60 <gptp_mi_pss_send_state_machine+0x2dc>)
 800af28:	2300      	movs	r3, #0
 800af2a:	f7f5 fe07 	bl	8000b3c <__aeabi_uldivmod>
 800af2e:	e001      	b.n	800af34 <gptp_mi_pss_send_state_machine+0x2b0>
 800af30:	2000      	movs	r0, #0
 800af32:	4601      	mov	r1, r0
 800af34:	008c      	lsls	r4, r1, #2
 800af36:	0082      	lsls	r2, r0, #2
 800af38:	ea44 7390 	orr.w	r3, r4, r0, lsr #30
 800af3c:	1812      	adds	r2, r2, r0
 800af3e:	eb41 0303 	adc.w	r3, r1, r3
 800af42:	1892      	adds	r2, r2, r2
 800af44:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 800af46:	2000      	movs	r0, #0
 800af48:	2100      	movs	r1, #0
 800af4a:	e9cd 0100 	strd	r0, r1, [sp]
 800af4e:	4628      	mov	r0, r5
 800af50:	f00b fdcc 	bl	8016aec <z_impl_k_timer_start>
			    state->pss_sync_ptr->local_port_number != port)) {
 800af54:	e73a      	b.n	800adcc <gptp_mi_pss_send_state_machine+0x148>
 800af56:	bf00      	nop
 800af58:	20001470 	.word	0x20001470
 800af5c:	000f423f 	.word	0x000f423f
 800af60:	000f4240 	.word	0x000f4240

0800af64 <record_other_announce_info>:
{
 800af64:	b538      	push	{r3, r4, r5, lr}
	bmca_data = GPTP_PORT_BMCA_DATA(port);
 800af66:	3801      	subs	r0, #1
	hdr = GPTP_HDR(bmca_data->rcvd_announce_ptr);
 800af68:	4c0d      	ldr	r4, [pc, #52]	; (800afa0 <record_other_announce_info+0x3c>)
 800af6a:	2364      	movs	r3, #100	; 0x64
 800af6c:	fb03 4400 	mla	r4, r3, r0, r4
 800af70:	f8d4 0678 	ldr.w	r0, [r4, #1656]	; 0x678
 800af74:	f00e f903 	bl	801917e <gptp_get_hdr>
 800af78:	4605      	mov	r5, r0
 800af7a:	f8d4 0678 	ldr.w	r0, [r4, #1656]	; 0x678
 800af7e:	f00e f8fe 	bl	801917e <gptp_get_hdr>
	bmca_data->ann_flags.octets[1] = hdr->flags.octets[1];
 800af82:	79eb      	ldrb	r3, [r5, #7]
 800af84:	f884 36cf 	strb.w	r3, [r4, #1743]	; 0x6cf
	bmca_data->ann_current_utc_offset = ntohs(announce->cur_utc_offset);
 800af88:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800af8a:	0213      	lsls	r3, r2, #8
 800af8c:	b21b      	sxth	r3, r3
 800af8e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 800af92:	f8a4 36d4 	strh.w	r3, [r4, #1748]	; 0x6d4
	bmca_data->ann_time_source = announce->time_source;
 800af96:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800af9a:	f884 36cd 	strb.w	r3, [r4, #1741]	; 0x6cd
}
 800af9e:	bd38      	pop	{r3, r4, r5, pc}
 800afa0:	20001470 	.word	0x20001470

0800afa4 <gptp_mi_qualify_announce>:
{
 800afa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afa8:	4607      	mov	r7, r0
 800afaa:	460c      	mov	r4, r1
	hdr = GPTP_HDR(announce_msg);
 800afac:	4608      	mov	r0, r1
 800afae:	f00e f8e6 	bl	801917e <gptp_get_hdr>
 800afb2:	4606      	mov	r6, r0
 800afb4:	4620      	mov	r0, r4
 800afb6:	f00e f8e2 	bl	801917e <gptp_get_hdr>
 800afba:	4605      	mov	r5, r0
 800afbc:	f100 0822 	add.w	r8, r0, #34	; 0x22
	if (memcmp(hdr->port_id.clk_id, GPTP_DEFAULT_DS()->clk_id,
 800afc0:	2208      	movs	r2, #8
 800afc2:	4919      	ldr	r1, [pc, #100]	; (800b028 <gptp_mi_qualify_announce+0x84>)
 800afc4:	f106 0014 	add.w	r0, r6, #20
 800afc8:	f011 fc28 	bl	801c81c <memcmp>
 800afcc:	b320      	cbz	r0, 800b018 <gptp_mi_qualify_announce+0x74>
	len = ntohs(announce->steps_removed);
 800afce:	f8b5 303d 	ldrh.w	r3, [r5, #61]	; 0x3d
 800afd2:	0a1e      	lsrs	r6, r3, #8
 800afd4:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 800afd8:	b2b6      	uxth	r6, r6
	if (len >= 255U) {
 800afda:	2efe      	cmp	r6, #254	; 0xfe
 800afdc:	d81f      	bhi.n	800b01e <gptp_mi_qualify_announce+0x7a>
	for (i = 0; i < len + 1; i++) {
 800afde:	2400      	movs	r4, #0
 800afe0:	42a6      	cmp	r6, r4
 800afe2:	db0c      	blt.n	800affe <gptp_mi_qualify_announce+0x5a>
		if (memcmp(announce->tlv.path_sequence[i],
 800afe4:	f105 0322 	add.w	r3, r5, #34	; 0x22
 800afe8:	1ce0      	adds	r0, r4, #3
 800afea:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800afee:	2208      	movs	r2, #8
 800aff0:	490d      	ldr	r1, [pc, #52]	; (800b028 <gptp_mi_qualify_announce+0x84>)
 800aff2:	300a      	adds	r0, #10
 800aff4:	f011 fc12 	bl	801c81c <memcmp>
 800aff8:	b198      	cbz	r0, 800b022 <gptp_mi_qualify_announce+0x7e>
	for (i = 0; i < len + 1; i++) {
 800affa:	3401      	adds	r4, #1
 800affc:	e7f0      	b.n	800afe0 <gptp_mi_qualify_announce+0x3c>
	if (GPTP_GLOBAL_DS()->selected_role[port] == GPTP_PORT_SLAVE) {
 800affe:	4b0b      	ldr	r3, [pc, #44]	; (800b02c <gptp_mi_qualify_announce+0x88>)
 800b000:	441f      	add	r7, r3
 800b002:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 800b006:	2b08      	cmp	r3, #8
 800b008:	d001      	beq.n	800b00e <gptp_mi_qualify_announce+0x6a>
	return true;
 800b00a:	2001      	movs	r0, #1
 800b00c:	e005      	b.n	800b01a <gptp_mi_qualify_announce+0x76>
		copy_path_trace(announce);
 800b00e:	4640      	mov	r0, r8
 800b010:	f7ff fde8 	bl	800abe4 <copy_path_trace>
	return true;
 800b014:	2001      	movs	r0, #1
 800b016:	e000      	b.n	800b01a <gptp_mi_qualify_announce+0x76>
		return false;
 800b018:	2000      	movs	r0, #0
}
 800b01a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
 800b01e:	2000      	movs	r0, #0
 800b020:	e7fb      	b.n	800b01a <gptp_mi_qualify_announce+0x76>
			return false;
 800b022:	2000      	movs	r0, #0
 800b024:	e7f9      	b.n	800b01a <gptp_mi_qualify_announce+0x76>
 800b026:	bf00      	nop
 800b028:	2000158d 	.word	0x2000158d
 800b02c:	20001470 	.word	0x20001470

0800b030 <gptp_mi_port_announce_receive_state_machine>:
{
 800b030:	b538      	push	{r3, r4, r5, lr}
	state = &GPTP_PORT_STATE(port)->pa_rcv;
 800b032:	1e44      	subs	r4, r0, #1
	if ((!port_ds->ptt_port_enabled) || (!port_ds->as_capable)) {
 800b034:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800b038:	4b3c      	ldr	r3, [pc, #240]	; (800b12c <gptp_mi_port_announce_receive_state_machine+0xfc>)
 800b03a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800b03e:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 800b042:	f013 0f01 	tst.w	r3, #1
 800b046:	d008      	beq.n	800b05a <gptp_mi_port_announce_receive_state_machine+0x2a>
 800b048:	4613      	mov	r3, r2
 800b04a:	4a38      	ldr	r2, [pc, #224]	; (800b12c <gptp_mi_port_announce_receive_state_machine+0xfc>)
 800b04c:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800b050:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 800b054:	f013 0f08 	tst.w	r3, #8
 800b058:	d107      	bne.n	800b06a <gptp_mi_port_announce_receive_state_machine+0x3a>
		state->state = GPTP_PA_RCV_DISCARD;
 800b05a:	4a34      	ldr	r2, [pc, #208]	; (800b12c <gptp_mi_port_announce_receive_state_machine+0xfc>)
 800b05c:	f44f 735a 	mov.w	r3, #872	; 0x368
 800b060:	fb03 2304 	mla	r3, r3, r4, r2
 800b064:	2200      	movs	r2, #0
 800b066:	f883 2671 	strb.w	r2, [r3, #1649]	; 0x671
	switch (state->state) {
 800b06a:	4a30      	ldr	r2, [pc, #192]	; (800b12c <gptp_mi_port_announce_receive_state_machine+0xfc>)
 800b06c:	f44f 735a 	mov.w	r3, #872	; 0x368
 800b070:	fb03 2304 	mla	r3, r3, r4, r2
 800b074:	f893 3671 	ldrb.w	r3, [r3, #1649]	; 0x671
 800b078:	b113      	cbz	r3, 800b080 <gptp_mi_port_announce_receive_state_machine+0x50>
 800b07a:	2b01      	cmp	r3, #1
 800b07c:	d022      	beq.n	800b0c4 <gptp_mi_port_announce_receive_state_machine+0x94>
}
 800b07e:	bd38      	pop	{r3, r4, r5, pc}
		state->rcvd_announce = false;
 800b080:	482a      	ldr	r0, [pc, #168]	; (800b12c <gptp_mi_port_announce_receive_state_machine+0xfc>)
 800b082:	f44f 725a 	mov.w	r2, #872	; 0x368
 800b086:	fb02 0204 	mla	r2, r2, r4, r0
 800b08a:	2100      	movs	r1, #0
 800b08c:	f882 1672 	strb.w	r1, [r2, #1650]	; 0x672
		bmca_data->rcvd_msg = false;
 800b090:	2364      	movs	r3, #100	; 0x64
 800b092:	fb03 0304 	mla	r3, r3, r4, r0
 800b096:	f883 16d6 	strb.w	r1, [r3, #1750]	; 0x6d6
		if (bmca_data->rcvd_announce_ptr != NULL) {
 800b09a:	f8d3 0678 	ldr.w	r0, [r3, #1656]	; 0x678
 800b09e:	b140      	cbz	r0, 800b0b2 <gptp_mi_port_announce_receive_state_machine+0x82>
			net_pkt_unref(bmca_data->rcvd_announce_ptr);
 800b0a0:	f00f f97a 	bl	801a398 <net_pkt_unref>
			bmca_data->rcvd_announce_ptr = NULL;
 800b0a4:	4a21      	ldr	r2, [pc, #132]	; (800b12c <gptp_mi_port_announce_receive_state_machine+0xfc>)
 800b0a6:	2364      	movs	r3, #100	; 0x64
 800b0a8:	fb03 2304 	mla	r3, r3, r4, r2
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f8c3 2678 	str.w	r2, [r3, #1656]	; 0x678
		state->state = GPTP_PA_RCV_RECEIVE;
 800b0b2:	4a1e      	ldr	r2, [pc, #120]	; (800b12c <gptp_mi_port_announce_receive_state_machine+0xfc>)
 800b0b4:	f44f 735a 	mov.w	r3, #872	; 0x368
 800b0b8:	fb03 2404 	mla	r4, r3, r4, r2
 800b0bc:	2301      	movs	r3, #1
 800b0be:	f884 3671 	strb.w	r3, [r4, #1649]	; 0x671
		break;
 800b0c2:	e7dc      	b.n	800b07e <gptp_mi_port_announce_receive_state_machine+0x4e>
		if (state->rcvd_announce &&
 800b0c4:	4a19      	ldr	r2, [pc, #100]	; (800b12c <gptp_mi_port_announce_receive_state_machine+0xfc>)
 800b0c6:	f44f 735a 	mov.w	r3, #872	; 0x368
 800b0ca:	fb03 2304 	mla	r3, r3, r4, r2
 800b0ce:	f893 3672 	ldrb.w	r3, [r3, #1650]	; 0x672
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d0d3      	beq.n	800b07e <gptp_mi_port_announce_receive_state_machine+0x4e>
		    port_ds->ptt_port_enabled &&
 800b0d6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b0da:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800b0de:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 800b0e2:	f003 0309 	and.w	r3, r3, #9
 800b0e6:	2b09      	cmp	r3, #9
 800b0e8:	d1c9      	bne.n	800b07e <gptp_mi_port_announce_receive_state_machine+0x4e>
		    !bmca_data->rcvd_msg) {
 800b0ea:	2364      	movs	r3, #100	; 0x64
 800b0ec:	fb03 2304 	mla	r3, r3, r4, r2
 800b0f0:	f893 36d6 	ldrb.w	r3, [r3, #1750]	; 0x6d6
		    port_ds->as_capable	&&
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d1c2      	bne.n	800b07e <gptp_mi_port_announce_receive_state_machine+0x4e>
			state->rcvd_announce = false;
 800b0f8:	f44f 735a 	mov.w	r3, #872	; 0x368
 800b0fc:	fb03 2304 	mla	r3, r3, r4, r2
 800b100:	2100      	movs	r1, #0
 800b102:	f883 1672 	strb.w	r1, [r3, #1650]	; 0x672
			bmca_data->rcvd_msg = gptp_mi_qualify_announce(
 800b106:	2564      	movs	r5, #100	; 0x64
 800b108:	fb05 2504 	mla	r5, r5, r4, r2
 800b10c:	f8d5 1678 	ldr.w	r1, [r5, #1656]	; 0x678
 800b110:	f7ff ff48 	bl	800afa4 <gptp_mi_qualify_announce>
 800b114:	f885 06d6 	strb.w	r0, [r5, #1750]	; 0x6d6
			if (!bmca_data->rcvd_msg) {
 800b118:	2800      	cmp	r0, #0
 800b11a:	d1b0      	bne.n	800b07e <gptp_mi_port_announce_receive_state_machine+0x4e>
				net_pkt_unref(bmca_data->rcvd_announce_ptr);
 800b11c:	f8d5 0678 	ldr.w	r0, [r5, #1656]	; 0x678
 800b120:	f00f f93a 	bl	801a398 <net_pkt_unref>
				bmca_data->rcvd_announce_ptr = NULL;
 800b124:	2300      	movs	r3, #0
 800b126:	f8c5 3678 	str.w	r3, [r5, #1656]	; 0x678
}
 800b12a:	e7a8      	b.n	800b07e <gptp_mi_port_announce_receive_state_machine+0x4e>
 800b12c:	20001470 	.word	0x20001470

0800b130 <rcv_info>:
{
 800b130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b132:	4605      	mov	r5, r0
	bmca_data = GPTP_PORT_BMCA_DATA(port);
 800b134:	3801      	subs	r0, #1
	announce = GPTP_ANNOUNCE(bmca_data->rcvd_announce_ptr);
 800b136:	4f0b      	ldr	r7, [pc, #44]	; (800b164 <rcv_info+0x34>)
 800b138:	2464      	movs	r4, #100	; 0x64
 800b13a:	fb04 f400 	mul.w	r4, r4, r0
 800b13e:	193e      	adds	r6, r7, r4
 800b140:	f8d6 0678 	ldr.w	r0, [r6, #1656]	; 0x678
 800b144:	f00e f81b 	bl	801917e <gptp_get_hdr>
	bmca_data->message_steps_removed = announce->steps_removed;
 800b148:	f8b0 303d 	ldrh.w	r3, [r0, #61]	; 0x3d
 800b14c:	f8a6 36d2 	strh.w	r3, [r6, #1746]	; 0x6d2
	return compare_priority_vectors(&bmca_data->port_priority,
 800b150:	f504 64d3 	add.w	r4, r4, #1688	; 0x698
 800b154:	462a      	mov	r2, r5
 800b156:	f8d6 1678 	ldr.w	r1, [r6, #1656]	; 0x678
 800b15a:	1938      	adds	r0, r7, r4
 800b15c:	f00e f8b3 	bl	80192c6 <compare_priority_vectors>
}
 800b160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b162:	bf00      	nop
 800b164:	20001470 	.word	0x20001470

0800b168 <gptp_mi_port_announce_transmit_state_machine>:
		gptp_send_announce(port, pkt);
	}
}

static void gptp_mi_port_announce_transmit_state_machine(int port)
{
 800b168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b16c:	b083      	sub	sp, #12
 800b16e:	4605      	mov	r5, r0
	struct gptp_port_ds *port_ds;
	struct gptp_global_ds *global_ds;
	struct gptp_port_announce_transmit_state *state;
	struct gptp_port_bmca_data *bmca_data;

	port_ds = GPTP_PORT_DS(port);
 800b170:	1e44      	subs	r4, r0, #1
	state = &GPTP_PORT_STATE(port)->pa_transmit;

	/* Reset interval as defined in AnnounceIntervalSetting
	 * state machine.
	 */
	if (port_ds->ptt_port_enabled && !port_ds->prev_ptt_port_enabled) {
 800b172:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800b176:	4b63      	ldr	r3, [pc, #396]	; (800b304 <gptp_mi_port_announce_transmit_state_machine+0x19c>)
 800b178:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800b17c:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 800b180:	f013 0f01 	tst.w	r3, #1
 800b184:	d008      	beq.n	800b198 <gptp_mi_port_announce_transmit_state_machine+0x30>
 800b186:	4613      	mov	r3, r2
 800b188:	4a5e      	ldr	r2, [pc, #376]	; (800b304 <gptp_mi_port_announce_transmit_state_machine+0x19c>)
 800b18a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800b18e:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 800b192:	f013 0f02 	tst.w	r3, #2
 800b196:	d00d      	beq.n	800b1b4 <gptp_mi_port_announce_transmit_state_machine+0x4c>
		gptp_update_announce_interval(port, GPTP_ITV_SET_TO_INIT);
	}

	switch (state->state) {
 800b198:	4a5a      	ldr	r2, [pc, #360]	; (800b304 <gptp_mi_port_announce_transmit_state_machine+0x19c>)
 800b19a:	f44f 735a 	mov.w	r3, #872	; 0x368
 800b19e:	fb03 2304 	mla	r3, r3, r4, r2
 800b1a2:	f893 3668 	ldrb.w	r3, [r3, #1640]	; 0x668
 800b1a6:	2b03      	cmp	r3, #3
 800b1a8:	f200 80a2 	bhi.w	800b2f0 <gptp_mi_port_announce_transmit_state_machine+0x188>
 800b1ac:	e8df f003 	tbb	[pc, r3]
 800b1b0:	430d9206 	.word	0x430d9206
		gptp_update_announce_interval(port, GPTP_ITV_SET_TO_INIT);
 800b1b4:	217e      	movs	r1, #126	; 0x7e
 800b1b6:	f7fd fc1f 	bl	80089f8 <gptp_update_announce_interval>
 800b1ba:	e7ed      	b.n	800b198 <gptp_mi_port_announce_transmit_state_machine+0x30>
	case GPTP_PA_TRANSMIT_INIT:
		bmca_data->new_info = true;
 800b1bc:	4a51      	ldr	r2, [pc, #324]	; (800b304 <gptp_mi_port_announce_transmit_state_machine+0x19c>)
 800b1be:	2364      	movs	r3, #100	; 0x64
 800b1c0:	fb03 2304 	mla	r3, r3, r4, r2
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	f883 26d8 	strb.w	r2, [r3, #1752]	; 0x6d8
		__fallthrough;

	case GPTP_PA_TRANSMIT_IDLE:
		k_timer_stop(&state->ann_send_periodic_timer);
 800b1ca:	f44f 785a 	mov.w	r8, #872	; 0x368
 800b1ce:	fb08 f804 	mul.w	r8, r8, r4
 800b1d2:	f508 67c6 	add.w	r7, r8, #1584	; 0x630
 800b1d6:	f8df 912c 	ldr.w	r9, [pc, #300]	; 800b304 <gptp_mi_port_announce_transmit_state_machine+0x19c>
 800b1da:	444f      	add	r7, r9
	z_impl_k_timer_stop(timer);
 800b1dc:	4638      	mov	r0, r7
 800b1de:	f011 fa53 	bl	801c688 <z_impl_k_timer_stop>
		state->ann_trigger = false;
 800b1e2:	44c8      	add	r8, r9
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f888 3669 	strb.w	r3, [r8, #1641]	; 0x669
		k_timer_start(&state->ann_send_periodic_timer,
			      K_MSEC(gptp_uscaled_ns_to_timer_ms(
 800b1ea:	2664      	movs	r6, #100	; 0x64
 800b1ec:	fb06 f604 	mul.w	r6, r6, r4
 800b1f0:	f506 66d6 	add.w	r6, r6, #1712	; 0x6b0
 800b1f4:	444e      	add	r6, r9
 800b1f6:	3604      	adds	r6, #4
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	f7fd faf9 	bl	80087f0 <gptp_uscaled_ns_to_timer_ms>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	dc36      	bgt.n	800b270 <gptp_mi_port_announce_transmit_state_machine+0x108>
 800b202:	2000      	movs	r0, #0
 800b204:	2100      	movs	r1, #0
 800b206:	008e      	lsls	r6, r1, #2
 800b208:	0082      	lsls	r2, r0, #2
 800b20a:	ea46 7390 	orr.w	r3, r6, r0, lsr #30
 800b20e:	1812      	adds	r2, r2, r0
 800b210:	eb41 0303 	adc.w	r3, r1, r3
 800b214:	1892      	adds	r2, r2, r2
 800b216:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 800b218:	2000      	movs	r0, #0
 800b21a:	2100      	movs	r1, #0
 800b21c:	e9cd 0100 	strd	r0, r1, [sp]
 800b220:	4638      	mov	r0, r7
 800b222:	f00b fc63 	bl	8016aec <z_impl_k_timer_start>
					     &bmca_data->announce_interval)),
			      K_NO_WAIT);

		state->state = GPTP_PA_TRANSMIT_POST_IDLE;
 800b226:	4a37      	ldr	r2, [pc, #220]	; (800b304 <gptp_mi_port_announce_transmit_state_machine+0x19c>)
 800b228:	f44f 735a 	mov.w	r3, #872	; 0x368
 800b22c:	fb03 2304 	mla	r3, r3, r4, r2
 800b230:	2203      	movs	r2, #3
 800b232:	f883 2668 	strb.w	r2, [r3, #1640]	; 0x668
		__fallthrough;

	case GPTP_PA_TRANSMIT_POST_IDLE:
		if (IS_SELECTED(global_ds, port) &&
 800b236:	4b33      	ldr	r3, [pc, #204]	; (800b304 <gptp_mi_port_announce_transmit_state_machine+0x19c>)
 800b238:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800b23c:	40e3      	lsrs	r3, r4
 800b23e:	f013 0301 	ands.w	r3, r3, #1
 800b242:	d01a      	beq.n	800b27a <gptp_mi_port_announce_transmit_state_machine+0x112>
		    !bmca_data->updt_info &&
 800b244:	492f      	ldr	r1, [pc, #188]	; (800b304 <gptp_mi_port_announce_transmit_state_machine+0x19c>)
 800b246:	2264      	movs	r2, #100	; 0x64
 800b248:	fb02 1204 	mla	r2, r2, r4, r1
 800b24c:	f892 26d7 	ldrb.w	r2, [r2, #1751]	; 0x6d7
		if (IS_SELECTED(global_ds, port) &&
 800b250:	b99a      	cbnz	r2, 800b27a <gptp_mi_port_announce_transmit_state_machine+0x112>
		    state->ann_trigger) {
 800b252:	f44f 725a 	mov.w	r2, #872	; 0x368
 800b256:	fb02 1204 	mla	r2, r2, r4, r1
 800b25a:	f892 2669 	ldrb.w	r2, [r2, #1641]	; 0x669
		    !bmca_data->updt_info &&
 800b25e:	b162      	cbz	r2, 800b27a <gptp_mi_port_announce_transmit_state_machine+0x112>

			state->state = GPTP_PA_TRANSMIT_PERIODIC;
 800b260:	f44f 735a 	mov.w	r3, #872	; 0x368
 800b264:	fb03 1404 	mla	r4, r3, r4, r1
 800b268:	2301      	movs	r3, #1
 800b26a:	f884 3668 	strb.w	r3, [r4, #1640]	; 0x668
 800b26e:	e03f      	b.n	800b2f0 <gptp_mi_port_announce_transmit_state_machine+0x188>
			      K_MSEC(gptp_uscaled_ns_to_timer_ms(
 800b270:	4630      	mov	r0, r6
 800b272:	f7fd fabd 	bl	80087f0 <gptp_uscaled_ns_to_timer_ms>
 800b276:	17c1      	asrs	r1, r0, #31
 800b278:	e7c5      	b.n	800b206 <gptp_mi_port_announce_transmit_state_machine+0x9e>

		} else if (IS_SELECTED(global_ds, port) &&
 800b27a:	b3cb      	cbz	r3, 800b2f0 <gptp_mi_port_announce_transmit_state_machine+0x188>
			   !bmca_data->updt_info &&
 800b27c:	4a21      	ldr	r2, [pc, #132]	; (800b304 <gptp_mi_port_announce_transmit_state_machine+0x19c>)
 800b27e:	2364      	movs	r3, #100	; 0x64
 800b280:	fb03 2304 	mla	r3, r3, r4, r2
 800b284:	f893 36d7 	ldrb.w	r3, [r3, #1751]	; 0x6d7
		} else if (IS_SELECTED(global_ds, port) &&
 800b288:	bb93      	cbnz	r3, 800b2f0 <gptp_mi_port_announce_transmit_state_machine+0x188>
			   !state->ann_trigger &&
 800b28a:	f44f 735a 	mov.w	r3, #872	; 0x368
 800b28e:	fb03 2304 	mla	r3, r3, r4, r2
 800b292:	f893 3669 	ldrb.w	r3, [r3, #1641]	; 0x669
			   !bmca_data->updt_info &&
 800b296:	bb5b      	cbnz	r3, 800b2f0 <gptp_mi_port_announce_transmit_state_machine+0x188>
			   (global_ds->selected_role[port] ==
 800b298:	4613      	mov	r3, r2
 800b29a:	442b      	add	r3, r5
 800b29c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
			   !state->ann_trigger &&
 800b2a0:	2b05      	cmp	r3, #5
 800b2a2:	d125      	bne.n	800b2f0 <gptp_mi_port_announce_transmit_state_machine+0x188>
			    GPTP_PORT_MASTER) &&
			   bmca_data->new_info) {
 800b2a4:	2364      	movs	r3, #100	; 0x64
 800b2a6:	fb03 2304 	mla	r3, r3, r4, r2
 800b2aa:	f893 36d8 	ldrb.w	r3, [r3, #1752]	; 0x6d8
			    GPTP_PORT_MASTER) &&
 800b2ae:	b1fb      	cbz	r3, 800b2f0 <gptp_mi_port_announce_transmit_state_machine+0x188>

			bmca_data->new_info = false;
 800b2b0:	4616      	mov	r6, r2
 800b2b2:	2364      	movs	r3, #100	; 0x64
 800b2b4:	fb03 2304 	mla	r3, r3, r4, r2
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 26d8 	strb.w	r2, [r3, #1752]	; 0x6d8
			tx_announce(port);
 800b2be:	4628      	mov	r0, r5
 800b2c0:	f00e f838 	bl	8019334 <tx_announce>
			state->state = GPTP_PA_TRANSMIT_IDLE;
 800b2c4:	f44f 735a 	mov.w	r3, #872	; 0x368
 800b2c8:	fb03 6404 	mla	r4, r3, r4, r6
 800b2cc:	2302      	movs	r3, #2
 800b2ce:	f884 3668 	strb.w	r3, [r4, #1640]	; 0x668
 800b2d2:	e00d      	b.n	800b2f0 <gptp_mi_port_announce_transmit_state_machine+0x188>
		}

		break;

	case GPTP_PA_TRANSMIT_PERIODIC:
		if (global_ds->selected_role[port] == GPTP_PORT_MASTER) {
 800b2d4:	480b      	ldr	r0, [pc, #44]	; (800b304 <gptp_mi_port_announce_transmit_state_machine+0x19c>)
 800b2d6:	4405      	add	r5, r0
 800b2d8:	f895 3114 	ldrb.w	r3, [r5, #276]	; 0x114
 800b2dc:	2b05      	cmp	r3, #5
 800b2de:	d00a      	beq.n	800b2f6 <gptp_mi_port_announce_transmit_state_machine+0x18e>
			bmca_data->new_info = true;
		}
		state->state = GPTP_PA_TRANSMIT_IDLE;
 800b2e0:	4b08      	ldr	r3, [pc, #32]	; (800b304 <gptp_mi_port_announce_transmit_state_machine+0x19c>)
 800b2e2:	f44f 725a 	mov.w	r2, #872	; 0x368
 800b2e6:	fb02 3404 	mla	r4, r2, r4, r3
 800b2ea:	2302      	movs	r3, #2
 800b2ec:	f884 3668 	strb.w	r3, [r4, #1640]	; 0x668
		break;
	}
}
 800b2f0:	b003      	add	sp, #12
 800b2f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			bmca_data->new_info = true;
 800b2f6:	2364      	movs	r3, #100	; 0x64
 800b2f8:	fb03 0304 	mla	r3, r3, r4, r0
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 26d8 	strb.w	r2, [r3, #1752]	; 0x6d8
 800b302:	e7ed      	b.n	800b2e0 <gptp_mi_port_announce_transmit_state_machine+0x178>
 800b304:	20001470 	.word	0x20001470

0800b308 <gptp_mi_clk_slave_sync_state_machine>:
{
 800b308:	b508      	push	{r3, lr}
	switch (state->state) {
 800b30a:	4b0f      	ldr	r3, [pc, #60]	; (800b348 <gptp_mi_clk_slave_sync_state_machine+0x40>)
 800b30c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800b310:	b113      	cbz	r3, 800b318 <gptp_mi_clk_slave_sync_state_machine+0x10>
 800b312:	2b01      	cmp	r3, #1
 800b314:	d008      	beq.n	800b328 <gptp_mi_clk_slave_sync_state_machine+0x20>
}
 800b316:	bd08      	pop	{r3, pc}
		state->rcvd_pss = false;
 800b318:	4b0b      	ldr	r3, [pc, #44]	; (800b348 <gptp_mi_clk_slave_sync_state_machine+0x40>)
 800b31a:	2200      	movs	r2, #0
 800b31c:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
		state->state = GPTP_CLK_SLAVE_SYNC_SEND_SYNC_IND;
 800b320:	2201      	movs	r2, #1
 800b322:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
		break;
 800b326:	e7f6      	b.n	800b316 <gptp_mi_clk_slave_sync_state_machine+0xe>
		if (state->rcvd_pss) {
 800b328:	4b07      	ldr	r3, [pc, #28]	; (800b348 <gptp_mi_clk_slave_sync_state_machine+0x40>)
 800b32a:	f893 31fd 	ldrb.w	r3, [r3, #509]	; 0x1fd
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d0f1      	beq.n	800b316 <gptp_mi_clk_slave_sync_state_machine+0xe>
			state->rcvd_pss = false;
 800b332:	4b05      	ldr	r3, [pc, #20]	; (800b348 <gptp_mi_clk_slave_sync_state_machine+0x40>)
 800b334:	2200      	movs	r2, #0
 800b336:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
			gptp_mi_clk_slave_sync_compute();
 800b33a:	f7f6 f8b1 	bl	80014a0 <gptp_mi_clk_slave_sync_compute>
			gptp_update_local_port_clock();
 800b33e:	f7f6 fa73 	bl	8001828 <gptp_update_local_port_clock>
			gptp_call_phase_dis_cb();
 800b342:	f7fd fc2d 	bl	8008ba0 <gptp_call_phase_dis_cb>
}
 800b346:	e7e6      	b.n	800b316 <gptp_mi_clk_slave_sync_state_machine+0xe>
 800b348:	20001470 	.word	0x20001470

0800b34c <gptp_mi_init_site_sync_sync_sm>:
{
 800b34c:	b510      	push	{r4, lr}
	(void)memset(site_ss, 0, sizeof(struct gptp_site_sync_sync_state));
 800b34e:	4c05      	ldr	r4, [pc, #20]	; (800b364 <gptp_mi_init_site_sync_sync_sm+0x18>)
 800b350:	2268      	movs	r2, #104	; 0x68
 800b352:	2100      	movs	r1, #0
 800b354:	4620      	mov	r0, r4
 800b356:	f011 fa90 	bl	801c87a <memset>
	site_ss->state = GPTP_SSS_INITIALIZING;
 800b35a:	2300      	movs	r3, #0
 800b35c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 800b360:	bd10      	pop	{r4, pc}
 800b362:	bf00      	nop
 800b364:	20001600 	.word	0x20001600

0800b368 <gptp_mi_init_clock_slave_sync_sm>:
	(void)memset(clk_ss, 0, sizeof(struct gptp_clk_slave_sync_state));
 800b368:	4b02      	ldr	r3, [pc, #8]	; (800b374 <gptp_mi_init_clock_slave_sync_sm+0xc>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	601a      	str	r2, [r3, #0]
 800b36e:	605a      	str	r2, [r3, #4]
	clk_ss->state = GPTP_CLK_SLAVE_SYNC_INITIALIZING;
 800b370:	711a      	strb	r2, [r3, #4]
}
 800b372:	4770      	bx	lr
 800b374:	20001668 	.word	0x20001668

0800b378 <gptp_mi_init_clock_master_sync_rcv_sm>:
{
 800b378:	b510      	push	{r4, lr}
	(void)memset(cms_rcv, 0, sizeof(struct gptp_clk_master_sync_rcv_state));
 800b37a:	4c05      	ldr	r4, [pc, #20]	; (800b390 <gptp_mi_init_clock_master_sync_rcv_sm+0x18>)
 800b37c:	2230      	movs	r2, #48	; 0x30
 800b37e:	2100      	movs	r1, #0
 800b380:	4620      	mov	r0, r4
 800b382:	f011 fa7a 	bl	801c87a <memset>
	cms_rcv->state = GPTP_CMS_RCV_INITIALIZING;
 800b386:	2300      	movs	r3, #0
 800b388:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 800b38c:	bd10      	pop	{r4, pc}
 800b38e:	bf00      	nop
 800b390:	200016f0 	.word	0x200016f0

0800b394 <gptp_mi_clk_master_sync_offset_state_machine>:
	switch (state->state) {
 800b394:	4b1f      	ldr	r3, [pc, #124]	; (800b414 <gptp_mi_clk_master_sync_offset_state_machine+0x80>)
 800b396:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b39a:	b113      	cbz	r3, 800b3a2 <gptp_mi_clk_master_sync_offset_state_machine+0xe>
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d008      	beq.n	800b3b2 <gptp_mi_clk_master_sync_offset_state_machine+0x1e>
 800b3a0:	4770      	bx	lr
		state->rcvd_sync_receipt_time = false;
 800b3a2:	4b1c      	ldr	r3, [pc, #112]	; (800b414 <gptp_mi_clk_master_sync_offset_state_machine+0x80>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
		state->state = GPTP_CMS_OFFSET_INDICATION;
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
		break;
 800b3b0:	4770      	bx	lr
		if (!state->rcvd_sync_receipt_time) {
 800b3b2:	4b18      	ldr	r3, [pc, #96]	; (800b414 <gptp_mi_clk_master_sync_offset_state_machine+0x80>)
 800b3b4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b3b8:	b353      	cbz	r3, 800b410 <gptp_mi_clk_master_sync_offset_state_machine+0x7c>
		state->rcvd_sync_receipt_time = false;
 800b3ba:	4b16      	ldr	r3, [pc, #88]	; (800b414 <gptp_mi_clk_master_sync_offset_state_machine+0x80>)
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
		if (global_ds->selected_role[0] == GPTP_PORT_PASSIVE) {
 800b3c2:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800b3c6:	2b06      	cmp	r3, #6
 800b3c8:	d018      	beq.n	800b3fc <gptp_mi_clk_master_sync_offset_state_machine+0x68>
		} else if (global_ds->clk_src_time_base_indicator_prev
 800b3ca:	4b12      	ldr	r3, [pc, #72]	; (800b414 <gptp_mi_clk_master_sync_offset_state_machine+0x80>)
 800b3cc:	f8b3 2110 	ldrh.w	r2, [r3, #272]	; 0x110
			   != global_ds->clk_src_time_base_indicator) {
 800b3d0:	f8b3 310e 	ldrh.w	r3, [r3, #270]	; 0x10e
		} else if (global_ds->clk_src_time_base_indicator_prev
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d01b      	beq.n	800b410 <gptp_mi_clk_master_sync_offset_state_machine+0x7c>
{
 800b3d8:	b410      	push	{r4}
			memcpy(&global_ds->clk_src_phase_offset,
 800b3da:	4b0e      	ldr	r3, [pc, #56]	; (800b414 <gptp_mi_clk_master_sync_offset_state_machine+0x80>)
 800b3dc:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 800b3e0:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b3e2:	f8c3 00f2 	str.w	r0, [r3, #242]	; 0xf2
 800b3e6:	f8c3 10f6 	str.w	r1, [r3, #246]	; 0xf6
 800b3ea:	f8c3 20fa 	str.w	r2, [r3, #250]	; 0xfa
				global_ds->last_gm_freq_change;
 800b3ee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
			global_ds->clk_src_freq_offset =
 800b3f2:	e9c3 0104 	strd	r0, r1, [r3, #16]
}
 800b3f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3fa:	4770      	bx	lr
			memset(&global_ds->clk_src_phase_offset, 0x0,
 800b3fc:	4b06      	ldr	r3, [pc, #24]	; (800b418 <gptp_mi_clk_master_sync_offset_state_machine+0x84>)
 800b3fe:	601a      	str	r2, [r3, #0]
 800b400:	605a      	str	r2, [r3, #4]
 800b402:	609a      	str	r2, [r3, #8]
			global_ds->clk_src_freq_offset = 0;
 800b404:	3bf2      	subs	r3, #242	; 0xf2
 800b406:	2000      	movs	r0, #0
 800b408:	2100      	movs	r1, #0
 800b40a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b40e:	4770      	bx	lr
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	20001470 	.word	0x20001470
 800b418:	20001562 	.word	0x20001562

0800b41c <compute_best_vector>:
{
 800b41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)memset(gm_prio, 0, sizeof(struct gptp_priority_vector));
 800b420:	4b71      	ldr	r3, [pc, #452]	; (800b5e8 <compute_best_vector+0x1cc>)
 800b422:	2500      	movs	r5, #0
 800b424:	601d      	str	r5, [r3, #0]
 800b426:	60dd      	str	r5, [r3, #12]
	gm_prio->root_system_id.grand_master_prio1 = default_ds->priority1;
 800b428:	f1a3 02aa 	sub.w	r2, r3, #170	; 0xaa
 800b42c:	f893 1082 	ldrb.w	r1, [r3, #130]	; 0x82
 800b430:	f803 1c0c 	strb.w	r1, [r3, #-12]
	gm_prio->root_system_id.grand_master_prio2 = default_ds->priority2;
 800b434:	f893 1083 	ldrb.w	r1, [r3, #131]	; 0x83
 800b438:	f803 1c07 	strb.w	r1, [r3, #-7]
		default_ds->clk_quality.clock_class;
 800b43c:	f893 106e 	ldrb.w	r1, [r3, #110]	; 0x6e
	gm_prio->root_system_id.clk_quality.clock_class =
 800b440:	f803 1c0b 	strb.w	r1, [r3, #-11]
		default_ds->clk_quality.clock_accuracy;
 800b444:	f893 106f 	ldrb.w	r1, [r3, #111]	; 0x6f
	gm_prio->root_system_id.clk_quality.clock_accuracy =
 800b448:	f803 1c0a 	strb.w	r1, [r3, #-10]
		htons(default_ds->clk_quality.offset_scaled_log_var);
 800b44c:	f8b3 0070 	ldrh.w	r0, [r3, #112]	; 0x70
 800b450:	0a01      	lsrs	r1, r0, #8
	gm_prio->root_system_id.clk_quality.offset_scaled_log_var =
 800b452:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800b456:	f823 1c09 	strh.w	r1, [r3, #-9]
	memcpy(gm_prio->src_port_id.clk_id, default_ds->clk_id,
 800b45a:	4619      	mov	r1, r3
 800b45c:	f851 0f73 	ldr.w	r0, [r1, #115]!
 800b460:	6849      	ldr	r1, [r1, #4]
 800b462:	6058      	str	r0, [r3, #4]
 800b464:	6099      	str	r1, [r3, #8]
	memcpy(gm_prio->root_system_id.grand_master_id, default_ds->clk_id,
 800b466:	3b06      	subs	r3, #6
 800b468:	c303      	stmia	r3!, {r0, r1}
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800b46a:	2701      	movs	r7, #1
	best_vector = gm_prio;
 800b46c:	f102 049e 	add.w	r4, r2, #158	; 0x9e
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800b470:	e07d      	b.n	800b56e <compute_best_vector+0x152>
		challenger = &GPTP_PORT_BMCA_DATA(port)->port_priority;
 800b472:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
 800b476:	2064      	movs	r0, #100	; 0x64
 800b478:	fb00 f008 	mul.w	r0, r0, r8
 800b47c:	f500 60d3 	add.w	r0, r0, #1688	; 0x698
 800b480:	4a5a      	ldr	r2, [pc, #360]	; (800b5ec <compute_best_vector+0x1d0>)
 800b482:	1886      	adds	r6, r0, r2
		if (pa_info_state->ann_expired ||
 800b484:	f44f 735a 	mov.w	r3, #872	; 0x368
 800b488:	fb03 2308 	mla	r3, r3, r8, r2
 800b48c:	f893 3629 	ldrb.w	r3, [r3, #1577]	; 0x629
 800b490:	2b00      	cmp	r3, #0
 800b492:	d16b      	bne.n	800b56c <compute_best_vector+0x150>
		    (global_ds->gm_present &&
 800b494:	f892 3116 	ldrb.w	r3, [r2, #278]	; 0x116
		if (pa_info_state->ann_expired ||
 800b498:	b13b      	cbz	r3, 800b4aa <compute_best_vector+0x8e>
		     pss_rcv->rcv_sync_receipt_timeout_timer_expired)) {
 800b49a:	f44f 735a 	mov.w	r3, #872	; 0x368
 800b49e:	fb03 2308 	mla	r3, r3, r8, r2
 800b4a2:	f893 34ca 	ldrb.w	r3, [r3, #1226]	; 0x4ca
		    (global_ds->gm_present &&
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d160      	bne.n	800b56c <compute_best_vector+0x150>
		if (memcmp(challenger->src_port_id.clk_id, default_ds->clk_id,
 800b4aa:	2364      	movs	r3, #100	; 0x64
 800b4ac:	fb03 f308 	mul.w	r3, r3, r8
 800b4b0:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 800b4b4:	484d      	ldr	r0, [pc, #308]	; (800b5ec <compute_best_vector+0x1d0>)
 800b4b6:	2208      	movs	r2, #8
 800b4b8:	f200 111d 	addw	r1, r0, #285	; 0x11d
 800b4bc:	4418      	add	r0, r3
 800b4be:	f011 f9ad 	bl	801c81c <memcmp>
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	d052      	beq.n	800b56c <compute_best_vector+0x150>
		if (best_port == 0) {
 800b4c6:	2d00      	cmp	r5, #0
 800b4c8:	d149      	bne.n	800b55e <compute_best_vector+0x142>
			tmp = memcmp(&challenger->root_system_id,
 800b4ca:	2364      	movs	r3, #100	; 0x64
 800b4cc:	fb03 f308 	mul.w	r3, r3, r8
 800b4d0:	f503 63d3 	add.w	r3, r3, #1688	; 0x698
 800b4d4:	220e      	movs	r2, #14
 800b4d6:	4621      	mov	r1, r4
 800b4d8:	4844      	ldr	r0, [pc, #272]	; (800b5ec <compute_best_vector+0x1d0>)
 800b4da:	4418      	add	r0, r3
 800b4dc:	f011 f99e 	bl	801c81c <memcmp>
			if (tmp < 0) {
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	db01      	blt.n	800b4e8 <compute_best_vector+0xcc>
			} else if (tmp > 0) {
 800b4e4:	dd02      	ble.n	800b4ec <compute_best_vector+0xd0>
 800b4e6:	e041      	b.n	800b56c <compute_best_vector+0x150>
				best_port = port;
 800b4e8:	463d      	mov	r5, r7
				best_vector = challenger;
 800b4ea:	4634      	mov	r4, r6
			tmp = (int)challenger->steps_removed -
 800b4ec:	4a3f      	ldr	r2, [pc, #252]	; (800b5ec <compute_best_vector+0x1d0>)
 800b4ee:	2364      	movs	r3, #100	; 0x64
 800b4f0:	fb03 2308 	mla	r3, r3, r8, r2
 800b4f4:	f8b3 26a6 	ldrh.w	r2, [r3, #1702]	; 0x6a6
				((int)ntohs(best_vector->steps_removed) + 1);
 800b4f8:	89e1      	ldrh	r1, [r4, #14]
 800b4fa:	0a0b      	lsrs	r3, r1, #8
 800b4fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b500:	b29b      	uxth	r3, r3
 800b502:	3301      	adds	r3, #1
			if (tmp < 0) {
 800b504:	1ad3      	subs	r3, r2, r3
 800b506:	d411      	bmi.n	800b52c <compute_best_vector+0x110>
			} else if (tmp > 0) {
 800b508:	2b00      	cmp	r3, #0
 800b50a:	dc2f      	bgt.n	800b56c <compute_best_vector+0x150>
			tmp = memcmp(&challenger->src_port_id,
 800b50c:	2364      	movs	r3, #100	; 0x64
 800b50e:	fb03 f308 	mul.w	r3, r3, r8
 800b512:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 800b516:	220a      	movs	r2, #10
 800b518:	f104 0110 	add.w	r1, r4, #16
 800b51c:	4833      	ldr	r0, [pc, #204]	; (800b5ec <compute_best_vector+0x1d0>)
 800b51e:	4418      	add	r0, r3
 800b520:	f011 f97c 	bl	801c81c <memcmp>
			if (tmp < 0) {
 800b524:	2800      	cmp	r0, #0
 800b526:	db04      	blt.n	800b532 <compute_best_vector+0x116>
			} else if (tmp > 0) {
 800b528:	dd05      	ble.n	800b536 <compute_best_vector+0x11a>
 800b52a:	e01f      	b.n	800b56c <compute_best_vector+0x150>
				best_port = port;
 800b52c:	463d      	mov	r5, r7
				best_vector = challenger;
 800b52e:	4634      	mov	r4, r6
 800b530:	e7ec      	b.n	800b50c <compute_best_vector+0xf0>
				best_port = port;
 800b532:	463d      	mov	r5, r7
				best_vector = challenger;
 800b534:	4634      	mov	r4, r6
			if (ntohs(challenger->port_number) <
 800b536:	4b2d      	ldr	r3, [pc, #180]	; (800b5ec <compute_best_vector+0x1d0>)
 800b538:	2264      	movs	r2, #100	; 0x64
 800b53a:	fb02 3808 	mla	r8, r2, r8, r3
 800b53e:	f8b8 36b2 	ldrh.w	r3, [r8, #1714]	; 0x6b2
 800b542:	0a1a      	lsrs	r2, r3, #8
 800b544:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800b548:	b292      	uxth	r2, r2
			    ntohs(best_vector->port_number)) {
 800b54a:	8b61      	ldrh	r1, [r4, #26]
 800b54c:	0a0b      	lsrs	r3, r1, #8
 800b54e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b552:	b29b      	uxth	r3, r3
			if (ntohs(challenger->port_number) <
 800b554:	429a      	cmp	r2, r3
 800b556:	d209      	bcs.n	800b56c <compute_best_vector+0x150>
				best_port = port;
 800b558:	463d      	mov	r5, r7
				best_vector = challenger;
 800b55a:	4634      	mov	r4, r6
 800b55c:	e006      	b.n	800b56c <compute_best_vector+0x150>
			if (memcmp(challenger, best_vector,
 800b55e:	221c      	movs	r2, #28
 800b560:	4621      	mov	r1, r4
 800b562:	4630      	mov	r0, r6
 800b564:	f011 f95a 	bl	801c81c <memcmp>
 800b568:	2800      	cmp	r0, #0
 800b56a:	db3a      	blt.n	800b5e2 <compute_best_vector+0x1c6>
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800b56c:	3701      	adds	r7, #1
 800b56e:	4b1f      	ldr	r3, [pc, #124]	; (800b5ec <compute_best_vector+0x1d0>)
 800b570:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800b574:	42bb      	cmp	r3, r7
 800b576:	f6bf af7c 	bge.w	800b472 <compute_best_vector+0x56>
	if (best_port != 0) {
 800b57a:	b37d      	cbz	r5, 800b5dc <compute_best_vector+0x1c0>
		if (&global_ds->gm_priority.root_system_id !=
 800b57c:	4a1c      	ldr	r2, [pc, #112]	; (800b5f0 <compute_best_vector+0x1d4>)
 800b57e:	4294      	cmp	r4, r2
 800b580:	d00c      	beq.n	800b59c <compute_best_vector+0x180>
			memcpy(&global_ds->gm_priority.root_system_id,
 800b582:	3a9e      	subs	r2, #158	; 0x9e
 800b584:	6826      	ldr	r6, [r4, #0]
 800b586:	6860      	ldr	r0, [r4, #4]
 800b588:	68a1      	ldr	r1, [r4, #8]
 800b58a:	f8c2 609e 	str.w	r6, [r2, #158]	; 0x9e
 800b58e:	f8c2 00a2 	str.w	r0, [r2, #162]	; 0xa2
 800b592:	f8c2 10a6 	str.w	r1, [r2, #166]	; 0xa6
 800b596:	89a3      	ldrh	r3, [r4, #12]
 800b598:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
			htons(ntohs(best_vector->steps_removed) + 1);
 800b59c:	89e2      	ldrh	r2, [r4, #14]
 800b59e:	0a13      	lsrs	r3, r2, #8
 800b5a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800b5ac:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
		global_ds->gm_priority.steps_removed =
 800b5b0:	4a0e      	ldr	r2, [pc, #56]	; (800b5ec <compute_best_vector+0x1d0>)
 800b5b2:	f8a2 30ac 	strh.w	r3, [r2, #172]	; 0xac
		    &best_vector->src_port_id) {
 800b5b6:	f104 0310 	add.w	r3, r4, #16
		if (&global_ds->gm_priority.src_port_id !=
 800b5ba:	32ae      	adds	r2, #174	; 0xae
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d009      	beq.n	800b5d4 <compute_best_vector+0x1b8>
			memcpy(&global_ds->gm_priority.src_port_id,
 800b5c0:	3aae      	subs	r2, #174	; 0xae
 800b5c2:	6920      	ldr	r0, [r4, #16]
 800b5c4:	6961      	ldr	r1, [r4, #20]
 800b5c6:	f8c2 00ae 	str.w	r0, [r2, #174]	; 0xae
 800b5ca:	f8c2 10b2 	str.w	r1, [r2, #178]	; 0xb2
 800b5ce:	8b23      	ldrh	r3, [r4, #24]
 800b5d0:	f8a2 30b6 	strh.w	r3, [r2, #182]	; 0xb6
		global_ds->gm_priority.port_number = best_vector->port_number;
 800b5d4:	8b62      	ldrh	r2, [r4, #26]
 800b5d6:	4b05      	ldr	r3, [pc, #20]	; (800b5ec <compute_best_vector+0x1d0>)
 800b5d8:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
}
 800b5dc:	4628      	mov	r0, r5
 800b5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				best_port = port;
 800b5e2:	463d      	mov	r5, r7
				best_vector = challenger;
 800b5e4:	4634      	mov	r4, r6
 800b5e6:	e7c1      	b.n	800b56c <compute_best_vector+0x150>
 800b5e8:	2000151a 	.word	0x2000151a
 800b5ec:	20001470 	.word	0x20001470
 800b5f0:	2000150e 	.word	0x2000150e

0800b5f4 <gptp_mi_site_ss_prepare_pss_send>:
{
 800b5f4:	b508      	push	{r3, lr}
	memcpy(&state->pss_send, state->pss_rcv_ptr,
 800b5f6:	4804      	ldr	r0, [pc, #16]	; (800b608 <gptp_mi_site_ss_prepare_pss_send+0x14>)
 800b5f8:	2260      	movs	r2, #96	; 0x60
 800b5fa:	f8d0 11f0 	ldr.w	r1, [r0, #496]	; 0x1f0
 800b5fe:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 800b602:	f011 f919 	bl	801c838 <memcpy>
}
 800b606:	bd08      	pop	{r3, pc}
 800b608:	20001470 	.word	0x20001470

0800b60c <gptp_mi_site_sync_sync_state_machine>:
{
 800b60c:	b510      	push	{r4, lr}
	gm_present = GPTP_GLOBAL_DS()->gm_present;
 800b60e:	4b19      	ldr	r3, [pc, #100]	; (800b674 <gptp_mi_site_sync_sync_state_machine+0x68>)
 800b610:	f893 4116 	ldrb.w	r4, [r3, #278]	; 0x116
	if (!state->pss_rcv_ptr) {
 800b614:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800b618:	b13b      	cbz	r3, 800b62a <gptp_mi_site_sync_sync_state_machine+0x1e>
	local_port_number = state->pss_rcv_ptr->local_port_number;
 800b61a:	f8b3 0058 	ldrh.w	r0, [r3, #88]	; 0x58
	switch (state->state) {
 800b61e:	4b15      	ldr	r3, [pc, #84]	; (800b674 <gptp_mi_site_sync_sync_state_machine+0x68>)
 800b620:	f893 31f4 	ldrb.w	r3, [r3, #500]	; 0x1f4
 800b624:	b113      	cbz	r3, 800b62c <gptp_mi_site_sync_sync_state_machine+0x20>
 800b626:	2b01      	cmp	r3, #1
 800b628:	d008      	beq.n	800b63c <gptp_mi_site_sync_sync_state_machine+0x30>
}
 800b62a:	bd10      	pop	{r4, pc}
		state->rcvd_pss = false;
 800b62c:	4b11      	ldr	r3, [pc, #68]	; (800b674 <gptp_mi_site_sync_sync_state_machine+0x68>)
 800b62e:	2200      	movs	r2, #0
 800b630:	f883 21f5 	strb.w	r2, [r3, #501]	; 0x1f5
		state->state = GPTP_SSS_RECEIVING_SYNC;
 800b634:	2201      	movs	r2, #1
 800b636:	f883 21f4 	strb.w	r2, [r3, #500]	; 0x1f4
		break;
 800b63a:	e7f6      	b.n	800b62a <gptp_mi_site_sync_sync_state_machine+0x1e>
		if (state->rcvd_pss) {
 800b63c:	4b0d      	ldr	r3, [pc, #52]	; (800b674 <gptp_mi_site_sync_sync_state_machine+0x68>)
 800b63e:	f893 31f5 	ldrb.w	r3, [r3, #501]	; 0x1f5
 800b642:	2b00      	cmp	r3, #0
 800b644:	d0f1      	beq.n	800b62a <gptp_mi_site_sync_sync_state_machine+0x1e>
			state->rcvd_pss = false;
 800b646:	4b0b      	ldr	r3, [pc, #44]	; (800b674 <gptp_mi_site_sync_sync_state_machine+0x68>)
 800b648:	2200      	movs	r2, #0
 800b64a:	f883 21f5 	strb.w	r2, [r3, #501]	; 0x1f5
			if (gptp_is_slave_port(local_port_number) &&
 800b64e:	f7fc ffcf 	bl	80085f0 <gptp_is_slave_port>
 800b652:	2800      	cmp	r0, #0
 800b654:	d0e9      	beq.n	800b62a <gptp_mi_site_sync_sync_state_machine+0x1e>
 800b656:	2c00      	cmp	r4, #0
 800b658:	d0e7      	beq.n	800b62a <gptp_mi_site_sync_sync_state_machine+0x1e>
				gptp_mi_site_ss_prepare_pss_send();
 800b65a:	f7ff ffcb 	bl	800b5f4 <gptp_mi_site_ss_prepare_pss_send>
				gptp_mi_site_ss_send_to_pss();
 800b65e:	f7ff f961 	bl	800a924 <gptp_mi_site_ss_send_to_pss>
				clk_ss->pss_rcv_ptr = &state->pss_send;
 800b662:	4b04      	ldr	r3, [pc, #16]	; (800b674 <gptp_mi_site_sync_sync_state_machine+0x68>)
 800b664:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 800b668:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
				clk_ss->rcvd_pss = true;
 800b66c:	2201      	movs	r2, #1
 800b66e:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
 800b672:	e7da      	b.n	800b62a <gptp_mi_site_sync_sync_state_machine+0x1e>
 800b674:	20001470 	.word	0x20001470

0800b678 <gptp_change_port_state>:
	if (global_ds->selected_role[port] == state) {
 800b678:	4b05      	ldr	r3, [pc, #20]	; (800b690 <gptp_change_port_state+0x18>)
 800b67a:	4403      	add	r3, r0
 800b67c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800b680:	428b      	cmp	r3, r1
 800b682:	d003      	beq.n	800b68c <gptp_change_port_state+0x14>
	global_ds->selected_role[port] = state;
 800b684:	4b02      	ldr	r3, [pc, #8]	; (800b690 <gptp_change_port_state+0x18>)
 800b686:	4418      	add	r0, r3
 800b688:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
};
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	20001470 	.word	0x20001470

0800b694 <gptp_updt_role_disabled_tree>:
{
 800b694:	b510      	push	{r4, lr}
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800b696:	2401      	movs	r4, #1
 800b698:	4b10      	ldr	r3, [pc, #64]	; (800b6dc <gptp_updt_role_disabled_tree+0x48>)
 800b69a:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800b69e:	42a3      	cmp	r3, r4
 800b6a0:	db05      	blt.n	800b6ae <gptp_updt_role_disabled_tree+0x1a>
		gptp_change_port_state(port, GPTP_PORT_DISABLED);
 800b6a2:	2102      	movs	r1, #2
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	f7ff ffe7 	bl	800b678 <gptp_change_port_state>
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800b6aa:	3401      	adds	r4, #1
 800b6ac:	e7f4      	b.n	800b698 <gptp_updt_role_disabled_tree+0x4>
	(void)memset(&global_ds->last_gm_priority, 0xFF,
 800b6ae:	4b0c      	ldr	r3, [pc, #48]	; (800b6e0 <gptp_updt_role_disabled_tree+0x4c>)
 800b6b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6b4:	601a      	str	r2, [r3, #0]
 800b6b6:	605a      	str	r2, [r3, #4]
 800b6b8:	609a      	str	r2, [r3, #8]
 800b6ba:	60da      	str	r2, [r3, #12]
 800b6bc:	611a      	str	r2, [r3, #16]
 800b6be:	615a      	str	r2, [r3, #20]
 800b6c0:	619a      	str	r2, [r3, #24]
	global_ds->path_trace.len = htons(GPTP_CLOCK_ID_LEN);
 800b6c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b6c6:	f823 2c5e 	strh.w	r2, [r3, #-94]
	memcpy(global_ds->path_trace.path_sequence, GPTP_DEFAULT_DS()->clk_id,
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	f852 1f63 	ldr.w	r1, [r2, #99]!
 800b6d0:	6852      	ldr	r2, [r2, #4]
 800b6d2:	f843 1c5c 	str.w	r1, [r3, #-92]
 800b6d6:	f843 2c58 	str.w	r2, [r3, #-88]
}
 800b6da:	bd10      	pop	{r4, pc}
 800b6dc:	20001470 	.word	0x20001470
 800b6e0:	2000152a 	.word	0x2000152a

0800b6e4 <update_bmca>:
{
 800b6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e8:	4604      	mov	r4, r0
 800b6ea:	4617      	mov	r7, r2
 800b6ec:	461e      	mov	r6, r3
 800b6ee:	9808      	ldr	r0, [sp, #32]
	struct gptp_port_bmca_data *bmca_data = GPTP_PORT_BMCA_DATA(port);
 800b6f0:	1e65      	subs	r5, r4, #1
	if (best_port == 0) {
 800b6f2:	468c      	mov	ip, r1
 800b6f4:	bba1      	cbnz	r1, 800b760 <update_bmca+0x7c>
		memcpy(&bmca_data->master_priority, gm_prio,
 800b6f6:	2264      	movs	r2, #100	; 0x64
 800b6f8:	fb02 fe05 	mul.w	lr, r2, r5
 800b6fc:	f50e 61cf 	add.w	r1, lr, #1656	; 0x678
 800b700:	4a6d      	ldr	r2, [pc, #436]	; (800b8b8 <update_bmca+0x1d4>)
 800b702:	4411      	add	r1, r2
 800b704:	f8d0 9000 	ldr.w	r9, [r0]
 800b708:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800b70c:	6883      	ldr	r3, [r0, #8]
 800b70e:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800b712:	f8c1 9004 	str.w	r9, [r1, #4]
 800b716:	f8c1 8008 	str.w	r8, [r1, #8]
 800b71a:	60cb      	str	r3, [r1, #12]
 800b71c:	f8c1 a010 	str.w	sl, [r1, #16]
 800b720:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800b724:	f8d0 8014 	ldr.w	r8, [r0, #20]
 800b728:	6983      	ldr	r3, [r0, #24]
 800b72a:	f8c1 9014 	str.w	r9, [r1, #20]
 800b72e:	f8c1 8018 	str.w	r8, [r1, #24]
 800b732:	61cb      	str	r3, [r1, #28]
		bmca_data->master_priority.port_number = htons(port);
 800b734:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800b738:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	4472      	add	r2, lr
 800b740:	f8a2 3696 	strh.w	r3, [r2, #1686]	; 0x696
		bmca_data->master_priority.src_port_id.port_number =
 800b744:	f8a2 3694 	strh.w	r3, [r2, #1684]	; 0x694
	switch (bmca_data->info_is) {
 800b748:	4b5b      	ldr	r3, [pc, #364]	; (800b8b8 <update_bmca+0x1d4>)
 800b74a:	2164      	movs	r1, #100	; 0x64
 800b74c:	fb01 3105 	mla	r1, r1, r5, r3
 800b750:	f891 36cc 	ldrb.w	r3, [r1, #1740]	; 0x6cc
 800b754:	2b03      	cmp	r3, #3
 800b756:	d831      	bhi.n	800b7bc <update_bmca+0xd8>
 800b758:	e8df f003 	tbb	[pc, r3]
 800b75c:	2c323e63 	.word	0x2c323e63
		memcpy(&bmca_data->master_priority.root_system_id,
 800b760:	2364      	movs	r3, #100	; 0x64
 800b762:	fb03 f105 	mul.w	r1, r3, r5
 800b766:	f501 62cf 	add.w	r2, r1, #1656	; 0x678
 800b76a:	4b53      	ldr	r3, [pc, #332]	; (800b8b8 <update_bmca+0x1d4>)
 800b76c:	441a      	add	r2, r3
 800b76e:	f8d0 9000 	ldr.w	r9, [r0]
 800b772:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800b776:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800b77a:	f8c2 9004 	str.w	r9, [r2, #4]
 800b77e:	f8c2 8008 	str.w	r8, [r2, #8]
 800b782:	f8c2 e00c 	str.w	lr, [r2, #12]
 800b786:	8980      	ldrh	r0, [r0, #12]
 800b788:	8210      	strh	r0, [r2, #16]
		memcpy(bmca_data->master_priority.src_port_id.clk_id,
 800b78a:	f501 62d1 	add.w	r2, r1, #1672	; 0x688
 800b78e:	441a      	add	r2, r3
 800b790:	4630      	mov	r0, r6
 800b792:	f850 ef05 	ldr.w	lr, [r0, #5]!
 800b796:	6840      	ldr	r0, [r0, #4]
 800b798:	f8c2 e004 	str.w	lr, [r2, #4]
 800b79c:	6090      	str	r0, [r2, #8]
		bmca_data->master_priority.port_number = htons(port);
 800b79e:	f3c4 2207 	ubfx	r2, r4, #8, #8
 800b7a2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800b7a6:	b292      	uxth	r2, r2
 800b7a8:	440b      	add	r3, r1
 800b7aa:	f8a3 2696 	strh.w	r2, [r3, #1686]	; 0x696
		bmca_data->master_priority.src_port_id.port_number =
 800b7ae:	f8a3 2694 	strh.w	r2, [r3, #1684]	; 0x694
 800b7b2:	e7c9      	b.n	800b748 <update_bmca+0x64>
		gptp_change_port_state(port, GPTP_PORT_DISABLED);
 800b7b4:	2102      	movs	r1, #2
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f7ff ff5e 	bl	800b678 <gptp_change_port_state>
}
 800b7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bmca_data->updt_info = true;
 800b7c0:	4a3d      	ldr	r2, [pc, #244]	; (800b8b8 <update_bmca+0x1d4>)
 800b7c2:	2364      	movs	r3, #100	; 0x64
 800b7c4:	fb03 2505 	mla	r5, r3, r5, r2
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	f885 36d7 	strb.w	r3, [r5, #1751]	; 0x6d7
		gptp_change_port_state(port, GPTP_PORT_MASTER);
 800b7ce:	2105      	movs	r1, #5
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	f7ff ff51 	bl	800b678 <gptp_change_port_state>
		break;
 800b7d6:	e7f1      	b.n	800b7bc <update_bmca+0xd8>
		gptp_change_port_state(port, GPTP_PORT_MASTER);
 800b7d8:	2105      	movs	r1, #5
 800b7da:	4620      	mov	r0, r4
 800b7dc:	f7ff ff4c 	bl	800b678 <gptp_change_port_state>
		if ((memcmp(&bmca_data->port_priority,
 800b7e0:	2164      	movs	r1, #100	; 0x64
 800b7e2:	fb01 f105 	mul.w	r1, r1, r5
 800b7e6:	f501 60d3 	add.w	r0, r1, #1688	; 0x698
 800b7ea:	4b33      	ldr	r3, [pc, #204]	; (800b8b8 <update_bmca+0x1d4>)
			    &bmca_data->master_priority,
 800b7ec:	f501 61cf 	add.w	r1, r1, #1656	; 0x678
 800b7f0:	4419      	add	r1, r3
		if ((memcmp(&bmca_data->port_priority,
 800b7f2:	221c      	movs	r2, #28
 800b7f4:	3104      	adds	r1, #4
 800b7f6:	4418      	add	r0, r3
 800b7f8:	f011 f810 	bl	801c81c <memcmp>
 800b7fc:	b948      	cbnz	r0, 800b812 <update_bmca+0x12e>
		    (bmca_data->port_steps_removed !=
 800b7fe:	4a2e      	ldr	r2, [pc, #184]	; (800b8b8 <update_bmca+0x1d4>)
 800b800:	2364      	movs	r3, #100	; 0x64
 800b802:	fb03 2305 	mla	r3, r3, r5, r2
 800b806:	f8b3 26d0 	ldrh.w	r2, [r3, #1744]	; 0x6d0
		     global_ds->master_steps_removed)) {
 800b80a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			    sizeof(struct gptp_priority_vector)) != 0) ||
 800b80e:	429a      	cmp	r2, r3
 800b810:	d0d4      	beq.n	800b7bc <update_bmca+0xd8>
			bmca_data->updt_info = true;
 800b812:	4a29      	ldr	r2, [pc, #164]	; (800b8b8 <update_bmca+0x1d4>)
 800b814:	2364      	movs	r3, #100	; 0x64
 800b816:	fb03 2505 	mla	r5, r3, r5, r2
 800b81a:	2301      	movs	r3, #1
 800b81c:	f885 36d7 	strb.w	r3, [r5, #1751]	; 0x6d7
 800b820:	e7cc      	b.n	800b7bc <update_bmca+0xd8>
		if (best_port == port) {
 800b822:	4564      	cmp	r4, ip
 800b824:	d01b      	beq.n	800b85e <update_bmca+0x17a>
		} else if (memcmp(&bmca_data->port_priority,
 800b826:	2164      	movs	r1, #100	; 0x64
 800b828:	fb01 f105 	mul.w	r1, r1, r5
 800b82c:	f501 60d3 	add.w	r0, r1, #1688	; 0x698
 800b830:	4b21      	ldr	r3, [pc, #132]	; (800b8b8 <update_bmca+0x1d4>)
				  &bmca_data->master_priority,
 800b832:	f501 61cf 	add.w	r1, r1, #1656	; 0x678
 800b836:	4419      	add	r1, r3
		} else if (memcmp(&bmca_data->port_priority,
 800b838:	221c      	movs	r2, #28
 800b83a:	3104      	adds	r1, #4
 800b83c:	4418      	add	r0, r3
 800b83e:	f010 ffed 	bl	801c81c <memcmp>
 800b842:	2800      	cmp	r0, #0
 800b844:	dd17      	ble.n	800b876 <update_bmca+0x192>
			gptp_change_port_state(port, GPTP_PORT_MASTER);
 800b846:	2105      	movs	r1, #5
 800b848:	4620      	mov	r0, r4
 800b84a:	f7ff ff15 	bl	800b678 <gptp_change_port_state>
			bmca_data->updt_info = true;
 800b84e:	4b1a      	ldr	r3, [pc, #104]	; (800b8b8 <update_bmca+0x1d4>)
 800b850:	2264      	movs	r2, #100	; 0x64
 800b852:	fb02 3505 	mla	r5, r2, r5, r3
 800b856:	2301      	movs	r3, #1
 800b858:	f885 36d7 	strb.w	r3, [r5, #1751]	; 0x6d7
}
 800b85c:	e7ae      	b.n	800b7bc <update_bmca+0xd8>
			gptp_change_port_state(port, GPTP_PORT_SLAVE);
 800b85e:	2108      	movs	r1, #8
 800b860:	4620      	mov	r0, r4
 800b862:	f7ff ff09 	bl	800b678 <gptp_change_port_state>
			bmca_data->updt_info = false;
 800b866:	4a14      	ldr	r2, [pc, #80]	; (800b8b8 <update_bmca+0x1d4>)
 800b868:	2364      	movs	r3, #100	; 0x64
 800b86a:	fb03 2505 	mla	r5, r3, r5, r2
 800b86e:	2300      	movs	r3, #0
 800b870:	f885 36d7 	strb.w	r3, [r5, #1751]	; 0x6d7
 800b874:	e7a2      	b.n	800b7bc <update_bmca+0xd8>
			gptp_change_port_state(port, GPTP_PORT_PASSIVE);
 800b876:	2106      	movs	r1, #6
 800b878:	4620      	mov	r0, r4
 800b87a:	f7ff fefd 	bl	800b678 <gptp_change_port_state>
			if (memcmp(bmca_data->port_priority.src_port_id.clk_id,
 800b87e:	2364      	movs	r3, #100	; 0x64
 800b880:	fb03 f305 	mul.w	r3, r3, r5
 800b884:	f503 63d5 	add.w	r3, r3, #1704	; 0x6a8
 800b888:	2208      	movs	r2, #8
 800b88a:	1d71      	adds	r1, r6, #5
 800b88c:	480a      	ldr	r0, [pc, #40]	; (800b8b8 <update_bmca+0x1d4>)
 800b88e:	4418      	add	r0, r3
 800b890:	f010 ffc4 	bl	801c81c <memcmp>
 800b894:	b138      	cbz	r0, 800b8a6 <update_bmca+0x1c2>
				bmca_data->updt_info = true;
 800b896:	4a08      	ldr	r2, [pc, #32]	; (800b8b8 <update_bmca+0x1d4>)
 800b898:	2364      	movs	r3, #100	; 0x64
 800b89a:	fb03 2505 	mla	r5, r3, r5, r2
 800b89e:	2301      	movs	r3, #1
 800b8a0:	f885 36d7 	strb.w	r3, [r5, #1751]	; 0x6d7
 800b8a4:	e78a      	b.n	800b7bc <update_bmca+0xd8>
				bmca_data->updt_info = false;
 800b8a6:	4a04      	ldr	r2, [pc, #16]	; (800b8b8 <update_bmca+0x1d4>)
 800b8a8:	2364      	movs	r3, #100	; 0x64
 800b8aa:	fb03 2505 	mla	r5, r3, r5, r2
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	f885 36d7 	strb.w	r3, [r5, #1751]	; 0x6d7
 800b8b4:	e782      	b.n	800b7bc <update_bmca+0xd8>
 800b8b6:	bf00      	nop
 800b8b8:	20001470 	.word	0x20001470

0800b8bc <gptp_updt_roles_tree>:
{
 800b8bc:	b530      	push	{r4, r5, lr}
 800b8be:	b083      	sub	sp, #12
	memcpy(last_gm_prio, gm_prio, sizeof(struct gptp_priority_vector));
 800b8c0:	4b4a      	ldr	r3, [pc, #296]	; (800b9ec <gptp_updt_roles_tree+0x130>)
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	f852 4f9e 	ldr.w	r4, [r2, #158]!
 800b8c8:	6850      	ldr	r0, [r2, #4]
 800b8ca:	6891      	ldr	r1, [r2, #8]
 800b8cc:	68d5      	ldr	r5, [r2, #12]
 800b8ce:	f8c3 40ba 	str.w	r4, [r3, #186]	; 0xba
 800b8d2:	f8c3 00be 	str.w	r0, [r3, #190]	; 0xbe
 800b8d6:	f8c3 10c2 	str.w	r1, [r3, #194]	; 0xc2
 800b8da:	f8c3 50c6 	str.w	r5, [r3, #198]	; 0xc6
 800b8de:	6914      	ldr	r4, [r2, #16]
 800b8e0:	6950      	ldr	r0, [r2, #20]
 800b8e2:	6991      	ldr	r1, [r2, #24]
 800b8e4:	f8c3 40ca 	str.w	r4, [r3, #202]	; 0xca
 800b8e8:	f8c3 00ce 	str.w	r0, [r3, #206]	; 0xce
 800b8ec:	f8c3 10d2 	str.w	r1, [r3, #210]	; 0xd2
	best_port = compute_best_vector();
 800b8f0:	f7ff fd94 	bl	800b41c <compute_best_vector>
	if (best_port == 0) {
 800b8f4:	4605      	mov	r5, r0
 800b8f6:	bb08      	cbnz	r0, 800b93c <gptp_updt_roles_tree+0x80>
			global_ds->sys_flags.octets[1];
 800b8f8:	4b3c      	ldr	r3, [pc, #240]	; (800b9ec <gptp_updt_roles_tree+0x130>)
 800b8fa:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
		global_ds->global_flags.octets[1] =
 800b8fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			global_ds->sys_current_utc_offset;
 800b902:	f9b3 210c 	ldrsh.w	r2, [r3, #268]	; 0x10c
		global_ds->current_utc_offset =
 800b906:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
		global_ds->time_source = global_ds->sys_time_source;
 800b90a:	f893 2113 	ldrb.w	r2, [r3, #275]	; 0x113
 800b90e:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
		global_ds->master_steps_removed = 0U;
 800b912:	2200      	movs	r2, #0
 800b914:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
{
 800b918:	2401      	movs	r4, #1
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800b91a:	4b34      	ldr	r3, [pc, #208]	; (800b9ec <gptp_updt_roles_tree+0x130>)
 800b91c:	f893 212b 	ldrb.w	r2, [r3, #299]	; 0x12b
 800b920:	42a2      	cmp	r2, r4
 800b922:	db2a      	blt.n	800b97a <gptp_updt_roles_tree+0xbe>
		update_bmca(port, best_port, global_ds, default_ds, gm_prio);
 800b924:	4b32      	ldr	r3, [pc, #200]	; (800b9f0 <gptp_updt_roles_tree+0x134>)
 800b926:	f1a3 027a 	sub.w	r2, r3, #122	; 0x7a
 800b92a:	9200      	str	r2, [sp, #0]
 800b92c:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800b930:	4629      	mov	r1, r5
 800b932:	4620      	mov	r0, r4
 800b934:	f7ff fed6 	bl	800b6e4 <update_bmca>
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800b938:	3401      	adds	r4, #1
 800b93a:	e7ee      	b.n	800b91a <gptp_updt_roles_tree+0x5e>
		bmca_data = GPTP_PORT_BMCA_DATA(best_port);
 800b93c:	1e43      	subs	r3, r0, #1
			bmca_data->ann_flags.octets[1];
 800b93e:	4a2b      	ldr	r2, [pc, #172]	; (800b9ec <gptp_updt_roles_tree+0x130>)
 800b940:	2164      	movs	r1, #100	; 0x64
 800b942:	fb01 2303 	mla	r3, r1, r3, r2
 800b946:	f893 16cf 	ldrb.w	r1, [r3, #1743]	; 0x6cf
		global_ds->global_flags.octets[1] =
 800b94a:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
			global_ds->sys_current_utc_offset;
 800b94e:	f9b2 110c 	ldrsh.w	r1, [r2, #268]	; 0x10c
		global_ds->current_utc_offset =
 800b952:	f8a2 110a 	strh.w	r1, [r2, #266]	; 0x10a
		global_ds->time_source = bmca_data->ann_time_source;
 800b956:	f893 16cd 	ldrb.w	r1, [r3, #1741]	; 0x6cd
 800b95a:	f882 1112 	strb.w	r1, [r2, #274]	; 0x112
			htons(ntohs(bmca_data->message_steps_removed) + 1);
 800b95e:	f8b3 16d2 	ldrh.w	r1, [r3, #1746]	; 0x6d2
 800b962:	0a0b      	lsrs	r3, r1, #8
 800b964:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b968:	b29b      	uxth	r3, r3
 800b96a:	3301      	adds	r3, #1
 800b96c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800b970:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
		global_ds->master_steps_removed =
 800b974:	f8a2 3108 	strh.w	r3, [r2, #264]	; 0x108
 800b978:	e7ce      	b.n	800b918 <gptp_updt_roles_tree+0x5c>
		(gm_prio->root_system_id.grand_master_prio1 == 255U) ?
 800b97a:	4619      	mov	r1, r3
 800b97c:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
		false : true;
 800b980:	3bff      	subs	r3, #255	; 0xff
 800b982:	bf18      	it	ne
 800b984:	2301      	movne	r3, #1
	global_ds->gm_present =
 800b986:	f881 3116 	strb.w	r3, [r1, #278]	; 0x116
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800b98a:	2401      	movs	r4, #1
 800b98c:	42a2      	cmp	r2, r4
 800b98e:	db0b      	blt.n	800b9a8 <gptp_updt_roles_tree+0xec>
		if (global_ds->selected_role[port] == GPTP_PORT_SLAVE) {
 800b990:	4b16      	ldr	r3, [pc, #88]	; (800b9ec <gptp_updt_roles_tree+0x130>)
 800b992:	4423      	add	r3, r4
 800b994:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800b998:	2b08      	cmp	r3, #8
 800b99a:	d001      	beq.n	800b9a0 <gptp_updt_roles_tree+0xe4>
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800b99c:	3401      	adds	r4, #1
 800b99e:	e7f5      	b.n	800b98c <gptp_updt_roles_tree+0xd0>
			gptp_change_port_state(0, GPTP_PORT_PASSIVE);
 800b9a0:	2106      	movs	r1, #6
 800b9a2:	2000      	movs	r0, #0
 800b9a4:	f7ff fe68 	bl	800b678 <gptp_change_port_state>
	if (port == GPTP_PORT_END) {
 800b9a8:	4b10      	ldr	r3, [pc, #64]	; (800b9ec <gptp_updt_roles_tree+0x130>)
 800b9aa:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	42a3      	cmp	r3, r4
 800b9b2:	d015      	beq.n	800b9e0 <gptp_updt_roles_tree+0x124>
	if (memcmp(default_ds->clk_id, gm_prio->root_system_id.grand_master_id,
 800b9b4:	490f      	ldr	r1, [pc, #60]	; (800b9f4 <gptp_updt_roles_tree+0x138>)
 800b9b6:	2208      	movs	r2, #8
 800b9b8:	f101 0079 	add.w	r0, r1, #121	; 0x79
 800b9bc:	f010 ff2e 	bl	801c81c <memcmp>
 800b9c0:	b960      	cbnz	r0, 800b9dc <gptp_updt_roles_tree+0x120>
		global_ds->path_trace.len = htons(GPTP_CLOCK_ID_LEN);
 800b9c2:	4b0a      	ldr	r3, [pc, #40]	; (800b9ec <gptp_updt_roles_tree+0x130>)
 800b9c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		memcpy(global_ds->path_trace.path_sequence,
 800b9cc:	f8d3 111d 	ldr.w	r1, [r3, #285]	; 0x11d
 800b9d0:	f8d3 2121 	ldr.w	r2, [r3, #289]	; 0x121
 800b9d4:	f8c3 105e 	str.w	r1, [r3, #94]	; 0x5e
 800b9d8:	f8c3 2062 	str.w	r2, [r3, #98]	; 0x62
}
 800b9dc:	b003      	add	sp, #12
 800b9de:	bd30      	pop	{r4, r5, pc}
		gptp_change_port_state(0, GPTP_PORT_SLAVE);
 800b9e0:	2108      	movs	r1, #8
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	f7ff fe48 	bl	800b678 <gptp_change_port_state>
 800b9e8:	e7e4      	b.n	800b9b4 <gptp_updt_roles_tree+0xf8>
 800b9ea:	bf00      	nop
 800b9ec:	20001470 	.word	0x20001470
 800b9f0:	20001588 	.word	0x20001588
 800b9f4:	20001514 	.word	0x20001514

0800b9f8 <gptp_mi_port_role_selection_state_machine>:
{
 800b9f8:	b508      	push	{r3, lr}
	switch (state->state) {
 800b9fa:	4b0e      	ldr	r3, [pc, #56]	; (800ba34 <gptp_mi_port_role_selection_state_machine+0x3c>)
 800b9fc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ba00:	b113      	cbz	r3, 800ba08 <gptp_mi_port_role_selection_state_machine+0x10>
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d00a      	beq.n	800ba1c <gptp_mi_port_role_selection_state_machine+0x24>
}
 800ba06:	bd08      	pop	{r3, pc}
		gptp_updt_role_disabled_tree();
 800ba08:	f7ff fe44 	bl	800b694 <gptp_updt_role_disabled_tree>
		state->state = GPTP_PR_SELECTION_ROLE_SELECTION;
 800ba0c:	4b09      	ldr	r3, [pc, #36]	; (800ba34 <gptp_mi_port_role_selection_state_machine+0x3c>)
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
		GPTP_GLOBAL_DS()->reselect_array = ~0;
 800ba14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		if (GPTP_GLOBAL_DS()->reselect_array != 0) {
 800ba1c:	4b05      	ldr	r3, [pc, #20]	; (800ba34 <gptp_mi_port_role_selection_state_machine+0x3c>)
 800ba1e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d0ef      	beq.n	800ba06 <gptp_mi_port_role_selection_state_machine+0xe>
			gptp_clear_reselect_tree();
 800ba26:	f7fe ff95 	bl	800a954 <gptp_clear_reselect_tree>
			gptp_updt_roles_tree();
 800ba2a:	f7ff ff47 	bl	800b8bc <gptp_updt_roles_tree>
			gptp_set_selected_tree();
 800ba2e:	f7fe ff99 	bl	800a964 <gptp_set_selected_tree>
}
 800ba32:	e7e8      	b.n	800ba06 <gptp_mi_port_role_selection_state_machine+0xe>
 800ba34:	20001470 	.word	0x20001470

0800ba38 <gptp_mi_init_port_announce_info_sm>:
{
 800ba38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3a:	4604      	mov	r4, r0
	state = &GPTP_PORT_STATE(port)->pa_info;
 800ba3c:	1e47      	subs	r7, r0, #1
 800ba3e:	f44f 765a 	mov.w	r6, #872	; 0x368
 800ba42:	fb06 f707 	mul.w	r7, r6, r7
 800ba46:	f507 65be 	add.w	r5, r7, #1520	; 0x5f0
 800ba4a:	4e08      	ldr	r6, [pc, #32]	; (800ba6c <gptp_mi_init_port_announce_info_sm+0x34>)
 800ba4c:	4435      	add	r5, r6
	k_timer_init(&state->ann_rcpt_expiry_timer,
 800ba4e:	2200      	movs	r2, #0
 800ba50:	4907      	ldr	r1, [pc, #28]	; (800ba70 <gptp_mi_init_port_announce_info_sm+0x38>)
 800ba52:	4628      	mov	r0, r5
 800ba54:	f010 fe0c 	bl	801c670 <k_timer_init>
	state->ann_expired = false;
 800ba58:	443e      	add	r6, r7
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f886 2629 	strb.w	r2, [r6, #1577]	; 0x629
	gptp_change_pa_info_state(port, state, GPTP_PA_INFO_DISABLED);
 800ba60:	4629      	mov	r1, r5
 800ba62:	4620      	mov	r0, r4
 800ba64:	f00d fc70 	bl	8019348 <gptp_change_pa_info_state>
}
 800ba68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	20001470 	.word	0x20001470
 800ba70:	0800a87d 	.word	0x0800a87d

0800ba74 <gptp_mi_port_announce_information_state_machine>:
{
 800ba74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba78:	b083      	sub	sp, #12
 800ba7a:	4606      	mov	r6, r0
	bmca_data = GPTP_PORT_BMCA_DATA(port);
 800ba7c:	1e44      	subs	r4, r0, #1
	state = &GPTP_PORT_STATE(port)->pa_info;
 800ba7e:	f44f 755a 	mov.w	r5, #872	; 0x368
 800ba82:	fb05 f504 	mul.w	r5, r5, r4
 800ba86:	f505 65be 	add.w	r5, r5, #1520	; 0x5f0
 800ba8a:	4bab      	ldr	r3, [pc, #684]	; (800bd38 <gptp_mi_port_announce_information_state_machine+0x2c4>)
 800ba8c:	441d      	add	r5, r3
	if ((!port_ds->ptt_port_enabled || !port_ds->as_capable) &&
 800ba8e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800ba92:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800ba96:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 800ba9a:	f013 0f01 	tst.w	r3, #1
 800ba9e:	d008      	beq.n	800bab2 <gptp_mi_port_announce_information_state_machine+0x3e>
 800baa0:	4613      	mov	r3, r2
 800baa2:	4aa5      	ldr	r2, [pc, #660]	; (800bd38 <gptp_mi_port_announce_information_state_machine+0x2c4>)
 800baa4:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800baa8:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 800baac:	f013 0f08 	tst.w	r3, #8
 800bab0:	d107      	bne.n	800bac2 <gptp_mi_port_announce_information_state_machine+0x4e>
	    (bmca_data->info_is != GPTP_INFO_IS_DISABLED)) {
 800bab2:	4aa1      	ldr	r2, [pc, #644]	; (800bd38 <gptp_mi_port_announce_information_state_machine+0x2c4>)
 800bab4:	2364      	movs	r3, #100	; 0x64
 800bab6:	fb03 2304 	mla	r3, r3, r4, r2
 800baba:	f893 36cc 	ldrb.w	r3, [r3, #1740]	; 0x6cc
	if ((!port_ds->ptt_port_enabled || !port_ds->as_capable) &&
 800babe:	2b03      	cmp	r3, #3
 800bac0:	d114      	bne.n	800baec <gptp_mi_port_announce_information_state_machine+0x78>
	switch (state->state) {
 800bac2:	4a9d      	ldr	r2, [pc, #628]	; (800bd38 <gptp_mi_port_announce_information_state_machine+0x2c4>)
 800bac4:	f44f 735a 	mov.w	r3, #872	; 0x368
 800bac8:	fb03 2304 	mla	r3, r3, r4, r2
 800bacc:	f893 3628 	ldrb.w	r3, [r3, #1576]	; 0x628
 800bad0:	2b08      	cmp	r3, #8
 800bad2:	f200 81c2 	bhi.w	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
 800bad6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bada:	000f      	.short	0x000f
 800badc:	00590039 	.word	0x00590039
 800bae0:	00b70074 	.word	0x00b70074
 800bae4:	0131010f 	.word	0x0131010f
 800bae8:	01a40177 	.word	0x01a40177
		gptp_change_pa_info_state(port, state, GPTP_PA_INFO_DISABLED);
 800baec:	2200      	movs	r2, #0
 800baee:	4629      	mov	r1, r5
 800baf0:	4630      	mov	r0, r6
 800baf2:	f00d fc29 	bl	8019348 <gptp_change_pa_info_state>
 800baf6:	e7e4      	b.n	800bac2 <gptp_mi_port_announce_information_state_machine+0x4e>
		bmca_data->rcvd_msg = false;
 800baf8:	4f8f      	ldr	r7, [pc, #572]	; (800bd38 <gptp_mi_port_announce_information_state_machine+0x2c4>)
 800bafa:	2364      	movs	r3, #100	; 0x64
 800bafc:	fb03 7304 	mla	r3, r3, r4, r7
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 26d6 	strb.w	r2, [r3, #1750]	; 0x6d6
		bmca_data->info_is = GPTP_INFO_IS_DISABLED;
 800bb06:	2203      	movs	r2, #3
 800bb08:	f883 26cc 	strb.w	r2, [r3, #1740]	; 0x6cc
		SET_RESELECT(global_ds, port);
 800bb0c:	f04f 0901 	mov.w	r9, #1
 800bb10:	fa09 f104 	lsl.w	r1, r9, r4
 800bb14:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800bb18:	430a      	orrs	r2, r1
 800bb1a:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
		CLEAR_SELECTED(global_ds, port);
 800bb1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb22:	ea23 0301 	bic.w	r3, r3, r1
 800bb26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		gptp_change_pa_info_state(port, state,
 800bb2a:	464a      	mov	r2, r9
 800bb2c:	4629      	mov	r1, r5
 800bb2e:	4630      	mov	r0, r6
 800bb30:	f00d fc0a 	bl	8019348 <gptp_change_pa_info_state>
		k_timer_stop(&state->ann_rcpt_expiry_timer);
 800bb34:	f44f 785a 	mov.w	r8, #872	; 0x368
 800bb38:	fb08 f804 	mul.w	r8, r8, r4
 800bb3c:	f508 60be 	add.w	r0, r8, #1520	; 0x5f0
 800bb40:	4438      	add	r0, r7
	z_impl_k_timer_stop(timer);
 800bb42:	f010 fda1 	bl	801c688 <z_impl_k_timer_stop>
		state->ann_expired = true;
 800bb46:	4447      	add	r7, r8
 800bb48:	f887 9629 	strb.w	r9, [r7, #1577]	; 0x629
		if (port_ds->ptt_port_enabled && port_ds->as_capable) {
 800bb4c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800bb50:	4a79      	ldr	r2, [pc, #484]	; (800bd38 <gptp_mi_port_announce_information_state_machine+0x2c4>)
 800bb52:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800bb56:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 800bb5a:	f003 0309 	and.w	r3, r3, #9
 800bb5e:	2b09      	cmp	r3, #9
 800bb60:	d00e      	beq.n	800bb80 <gptp_mi_port_announce_information_state_machine+0x10c>
		} else if (bmca_data->rcvd_msg) {
 800bb62:	4a75      	ldr	r2, [pc, #468]	; (800bd38 <gptp_mi_port_announce_information_state_machine+0x2c4>)
 800bb64:	2364      	movs	r3, #100	; 0x64
 800bb66:	fb03 2404 	mla	r4, r3, r4, r2
 800bb6a:	f894 36d6 	ldrb.w	r3, [r4, #1750]	; 0x6d6
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	f000 8173 	beq.w	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
			gptp_change_pa_info_state(port, state,
 800bb74:	2200      	movs	r2, #0
 800bb76:	4629      	mov	r1, r5
 800bb78:	4630      	mov	r0, r6
 800bb7a:	f00d fbe5 	bl	8019348 <gptp_change_pa_info_state>
 800bb7e:	e16c      	b.n	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
			gptp_change_pa_info_state(port, state,
 800bb80:	2202      	movs	r2, #2
 800bb82:	4629      	mov	r1, r5
 800bb84:	4630      	mov	r0, r6
 800bb86:	f00d fbdf 	bl	8019348 <gptp_change_pa_info_state>
 800bb8a:	e166      	b.n	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
		bmca_data->info_is = GPTP_INFO_IS_AGED;
 800bb8c:	4b6a      	ldr	r3, [pc, #424]	; (800bd38 <gptp_mi_port_announce_information_state_machine+0x2c4>)
 800bb8e:	2264      	movs	r2, #100	; 0x64
 800bb90:	fb02 3204 	mla	r2, r2, r4, r3
 800bb94:	2102      	movs	r1, #2
 800bb96:	f882 16cc 	strb.w	r1, [r2, #1740]	; 0x6cc
		CLEAR_SELECTED(global_ds, port);
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	fa02 f404 	lsl.w	r4, r2, r4
 800bba0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800bba4:	ea22 0204 	bic.w	r2, r2, r4
 800bba8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		SET_RESELECT(global_ds, port);
 800bbac:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800bbb0:	4314      	orrs	r4, r2
 800bbb2:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
		gptp_change_pa_info_state(port, state, GPTP_PA_INFO_UPDATE);
 800bbb6:	2203      	movs	r2, #3
 800bbb8:	4629      	mov	r1, r5
 800bbba:	4630      	mov	r0, r6
 800bbbc:	f00d fbc4 	bl	8019348 <gptp_change_pa_info_state>
		break;
 800bbc0:	e14b      	b.n	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
		if (IS_SELECTED(global_ds, port) && bmca_data->updt_info) {
 800bbc2:	4b5d      	ldr	r3, [pc, #372]	; (800bd38 <gptp_mi_port_announce_information_state_machine+0x2c4>)
 800bbc4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800bbc8:	40e3      	lsrs	r3, r4
 800bbca:	f013 0f01 	tst.w	r3, #1
 800bbce:	f000 8144 	beq.w	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
 800bbd2:	4a59      	ldr	r2, [pc, #356]	; (800bd38 <gptp_mi_port_announce_information_state_machine+0x2c4>)
 800bbd4:	2364      	movs	r3, #100	; 0x64
 800bbd6:	fb03 2304 	mla	r3, r3, r4, r2
 800bbda:	f893 36d7 	ldrb.w	r3, [r3, #1751]	; 0x6d7
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f000 813b 	beq.w	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
			memcpy(&bmca_data->port_priority,
 800bbe4:	2364      	movs	r3, #100	; 0x64
 800bbe6:	fb03 f404 	mul.w	r4, r3, r4
 800bbea:	f504 6ed3 	add.w	lr, r4, #1688	; 0x698
 800bbee:	4613      	mov	r3, r2
 800bbf0:	eb0e 0102 	add.w	r1, lr, r2
 800bbf4:	f504 62cf 	add.w	r2, r4, #1656	; 0x678
 800bbf8:	441a      	add	r2, r3
 800bbfa:	f852 cf04 	ldr.w	ip, [r2, #4]!
 800bbfe:	6857      	ldr	r7, [r2, #4]
 800bc00:	6890      	ldr	r0, [r2, #8]
 800bc02:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800bc06:	f84e c003 	str.w	ip, [lr, r3]
 800bc0a:	604f      	str	r7, [r1, #4]
 800bc0c:	6088      	str	r0, [r1, #8]
 800bc0e:	f8c1 800c 	str.w	r8, [r1, #12]
 800bc12:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800bc16:	6957      	ldr	r7, [r2, #20]
 800bc18:	6990      	ldr	r0, [r2, #24]
 800bc1a:	f8c1 c010 	str.w	ip, [r1, #16]
 800bc1e:	614f      	str	r7, [r1, #20]
 800bc20:	6188      	str	r0, [r1, #24]
				global_ds->master_steps_removed;
 800bc22:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
			bmca_data->port_steps_removed =
 800bc26:	4423      	add	r3, r4
 800bc28:	f8a3 26d0 	strh.w	r2, [r3, #1744]	; 0x6d0
			bmca_data->updt_info = false;
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f883 26d7 	strb.w	r2, [r3, #1751]	; 0x6d7
			bmca_data->info_is = GPTP_INFO_IS_MINE;
 800bc32:	2201      	movs	r2, #1
 800bc34:	f883 26cc 	strb.w	r2, [r3, #1740]	; 0x6cc
			bmca_data->new_info = true;
 800bc38:	f883 26d8 	strb.w	r2, [r3, #1752]	; 0x6d8
			gptp_change_pa_info_state(port, state,
 800bc3c:	2204      	movs	r2, #4
 800bc3e:	4629      	mov	r1, r5
 800bc40:	4630      	mov	r0, r6
 800bc42:	f00d fb81 	bl	8019348 <gptp_change_pa_info_state>
 800bc46:	e108      	b.n	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
		if (IS_SELECTED(global_ds, port) && bmca_data->updt_info) {
 800bc48:	4b3b      	ldr	r3, [pc, #236]	; (800bd38 <gptp_mi_port_announce_information_state_machine+0x2c4>)
 800bc4a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800bc4e:	40e3      	lsrs	r3, r4
 800bc50:	f013 0f01 	tst.w	r3, #1
 800bc54:	d007      	beq.n	800bc66 <gptp_mi_port_announce_information_state_machine+0x1f2>
 800bc56:	4a38      	ldr	r2, [pc, #224]	; (800bd38 <gptp_mi_port_announce_information_state_machine+0x2c4>)
 800bc58:	2364      	movs	r3, #100	; 0x64
 800bc5a:	fb03 2304 	mla	r3, r3, r4, r2
 800bc5e:	f893 36d7 	ldrb.w	r3, [r3, #1751]	; 0x6d7
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d13c      	bne.n	800bce0 <gptp_mi_port_announce_information_state_machine+0x26c>
		} else if (bmca_data->rcvd_msg && !bmca_data->updt_info) {
 800bc66:	4a34      	ldr	r2, [pc, #208]	; (800bd38 <gptp_mi_port_announce_information_state_machine+0x2c4>)
 800bc68:	2364      	movs	r3, #100	; 0x64
 800bc6a:	fb03 2304 	mla	r3, r3, r4, r2
 800bc6e:	f893 26d6 	ldrb.w	r2, [r3, #1750]	; 0x6d6
 800bc72:	b132      	cbz	r2, 800bc82 <gptp_mi_port_announce_information_state_machine+0x20e>
 800bc74:	4930      	ldr	r1, [pc, #192]	; (800bd38 <gptp_mi_port_announce_information_state_machine+0x2c4>)
 800bc76:	2364      	movs	r3, #100	; 0x64
 800bc78:	fb03 1304 	mla	r3, r3, r4, r1
 800bc7c:	f893 36d7 	ldrb.w	r3, [r3, #1751]	; 0x6d7
 800bc80:	b3a3      	cbz	r3, 800bcec <gptp_mi_port_announce_information_state_machine+0x278>
		} else if ((bmca_data->info_is == GPTP_INFO_IS_RECEIVED) &&
 800bc82:	492d      	ldr	r1, [pc, #180]	; (800bd38 <gptp_mi_port_announce_information_state_machine+0x2c4>)
 800bc84:	2364      	movs	r3, #100	; 0x64
 800bc86:	fb03 1304 	mla	r3, r3, r4, r1
 800bc8a:	f893 36cc 	ldrb.w	r3, [r3, #1740]	; 0x6cc
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	f040 80e3 	bne.w	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
			   !bmca_data->updt_info &&
 800bc94:	2364      	movs	r3, #100	; 0x64
 800bc96:	fb03 1304 	mla	r3, r3, r4, r1
 800bc9a:	f893 36d7 	ldrb.w	r3, [r3, #1751]	; 0x6d7
		} else if ((bmca_data->info_is == GPTP_INFO_IS_RECEIVED) &&
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	f040 80db 	bne.w	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
			   !bmca_data->updt_info &&
 800bca4:	2a00      	cmp	r2, #0
 800bca6:	f040 80d8 	bne.w	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
			   (state->ann_expired ||
 800bcaa:	f44f 735a 	mov.w	r3, #872	; 0x368
 800bcae:	fb03 1304 	mla	r3, r3, r4, r1
 800bcb2:	f893 3629 	ldrb.w	r3, [r3, #1577]	; 0x629
			   !bmca_data->rcvd_msg &&
 800bcb6:	b96b      	cbnz	r3, 800bcd4 <gptp_mi_port_announce_information_state_machine+0x260>
			    (global_ds->gm_present &&
 800bcb8:	f891 3116 	ldrb.w	r3, [r1, #278]	; 0x116
			   (state->ann_expired ||
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f000 80cc 	beq.w	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
			   pss_rcv->rcv_sync_receipt_timeout_timer_expired))) {
 800bcc2:	f44f 735a 	mov.w	r3, #872	; 0x368
 800bcc6:	fb03 1404 	mla	r4, r3, r4, r1
 800bcca:	f894 34ca 	ldrb.w	r3, [r4, #1226]	; 0x4ca
			    (global_ds->gm_present &&
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	f000 80c3 	beq.w	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
			gptp_change_pa_info_state(port, state,
 800bcd4:	2202      	movs	r2, #2
 800bcd6:	4629      	mov	r1, r5
 800bcd8:	4630      	mov	r0, r6
 800bcda:	f00d fb35 	bl	8019348 <gptp_change_pa_info_state>
 800bcde:	e0bc      	b.n	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
			gptp_change_pa_info_state(port, state,
 800bce0:	2203      	movs	r2, #3
 800bce2:	4629      	mov	r1, r5
 800bce4:	4630      	mov	r0, r6
 800bce6:	f00d fb2f 	bl	8019348 <gptp_change_pa_info_state>
 800bcea:	e0b6      	b.n	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
			gptp_change_pa_info_state(port, state,
 800bcec:	2205      	movs	r2, #5
 800bcee:	4629      	mov	r1, r5
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	f00d fb29 	bl	8019348 <gptp_change_pa_info_state>
 800bcf6:	e0b0      	b.n	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
		switch (rcv_info(port)) {
 800bcf8:	4630      	mov	r0, r6
 800bcfa:	f7ff fa19 	bl	800b130 <rcv_info>
 800bcfe:	2801      	cmp	r0, #1
 800bd00:	d014      	beq.n	800bd2c <gptp_mi_port_announce_information_state_machine+0x2b8>
 800bd02:	d808      	bhi.n	800bd16 <gptp_mi_port_announce_information_state_machine+0x2a2>
 800bd04:	2800      	cmp	r0, #0
 800bd06:	f040 80a8 	bne.w	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
			gptp_change_pa_info_state(port, state,
 800bd0a:	2206      	movs	r2, #6
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	4630      	mov	r0, r6
 800bd10:	f00d fb1a 	bl	8019348 <gptp_change_pa_info_state>
			break;
 800bd14:	e0a1      	b.n	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
 800bd16:	3802      	subs	r0, #2
 800bd18:	b2c0      	uxtb	r0, r0
 800bd1a:	2801      	cmp	r0, #1
 800bd1c:	f200 809d 	bhi.w	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
			gptp_change_pa_info_state(port, state,
 800bd20:	2208      	movs	r2, #8
 800bd22:	4629      	mov	r1, r5
 800bd24:	4630      	mov	r0, r6
 800bd26:	f00d fb0f 	bl	8019348 <gptp_change_pa_info_state>
			break;
 800bd2a:	e096      	b.n	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
			gptp_change_pa_info_state(port, state,
 800bd2c:	2207      	movs	r2, #7
 800bd2e:	4629      	mov	r1, r5
 800bd30:	4630      	mov	r0, r6
 800bd32:	f00d fb09 	bl	8019348 <gptp_change_pa_info_state>
			break;
 800bd36:	e090      	b.n	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
 800bd38:	20001470 	.word	0x20001470
		if (!bmca_data->rcvd_announce_ptr) {
 800bd3c:	4a51      	ldr	r2, [pc, #324]	; (800be84 <gptp_mi_port_announce_information_state_machine+0x410>)
 800bd3e:	2364      	movs	r3, #100	; 0x64
 800bd40:	fb03 2304 	mla	r3, r3, r4, r2
 800bd44:	f8d3 1678 	ldr.w	r1, [r3, #1656]	; 0x678
 800bd48:	2900      	cmp	r1, #0
 800bd4a:	f000 8089 	beq.w	800be60 <gptp_mi_port_announce_information_state_machine+0x3ec>
		copy_priority_vector(&bmca_data->port_priority,
 800bd4e:	f04f 0864 	mov.w	r8, #100	; 0x64
 800bd52:	fb08 f804 	mul.w	r8, r8, r4
 800bd56:	f508 60d3 	add.w	r0, r8, #1688	; 0x698
 800bd5a:	4f4a      	ldr	r7, [pc, #296]	; (800be84 <gptp_mi_port_announce_information_state_machine+0x410>)
 800bd5c:	4632      	mov	r2, r6
 800bd5e:	4438      	add	r0, r7
 800bd60:	f00d fa8f 	bl	8019282 <copy_priority_vector>
		announce = GPTP_ANNOUNCE(bmca_data->rcvd_announce_ptr);
 800bd64:	eb07 0908 	add.w	r9, r7, r8
 800bd68:	f8d9 0678 	ldr.w	r0, [r9, #1656]	; 0x678
 800bd6c:	f00d fa07 	bl	801917e <gptp_get_hdr>
		bmca_data->port_steps_removed = ntohs(announce->steps_removed);
 800bd70:	f8b0 203d 	ldrh.w	r2, [r0, #61]	; 0x3d
 800bd74:	0a13      	lsrs	r3, r2, #8
 800bd76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bd7a:	f8a9 36d0 	strh.w	r3, [r9, #1744]	; 0x6d0
		record_other_announce_info(port);
 800bd7e:	4630      	mov	r0, r6
 800bd80:	f7ff f8f0 	bl	800af64 <record_other_announce_info>
		hdr = GPTP_HDR(bmca_data->rcvd_announce_ptr);
 800bd84:	f8d9 0678 	ldr.w	r0, [r9, #1656]	; 0x678
 800bd88:	f00d f9f9 	bl	801917e <gptp_get_hdr>
				  port_ds->announce_receipt_timeout,
 800bd8c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800bd90:	eb07 1343 	add.w	r3, r7, r3, lsl #5
		gptp_set_time_itv(&bmca_data->ann_rcpt_timeout_time_interval,
 800bd94:	f508 68d8 	add.w	r8, r8, #1728	; 0x6c0
 800bd98:	f990 2021 	ldrsb.w	r2, [r0, #33]	; 0x21
 800bd9c:	f893 1306 	ldrb.w	r1, [r3, #774]	; 0x306
 800bda0:	eb07 0008 	add.w	r0, r7, r8
 800bda4:	f7fc fc50 	bl	8008648 <gptp_set_time_itv>
		bmca_data->info_is = GPTP_INFO_IS_RECEIVED;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	f889 36cc 	strb.w	r3, [r9, #1740]	; 0x6cc
		CLEAR_SELECTED(global_ds, port);
 800bdae:	2301      	movs	r3, #1
 800bdb0:	40a3      	lsls	r3, r4
 800bdb2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800bdb6:	ea22 0203 	bic.w	r2, r2, r3
 800bdba:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
		SET_RESELECT(global_ds, port);
 800bdbe:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		k_timer_stop(&state->ann_rcpt_expiry_timer);
 800bdc8:	f44f 775a 	mov.w	r7, #872	; 0x368
 800bdcc:	fb07 f704 	mul.w	r7, r7, r4
 800bdd0:	f507 68be 	add.w	r8, r7, #1520	; 0x5f0
 800bdd4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800be84 <gptp_mi_port_announce_information_state_machine+0x410>
 800bdd8:	44c8      	add	r8, r9
 800bdda:	4640      	mov	r0, r8
 800bddc:	f010 fc54 	bl	801c688 <z_impl_k_timer_stop>
		state->ann_expired = false;
 800bde0:	444f      	add	r7, r9
 800bde2:	2300      	movs	r3, #0
 800bde4:	f887 3629 	strb.w	r3, [r7, #1577]	; 0x629
			      K_MSEC(gptp_uscaled_ns_to_timer_ms(
 800bde8:	2764      	movs	r7, #100	; 0x64
 800bdea:	fb07 f704 	mul.w	r7, r7, r4
 800bdee:	f507 67d8 	add.w	r7, r7, #1728	; 0x6c0
 800bdf2:	444f      	add	r7, r9
 800bdf4:	4638      	mov	r0, r7
 800bdf6:	f7fc fcfb 	bl	80087f0 <gptp_uscaled_ns_to_timer_ms>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	dc3c      	bgt.n	800be78 <gptp_mi_port_announce_information_state_machine+0x404>
 800bdfe:	2000      	movs	r0, #0
 800be00:	2100      	movs	r1, #0
 800be02:	008f      	lsls	r7, r1, #2
 800be04:	0082      	lsls	r2, r0, #2
 800be06:	ea47 7390 	orr.w	r3, r7, r0, lsr #30
 800be0a:	1812      	adds	r2, r2, r0
 800be0c:	eb41 0303 	adc.w	r3, r1, r3
 800be10:	1892      	adds	r2, r2, r2
 800be12:	415b      	adcs	r3, r3
	z_impl_k_timer_start(timer, duration, period);
 800be14:	2000      	movs	r0, #0
 800be16:	2100      	movs	r1, #0
 800be18:	e9cd 0100 	strd	r0, r1, [sp]
 800be1c:	4640      	mov	r0, r8
 800be1e:	f00a fe65 	bl	8016aec <z_impl_k_timer_start>
		if (bmca_data->rcvd_announce_ptr != NULL) {
 800be22:	4a18      	ldr	r2, [pc, #96]	; (800be84 <gptp_mi_port_announce_information_state_machine+0x410>)
 800be24:	2364      	movs	r3, #100	; 0x64
 800be26:	fb03 2304 	mla	r3, r3, r4, r2
 800be2a:	f8d3 0678 	ldr.w	r0, [r3, #1656]	; 0x678
 800be2e:	b140      	cbz	r0, 800be42 <gptp_mi_port_announce_information_state_machine+0x3ce>
			net_pkt_unref(bmca_data->rcvd_announce_ptr);
 800be30:	f00e fab2 	bl	801a398 <net_pkt_unref>
			bmca_data->rcvd_announce_ptr = NULL;
 800be34:	4a13      	ldr	r2, [pc, #76]	; (800be84 <gptp_mi_port_announce_information_state_machine+0x410>)
 800be36:	2364      	movs	r3, #100	; 0x64
 800be38:	fb03 2304 	mla	r3, r3, r4, r2
 800be3c:	2200      	movs	r2, #0
 800be3e:	f8c3 2678 	str.w	r2, [r3, #1656]	; 0x678
		bmca_data->rcvd_msg = false;
 800be42:	4b10      	ldr	r3, [pc, #64]	; (800be84 <gptp_mi_port_announce_information_state_machine+0x410>)
 800be44:	2264      	movs	r2, #100	; 0x64
 800be46:	fb02 3404 	mla	r4, r2, r4, r3
 800be4a:	2300      	movs	r3, #0
 800be4c:	f884 36d6 	strb.w	r3, [r4, #1750]	; 0x6d6
		gptp_change_pa_info_state(port, state, GPTP_PA_INFO_CURRENT);
 800be50:	2204      	movs	r2, #4
 800be52:	4629      	mov	r1, r5
 800be54:	4630      	mov	r0, r6
 800be56:	f00d fa77 	bl	8019348 <gptp_change_pa_info_state>
}
 800be5a:	b003      	add	sp, #12
 800be5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			bmca_data->rcvd_msg = false;
 800be60:	2364      	movs	r3, #100	; 0x64
 800be62:	fb03 2404 	mla	r4, r3, r4, r2
 800be66:	2300      	movs	r3, #0
 800be68:	f884 36d6 	strb.w	r3, [r4, #1750]	; 0x6d6
			gptp_change_pa_info_state(port, state,
 800be6c:	2204      	movs	r2, #4
 800be6e:	4629      	mov	r1, r5
 800be70:	4630      	mov	r0, r6
 800be72:	f00d fa69 	bl	8019348 <gptp_change_pa_info_state>
			break;
 800be76:	e7f0      	b.n	800be5a <gptp_mi_port_announce_information_state_machine+0x3e6>
			      K_MSEC(gptp_uscaled_ns_to_timer_ms(
 800be78:	4638      	mov	r0, r7
 800be7a:	f7fc fcb9 	bl	80087f0 <gptp_uscaled_ns_to_timer_ms>
 800be7e:	17c1      	asrs	r1, r0, #31
 800be80:	e7bf      	b.n	800be02 <gptp_mi_port_announce_information_state_machine+0x38e>
 800be82:	bf00      	nop
 800be84:	20001470 	.word	0x20001470

0800be88 <gptp_get_current_time_nanosecond>:
{
 800be88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be8a:	b085      	sub	sp, #20
	clk = net_eth_get_ptp_clock(GPTP_PORT_IFACE(port));
 800be8c:	f200 13b5 	addw	r3, r0, #437	; 0x1b5
 800be90:	4821      	ldr	r0, [pc, #132]	; (800bf18 <gptp_get_current_time_nanosecond+0x90>)
 800be92:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800be96:	6840      	ldr	r0, [r0, #4]
 800be98:	f7fb fd6e 	bl	8007978 <net_eth_get_ptp_clock>
	if (clk) {
 800be9c:	b1e0      	cbz	r0, 800bed8 <gptp_get_current_time_nanosecond+0x50>
		struct net_ptp_time tm = {};
 800be9e:	2300      	movs	r3, #0
 800bea0:	9300      	str	r3, [sp, #0]
 800bea2:	9301      	str	r3, [sp, #4]
 800bea4:	9302      	str	r3, [sp, #8]
 800bea6:	9303      	str	r3, [sp, #12]
	const struct ptp_clock_driver_api *api =
 800bea8:	6883      	ldr	r3, [r0, #8]
	return api->get(dev, tm);
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	4669      	mov	r1, sp
 800beae:	4798      	blx	r3
		if (tm.second == 0U && tm.nanosecond == 0U) {
 800beb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800beb4:	ea52 0103 	orrs.w	r1, r2, r3
 800beb8:	d101      	bne.n	800bebe <gptp_get_current_time_nanosecond+0x36>
 800beba:	9902      	ldr	r1, [sp, #8]
 800bebc:	b161      	cbz	r1, 800bed8 <gptp_get_current_time_nanosecond+0x50>
	return (ts->second * NSEC_PER_SEC) + ts->nanosecond;
 800bebe:	4917      	ldr	r1, [pc, #92]	; (800bf1c <gptp_get_current_time_nanosecond+0x94>)
 800bec0:	fba2 4501 	umull	r4, r5, r2, r1
 800bec4:	fb01 5503 	mla	r5, r1, r3, r5
 800bec8:	9b02      	ldr	r3, [sp, #8]
 800beca:	18e4      	adds	r4, r4, r3
 800becc:	f145 0500 	adc.w	r5, r5, #0
}
 800bed0:	4620      	mov	r0, r4
 800bed2:	4629      	mov	r1, r5
 800bed4:	b005      	add	sp, #20
 800bed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_uptime_ticks();
 800bed8:	f010 fb96 	bl	801c608 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 800bedc:	220a      	movs	r2, #10
 800bede:	2300      	movs	r3, #0
 800bee0:	f7f4 fe2c 	bl	8000b3c <__aeabi_uldivmod>
	return k_uptime_get() * 1000000;
 800bee4:	014e      	lsls	r6, r1, #5
 800bee6:	0143      	lsls	r3, r0, #5
 800bee8:	ea46 62d0 	orr.w	r2, r6, r0, lsr #27
 800beec:	1a1b      	subs	r3, r3, r0
 800beee:	eb62 0201 	sbc.w	r2, r2, r1
 800bef2:	0256      	lsls	r6, r2, #9
 800bef4:	ea46 56d3 	orr.w	r6, r6, r3, lsr #23
 800bef8:	025f      	lsls	r7, r3, #9
 800befa:	4632      	mov	r2, r6
 800befc:	183b      	adds	r3, r7, r0
 800befe:	eb41 0202 	adc.w	r2, r1, r2
 800bf02:	0197      	lsls	r7, r2, #6
 800bf04:	ea47 6793 	orr.w	r7, r7, r3, lsr #26
 800bf08:	019e      	lsls	r6, r3, #6
 800bf0a:	1af3      	subs	r3, r6, r3
 800bf0c:	eb67 0202 	sbc.w	r2, r7, r2
 800bf10:	181c      	adds	r4, r3, r0
 800bf12:	eb42 0501 	adc.w	r5, r2, r1
 800bf16:	e7db      	b.n	800bed0 <gptp_get_current_time_nanosecond+0x48>
 800bf18:	20001470 	.word	0x20001470
 800bf1c:	3b9aca00 	.word	0x3b9aca00

0800bf20 <gptp_mi_pss_rcv_state_machine>:
{
 800bf20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	state = &GPTP_PORT_STATE(port)->pss_rcv;
 800bf24:	1e44      	subs	r4, r0, #1
 800bf26:	f44f 755a 	mov.w	r5, #872	; 0x368
 800bf2a:	fb05 f504 	mul.w	r5, r5, r4
 800bf2e:	f505 7576 	add.w	r5, r5, #984	; 0x3d8
 800bf32:	4b38      	ldr	r3, [pc, #224]	; (800c014 <gptp_mi_pss_rcv_state_machine+0xf4>)
 800bf34:	441d      	add	r5, r3
	port_ds = GPTP_PORT_DS(port);
 800bf36:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800bf3a:	0152      	lsls	r2, r2, #5
 800bf3c:	f502 722c 	add.w	r2, r2, #688	; 0x2b0
 800bf40:	18d7      	adds	r7, r2, r3
	if ((!port_ds->ptt_port_enabled) || !port_ds->as_capable) {
 800bf42:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800bf46:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800bf4a:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 800bf4e:	f013 0f01 	tst.w	r3, #1
 800bf52:	d043      	beq.n	800bfdc <gptp_mi_pss_rcv_state_machine+0xbc>
 800bf54:	4606      	mov	r6, r0
 800bf56:	4613      	mov	r3, r2
 800bf58:	4a2e      	ldr	r2, [pc, #184]	; (800c014 <gptp_mi_pss_rcv_state_machine+0xf4>)
 800bf5a:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800bf5e:	f893 330d 	ldrb.w	r3, [r3, #781]	; 0x30d
 800bf62:	f013 0f08 	tst.w	r3, #8
 800bf66:	d039      	beq.n	800bfdc <gptp_mi_pss_rcv_state_machine+0xbc>
	switch (state->state) {
 800bf68:	4a2a      	ldr	r2, [pc, #168]	; (800c014 <gptp_mi_pss_rcv_state_machine+0xf4>)
 800bf6a:	f44f 735a 	mov.w	r3, #872	; 0x368
 800bf6e:	fb03 2304 	mla	r3, r3, r4, r2
 800bf72:	f893 34c8 	ldrb.w	r3, [r3, #1224]	; 0x4c8
 800bf76:	b3eb      	cbz	r3, 800bff4 <gptp_mi_pss_rcv_state_machine+0xd4>
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d139      	bne.n	800bff0 <gptp_mi_pss_rcv_state_machine+0xd0>
		if (state->rcvd_md_sync) {
 800bf7c:	4a25      	ldr	r2, [pc, #148]	; (800c014 <gptp_mi_pss_rcv_state_machine+0xf4>)
 800bf7e:	f44f 735a 	mov.w	r3, #872	; 0x368
 800bf82:	fb03 2304 	mla	r3, r3, r4, r2
 800bf86:	f893 34c9 	ldrb.w	r3, [r3, #1225]	; 0x4c9
 800bf8a:	b38b      	cbz	r3, 800bff0 <gptp_mi_pss_rcv_state_machine+0xd0>
			state->rcvd_md_sync = false;
 800bf8c:	4690      	mov	r8, r2
 800bf8e:	f44f 705a 	mov.w	r0, #872	; 0x368
 800bf92:	fb00 f404 	mul.w	r4, r0, r4
 800bf96:	eb02 0904 	add.w	r9, r2, r4
 800bf9a:	f04f 0a00 	mov.w	sl, #0
 800bf9e:	f889 a4c9 	strb.w	sl, [r9, #1225]	; 0x4c9
			gptp_mi_pss_rcv_compute(port);
 800bfa2:	4630      	mov	r0, r6
 800bfa4:	f7f5 fd6c 	bl	8001a80 <gptp_mi_pss_rcv_compute>
			state->state = GPTP_PSS_RCV_RECEIVED_SYNC;
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	f889 24c8 	strb.w	r2, [r9, #1224]	; 0x4c8
			site_ss_state->pss_rcv_ptr = &state->pss;
 800bfae:	f504 6385 	add.w	r3, r4, #1064	; 0x428
 800bfb2:	4443      	add	r3, r8
 800bfb4:	f8c8 31f0 	str.w	r3, [r8, #496]	; 0x1f0
			site_ss_state->rcvd_pss = true;
 800bfb8:	f888 21f5 	strb.w	r2, [r8, #501]	; 0x1f5
			k_timer_stop(&state->rcv_sync_receipt_timeout_timer);
 800bfbc:	f504 6491 	add.w	r4, r4, #1160	; 0x488
 800bfc0:	eb04 0008 	add.w	r0, r4, r8
	z_impl_k_timer_stop(timer);
 800bfc4:	f010 fb60 	bl	801c688 <z_impl_k_timer_stop>
			state->rcv_sync_receipt_timeout_timer_expired = false;
 800bfc8:	f889 a4ca 	strb.w	sl, [r9, #1226]	; 0x4ca
			if (GPTP_GLOBAL_DS()->gm_present) {
 800bfcc:	f898 3116 	ldrb.w	r3, [r8, #278]	; 0x116
 800bfd0:	b173      	cbz	r3, 800bff0 <gptp_mi_pss_rcv_state_machine+0xd0>
				start_rcv_sync_timer(port_ds, state);
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	4638      	mov	r0, r7
 800bfd6:	f7fe fe2b 	bl	800ac30 <start_rcv_sync_timer>
 800bfda:	e009      	b.n	800bff0 <gptp_mi_pss_rcv_state_machine+0xd0>
		state->rcvd_md_sync = false;
 800bfdc:	4a0d      	ldr	r2, [pc, #52]	; (800c014 <gptp_mi_pss_rcv_state_machine+0xf4>)
 800bfde:	f44f 735a 	mov.w	r3, #872	; 0x368
 800bfe2:	fb03 2404 	mla	r4, r3, r4, r2
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	f884 34c9 	strb.w	r3, [r4, #1225]	; 0x4c9
		state->state = GPTP_PSS_RCV_DISCARD;
 800bfec:	f884 34c8 	strb.w	r3, [r4, #1224]	; 0x4c8
}
 800bff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		k_timer_stop(&state->rcv_sync_receipt_timeout_timer);
 800bff4:	f44f 785a 	mov.w	r8, #872	; 0x368
 800bff8:	fb08 f904 	mul.w	r9, r8, r4
 800bffc:	f509 6091 	add.w	r0, r9, #1160	; 0x488
 800c000:	f8df 8010 	ldr.w	r8, [pc, #16]	; 800c014 <gptp_mi_pss_rcv_state_machine+0xf4>
 800c004:	4440      	add	r0, r8
 800c006:	f010 fb3f 	bl	801c688 <z_impl_k_timer_stop>
		state->rcv_sync_receipt_timeout_timer_expired = false;
 800c00a:	44c8      	add	r8, r9
 800c00c:	2300      	movs	r3, #0
 800c00e:	f888 34ca 	strb.w	r3, [r8, #1226]	; 0x4ca
 800c012:	e7b3      	b.n	800bf7c <gptp_mi_pss_rcv_state_machine+0x5c>
 800c014:	20001470 	.word	0x20001470

0800c018 <gptp_get_current_master_time_nanosecond>:
{
 800c018:	b508      	push	{r3, lr}
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800c01a:	2001      	movs	r0, #1
 800c01c:	4b08      	ldr	r3, [pc, #32]	; (800c040 <gptp_get_current_master_time_nanosecond+0x28>)
 800c01e:	f893 312b 	ldrb.w	r3, [r3, #299]	; 0x12b
 800c022:	4283      	cmp	r3, r0
 800c024:	db08      	blt.n	800c038 <gptp_get_current_master_time_nanosecond+0x20>
		if (port_role[port] == GPTP_PORT_MASTER) {
 800c026:	4b07      	ldr	r3, [pc, #28]	; (800c044 <gptp_get_current_master_time_nanosecond+0x2c>)
 800c028:	5cc3      	ldrb	r3, [r0, r3]
 800c02a:	2b05      	cmp	r3, #5
 800c02c:	d001      	beq.n	800c032 <gptp_get_current_master_time_nanosecond+0x1a>
	for (port = GPTP_PORT_START; port < GPTP_PORT_END; port++) {
 800c02e:	3001      	adds	r0, #1
 800c030:	e7f4      	b.n	800c01c <gptp_get_current_master_time_nanosecond+0x4>
			return gptp_get_current_time_nanosecond(port);
 800c032:	f7ff ff29 	bl	800be88 <gptp_get_current_time_nanosecond>
 800c036:	e001      	b.n	800c03c <gptp_get_current_master_time_nanosecond+0x24>
	return 0;
 800c038:	2000      	movs	r0, #0
 800c03a:	4601      	mov	r1, r0
}
 800c03c:	bd08      	pop	{r3, pc}
 800c03e:	bf00      	nop
 800c040:	20001470 	.word	0x20001470
 800c044:	20001584 	.word	0x20001584

0800c048 <gptp_mi_clk_master_sync_rcv_state_machine>:
	switch (s->state) {
 800c048:	4b25      	ldr	r3, [pc, #148]	; (800c0e0 <gptp_mi_clk_master_sync_rcv_state_machine+0x98>)
 800c04a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d008      	beq.n	800c064 <gptp_mi_clk_master_sync_rcv_state_machine+0x1c>
 800c052:	2b02      	cmp	r3, #2
 800c054:	d014      	beq.n	800c080 <gptp_mi_clk_master_sync_rcv_state_machine+0x38>
 800c056:	b103      	cbz	r3, 800c05a <gptp_mi_clk_master_sync_rcv_state_machine+0x12>
 800c058:	4770      	bx	lr
		s->state = GPTP_CMS_RCV_WAITING;
 800c05a:	4b21      	ldr	r3, [pc, #132]	; (800c0e0 <gptp_mi_clk_master_sync_rcv_state_machine+0x98>)
 800c05c:	2201      	movs	r2, #1
 800c05e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
		break;
 800c062:	4770      	bx	lr
		if (s->rcvd_clock_source_req || s->rcvd_local_clock_tick) {
 800c064:	4b1e      	ldr	r3, [pc, #120]	; (800c0e0 <gptp_mi_clk_master_sync_rcv_state_machine+0x98>)
 800c066:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 800c06a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c06e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c072:	2b00      	cmp	r3, #0
 800c074:	d0f0      	beq.n	800c058 <gptp_mi_clk_master_sync_rcv_state_machine+0x10>
			s->state = GPTP_CMS_RCV_SOURCE_TIME;
 800c076:	4b1a      	ldr	r3, [pc, #104]	; (800c0e0 <gptp_mi_clk_master_sync_rcv_state_machine+0x98>)
 800c078:	2202      	movs	r2, #2
 800c07a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 800c07e:	4770      	bx	lr
{
 800c080:	b510      	push	{r4, lr}
		global_ds->local_time.high = 0U;
 800c082:	4c17      	ldr	r4, [pc, #92]	; (800c0e0 <gptp_mi_clk_master_sync_rcv_state_machine+0x98>)
 800c084:	2300      	movs	r3, #0
 800c086:	f8a4 30d6 	strh.w	r3, [r4, #214]	; 0xd6
 800c08a:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
			gptp_get_current_master_time_nanosecond();
 800c08e:	f7ff ffc3 	bl	800c018 <gptp_get_current_master_time_nanosecond>
		global_ds->local_time.low =
 800c092:	f8c4 00da 	str.w	r0, [r4, #218]	; 0xda
 800c096:	f8c4 10de 	str.w	r1, [r4, #222]	; 0xde
		if (s->rcvd_clock_source_req) {
 800c09a:	f894 32a9 	ldrb.w	r3, [r4, #681]	; 0x2a9
 800c09e:	b94b      	cbnz	r3, 800c0b4 <gptp_mi_clk_master_sync_rcv_state_machine+0x6c>
		s->rcvd_clock_source_req = false;
 800c0a0:	4b0f      	ldr	r3, [pc, #60]	; (800c0e0 <gptp_mi_clk_master_sync_rcv_state_machine+0x98>)
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
		s->rcvd_local_clock_tick = false;
 800c0a8:	f883 22aa 	strb.w	r2, [r3, #682]	; 0x2aa
		s->state = GPTP_CMS_RCV_WAITING;
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
}
 800c0b2:	bd10      	pop	{r4, pc}
			gptp_compute_gm_rate_ratio();
 800c0b4:	f7f5 faac 	bl	8001610 <gptp_compute_gm_rate_ratio>
				global_ds->clk_src_time_base_indicator;
 800c0b8:	4623      	mov	r3, r4
 800c0ba:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
			global_ds->clk_src_time_base_indicator_prev =
 800c0be:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
				s->rcvd_clk_src_req.time_base_indicator;
 800c0c2:	f8b4 22a4 	ldrh.w	r2, [r4, #676]	; 0x2a4
			global_ds->clk_src_time_base_indicator =
 800c0c6:	f8a4 210e 	strh.w	r2, [r4, #270]	; 0x10e
			memcpy(&global_ds->clk_src_last_gm_phase_change,
 800c0ca:	3440      	adds	r4, #64	; 0x40
 800c0cc:	f503 7226 	add.w	r2, r3, #664	; 0x298
 800c0d0:	ca07      	ldmia	r2, {r0, r1, r2}
 800c0d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				s->rcvd_clk_src_req.last_gm_freq_change;
 800c0d6:	e9d3 01a0 	ldrd	r0, r1, [r3, #640]	; 0x280
			global_ds->clk_src_last_gm_freq_change =
 800c0da:	e9c3 0106 	strd	r0, r1, [r3, #24]
 800c0de:	e7df      	b.n	800c0a0 <gptp_mi_clk_master_sync_rcv_state_machine+0x58>
 800c0e0:	20001470 	.word	0x20001470

0800c0e4 <lldp_check_iface>:

	lldp_submit_work(ctx->lldp[slot].tx_timer_timeout);
}

static int lldp_check_iface(struct net_if *iface)
{
 800c0e4:	b508      	push	{r3, lr}
	if (!iface || !iface->if_dev) {
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	b180      	cbz	r0, 800c10c <lldp_check_iface+0x28>
 800c0ea:	6803      	ldr	r3, [r0, #0]
 800c0ec:	b103      	cbz	r3, 800c0f0 <lldp_check_iface+0xc>
	return iface->if_dev->l2;
 800c0ee:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) != &NET_L2_GET_NAME(ETHERNET)) {
 800c0f0:	490b      	ldr	r1, [pc, #44]	; (800c120 <lldp_check_iface+0x3c>)
 800c0f2:	428b      	cmp	r3, r1
 800c0f4:	d10e      	bne.n	800c114 <lldp_check_iface+0x30>
	return iface->if_dev->dev;
 800c0f6:	6813      	ldr	r3, [r2, #0]
 800c0f8:	6818      	ldr	r0, [r3, #0]
	const struct ethernet_api *eth =
 800c0fa:	6883      	ldr	r3, [r0, #8]
	if (!eth->get_capabilities) {
 800c0fc:	691b      	ldr	r3, [r3, #16]
 800c0fe:	b13b      	cbz	r3, 800c110 <lldp_check_iface+0x2c>
	return eth->get_capabilities(net_if_get_device(iface));
 800c100:	4798      	blx	r3
		return -ENOENT;
	}

	if (!(net_eth_get_hw_capabilities(iface) & ETHERNET_LLDP)) {
 800c102:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 800c106:	d008      	beq.n	800c11a <lldp_check_iface+0x36>
		return -ESRCH;
	}

	return 0;
 800c108:	2000      	movs	r0, #0
}
 800c10a:	bd08      	pop	{r3, pc}
		return NULL;
 800c10c:	4603      	mov	r3, r0
 800c10e:	e7ef      	b.n	800c0f0 <lldp_check_iface+0xc>
		return (enum ethernet_hw_caps)0;
 800c110:	2000      	movs	r0, #0
 800c112:	e7f6      	b.n	800c102 <lldp_check_iface+0x1e>
		return -ENOENT;
 800c114:	f06f 0001 	mvn.w	r0, #1
 800c118:	e7f7      	b.n	800c10a <lldp_check_iface+0x26>
		return -ESRCH;
 800c11a:	f06f 0002 	mvn.w	r0, #2
 800c11e:	e7f4      	b.n	800c10a <lldp_check_iface+0x26>
 800c120:	200013fc 	.word	0x200013fc

0800c124 <lldp_submit_work>:
{
 800c124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c126:	4606      	mov	r6, r0
	k_work_cancel_delayable(&lldp_tx_timer);
 800c128:	4f07      	ldr	r7, [pc, #28]	; (800c148 <lldp_submit_work+0x24>)
 800c12a:	4638      	mov	r0, r7
 800c12c:	f010 f816 	bl	801c15c <k_work_cancel_delayable>
			return t * ((uint64_t)to_hz / from_hz);
 800c130:	00b4      	lsls	r4, r6, #2
 800c132:	0fb5      	lsrs	r5, r6, #30
 800c134:	19a4      	adds	r4, r4, r6
 800c136:	f145 0500 	adc.w	r5, r5, #0
	k_work_reschedule(&lldp_tx_timer, K_MSEC(timeout));
 800c13a:	1922      	adds	r2, r4, r4
 800c13c:	eb45 0305 	adc.w	r3, r5, r5
 800c140:	4638      	mov	r0, r7
 800c142:	f009 fee7 	bl	8015f14 <k_work_reschedule>
}
 800c146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c148:	20001c38 	.word	0x20001c38

0800c14c <lldp_start_timer>:
{
 800c14c:	b538      	push	{r3, r4, r5, lr}
 800c14e:	4605      	mov	r5, r0
 800c150:	4614      	mov	r4, r2
	ctx->lldp[slot].iface = iface;
 800c152:	1c53      	adds	r3, r2, #1
 800c154:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c158:	f840 1033 	str.w	r1, [r0, r3, lsl #3]
	sys_slist_append(&lldp_ifaces, &ctx->lldp[slot].node);
 800c15c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800c160:	00db      	lsls	r3, r3, #3
 800c162:	3318      	adds	r3, #24
 800c164:	4403      	add	r3, r0
	parent->next = child;
 800c166:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800c16a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800c16e:	2100      	movs	r1, #0
 800c170:	6191      	str	r1, [r2, #24]
	return list->tail;
 800c172:	4a0e      	ldr	r2, [pc, #56]	; (800c1ac <lldp_start_timer+0x60>)
 800c174:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_APPEND(slist, snode)
 800c176:	b1a2      	cbz	r2, 800c1a2 <lldp_start_timer+0x56>
	parent->next = child;
 800c178:	6013      	str	r3, [r2, #0]
	list->tail = node;
 800c17a:	4a0c      	ldr	r2, [pc, #48]	; (800c1ac <lldp_start_timer+0x60>)
 800c17c:	6053      	str	r3, [r2, #4]
	return z_impl_k_uptime_ticks();
 800c17e:	f010 fa43 	bl	801c608 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 800c182:	220a      	movs	r2, #10
 800c184:	2300      	movs	r3, #0
 800c186:	f7f4 fcd9 	bl	8000b3c <__aeabi_uldivmod>
	ctx->lldp[slot].tx_timer_start = k_uptime_get();
 800c18a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800c18e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800c192:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
	ctx->lldp[slot].tx_timer_timeout =
 800c196:	f247 5030 	movw	r0, #30000	; 0x7530
 800c19a:	6398      	str	r0, [r3, #56]	; 0x38
	lldp_submit_work(ctx->lldp[slot].tx_timer_timeout);
 800c19c:	f7ff ffc2 	bl	800c124 <lldp_submit_work>
}
 800c1a0:	bd38      	pop	{r3, r4, r5, pc}
 800c1a2:	4a02      	ldr	r2, [pc, #8]	; (800c1ac <lldp_start_timer+0x60>)
 800c1a4:	6053      	str	r3, [r2, #4]
	list->head = node;
 800c1a6:	6013      	str	r3, [r2, #0]
}
 800c1a8:	e7e9      	b.n	800c17e <lldp_start_timer+0x32>
 800c1aa:	bf00      	nop
 800c1ac:	200031a4 	.word	0x200031a4

0800c1b0 <lldp_start>:

static int lldp_start(struct net_if *iface, uint32_t mgmt_event)
{
 800c1b0:	b570      	push	{r4, r5, r6, lr}
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	460d      	mov	r5, r1
	struct ethernet_context *ctx;
	int ret, slot;

	ret = lldp_check_iface(iface);
 800c1b6:	f7ff ff95 	bl	800c0e4 <lldp_check_iface>
	if (ret < 0) {
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	db0e      	blt.n	800c1dc <lldp_start+0x2c>
	return iface->if_dev->l2_data;
 800c1be:	6823      	ldr	r3, [r4, #0]
 800c1c0:	689e      	ldr	r6, [r3, #8]
		return ret;
	}

	ctx = net_if_l2_data(iface);

	ret = lldp_find(ctx, iface);
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	4630      	mov	r0, r6
 800c1c6:	f00d f906 	bl	80193d6 <lldp_find>
	if (ret < 0) {
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	db06      	blt.n	800c1dc <lldp_start+0x2c>
		return ret;
	}

	slot = ret;

	if (mgmt_event == NET_EVENT_IF_DOWN) {
 800c1ce:	4b24      	ldr	r3, [pc, #144]	; (800c260 <lldp_start+0xb0>)
 800c1d0:	429d      	cmp	r5, r3
 800c1d2:	d004      	beq.n	800c1de <lldp_start+0x2e>
					  &ctx->lldp[slot].node);

		if (sys_slist_is_empty(&lldp_ifaces)) {
			k_work_cancel_delayable(&lldp_tx_timer);
		}
	} else if (mgmt_event == NET_EVENT_IF_UP) {
 800c1d4:	4b23      	ldr	r3, [pc, #140]	; (800c264 <lldp_start+0xb4>)
 800c1d6:	429d      	cmp	r5, r3
 800c1d8:	d03a      	beq.n	800c250 <lldp_start+0xa0>
		NET_DBG("Starting timer for iface %p", iface);
		lldp_start_timer(ctx, iface, slot);
	}

	return 0;
 800c1da:	2000      	movs	r0, #0
}
 800c1dc:	bd70      	pop	{r4, r5, r6, pc}
		sys_slist_find_and_remove(&lldp_ifaces,
 800c1de:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 800c1e2:	00d2      	lsls	r2, r2, #3
 800c1e4:	3218      	adds	r2, #24
 800c1e6:	4432      	add	r2, r6
	return list->head;
 800c1e8:	4b1f      	ldr	r3, [pc, #124]	; (800c268 <lldp_start+0xb8>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	b1ab      	cbz	r3, 800c21c <lldp_start+0x6c>
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d002      	beq.n	800c1fa <lldp_start+0x4a>
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	e7f9      	b.n	800c1ee <lldp_start+0x3e>
Z_GENLIST_REMOVE(slist, snode)
 800c1fa:	b1a1      	cbz	r1, 800c226 <lldp_start+0x76>
	return node->next;
 800c1fc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800c200:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800c204:	699b      	ldr	r3, [r3, #24]
	parent->next = child;
 800c206:	600b      	str	r3, [r1, #0]
	return list->tail;
 800c208:	4b17      	ldr	r3, [pc, #92]	; (800c268 <lldp_start+0xb8>)
 800c20a:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d017      	beq.n	800c240 <lldp_start+0x90>
	parent->next = child;
 800c210:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800c214:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
 800c218:	2300      	movs	r3, #0
 800c21a:	61b3      	str	r3, [r6, #24]
	return list->head;
 800c21c:	4b12      	ldr	r3, [pc, #72]	; (800c268 <lldp_start+0xb8>)
 800c21e:	681b      	ldr	r3, [r3, #0]
		if (sys_slist_is_empty(&lldp_ifaces)) {
 800c220:	b18b      	cbz	r3, 800c246 <lldp_start+0x96>
	return 0;
 800c222:	2000      	movs	r0, #0
 800c224:	e7da      	b.n	800c1dc <lldp_start+0x2c>
	return node->next;
 800c226:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 800c22a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800c22e:	6999      	ldr	r1, [r3, #24]
	list->head = node;
 800c230:	4b0d      	ldr	r3, [pc, #52]	; (800c268 <lldp_start+0xb8>)
 800c232:	6019      	str	r1, [r3, #0]
	return list->tail;
 800c234:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800c236:	429a      	cmp	r2, r3
 800c238:	d1ea      	bne.n	800c210 <lldp_start+0x60>
	list->tail = node;
 800c23a:	4b0b      	ldr	r3, [pc, #44]	; (800c268 <lldp_start+0xb8>)
 800c23c:	6059      	str	r1, [r3, #4]
}
 800c23e:	e7e7      	b.n	800c210 <lldp_start+0x60>
	list->tail = node;
 800c240:	4b09      	ldr	r3, [pc, #36]	; (800c268 <lldp_start+0xb8>)
 800c242:	6059      	str	r1, [r3, #4]
}
 800c244:	e7e4      	b.n	800c210 <lldp_start+0x60>
			k_work_cancel_delayable(&lldp_tx_timer);
 800c246:	4809      	ldr	r0, [pc, #36]	; (800c26c <lldp_start+0xbc>)
 800c248:	f00f ff88 	bl	801c15c <k_work_cancel_delayable>
	return 0;
 800c24c:	2000      	movs	r0, #0
 800c24e:	e7c5      	b.n	800c1dc <lldp_start+0x2c>
		lldp_start_timer(ctx, iface, slot);
 800c250:	4602      	mov	r2, r0
 800c252:	4621      	mov	r1, r4
 800c254:	4630      	mov	r0, r6
 800c256:	f7ff ff79 	bl	800c14c <lldp_start_timer>
	return 0;
 800c25a:	2000      	movs	r0, #0
 800c25c:	e7be      	b.n	800c1dc <lldp_start+0x2c>
 800c25e:	bf00      	nop
 800c260:	d0010001 	.word	0xd0010001
 800c264:	d0010002 	.word	0xd0010002
 800c268:	200031a4 	.word	0x200031a4
 800c26c:	20001c38 	.word	0x20001c38

0800c270 <iface_cb>:
	if (iface == NULL) {
 800c270:	b170      	cbz	r0, 800c290 <iface_cb+0x20>
{
	lldp_start(iface, mgmt_event);
}

static void iface_cb(struct net_if *iface, void *user_data)
{
 800c272:	b508      	push	{r3, lr}
	return atomic_test_bit(iface->if_dev->flags, value);
 800c274:	6802      	ldr	r2, [r0, #0]
 800c276:	f3bf 8f5b 	dmb	ish
 800c27a:	68d2      	ldr	r2, [r2, #12]
 800c27c:	f3bf 8f5b 	dmb	ish
	/* If the network interface is already up, then call the sender
	 * immediately. If the interface is not ethernet one, then
	 * lldp_start() will return immediately.
	 */
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
 800c280:	f012 0f01 	tst.w	r2, #1
 800c284:	d100      	bne.n	800c288 <iface_cb+0x18>
		lldp_start(iface, NET_EVENT_IF_UP);
	}
}
 800c286:	bd08      	pop	{r3, pc}
		lldp_start(iface, NET_EVENT_IF_UP);
 800c288:	4902      	ldr	r1, [pc, #8]	; (800c294 <iface_cb+0x24>)
 800c28a:	f7ff ff91 	bl	800c1b0 <lldp_start>
}
 800c28e:	e7fa      	b.n	800c286 <iface_cb+0x16>
 800c290:	4770      	bx	lr
 800c292:	bf00      	nop
 800c294:	d0010002 	.word	0xd0010002

0800c298 <lldp_send>:
{
 800c298:	b570      	push	{r4, r5, r6, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	4604      	mov	r4, r0
	if (!lldp->lldpdu) {
 800c29e:	6843      	ldr	r3, [r0, #4]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d064      	beq.n	800c36e <lldp_send+0xd6>
	if (lldp->optional_du && lldp->optional_len) {
 800c2a4:	6883      	ldr	r3, [r0, #8]
 800c2a6:	b11b      	cbz	r3, 800c2b0 <lldp_send+0x18>
 800c2a8:	68c1      	ldr	r1, [r0, #12]
 800c2aa:	b119      	cbz	r1, 800c2b4 <lldp_send+0x1c>
		len = sizeof(struct net_lldpdu) + lldp->optional_len;
 800c2ac:	3123      	adds	r1, #35	; 0x23
 800c2ae:	e002      	b.n	800c2b6 <lldp_send+0x1e>
		len = sizeof(struct net_lldpdu);
 800c2b0:	2123      	movs	r1, #35	; 0x23
 800c2b2:	e000      	b.n	800c2b6 <lldp_send+0x1e>
 800c2b4:	2123      	movs	r1, #35	; 0x23
					BUF_ALLOC_TIMEOUT);
 800c2b6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c2ba:	2300      	movs	r3, #0
	pkt = net_pkt_alloc_with_buffer(lldp->iface, len, AF_UNSPEC, 0,
 800c2bc:	e9cd 2300 	strd	r2, r3, [sp]
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	3102      	adds	r1, #2
 800c2c6:	6920      	ldr	r0, [r4, #16]
 800c2c8:	f003 fc5c 	bl	800fb84 <net_pkt_alloc_with_buffer>
	if (!pkt) {
 800c2cc:	4606      	mov	r6, r0
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	d050      	beq.n	800c374 <lldp_send+0xdc>
	pkt->lldp_pkt = is_lldp;
 800c2d2:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 800c2d6:	f043 0301 	orr.w	r3, r3, #1
 800c2da:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
	ret = net_pkt_write(pkt, (uint8_t *)lldp->lldpdu,
 800c2de:	2223      	movs	r2, #35	; 0x23
 800c2e0:	6861      	ldr	r1, [r4, #4]
 800c2e2:	f00e fa6d 	bl	801a7c0 <net_pkt_write>
	if (ret < 0) {
 800c2e6:	1e05      	subs	r5, r0, #0
 800c2e8:	db2a      	blt.n	800c340 <lldp_send+0xa8>
	if (lldp->optional_du && lldp->optional_len) {
 800c2ea:	68a1      	ldr	r1, [r4, #8]
 800c2ec:	b109      	cbz	r1, 800c2f2 <lldp_send+0x5a>
 800c2ee:	68e2      	ldr	r2, [r4, #12]
 800c2f0:	bb52      	cbnz	r2, 800c348 <lldp_send+0xb0>
		uint16_t tlv_end = htons(NET_LLDP_END_LLDPDU_VALUE);
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	f8ad 300e 	strh.w	r3, [sp, #14]
		ret = net_pkt_write(pkt, (uint8_t *)&tlv_end, sizeof(tlv_end));
 800c2f8:	2202      	movs	r2, #2
 800c2fa:	f10d 010e 	add.w	r1, sp, #14
 800c2fe:	4630      	mov	r0, r6
 800c300:	f00e fa5e 	bl	801a7c0 <net_pkt_write>
		if (ret < 0) {
 800c304:	1e05      	subs	r5, r0, #0
 800c306:	db28      	blt.n	800c35a <lldp_send+0xc2>
	net_pkt_lladdr_src(pkt)->addr = net_if_get_link_addr(lldp->iface)->addr;
 800c308:	6923      	ldr	r3, [r4, #16]
	return &iface->if_dev->link_addr;
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	691b      	ldr	r3, [r3, #16]
 800c30e:	6373      	str	r3, [r6, #52]	; 0x34
	net_pkt_lladdr_src(pkt)->len = sizeof(struct net_eth_addr);
 800c310:	2306      	movs	r3, #6
 800c312:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)lldp_multicast_eth_addr.addr;
 800c316:	4a19      	ldr	r2, [pc, #100]	; (800c37c <lldp_send+0xe4>)
 800c318:	63f2      	str	r2, [r6, #60]	; 0x3c
	net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
 800c31a:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
	if (net_if_send_data(lldp->iface, pkt) == NET_DROP) {
 800c31e:	4631      	mov	r1, r6
 800c320:	6920      	ldr	r0, [r4, #16]
 800c322:	f002 fdd9 	bl	800eed8 <net_if_send_data>
 800c326:	2802      	cmp	r0, #2
 800c328:	d01b      	beq.n	800c362 <lldp_send+0xca>
 800c32a:	f010 f96d 	bl	801c608 <z_impl_k_uptime_ticks>
 800c32e:	220a      	movs	r2, #10
 800c330:	2300      	movs	r3, #0
 800c332:	f7f4 fc03 	bl	8000b3c <__aeabi_uldivmod>
	lldp->tx_timer_start = k_uptime_get();
 800c336:	e9c4 0106 	strd	r0, r1, [r4, #24]
}
 800c33a:	4628      	mov	r0, r5
 800c33c:	b004      	add	sp, #16
 800c33e:	bd70      	pop	{r4, r5, r6, pc}
		net_pkt_unref(pkt);
 800c340:	4630      	mov	r0, r6
 800c342:	f00e f829 	bl	801a398 <net_pkt_unref>
		goto out;
 800c346:	e7f0      	b.n	800c32a <lldp_send+0x92>
		ret = net_pkt_write(pkt, (uint8_t *)lldp->optional_du,
 800c348:	4630      	mov	r0, r6
 800c34a:	f00e fa39 	bl	801a7c0 <net_pkt_write>
		if (ret < 0) {
 800c34e:	1e05      	subs	r5, r0, #0
 800c350:	dacf      	bge.n	800c2f2 <lldp_send+0x5a>
			net_pkt_unref(pkt);
 800c352:	4630      	mov	r0, r6
 800c354:	f00e f820 	bl	801a398 <net_pkt_unref>
			goto out;
 800c358:	e7e7      	b.n	800c32a <lldp_send+0x92>
			net_pkt_unref(pkt);
 800c35a:	4630      	mov	r0, r6
 800c35c:	f00e f81c 	bl	801a398 <net_pkt_unref>
			goto out;
 800c360:	e7e3      	b.n	800c32a <lldp_send+0x92>
		net_pkt_unref(pkt);
 800c362:	4630      	mov	r0, r6
 800c364:	f00e f818 	bl	801a398 <net_pkt_unref>
		ret = -EIO;
 800c368:	f06f 0504 	mvn.w	r5, #4
 800c36c:	e7dd      	b.n	800c32a <lldp_send+0x92>
		ret = -EINVAL;
 800c36e:	f06f 0515 	mvn.w	r5, #21
 800c372:	e7da      	b.n	800c32a <lldp_send+0x92>
		ret = -ENOMEM;
 800c374:	f06f 050b 	mvn.w	r5, #11
 800c378:	e7d7      	b.n	800c32a <lldp_send+0x92>
 800c37a:	bf00      	nop
 800c37c:	0801e098 	.word	0x0801e098

0800c380 <lldp_tx_timeout>:
{
 800c380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c382:	f010 f941 	bl	801c608 <z_impl_k_uptime_ticks>
 800c386:	220a      	movs	r2, #10
 800c388:	2300      	movs	r3, #0
 800c38a:	f7f4 fbd7 	bl	8000b3c <__aeabi_uldivmod>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
 800c38e:	4606      	mov	r6, r0
 800c390:	460f      	mov	r7, r1
	return list->head;
 800c392:	4b16      	ldr	r3, [pc, #88]	; (800c3ec <lldp_tx_timeout+0x6c>)
 800c394:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&lldp_ifaces, current, next, node) {
 800c396:	b128      	cbz	r0, 800c3a4 <lldp_tx_timeout+0x24>
 800c398:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
 800c39a:	b100      	cbz	r0, 800c39e <lldp_tx_timeout+0x1e>
	return node->next;
 800c39c:	6804      	ldr	r4, [r0, #0]
 800c39e:	f06f 0501 	mvn.w	r5, #1
 800c3a2:	e007      	b.n	800c3b4 <lldp_tx_timeout+0x34>
 800c3a4:	4604      	mov	r4, r0
 800c3a6:	e7fa      	b.n	800c39e <lldp_tx_timeout+0x1e>
 800c3a8:	b16c      	cbz	r4, 800c3c6 <lldp_tx_timeout+0x46>
 800c3aa:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800c3ac:	b104      	cbz	r4, 800c3b0 <lldp_tx_timeout+0x30>
	return node->next;
 800c3ae:	6823      	ldr	r3, [r4, #0]
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	461c      	mov	r4, r3
 800c3b4:	b148      	cbz	r0, 800c3ca <lldp_tx_timeout+0x4a>
		next_timeout = lldp_manage_timeouts(current, timeout);
 800c3b6:	4632      	mov	r2, r6
 800c3b8:	463b      	mov	r3, r7
 800c3ba:	f00d f85c 	bl	8019476 <lldp_manage_timeouts>
		if (next_timeout < timeout_update) {
 800c3be:	42a8      	cmp	r0, r5
 800c3c0:	d2f2      	bcs.n	800c3a8 <lldp_tx_timeout+0x28>
			timeout_update = next_timeout;
 800c3c2:	4605      	mov	r5, r0
 800c3c4:	e7f0      	b.n	800c3a8 <lldp_tx_timeout+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&lldp_ifaces, current, next, node) {
 800c3c6:	4623      	mov	r3, r4
 800c3c8:	e7f2      	b.n	800c3b0 <lldp_tx_timeout+0x30>
	if (timeout_update < (UINT32_MAX - 1)) {
 800c3ca:	f115 0f03 	cmn.w	r5, #3
 800c3ce:	d900      	bls.n	800c3d2 <lldp_tx_timeout+0x52>
}
 800c3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return t * ((uint64_t)to_hz / from_hz);
 800c3d2:	00a8      	lsls	r0, r5, #2
 800c3d4:	0fa9      	lsrs	r1, r5, #30
 800c3d6:	1940      	adds	r0, r0, r5
 800c3d8:	f141 0100 	adc.w	r1, r1, #0
		k_work_reschedule(&lldp_tx_timer, K_MSEC(timeout_update));
 800c3dc:	1802      	adds	r2, r0, r0
 800c3de:	eb41 0301 	adc.w	r3, r1, r1
 800c3e2:	4803      	ldr	r0, [pc, #12]	; (800c3f0 <lldp_tx_timeout+0x70>)
 800c3e4:	f009 fd96 	bl	8015f14 <k_work_reschedule>
}
 800c3e8:	e7f2      	b.n	800c3d0 <lldp_tx_timeout+0x50>
 800c3ea:	bf00      	nop
 800c3ec:	200031a4 	.word	0x200031a4
 800c3f0:	20001c38 	.word	0x20001c38

0800c3f4 <net_lldp_init>:
	net_lldp_config(iface, NULL);
	net_lldp_config_optional(iface, NULL, 0);
}

void net_lldp_init(void)
{
 800c3f4:	b508      	push	{r3, lr}
	k_work_init_delayable(&lldp_tx_timer, lldp_tx_timeout);
 800c3f6:	4908      	ldr	r1, [pc, #32]	; (800c418 <net_lldp_init+0x24>)
 800c3f8:	4808      	ldr	r0, [pc, #32]	; (800c41c <net_lldp_init+0x28>)
 800c3fa:	f00f fe7d 	bl	801c0f8 <k_work_init_delayable>

	net_if_foreach(iface_cb, NULL);
 800c3fe:	2100      	movs	r1, #0
 800c400:	4807      	ldr	r0, [pc, #28]	; (800c420 <net_lldp_init+0x2c>)
 800c402:	f002 fe37 	bl	800f074 <net_if_foreach>
				  uint32_t mgmt_event_mask)
{
	__ASSERT(cb, "Callback pointer should not be NULL");
	__ASSERT(handler, "Handler pointer should not be NULL");

	cb->handler = handler;
 800c406:	4807      	ldr	r0, [pc, #28]	; (800c424 <net_lldp_init+0x30>)
 800c408:	4b07      	ldr	r3, [pc, #28]	; (800c428 <net_lldp_init+0x34>)
 800c40a:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
 800c40c:	4b07      	ldr	r3, [pc, #28]	; (800c42c <net_lldp_init+0x38>)
 800c40e:	6083      	str	r3, [r0, #8]

	net_mgmt_init_event_callback(&cb, iface_event_handler,
				     NET_EVENT_IF_UP | NET_EVENT_IF_DOWN);
	net_mgmt_add_event_callback(&cb);
 800c410:	f003 f982 	bl	800f718 <net_mgmt_add_event_callback>
}
 800c414:	bd08      	pop	{r3, pc}
 800c416:	bf00      	nop
 800c418:	0800c381 	.word	0x0800c381
 800c41c:	20001c38 	.word	0x20001c38
 800c420:	0800c271 	.word	0x0800c271
 800c424:	20003198 	.word	0x20003198
 800c428:	08019437 	.word	0x08019437
 800c42c:	d0010003 	.word	0xd0010003

0800c430 <processing_data>:

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
 800c430:	b538      	push	{r3, r4, r5, lr}
 800c432:	4604      	mov	r4, r0
	if (!pkt->frags) {
 800c434:	6883      	ldr	r3, [r0, #8]
 800c436:	b193      	cbz	r3, 800c45e <processing_data+0x2e>
 800c438:	460d      	mov	r5, r1
	if (!is_loopback && !locally_routed) {
 800c43a:	b9d1      	cbnz	r1, 800c472 <processing_data+0x42>
		ret = net_if_recv_data(net_pkt_iface(pkt), pkt);
 800c43c:	4601      	mov	r1, r0
 800c43e:	6980      	ldr	r0, [r0, #24]
 800c440:	f00d fa7f 	bl	8019942 <net_if_recv_data>
		if (ret != NET_CONTINUE) {
 800c444:	2801      	cmp	r0, #1
 800c446:	d014      	beq.n	800c472 <processing_data+0x42>
			if (ret == NET_DROP) {
 800c448:	2802      	cmp	r0, #2
 800c44a:	d122      	bne.n	800c492 <processing_data+0x62>
	return pkt->iface;
 800c44c:	69a2      	ldr	r2, [r4, #24]
	  SET_STAT(_iface->_cmd); }
/* Core stats */

static inline void net_stats_update_processing_error(struct net_if *iface)
{
	UPDATE_STAT(iface, stats.processing_error++);
 800c44e:	4921      	ldr	r1, [pc, #132]	; (800c4d4 <processing_data+0xa4>)
 800c450:	680b      	ldr	r3, [r1, #0]
 800c452:	3301      	adds	r3, #1
 800c454:	600b      	str	r3, [r1, #0]
 800c456:	6893      	ldr	r3, [r2, #8]
 800c458:	3301      	adds	r3, #1
 800c45a:	6093      	str	r3, [r2, #8]
			return ret;
 800c45c:	e019      	b.n	800c492 <processing_data+0x62>
 800c45e:	6982      	ldr	r2, [r0, #24]
 800c460:	491c      	ldr	r1, [pc, #112]	; (800c4d4 <processing_data+0xa4>)
 800c462:	680b      	ldr	r3, [r1, #0]
 800c464:	3301      	adds	r3, #1
 800c466:	600b      	str	r3, [r1, #0]
 800c468:	6893      	ldr	r3, [r2, #8]
 800c46a:	3301      	adds	r3, #1
 800c46c:	6093      	str	r3, [r2, #8]
		return NET_DROP;
 800c46e:	2002      	movs	r0, #2
 800c470:	e00f      	b.n	800c492 <processing_data+0x62>
	net_pkt_cursor_init(pkt);
 800c472:	4620      	mov	r0, r4
 800c474:	f00d fff1 	bl	801a45a <net_pkt_cursor_init>
	return pkt->frags->data;
 800c478:	68a3      	ldr	r3, [r4, #8]
 800c47a:	689b      	ldr	r3, [r3, #8]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c482:	2b40      	cmp	r3, #64	; 0x40
 800c484:	d00c      	beq.n	800c4a0 <processing_data+0x70>
 800c486:	2b60      	cmp	r3, #96	; 0x60
 800c488:	d10e      	bne.n	800c4a8 <processing_data+0x78>
		return net_ipv6_input(pkt, is_loopback);
 800c48a:	4629      	mov	r1, r5
 800c48c:	4620      	mov	r0, r4
 800c48e:	f004 fb7d 	bl	8010b8c <net_ipv6_input>
again:
	switch (process_data(pkt, is_loopback)) {
 800c492:	b120      	cbz	r0, 800c49e <processing_data+0x6e>
 800c494:	2801      	cmp	r0, #1
 800c496:	d118      	bne.n	800c4ca <processing_data+0x9a>
			 * to the stack in this case.
			 */
			goto again;
		} else {
			NET_DBG("Dropping pkt %p", pkt);
			net_pkt_unref(pkt);
 800c498:	4620      	mov	r0, r4
 800c49a:	f00d ff7d 	bl	801a398 <net_pkt_unref>
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
		break;
	}
}
 800c49e:	bd38      	pop	{r3, r4, r5, pc}
		return net_ipv4_input(pkt);
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	f003 ff15 	bl	80102d0 <net_ipv4_input>
 800c4a6:	e7f4      	b.n	800c492 <processing_data+0x62>
	return pkt->iface;
 800c4a8:	69a1      	ldr	r1, [r4, #24]
}

static inline void net_stats_update_ip_errors_protoerr(struct net_if *iface)
{
	UPDATE_STAT(iface, stats.ip_errors.protoerr++);
 800c4aa:	4b0a      	ldr	r3, [pc, #40]	; (800c4d4 <processing_data+0xa4>)
 800c4ac:	6a1a      	ldr	r2, [r3, #32]
 800c4ae:	3201      	adds	r2, #1
 800c4b0:	621a      	str	r2, [r3, #32]
 800c4b2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800c4b4:	3201      	adds	r2, #1
 800c4b6:	628a      	str	r2, [r1, #40]	; 0x28
 800c4b8:	69a1      	ldr	r1, [r4, #24]
}

static inline void net_stats_update_ip_errors_vhlerr(struct net_if *iface)
{
	UPDATE_STAT(iface, stats.ip_errors.vhlerr++);
 800c4ba:	68da      	ldr	r2, [r3, #12]
 800c4bc:	3201      	adds	r2, #1
 800c4be:	60da      	str	r2, [r3, #12]
 800c4c0:	694b      	ldr	r3, [r1, #20]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	614b      	str	r3, [r1, #20]
	return NET_DROP;
 800c4c6:	2002      	movs	r0, #2
 800c4c8:	e7e3      	b.n	800c492 <processing_data+0x62>
		net_pkt_unref(pkt);
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f00d ff64 	bl	801a398 <net_pkt_unref>
}
 800c4d0:	e7e5      	b.n	800c49e <processing_data+0x6e>
 800c4d2:	bf00      	nop
 800c4d4:	20002a58 	.word	0x20002a58

0800c4d8 <net_rx>:

	return 0;
}

static void net_rx(struct net_if *iface, struct net_pkt *pkt)
{
 800c4d8:	b538      	push	{r3, r4, r5, lr}
 800c4da:	4605      	mov	r5, r0
 800c4dc:	4608      	mov	r0, r1
	return net_buf_frags_len(pkt->frags);
 800c4de:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
 800c4e0:	2200      	movs	r2, #0
	while (buf) {
 800c4e2:	b11b      	cbz	r3, 800c4ec <net_rx+0x14>
		bytes += buf->len;
 800c4e4:	899c      	ldrh	r4, [r3, #12]
 800c4e6:	4422      	add	r2, r4
		buf = buf->frags;
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	e7fa      	b.n	800c4e2 <net_rx+0xa>
}

static inline void net_stats_update_bytes_recv(struct net_if *iface,
					       uint32_t bytes)
{
	UPDATE_STAT(iface, stats.bytes.received += bytes);
 800c4ec:	4905      	ldr	r1, [pc, #20]	; (800c504 <net_rx+0x2c>)
 800c4ee:	688b      	ldr	r3, [r1, #8]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	608b      	str	r3, [r1, #8]
 800c4f4:	692b      	ldr	r3, [r5, #16]
 800c4f6:	441a      	add	r2, r3
 800c4f8:	612a      	str	r2, [r5, #16]
			is_loopback = true;
		}
#endif
	}

	processing_data(pkt, is_loopback);
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	f7ff ff98 	bl	800c430 <processing_data>

	net_print_statistics();
	net_pkt_print();
}
 800c500:	bd38      	pop	{r3, r4, r5, pc}
 800c502:	bf00      	nop
 800c504:	20002a58 	.word	0x20002a58

0800c508 <net_queue_rx>:

	net_rx(net_pkt_iface(pkt), pkt);
}

static void net_queue_rx(struct net_if *iface, struct net_pkt *pkt)
{
 800c508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c50a:	4605      	mov	r5, r0
 800c50c:	460e      	mov	r6, r1
	return pkt->priority;
 800c50e:	f891 7052 	ldrb.w	r7, [r1, #82]	; 0x52
	uint8_t prio = net_pkt_priority(pkt);
	uint8_t tc = net_rx_priority2tc(prio);
 800c512:	4638      	mov	r0, r7
 800c514:	f003 fbe6 	bl	800fce4 <net_rx_priority2tc>
 800c518:	b2c0      	uxtb	r0, r0
#define net_stats_update_tc_rx_time_detail(iface, tc, detail_stat)
#endif /* CONFIG_NET_PKT_RXTIME_STATS_DETAIL */

static inline void net_stats_update_tc_recv_pkt(struct net_if *iface, uint8_t tc)
{
	UPDATE_STAT(iface, stats.tc.recv[tc].pkts++);
 800c51a:	4b15      	ldr	r3, [pc, #84]	; (800c570 <net_queue_rx+0x68>)
 800c51c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 800c520:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800c524:	3201      	adds	r2, #1
 800c526:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
 800c52a:	f100 030d 	add.w	r3, r0, #13
 800c52e:	015b      	lsls	r3, r3, #5
 800c530:	58ea      	ldr	r2, [r5, r3]
 800c532:	3201      	adds	r2, #1
 800c534:	50ea      	str	r2, [r5, r3]
	return net_buf_frags_len(pkt->frags);
 800c536:	68b3      	ldr	r3, [r6, #8]
	size_t bytes = 0;
 800c538:	2200      	movs	r2, #0
	while (buf) {
 800c53a:	b11b      	cbz	r3, 800c544 <net_queue_rx+0x3c>
		bytes += buf->len;
 800c53c:	899c      	ldrh	r4, [r3, #12]
 800c53e:	4422      	add	r2, r4
		buf = buf->frags;
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	e7fa      	b.n	800c53a <net_queue_rx+0x32>
}

static inline void net_stats_update_tc_recv_bytes(struct net_if *iface,
						  uint8_t tc, size_t bytes)
{
	UPDATE_STAT(iface, stats.tc.recv[tc].bytes += bytes);
 800c544:	490a      	ldr	r1, [pc, #40]	; (800c570 <net_queue_rx+0x68>)
 800c546:	eb01 1440 	add.w	r4, r1, r0, lsl #5
 800c54a:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800c54e:	4413      	add	r3, r2
 800c550:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
 800c554:	f100 030d 	add.w	r3, r0, #13
 800c558:	015c      	lsls	r4, r3, #5
 800c55a:	eb05 1543 	add.w	r5, r5, r3, lsl #5
 800c55e:	686b      	ldr	r3, [r5, #4]
 800c560:	441a      	add	r2, r3
 800c562:	606a      	str	r2, [r5, #4]
}

static inline void net_stats_update_tc_recv_priority(struct net_if *iface,
						     uint8_t tc, uint8_t priority)
{
	UPDATE_STAT(iface, stats.tc.recv[tc].priority = priority);
 800c564:	550f      	strb	r7, [r1, r4]
 800c566:	722f      	strb	r7, [r5, #8]
#endif

	if (NET_TC_RX_COUNT == 0) {
		net_process_rx_packet(pkt);
	} else {
		net_tc_submit_to_rx_queue(tc, pkt);
 800c568:	4631      	mov	r1, r6
 800c56a:	f003 fb91 	bl	800fc90 <net_tc_submit_to_rx_queue>
	}
}
 800c56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c570:	20002a58 	.word	0x20002a58

0800c574 <net_send_data>:
	if (!pkt || !pkt->frags) {
 800c574:	2800      	cmp	r0, #0
 800c576:	f000 8120 	beq.w	800c7ba <net_send_data+0x246>
{
 800c57a:	b570      	push	{r4, r5, r6, lr}
 800c57c:	b084      	sub	sp, #16
 800c57e:	4604      	mov	r4, r0
	if (!pkt || !pkt->frags) {
 800c580:	6883      	ldr	r3, [r0, #8]
 800c582:	2b00      	cmp	r3, #0
 800c584:	f000 811c 	beq.w	800c7c0 <net_send_data+0x24c>
	return pkt->iface;
 800c588:	6982      	ldr	r2, [r0, #24]
	if (!net_pkt_iface(pkt)) {
 800c58a:	2a00      	cmp	r2, #0
 800c58c:	f000 811b 	beq.w	800c7c6 <net_send_data+0x252>
	return pkt->family;
 800c590:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 800c594:	f3c3 0342 	ubfx	r3, r3, #1, #3
	switch (net_pkt_family(pkt)) {
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d01f      	beq.n	800c5dc <net_send_data+0x68>
 800c59c:	2b02      	cmp	r3, #2
 800c59e:	d025      	beq.n	800c5ec <net_send_data+0x78>
	net_pkt_trim_buffer(pkt);
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	f00d ff3e 	bl	801a422 <net_pkt_trim_buffer>
	net_pkt_cursor_init(pkt);
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	f00d ff57 	bl	801a45a <net_pkt_cursor_init>
 800c5ac:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800c5b0:	f3c3 0342 	ubfx	r3, r3, #1, #3
	if (net_pkt_family(pkt) == AF_INET6) {
 800c5b4:	2b02      	cmp	r3, #2
 800c5b6:	d021      	beq.n	800c5fc <net_send_data+0x88>
	if (net_pkt_family(pkt) == AF_INET) {
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	f000 80a0 	beq.w	800c6fe <net_send_data+0x18a>
	return 0;
 800c5be:	2000      	movs	r0, #0
	if (status < 0) {
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	db09      	blt.n	800c5d8 <net_send_data+0x64>
	} else if (status > 0) {
 800c5c4:	f300 80f3 	bgt.w	800c7ae <net_send_data+0x23a>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	69a0      	ldr	r0, [r4, #24]
 800c5cc:	f002 fc84 	bl	800eed8 <net_if_send_data>
 800c5d0:	2802      	cmp	r0, #2
 800c5d2:	f000 80fb 	beq.w	800c7cc <net_send_data+0x258>
	return 0;
 800c5d6:	2000      	movs	r0, #0
}
 800c5d8:	b004      	add	sp, #16
 800c5da:	bd70      	pop	{r4, r5, r6, pc}
	UPDATE_STAT(iface, stats.ipv4.sent++);
 800c5dc:	497d      	ldr	r1, [pc, #500]	; (800c7d4 <net_send_data+0x260>)
 800c5de:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	638b      	str	r3, [r1, #56]	; 0x38
 800c5e4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	6413      	str	r3, [r2, #64]	; 0x40
}
 800c5ea:	e7d9      	b.n	800c5a0 <net_send_data+0x2c>
	UPDATE_STAT(iface, stats.ipv6.sent++);
 800c5ec:	4979      	ldr	r1, [pc, #484]	; (800c7d4 <net_send_data+0x260>)
 800c5ee:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	628b      	str	r3, [r1, #40]	; 0x28
 800c5f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 800c5fa:	e7d1      	b.n	800c5a0 <net_send_data+0x2c>
	return pkt->frags->data;
 800c5fc:	68a3      	ldr	r3, [r4, #8]
 800c5fe:	689d      	ldr	r5, [r3, #8]
		if (net_ipv6_addr_cmp((struct in6_addr *)NET_IPV6_HDR(pkt)->dst,
 800c600:	3518      	adds	r5, #24
 800c602:	f002 ffd3 	bl	800f5ac <net_ipv6_unspecified_address>
 800c606:	4601      	mov	r1, r0
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv6_addr_cmp(const struct in6_addr *addr1,
				     const struct in6_addr *addr2)
{
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 800c608:	2210      	movs	r2, #16
 800c60a:	4628      	mov	r0, r5
 800c60c:	f010 f906 	bl	801c81c <memcmp>
 800c610:	2800      	cmp	r0, #0
 800c612:	f000 80be 	beq.w	800c792 <net_send_data+0x21e>
 800c616:	68a3      	ldr	r3, [r4, #8]
				(struct in6_addr *)NET_IPV6_HDR(pkt)->dst) ||
 800c618:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 800c61a:	f850 3f18 	ldr.w	r3, [r0, #24]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800c61e:	b99b      	cbnz	r3, 800c648 <net_send_data+0xd4>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 800c620:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 800c622:	bbab      	cbnz	r3, 800c690 <net_send_data+0x11c>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800c624:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 800c626:	bbab      	cbnz	r3, 800c694 <net_send_data+0x120>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
 800c628:	68c2      	ldr	r2, [r0, #12]
 800c62a:	0a13      	lsrs	r3, r2, #8
 800c62c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c630:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800c634:	0211      	lsls	r1, r2, #8
 800c636:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800c63a:	430b      	orrs	r3, r1
 800c63c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800c640:	2b01      	cmp	r3, #1
 800c642:	d029      	beq.n	800c698 <net_send_data+0x124>
 800c644:	2300      	movs	r3, #0
 800c646:	e000      	b.n	800c64a <net_send_data+0xd6>
 800c648:	2300      	movs	r3, #0
		if (net_ipv6_is_addr_loopback(
 800c64a:	b91b      	cbnz	r3, 800c654 <net_send_data+0xe0>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
 800c64c:	2100      	movs	r1, #0
 800c64e:	f001 f8a7 	bl	800d7a0 <net_if_ipv6_addr_lookup>
				(struct in6_addr *)NET_IPV6_HDR(pkt)->dst) ||
 800c652:	b318      	cbz	r0, 800c69c <net_send_data+0x128>
 800c654:	68a6      	ldr	r6, [r4, #8]
			net_ipv6_addr_copy_raw((uint8_t *)&addr, NET_IPV6_HDR(pkt)->src);
 800c656:	68b3      	ldr	r3, [r6, #8]
	memcpy(dest, src, sizeof(struct in6_addr));
 800c658:	466d      	mov	r5, sp
 800c65a:	f853 0f08 	ldr.w	r0, [r3, #8]!
 800c65e:	6859      	ldr	r1, [r3, #4]
 800c660:	689a      	ldr	r2, [r3, #8]
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c666:	68b3      	ldr	r3, [r6, #8]
					       NET_IPV6_HDR(pkt)->dst);
 800c668:	461a      	mov	r2, r3
 800c66a:	f852 5f18 	ldr.w	r5, [r2, #24]!
 800c66e:	6850      	ldr	r0, [r2, #4]
 800c670:	6891      	ldr	r1, [r2, #8]
 800c672:	68d2      	ldr	r2, [r2, #12]
 800c674:	609d      	str	r5, [r3, #8]
 800c676:	60d8      	str	r0, [r3, #12]
 800c678:	6119      	str	r1, [r3, #16]
 800c67a:	615a      	str	r2, [r3, #20]
 800c67c:	68a3      	ldr	r3, [r4, #8]
 800c67e:	689e      	ldr	r6, [r3, #8]
 800c680:	466d      	mov	r5, sp
 800c682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c684:	61b0      	str	r0, [r6, #24]
 800c686:	61f1      	str	r1, [r6, #28]
 800c688:	6232      	str	r2, [r6, #32]
 800c68a:	6273      	str	r3, [r6, #36]	; 0x24
			return 1;
 800c68c:	2001      	movs	r0, #1
 800c68e:	e797      	b.n	800c5c0 <net_send_data+0x4c>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800c690:	2300      	movs	r3, #0
 800c692:	e7da      	b.n	800c64a <net_send_data+0xd6>
 800c694:	2300      	movs	r3, #0
 800c696:	e7d8      	b.n	800c64a <net_send_data+0xd6>
 800c698:	2301      	movs	r3, #1
 800c69a:	e7d6      	b.n	800c64a <net_send_data+0xd6>
 800c69c:	68a3      	ldr	r3, [r4, #8]
 800c69e:	689b      	ldr	r3, [r3, #8]
 * false otherwise.
 */
static inline bool net_ipv6_is_addr_mcast_scope(const struct in6_addr *addr,
						int scope)
{
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 800c6a0:	7e1a      	ldrb	r2, [r3, #24]
 800c6a2:	2aff      	cmp	r2, #255	; 0xff
 800c6a4:	d019      	beq.n	800c6da <net_send_data+0x166>
 800c6a6:	2200      	movs	r2, #0
		if (net_ipv6_is_addr_mcast_iface(
 800c6a8:	2a00      	cmp	r2, #0
 800c6aa:	d175      	bne.n	800c798 <net_send_data+0x224>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 800c6ac:	f853 2f08 	ldr.w	r2, [r3, #8]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800c6b0:	b9d2      	cbnz	r2, 800c6e8 <net_send_data+0x174>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 800c6b2:	685a      	ldr	r2, [r3, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 800c6b4:	b9ea      	cbnz	r2, 800c6f2 <net_send_data+0x17e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800c6b6:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 800c6b8:	b9ea      	cbnz	r2, 800c6f6 <net_send_data+0x182>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
 800c6ba:	68da      	ldr	r2, [r3, #12]
 800c6bc:	0a13      	lsrs	r3, r2, #8
 800c6be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c6c2:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800c6c6:	0211      	lsls	r1, r2, #8
 800c6c8:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800c6cc:	430b      	orrs	r3, r1
 800c6ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d011      	beq.n	800c6fa <net_send_data+0x186>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	e007      	b.n	800c6ea <net_send_data+0x176>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 800c6da:	7e5a      	ldrb	r2, [r3, #25]
 800c6dc:	2a01      	cmp	r2, #1
 800c6de:	d001      	beq.n	800c6e4 <net_send_data+0x170>
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	e7e1      	b.n	800c6a8 <net_send_data+0x134>
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	e7df      	b.n	800c6a8 <net_send_data+0x134>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800c6e8:	2300      	movs	r3, #0
		if (net_ipv6_is_addr_loopback(
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d156      	bne.n	800c79c <net_send_data+0x228>
	return 0;
 800c6ee:	2000      	movs	r0, #0
 800c6f0:	e766      	b.n	800c5c0 <net_send_data+0x4c>
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	e7f9      	b.n	800c6ea <net_send_data+0x176>
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	e7f7      	b.n	800c6ea <net_send_data+0x176>
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	e7f5      	b.n	800c6ea <net_send_data+0x176>
 800c6fe:	68a3      	ldr	r3, [r4, #8]
 800c700:	689d      	ldr	r5, [r3, #8]
		if (net_ipv4_addr_cmp((struct in_addr *)NET_IPV4_HDR(pkt)->dst,
 800c702:	f002 ff4b 	bl	800f59c <net_ipv4_unspecified_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 800c706:	692a      	ldr	r2, [r5, #16]
 800c708:	6803      	ldr	r3, [r0, #0]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d049      	beq.n	800c7a2 <net_send_data+0x22e>
 800c70e:	68a3      	ldr	r3, [r4, #8]
 800c710:	689d      	ldr	r5, [r3, #8]
	return addr->s4_addr[0] == 127U;
 800c712:	7c2b      	ldrb	r3, [r5, #16]
		if (net_ipv4_is_addr_loopback((struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
 800c714:	2b7f      	cmp	r3, #127	; 0x7f
 800c716:	d023      	beq.n	800c760 <net_send_data+0x1ec>
	return pkt->iface;
 800c718:	69a6      	ldr	r6, [r4, #24]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 800c71a:	f002 ff43 	bl	800f5a4 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 800c71e:	f855 2f10 	ldr.w	r2, [r5, #16]!
 800c722:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 800c724:	429a      	cmp	r2, r3
 800c726:	d00b      	beq.n	800c740 <net_send_data+0x1cc>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 800c728:	4629      	mov	r1, r5
 800c72a:	4630      	mov	r0, r6
 800c72c:	f002 f988 	bl	800ea40 <net_if_ipv4_is_addr_bcast>
 800c730:	b140      	cbz	r0, 800c744 <net_send_data+0x1d0>
	return pkt->frags->data;
 800c732:	68a3      	ldr	r3, [r4, #8]
 800c734:	689b      	ldr	r3, [r3, #8]
	return addr->s4_addr[0] == 127U;
 800c736:	7b1b      	ldrb	r3, [r3, #12]
		if (net_ipv4_is_addr_loopback((struct in_addr *)NET_IPV4_HDR(pkt)->src)) {
 800c738:	2b7f      	cmp	r3, #127	; 0x7f
 800c73a:	d035      	beq.n	800c7a8 <net_send_data+0x234>
	return 0;
 800c73c:	2000      	movs	r0, #0
 800c73e:	e73f      	b.n	800c5c0 <net_send_data+0x4c>
		return true;
 800c740:	2001      	movs	r0, #1
 800c742:	e7f5      	b.n	800c730 <net_send_data+0x1bc>
 800c744:	68a3      	ldr	r3, [r4, #8]
 800c746:	689d      	ldr	r5, [r3, #8]
		     net_ipv4_is_my_addr((struct in_addr *)NET_IPV4_HDR(pkt)->dst))) {
 800c748:	3510      	adds	r5, #16
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
 800c74a:	2100      	movs	r1, #0
 800c74c:	4628      	mov	r0, r5
 800c74e:	f002 fa0f 	bl	800eb70 <net_if_ipv4_addr_lookup>
 800c752:	2800      	cmp	r0, #0
 800c754:	bf14      	ite	ne
 800c756:	2001      	movne	r0, #1
 800c758:	2000      	moveq	r0, #0
	if (!ret) {
 800c75a:	d00d      	beq.n	800c778 <net_send_data+0x204>
				     (struct in_addr *)NET_IPV4_HDR(pkt)->dst) == false &&
 800c75c:	2800      	cmp	r0, #0
 800c75e:	d0e8      	beq.n	800c732 <net_send_data+0x1be>
 800c760:	68a3      	ldr	r3, [r4, #8]
 800c762:	689b      	ldr	r3, [r3, #8]
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
 800c764:	68da      	ldr	r2, [r3, #12]
 800c766:	68a3      	ldr	r3, [r4, #8]
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	6919      	ldr	r1, [r3, #16]
 800c76c:	60d9      	str	r1, [r3, #12]
 800c76e:	68a3      	ldr	r3, [r4, #8]
 800c770:	689b      	ldr	r3, [r3, #8]
 800c772:	611a      	str	r2, [r3, #16]
			return 1;
 800c774:	2001      	movs	r0, #1
 800c776:	e723      	b.n	800c5c0 <net_send_data+0x4c>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 800c778:	f002 ff14 	bl	800f5a4 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 800c77c:	682a      	ldr	r2, [r5, #0]
 800c77e:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 800c780:	429a      	cmp	r2, r3
 800c782:	d004      	beq.n	800c78e <net_send_data+0x21a>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 800c784:	4629      	mov	r1, r5
 800c786:	2000      	movs	r0, #0
 800c788:	f002 f95a 	bl	800ea40 <net_if_ipv4_is_addr_bcast>
 800c78c:	e7e6      	b.n	800c75c <net_send_data+0x1e8>
		return true;
 800c78e:	2001      	movs	r0, #1
 800c790:	e7e4      	b.n	800c75c <net_send_data+0x1e8>
			return -EADDRNOTAVAIL;
 800c792:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 800c796:	e713      	b.n	800c5c0 <net_send_data+0x4c>
			return 1;
 800c798:	2001      	movs	r0, #1
 800c79a:	e711      	b.n	800c5c0 <net_send_data+0x4c>
			return -EADDRNOTAVAIL;
 800c79c:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 800c7a0:	e70e      	b.n	800c5c0 <net_send_data+0x4c>
			return -EADDRNOTAVAIL;
 800c7a2:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 800c7a6:	e70b      	b.n	800c5c0 <net_send_data+0x4c>
			return -EADDRNOTAVAIL;
 800c7a8:	f06f 007c 	mvn.w	r0, #124	; 0x7c
 800c7ac:	e708      	b.n	800c5c0 <net_send_data+0x4c>
		processing_data(pkt, true);
 800c7ae:	2101      	movs	r1, #1
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	f7ff fe3d 	bl	800c430 <processing_data>
		return 0;
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	e70e      	b.n	800c5d8 <net_send_data+0x64>
		return -ENODATA;
 800c7ba:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
 800c7be:	4770      	bx	lr
		return -ENODATA;
 800c7c0:	f06f 003c 	mvn.w	r0, #60	; 0x3c
 800c7c4:	e708      	b.n	800c5d8 <net_send_data+0x64>
		return -EINVAL;
 800c7c6:	f06f 0015 	mvn.w	r0, #21
 800c7ca:	e705      	b.n	800c5d8 <net_send_data+0x64>
		return -EIO;
 800c7cc:	f06f 0004 	mvn.w	r0, #4
 800c7d0:	e702      	b.n	800c5d8 <net_send_data+0x64>
 800c7d2:	bf00      	nop
 800c7d4:	20002a58 	.word	0x20002a58

0800c7d8 <net_if_ipv6_get_best_match>:
}

static struct in6_addr *net_if_ipv6_get_best_match(struct net_if *iface,
						   const struct in6_addr *dst,
						   uint8_t *best_so_far)
{
 800c7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 800c7dc:	f8d0 5210 	ldr.w	r5, [r0, #528]	; 0x210
	struct in6_addr *src = NULL;
	uint8_t len;
	int i;

	if (!ipv6) {
 800c7e0:	2d00      	cmp	r5, #0
 800c7e2:	d040      	beq.n	800c866 <net_if_ipv6_get_best_match+0x8e>
 800c7e4:	460f      	mov	r7, r1
 800c7e6:	4616      	mov	r6, r2
		return NULL;
	}

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800c7e8:	2400      	movs	r4, #0
	struct in6_addr *src = NULL;
 800c7ea:	46a0      	mov	r8, r4
 800c7ec:	e007      	b.n	800c7fe <net_if_ipv6_get_best_match+0x26>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 800c7ee:	787b      	ldrb	r3, [r7, #1]
 800c7f0:	2b03      	cmp	r3, #3
 800c7f2:	d036      	beq.n	800c862 <net_if_ipv6_get_best_match+0x8a>
 800c7f4:	2300      	movs	r3, #0
		len = get_diff_ipv6(dst, &ipv6->unicast[i].address.in6_addr);
		if (len >= *best_so_far) {
			/* Mesh local address can only be selected for the same
			 * subnet.
			 */
			if (ipv6->unicast[i].is_mesh_local && len < 64 &&
 800c7f6:	b10b      	cbz	r3, 800c7fc <net_if_ipv6_get_best_match+0x24>
			    !net_ipv6_is_addr_mcast_mesh(dst)) {
				continue;
			}

			*best_so_far = len;
 800c7f8:	7030      	strb	r0, [r6, #0]
			src = &ipv6->unicast[i].address.in6_addr;
 800c7fa:	46c8      	mov	r8, r9
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800c7fc:	3401      	adds	r4, #1
 800c7fe:	2c01      	cmp	r4, #1
 800c800:	dc32      	bgt.n	800c868 <net_if_ipv6_get_best_match+0x90>
		if (!is_proper_ipv6_address(&ipv6->unicast[i])) {
 800c802:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800c806:	eb05 1000 	add.w	r0, r5, r0, lsl #4
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
 800c80a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c80c:	f023 437d 	bic.w	r3, r3, #4244635648	; 0xfd000000
 800c810:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800c814:	4a16      	ldr	r2, [pc, #88]	; (800c870 <net_if_ipv6_get_best_match+0x98>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d1f0      	bne.n	800c7fc <net_if_ipv6_get_best_match+0x24>
	    addr->address.family == AF_INET6 &&
 800c81a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c81e:	011b      	lsls	r3, r3, #4
 800c820:	5aeb      	ldrh	r3, [r5, r3]
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
 800c822:	2b02      	cmp	r3, #2
 800c824:	d1ea      	bne.n	800c7fc <net_if_ipv6_get_best_match+0x24>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
 800c826:	8882      	ldrh	r2, [r0, #4]
	    addr->address.family == AF_INET6 &&
 800c828:	f248 03fe 	movw	r3, #33022	; 0x80fe
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d0e5      	beq.n	800c7fc <net_if_ipv6_get_best_match+0x24>
		len = get_diff_ipv6(dst, &ipv6->unicast[i].address.in6_addr);
 800c830:	f100 0904 	add.w	r9, r0, #4
 800c834:	4649      	mov	r1, r9
 800c836:	4638      	mov	r0, r7
 800c838:	f00c ff18 	bl	801966c <get_diff_ipv6>
		if (len >= *best_so_far) {
 800c83c:	7833      	ldrb	r3, [r6, #0]
 800c83e:	4283      	cmp	r3, r0
 800c840:	d8dc      	bhi.n	800c7fc <net_if_ipv6_get_best_match+0x24>
			if (ipv6->unicast[i].is_mesh_local && len < 64 &&
 800c842:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c846:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800c84a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c84e:	f013 0f04 	tst.w	r3, #4
 800c852:	d0d1      	beq.n	800c7f8 <net_if_ipv6_get_best_match+0x20>
 800c854:	283f      	cmp	r0, #63	; 0x3f
 800c856:	d8cf      	bhi.n	800c7f8 <net_if_ipv6_get_best_match+0x20>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 800c858:	783b      	ldrb	r3, [r7, #0]
 800c85a:	2bff      	cmp	r3, #255	; 0xff
 800c85c:	d0c7      	beq.n	800c7ee <net_if_ipv6_get_best_match+0x16>
 800c85e:	2300      	movs	r3, #0
 800c860:	e7c9      	b.n	800c7f6 <net_if_ipv6_get_best_match+0x1e>
 800c862:	2301      	movs	r3, #1
 800c864:	e7c7      	b.n	800c7f6 <net_if_ipv6_get_best_match+0x1e>
		return NULL;
 800c866:	46a8      	mov	r8, r5
		}
	}

	return src;
}
 800c868:	4640      	mov	r0, r8
 800c86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c86e:	bf00      	nop
 800c870:	02000100 	.word	0x02000100

0800c874 <net_if_ipv4_get_best_match>:
}

static struct in_addr *net_if_ipv4_get_best_match(struct net_if *iface,
						  const struct in_addr *dst,
						  uint8_t *best_so_far)
{
 800c874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
 800c878:	f8d0 4214 	ldr.w	r4, [r0, #532]	; 0x214
	struct in_addr *src = NULL;
	uint8_t len;
	int i;

	if (!ipv4) {
 800c87c:	b914      	cbnz	r4, 800c884 <net_if_ipv4_get_best_match+0x10>
			src = &ipv4->unicast[i].address.in_addr;
		}
	}

	return src;
}
 800c87e:	4620      	mov	r0, r4
 800c880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c884:	460f      	mov	r7, r1
 800c886:	4616      	mov	r6, r2
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
 800c888:	2500      	movs	r5, #0
	struct in_addr *src = NULL;
 800c88a:	46a8      	mov	r8, r5
 800c88c:	e01e      	b.n	800c8cc <net_if_ipv4_get_best_match+0x58>
		if (!is_proper_ipv4_address(&ipv4->unicast[i])) {
 800c88e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800c892:	0118      	lsls	r0, r3, #4
 800c894:	eb04 1203 	add.w	r2, r4, r3, lsl #4
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
 800c898:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c89a:	f023 437d 	bic.w	r3, r3, #4244635648	; 0xfd000000
 800c89e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800c8a2:	4919      	ldr	r1, [pc, #100]	; (800c908 <net_if_ipv4_get_best_match+0x94>)
 800c8a4:	428b      	cmp	r3, r1
 800c8a6:	d015      	beq.n	800c8d4 <net_if_ipv4_get_best_match+0x60>
	return false;
 800c8a8:	2300      	movs	r3, #0
		if (!is_proper_ipv4_address(&ipv4->unicast[i])) {
 800c8aa:	b173      	cbz	r3, 800c8ca <net_if_ipv4_get_best_match+0x56>
		len = get_diff_ipv4(dst, &ipv4->unicast[i].address.in_addr);
 800c8ac:	eb05 0945 	add.w	r9, r5, r5, lsl #1
 800c8b0:	eb04 1909 	add.w	r9, r4, r9, lsl #4
 800c8b4:	f109 0904 	add.w	r9, r9, #4
 800c8b8:	4649      	mov	r1, r9
 800c8ba:	4638      	mov	r0, r7
 800c8bc:	f00c fedb 	bl	8019676 <get_diff_ipv4>
		if (len >= *best_so_far) {
 800c8c0:	7833      	ldrb	r3, [r6, #0]
 800c8c2:	4283      	cmp	r3, r0
 800c8c4:	d801      	bhi.n	800c8ca <net_if_ipv4_get_best_match+0x56>
			*best_so_far = len;
 800c8c6:	7030      	strb	r0, [r6, #0]
			src = &ipv4->unicast[i].address.in_addr;
 800c8c8:	46c8      	mov	r8, r9
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
 800c8ca:	3501      	adds	r5, #1
 800c8cc:	2d00      	cmp	r5, #0
 800c8ce:	ddde      	ble.n	800c88e <net_if_ipv4_get_best_match+0x1a>
	return src;
 800c8d0:	4644      	mov	r4, r8
 800c8d2:	e7d4      	b.n	800c87e <net_if_ipv4_get_best_match+0xa>
	    addr->address.family == AF_INET &&
 800c8d4:	5a23      	ldrh	r3, [r4, r0]
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d001      	beq.n	800c8de <net_if_ipv4_get_best_match+0x6a>
	return false;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	e7e5      	b.n	800c8aa <net_if_ipv4_get_best_match+0x36>
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xA9FE0000) == 0xA9FE0000;
 800c8de:	6852      	ldr	r2, [r2, #4]
 800c8e0:	0a13      	lsrs	r3, r2, #8
 800c8e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c8e6:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800c8ea:	0211      	lsls	r1, r2, #8
 800c8ec:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800c8f0:	430b      	orrs	r3, r1
 800c8f2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	    addr->address.family == AF_INET &&
 800c8f6:	4a05      	ldr	r2, [pc, #20]	; (800c90c <net_if_ipv4_get_best_match+0x98>)
 800c8f8:	ea32 0303 	bics.w	r3, r2, r3
 800c8fc:	d101      	bne.n	800c902 <net_if_ipv4_get_best_match+0x8e>
	return false;
 800c8fe:	2300      	movs	r3, #0
 800c900:	e7d3      	b.n	800c8aa <net_if_ipv4_get_best_match+0x36>
		return true;
 800c902:	2301      	movs	r3, #1
 800c904:	e7d1      	b.n	800c8aa <net_if_ipv4_get_best_match+0x36>
 800c906:	bf00      	nop
 800c908:	02000100 	.word	0x02000100
 800c90c:	a9fe0000 	.word	0xa9fe0000

0800c910 <need_calc_checksum>:

	k_mutex_unlock(&lock);
}

static bool need_calc_checksum(struct net_if *iface, enum ethernet_hw_caps caps)
{
 800c910:	b510      	push	{r4, lr}
 800c912:	460c      	mov	r4, r1
	if (!iface || !iface->if_dev) {
 800c914:	4602      	mov	r2, r0
 800c916:	b138      	cbz	r0, 800c928 <need_calc_checksum+0x18>
 800c918:	6803      	ldr	r3, [r0, #0]
 800c91a:	b103      	cbz	r3, 800c91e <need_calc_checksum+0xe>
	return iface->if_dev->l2;
 800c91c:	685b      	ldr	r3, [r3, #4]
#if defined(CONFIG_NET_L2_ETHERNET)
	if (net_if_l2(iface) != &NET_L2_GET_NAME(ETHERNET)) {
 800c91e:	480a      	ldr	r0, [pc, #40]	; (800c948 <need_calc_checksum+0x38>)
 800c920:	4283      	cmp	r3, r0
 800c922:	d003      	beq.n	800c92c <need_calc_checksum+0x1c>
		return true;
 800c924:	2001      	movs	r0, #1
	ARG_UNUSED(iface);
	ARG_UNUSED(caps);

	return true;
#endif
}
 800c926:	bd10      	pop	{r4, pc}
		return NULL;
 800c928:	4603      	mov	r3, r0
 800c92a:	e7f8      	b.n	800c91e <need_calc_checksum+0xe>
	return iface->if_dev->dev;
 800c92c:	6813      	ldr	r3, [r2, #0]
 800c92e:	6818      	ldr	r0, [r3, #0]
	const struct ethernet_api *eth =
 800c930:	6883      	ldr	r3, [r0, #8]
	if (!eth->get_capabilities) {
 800c932:	691b      	ldr	r3, [r3, #16]
 800c934:	b12b      	cbz	r3, 800c942 <need_calc_checksum+0x32>
	return eth->get_capabilities(net_if_get_device(iface));
 800c936:	4798      	blx	r3
	return !(net_eth_get_hw_capabilities(iface) & caps);
 800c938:	4204      	tst	r4, r0
 800c93a:	bf0c      	ite	eq
 800c93c:	2001      	moveq	r0, #1
 800c93e:	2000      	movne	r0, #0
 800c940:	e7f1      	b.n	800c926 <need_calc_checksum+0x16>
		return (enum ethernet_hw_caps)0;
 800c942:	2000      	movs	r0, #0
 800c944:	e7f8      	b.n	800c938 <need_calc_checksum+0x28>
 800c946:	bf00      	nop
 800c948:	200013fc 	.word	0x200013fc

0800c94c <iface_ipv4_init>:
{
 800c94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c94e:	b089      	sub	sp, #36	; 0x24
 800c950:	af00      	add	r7, sp, #0
	if (if_count > ARRAY_SIZE(ipv4_addresses)) {
 800c952:	2801      	cmp	r0, #1
 800c954:	dd59      	ble.n	800ca0a <iface_ipv4_init+0xbe>
 800c956:	4603      	mov	r3, r0
		NET_WARN("You have %lu IPv4 net_if addresses but %d "
 800c958:	466d      	mov	r5, sp
 800c95a:	b088      	sub	sp, #32
 800c95c:	4668      	mov	r0, sp
 800c95e:	f110 020c 	adds.w	r2, r0, #12
 800c962:	d054      	beq.n	800ca0e <iface_ipv4_init+0xc2>
 800c964:	2110      	movs	r1, #16
 800c966:	b11a      	cbz	r2, 800c970 <iface_ipv4_init+0x24>
 800c968:	2904      	cmp	r1, #4
 800c96a:	dd01      	ble.n	800c970 <iface_ipv4_init+0x24>
 800c96c:	4c31      	ldr	r4, [pc, #196]	; (800ca34 <iface_ipv4_init+0xe8>)
 800c96e:	6104      	str	r4, [r0, #16]
 800c970:	b11a      	cbz	r2, 800c97a <iface_ipv4_init+0x2e>
 800c972:	2908      	cmp	r1, #8
 800c974:	dd01      	ble.n	800c97a <iface_ipv4_init+0x2e>
 800c976:	2401      	movs	r4, #1
 800c978:	6144      	str	r4, [r0, #20]
 800c97a:	b112      	cbz	r2, 800c982 <iface_ipv4_init+0x36>
 800c97c:	290c      	cmp	r1, #12
 800c97e:	dd00      	ble.n	800c982 <iface_ipv4_init+0x36>
 800c980:	6183      	str	r3, [r0, #24]
 800c982:	290f      	cmp	r1, #15
 800c984:	dd46      	ble.n	800ca14 <iface_ipv4_init+0xc8>
 800c986:	2310      	movs	r3, #16
 800c988:	b142      	cbz	r2, 800c99c <iface_ipv4_init+0x50>
 800c98a:	2200      	movs	r2, #0
 800c98c:	f8a7 2005 	strh.w	r2, [r7, #5]
 800c990:	71fa      	strb	r2, [r7, #7]
 800c992:	2104      	movs	r1, #4
 800c994:	7139      	strb	r1, [r7, #4]
 800c996:	71ba      	strb	r2, [r7, #6]
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	60c2      	str	r2, [r0, #12]
 800c99c:	2200      	movs	r2, #0
 800c99e:	f36f 0200 	bfc	r2, #0, #1
 800c9a2:	f36f 0241 	bfc	r2, #1, #1
 800c9a6:	f36f 0282 	bfc	r2, #2, #1
 800c9aa:	f36f 02c5 	bfc	r2, #3, #3
 800c9ae:	2402      	movs	r4, #2
 800c9b0:	f364 1288 	bfi	r2, r4, #6, #3
 800c9b4:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
 800c9b8:	f363 2252 	bfi	r2, r3, #9, #10
 800c9bc:	4e1e      	ldr	r6, [pc, #120]	; (800ca38 <iface_ipv4_init+0xec>)
 800c9be:	2300      	movs	r3, #0
 800c9c0:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800c9c4:	4631      	mov	r1, r6
 800c9c6:	f00b f9c4 	bl	8017d52 <z_log_msg2_finalize>
 800c9ca:	46ad      	mov	sp, r5
		NET_WARN("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT "
 800c9cc:	4b1b      	ldr	r3, [pc, #108]	; (800ca3c <iface_ipv4_init+0xf0>)
 800c9ce:	61bb      	str	r3, [r7, #24]
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	f8a7 3005 	strh.w	r3, [r7, #5]
 800c9d6:	71fb      	strb	r3, [r7, #7]
 800c9d8:	713c      	strb	r4, [r7, #4]
 800c9da:	71bb      	strb	r3, [r7, #6]
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	617a      	str	r2, [r7, #20]
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	f363 0200 	bfi	r2, r3, #0, #1
 800c9e6:	f363 0241 	bfi	r2, r3, #1, #1
 800c9ea:	f363 0282 	bfi	r2, r3, #2, #1
 800c9ee:	f363 02c5 	bfi	r2, r3, #3, #3
 800c9f2:	f364 1288 	bfi	r2, r4, #6, #3
 800c9f6:	2108      	movs	r1, #8
 800c9f8:	f361 2252 	bfi	r2, r1, #9, #10
 800c9fc:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800ca00:	4631      	mov	r1, r6
 800ca02:	f107 0008 	add.w	r0, r7, #8
 800ca06:	f00b f9a4 	bl	8017d52 <z_log_msg2_finalize>
		NET_WARN("You have %lu IPv4 net_if addresses but %d "
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	e00d      	b.n	800ca2a <iface_ipv4_init+0xde>
 800ca0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca12:	e7a8      	b.n	800c966 <iface_ipv4_init+0x1a>
 800ca14:	f06f 031b 	mvn.w	r3, #27
 800ca18:	e7b6      	b.n	800c988 <iface_ipv4_init+0x3c>
		ipv4_addresses[i].ipv4.ttl = CONFIG_NET_INITIAL_TTL;
 800ca1a:	4909      	ldr	r1, [pc, #36]	; (800ca40 <iface_ipv4_init+0xf4>)
 800ca1c:	2258      	movs	r2, #88	; 0x58
 800ca1e:	fb02 1203 	mla	r2, r2, r3, r1
 800ca22:	2140      	movs	r1, #64	; 0x40
 800ca24:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
	for (i = 0; i < ARRAY_SIZE(ipv4_addresses); i++) {
 800ca28:	3301      	adds	r3, #1
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	ddf5      	ble.n	800ca1a <iface_ipv4_init+0xce>
}
 800ca2e:	3724      	adds	r7, #36	; 0x24
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca34:	0801e0ac 	.word	0x0801e0ac
 800ca38:	0801d778 	.word	0x0801d778
 800ca3c:	0801e0ec 	.word	0x0801e0ec
 800ca40:	200031d4 	.word	0x200031d4

0800ca44 <iface_router_find_default>:
{
 800ca44:	b570      	push	{r4, r5, r6, lr}
 800ca46:	4605      	mov	r5, r0
 800ca48:	460e      	mov	r6, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800ca4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca52:	481b      	ldr	r0, [pc, #108]	; (800cac0 <iface_router_find_default+0x7c>)
 800ca54:	f008 ff62 	bl	801591c <z_impl_k_mutex_lock>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
 800ca58:	2300      	movs	r3, #0
 800ca5a:	e000      	b.n	800ca5e <iface_router_find_default+0x1a>
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	dc28      	bgt.n	800cab4 <iface_router_find_default+0x70>
		if (!routers[i].is_used ||
 800ca62:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800ca66:	4c17      	ldr	r4, [pc, #92]	; (800cac4 <iface_router_find_default+0x80>)
 800ca68:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ca6c:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800ca70:	f012 0f01 	tst.w	r2, #1
 800ca74:	d0f2      	beq.n	800ca5c <iface_router_find_default+0x18>
		    !routers[i].is_default ||
 800ca76:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800ca7a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ca7e:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
		if (!routers[i].is_used ||
 800ca82:	f012 0f02 	tst.w	r2, #2
 800ca86:	d0e9      	beq.n	800ca5c <iface_router_find_default+0x18>
		    routers[i].address.family != family) {
 800ca88:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800ca8c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ca90:	8891      	ldrh	r1, [r2, #4]
 800ca92:	b2b2      	uxth	r2, r6
		    !routers[i].is_default ||
 800ca94:	4291      	cmp	r1, r2
 800ca96:	d1e1      	bne.n	800ca5c <iface_router_find_default+0x18>
		if (iface && iface != routers[i].iface) {
 800ca98:	b135      	cbz	r5, 800caa8 <iface_router_find_default+0x64>
 800ca9a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800ca9e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800caa2:	6992      	ldr	r2, [r2, #24]
 800caa4:	42aa      	cmp	r2, r5
 800caa6:	d1d9      	bne.n	800ca5c <iface_router_find_default+0x18>
		router = &routers[i];
 800caa8:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800caac:	4c05      	ldr	r4, [pc, #20]	; (800cac4 <iface_router_find_default+0x80>)
 800caae:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		goto out;
 800cab2:	e000      	b.n	800cab6 <iface_router_find_default+0x72>
	struct net_if_router *router = NULL;
 800cab4:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
 800cab6:	4802      	ldr	r0, [pc, #8]	; (800cac0 <iface_router_find_default+0x7c>)
 800cab8:	f008 ffba 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800cabc:	4620      	mov	r0, r4
 800cabe:	bd70      	pop	{r4, r5, r6, pc}
 800cac0:	20001094 	.word	0x20001094
 800cac4:	20003350 	.word	0x20003350

0800cac8 <if_ipv4_get_addr>:
{
 800cac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caca:	4604      	mov	r4, r0
 800cacc:	460e      	mov	r6, r1
 800cace:	4615      	mov	r5, r2
	return z_impl_k_mutex_lock(mutex, timeout);
 800cad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cad8:	4823      	ldr	r0, [pc, #140]	; (800cb68 <if_ipv4_get_addr+0xa0>)
 800cada:	f008 ff1f 	bl	801591c <z_impl_k_mutex_lock>
	if (!iface) {
 800cade:	b114      	cbz	r4, 800cae6 <if_ipv4_get_addr+0x1e>
	ipv4 = iface->config.ip.ipv4;
 800cae0:	f8d4 4214 	ldr.w	r4, [r4, #532]	; 0x214
	if (!ipv4) {
 800cae4:	b924      	cbnz	r4, 800caf0 <if_ipv4_get_addr+0x28>
	return z_impl_k_mutex_unlock(mutex);
 800cae6:	4820      	ldr	r0, [pc, #128]	; (800cb68 <if_ipv4_get_addr+0xa0>)
 800cae8:	f008 ffa2 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800caec:	4620      	mov	r0, r4
 800caee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
 800caf0:	2300      	movs	r3, #0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	dd01      	ble.n	800cafa <if_ipv4_get_addr+0x32>
	struct in_addr *addr = NULL;
 800caf6:	2400      	movs	r4, #0
out:
 800caf8:	e7f5      	b.n	800cae6 <if_ipv4_get_addr+0x1e>
		if (!ipv4->unicast[i].is_used ||
 800cafa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800cafe:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 800cb02:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800cb06:	f012 0f02 	tst.w	r2, #2
 800cb0a:	d02b      	beq.n	800cb64 <if_ipv4_get_addr+0x9c>
 800cb0c:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800cb10:	d007      	beq.n	800cb22 <if_ipv4_get_addr+0x5a>
		     ipv4->unicast[i].addr_state != addr_state) ||
 800cb12:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800cb16:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 800cb1a:	f992 202d 	ldrsb.w	r2, [r2, #45]	; 0x2d
		    (addr_state != NET_ADDR_ANY_STATE &&
 800cb1e:	42b2      	cmp	r2, r6
 800cb20:	d120      	bne.n	800cb64 <if_ipv4_get_addr+0x9c>
		    ipv4->unicast[i].address.family != AF_INET) {
 800cb22:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800cb26:	0112      	lsls	r2, r2, #4
 800cb28:	5aa2      	ldrh	r2, [r4, r2]
		     ipv4->unicast[i].addr_state != addr_state) ||
 800cb2a:	2a01      	cmp	r2, #1
 800cb2c:	d11a      	bne.n	800cb64 <if_ipv4_get_addr+0x9c>
		if (net_ipv4_is_ll_addr(&ipv4->unicast[i].address.in_addr)) {
 800cb2e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800cb32:	eb04 1101 	add.w	r1, r4, r1, lsl #4
 800cb36:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800cb3a:	0a02      	lsrs	r2, r0, #8
 800cb3c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 800cb40:	ea42 6210 	orr.w	r2, r2, r0, lsr #24
 800cb44:	0207      	lsls	r7, r0, #8
 800cb46:	f407 077f 	and.w	r7, r7, #16711680	; 0xff0000
 800cb4a:	433a      	orrs	r2, r7
 800cb4c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800cb50:	4806      	ldr	r0, [pc, #24]	; (800cb6c <if_ipv4_get_addr+0xa4>)
 800cb52:	ea30 0202 	bics.w	r2, r0, r2
 800cb56:	d002      	beq.n	800cb5e <if_ipv4_get_addr+0x96>
			if (ll) {
 800cb58:	b925      	cbnz	r5, 800cb64 <if_ipv4_get_addr+0x9c>
		addr = &ipv4->unicast[i].address.in_addr;
 800cb5a:	460c      	mov	r4, r1
 800cb5c:	e7c3      	b.n	800cae6 <if_ipv4_get_addr+0x1e>
			if (!ll) {
 800cb5e:	b10d      	cbz	r5, 800cb64 <if_ipv4_get_addr+0x9c>
		addr = &ipv4->unicast[i].address.in_addr;
 800cb60:	460c      	mov	r4, r1
 800cb62:	e7c0      	b.n	800cae6 <if_ipv4_get_addr+0x1e>
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
 800cb64:	3301      	adds	r3, #1
 800cb66:	e7c4      	b.n	800caf2 <if_ipv4_get_addr+0x2a>
 800cb68:	20001094 	.word	0x20001094
 800cb6c:	a9fe0000 	.word	0xa9fe0000

0800cb70 <iface_router_lookup>:
{
 800cb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb74:	4607      	mov	r7, r0
 800cb76:	460e      	mov	r6, r1
 800cb78:	4690      	mov	r8, r2
	return z_impl_k_mutex_lock(mutex, timeout);
 800cb7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb82:	4823      	ldr	r0, [pc, #140]	; (800cc10 <iface_router_lookup+0xa0>)
 800cb84:	f008 feca 	bl	801591c <z_impl_k_mutex_lock>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
 800cb88:	2400      	movs	r4, #0
 800cb8a:	e00b      	b.n	800cba4 <iface_router_lookup+0x34>
 * @return pointer to the IPv6 address, or NULL if none
 */
#if defined(CONFIG_NET_NATIVE_IPV6)
static inline struct in6_addr *net_if_router_ipv6(struct net_if_router *router)
{
	return &router->address.in6_addr;
 800cb8c:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800cb90:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 800cb94:	2210      	movs	r2, #16
 800cb96:	4641      	mov	r1, r8
 800cb98:	3008      	adds	r0, #8
 800cb9a:	f00f fe3f 	bl	801c81c <memcmp>
		if ((IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6 &&
 800cb9e:	b9f0      	cbnz	r0, 800cbde <iface_router_lookup+0x6e>
 800cba0:	e029      	b.n	800cbf6 <iface_router_lookup+0x86>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
 800cba2:	3401      	adds	r4, #1
 800cba4:	2c01      	cmp	r4, #1
 800cba6:	dc2c      	bgt.n	800cc02 <iface_router_lookup+0x92>
		if (!routers[i].is_used ||
 800cba8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800cbac:	4d19      	ldr	r5, [pc, #100]	; (800cc14 <iface_router_lookup+0xa4>)
 800cbae:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cbb2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800cbb6:	f013 0f01 	tst.w	r3, #1
 800cbba:	d0f2      	beq.n	800cba2 <iface_router_lookup+0x32>
		    routers[i].address.family != family ||
 800cbbc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800cbc0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cbc4:	889a      	ldrh	r2, [r3, #4]
 800cbc6:	b2b3      	uxth	r3, r6
		if (!routers[i].is_used ||
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d1ea      	bne.n	800cba2 <iface_router_lookup+0x32>
		    routers[i].iface != iface) {
 800cbcc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800cbd0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cbd4:	699b      	ldr	r3, [r3, #24]
		    routers[i].address.family != family ||
 800cbd6:	42bb      	cmp	r3, r7
 800cbd8:	d1e3      	bne.n	800cba2 <iface_router_lookup+0x32>
		if ((IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6 &&
 800cbda:	2e02      	cmp	r6, #2
 800cbdc:	d0d6      	beq.n	800cb8c <iface_router_lookup+0x1c>
				       (struct in6_addr *)addr)) ||
 800cbde:	2e01      	cmp	r6, #1
 800cbe0:	d1df      	bne.n	800cba2 <iface_router_lookup+0x32>
 * @return pointer to the IPv4 address, or NULL if none
 */
#if defined(CONFIG_NET_NATIVE_IPV4)
static inline struct in_addr *net_if_router_ipv4(struct net_if_router *router)
{
	return &router->address.in_addr;
 800cbe2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800cbe6:	4a0b      	ldr	r2, [pc, #44]	; (800cc14 <iface_router_lookup+0xa4>)
 800cbe8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 800cbec:	689a      	ldr	r2, [r3, #8]
 800cbee:	f8d8 3000 	ldr.w	r3, [r8]
		    (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET &&
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	d1d5      	bne.n	800cba2 <iface_router_lookup+0x32>
			router = &routers[i];
 800cbf6:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800cbfa:	4b06      	ldr	r3, [pc, #24]	; (800cc14 <iface_router_lookup+0xa4>)
 800cbfc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
			goto out;
 800cc00:	e000      	b.n	800cc04 <iface_router_lookup+0x94>
	struct net_if_router *router = NULL;
 800cc02:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
 800cc04:	4802      	ldr	r0, [pc, #8]	; (800cc10 <iface_router_lookup+0xa0>)
 800cc06:	f008 ff13 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc10:	20001094 	.word	0x20001094
 800cc14:	20003350 	.word	0x20003350

0800cc18 <net_if_ipv6_start_dad>:
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
	if (iface == NULL) {
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	d034      	beq.n	800cc8c <net_if_ipv6_start_dad+0x74>
{
 800cc22:	b510      	push	{r4, lr}
 800cc24:	460c      	mov	r4, r1
	return atomic_test_bit(iface->if_dev->flags, value);
 800cc26:	6802      	ldr	r2, [r0, #0]
 800cc28:	f3bf 8f5b 	dmb	ish
 800cc2c:	68d2      	ldr	r2, [r2, #12]
 800cc2e:	f3bf 8f5b 	dmb	ish
	if (net_if_is_up(iface)) {
 800cc32:	f012 0f01 	tst.w	r2, #1
 800cc36:	d100      	bne.n	800cc3a <net_if_ipv6_start_dad+0x22>
}
 800cc38:	bd10      	pop	{r4, pc}
		ifaddr->dad_count = 1U;
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	f881 202e 	strb.w	r2, [r1, #46]	; 0x2e
		if (!net_ipv6_start_dad(iface, ifaddr)) {
 800cc40:	f00e fb67 	bl	801b312 <net_ipv6_start_dad>
 800cc44:	2800      	cmp	r0, #0
 800cc46:	d1f7      	bne.n	800cc38 <net_if_ipv6_start_dad+0x20>
	return z_impl_k_uptime_ticks();
 800cc48:	f00f fcde 	bl	801c608 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 800cc4c:	220a      	movs	r2, #10
 800cc4e:	2300      	movs	r3, #0
 800cc50:	f7f3 ff74 	bl	8000b3c <__aeabi_uldivmod>
			ifaddr->dad_start = k_uptime_get_32();
 800cc54:	62a0      	str	r0, [r4, #40]	; 0x28
			sys_slist_append(&active_dad_timers, &ifaddr->dad_node);
 800cc56:	f104 0324 	add.w	r3, r4, #36	; 0x24
	parent->next = child;
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	6262      	str	r2, [r4, #36]	; 0x24
	return list->tail;
 800cc5e:	4a0c      	ldr	r2, [pc, #48]	; (800cc90 <net_if_ipv6_start_dad+0x78>)
 800cc60:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_APPEND(slist, snode)
 800cc62:	b17a      	cbz	r2, 800cc84 <net_if_ipv6_start_dad+0x6c>
	parent->next = child;
 800cc64:	6013      	str	r3, [r2, #0]
	list->tail = node;
 800cc66:	4a0a      	ldr	r2, [pc, #40]	; (800cc90 <net_if_ipv6_start_dad+0x78>)
 800cc68:	6053      	str	r3, [r2, #4]
	return z_timeout_remaining(&dwork->timeout);
 800cc6a:	480a      	ldr	r0, [pc, #40]	; (800cc94 <net_if_ipv6_start_dad+0x7c>)
 800cc6c:	f00f fc85 	bl	801c57a <z_timeout_remaining>
			if (!k_work_delayable_remaining_get(&dad_timer)) {
 800cc70:	ea50 0301 	orrs.w	r3, r0, r1
 800cc74:	d1e0      	bne.n	800cc38 <net_if_ipv6_start_dad+0x20>
				k_work_reschedule(&dad_timer,
 800cc76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	4806      	ldr	r0, [pc, #24]	; (800cc98 <net_if_ipv6_start_dad+0x80>)
 800cc7e:	f009 f949 	bl	8015f14 <k_work_reschedule>
}
 800cc82:	e7d9      	b.n	800cc38 <net_if_ipv6_start_dad+0x20>
 800cc84:	4a02      	ldr	r2, [pc, #8]	; (800cc90 <net_if_ipv6_start_dad+0x78>)
 800cc86:	6053      	str	r3, [r2, #4]
	list->head = node;
 800cc88:	6013      	str	r3, [r2, #0]
}
 800cc8a:	e7ee      	b.n	800cc6a <net_if_ipv6_start_dad+0x52>
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	200031b4 	.word	0x200031b4
 800cc94:	20001ca8 	.word	0x20001ca8
 800cc98:	20001c98 	.word	0x20001c98

0800cc9c <iface_router_notify_deletion>:
{
 800cc9c:	b508      	push	{r3, lr}
	    router->address.family == AF_INET6) {
 800cc9e:	8883      	ldrh	r3, [r0, #4]
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 800cca0:	2b02      	cmp	r3, #2
 800cca2:	d002      	beq.n	800ccaa <iface_router_notify_deletion+0xe>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d008      	beq.n	800ccba <iface_router_notify_deletion+0x1e>
}
 800cca8:	bd08      	pop	{r3, pc}
		net_mgmt_event_notify_with_info(NET_EVENT_IPV6_ROUTER_DEL,
 800ccaa:	2310      	movs	r3, #16
 800ccac:	f100 0208 	add.w	r2, r0, #8
 800ccb0:	6981      	ldr	r1, [r0, #24]
 800ccb2:	4806      	ldr	r0, [pc, #24]	; (800cccc <iface_router_notify_deletion+0x30>)
 800ccb4:	f002 fda0 	bl	800f7f8 <net_mgmt_event_notify_with_info>
 800ccb8:	e7f6      	b.n	800cca8 <iface_router_notify_deletion+0xc>
		net_mgmt_event_notify_with_info(NET_EVENT_IPV4_ROUTER_DEL,
 800ccba:	2310      	movs	r3, #16
 800ccbc:	f100 0208 	add.w	r2, r0, #8
 800ccc0:	6981      	ldr	r1, [r0, #24]
 800ccc2:	4803      	ldr	r0, [pc, #12]	; (800ccd0 <iface_router_notify_deletion+0x34>)
 800ccc4:	f002 fd98 	bl	800f7f8 <net_mgmt_event_notify_with_info>
}
 800ccc8:	e7ee      	b.n	800cca8 <iface_router_notify_deletion+0xc>
 800ccca:	bf00      	nop
 800cccc:	e060000a 	.word	0xe060000a
 800ccd0:	e0040006 	.word	0xe0040006

0800ccd4 <address_start_timer>:
{
 800ccd4:	b538      	push	{r3, r4, r5, lr}
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	460d      	mov	r5, r1
	sys_slist_append(&active_address_lifetime_timers,
 800ccda:	f100 0314 	add.w	r3, r0, #20
	parent->next = child;
 800ccde:	2200      	movs	r2, #0
 800cce0:	6142      	str	r2, [r0, #20]
	return list->tail;
 800cce2:	4a0e      	ldr	r2, [pc, #56]	; (800cd1c <address_start_timer+0x48>)
 800cce4:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_APPEND(slist, snode)
 800cce6:	b1a2      	cbz	r2, 800cd12 <address_start_timer+0x3e>
	parent->next = child;
 800cce8:	6013      	str	r3, [r2, #0]
	list->tail = node;
 800ccea:	4a0c      	ldr	r2, [pc, #48]	; (800cd1c <address_start_timer+0x48>)
 800ccec:	6053      	str	r3, [r2, #4]
 800ccee:	f00f fc8b 	bl	801c608 <z_impl_k_uptime_ticks>
 800ccf2:	220a      	movs	r2, #10
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	f7f3 ff21 	bl	8000b3c <__aeabi_uldivmod>
 800ccfa:	4602      	mov	r2, r0
	net_timeout_set(&ifaddr->lifetime, vlifetime, k_uptime_get_32());
 800ccfc:	4629      	mov	r1, r5
 800ccfe:	f104 0014 	add.w	r0, r4, #20
 800cd02:	f00c fe38 	bl	8019976 <net_timeout_set>
	k_work_reschedule(&address_lifetime_timer, K_NO_WAIT);
 800cd06:	2200      	movs	r2, #0
 800cd08:	2300      	movs	r3, #0
 800cd0a:	4805      	ldr	r0, [pc, #20]	; (800cd20 <address_start_timer+0x4c>)
 800cd0c:	f009 f902 	bl	8015f14 <k_work_reschedule>
}
 800cd10:	bd38      	pop	{r3, r4, r5, pc}
 800cd12:	4a02      	ldr	r2, [pc, #8]	; (800cd1c <address_start_timer+0x48>)
 800cd14:	6053      	str	r3, [r2, #4]
	list->head = node;
 800cd16:	6013      	str	r3, [r2, #0]
}
 800cd18:	e7e9      	b.n	800ccee <address_start_timer+0x1a>
 800cd1a:	bf00      	nop
 800cd1c:	200031ac 	.word	0x200031ac
 800cd20:	20001c68 	.word	0x20001c68

0800cd24 <prefix_start_timer>:
{
 800cd24:	b570      	push	{r4, r5, r6, lr}
 800cd26:	4605      	mov	r5, r0
 800cd28:	460e      	mov	r6, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800cd2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd32:	4820      	ldr	r0, [pc, #128]	; (800cdb4 <prefix_start_timer+0x90>)
 800cd34:	f008 fdf2 	bl	801591c <z_impl_k_mutex_lock>
	(void)sys_slist_find_and_remove(&active_prefix_lifetime_timers,
 800cd38:	462c      	mov	r4, r5
	return list->head;
 800cd3a:	4b1f      	ldr	r3, [pc, #124]	; (800cdb8 <prefix_start_timer+0x94>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800cd3e:	2200      	movs	r2, #0
 800cd40:	b15b      	cbz	r3, 800cd5a <prefix_start_timer+0x36>
 800cd42:	429c      	cmp	r4, r3
 800cd44:	d002      	beq.n	800cd4c <prefix_start_timer+0x28>
 800cd46:	461a      	mov	r2, r3
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	e7f9      	b.n	800cd40 <prefix_start_timer+0x1c>
Z_GENLIST_REMOVE(slist, snode)
 800cd4c:	b30a      	cbz	r2, 800cd92 <prefix_start_timer+0x6e>
	return node->next;
 800cd4e:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
 800cd50:	6013      	str	r3, [r2, #0]
	return list->tail;
 800cd52:	4b19      	ldr	r3, [pc, #100]	; (800cdb8 <prefix_start_timer+0x94>)
 800cd54:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800cd56:	429d      	cmp	r5, r3
 800cd58:	d024      	beq.n	800cda4 <prefix_start_timer+0x80>
	parent->next = child;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	602b      	str	r3, [r5, #0]
	return list->tail;
 800cd5e:	4b16      	ldr	r3, [pc, #88]	; (800cdb8 <prefix_start_timer+0x94>)
 800cd60:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
 800cd62:	b313      	cbz	r3, 800cdaa <prefix_start_timer+0x86>
	parent->next = child;
 800cd64:	601d      	str	r5, [r3, #0]
	list->tail = node;
 800cd66:	4b14      	ldr	r3, [pc, #80]	; (800cdb8 <prefix_start_timer+0x94>)
 800cd68:	605d      	str	r5, [r3, #4]
	return z_impl_k_uptime_ticks();
 800cd6a:	f00f fc4d 	bl	801c608 <z_impl_k_uptime_ticks>
 800cd6e:	220a      	movs	r2, #10
 800cd70:	2300      	movs	r3, #0
 800cd72:	f7f3 fee3 	bl	8000b3c <__aeabi_uldivmod>
 800cd76:	4602      	mov	r2, r0
	net_timeout_set(&ifprefix->lifetime, lifetime, k_uptime_get_32());
 800cd78:	4631      	mov	r1, r6
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	f00c fdfb 	bl	8019976 <net_timeout_set>
	k_work_reschedule(&prefix_lifetime_timer, K_NO_WAIT);
 800cd80:	2200      	movs	r2, #0
 800cd82:	2300      	movs	r3, #0
 800cd84:	480d      	ldr	r0, [pc, #52]	; (800cdbc <prefix_start_timer+0x98>)
 800cd86:	f009 f8c5 	bl	8015f14 <k_work_reschedule>
	return z_impl_k_mutex_unlock(mutex);
 800cd8a:	480a      	ldr	r0, [pc, #40]	; (800cdb4 <prefix_start_timer+0x90>)
 800cd8c:	f008 fe50 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800cd90:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
 800cd92:	682a      	ldr	r2, [r5, #0]
	list->head = node;
 800cd94:	4b08      	ldr	r3, [pc, #32]	; (800cdb8 <prefix_start_timer+0x94>)
 800cd96:	601a      	str	r2, [r3, #0]
	return list->tail;
 800cd98:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800cd9a:	429d      	cmp	r5, r3
 800cd9c:	d1dd      	bne.n	800cd5a <prefix_start_timer+0x36>
	list->tail = node;
 800cd9e:	4b06      	ldr	r3, [pc, #24]	; (800cdb8 <prefix_start_timer+0x94>)
 800cda0:	605a      	str	r2, [r3, #4]
}
 800cda2:	e7da      	b.n	800cd5a <prefix_start_timer+0x36>
	list->tail = node;
 800cda4:	4b04      	ldr	r3, [pc, #16]	; (800cdb8 <prefix_start_timer+0x94>)
 800cda6:	605a      	str	r2, [r3, #4]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800cda8:	e7d7      	b.n	800cd5a <prefix_start_timer+0x36>
	list->tail = node;
 800cdaa:	4b03      	ldr	r3, [pc, #12]	; (800cdb8 <prefix_start_timer+0x94>)
 800cdac:	605d      	str	r5, [r3, #4]
	list->head = node;
 800cdae:	601d      	str	r5, [r3, #0]
}
 800cdb0:	e7db      	b.n	800cd6a <prefix_start_timer+0x46>
 800cdb2:	bf00      	nop
 800cdb4:	20001094 	.word	0x20001094
 800cdb8:	200031bc 	.word	0x200031bc
 800cdbc:	20001cc8 	.word	0x20001cc8

0800cdc0 <prefix_timer_remove>:
{
 800cdc0:	b510      	push	{r4, lr}
 800cdc2:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800cdc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cdc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cdcc:	4815      	ldr	r0, [pc, #84]	; (800ce24 <prefix_timer_remove+0x64>)
 800cdce:	f008 fda5 	bl	801591c <z_impl_k_mutex_lock>
	sys_slist_find_and_remove(&active_prefix_lifetime_timers,
 800cdd2:	4621      	mov	r1, r4
	return list->head;
 800cdd4:	4b14      	ldr	r3, [pc, #80]	; (800ce28 <prefix_timer_remove+0x68>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800cdd8:	2200      	movs	r2, #0
 800cdda:	b16b      	cbz	r3, 800cdf8 <prefix_timer_remove+0x38>
 800cddc:	428b      	cmp	r3, r1
 800cdde:	d002      	beq.n	800cde6 <prefix_timer_remove+0x26>
 800cde0:	461a      	mov	r2, r3
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	e7f9      	b.n	800cdda <prefix_timer_remove+0x1a>
Z_GENLIST_REMOVE(slist, snode)
 800cde6:	b182      	cbz	r2, 800ce0a <prefix_timer_remove+0x4a>
	return node->next;
 800cde8:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
 800cdea:	6013      	str	r3, [r2, #0]
	return list->tail;
 800cdec:	4b0e      	ldr	r3, [pc, #56]	; (800ce28 <prefix_timer_remove+0x68>)
 800cdee:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800cdf0:	42a3      	cmp	r3, r4
 800cdf2:	d013      	beq.n	800ce1c <prefix_timer_remove+0x5c>
	parent->next = child;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	6023      	str	r3, [r4, #0]
	net_timeout_set(&ifprefix->lifetime, 0, 0);
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	4611      	mov	r1, r2
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f00c fdba 	bl	8019976 <net_timeout_set>
	return z_impl_k_mutex_unlock(mutex);
 800ce02:	4808      	ldr	r0, [pc, #32]	; (800ce24 <prefix_timer_remove+0x64>)
 800ce04:	f008 fe14 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800ce08:	bd10      	pop	{r4, pc}
	return node->next;
 800ce0a:	6822      	ldr	r2, [r4, #0]
	list->head = node;
 800ce0c:	4b06      	ldr	r3, [pc, #24]	; (800ce28 <prefix_timer_remove+0x68>)
 800ce0e:	601a      	str	r2, [r3, #0]
	return list->tail;
 800ce10:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800ce12:	42a3      	cmp	r3, r4
 800ce14:	d1ee      	bne.n	800cdf4 <prefix_timer_remove+0x34>
	list->tail = node;
 800ce16:	4b04      	ldr	r3, [pc, #16]	; (800ce28 <prefix_timer_remove+0x68>)
 800ce18:	605a      	str	r2, [r3, #4]
}
 800ce1a:	e7eb      	b.n	800cdf4 <prefix_timer_remove+0x34>
	list->tail = node;
 800ce1c:	4b02      	ldr	r3, [pc, #8]	; (800ce28 <prefix_timer_remove+0x68>)
 800ce1e:	605a      	str	r2, [r3, #4]
}
 800ce20:	e7e8      	b.n	800cdf4 <prefix_timer_remove+0x34>
 800ce22:	bf00      	nop
 800ce24:	20001094 	.word	0x20001094
 800ce28:	200031bc 	.word	0x200031bc

0800ce2c <address_expired>:
{
 800ce2c:	b508      	push	{r3, lr}
	ifaddr->addr_state = NET_ADDR_DEPRECATED;
 800ce2e:	2302      	movs	r3, #2
 800ce30:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	sys_slist_find_and_remove(&active_address_lifetime_timers,
 800ce34:	f100 0214 	add.w	r2, r0, #20
	return list->head;
 800ce38:	4b11      	ldr	r3, [pc, #68]	; (800ce80 <address_expired+0x54>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800ce3c:	2100      	movs	r1, #0
 800ce3e:	b16b      	cbz	r3, 800ce5c <address_expired+0x30>
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d002      	beq.n	800ce4a <address_expired+0x1e>
 800ce44:	4619      	mov	r1, r3
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	e7f9      	b.n	800ce3e <address_expired+0x12>
Z_GENLIST_REMOVE(slist, snode)
 800ce4a:	b169      	cbz	r1, 800ce68 <address_expired+0x3c>
	return node->next;
 800ce4c:	6943      	ldr	r3, [r0, #20]
	parent->next = child;
 800ce4e:	600b      	str	r3, [r1, #0]
	return list->tail;
 800ce50:	4b0b      	ldr	r3, [pc, #44]	; (800ce80 <address_expired+0x54>)
 800ce52:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d010      	beq.n	800ce7a <address_expired+0x4e>
	parent->next = child;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	6143      	str	r3, [r0, #20]
	net_timeout_set(&ifaddr->lifetime, 0, 0);
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	4611      	mov	r1, r2
 800ce60:	3014      	adds	r0, #20
 800ce62:	f00c fd88 	bl	8019976 <net_timeout_set>
}
 800ce66:	bd08      	pop	{r3, pc}
	return node->next;
 800ce68:	6941      	ldr	r1, [r0, #20]
	list->head = node;
 800ce6a:	4b05      	ldr	r3, [pc, #20]	; (800ce80 <address_expired+0x54>)
 800ce6c:	6019      	str	r1, [r3, #0]
	return list->tail;
 800ce6e:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d1f1      	bne.n	800ce58 <address_expired+0x2c>
	list->tail = node;
 800ce74:	4b02      	ldr	r3, [pc, #8]	; (800ce80 <address_expired+0x54>)
 800ce76:	6059      	str	r1, [r3, #4]
}
 800ce78:	e7ee      	b.n	800ce58 <address_expired+0x2c>
	list->tail = node;
 800ce7a:	4b01      	ldr	r3, [pc, #4]	; (800ce80 <address_expired+0x54>)
 800ce7c:	6059      	str	r1, [r3, #4]
}
 800ce7e:	e7eb      	b.n	800ce58 <address_expired+0x2c>
 800ce80:	200031ac 	.word	0x200031ac

0800ce84 <join_mcast_allnodes>:
{
 800ce84:	b510      	push	{r4, lr}
 800ce86:	b088      	sub	sp, #32
					uint16_t addr0, uint16_t addr1,
					uint16_t addr2, uint16_t addr3,
					uint16_t addr4, uint16_t addr5,
					uint16_t addr6, uint16_t addr7)
{
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
 800ce88:	f240 23ff 	movw	r3, #767	; 0x2ff
 800ce8c:	f8ad 3010 	strh.w	r3, [sp, #16]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
 800ce90:	2300      	movs	r3, #0
 800ce92:	f8ad 3012 	strh.w	r3, [sp, #18]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
 800ce96:	f8ad 3014 	strh.w	r3, [sp, #20]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
 800ce9a:	f8ad 3016 	strh.w	r3, [sp, #22]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
 800ce9e:	f8ad 3018 	strh.w	r3, [sp, #24]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
 800cea2:	f8ad 301a 	strh.w	r3, [sp, #26]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
 800cea6:	f8ad 301c 	strh.w	r3, [sp, #28]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
 800ceaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ceae:	f8ad 301e 	strh.w	r3, [sp, #30]
	ret = net_ipv6_mld_join(iface, &addr);
 800ceb2:	a904      	add	r1, sp, #16
 800ceb4:	f006 f8ac 	bl	8013010 <net_ipv6_mld_join>
	if (ret < 0 && ret != -EALREADY) {
 800ceb8:	1e04      	subs	r4, r0, #0
 800ceba:	db01      	blt.n	800cec0 <join_mcast_allnodes+0x3c>
}
 800cebc:	b008      	add	sp, #32
 800cebe:	bd10      	pop	{r4, pc}
	if (ret < 0 && ret != -EALREADY) {
 800cec0:	f114 0f78 	cmn.w	r4, #120	; 0x78
 800cec4:	d0fa      	beq.n	800cebc <join_mcast_allnodes+0x38>
		NET_ERR("Cannot join all nodes address %s (%d)",
 800cec6:	a904      	add	r1, sp, #16
 800cec8:	2002      	movs	r0, #2
 800ceca:	f002 fb4b 	bl	800f564 <net_sprint_addr>
 800cece:	9403      	str	r4, [sp, #12]
 800ced0:	9002      	str	r0, [sp, #8]
 800ced2:	4b05      	ldr	r3, [pc, #20]	; (800cee8 <join_mcast_allnodes+0x64>)
 800ced4:	9301      	str	r3, [sp, #4]
 800ced6:	2000      	movs	r0, #0
 800ced8:	9000      	str	r0, [sp, #0]
 800ceda:	4603      	mov	r3, r0
 800cedc:	2201      	movs	r2, #1
 800cede:	4903      	ldr	r1, [pc, #12]	; (800ceec <join_mcast_allnodes+0x68>)
 800cee0:	f00c fbf3 	bl	80196ca <z_log_msg2_runtime_create>
}
 800cee4:	e7ea      	b.n	800cebc <join_mcast_allnodes+0x38>
 800cee6:	bf00      	nop
 800cee8:	0801e124 	.word	0x0801e124
 800ceec:	0801d778 	.word	0x0801d778

0800cef0 <join_mcast_solicit_node>:
{
 800cef0:	b510      	push	{r4, lr}
 800cef2:	b088      	sub	sp, #32
	dst->s6_addr[0]   = 0xFF;
 800cef4:	22ff      	movs	r2, #255	; 0xff
 800cef6:	f88d 2010 	strb.w	r2, [sp, #16]
	dst->s6_addr[1]   = 0x02;
 800cefa:	2302      	movs	r3, #2
 800cefc:	f88d 3011 	strb.w	r3, [sp, #17]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
 800cf00:	2300      	movs	r3, #0
 800cf02:	f8ad 3012 	strh.w	r3, [sp, #18]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
 800cf06:	f8ad 3014 	strh.w	r3, [sp, #20]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
 800cf0a:	f8ad 3016 	strh.w	r3, [sp, #22]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
 800cf0e:	f8ad 3018 	strh.w	r3, [sp, #24]
	dst->s6_addr[10]  = 0U;
 800cf12:	f88d 301a 	strb.w	r3, [sp, #26]
	dst->s6_addr[11]  = 0x01;
 800cf16:	2301      	movs	r3, #1
 800cf18:	f88d 301b 	strb.w	r3, [sp, #27]
	dst->s6_addr[12]  = 0xFF;
 800cf1c:	f88d 201c 	strb.w	r2, [sp, #28]
	dst->s6_addr[13]  = src->s6_addr[13];
 800cf20:	7b4b      	ldrb	r3, [r1, #13]
 800cf22:	f88d 301d 	strb.w	r3, [sp, #29]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
 800cf26:	89cb      	ldrh	r3, [r1, #14]
 800cf28:	f8ad 301e 	strh.w	r3, [sp, #30]
	ret = net_ipv6_mld_join(iface, &addr);
 800cf2c:	a904      	add	r1, sp, #16
 800cf2e:	f006 f86f 	bl	8013010 <net_ipv6_mld_join>
	if (ret < 0 && ret != -EALREADY) {
 800cf32:	1e04      	subs	r4, r0, #0
 800cf34:	db01      	blt.n	800cf3a <join_mcast_solicit_node+0x4a>
}
 800cf36:	b008      	add	sp, #32
 800cf38:	bd10      	pop	{r4, pc}
	if (ret < 0 && ret != -EALREADY) {
 800cf3a:	f114 0f78 	cmn.w	r4, #120	; 0x78
 800cf3e:	d0fa      	beq.n	800cf36 <join_mcast_solicit_node+0x46>
		NET_ERR("Cannot join solicit node address %s (%d)",
 800cf40:	a904      	add	r1, sp, #16
 800cf42:	2002      	movs	r0, #2
 800cf44:	f002 fb0e 	bl	800f564 <net_sprint_addr>
 800cf48:	9403      	str	r4, [sp, #12]
 800cf4a:	9002      	str	r0, [sp, #8]
 800cf4c:	4b04      	ldr	r3, [pc, #16]	; (800cf60 <join_mcast_solicit_node+0x70>)
 800cf4e:	9301      	str	r3, [sp, #4]
 800cf50:	2000      	movs	r0, #0
 800cf52:	9000      	str	r0, [sp, #0]
 800cf54:	4603      	mov	r3, r0
 800cf56:	2201      	movs	r2, #1
 800cf58:	4902      	ldr	r1, [pc, #8]	; (800cf64 <join_mcast_solicit_node+0x74>)
 800cf5a:	f00c fbb6 	bl	80196ca <z_log_msg2_runtime_create>
}
 800cf5e:	e7ea      	b.n	800cf36 <join_mcast_solicit_node+0x46>
 800cf60:	0801e14c 	.word	0x0801e14c
 800cf64:	0801d778 	.word	0x0801d778

0800cf68 <iface_router_update_timer>:
{
 800cf68:	b538      	push	{r3, r4, r5, lr}
 800cf6a:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800cf6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf74:	481d      	ldr	r0, [pc, #116]	; (800cfec <iface_router_update_timer+0x84>)
 800cf76:	f008 fcd1 	bl	801591c <z_impl_k_mutex_lock>
	return list->head;
 800cf7a:	4b1d      	ldr	r3, [pc, #116]	; (800cff0 <iface_router_update_timer+0x88>)
 800cf7c:	6819      	ldr	r1, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 800cf7e:	b129      	cbz	r1, 800cf8c <iface_router_update_timer+0x24>
 800cf80:	460a      	mov	r2, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
 800cf82:	b101      	cbz	r1, 800cf86 <iface_router_update_timer+0x1e>
	return node->next;
 800cf84:	680a      	ldr	r2, [r1, #0]
 800cf86:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cf8a:	e004      	b.n	800cf96 <iface_router_update_timer+0x2e>
 800cf8c:	460a      	mov	r2, r1
 800cf8e:	e7fa      	b.n	800cf86 <iface_router_update_timer+0x1e>
 800cf90:	4613      	mov	r3, r2
 800cf92:	4611      	mov	r1, r2
 800cf94:	461a      	mov	r2, r3
 800cf96:	b199      	cbz	r1, 800cfc0 <iface_router_update_timer+0x58>
	uint32_t ends = router->life_start;
 800cf98:	69c8      	ldr	r0, [r1, #28]
	ends += MSEC_PER_SEC * router->lifetime;
 800cf9a:	8c0b      	ldrh	r3, [r1, #32]
 800cf9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cfa0:	fb01 0303 	mla	r3, r1, r3, r0
	return (int32_t)(ends - now);
 800cfa4:	1b5b      	subs	r3, r3, r5
		if (ends <= 0) {
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	dd09      	ble.n	800cfbe <iface_router_update_timer+0x56>
		new_delay = MIN((uint32_t)ends, new_delay);
 800cfaa:	429c      	cmp	r4, r3
 800cfac:	bf28      	it	cs
 800cfae:	461c      	movcs	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 800cfb0:	2a00      	cmp	r2, #0
 800cfb2:	d0ed      	beq.n	800cf90 <iface_router_update_timer+0x28>
 800cfb4:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
 800cfb6:	2a00      	cmp	r2, #0
 800cfb8:	d0eb      	beq.n	800cf92 <iface_router_update_timer+0x2a>
	return node->next;
 800cfba:	6813      	ldr	r3, [r2, #0]
 800cfbc:	e7e9      	b.n	800cf92 <iface_router_update_timer+0x2a>
			new_delay = 0;
 800cfbe:	2400      	movs	r4, #0
	if (new_delay == UINT32_MAX) {
 800cfc0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800cfc4:	d00e      	beq.n	800cfe4 <iface_router_update_timer+0x7c>
			return t * ((uint64_t)to_hz / from_hz);
 800cfc6:	00a0      	lsls	r0, r4, #2
 800cfc8:	0fa1      	lsrs	r1, r4, #30
 800cfca:	1900      	adds	r0, r0, r4
 800cfcc:	f141 0100 	adc.w	r1, r1, #0
		k_work_reschedule(&router_timer, K_MSEC(new_delay));
 800cfd0:	1802      	adds	r2, r0, r0
 800cfd2:	eb41 0301 	adc.w	r3, r1, r1
 800cfd6:	4807      	ldr	r0, [pc, #28]	; (800cff4 <iface_router_update_timer+0x8c>)
 800cfd8:	f008 ff9c 	bl	8015f14 <k_work_reschedule>
	return z_impl_k_mutex_unlock(mutex);
 800cfdc:	4803      	ldr	r0, [pc, #12]	; (800cfec <iface_router_update_timer+0x84>)
 800cfde:	f008 fd27 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800cfe2:	bd38      	pop	{r3, r4, r5, pc}
		k_work_cancel_delayable(&router_timer);
 800cfe4:	4803      	ldr	r0, [pc, #12]	; (800cff4 <iface_router_update_timer+0x8c>)
 800cfe6:	f00f f8b9 	bl	801c15c <k_work_cancel_delayable>
 800cfea:	e7f7      	b.n	800cfdc <iface_router_update_timer+0x74>
 800cfec:	20001094 	.word	0x20001094
 800cff0:	200031c4 	.word	0x200031c4
 800cff4:	20001cf8 	.word	0x20001cf8

0800cff8 <iface_router_add>:
{
 800cff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cffc:	b083      	sub	sp, #12
 800cffe:	4606      	mov	r6, r0
 800d000:	460d      	mov	r5, r1
 800d002:	4617      	mov	r7, r2
 800d004:	9301      	str	r3, [sp, #4]
 800d006:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
	return z_impl_k_mutex_lock(mutex, timeout);
 800d00a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d00e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d012:	484f      	ldr	r0, [pc, #316]	; (800d150 <iface_router_add+0x158>)
 800d014:	f008 fc82 	bl	801591c <z_impl_k_mutex_lock>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
 800d018:	2400      	movs	r4, #0
 800d01a:	2c01      	cmp	r4, #1
 800d01c:	f300 8096 	bgt.w	800d14c <iface_router_add+0x154>
		if (routers[i].is_used) {
 800d020:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800d024:	4a4b      	ldr	r2, [pc, #300]	; (800d154 <iface_router_add+0x15c>)
 800d026:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d02a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800d02e:	f013 0f01 	tst.w	r3, #1
 800d032:	d12e      	bne.n	800d092 <iface_router_add+0x9a>
		routers[i].is_used = true;
 800d034:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800d038:	4a46      	ldr	r2, [pc, #280]	; (800d154 <iface_router_add+0x15c>)
 800d03a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d03e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800d042:	f042 0201 	orr.w	r2, r2, #1
 800d046:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		routers[i].iface = iface;
 800d04a:	619e      	str	r6, [r3, #24]
		routers[i].address.family = family;
 800d04c:	809d      	strh	r5, [r3, #4]
		if (lifetime) {
 800d04e:	f1b8 0f00 	cmp.w	r8, #0
 800d052:	d120      	bne.n	800d096 <iface_router_add+0x9e>
			routers[i].is_default = false;
 800d054:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800d058:	4a3e      	ldr	r2, [pc, #248]	; (800d154 <iface_router_add+0x15c>)
 800d05a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d05e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
			routers[i].is_infinite = true;
 800d062:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800d066:	f042 0204 	orr.w	r2, r2, #4
 800d06a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			routers[i].lifetime = 0;
 800d06e:	2200      	movs	r2, #0
 800d070:	841a      	strh	r2, [r3, #32]
		if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
 800d072:	2d02      	cmp	r5, #2
 800d074:	d041      	beq.n	800d0fa <iface_router_add+0x102>
		} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
 800d076:	2d01      	cmp	r5, #1
 800d078:	d053      	beq.n	800d122 <iface_router_add+0x12a>
		router = &routers[i];
 800d07a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 800d07e:	4b35      	ldr	r3, [pc, #212]	; (800d154 <iface_router_add+0x15c>)
 800d080:	eb03 0484 	add.w	r4, r3, r4, lsl #2
	return z_impl_k_mutex_unlock(mutex);
 800d084:	4832      	ldr	r0, [pc, #200]	; (800d150 <iface_router_add+0x158>)
 800d086:	f008 fcd3 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800d08a:	4620      	mov	r0, r4
 800d08c:	b003      	add	sp, #12
 800d08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
 800d092:	3401      	adds	r4, #1
 800d094:	e7c1      	b.n	800d01a <iface_router_add+0x22>
			routers[i].is_default = true;
 800d096:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d154 <iface_router_add+0x15c>
 800d09a:	eb04 09c4 	add.w	r9, r4, r4, lsl #3
 800d09e:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 800d0a2:	4699      	mov	r9, r3
 800d0a4:	b2d3      	uxtb	r3, r2
			routers[i].is_infinite = false;
 800d0a6:	f043 0302 	orr.w	r3, r3, #2
 800d0aa:	f36f 0382 	bfc	r3, #2, #1
 800d0ae:	f889 3022 	strb.w	r3, [r9, #34]	; 0x22
			routers[i].lifetime = lifetime;
 800d0b2:	f8a9 8020 	strh.w	r8, [r9, #32]
	return z_impl_k_uptime_ticks();
 800d0b6:	f00f faa7 	bl	801c608 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 800d0ba:	220a      	movs	r2, #10
 800d0bc:	2300      	movs	r3, #0
 800d0be:	f7f3 fd3d 	bl	8000b3c <__aeabi_uldivmod>
			routers[i].life_start = k_uptime_get_32();
 800d0c2:	f8c9 001c 	str.w	r0, [r9, #28]
	parent->next = child;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	f84a 300b 	str.w	r3, [sl, fp]
	return list->tail;
 800d0cc:	4b22      	ldr	r3, [pc, #136]	; (800d158 <iface_router_add+0x160>)
 800d0ce:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
 800d0d0:	b16b      	cbz	r3, 800d0ee <iface_router_add+0xf6>
	parent->next = child;
 800d0d2:	f8c3 9000 	str.w	r9, [r3]
	list->tail = node;
 800d0d6:	4b20      	ldr	r3, [pc, #128]	; (800d158 <iface_router_add+0x160>)
 800d0d8:	f8c3 9004 	str.w	r9, [r3, #4]
			iface_router_update_timer(routers[i].life_start);
 800d0dc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800d0e0:	4a1c      	ldr	r2, [pc, #112]	; (800d154 <iface_router_add+0x15c>)
 800d0e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d0e6:	69d8      	ldr	r0, [r3, #28]
 800d0e8:	f7ff ff3e 	bl	800cf68 <iface_router_update_timer>
 800d0ec:	e7c1      	b.n	800d072 <iface_router_add+0x7a>
 800d0ee:	4b1a      	ldr	r3, [pc, #104]	; (800d158 <iface_router_add+0x160>)
 800d0f0:	f8c3 9004 	str.w	r9, [r3, #4]
	list->head = node;
 800d0f4:	f8c3 9000 	str.w	r9, [r3]
}
 800d0f8:	e7f0      	b.n	800d0dc <iface_router_add+0xe4>
	return &router->address.in6_addr;
 800d0fa:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800d0fe:	4b15      	ldr	r3, [pc, #84]	; (800d154 <iface_router_add+0x15c>)
 800d100:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d104:	683d      	ldr	r5, [r7, #0]
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	68b9      	ldr	r1, [r7, #8]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	6095      	str	r5, [r2, #8]
 800d10e:	60d0      	str	r0, [r2, #12]
 800d110:	6111      	str	r1, [r2, #16]
 800d112:	6153      	str	r3, [r2, #20]
			net_mgmt_event_notify_with_info(
 800d114:	2310      	movs	r3, #16
 800d116:	3208      	adds	r2, #8
 800d118:	4631      	mov	r1, r6
 800d11a:	4810      	ldr	r0, [pc, #64]	; (800d15c <iface_router_add+0x164>)
 800d11c:	f002 fb6c 	bl	800f7f8 <net_mgmt_event_notify_with_info>
			NET_DBG("interface %p router %s lifetime %u default %d "
 800d120:	e7ab      	b.n	800d07a <iface_router_add+0x82>
	return &router->address.in_addr;
 800d122:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 800d126:	4b0b      	ldr	r3, [pc, #44]	; (800d154 <iface_router_add+0x15c>)
 800d128:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	6093      	str	r3, [r2, #8]
			routers[i].is_default = is_default;
 800d130:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800d134:	9901      	ldr	r1, [sp, #4]
 800d136:	f361 0341 	bfi	r3, r1, #1, #1
 800d13a:	f882 3022 	strb.w	r3, [r2, #34]	; 0x22
			net_mgmt_event_notify_with_info(
 800d13e:	2304      	movs	r3, #4
 800d140:	3208      	adds	r2, #8
 800d142:	4631      	mov	r1, r6
 800d144:	4806      	ldr	r0, [pc, #24]	; (800d160 <iface_router_add+0x168>)
 800d146:	f002 fb57 	bl	800f7f8 <net_mgmt_event_notify_with_info>
			NET_DBG("interface %p router %s lifetime %u default %d "
 800d14a:	e796      	b.n	800d07a <iface_router_add+0x82>
	struct net_if_router *router = NULL;
 800d14c:	2400      	movs	r4, #0
 800d14e:	e799      	b.n	800d084 <iface_router_add+0x8c>
 800d150:	20001094 	.word	0x20001094
 800d154:	20003350 	.word	0x20003350
 800d158:	200031c4 	.word	0x200031c4
 800d15c:	e0600009 	.word	0xe0600009
 800d160:	e0040005 	.word	0xe0040005

0800d164 <iface_router_rm>:
{
 800d164:	b510      	push	{r4, lr}
 800d166:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800d168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d16c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d170:	4820      	ldr	r0, [pc, #128]	; (800d1f4 <iface_router_rm+0x90>)
 800d172:	f008 fbd3 	bl	801591c <z_impl_k_mutex_lock>
	if (!router->is_used) {
 800d176:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800d17a:	f013 0f01 	tst.w	r3, #1
 800d17e:	d105      	bne.n	800d18c <iface_router_rm+0x28>
	bool ret = false;
 800d180:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
 800d182:	481c      	ldr	r0, [pc, #112]	; (800d1f4 <iface_router_rm+0x90>)
 800d184:	f008 fc54 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800d188:	4620      	mov	r0, r4
 800d18a:	bd10      	pop	{r4, pc}
	iface_router_notify_deletion(router, "has been removed");
 800d18c:	491a      	ldr	r1, [pc, #104]	; (800d1f8 <iface_router_rm+0x94>)
 800d18e:	4620      	mov	r0, r4
 800d190:	f7ff fd84 	bl	800cc9c <iface_router_notify_deletion>
	if (sys_slist_find_and_remove(&active_router_timers, &router->node)) {
 800d194:	4621      	mov	r1, r4
	return list->head;
 800d196:	4b19      	ldr	r3, [pc, #100]	; (800d1fc <iface_router_rm+0x98>)
 800d198:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800d19a:	2200      	movs	r2, #0
 800d19c:	e00d      	b.n	800d1ba <iface_router_rm+0x56>
	return node->next;
 800d19e:	6822      	ldr	r2, [r4, #0]
	list->head = node;
 800d1a0:	4b16      	ldr	r3, [pc, #88]	; (800d1fc <iface_router_rm+0x98>)
 800d1a2:	601a      	str	r2, [r3, #0]
	return list->tail;
 800d1a4:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800d1a6:	429c      	cmp	r4, r3
 800d1a8:	d112      	bne.n	800d1d0 <iface_router_rm+0x6c>
	list->tail = node;
 800d1aa:	4b14      	ldr	r3, [pc, #80]	; (800d1fc <iface_router_rm+0x98>)
 800d1ac:	605a      	str	r2, [r3, #4]
}
 800d1ae:	e00f      	b.n	800d1d0 <iface_router_rm+0x6c>
	list->tail = node;
 800d1b0:	4b12      	ldr	r3, [pc, #72]	; (800d1fc <iface_router_rm+0x98>)
 800d1b2:	605a      	str	r2, [r3, #4]
}
 800d1b4:	e00c      	b.n	800d1d0 <iface_router_rm+0x6c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	b19b      	cbz	r3, 800d1e4 <iface_router_rm+0x80>
 800d1bc:	4299      	cmp	r1, r3
 800d1be:	d1fa      	bne.n	800d1b6 <iface_router_rm+0x52>
Z_GENLIST_REMOVE(slist, snode)
 800d1c0:	2a00      	cmp	r2, #0
 800d1c2:	d0ec      	beq.n	800d19e <iface_router_rm+0x3a>
	return node->next;
 800d1c4:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
 800d1c6:	6013      	str	r3, [r2, #0]
	return list->tail;
 800d1c8:	4b0c      	ldr	r3, [pc, #48]	; (800d1fc <iface_router_rm+0x98>)
 800d1ca:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800d1cc:	429c      	cmp	r4, r3
 800d1ce:	d0ef      	beq.n	800d1b0 <iface_router_rm+0x4c>
	parent->next = child;
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	6023      	str	r3, [r4, #0]
	return z_impl_k_uptime_ticks();
 800d1d4:	f00f fa18 	bl	801c608 <z_impl_k_uptime_ticks>
 800d1d8:	220a      	movs	r2, #10
 800d1da:	2300      	movs	r3, #0
 800d1dc:	f7f3 fcae 	bl	8000b3c <__aeabi_uldivmod>
		iface_router_update_timer(k_uptime_get_32());
 800d1e0:	f7ff fec2 	bl	800cf68 <iface_router_update_timer>
	router->is_used = false;
 800d1e4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800d1e8:	f36f 0300 	bfc	r3, #0, #1
 800d1ec:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	ret = true;
 800d1f0:	2401      	movs	r4, #1
 800d1f2:	e7c6      	b.n	800d182 <iface_router_rm+0x1e>
 800d1f4:	20001094 	.word	0x20001094
 800d1f8:	0801e178 	.word	0x0801e178
 800d1fc:	200031c4 	.word	0x200031c4

0800d200 <iface_router_expired>:
{
 800d200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d204:	f00f fa00 	bl	801c608 <z_impl_k_uptime_ticks>
 800d208:	220a      	movs	r2, #10
 800d20a:	2300      	movs	r3, #0
 800d20c:	f7f3 fc96 	bl	8000b3c <__aeabi_uldivmod>
 800d210:	4680      	mov	r8, r0
	return (uint32_t)k_uptime_get();
 800d212:	4607      	mov	r7, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800d214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d21c:	4824      	ldr	r0, [pc, #144]	; (800d2b0 <iface_router_expired+0xb0>)
 800d21e:	f008 fb7d 	bl	801591c <z_impl_k_mutex_lock>
	return list->head;
 800d222:	4b24      	ldr	r3, [pc, #144]	; (800d2b4 <iface_router_expired+0xb4>)
 800d224:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 800d226:	2c00      	cmp	r4, #0
 800d228:	d035      	beq.n	800d296 <iface_router_expired+0x96>
 800d22a:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800d22c:	b104      	cbz	r4, 800d230 <iface_router_expired+0x30>
	return node->next;
 800d22e:	6825      	ldr	r5, [r4, #0]
 800d230:	2600      	movs	r6, #0
 800d232:	e018      	b.n	800d266 <iface_router_expired+0x66>
		iface_router_notify_deletion(router, "has expired");
 800d234:	4920      	ldr	r1, [pc, #128]	; (800d2b8 <iface_router_expired+0xb8>)
 800d236:	4620      	mov	r0, r4
 800d238:	f7ff fd30 	bl	800cc9c <iface_router_notify_deletion>
Z_GENLIST_REMOVE(slist, snode)
 800d23c:	b1fe      	cbz	r6, 800d27e <iface_router_expired+0x7e>
	return node->next;
 800d23e:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
 800d240:	6033      	str	r3, [r6, #0]
	return list->tail;
 800d242:	4b1c      	ldr	r3, [pc, #112]	; (800d2b4 <iface_router_expired+0xb4>)
 800d244:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800d246:	429c      	cmp	r4, r3
 800d248:	d022      	beq.n	800d290 <iface_router_expired+0x90>
	parent->next = child;
 800d24a:	2200      	movs	r2, #0
 800d24c:	6022      	str	r2, [r4, #0]
		router->is_used = false;
 800d24e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800d252:	f362 0300 	bfi	r3, r2, #0, #1
 800d256:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 800d25a:	b1f5      	cbz	r5, 800d29a <iface_router_expired+0x9a>
 800d25c:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
 800d25e:	b105      	cbz	r5, 800d262 <iface_router_expired+0x62>
	return node->next;
 800d260:	682b      	ldr	r3, [r5, #0]
 800d262:	462c      	mov	r4, r5
 800d264:	461d      	mov	r5, r3
 800d266:	b1d4      	cbz	r4, 800d29e <iface_router_expired+0x9e>
	uint32_t ends = router->life_start;
 800d268:	69e2      	ldr	r2, [r4, #28]
	ends += MSEC_PER_SEC * router->lifetime;
 800d26a:	8c23      	ldrh	r3, [r4, #32]
 800d26c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d270:	fb01 2303 	mla	r3, r1, r3, r2
	return (int32_t)(ends - now);
 800d274:	1bdb      	subs	r3, r3, r7
		if (ends > 0) {
 800d276:	2b00      	cmp	r3, #0
 800d278:	dddc      	ble.n	800d234 <iface_router_expired+0x34>
			prev_node = &router->node;
 800d27a:	4626      	mov	r6, r4
			continue;
 800d27c:	e7ed      	b.n	800d25a <iface_router_expired+0x5a>
 800d27e:	6822      	ldr	r2, [r4, #0]
	list->head = node;
 800d280:	4b0c      	ldr	r3, [pc, #48]	; (800d2b4 <iface_router_expired+0xb4>)
 800d282:	601a      	str	r2, [r3, #0]
	return list->tail;
 800d284:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800d286:	429c      	cmp	r4, r3
 800d288:	d1df      	bne.n	800d24a <iface_router_expired+0x4a>
	list->tail = node;
 800d28a:	4b0a      	ldr	r3, [pc, #40]	; (800d2b4 <iface_router_expired+0xb4>)
 800d28c:	605a      	str	r2, [r3, #4]
}
 800d28e:	e7dc      	b.n	800d24a <iface_router_expired+0x4a>
	list->tail = node;
 800d290:	4b08      	ldr	r3, [pc, #32]	; (800d2b4 <iface_router_expired+0xb4>)
 800d292:	605e      	str	r6, [r3, #4]
}
 800d294:	e7d9      	b.n	800d24a <iface_router_expired+0x4a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_router_timers,
 800d296:	4625      	mov	r5, r4
 800d298:	e7ca      	b.n	800d230 <iface_router_expired+0x30>
 800d29a:	462b      	mov	r3, r5
 800d29c:	e7e1      	b.n	800d262 <iface_router_expired+0x62>
	iface_router_update_timer(current_time);
 800d29e:	4640      	mov	r0, r8
 800d2a0:	f7ff fe62 	bl	800cf68 <iface_router_update_timer>
	return z_impl_k_mutex_unlock(mutex);
 800d2a4:	4802      	ldr	r0, [pc, #8]	; (800d2b0 <iface_router_expired+0xb0>)
 800d2a6:	f008 fbc3 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800d2aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ae:	bf00      	nop
 800d2b0:	20001094 	.word	0x20001094
 800d2b4:	200031c4 	.word	0x200031c4
 800d2b8:	0801e18c 	.word	0x0801e18c

0800d2bc <iface_router_init>:
{
 800d2bc:	b508      	push	{r3, lr}
	k_work_init_delayable(&router_timer, iface_router_expired);
 800d2be:	4904      	ldr	r1, [pc, #16]	; (800d2d0 <iface_router_init+0x14>)
 800d2c0:	4804      	ldr	r0, [pc, #16]	; (800d2d4 <iface_router_init+0x18>)
 800d2c2:	f00e ff19 	bl	801c0f8 <k_work_init_delayable>
	list->head = NULL;
 800d2c6:	4b04      	ldr	r3, [pc, #16]	; (800d2d8 <iface_router_init+0x1c>)
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
 800d2cc:	605a      	str	r2, [r3, #4]
}
 800d2ce:	bd08      	pop	{r3, pc}
 800d2d0:	0800d201 	.word	0x0800d201
 800d2d4:	20001cf8 	.word	0x20001cf8
 800d2d8:	200031c4 	.word	0x200031c4

0800d2dc <address_lifetime_timeout>:
{
 800d2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_uptime_ticks();
 800d2de:	f00f f993 	bl	801c608 <z_impl_k_uptime_ticks>
 800d2e2:	220a      	movs	r2, #10
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	f7f3 fc29 	bl	8000b3c <__aeabi_uldivmod>
 800d2ea:	4607      	mov	r7, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800d2ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2f4:	4822      	ldr	r0, [pc, #136]	; (800d380 <address_lifetime_timeout+0xa4>)
 800d2f6:	f008 fb11 	bl	801591c <z_impl_k_mutex_lock>
	return list->head;
 800d2fa:	4b22      	ldr	r3, [pc, #136]	; (800d384 <address_lifetime_timeout+0xa8>)
 800d2fc:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
 800d2fe:	b165      	cbz	r5, 800d31a <address_lifetime_timeout+0x3e>
 800d300:	3d14      	subs	r5, #20
 800d302:	d00e      	beq.n	800d322 <address_lifetime_timeout+0x46>
Z_GENLIST_PEEK_NEXT(slist, snode)
 800d304:	f115 0414 	adds.w	r4, r5, #20
 800d308:	d008      	beq.n	800d31c <address_lifetime_timeout+0x40>
	return node->next;
 800d30a:	696c      	ldr	r4, [r5, #20]
 800d30c:	b134      	cbz	r4, 800d31c <address_lifetime_timeout+0x40>
 800d30e:	3c14      	subs	r4, #20
 800d310:	e004      	b.n	800d31c <address_lifetime_timeout+0x40>
			address_expired(current);
 800d312:	4628      	mov	r0, r5
 800d314:	f7ff fd8a 	bl	800ce2c <address_expired>
			continue;
 800d318:	e015      	b.n	800d346 <address_lifetime_timeout+0x6a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
 800d31a:	462c      	mov	r4, r5
 800d31c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800d320:	e004      	b.n	800d32c <address_lifetime_timeout+0x50>
 800d322:	462c      	mov	r4, r5
 800d324:	e7fa      	b.n	800d31c <address_lifetime_timeout+0x40>
 800d326:	4623      	mov	r3, r4
 800d328:	4625      	mov	r5, r4
 800d32a:	461c      	mov	r4, r3
 800d32c:	b1ad      	cbz	r5, 800d35a <address_lifetime_timeout+0x7e>
		uint32_t this_update = net_timeout_evaluate(timeout,
 800d32e:	4639      	mov	r1, r7
 800d330:	f105 0014 	add.w	r0, r5, #20
 800d334:	f00c fb67 	bl	8019a06 <net_timeout_evaluate>
		if (this_update == 0U) {
 800d338:	2800      	cmp	r0, #0
 800d33a:	d0ea      	beq.n	800d312 <address_lifetime_timeout+0x36>
		if (this_update < next_update) {
 800d33c:	42b0      	cmp	r0, r6
 800d33e:	d200      	bcs.n	800d342 <address_lifetime_timeout+0x66>
			next_update = this_update;
 800d340:	4606      	mov	r6, r0
		if (current == next) {
 800d342:	42a5      	cmp	r5, r4
 800d344:	d009      	beq.n	800d35a <address_lifetime_timeout+0x7e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_address_lifetime_timers,
 800d346:	2c00      	cmp	r4, #0
 800d348:	d0ed      	beq.n	800d326 <address_lifetime_timeout+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
 800d34a:	f114 0314 	adds.w	r3, r4, #20
 800d34e:	d0eb      	beq.n	800d328 <address_lifetime_timeout+0x4c>
	return node->next;
 800d350:	6963      	ldr	r3, [r4, #20]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d0e8      	beq.n	800d328 <address_lifetime_timeout+0x4c>
 800d356:	3b14      	subs	r3, #20
 800d358:	e7e6      	b.n	800d328 <address_lifetime_timeout+0x4c>
	if (next_update != UINT32_MAX) {
 800d35a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800d35e:	d103      	bne.n	800d368 <address_lifetime_timeout+0x8c>
	return z_impl_k_mutex_unlock(mutex);
 800d360:	4807      	ldr	r0, [pc, #28]	; (800d380 <address_lifetime_timeout+0xa4>)
 800d362:	f008 fb65 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800d366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return t * ((uint64_t)to_hz / from_hz);
 800d368:	00b0      	lsls	r0, r6, #2
 800d36a:	0fb1      	lsrs	r1, r6, #30
 800d36c:	1980      	adds	r0, r0, r6
 800d36e:	f141 0100 	adc.w	r1, r1, #0
		k_work_reschedule(&address_lifetime_timer, K_MSEC(next_update));
 800d372:	1802      	adds	r2, r0, r0
 800d374:	eb41 0301 	adc.w	r3, r1, r1
 800d378:	4803      	ldr	r0, [pc, #12]	; (800d388 <address_lifetime_timeout+0xac>)
 800d37a:	f008 fdcb 	bl	8015f14 <k_work_reschedule>
 800d37e:	e7ef      	b.n	800d360 <address_lifetime_timeout+0x84>
 800d380:	20001094 	.word	0x20001094
 800d384:	200031ac 	.word	0x200031ac
 800d388:	20001c68 	.word	0x20001c68

0800d38c <z_impl_net_if_get_by_index>:
	if (index <= 0) {
 800d38c:	2800      	cmp	r0, #0
 800d38e:	dd09      	ble.n	800d3a4 <z_impl_net_if_get_by_index+0x18>
	if (&_net_if_list_start[index - 1] >= _net_if_list_end) {
 800d390:	3801      	subs	r0, #1
 800d392:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d396:	4b05      	ldr	r3, [pc, #20]	; (800d3ac <z_impl_net_if_get_by_index+0x20>)
 800d398:	fb02 3000 	mla	r0, r2, r0, r3
 800d39c:	4b04      	ldr	r3, [pc, #16]	; (800d3b0 <z_impl_net_if_get_by_index+0x24>)
 800d39e:	4298      	cmp	r0, r3
 800d3a0:	d202      	bcs.n	800d3a8 <z_impl_net_if_get_by_index+0x1c>
}
 800d3a2:	4770      	bx	lr
		return NULL;
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	4770      	bx	lr
		return NULL;
 800d3a8:	2000      	movs	r0, #0
 800d3aa:	e7fa      	b.n	800d3a2 <z_impl_net_if_get_by_index+0x16>
 800d3ac:	200011c8 	.word	0x200011c8
 800d3b0:	200013e0 	.word	0x200013e0

0800d3b4 <net_if_queue_tx>:
{
 800d3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b6:	4605      	mov	r5, r0
 800d3b8:	460e      	mov	r6, r1
	return pkt->priority;
 800d3ba:	f891 7052 	ldrb.w	r7, [r1, #82]	; 0x52
	uint8_t tc = net_tx_priority2tc(prio);
 800d3be:	4638      	mov	r0, r7
 800d3c0:	f002 fc72 	bl	800fca8 <net_tx_priority2tc>
 800d3c4:	b2c0      	uxtb	r0, r0
	UPDATE_STAT(iface, stats.tc.sent[tc].pkts++);
 800d3c6:	4b14      	ldr	r3, [pc, #80]	; (800d418 <net_if_queue_tx+0x64>)
 800d3c8:	eb03 1340 	add.w	r3, r3, r0, lsl #5
 800d3cc:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800d3d0:	3201      	adds	r2, #1
 800d3d2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800d3d6:	1dc3      	adds	r3, r0, #7
 800d3d8:	015b      	lsls	r3, r3, #5
 800d3da:	58ea      	ldr	r2, [r5, r3]
 800d3dc:	3201      	adds	r2, #1
 800d3de:	50ea      	str	r2, [r5, r3]
	return net_buf_frags_len(pkt->frags);
 800d3e0:	68b3      	ldr	r3, [r6, #8]
	size_t bytes = 0;
 800d3e2:	2200      	movs	r2, #0
	while (buf) {
 800d3e4:	b11b      	cbz	r3, 800d3ee <net_if_queue_tx+0x3a>
		bytes += buf->len;
 800d3e6:	899c      	ldrh	r4, [r3, #12]
 800d3e8:	4422      	add	r2, r4
		buf = buf->frags;
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	e7fa      	b.n	800d3e4 <net_if_queue_tx+0x30>
	UPDATE_STAT(iface, stats.tc.sent[tc].bytes += bytes);
 800d3ee:	490a      	ldr	r1, [pc, #40]	; (800d418 <net_if_queue_tx+0x64>)
 800d3f0:	eb01 1440 	add.w	r4, r1, r0, lsl #5
 800d3f4:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800d3f8:	4413      	add	r3, r2
 800d3fa:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 800d3fe:	1dc3      	adds	r3, r0, #7
 800d400:	015c      	lsls	r4, r3, #5
 800d402:	eb05 1543 	add.w	r5, r5, r3, lsl #5
 800d406:	686b      	ldr	r3, [r5, #4]
 800d408:	441a      	add	r2, r3
 800d40a:	606a      	str	r2, [r5, #4]
	UPDATE_STAT(iface, stats.tc.sent[tc].priority = priority);
 800d40c:	550f      	strb	r7, [r1, r4]
 800d40e:	722f      	strb	r7, [r5, #8]
	if (!net_tc_submit_to_tx_queue(tc, pkt)) {
 800d410:	4631      	mov	r1, r6
 800d412:	f002 fc31 	bl	800fc78 <net_tc_submit_to_tx_queue>
}
 800d416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d418:	20002a58 	.word	0x20002a58

0800d41c <net_if_set_link_addr_locked>:
{
 800d41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d41e:	4604      	mov	r4, r0
 800d420:	460f      	mov	r7, r1
 800d422:	4616      	mov	r6, r2
 800d424:	461d      	mov	r5, r3
	return z_impl_k_mutex_lock(mutex, timeout);
 800d426:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d42a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d42e:	480e      	ldr	r0, [pc, #56]	; (800d468 <net_if_set_link_addr_locked+0x4c>)
 800d430:	f008 fa74 	bl	801591c <z_impl_k_mutex_lock>
	if (iface == NULL) {
 800d434:	b144      	cbz	r4, 800d448 <net_if_set_link_addr_locked+0x2c>
	return atomic_test_bit(iface->if_dev->flags, value);
 800d436:	6823      	ldr	r3, [r4, #0]
 800d438:	f3bf 8f5b 	dmb	ish
 800d43c:	68db      	ldr	r3, [r3, #12]
 800d43e:	f3bf 8f5b 	dmb	ish
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
 800d442:	f013 0f01 	tst.w	r3, #1
 800d446:	d10b      	bne.n	800d460 <net_if_set_link_addr_locked+0x44>
	return &iface->if_dev->link_addr;
 800d448:	6823      	ldr	r3, [r4, #0]
	net_if_get_link_addr(iface)->addr = addr;
 800d44a:	611f      	str	r7, [r3, #16]
	return &iface->if_dev->link_addr;
 800d44c:	6823      	ldr	r3, [r4, #0]
	net_if_get_link_addr(iface)->len = len;
 800d44e:	751e      	strb	r6, [r3, #20]
	return &iface->if_dev->link_addr;
 800d450:	6823      	ldr	r3, [r4, #0]
	net_if_get_link_addr(iface)->type = type;
 800d452:	755d      	strb	r5, [r3, #21]
	return 0;
 800d454:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
 800d456:	4804      	ldr	r0, [pc, #16]	; (800d468 <net_if_set_link_addr_locked+0x4c>)
 800d458:	f008 faea 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800d45c:	4620      	mov	r0, r4
 800d45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EPERM;
 800d460:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d464:	e7f7      	b.n	800d456 <net_if_set_link_addr_locked+0x3a>
 800d466:	bf00      	nop
 800d468:	20001094 	.word	0x20001094

0800d46c <net_if_lookup_by_dev>:
{
 800d46c:	4602      	mov	r2, r0
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800d46e:	4806      	ldr	r0, [pc, #24]	; (800d488 <net_if_lookup_by_dev+0x1c>)
 800d470:	4b06      	ldr	r3, [pc, #24]	; (800d48c <net_if_lookup_by_dev+0x20>)
 800d472:	4298      	cmp	r0, r3
 800d474:	d206      	bcs.n	800d484 <net_if_lookup_by_dev+0x18>
	return iface->if_dev->dev;
 800d476:	6803      	ldr	r3, [r0, #0]
 800d478:	681b      	ldr	r3, [r3, #0]
		if (net_if_get_device(iface) == dev) {
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d003      	beq.n	800d486 <net_if_lookup_by_dev+0x1a>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800d47e:	f500 7006 	add.w	r0, r0, #536	; 0x218
 800d482:	e7f5      	b.n	800d470 <net_if_lookup_by_dev+0x4>
	return NULL;
 800d484:	2000      	movs	r0, #0
}
 800d486:	4770      	bx	lr
 800d488:	200011c8 	.word	0x200011c8
 800d48c:	200013e0 	.word	0x200013e0

0800d490 <net_if_get_default>:
	if (_net_if_list_start == _net_if_list_end) {
 800d490:	4a03      	ldr	r2, [pc, #12]	; (800d4a0 <net_if_get_default+0x10>)
 800d492:	4b04      	ldr	r3, [pc, #16]	; (800d4a4 <net_if_get_default+0x14>)
 800d494:	429a      	cmp	r2, r3
 800d496:	d001      	beq.n	800d49c <net_if_get_default+0xc>
	return iface ? iface : _net_if_list_start;
 800d498:	4610      	mov	r0, r2
 800d49a:	4770      	bx	lr
		return NULL;
 800d49c:	2000      	movs	r0, #0
}
 800d49e:	4770      	bx	lr
 800d4a0:	200011c8 	.word	0x200011c8
 800d4a4:	200013e0 	.word	0x200013e0

0800d4a8 <net_if_mcast_monitor>:
{
 800d4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ac:	4606      	mov	r6, r0
 800d4ae:	460f      	mov	r7, r1
 800d4b0:	4690      	mov	r8, r2
	return z_impl_k_mutex_lock(mutex, timeout);
 800d4b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4ba:	4812      	ldr	r0, [pc, #72]	; (800d504 <net_if_mcast_monitor+0x5c>)
 800d4bc:	f008 fa2e 	bl	801591c <z_impl_k_mutex_lock>
	return list->head;
 800d4c0:	4b11      	ldr	r3, [pc, #68]	; (800d508 <net_if_mcast_monitor+0x60>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
 800d4c4:	b14b      	cbz	r3, 800d4da <net_if_mcast_monitor+0x32>
 800d4c6:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 800d4c8:	b163      	cbz	r3, 800d4e4 <net_if_mcast_monitor+0x3c>
	return node->next;
 800d4ca:	681c      	ldr	r4, [r3, #0]
 800d4cc:	e00a      	b.n	800d4e4 <net_if_mcast_monitor+0x3c>
			mon->cb(iface, addr, is_joined);
 800d4ce:	689b      	ldr	r3, [r3, #8]
 800d4d0:	4642      	mov	r2, r8
 800d4d2:	4639      	mov	r1, r7
 800d4d4:	4630      	mov	r0, r6
 800d4d6:	4798      	blx	r3
 800d4d8:	e008      	b.n	800d4ec <net_if_mcast_monitor+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
 800d4da:	461c      	mov	r4, r3
 800d4dc:	e002      	b.n	800d4e4 <net_if_mcast_monitor+0x3c>
 800d4de:	4625      	mov	r5, r4
 800d4e0:	4623      	mov	r3, r4
 800d4e2:	462c      	mov	r4, r5
 800d4e4:	b14b      	cbz	r3, 800d4fa <net_if_mcast_monitor+0x52>
		if (iface == mon->iface) {
 800d4e6:	685d      	ldr	r5, [r3, #4]
 800d4e8:	42b5      	cmp	r5, r6
 800d4ea:	d0f0      	beq.n	800d4ce <net_if_mcast_monitor+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
 800d4ec:	2c00      	cmp	r4, #0
 800d4ee:	d0f6      	beq.n	800d4de <net_if_mcast_monitor+0x36>
 800d4f0:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800d4f2:	2c00      	cmp	r4, #0
 800d4f4:	d0f4      	beq.n	800d4e0 <net_if_mcast_monitor+0x38>
	return node->next;
 800d4f6:	6825      	ldr	r5, [r4, #0]
 800d4f8:	e7f2      	b.n	800d4e0 <net_if_mcast_monitor+0x38>
	return z_impl_k_mutex_unlock(mutex);
 800d4fa:	4802      	ldr	r0, [pc, #8]	; (800d504 <net_if_mcast_monitor+0x5c>)
 800d4fc:	f008 fa98 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800d500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d504:	20001094 	.word	0x20001094
 800d508:	20003348 	.word	0x20003348

0800d50c <net_if_config_ipv6_get>:
{
 800d50c:	b538      	push	{r3, r4, r5, lr}
 800d50e:	4604      	mov	r4, r0
 800d510:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800d512:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d51a:	481c      	ldr	r0, [pc, #112]	; (800d58c <net_if_config_ipv6_get+0x80>)
 800d51c:	f008 f9fe 	bl	801591c <z_impl_k_mutex_lock>
	if (iface == NULL) {
 800d520:	b19c      	cbz	r4, 800d54a <net_if_config_ipv6_get+0x3e>
	return atomic_test_bit(iface->if_dev->flags, value);
 800d522:	6823      	ldr	r3, [r4, #0]
 800d524:	f3bf 8f5b 	dmb	ish
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	f3bf 8f5b 	dmb	ish
	if (!net_if_flag_is_set(iface, NET_IF_IPV6)) {
 800d52e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d532:	d00a      	beq.n	800d54a <net_if_config_ipv6_get+0x3e>
	if (iface->config.ip.ipv6) {
 800d534:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800d538:	b30b      	cbz	r3, 800d57e <net_if_config_ipv6_get+0x72>
		if (ipv6) {
 800d53a:	b105      	cbz	r5, 800d53e <net_if_config_ipv6_get+0x32>
			*ipv6 = iface->config.ip.ipv6;
 800d53c:	602b      	str	r3, [r5, #0]
	int ret = 0;
 800d53e:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
 800d540:	4812      	ldr	r0, [pc, #72]	; (800d58c <net_if_config_ipv6_get+0x80>)
 800d542:	f008 fa75 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800d546:	4620      	mov	r0, r4
 800d548:	bd38      	pop	{r3, r4, r5, pc}
		ret = -ENOTSUP;
 800d54a:	f06f 0485 	mvn.w	r4, #133	; 0x85
		goto out;
 800d54e:	e7f7      	b.n	800d540 <net_if_config_ipv6_get+0x34>
		if (ipv6_addresses[i].iface) {
 800d550:	490f      	ldr	r1, [pc, #60]	; (800d590 <net_if_config_ipv6_get+0x84>)
 800d552:	f44f 728a 	mov.w	r2, #276	; 0x114
 800d556:	fb02 1203 	mla	r2, r2, r3, r1
 800d55a:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
 800d55e:	b10a      	cbz	r2, 800d564 <net_if_config_ipv6_get+0x58>
	for (i = 0; i < ARRAY_SIZE(ipv6_addresses); i++) {
 800d560:	3301      	adds	r3, #1
 800d562:	e00d      	b.n	800d580 <net_if_config_ipv6_get+0x74>
		iface->config.ip.ipv6 = &ipv6_addresses[i].ipv6;
 800d564:	4a0a      	ldr	r2, [pc, #40]	; (800d590 <net_if_config_ipv6_get+0x84>)
 800d566:	f44f 718a 	mov.w	r1, #276	; 0x114
 800d56a:	fb01 2303 	mla	r3, r1, r3, r2
 800d56e:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
		ipv6_addresses[i].iface = iface;
 800d572:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
		if (ipv6) {
 800d576:	b105      	cbz	r5, 800d57a <net_if_config_ipv6_get+0x6e>
			*ipv6 = &ipv6_addresses[i].ipv6;
 800d578:	602b      	str	r3, [r5, #0]
	int ret = 0;
 800d57a:	2400      	movs	r4, #0
		goto out;
 800d57c:	e7e0      	b.n	800d540 <net_if_config_ipv6_get+0x34>
	for (i = 0; i < ARRAY_SIZE(ipv6_addresses); i++) {
 800d57e:	2300      	movs	r3, #0
 800d580:	2b00      	cmp	r3, #0
 800d582:	dde5      	ble.n	800d550 <net_if_config_ipv6_get+0x44>
	ret = -ESRCH;
 800d584:	f06f 0402 	mvn.w	r4, #2
 800d588:	e7da      	b.n	800d540 <net_if_config_ipv6_get+0x34>
 800d58a:	bf00      	nop
 800d58c:	20001094 	.word	0x20001094
 800d590:	2000322c 	.word	0x2000322c

0800d594 <net_if_start_rs>:
{
 800d594:	b538      	push	{r3, r4, r5, lr}
 800d596:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800d598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d59c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5a0:	4818      	ldr	r0, [pc, #96]	; (800d604 <net_if_start_rs+0x70>)
 800d5a2:	f008 f9bb 	bl	801591c <z_impl_k_mutex_lock>
	ipv6 = iface->config.ip.ipv6;
 800d5a6:	f8d4 5210 	ldr.w	r5, [r4, #528]	; 0x210
	if (!ipv6) {
 800d5aa:	b11d      	cbz	r5, 800d5b4 <net_if_start_rs+0x20>
	if (!net_ipv6_start_rs(iface)) {
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	f00d febe 	bl	801b32e <net_ipv6_start_rs>
 800d5b2:	b118      	cbz	r0, 800d5bc <net_if_start_rs+0x28>
	return z_impl_k_mutex_unlock(mutex);
 800d5b4:	4813      	ldr	r0, [pc, #76]	; (800d604 <net_if_start_rs+0x70>)
 800d5b6:	f008 fa3b 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800d5ba:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_ticks();
 800d5bc:	f00f f824 	bl	801c608 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 800d5c0:	220a      	movs	r2, #10
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	f7f3 faba 	bl	8000b3c <__aeabi_uldivmod>
		ipv6->rs_start = k_uptime_get_32();
 800d5c8:	f8c5 0108 	str.w	r0, [r5, #264]	; 0x108
		sys_slist_append(&active_rs_timers, &ipv6->rs_node);
 800d5cc:	f505 7382 	add.w	r3, r5, #260	; 0x104
	parent->next = child;
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
	return list->tail;
 800d5d6:	4a0c      	ldr	r2, [pc, #48]	; (800d608 <net_if_start_rs+0x74>)
 800d5d8:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_APPEND(slist, snode)
 800d5da:	b17a      	cbz	r2, 800d5fc <net_if_start_rs+0x68>
	parent->next = child;
 800d5dc:	6013      	str	r3, [r2, #0]
	list->tail = node;
 800d5de:	4a0a      	ldr	r2, [pc, #40]	; (800d608 <net_if_start_rs+0x74>)
 800d5e0:	6053      	str	r3, [r2, #4]
	return z_timeout_remaining(&dwork->timeout);
 800d5e2:	480a      	ldr	r0, [pc, #40]	; (800d60c <net_if_start_rs+0x78>)
 800d5e4:	f00e ffc9 	bl	801c57a <z_timeout_remaining>
		if (!k_work_delayable_remaining_get(&rs_timer)) {
 800d5e8:	ea50 0301 	orrs.w	r3, r0, r1
 800d5ec:	d1e2      	bne.n	800d5b4 <net_if_start_rs+0x20>
			k_work_reschedule(&rs_timer, K_MSEC(RS_TIMEOUT));
 800d5ee:	f242 7210 	movw	r2, #10000	; 0x2710
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	4806      	ldr	r0, [pc, #24]	; (800d610 <net_if_start_rs+0x7c>)
 800d5f6:	f008 fc8d 	bl	8015f14 <k_work_reschedule>
 800d5fa:	e7db      	b.n	800d5b4 <net_if_start_rs+0x20>
 800d5fc:	4a02      	ldr	r2, [pc, #8]	; (800d608 <net_if_start_rs+0x74>)
 800d5fe:	6053      	str	r3, [r2, #4]
	list->head = node;
 800d600:	6013      	str	r3, [r2, #0]
}
 800d602:	e7ee      	b.n	800d5e2 <net_if_start_rs+0x4e>
 800d604:	20001094 	.word	0x20001094
 800d608:	200031cc 	.word	0x200031cc
 800d60c:	20001d38 	.word	0x20001d38
 800d610:	20001d28 	.word	0x20001d28

0800d614 <rs_timeout>:
{
 800d614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d616:	f00e fff7 	bl	801c608 <z_impl_k_uptime_ticks>
 800d61a:	220a      	movs	r2, #10
 800d61c:	2300      	movs	r3, #0
 800d61e:	f7f3 fa8d 	bl	8000b3c <__aeabi_uldivmod>
 800d622:	4607      	mov	r7, r0
	return (uint32_t)k_uptime_get();
 800d624:	4606      	mov	r6, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800d626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d62a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d62e:	483b      	ldr	r0, [pc, #236]	; (800d71c <rs_timeout+0x108>)
 800d630:	f008 f974 	bl	801591c <z_impl_k_mutex_lock>
	return list->head;
 800d634:	4b3a      	ldr	r3, [pc, #232]	; (800d720 <rs_timeout+0x10c>)
 800d636:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_rs_timers,
 800d638:	2a00      	cmp	r2, #0
 800d63a:	d046      	beq.n	800d6ca <rs_timeout+0xb6>
 800d63c:	f5b2 7282 	subs.w	r2, r2, #260	; 0x104
 800d640:	d047      	beq.n	800d6d2 <rs_timeout+0xbe>
Z_GENLIST_PEEK_NEXT(slist, snode)
 800d642:	f512 7582 	adds.w	r5, r2, #260	; 0x104
 800d646:	d041      	beq.n	800d6cc <rs_timeout+0xb8>
	return node->next;
 800d648:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
 800d64c:	2d00      	cmp	r5, #0
 800d64e:	d03d      	beq.n	800d6cc <rs_timeout+0xb8>
 800d650:	f5a5 7582 	sub.w	r5, r5, #260	; 0x104
 800d654:	e03a      	b.n	800d6cc <rs_timeout+0xb8>
	list->tail = node;
 800d656:	4b32      	ldr	r3, [pc, #200]	; (800d720 <rs_timeout+0x10c>)
 800d658:	6058      	str	r0, [r3, #4]
}
 800d65a:	e01f      	b.n	800d69c <rs_timeout+0x88>
		struct net_if *iface = NULL;
 800d65c:	2000      	movs	r0, #0
		if (iface) {
 800d65e:	b108      	cbz	r0, 800d664 <rs_timeout+0x50>
			if (ipv6->rs_count < RS_COUNT) {
 800d660:	2902      	cmp	r1, #2
 800d662:	d92f      	bls.n	800d6c4 <rs_timeout+0xb0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_rs_timers,
 800d664:	b3bd      	cbz	r5, 800d6d6 <rs_timeout+0xc2>
Z_GENLIST_PEEK_NEXT(slist, snode)
 800d666:	f515 7382 	adds.w	r3, r5, #260	; 0x104
 800d66a:	d004      	beq.n	800d676 <rs_timeout+0x62>
	return node->next;
 800d66c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
 800d670:	b10b      	cbz	r3, 800d676 <rs_timeout+0x62>
 800d672:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d676:	462a      	mov	r2, r5
 800d678:	461d      	mov	r5, r3
 800d67a:	b372      	cbz	r2, 800d6da <rs_timeout+0xc6>
		delay = (int32_t)(ipv6->rs_start + RS_TIMEOUT - current_time);
 800d67c:	f8d2 4108 	ldr.w	r4, [r2, #264]	; 0x108
 800d680:	1ba4      	subs	r4, r4, r6
 800d682:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
		if (delay > 0) {
 800d686:	2c00      	cmp	r4, #0
 800d688:	dc27      	bgt.n	800d6da <rs_timeout+0xc6>
		sys_slist_remove(&active_rs_timers, NULL, &ipv6->rs_node);
 800d68a:	f502 7382 	add.w	r3, r2, #260	; 0x104
 800d68e:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
	list->head = node;
 800d692:	4923      	ldr	r1, [pc, #140]	; (800d720 <rs_timeout+0x10c>)
 800d694:	6008      	str	r0, [r1, #0]
	return list->tail;
 800d696:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
 800d698:	428b      	cmp	r3, r1
 800d69a:	d0dc      	beq.n	800d656 <rs_timeout+0x42>
	parent->next = child;
 800d69c:	2300      	movs	r3, #0
 800d69e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		ipv6->rs_count++;
 800d6a2:	f892 110c 	ldrb.w	r1, [r2, #268]	; 0x10c
 800d6a6:	3101      	adds	r1, #1
 800d6a8:	b2c9      	uxtb	r1, r1
 800d6aa:	f882 110c 	strb.w	r1, [r2, #268]	; 0x10c
		STRUCT_SECTION_FOREACH(net_if, tmp) {
 800d6ae:	481d      	ldr	r0, [pc, #116]	; (800d724 <rs_timeout+0x110>)
 800d6b0:	4b1d      	ldr	r3, [pc, #116]	; (800d728 <rs_timeout+0x114>)
 800d6b2:	4298      	cmp	r0, r3
 800d6b4:	d2d2      	bcs.n	800d65c <rs_timeout+0x48>
			if (tmp->config.ip.ipv6 == ipv6) {
 800d6b6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d0cf      	beq.n	800d65e <rs_timeout+0x4a>
		STRUCT_SECTION_FOREACH(net_if, tmp) {
 800d6be:	f500 7006 	add.w	r0, r0, #536	; 0x218
 800d6c2:	e7f5      	b.n	800d6b0 <rs_timeout+0x9c>
				net_if_start_rs(iface);
 800d6c4:	f7ff ff66 	bl	800d594 <net_if_start_rs>
 800d6c8:	e7cc      	b.n	800d664 <rs_timeout+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_rs_timers,
 800d6ca:	4615      	mov	r5, r2
 800d6cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d6d0:	e7d3      	b.n	800d67a <rs_timeout+0x66>
 800d6d2:	4615      	mov	r5, r2
 800d6d4:	e7fa      	b.n	800d6cc <rs_timeout+0xb8>
 800d6d6:	462b      	mov	r3, r5
 800d6d8:	e7cd      	b.n	800d676 <rs_timeout+0x62>
	if ((ipv6 != NULL) && (delay > 0)) {
 800d6da:	b1ba      	cbz	r2, 800d70c <rs_timeout+0xf8>
 800d6dc:	2c00      	cmp	r4, #0
 800d6de:	dd15      	ble.n	800d70c <rs_timeout+0xf8>
		k_work_reschedule(&rs_timer, K_MSEC(ipv6->rs_start +
 800d6e0:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 800d6e4:	1bdf      	subs	r7, r3, r7
 800d6e6:	f517 7f7a 	cmn.w	r7, #1000	; 0x3e8
 800d6ea:	d013      	beq.n	800d714 <rs_timeout+0x100>
 800d6ec:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 800d6f0:	4613      	mov	r3, r2
 800d6f2:	2000      	movs	r0, #0
			return t * ((uint64_t)to_hz / from_hz);
 800d6f4:	0084      	lsls	r4, r0, #2
 800d6f6:	009a      	lsls	r2, r3, #2
 800d6f8:	ea44 7193 	orr.w	r1, r4, r3, lsr #30
 800d6fc:	18d2      	adds	r2, r2, r3
 800d6fe:	eb41 0300 	adc.w	r3, r1, r0
 800d702:	1892      	adds	r2, r2, r2
 800d704:	415b      	adcs	r3, r3
 800d706:	4809      	ldr	r0, [pc, #36]	; (800d72c <rs_timeout+0x118>)
 800d708:	f008 fc04 	bl	8015f14 <k_work_reschedule>
	return z_impl_k_mutex_unlock(mutex);
 800d70c:	4803      	ldr	r0, [pc, #12]	; (800d71c <rs_timeout+0x108>)
 800d70e:	f008 f98f 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800d712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_work_reschedule(&rs_timer, K_MSEC(ipv6->rs_start +
 800d714:	2300      	movs	r3, #0
 800d716:	4618      	mov	r0, r3
 800d718:	e7ec      	b.n	800d6f4 <rs_timeout+0xe0>
 800d71a:	bf00      	nop
 800d71c:	20001094 	.word	0x20001094
 800d720:	200031cc 	.word	0x200031cc
 800d724:	200011c8 	.word	0x200011c8
 800d728:	200013e0 	.word	0x200013e0
 800d72c:	20001d28 	.word	0x20001d28

0800d730 <net_if_stop_rs>:
{
 800d730:	b510      	push	{r4, lr}
 800d732:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800d734:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d738:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d73c:	4816      	ldr	r0, [pc, #88]	; (800d798 <net_if_stop_rs+0x68>)
 800d73e:	f008 f8ed 	bl	801591c <z_impl_k_mutex_lock>
	ipv6 = iface->config.ip.ipv6;
 800d742:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
	if (!ipv6) {
 800d746:	b1a8      	cbz	r0, 800d774 <net_if_stop_rs+0x44>
	sys_slist_find_and_remove(&active_rs_timers, &ipv6->rs_node);
 800d748:	f500 7282 	add.w	r2, r0, #260	; 0x104
	return list->head;
 800d74c:	4b13      	ldr	r3, [pc, #76]	; (800d79c <net_if_stop_rs+0x6c>)
 800d74e:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800d750:	2100      	movs	r1, #0
 800d752:	b17b      	cbz	r3, 800d774 <net_if_stop_rs+0x44>
 800d754:	4293      	cmp	r3, r2
 800d756:	d002      	beq.n	800d75e <net_if_stop_rs+0x2e>
 800d758:	4619      	mov	r1, r3
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	e7f9      	b.n	800d752 <net_if_stop_rs+0x22>
Z_GENLIST_REMOVE(slist, snode)
 800d75e:	b169      	cbz	r1, 800d77c <net_if_stop_rs+0x4c>
	return node->next;
 800d760:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
	parent->next = child;
 800d764:	600b      	str	r3, [r1, #0]
	return list->tail;
 800d766:	4b0d      	ldr	r3, [pc, #52]	; (800d79c <net_if_stop_rs+0x6c>)
 800d768:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d010      	beq.n	800d790 <net_if_stop_rs+0x60>
	parent->next = child;
 800d76e:	2300      	movs	r3, #0
 800d770:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
	return z_impl_k_mutex_unlock(mutex);
 800d774:	4808      	ldr	r0, [pc, #32]	; (800d798 <net_if_stop_rs+0x68>)
 800d776:	f008 f95b 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800d77a:	bd10      	pop	{r4, pc}
	return node->next;
 800d77c:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
	list->head = node;
 800d780:	4b06      	ldr	r3, [pc, #24]	; (800d79c <net_if_stop_rs+0x6c>)
 800d782:	6019      	str	r1, [r3, #0]
	return list->tail;
 800d784:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800d786:	4293      	cmp	r3, r2
 800d788:	d1f1      	bne.n	800d76e <net_if_stop_rs+0x3e>
	list->tail = node;
 800d78a:	4b04      	ldr	r3, [pc, #16]	; (800d79c <net_if_stop_rs+0x6c>)
 800d78c:	6059      	str	r1, [r3, #4]
}
 800d78e:	e7ee      	b.n	800d76e <net_if_stop_rs+0x3e>
	list->tail = node;
 800d790:	4b02      	ldr	r3, [pc, #8]	; (800d79c <net_if_stop_rs+0x6c>)
 800d792:	6059      	str	r1, [r3, #4]
}
 800d794:	e7eb      	b.n	800d76e <net_if_stop_rs+0x3e>
 800d796:	bf00      	nop
 800d798:	20001094 	.word	0x20001094
 800d79c:	200031cc 	.word	0x200031cc

0800d7a0 <net_if_ipv6_addr_lookup>:
{
 800d7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7a4:	4607      	mov	r7, r0
 800d7a6:	4688      	mov	r8, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800d7a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7b0:	4822      	ldr	r0, [pc, #136]	; (800d83c <net_if_ipv6_addr_lookup+0x9c>)
 800d7b2:	f008 f8b3 	bl	801591c <z_impl_k_mutex_lock>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800d7b6:	4e22      	ldr	r6, [pc, #136]	; (800d840 <net_if_ipv6_addr_lookup+0xa0>)
 800d7b8:	e030      	b.n	800d81c <net_if_ipv6_addr_lookup+0x7c>
			if (net_ipv6_is_prefix(
 800d7ba:	f1b9 0f00 	cmp.w	r9, #0
 800d7be:	d121      	bne.n	800d804 <net_if_ipv6_addr_lookup+0x64>
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800d7c0:	3401      	adds	r4, #1
 800d7c2:	2c01      	cmp	r4, #1
 800d7c4:	dc28      	bgt.n	800d818 <net_if_ipv6_addr_lookup+0x78>
			if (!ipv6->unicast[i].is_used ||
 800d7c6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d7ca:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800d7ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d7d2:	f3c3 0940 	ubfx	r9, r3, #1, #1
 800d7d6:	f013 0f02 	tst.w	r3, #2
 800d7da:	d0f1      	beq.n	800d7c0 <net_if_ipv6_addr_lookup+0x20>
			    ipv6->unicast[i].address.family != AF_INET6) {
 800d7dc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d7e0:	011b      	lsls	r3, r3, #4
 800d7e2:	5aeb      	ldrh	r3, [r5, r3]
			if (!ipv6->unicast[i].is_used ||
 800d7e4:	2b02      	cmp	r3, #2
 800d7e6:	d1eb      	bne.n	800d7c0 <net_if_ipv6_addr_lookup+0x20>
				    ipv6->unicast[i].address.in6_addr.s6_addr,
 800d7e8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800d7ec:	eb05 1101 	add.w	r1, r5, r1, lsl #4
	if (memcmp(addr1, addr2, bytes)) {
 800d7f0:	2210      	movs	r2, #16
 800d7f2:	3104      	adds	r1, #4
 800d7f4:	4638      	mov	r0, r7
 800d7f6:	f00f f811 	bl	801c81c <memcmp>
 800d7fa:	2800      	cmp	r0, #0
 800d7fc:	d0dd      	beq.n	800d7ba <net_if_ipv6_addr_lookup+0x1a>
		return false;
 800d7fe:	f04f 0900 	mov.w	r9, #0
 800d802:	e7da      	b.n	800d7ba <net_if_ipv6_addr_lookup+0x1a>
				if (ret) {
 800d804:	f1b8 0f00 	cmp.w	r8, #0
 800d808:	d001      	beq.n	800d80e <net_if_ipv6_addr_lookup+0x6e>
					*ret = iface;
 800d80a:	f8c8 6000 	str.w	r6, [r8]
				ifaddr = &ipv6->unicast[i];
 800d80e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800d812:	eb05 1404 	add.w	r4, r5, r4, lsl #4
				goto out;
 800d816:	e00b      	b.n	800d830 <net_if_ipv6_addr_lookup+0x90>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800d818:	f506 7606 	add.w	r6, r6, #536	; 0x218
 800d81c:	4b09      	ldr	r3, [pc, #36]	; (800d844 <net_if_ipv6_addr_lookup+0xa4>)
 800d81e:	429e      	cmp	r6, r3
 800d820:	d205      	bcs.n	800d82e <net_if_ipv6_addr_lookup+0x8e>
		struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 800d822:	f8d6 5210 	ldr.w	r5, [r6, #528]	; 0x210
		if (!ipv6) {
 800d826:	2d00      	cmp	r5, #0
 800d828:	d0f6      	beq.n	800d818 <net_if_ipv6_addr_lookup+0x78>
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800d82a:	2400      	movs	r4, #0
 800d82c:	e7c9      	b.n	800d7c2 <net_if_ipv6_addr_lookup+0x22>
	struct net_if_addr *ifaddr = NULL;
 800d82e:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
 800d830:	4802      	ldr	r0, [pc, #8]	; (800d83c <net_if_ipv6_addr_lookup+0x9c>)
 800d832:	f008 f8fd 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800d836:	4620      	mov	r0, r4
 800d838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d83c:	20001094 	.word	0x20001094
 800d840:	200011c8 	.word	0x200011c8
 800d844:	200013e0 	.word	0x200013e0

0800d848 <dad_timeout>:
{
 800d848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d84c:	b082      	sub	sp, #8
	return z_impl_k_uptime_ticks();
 800d84e:	f00e fedb 	bl	801c608 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 800d852:	220a      	movs	r2, #10
 800d854:	2300      	movs	r3, #0
 800d856:	f7f3 f971 	bl	8000b3c <__aeabi_uldivmod>
 800d85a:	4607      	mov	r7, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800d85c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d864:	4831      	ldr	r0, [pc, #196]	; (800d92c <dad_timeout+0xe4>)
 800d866:	f008 f859 	bl	801591c <z_impl_k_mutex_lock>
	return list->head;
 800d86a:	4b31      	ldr	r3, [pc, #196]	; (800d930 <dad_timeout+0xe8>)
 800d86c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
 800d86e:	2c00      	cmp	r4, #0
 800d870:	d040      	beq.n	800d8f4 <dad_timeout+0xac>
 800d872:	3c24      	subs	r4, #36	; 0x24
 800d874:	d042      	beq.n	800d8fc <dad_timeout+0xb4>
Z_GENLIST_PEEK_NEXT(slist, snode)
 800d876:	f114 0624 	adds.w	r6, r4, #36	; 0x24
 800d87a:	d03c      	beq.n	800d8f6 <dad_timeout+0xae>
	return node->next;
 800d87c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d87e:	2e00      	cmp	r6, #0
 800d880:	d039      	beq.n	800d8f6 <dad_timeout+0xae>
 800d882:	3e24      	subs	r6, #36	; 0x24
 800d884:	e037      	b.n	800d8f6 <dad_timeout+0xae>
	list->tail = node;
 800d886:	4b2a      	ldr	r3, [pc, #168]	; (800d930 <dad_timeout+0xe8>)
 800d888:	6059      	str	r1, [r3, #4]
}
 800d88a:	e01b      	b.n	800d8c4 <dad_timeout+0x7c>
			net_mgmt_event_notify_with_info(
 800d88c:	2310      	movs	r3, #16
 800d88e:	4642      	mov	r2, r8
 800d890:	9901      	ldr	r1, [sp, #4]
 800d892:	4828      	ldr	r0, [pc, #160]	; (800d934 <dad_timeout+0xec>)
 800d894:	f001 ffb0 	bl	800f7f8 <net_mgmt_event_notify_with_info>
			net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
 800d898:	4641      	mov	r1, r8
 800d89a:	9801      	ldr	r0, [sp, #4]
 800d89c:	f003 fd8e 	bl	80113bc <net_ipv6_nbr_rm>
 800d8a0:	e01e      	b.n	800d8e0 <dad_timeout+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
 800d8a2:	4633      	mov	r3, r6
 800d8a4:	4634      	mov	r4, r6
 800d8a6:	461e      	mov	r6, r3
 800d8a8:	b354      	cbz	r4, 800d900 <dad_timeout+0xb8>
		delay = (int32_t)(ifaddr->dad_start +
 800d8aa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
				  DAD_TIMEOUT - current_time);
 800d8ac:	1bed      	subs	r5, r5, r7
 800d8ae:	3564      	adds	r5, #100	; 0x64
		if (delay > 0) {
 800d8b0:	2d00      	cmp	r5, #0
 800d8b2:	dc25      	bgt.n	800d900 <dad_timeout+0xb8>
		sys_slist_remove(&active_dad_timers, NULL, &ifaddr->dad_node);
 800d8b4:	f104 0324 	add.w	r3, r4, #36	; 0x24
	return node->next;
 800d8b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
	list->head = node;
 800d8ba:	4a1d      	ldr	r2, [pc, #116]	; (800d930 <dad_timeout+0xe8>)
 800d8bc:	6011      	str	r1, [r2, #0]
	return list->tail;
 800d8be:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_REMOVE(slist, snode)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d0e0      	beq.n	800d886 <dad_timeout+0x3e>
	parent->next = child;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	6263      	str	r3, [r4, #36]	; 0x24
		ifaddr->addr_state = NET_ADDR_PREFERRED;
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		iface = NULL;
 800d8ce:	9301      	str	r3, [sp, #4]
		tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr,
 800d8d0:	f104 0804 	add.w	r8, r4, #4
 800d8d4:	a901      	add	r1, sp, #4
 800d8d6:	4640      	mov	r0, r8
 800d8d8:	f7ff ff62 	bl	800d7a0 <net_if_ipv6_addr_lookup>
		if (tmp == ifaddr) {
 800d8dc:	4284      	cmp	r4, r0
 800d8de:	d0d5      	beq.n	800d88c <dad_timeout+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_dad_timers,
 800d8e0:	2e00      	cmp	r6, #0
 800d8e2:	d0de      	beq.n	800d8a2 <dad_timeout+0x5a>
Z_GENLIST_PEEK_NEXT(slist, snode)
 800d8e4:	f116 0324 	adds.w	r3, r6, #36	; 0x24
 800d8e8:	d0dc      	beq.n	800d8a4 <dad_timeout+0x5c>
	return node->next;
 800d8ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d0d9      	beq.n	800d8a4 <dad_timeout+0x5c>
 800d8f0:	3b24      	subs	r3, #36	; 0x24
 800d8f2:	e7d7      	b.n	800d8a4 <dad_timeout+0x5c>
 800d8f4:	4626      	mov	r6, r4
 800d8f6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d8fa:	e7d5      	b.n	800d8a8 <dad_timeout+0x60>
 800d8fc:	4626      	mov	r6, r4
 800d8fe:	e7fa      	b.n	800d8f6 <dad_timeout+0xae>
	if ((ifaddr != NULL) && (delay > 0)) {
 800d900:	b10c      	cbz	r4, 800d906 <dad_timeout+0xbe>
 800d902:	2d00      	cmp	r5, #0
 800d904:	dc05      	bgt.n	800d912 <dad_timeout+0xca>
	return z_impl_k_mutex_unlock(mutex);
 800d906:	4809      	ldr	r0, [pc, #36]	; (800d92c <dad_timeout+0xe4>)
 800d908:	f008 f892 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800d90c:	b002      	add	sp, #8
 800d90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return t * ((uint64_t)to_hz / from_hz);
 800d912:	00a8      	lsls	r0, r5, #2
 800d914:	0fa9      	lsrs	r1, r5, #30
 800d916:	1940      	adds	r0, r0, r5
 800d918:	f141 0100 	adc.w	r1, r1, #0
		k_work_reschedule(&dad_timer, K_MSEC((uint32_t)delay));
 800d91c:	1802      	adds	r2, r0, r0
 800d91e:	eb41 0301 	adc.w	r3, r1, r1
 800d922:	4805      	ldr	r0, [pc, #20]	; (800d938 <dad_timeout+0xf0>)
 800d924:	f008 faf6 	bl	8015f14 <k_work_reschedule>
 800d928:	e7ed      	b.n	800d906 <dad_timeout+0xbe>
 800d92a:	bf00      	nop
 800d92c:	20001094 	.word	0x20001094
 800d930:	200031b4 	.word	0x200031b4
 800d934:	e060000d 	.word	0xe060000d
 800d938:	20001c98 	.word	0x20001c98

0800d93c <net_if_ipv6_addr_lookup_by_iface>:
{
 800d93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d93e:	4604      	mov	r4, r0
 800d940:	460e      	mov	r6, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800d942:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d94a:	481a      	ldr	r0, [pc, #104]	; (800d9b4 <net_if_ipv6_addr_lookup_by_iface+0x78>)
 800d94c:	f007 ffe6 	bl	801591c <z_impl_k_mutex_lock>
	ipv6 = iface->config.ip.ipv6;
 800d950:	f8d4 5210 	ldr.w	r5, [r4, #528]	; 0x210
	if (!ipv6) {
 800d954:	b34d      	cbz	r5, 800d9aa <net_if_ipv6_addr_lookup_by_iface+0x6e>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800d956:	2400      	movs	r4, #0
 800d958:	e001      	b.n	800d95e <net_if_ipv6_addr_lookup_by_iface+0x22>
		if (net_ipv6_is_prefix(
 800d95a:	bb07      	cbnz	r7, 800d99e <net_if_ipv6_addr_lookup_by_iface+0x62>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800d95c:	3401      	adds	r4, #1
 800d95e:	2c01      	cmp	r4, #1
 800d960:	dc22      	bgt.n	800d9a8 <net_if_ipv6_addr_lookup_by_iface+0x6c>
		if (!ipv6->unicast[i].is_used ||
 800d962:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d966:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800d96a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d96e:	f3c3 0740 	ubfx	r7, r3, #1, #1
 800d972:	f013 0f02 	tst.w	r3, #2
 800d976:	d0f1      	beq.n	800d95c <net_if_ipv6_addr_lookup_by_iface+0x20>
		    ipv6->unicast[i].address.family != AF_INET6) {
 800d978:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d97c:	011b      	lsls	r3, r3, #4
 800d97e:	5aeb      	ldrh	r3, [r5, r3]
		if (!ipv6->unicast[i].is_used ||
 800d980:	2b02      	cmp	r3, #2
 800d982:	d1eb      	bne.n	800d95c <net_if_ipv6_addr_lookup_by_iface+0x20>
			    ipv6->unicast[i].address.in6_addr.s6_addr,
 800d984:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800d988:	eb05 1101 	add.w	r1, r5, r1, lsl #4
	if (memcmp(addr1, addr2, bytes)) {
 800d98c:	2210      	movs	r2, #16
 800d98e:	3104      	adds	r1, #4
 800d990:	4630      	mov	r0, r6
 800d992:	f00e ff43 	bl	801c81c <memcmp>
 800d996:	2800      	cmp	r0, #0
 800d998:	d0df      	beq.n	800d95a <net_if_ipv6_addr_lookup_by_iface+0x1e>
		return false;
 800d99a:	2700      	movs	r7, #0
 800d99c:	e7dd      	b.n	800d95a <net_if_ipv6_addr_lookup_by_iface+0x1e>
			ifaddr = &ipv6->unicast[i];
 800d99e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800d9a2:	eb05 1504 	add.w	r5, r5, r4, lsl #4
			goto out;
 800d9a6:	e000      	b.n	800d9aa <net_if_ipv6_addr_lookup_by_iface+0x6e>
	struct net_if_addr *ifaddr = NULL;
 800d9a8:	2500      	movs	r5, #0
	return z_impl_k_mutex_unlock(mutex);
 800d9aa:	4802      	ldr	r0, [pc, #8]	; (800d9b4 <net_if_ipv6_addr_lookup_by_iface+0x78>)
 800d9ac:	f008 f840 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800d9b0:	4628      	mov	r0, r5
 800d9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9b4:	20001094 	.word	0x20001094

0800d9b8 <net_if_ipv6_addr_update_lifetime>:
{
 800d9b8:	b570      	push	{r4, r5, r6, lr}
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800d9be:	4e09      	ldr	r6, [pc, #36]	; (800d9e4 <net_if_ipv6_addr_update_lifetime+0x2c>)
 800d9c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d9c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	f007 ffa7 	bl	801591c <z_impl_k_mutex_lock>
	ifaddr->addr_state = NET_ADDR_PREFERRED;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	address_start_timer(ifaddr, vlifetime);
 800d9d4:	4629      	mov	r1, r5
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	f7ff f97c 	bl	800ccd4 <address_start_timer>
	return z_impl_k_mutex_unlock(mutex);
 800d9dc:	4630      	mov	r0, r6
 800d9de:	f008 f827 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800d9e2:	bd70      	pop	{r4, r5, r6, pc}
 800d9e4:	20001094 	.word	0x20001094

0800d9e8 <net_if_ipv6_addr_add>:
{
 800d9e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9ec:	b087      	sub	sp, #28
 800d9ee:	4604      	mov	r4, r0
 800d9f0:	460d      	mov	r5, r1
 800d9f2:	4690      	mov	r8, r2
 800d9f4:	4699      	mov	r9, r3
	return z_impl_k_mutex_lock(mutex, timeout);
 800d9f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d9fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9fe:	4855      	ldr	r0, [pc, #340]	; (800db54 <net_if_ipv6_addr_add+0x16c>)
 800da00:	f007 ff8c 	bl	801591c <z_impl_k_mutex_lock>
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
 800da04:	a901      	add	r1, sp, #4
 800da06:	4620      	mov	r0, r4
 800da08:	f7ff fd80 	bl	800d50c <net_if_config_ipv6_get>
 800da0c:	2800      	cmp	r0, #0
 800da0e:	f2c0 809e 	blt.w	800db4e <net_if_ipv6_addr_add+0x166>
	ifaddr = ipv6_addr_find(iface, addr);
 800da12:	4629      	mov	r1, r5
 800da14:	4620      	mov	r0, r4
 800da16:	f00b fe65 	bl	80196e4 <ipv6_addr_find>
	if (ifaddr) {
 800da1a:	4607      	mov	r7, r0
 800da1c:	b130      	cbz	r0, 800da2c <net_if_ipv6_addr_add+0x44>
	return z_impl_k_mutex_unlock(mutex);
 800da1e:	484d      	ldr	r0, [pc, #308]	; (800db54 <net_if_ipv6_addr_add+0x16c>)
 800da20:	f008 f806 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800da24:	4638      	mov	r0, r7
 800da26:	b007      	add	sp, #28
 800da28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800da2c:	2600      	movs	r6, #0
 800da2e:	2e01      	cmp	r6, #1
 800da30:	dcf5      	bgt.n	800da1e <net_if_ipv6_addr_add+0x36>
		if (ipv6->unicast[i].is_used) {
 800da32:	9a01      	ldr	r2, [sp, #4]
 800da34:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800da38:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800da3c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800da40:	f013 0f02 	tst.w	r3, #2
 800da44:	d001      	beq.n	800da4a <net_if_ipv6_addr_add+0x62>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800da46:	3601      	adds	r6, #1
 800da48:	e7f1      	b.n	800da2e <net_if_ipv6_addr_add+0x46>
		net_if_addr_init(&ipv6->unicast[i], addr, addr_type,
 800da4a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 800da4e:	0139      	lsls	r1, r7, #4
 800da50:	eb02 1707 	add.w	r7, r2, r7, lsl #4
	ifaddr->is_used = true;
 800da54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da58:	f043 0302 	orr.w	r3, r3, #2
 800da5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	ifaddr->address.family = AF_INET6;
 800da60:	2302      	movs	r3, #2
 800da62:	5253      	strh	r3, [r2, r1]
	ifaddr->addr_type = addr_type;
 800da64:	f887 802c 	strb.w	r8, [r7, #44]	; 0x2c
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
 800da68:	f10d 0c08 	add.w	ip, sp, #8
 800da6c:	6828      	ldr	r0, [r5, #0]
 800da6e:	6869      	ldr	r1, [r5, #4]
 800da70:	68aa      	ldr	r2, [r5, #8]
 800da72:	68eb      	ldr	r3, [r5, #12]
 800da74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800da78:	f10d 0c08 	add.w	ip, sp, #8
 800da7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800da80:	6078      	str	r0, [r7, #4]
 800da82:	60b9      	str	r1, [r7, #8]
 800da84:	60fa      	str	r2, [r7, #12]
 800da86:	613b      	str	r3, [r7, #16]
	if (vlifetime) {
 800da88:	f1b9 0f00 	cmp.w	r9, #0
 800da8c:	d121      	bne.n	800dad2 <net_if_ipv6_addr_add+0xea>
		ifaddr->is_infinite = true;
 800da8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da92:	f043 0301 	orr.w	r3, r3, #1
 800da96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT) &&
 800da9a:	4620      	mov	r0, r4
 800da9c:	f00b fd88 	bl	80195b0 <l2_flags_get>
 800daa0:	f010 0f08 	tst.w	r0, #8
 800daa4:	d122      	bne.n	800daec <net_if_ipv6_addr_add+0x104>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 800daa6:	682b      	ldr	r3, [r5, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800daa8:	b9f3      	cbnz	r3, 800dae8 <net_if_ipv6_addr_add+0x100>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 800daaa:	686b      	ldr	r3, [r5, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 800daac:	bbbb      	cbnz	r3, 800db1e <net_if_ipv6_addr_add+0x136>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800daae:	68ab      	ldr	r3, [r5, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 800dab0:	bbbb      	cbnz	r3, 800db22 <net_if_ipv6_addr_add+0x13a>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
 800dab2:	68ea      	ldr	r2, [r5, #12]
 800dab4:	0a13      	lsrs	r3, r2, #8
 800dab6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800daba:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800dabe:	0211      	lsls	r1, r2, #8
 800dac0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800dac4:	430b      	orrs	r3, r1
 800dac6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d02b      	beq.n	800db26 <net_if_ipv6_addr_add+0x13e>
 800dace:	2300      	movs	r3, #0
 800dad0:	e00b      	b.n	800daea <net_if_ipv6_addr_add+0x102>
		ifaddr->is_infinite = false;
 800dad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dad6:	f36f 0300 	bfc	r3, #0, #1
 800dada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
 800dade:	4649      	mov	r1, r9
 800dae0:	4638      	mov	r0, r7
 800dae2:	f7ff ff69 	bl	800d9b8 <net_if_ipv6_addr_update_lifetime>
 800dae6:	e7d8      	b.n	800da9a <net_if_ipv6_addr_add+0xb2>
 800dae8:	2300      	movs	r3, #0
		if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT) &&
 800daea:	b1f3      	cbz	r3, 800db2a <net_if_ipv6_addr_add+0x142>
			ipv6->unicast[i].addr_state = NET_ADDR_PREFERRED;
 800daec:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 800daf0:	9b01      	ldr	r3, [sp, #4]
 800daf2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800daf6:	2201      	movs	r2, #1
 800daf8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			&ipv6->unicast[i].address.in6_addr,
 800dafc:	0077      	lsls	r7, r6, #1
 800dafe:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800db02:	9a01      	ldr	r2, [sp, #4]
 800db04:	eb02 1203 	add.w	r2, r2, r3, lsl #4
		net_mgmt_event_notify_with_info(
 800db08:	2310      	movs	r3, #16
 800db0a:	3204      	adds	r2, #4
 800db0c:	4621      	mov	r1, r4
 800db0e:	4812      	ldr	r0, [pc, #72]	; (800db58 <net_if_ipv6_addr_add+0x170>)
 800db10:	f001 fe72 	bl	800f7f8 <net_mgmt_event_notify_with_info>
		ifaddr = &ipv6->unicast[i];
 800db14:	4437      	add	r7, r6
 800db16:	9e01      	ldr	r6, [sp, #4]
 800db18:	eb06 1707 	add.w	r7, r6, r7, lsl #4
		goto out;
 800db1c:	e77f      	b.n	800da1e <net_if_ipv6_addr_add+0x36>
 800db1e:	2300      	movs	r3, #0
 800db20:	e7e3      	b.n	800daea <net_if_ipv6_addr_add+0x102>
 800db22:	2300      	movs	r3, #0
 800db24:	e7e1      	b.n	800daea <net_if_ipv6_addr_add+0x102>
 800db26:	2301      	movs	r3, #1
 800db28:	e7df      	b.n	800daea <net_if_ipv6_addr_add+0x102>
			join_mcast_nodes(iface,
 800db2a:	0075      	lsls	r5, r6, #1
 800db2c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800db30:	9901      	ldr	r1, [sp, #4]
 800db32:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800db36:	3104      	adds	r1, #4
 800db38:	4620      	mov	r0, r4
 800db3a:	f00b fe27 	bl	801978c <join_mcast_nodes>
			net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
 800db3e:	4435      	add	r5, r6
 800db40:	9901      	ldr	r1, [sp, #4]
 800db42:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 800db46:	4620      	mov	r0, r4
 800db48:	f7ff f866 	bl	800cc18 <net_if_ipv6_start_dad>
 800db4c:	e7d6      	b.n	800dafc <net_if_ipv6_addr_add+0x114>
	struct net_if_addr *ifaddr = NULL;
 800db4e:	2700      	movs	r7, #0
 800db50:	e765      	b.n	800da1e <net_if_ipv6_addr_add+0x36>
 800db52:	bf00      	nop
 800db54:	20001094 	.word	0x20001094
 800db58:	e0600001 	.word	0xe0600001

0800db5c <net_if_start_dad>:
{
 800db5c:	b570      	push	{r4, r5, r6, lr}
 800db5e:	b090      	sub	sp, #64	; 0x40
 800db60:	4605      	mov	r5, r0
	struct in6_addr addr = { };
 800db62:	2300      	movs	r3, #0
 800db64:	9305      	str	r3, [sp, #20]
 800db66:	9306      	str	r3, [sp, #24]
 800db68:	9307      	str	r3, [sp, #28]
 800db6a:	9308      	str	r3, [sp, #32]
	return z_impl_k_mutex_lock(mutex, timeout);
 800db6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800db74:	4870      	ldr	r0, [pc, #448]	; (800dd38 <net_if_start_dad+0x1dc>)
 800db76:	f007 fed1 	bl	801591c <z_impl_k_mutex_lock>
	ret = net_if_config_ipv6_get(iface, &ipv6);
 800db7a:	a909      	add	r1, sp, #36	; 0x24
 800db7c:	4628      	mov	r0, r5
 800db7e:	f7ff fcc5 	bl	800d50c <net_if_config_ipv6_get>
	if (ret < 0) {
 800db82:	2800      	cmp	r0, #0
 800db84:	db1b      	blt.n	800dbbe <net_if_start_dad+0x62>
	if (!ipv6) {
 800db86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db88:	b1e3      	cbz	r3, 800dbc4 <net_if_start_dad+0x68>
	return &iface->if_dev->link_addr;
 800db8a:	6829      	ldr	r1, [r5, #0]
 800db8c:	f101 0310 	add.w	r3, r1, #16
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	UNALIGNED_PUT(htonl(0xfe800000), &addr->s6_addr32[0]);
 800db90:	f248 02fe 	movw	r2, #33022	; 0x80fe
 800db94:	9205      	str	r2, [sp, #20]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
 800db96:	2200      	movs	r2, #0
 800db98:	9206      	str	r2, [sp, #24]

	switch (lladdr->len) {
 800db9a:	791a      	ldrb	r2, [r3, #4]
 800db9c:	2a06      	cmp	r2, #6
 800db9e:	d051      	beq.n	800dc44 <net_if_start_dad+0xe8>
 800dba0:	2a08      	cmp	r2, #8
 800dba2:	d06e      	beq.n	800dc82 <net_if_start_dad+0x126>
 800dba4:	2a02      	cmp	r2, #2
 800dba6:	d035      	beq.n	800dc14 <net_if_start_dad+0xb8>
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
 800dba8:	2300      	movs	r3, #0
 800dbaa:	2201      	movs	r2, #1
 800dbac:	a905      	add	r1, sp, #20
 800dbae:	4628      	mov	r0, r5
 800dbb0:	f7ff ff1a 	bl	800d9e8 <net_if_ipv6_addr_add>
	if (!ifaddr) {
 800dbb4:	4606      	mov	r6, r0
 800dbb6:	2800      	cmp	r0, #0
 800dbb8:	d06f      	beq.n	800dc9a <net_if_start_dad+0x13e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800dbba:	2400      	movs	r4, #0
 800dbbc:	e083      	b.n	800dcc6 <net_if_start_dad+0x16a>
		if (ret != -ENOTSUP) {
 800dbbe:	f110 0f86 	cmn.w	r0, #134	; 0x86
 800dbc2:	d104      	bne.n	800dbce <net_if_start_dad+0x72>
	return z_impl_k_mutex_unlock(mutex);
 800dbc4:	485c      	ldr	r0, [pc, #368]	; (800dd38 <net_if_start_dad+0x1dc>)
 800dbc6:	f007 ff33 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800dbca:	b010      	add	sp, #64	; 0x40
 800dbcc:	bd70      	pop	{r4, r5, r6, pc}
			NET_WARN("Cannot do DAD IPv6 config is not valid.");
 800dbce:	4b5b      	ldr	r3, [pc, #364]	; (800dd3c <net_if_start_dad+0x1e0>)
 800dbd0:	930e      	str	r3, [sp, #56]	; 0x38
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	f8ad 3011 	strh.w	r3, [sp, #17]
 800dbd8:	f88d 3013 	strb.w	r3, [sp, #19]
 800dbdc:	2102      	movs	r1, #2
 800dbde:	f88d 1010 	strb.w	r1, [sp, #16]
 800dbe2:	f88d 3012 	strb.w	r3, [sp, #18]
 800dbe6:	9a04      	ldr	r2, [sp, #16]
 800dbe8:	920d      	str	r2, [sp, #52]	; 0x34
 800dbea:	461a      	mov	r2, r3
 800dbec:	f363 0200 	bfi	r2, r3, #0, #1
 800dbf0:	f363 0241 	bfi	r2, r3, #1, #1
 800dbf4:	f363 0282 	bfi	r2, r3, #2, #1
 800dbf8:	f363 02c5 	bfi	r2, r3, #3, #3
 800dbfc:	f361 1288 	bfi	r2, r1, #6, #3
 800dc00:	2108      	movs	r1, #8
 800dc02:	f361 2252 	bfi	r2, r1, #9, #10
 800dc06:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800dc0a:	494d      	ldr	r1, [pc, #308]	; (800dd40 <net_if_start_dad+0x1e4>)
 800dc0c:	a80a      	add	r0, sp, #40	; 0x28
 800dc0e:	f00a f8a0 	bl	8017d52 <z_log_msg2_finalize>
		goto out;
 800dc12:	e7d7      	b.n	800dbc4 <net_if_start_dad+0x68>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154 ||
 800dc14:	795b      	ldrb	r3, [r3, #5]
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d001      	beq.n	800dc1e <net_if_start_dad+0xc2>
 800dc1a:	2b06      	cmp	r3, #6
 800dc1c:	d1c4      	bne.n	800dba8 <net_if_start_dad+0x4c>
		    lladdr->type == NET_LINK_CANBUS) {
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
 800dc1e:	2300      	movs	r3, #0
 800dc20:	9307      	str	r3, [sp, #28]
			addr->s6_addr[11] = 0xff;
 800dc22:	22ff      	movs	r2, #255	; 0xff
 800dc24:	f88d 201f 	strb.w	r2, [sp, #31]
			addr->s6_addr[12] = 0xfe;
 800dc28:	22fe      	movs	r2, #254	; 0xfe
 800dc2a:	f88d 2020 	strb.w	r2, [sp, #32]
			addr->s6_addr[13] = 0U;
 800dc2e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			addr->s6_addr[14] = lladdr->addr[0];
 800dc32:	690b      	ldr	r3, [r1, #16]
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			addr->s6_addr[15] = lladdr->addr[1];
 800dc3a:	690b      	ldr	r3, [r1, #16]
 800dc3c:	785b      	ldrb	r3, [r3, #1]
 800dc3e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800dc42:	e7b1      	b.n	800dba8 <net_if_start_dad+0x4c>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
 800dc44:	690a      	ldr	r2, [r1, #16]
 800dc46:	8810      	ldrh	r0, [r2, #0]
 800dc48:	7892      	ldrb	r2, [r2, #2]
 800dc4a:	f8ad 001c 	strh.w	r0, [sp, #28]
 800dc4e:	f88d 201e 	strb.w	r2, [sp, #30]
		addr->s6_addr[11] = 0xff;
 800dc52:	22ff      	movs	r2, #255	; 0xff
 800dc54:	f88d 201f 	strb.w	r2, [sp, #31]
		addr->s6_addr[12] = 0xfe;
 800dc58:	22fe      	movs	r2, #254	; 0xfe
 800dc5a:	f88d 2020 	strb.w	r2, [sp, #32]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
 800dc5e:	690a      	ldr	r2, [r1, #16]
 800dc60:	f832 1f03 	ldrh.w	r1, [r2, #3]!
 800dc64:	7892      	ldrb	r2, [r2, #2]
 800dc66:	f8ad 1021 	strh.w	r1, [sp, #33]	; 0x21
 800dc6a:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
		if (lladdr->type == NET_LINK_BLUETOOTH) {
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
 800dc6e:	795b      	ldrb	r3, [r3, #5]
 800dc70:	2b03      	cmp	r3, #3
 800dc72:	d199      	bne.n	800dba8 <net_if_start_dad+0x4c>
			addr->s6_addr[8] ^= 0x02;
 800dc74:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800dc78:	f083 0302 	eor.w	r3, r3, #2
 800dc7c:	f88d 301c 	strb.w	r3, [sp, #28]
 800dc80:	e792      	b.n	800dba8 <net_if_start_dad+0x4c>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
 800dc82:	2308      	movs	r3, #8
 800dc84:	6909      	ldr	r1, [r1, #16]
 800dc86:	a807      	add	r0, sp, #28
 800dc88:	f00e fde4 	bl	801c854 <__memcpy_chk>
		addr->s6_addr[8] ^= 0x02;
 800dc8c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800dc90:	f083 0302 	eor.w	r3, r3, #2
 800dc94:	f88d 301c 	strb.w	r3, [sp, #28]
		break;
 800dc98:	e786      	b.n	800dba8 <net_if_start_dad+0x4c>
		NET_ERR("Cannot add %s address to interface %p, DAD fails",
 800dc9a:	a905      	add	r1, sp, #20
 800dc9c:	2002      	movs	r0, #2
 800dc9e:	f001 fc61 	bl	800f564 <net_sprint_addr>
 800dca2:	9503      	str	r5, [sp, #12]
 800dca4:	9002      	str	r0, [sp, #8]
 800dca6:	4b27      	ldr	r3, [pc, #156]	; (800dd44 <net_if_start_dad+0x1e8>)
 800dca8:	9301      	str	r3, [sp, #4]
 800dcaa:	2000      	movs	r0, #0
 800dcac:	9000      	str	r0, [sp, #0]
 800dcae:	4603      	mov	r3, r0
 800dcb0:	2201      	movs	r2, #1
 800dcb2:	4923      	ldr	r1, [pc, #140]	; (800dd40 <net_if_start_dad+0x1e4>)
 800dcb4:	f00b fd09 	bl	80196ca <z_log_msg2_runtime_create>
 800dcb8:	e77f      	b.n	800dbba <net_if_start_dad+0x5e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800dcba:	2300      	movs	r3, #0
		    &ipv6->unicast[i] == ifaddr ||
 800dcbc:	b913      	cbnz	r3, 800dcc4 <net_if_start_dad+0x168>
		net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	f7fe ffaa 	bl	800cc18 <net_if_ipv6_start_dad>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800dcc4:	3401      	adds	r4, #1
 800dcc6:	2c01      	cmp	r4, #1
 800dcc8:	f73f af7c 	bgt.w	800dbc4 <net_if_start_dad+0x68>
		if (!ipv6->unicast[i].is_used ||
 800dccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcce:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800dcd2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800dcd6:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800dcda:	f012 0f02 	tst.w	r2, #2
 800dcde:	d0f1      	beq.n	800dcc4 <net_if_start_dad+0x168>
		    ipv6->unicast[i].address.family != AF_INET6 ||
 800dce0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800dce4:	0112      	lsls	r2, r2, #4
 800dce6:	5a9a      	ldrh	r2, [r3, r2]
		if (!ipv6->unicast[i].is_used ||
 800dce8:	2a02      	cmp	r2, #2
 800dcea:	d1eb      	bne.n	800dcc4 <net_if_start_dad+0x168>
		    &ipv6->unicast[i] == ifaddr ||
 800dcec:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800dcf0:	eb03 1101 	add.w	r1, r3, r1, lsl #4
		    ipv6->unicast[i].address.family != AF_INET6 ||
 800dcf4:	428e      	cmp	r6, r1
 800dcf6:	d0e5      	beq.n	800dcc4 <net_if_start_dad+0x168>
		    net_ipv6_is_addr_loopback(
 800dcf8:	460b      	mov	r3, r1
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 800dcfa:	f853 2f04 	ldr.w	r2, [r3, #4]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800dcfe:	2a00      	cmp	r2, #0
 800dd00:	d1db      	bne.n	800dcba <net_if_start_dad+0x15e>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 800dd02:	685a      	ldr	r2, [r3, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 800dd04:	b98a      	cbnz	r2, 800dd2a <net_if_start_dad+0x1ce>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800dd06:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 800dd08:	b98a      	cbnz	r2, 800dd2e <net_if_start_dad+0x1d2>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
 800dd0a:	68da      	ldr	r2, [r3, #12]
 800dd0c:	0a13      	lsrs	r3, r2, #8
 800dd0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dd12:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800dd16:	0210      	lsls	r0, r2, #8
 800dd18:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 800dd1c:	4303      	orrs	r3, r0
 800dd1e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	d005      	beq.n	800dd32 <net_if_start_dad+0x1d6>
 800dd26:	2300      	movs	r3, #0
 800dd28:	e7c8      	b.n	800dcbc <net_if_start_dad+0x160>
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	e7c6      	b.n	800dcbc <net_if_start_dad+0x160>
 800dd2e:	2300      	movs	r3, #0
 800dd30:	e7c4      	b.n	800dcbc <net_if_start_dad+0x160>
 800dd32:	2301      	movs	r3, #1
 800dd34:	e7c2      	b.n	800dcbc <net_if_start_dad+0x160>
 800dd36:	bf00      	nop
 800dd38:	20001094 	.word	0x20001094
 800dd3c:	0801e198 	.word	0x0801e198
 800dd40:	0801d778 	.word	0x0801d778
 800dd44:	0801e1c0 	.word	0x0801e1c0

0800dd48 <net_if_ipv6_maddr_rm>:
{
 800dd48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd4c:	4680      	mov	r8, r0
 800dd4e:	4689      	mov	r9, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800dd50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd58:	481d      	ldr	r0, [pc, #116]	; (800ddd0 <net_if_ipv6_maddr_rm+0x88>)
 800dd5a:	f007 fddf 	bl	801591c <z_impl_k_mutex_lock>
	ipv6 = iface->config.ip.ipv6;
 800dd5e:	f8d8 7210 	ldr.w	r7, [r8, #528]	; 0x210
	if (!ipv6) {
 800dd62:	b397      	cbz	r7, 800ddca <net_if_ipv6_maddr_rm+0x82>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 800dd64:	2400      	movs	r4, #0
 800dd66:	e000      	b.n	800dd6a <net_if_ipv6_maddr_rm+0x22>
 800dd68:	3401      	adds	r4, #1
 800dd6a:	2c02      	cmp	r4, #2
 800dd6c:	dc26      	bgt.n	800ddbc <net_if_ipv6_maddr_rm+0x74>
		if (!ipv6->mcast[i].is_used) {
 800dd6e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800dd72:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 800dd76:	f893 6074 	ldrb.w	r6, [r3, #116]	; 0x74
 800dd7a:	f016 0601 	ands.w	r6, r6, #1
 800dd7e:	d0f3      	beq.n	800dd68 <net_if_ipv6_maddr_rm+0x20>
		if (!net_ipv6_addr_cmp(&ipv6->mcast[i].address.in6_addr,
 800dd80:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800dd84:	00ed      	lsls	r5, r5, #3
 800dd86:	3560      	adds	r5, #96	; 0x60
 800dd88:	443d      	add	r5, r7
 800dd8a:	3504      	adds	r5, #4
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 800dd8c:	2210      	movs	r2, #16
 800dd8e:	4649      	mov	r1, r9
 800dd90:	4628      	mov	r0, r5
 800dd92:	f00e fd43 	bl	801c81c <memcmp>
 800dd96:	2800      	cmp	r0, #0
 800dd98:	d1e6      	bne.n	800dd68 <net_if_ipv6_maddr_rm+0x20>
		ipv6->mcast[i].is_used = false;
 800dd9a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800dd9e:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800dda2:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 800dda6:	f36f 0300 	bfc	r3, #0, #1
 800ddaa:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
		net_mgmt_event_notify_with_info(
 800ddae:	2310      	movs	r3, #16
 800ddb0:	462a      	mov	r2, r5
 800ddb2:	4641      	mov	r1, r8
 800ddb4:	4807      	ldr	r0, [pc, #28]	; (800ddd4 <net_if_ipv6_maddr_rm+0x8c>)
 800ddb6:	f001 fd1f 	bl	800f7f8 <net_mgmt_event_notify_with_info>
		goto out;
 800ddba:	e000      	b.n	800ddbe <net_if_ipv6_maddr_rm+0x76>
	bool ret = false;
 800ddbc:	2600      	movs	r6, #0
	return z_impl_k_mutex_unlock(mutex);
 800ddbe:	4804      	ldr	r0, [pc, #16]	; (800ddd0 <net_if_ipv6_maddr_rm+0x88>)
 800ddc0:	f007 fe36 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800ddc4:	4630      	mov	r0, r6
 800ddc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool ret = false;
 800ddca:	2600      	movs	r6, #0
 800ddcc:	e7f7      	b.n	800ddbe <net_if_ipv6_maddr_rm+0x76>
 800ddce:	bf00      	nop
 800ddd0:	20001094 	.word	0x20001094
 800ddd4:	e0600004 	.word	0xe0600004

0800ddd8 <net_if_ipv6_addr_rm>:
{
 800ddd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dddc:	b085      	sub	sp, #20
 800ddde:	4606      	mov	r6, r0
 800dde0:	460f      	mov	r7, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800dde2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dde6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ddea:	4852      	ldr	r0, [pc, #328]	; (800df34 <net_if_ipv6_addr_rm+0x15c>)
 800ddec:	f007 fd96 	bl	801591c <z_impl_k_mutex_lock>
	ipv6 = iface->config.ip.ipv6;
 800ddf0:	f8d6 5210 	ldr.w	r5, [r6, #528]	; 0x210
	if (!ipv6) {
 800ddf4:	2d00      	cmp	r5, #0
 800ddf6:	f000 809a 	beq.w	800df2e <net_if_ipv6_addr_rm+0x156>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800ddfa:	2400      	movs	r4, #0
 800ddfc:	2c01      	cmp	r4, #1
 800ddfe:	f300 808d 	bgt.w	800df1c <net_if_ipv6_addr_rm+0x144>
		if (!ipv6->unicast[i].is_used) {
 800de02:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800de06:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800de0a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800de0e:	f3c3 0940 	ubfx	r9, r3, #1, #1
 800de12:	f013 0f02 	tst.w	r3, #2
 800de16:	d07f      	beq.n	800df18 <net_if_ipv6_addr_rm+0x140>
		if (!net_ipv6_addr_cmp(&ipv6->unicast[i].address.in6_addr,
 800de18:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800de1c:	eb05 1808 	add.w	r8, r5, r8, lsl #4
 800de20:	f108 0804 	add.w	r8, r8, #4
 800de24:	2210      	movs	r2, #16
 800de26:	4639      	mov	r1, r7
 800de28:	4640      	mov	r0, r8
 800de2a:	f00e fcf7 	bl	801c81c <memcmp>
 800de2e:	2800      	cmp	r0, #0
 800de30:	d172      	bne.n	800df18 <net_if_ipv6_addr_rm+0x140>
		if (!ipv6->unicast[i].is_infinite) {
 800de32:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800de36:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800de3a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800de3e:	f013 0f01 	tst.w	r3, #1
 800de42:	d124      	bne.n	800de8e <net_if_ipv6_addr_rm+0xb6>
			sys_slist_find_and_remove(
 800de44:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800de48:	0112      	lsls	r2, r2, #4
 800de4a:	3210      	adds	r2, #16
 800de4c:	442a      	add	r2, r5
 800de4e:	3204      	adds	r2, #4
	return list->head;
 800de50:	4b39      	ldr	r3, [pc, #228]	; (800df38 <net_if_ipv6_addr_rm+0x160>)
 800de52:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800de54:	2100      	movs	r1, #0
 800de56:	b1b3      	cbz	r3, 800de86 <net_if_ipv6_addr_rm+0xae>
 800de58:	429a      	cmp	r2, r3
 800de5a:	d002      	beq.n	800de62 <net_if_ipv6_addr_rm+0x8a>
 800de5c:	4619      	mov	r1, r3
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	e7f9      	b.n	800de56 <net_if_ipv6_addr_rm+0x7e>
Z_GENLIST_REMOVE(slist, snode)
 800de62:	2900      	cmp	r1, #0
 800de64:	d044      	beq.n	800def0 <net_if_ipv6_addr_rm+0x118>
	return node->next;
 800de66:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800de6a:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800de6e:	695b      	ldr	r3, [r3, #20]
	parent->next = child;
 800de70:	600b      	str	r3, [r1, #0]
	return list->tail;
 800de72:	4b31      	ldr	r3, [pc, #196]	; (800df38 <net_if_ipv6_addr_rm+0x160>)
 800de74:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800de76:	429a      	cmp	r2, r3
 800de78:	d047      	beq.n	800df0a <net_if_ipv6_addr_rm+0x132>
	parent->next = child;
 800de7a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800de7e:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800de82:	2200      	movs	r2, #0
 800de84:	615a      	str	r2, [r3, #20]
	return list->head;
 800de86:	4b2c      	ldr	r3, [pc, #176]	; (800df38 <net_if_ipv6_addr_rm+0x160>)
 800de88:	681b      	ldr	r3, [r3, #0]
			if (sys_slist_is_empty(
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d040      	beq.n	800df10 <net_if_ipv6_addr_rm+0x138>
		ipv6->unicast[i].is_used = false;
 800de8e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800de92:	eb05 1404 	add.w	r4, r5, r4, lsl #4
 800de96:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800de9a:	f36f 0341 	bfc	r3, #1, #1
 800de9e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	dst->s6_addr[0]   = 0xFF;
 800dea2:	22ff      	movs	r2, #255	; 0xff
 800dea4:	f88d 2000 	strb.w	r2, [sp]
	dst->s6_addr[1]   = 0x02;
 800dea8:	2302      	movs	r3, #2
 800deaa:	f88d 3001 	strb.w	r3, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
 800deae:	2300      	movs	r3, #0
 800deb0:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
 800deb4:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
 800deb8:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
 800debc:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0U;
 800dec0:	f88d 300a 	strb.w	r3, [sp, #10]
	dst->s6_addr[11]  = 0x01;
 800dec4:	2301      	movs	r3, #1
 800dec6:	f88d 300b 	strb.w	r3, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
 800deca:	f88d 200c 	strb.w	r2, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
 800dece:	7b7b      	ldrb	r3, [r7, #13]
 800ded0:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
 800ded4:	89fb      	ldrh	r3, [r7, #14]
 800ded6:	f8ad 300e 	strh.w	r3, [sp, #14]
		net_if_ipv6_maddr_rm(iface, &maddr);
 800deda:	4669      	mov	r1, sp
 800dedc:	4630      	mov	r0, r6
 800dede:	f7ff ff33 	bl	800dd48 <net_if_ipv6_maddr_rm>
		net_mgmt_event_notify_with_info(
 800dee2:	2310      	movs	r3, #16
 800dee4:	4642      	mov	r2, r8
 800dee6:	4631      	mov	r1, r6
 800dee8:	4814      	ldr	r0, [pc, #80]	; (800df3c <net_if_ipv6_addr_rm+0x164>)
 800deea:	f001 fc85 	bl	800f7f8 <net_mgmt_event_notify_with_info>
		goto out;
 800deee:	e017      	b.n	800df20 <net_if_ipv6_addr_rm+0x148>
	return node->next;
 800def0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800def4:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800def8:	6959      	ldr	r1, [r3, #20]
	list->head = node;
 800defa:	4b0f      	ldr	r3, [pc, #60]	; (800df38 <net_if_ipv6_addr_rm+0x160>)
 800defc:	6019      	str	r1, [r3, #0]
	return list->tail;
 800defe:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800df00:	429a      	cmp	r2, r3
 800df02:	d1ba      	bne.n	800de7a <net_if_ipv6_addr_rm+0xa2>
	list->tail = node;
 800df04:	4b0c      	ldr	r3, [pc, #48]	; (800df38 <net_if_ipv6_addr_rm+0x160>)
 800df06:	6059      	str	r1, [r3, #4]
}
 800df08:	e7b7      	b.n	800de7a <net_if_ipv6_addr_rm+0xa2>
	list->tail = node;
 800df0a:	4b0b      	ldr	r3, [pc, #44]	; (800df38 <net_if_ipv6_addr_rm+0x160>)
 800df0c:	6059      	str	r1, [r3, #4]
}
 800df0e:	e7b4      	b.n	800de7a <net_if_ipv6_addr_rm+0xa2>
				k_work_cancel_delayable(
 800df10:	480b      	ldr	r0, [pc, #44]	; (800df40 <net_if_ipv6_addr_rm+0x168>)
 800df12:	f00e f923 	bl	801c15c <k_work_cancel_delayable>
 800df16:	e7ba      	b.n	800de8e <net_if_ipv6_addr_rm+0xb6>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800df18:	3401      	adds	r4, #1
 800df1a:	e76f      	b.n	800ddfc <net_if_ipv6_addr_rm+0x24>
	bool ret = false;
 800df1c:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_mutex_unlock(mutex);
 800df20:	4804      	ldr	r0, [pc, #16]	; (800df34 <net_if_ipv6_addr_rm+0x15c>)
 800df22:	f007 fd85 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800df26:	4648      	mov	r0, r9
 800df28:	b005      	add	sp, #20
 800df2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	bool ret = false;
 800df2e:	f04f 0900 	mov.w	r9, #0
 800df32:	e7f5      	b.n	800df20 <net_if_ipv6_addr_rm+0x148>
 800df34:	20001094 	.word	0x20001094
 800df38:	200031ac 	.word	0x200031ac
 800df3c:	e0600002 	.word	0xe0600002
 800df40:	20001c68 	.word	0x20001c68

0800df44 <net_if_ipv6_dad_failed>:
{
 800df44:	b530      	push	{r4, r5, lr}
 800df46:	b087      	sub	sp, #28
 800df48:	9005      	str	r0, [sp, #20]
 800df4a:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800df4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df54:	4823      	ldr	r0, [pc, #140]	; (800dfe4 <net_if_ipv6_dad_failed+0xa0>)
 800df56:	f007 fce1 	bl	801591c <z_impl_k_mutex_lock>
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
 800df5a:	a905      	add	r1, sp, #20
 800df5c:	4628      	mov	r0, r5
 800df5e:	f7ff fc1f 	bl	800d7a0 <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
 800df62:	b150      	cbz	r0, 800df7a <net_if_ipv6_dad_failed+0x36>
 800df64:	4602      	mov	r2, r0
	sys_slist_find_and_remove(&active_dad_timers, &ifaddr->dad_node);
 800df66:	3024      	adds	r0, #36	; 0x24
	return list->head;
 800df68:	4b1f      	ldr	r3, [pc, #124]	; (800dfe8 <net_if_ipv6_dad_failed+0xa4>)
 800df6a:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800df6c:	2400      	movs	r4, #0
 800df6e:	b1f3      	cbz	r3, 800dfae <net_if_ipv6_dad_failed+0x6a>
 800df70:	4298      	cmp	r0, r3
 800df72:	d013      	beq.n	800df9c <net_if_ipv6_dad_failed+0x58>
 800df74:	461c      	mov	r4, r3
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	e7f9      	b.n	800df6e <net_if_ipv6_dad_failed+0x2a>
		NET_ERR("Cannot find %s address in interface %p",
 800df7a:	4629      	mov	r1, r5
 800df7c:	2002      	movs	r0, #2
 800df7e:	f001 faf1 	bl	800f564 <net_sprint_addr>
 800df82:	9b05      	ldr	r3, [sp, #20]
 800df84:	9303      	str	r3, [sp, #12]
 800df86:	9002      	str	r0, [sp, #8]
 800df88:	4b18      	ldr	r3, [pc, #96]	; (800dfec <net_if_ipv6_dad_failed+0xa8>)
 800df8a:	9301      	str	r3, [sp, #4]
 800df8c:	2000      	movs	r0, #0
 800df8e:	9000      	str	r0, [sp, #0]
 800df90:	4603      	mov	r3, r0
 800df92:	2201      	movs	r2, #1
 800df94:	4916      	ldr	r1, [pc, #88]	; (800dff0 <net_if_ipv6_dad_failed+0xac>)
 800df96:	f00b fb98 	bl	80196ca <z_log_msg2_runtime_create>
		goto out;
 800df9a:	e012      	b.n	800dfc2 <net_if_ipv6_dad_failed+0x7e>
Z_GENLIST_REMOVE(slist, snode)
 800df9c:	b1b4      	cbz	r4, 800dfcc <net_if_ipv6_dad_failed+0x88>
	return node->next;
 800df9e:	6a53      	ldr	r3, [r2, #36]	; 0x24
	parent->next = child;
 800dfa0:	6023      	str	r3, [r4, #0]
	return list->tail;
 800dfa2:	4b11      	ldr	r3, [pc, #68]	; (800dfe8 <net_if_ipv6_dad_failed+0xa4>)
 800dfa4:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800dfa6:	4298      	cmp	r0, r3
 800dfa8:	d019      	beq.n	800dfde <net_if_ipv6_dad_failed+0x9a>
	parent->next = child;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	6253      	str	r3, [r2, #36]	; 0x24
	net_mgmt_event_notify_with_info(NET_EVENT_IPV6_DAD_FAILED, iface,
 800dfae:	2310      	movs	r3, #16
 800dfb0:	3204      	adds	r2, #4
 800dfb2:	9905      	ldr	r1, [sp, #20]
 800dfb4:	480f      	ldr	r0, [pc, #60]	; (800dff4 <net_if_ipv6_dad_failed+0xb0>)
 800dfb6:	f001 fc1f 	bl	800f7f8 <net_mgmt_event_notify_with_info>
	net_if_ipv6_addr_rm(iface, addr);
 800dfba:	4629      	mov	r1, r5
 800dfbc:	9805      	ldr	r0, [sp, #20]
 800dfbe:	f7ff ff0b 	bl	800ddd8 <net_if_ipv6_addr_rm>
	return z_impl_k_mutex_unlock(mutex);
 800dfc2:	4808      	ldr	r0, [pc, #32]	; (800dfe4 <net_if_ipv6_dad_failed+0xa0>)
 800dfc4:	f007 fd34 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800dfc8:	b007      	add	sp, #28
 800dfca:	bd30      	pop	{r4, r5, pc}
	return node->next;
 800dfcc:	6a51      	ldr	r1, [r2, #36]	; 0x24
	list->head = node;
 800dfce:	4b06      	ldr	r3, [pc, #24]	; (800dfe8 <net_if_ipv6_dad_failed+0xa4>)
 800dfd0:	6019      	str	r1, [r3, #0]
	return list->tail;
 800dfd2:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800dfd4:	4283      	cmp	r3, r0
 800dfd6:	d1e8      	bne.n	800dfaa <net_if_ipv6_dad_failed+0x66>
	list->tail = node;
 800dfd8:	4b03      	ldr	r3, [pc, #12]	; (800dfe8 <net_if_ipv6_dad_failed+0xa4>)
 800dfda:	6059      	str	r1, [r3, #4]
}
 800dfdc:	e7e5      	b.n	800dfaa <net_if_ipv6_dad_failed+0x66>
	list->tail = node;
 800dfde:	4b02      	ldr	r3, [pc, #8]	; (800dfe8 <net_if_ipv6_dad_failed+0xa4>)
 800dfe0:	605c      	str	r4, [r3, #4]
}
 800dfe2:	e7e2      	b.n	800dfaa <net_if_ipv6_dad_failed+0x66>
 800dfe4:	20001094 	.word	0x20001094
 800dfe8:	200031b4 	.word	0x200031b4
 800dfec:	0801e1f4 	.word	0x0801e1f4
 800dff0:	0801d778 	.word	0x0801d778
 800dff4:	e060000e 	.word	0xe060000e

0800dff8 <prefix_lifetime_expired>:
{
 800dff8:	b530      	push	{r4, r5, lr}
 800dffa:	b083      	sub	sp, #12
 800dffc:	4604      	mov	r4, r0
	ifprefix->is_used = false;
 800dffe:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800e002:	f36f 0341 	bfc	r3, #1, #1
 800e006:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	if (net_if_config_ipv6_get(ifprefix->iface, &ipv6) < 0) {
 800e00a:	a901      	add	r1, sp, #4
 800e00c:	6a00      	ldr	r0, [r0, #32]
 800e00e:	f7ff fa7d 	bl	800d50c <net_if_config_ipv6_get>
 800e012:	2800      	cmp	r0, #0
 800e014:	db0e      	blt.n	800e034 <prefix_lifetime_expired+0x3c>
	remove_prefix_addresses(ifprefix->iface, ipv6, &ifprefix->prefix,
 800e016:	f104 0510 	add.w	r5, r4, #16
 800e01a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800e01e:	462a      	mov	r2, r5
 800e020:	9901      	ldr	r1, [sp, #4]
 800e022:	6a20      	ldr	r0, [r4, #32]
 800e024:	f00b fbcf 	bl	80197c6 <remove_prefix_addresses>
	net_mgmt_event_notify_with_info(
 800e028:	2310      	movs	r3, #16
 800e02a:	462a      	mov	r2, r5
 800e02c:	6a21      	ldr	r1, [r4, #32]
 800e02e:	4802      	ldr	r0, [pc, #8]	; (800e038 <prefix_lifetime_expired+0x40>)
 800e030:	f001 fbe2 	bl	800f7f8 <net_mgmt_event_notify_with_info>
}
 800e034:	b003      	add	sp, #12
 800e036:	bd30      	pop	{r4, r5, pc}
 800e038:	e0600006 	.word	0xe0600006

0800e03c <prefix_lifetime_timeout>:
{
 800e03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_uptime_ticks();
 800e03e:	f00e fae3 	bl	801c608 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 800e042:	220a      	movs	r2, #10
 800e044:	2300      	movs	r3, #0
 800e046:	f7f2 fd79 	bl	8000b3c <__aeabi_uldivmod>
 800e04a:	4607      	mov	r7, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800e04c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e054:	481c      	ldr	r0, [pc, #112]	; (800e0c8 <prefix_lifetime_timeout+0x8c>)
 800e056:	f007 fc61 	bl	801591c <z_impl_k_mutex_lock>
	return list->head;
 800e05a:	4b1c      	ldr	r3, [pc, #112]	; (800e0cc <prefix_lifetime_timeout+0x90>)
 800e05c:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
 800e05e:	b1e5      	cbz	r5, 800e09a <prefix_lifetime_timeout+0x5e>
 800e060:	462c      	mov	r4, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
 800e062:	b105      	cbz	r5, 800e066 <prefix_lifetime_timeout+0x2a>
	return node->next;
 800e064:	682c      	ldr	r4, [r5, #0]
 800e066:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800e06a:	e00b      	b.n	800e084 <prefix_lifetime_timeout+0x48>
			prefix_lifetime_expired(current);
 800e06c:	4628      	mov	r0, r5
 800e06e:	f7ff ffc3 	bl	800dff8 <prefix_lifetime_expired>
			continue;
 800e072:	e001      	b.n	800e078 <prefix_lifetime_timeout+0x3c>
		if (current == next) {
 800e074:	42a5      	cmp	r5, r4
 800e076:	d014      	beq.n	800e0a2 <prefix_lifetime_timeout+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
 800e078:	b18c      	cbz	r4, 800e09e <prefix_lifetime_timeout+0x62>
 800e07a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800e07c:	b104      	cbz	r4, 800e080 <prefix_lifetime_timeout+0x44>
	return node->next;
 800e07e:	6823      	ldr	r3, [r4, #0]
 800e080:	4625      	mov	r5, r4
 800e082:	461c      	mov	r4, r3
 800e084:	b16d      	cbz	r5, 800e0a2 <prefix_lifetime_timeout+0x66>
		uint32_t this_update = net_timeout_evaluate(timeout,
 800e086:	4639      	mov	r1, r7
 800e088:	4628      	mov	r0, r5
 800e08a:	f00b fcbc 	bl	8019a06 <net_timeout_evaluate>
		if (this_update == 0U) {
 800e08e:	2800      	cmp	r0, #0
 800e090:	d0ec      	beq.n	800e06c <prefix_lifetime_timeout+0x30>
		if (this_update < next_update) {
 800e092:	4286      	cmp	r6, r0
 800e094:	d9ee      	bls.n	800e074 <prefix_lifetime_timeout+0x38>
			next_update = this_update;
 800e096:	4606      	mov	r6, r0
 800e098:	e7ec      	b.n	800e074 <prefix_lifetime_timeout+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_prefix_lifetime_timers,
 800e09a:	462c      	mov	r4, r5
 800e09c:	e7e3      	b.n	800e066 <prefix_lifetime_timeout+0x2a>
 800e09e:	4623      	mov	r3, r4
 800e0a0:	e7ee      	b.n	800e080 <prefix_lifetime_timeout+0x44>
	if (next_update != UINT32_MAX) {
 800e0a2:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800e0a6:	d103      	bne.n	800e0b0 <prefix_lifetime_timeout+0x74>
	return z_impl_k_mutex_unlock(mutex);
 800e0a8:	4807      	ldr	r0, [pc, #28]	; (800e0c8 <prefix_lifetime_timeout+0x8c>)
 800e0aa:	f007 fcc1 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800e0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return t * ((uint64_t)to_hz / from_hz);
 800e0b0:	00b0      	lsls	r0, r6, #2
 800e0b2:	0fb1      	lsrs	r1, r6, #30
 800e0b4:	1980      	adds	r0, r0, r6
 800e0b6:	f141 0100 	adc.w	r1, r1, #0
		k_work_reschedule(&prefix_lifetime_timer, K_MSEC(next_update));
 800e0ba:	1802      	adds	r2, r0, r0
 800e0bc:	eb41 0301 	adc.w	r3, r1, r1
 800e0c0:	4803      	ldr	r0, [pc, #12]	; (800e0d0 <prefix_lifetime_timeout+0x94>)
 800e0c2:	f007 ff27 	bl	8015f14 <k_work_reschedule>
 800e0c6:	e7ef      	b.n	800e0a8 <prefix_lifetime_timeout+0x6c>
 800e0c8:	20001094 	.word	0x20001094
 800e0cc:	200031bc 	.word	0x200031bc
 800e0d0:	20001cc8 	.word	0x20001cc8

0800e0d4 <net_if_ipv6_maddr_lookup>:
{
 800e0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0d8:	4680      	mov	r8, r0
 800e0da:	460f      	mov	r7, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800e0dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e0e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0e4:	4824      	ldr	r0, [pc, #144]	; (800e178 <net_if_ipv6_maddr_lookup+0xa4>)
 800e0e6:	f007 fc19 	bl	801591c <z_impl_k_mutex_lock>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800e0ea:	4e24      	ldr	r6, [pc, #144]	; (800e17c <net_if_ipv6_maddr_lookup+0xa8>)
 800e0ec:	e02f      	b.n	800e14e <net_if_ipv6_maddr_lookup+0x7a>
			if (net_ipv6_is_prefix(
 800e0ee:	f1b9 0f00 	cmp.w	r9, #0
 800e0f2:	d122      	bne.n	800e13a <net_if_ipv6_maddr_lookup+0x66>
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 800e0f4:	3401      	adds	r4, #1
 800e0f6:	2c02      	cmp	r4, #2
 800e0f8:	dc27      	bgt.n	800e14a <net_if_ipv6_maddr_lookup+0x76>
			if (!ipv6->mcast[i].is_used ||
 800e0fa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e0fe:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800e102:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e106:	f013 0901 	ands.w	r9, r3, #1
 800e10a:	d0f3      	beq.n	800e0f4 <net_if_ipv6_maddr_lookup+0x20>
			    ipv6->mcast[i].address.family != AF_INET6) {
 800e10c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e110:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800e114:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
			if (!ipv6->mcast[i].is_used ||
 800e118:	2b02      	cmp	r3, #2
 800e11a:	d1eb      	bne.n	800e0f4 <net_if_ipv6_maddr_lookup+0x20>
				    ipv6->mcast[i].address.in6_addr.s6_addr,
 800e11c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800e120:	00c9      	lsls	r1, r1, #3
 800e122:	3160      	adds	r1, #96	; 0x60
 800e124:	4429      	add	r1, r5
	if (memcmp(addr1, addr2, bytes)) {
 800e126:	2210      	movs	r2, #16
 800e128:	3104      	adds	r1, #4
 800e12a:	4640      	mov	r0, r8
 800e12c:	f00e fb76 	bl	801c81c <memcmp>
 800e130:	2800      	cmp	r0, #0
 800e132:	d0dc      	beq.n	800e0ee <net_if_ipv6_maddr_lookup+0x1a>
		return false;
 800e134:	f04f 0900 	mov.w	r9, #0
 800e138:	e7d9      	b.n	800e0ee <net_if_ipv6_maddr_lookup+0x1a>
				if (ret) {
 800e13a:	b107      	cbz	r7, 800e13e <net_if_ipv6_maddr_lookup+0x6a>
					*ret = iface;
 800e13c:	603e      	str	r6, [r7, #0]
				ifmaddr = &ipv6->mcast[i];
 800e13e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800e142:	00db      	lsls	r3, r3, #3
 800e144:	3360      	adds	r3, #96	; 0x60
 800e146:	441d      	add	r5, r3
				goto out;
 800e148:	e010      	b.n	800e16c <net_if_ipv6_maddr_lookup+0x98>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800e14a:	f506 7606 	add.w	r6, r6, #536	; 0x218
 800e14e:	4b0c      	ldr	r3, [pc, #48]	; (800e180 <net_if_ipv6_maddr_lookup+0xac>)
 800e150:	429e      	cmp	r6, r3
 800e152:	d20a      	bcs.n	800e16a <net_if_ipv6_maddr_lookup+0x96>
		struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 800e154:	f8d6 5210 	ldr.w	r5, [r6, #528]	; 0x210
		if (ret && *ret && iface != *ret) {
 800e158:	b11f      	cbz	r7, 800e162 <net_if_ipv6_maddr_lookup+0x8e>
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	b10b      	cbz	r3, 800e162 <net_if_ipv6_maddr_lookup+0x8e>
 800e15e:	42b3      	cmp	r3, r6
 800e160:	d1f3      	bne.n	800e14a <net_if_ipv6_maddr_lookup+0x76>
		if (!ipv6) {
 800e162:	2d00      	cmp	r5, #0
 800e164:	d0f1      	beq.n	800e14a <net_if_ipv6_maddr_lookup+0x76>
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 800e166:	2400      	movs	r4, #0
 800e168:	e7c5      	b.n	800e0f6 <net_if_ipv6_maddr_lookup+0x22>
	struct net_if_mcast_addr *ifmaddr = NULL;
 800e16a:	2500      	movs	r5, #0
	return z_impl_k_mutex_unlock(mutex);
 800e16c:	4802      	ldr	r0, [pc, #8]	; (800e178 <net_if_ipv6_maddr_lookup+0xa4>)
 800e16e:	f007 fc5f 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800e172:	4628      	mov	r0, r5
 800e174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e178:	20001094 	.word	0x20001094
 800e17c:	200011c8 	.word	0x200011c8
 800e180:	200013e0 	.word	0x200013e0

0800e184 <net_if_ipv6_maddr_add>:
{
 800e184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e186:	b089      	sub	sp, #36	; 0x24
 800e188:	9005      	str	r0, [sp, #20]
 800e18a:	460c      	mov	r4, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800e18c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e194:	4832      	ldr	r0, [pc, #200]	; (800e260 <net_if_ipv6_maddr_add+0xdc>)
 800e196:	f007 fbc1 	bl	801591c <z_impl_k_mutex_lock>
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
 800e19a:	a907      	add	r1, sp, #28
 800e19c:	9805      	ldr	r0, [sp, #20]
 800e19e:	f7ff f9b5 	bl	800d50c <net_if_config_ipv6_get>
 800e1a2:	2800      	cmp	r0, #0
 800e1a4:	db53      	blt.n	800e24e <net_if_ipv6_maddr_add+0xca>
	return addr->s6_addr[0] == 0xFF;
 800e1a6:	7823      	ldrb	r3, [r4, #0]
	if (!net_ipv6_is_addr_mcast(addr)) {
 800e1a8:	2bff      	cmp	r3, #255	; 0xff
 800e1aa:	d152      	bne.n	800e252 <net_if_ipv6_maddr_add+0xce>
	if (net_if_ipv6_maddr_lookup(addr, &iface)) {
 800e1ac:	a905      	add	r1, sp, #20
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	f7ff ff90 	bl	800e0d4 <net_if_ipv6_maddr_lookup>
 800e1b4:	4606      	mov	r6, r0
 800e1b6:	bbc0      	cbnz	r0, 800e22a <net_if_ipv6_maddr_add+0xa6>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 800e1b8:	2500      	movs	r5, #0
 800e1ba:	2d02      	cmp	r5, #2
 800e1bc:	dc4a      	bgt.n	800e254 <net_if_ipv6_maddr_add+0xd0>
		if (ipv6->mcast[i].is_used) {
 800e1be:	9b07      	ldr	r3, [sp, #28]
 800e1c0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800e1c4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800e1c8:	f892 2074 	ldrb.w	r2, [r2, #116]	; 0x74
 800e1cc:	f012 0f01 	tst.w	r2, #1
 800e1d0:	d13b      	bne.n	800e24a <net_if_ipv6_maddr_add+0xc6>
		ipv6->mcast[i].is_used = true;
 800e1d2:	006e      	lsls	r6, r5, #1
 800e1d4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800e1d8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800e1dc:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
 800e1e0:	f041 0101 	orr.w	r1, r1, #1
 800e1e4:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
		ipv6->mcast[i].address.family = AF_INET6;
 800e1e8:	2102      	movs	r1, #2
 800e1ea:	f8a2 1060 	strh.w	r1, [r2, #96]	; 0x60
		memcpy(&ipv6->mcast[i].address.in6_addr, addr, 16);
 800e1ee:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800e1f2:	00d2      	lsls	r2, r2, #3
 800e1f4:	3260      	adds	r2, #96	; 0x60
 800e1f6:	4413      	add	r3, r2
 800e1f8:	f8d4 c000 	ldr.w	ip, [r4]
 800e1fc:	6867      	ldr	r7, [r4, #4]
 800e1fe:	68a0      	ldr	r0, [r4, #8]
 800e200:	68e1      	ldr	r1, [r4, #12]
 800e202:	f8c3 c004 	str.w	ip, [r3, #4]
 800e206:	609f      	str	r7, [r3, #8]
 800e208:	60d8      	str	r0, [r3, #12]
 800e20a:	6119      	str	r1, [r3, #16]
			&ipv6->mcast[i].address.in6_addr,
 800e20c:	9b07      	ldr	r3, [sp, #28]
 800e20e:	441a      	add	r2, r3
		net_mgmt_event_notify_with_info(
 800e210:	2310      	movs	r3, #16
 800e212:	3204      	adds	r2, #4
 800e214:	9905      	ldr	r1, [sp, #20]
 800e216:	4813      	ldr	r0, [pc, #76]	; (800e264 <net_if_ipv6_maddr_add+0xe0>)
 800e218:	f001 faee 	bl	800f7f8 <net_mgmt_event_notify_with_info>
		ifmaddr = &ipv6->mcast[i];
 800e21c:	4435      	add	r5, r6
 800e21e:	00ee      	lsls	r6, r5, #3
 800e220:	f106 0560 	add.w	r5, r6, #96	; 0x60
 800e224:	9e07      	ldr	r6, [sp, #28]
 800e226:	442e      	add	r6, r5
		goto out;
 800e228:	e014      	b.n	800e254 <net_if_ipv6_maddr_add+0xd0>
		NET_WARN("Multicast address %s is is already registered.",
 800e22a:	4621      	mov	r1, r4
 800e22c:	2002      	movs	r0, #2
 800e22e:	f001 f999 	bl	800f564 <net_sprint_addr>
 800e232:	9002      	str	r0, [sp, #8]
 800e234:	4b0c      	ldr	r3, [pc, #48]	; (800e268 <net_if_ipv6_maddr_add+0xe4>)
 800e236:	9301      	str	r3, [sp, #4]
 800e238:	2600      	movs	r6, #0
 800e23a:	9600      	str	r6, [sp, #0]
 800e23c:	4633      	mov	r3, r6
 800e23e:	2202      	movs	r2, #2
 800e240:	490a      	ldr	r1, [pc, #40]	; (800e26c <net_if_ipv6_maddr_add+0xe8>)
 800e242:	4630      	mov	r0, r6
 800e244:	f00b fa41 	bl	80196ca <z_log_msg2_runtime_create>
		goto out;
 800e248:	e004      	b.n	800e254 <net_if_ipv6_maddr_add+0xd0>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 800e24a:	3501      	adds	r5, #1
 800e24c:	e7b5      	b.n	800e1ba <net_if_ipv6_maddr_add+0x36>
	struct net_if_mcast_addr *ifmaddr = NULL;
 800e24e:	2600      	movs	r6, #0
 800e250:	e000      	b.n	800e254 <net_if_ipv6_maddr_add+0xd0>
 800e252:	2600      	movs	r6, #0
	return z_impl_k_mutex_unlock(mutex);
 800e254:	4802      	ldr	r0, [pc, #8]	; (800e260 <net_if_ipv6_maddr_add+0xdc>)
 800e256:	f007 fbeb 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800e25a:	4630      	mov	r0, r6
 800e25c:	b009      	add	sp, #36	; 0x24
 800e25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e260:	20001094 	.word	0x20001094
 800e264:	e0600003 	.word	0xe0600003
 800e268:	0801e21c 	.word	0x0801e21c
 800e26c:	0801d778 	.word	0x0801d778

0800e270 <net_if_ipv6_maddr_join>:
{
 800e270:	b538      	push	{r3, r4, r5, lr}
 800e272:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800e274:	4d07      	ldr	r5, [pc, #28]	; (800e294 <net_if_ipv6_maddr_join+0x24>)
 800e276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e27a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e27e:	4628      	mov	r0, r5
 800e280:	f007 fb4c 	bl	801591c <z_impl_k_mutex_lock>
	addr->is_joined = true;
 800e284:	7d23      	ldrb	r3, [r4, #20]
 800e286:	f043 0302 	orr.w	r3, r3, #2
 800e28a:	7523      	strb	r3, [r4, #20]
	return z_impl_k_mutex_unlock(mutex);
 800e28c:	4628      	mov	r0, r5
 800e28e:	f007 fbcf 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800e292:	bd38      	pop	{r3, r4, r5, pc}
 800e294:	20001094 	.word	0x20001094

0800e298 <net_if_ipv6_prefix_add>:
{
 800e298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e29c:	b085      	sub	sp, #20
 800e29e:	4604      	mov	r4, r0
 800e2a0:	460d      	mov	r5, r1
 800e2a2:	4616      	mov	r6, r2
 800e2a4:	4699      	mov	r9, r3
	return z_impl_k_mutex_lock(mutex, timeout);
 800e2a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e2aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2ae:	4826      	ldr	r0, [pc, #152]	; (800e348 <net_if_ipv6_prefix_add+0xb0>)
 800e2b0:	f007 fb34 	bl	801591c <z_impl_k_mutex_lock>
	if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
 800e2b4:	a903      	add	r1, sp, #12
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	f7ff f928 	bl	800d50c <net_if_config_ipv6_get>
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	db3f      	blt.n	800e340 <net_if_ipv6_prefix_add+0xa8>
	ifprefix = ipv6_prefix_find(iface, prefix, len);
 800e2c0:	4632      	mov	r2, r6
 800e2c2:	4629      	mov	r1, r5
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	f00b fa31 	bl	801972c <ipv6_prefix_find>
	if (ifprefix) {
 800e2ca:	4680      	mov	r8, r0
 800e2cc:	b130      	cbz	r0, 800e2dc <net_if_ipv6_prefix_add+0x44>
	return z_impl_k_mutex_unlock(mutex);
 800e2ce:	481e      	ldr	r0, [pc, #120]	; (800e348 <net_if_ipv6_prefix_add+0xb0>)
 800e2d0:	f007 fbae 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800e2d4:	4640      	mov	r0, r8
 800e2d6:	b005      	add	sp, #20
 800e2d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!ipv6) {
 800e2dc:	9803      	ldr	r0, [sp, #12]
 800e2de:	2800      	cmp	r0, #0
 800e2e0:	d0f5      	beq.n	800e2ce <net_if_ipv6_prefix_add+0x36>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
 800e2e2:	2700      	movs	r7, #0
 800e2e4:	2f01      	cmp	r7, #1
 800e2e6:	dcf2      	bgt.n	800e2ce <net_if_ipv6_prefix_add+0x36>
		if (ipv6->prefix[i].is_used) {
 800e2e8:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 800e2ec:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800e2f0:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 800e2f4:	f013 0f02 	tst.w	r3, #2
 800e2f8:	d001      	beq.n	800e2fe <net_if_ipv6_prefix_add+0x66>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
 800e2fa:	3701      	adds	r7, #1
 800e2fc:	e7f2      	b.n	800e2e4 <net_if_ipv6_prefix_add+0x4c>
		net_if_ipv6_prefix_init(iface, &ipv6->prefix[i], prefix,
 800e2fe:	ea4f 0887 	mov.w	r8, r7, lsl #2
 800e302:	eb07 0187 	add.w	r1, r7, r7, lsl #2
 800e306:	00c9      	lsls	r1, r1, #3
 800e308:	31a8      	adds	r1, #168	; 0xa8
 800e30a:	f8cd 9000 	str.w	r9, [sp]
 800e30e:	4633      	mov	r3, r6
 800e310:	462a      	mov	r2, r5
 800e312:	4401      	add	r1, r0
 800e314:	4620      	mov	r0, r4
 800e316:	f00b f97c 	bl	8019612 <net_if_ipv6_prefix_init>
			&ipv6->prefix[i].prefix, sizeof(struct in6_addr));
 800e31a:	eb08 0207 	add.w	r2, r8, r7
 800e31e:	00d2      	lsls	r2, r2, #3
 800e320:	32b8      	adds	r2, #184	; 0xb8
		net_mgmt_event_notify_with_info(
 800e322:	2310      	movs	r3, #16
 800e324:	9903      	ldr	r1, [sp, #12]
 800e326:	440a      	add	r2, r1
 800e328:	4621      	mov	r1, r4
 800e32a:	4808      	ldr	r0, [pc, #32]	; (800e34c <net_if_ipv6_prefix_add+0xb4>)
 800e32c:	f001 fa64 	bl	800f7f8 <net_mgmt_event_notify_with_info>
		ifprefix = &ipv6->prefix[i];
 800e330:	44b8      	add	r8, r7
 800e332:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800e336:	f108 08a8 	add.w	r8, r8, #168	; 0xa8
 800e33a:	9b03      	ldr	r3, [sp, #12]
 800e33c:	4498      	add	r8, r3
		goto out;
 800e33e:	e7c6      	b.n	800e2ce <net_if_ipv6_prefix_add+0x36>
	struct net_if_ipv6_prefix *ifprefix = NULL;
 800e340:	f04f 0800 	mov.w	r8, #0
 800e344:	e7c3      	b.n	800e2ce <net_if_ipv6_prefix_add+0x36>
 800e346:	bf00      	nop
 800e348:	20001094 	.word	0x20001094
 800e34c:	e0600005 	.word	0xe0600005

0800e350 <net_if_ipv6_prefix_lookup>:
{
 800e350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e354:	4604      	mov	r4, r0
 800e356:	460f      	mov	r7, r1
 800e358:	4616      	mov	r6, r2
	return z_impl_k_mutex_lock(mutex, timeout);
 800e35a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e35e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e362:	482b      	ldr	r0, [pc, #172]	; (800e410 <net_if_ipv6_prefix_lookup+0xc0>)
 800e364:	f007 fada 	bl	801591c <z_impl_k_mutex_lock>
	ipv6 = iface->config.ip.ipv6;
 800e368:	f8d4 5210 	ldr.w	r5, [r4, #528]	; 0x210
	if (!ipv6) {
 800e36c:	2d00      	cmp	r5, #0
 800e36e:	d048      	beq.n	800e402 <net_if_ipv6_prefix_lookup+0xb2>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
 800e370:	2400      	movs	r4, #0
 800e372:	e01f      	b.n	800e3b4 <net_if_ipv6_prefix_lookup+0x64>
	if (memcmp(addr1, addr2, bytes)) {
 800e374:	4652      	mov	r2, sl
 800e376:	4639      	mov	r1, r7
 800e378:	4648      	mov	r0, r9
 800e37a:	f00e fa4f 	bl	801c81c <memcmp>
 800e37e:	bbb0      	cbnz	r0, 800e3ee <net_if_ipv6_prefix_lookup+0x9e>
	if (!remain) {
 800e380:	f1bb 0f00 	cmp.w	fp, #0
 800e384:	d012      	beq.n	800e3ac <net_if_ipv6_prefix_lookup+0x5c>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
 800e386:	f1cb 0208 	rsb	r2, fp, #8
 800e38a:	23ff      	movs	r3, #255	; 0xff
 800e38c:	4093      	lsls	r3, r2
 800e38e:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800e392:	fa03 f30b 	lsl.w	r3, r3, fp
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
 800e396:	f819 200a 	ldrb.w	r2, [r9, sl]
 800e39a:	f817 100a 	ldrb.w	r1, [r7, sl]
 800e39e:	404a      	eors	r2, r1
 800e3a0:	4213      	tst	r3, r2
 800e3a2:	bf0c      	ite	eq
 800e3a4:	f04f 0801 	moveq.w	r8, #1
 800e3a8:	f04f 0800 	movne.w	r8, #0
		if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
 800e3ac:	f1b8 0f00 	cmp.w	r8, #0
 800e3b0:	d120      	bne.n	800e3f4 <net_if_ipv6_prefix_lookup+0xa4>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
 800e3b2:	3401      	adds	r4, #1
 800e3b4:	2c01      	cmp	r4, #1
 800e3b6:	dc23      	bgt.n	800e400 <net_if_ipv6_prefix_lookup+0xb0>
		if (!ipv6->prefix[i].is_used) {
 800e3b8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800e3bc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800e3c0:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 800e3c4:	f3c3 0840 	ubfx	r8, r3, #1, #1
 800e3c8:	f013 0f02 	tst.w	r3, #2
 800e3cc:	d0f1      	beq.n	800e3b2 <net_if_ipv6_prefix_lookup+0x62>
		if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
 800e3ce:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800e3d2:	00c0      	lsls	r0, r0, #3
 800e3d4:	30b8      	adds	r0, #184	; 0xb8
 800e3d6:	eb05 0900 	add.w	r9, r5, r0
	uint8_t bytes = length / 8U;
 800e3da:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
	uint8_t remain = bits % 8;
 800e3de:	4273      	negs	r3, r6
 800e3e0:	f003 0b07 	and.w	fp, r3, #7
	if (length > 128) {
 800e3e4:	2e80      	cmp	r6, #128	; 0x80
 800e3e6:	d9c5      	bls.n	800e374 <net_if_ipv6_prefix_lookup+0x24>
		return false;
 800e3e8:	f04f 0800 	mov.w	r8, #0
 800e3ec:	e7de      	b.n	800e3ac <net_if_ipv6_prefix_lookup+0x5c>
		return false;
 800e3ee:	f04f 0800 	mov.w	r8, #0
 800e3f2:	e7db      	b.n	800e3ac <net_if_ipv6_prefix_lookup+0x5c>
			prefix = &ipv6->prefix[i];
 800e3f4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800e3f8:	00db      	lsls	r3, r3, #3
 800e3fa:	33a8      	adds	r3, #168	; 0xa8
 800e3fc:	441d      	add	r5, r3
			goto out;
 800e3fe:	e000      	b.n	800e402 <net_if_ipv6_prefix_lookup+0xb2>
	struct net_if_ipv6_prefix *prefix = NULL;
 800e400:	2500      	movs	r5, #0
	return z_impl_k_mutex_unlock(mutex);
 800e402:	4803      	ldr	r0, [pc, #12]	; (800e410 <net_if_ipv6_prefix_lookup+0xc0>)
 800e404:	f007 fb14 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800e408:	4628      	mov	r0, r5
 800e40a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e40e:	bf00      	nop
 800e410:	20001094 	.word	0x20001094

0800e414 <net_if_ipv6_addr_onlink>:
{
 800e414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e418:	b083      	sub	sp, #12
 800e41a:	4680      	mov	r8, r0
 800e41c:	9101      	str	r1, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
 800e41e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e426:	4838      	ldr	r0, [pc, #224]	; (800e508 <net_if_ipv6_addr_onlink+0xf4>)
 800e428:	f007 fa78 	bl	801591c <z_impl_k_mutex_lock>
	STRUCT_SECTION_FOREACH(net_if, tmp) {
 800e42c:	4d37      	ldr	r5, [pc, #220]	; (800e50c <net_if_ipv6_addr_onlink+0xf8>)
 800e42e:	e050      	b.n	800e4d2 <net_if_ipv6_addr_onlink+0xbe>
	if (memcmp(addr1, addr2, bytes)) {
 800e430:	465a      	mov	r2, fp
 800e432:	9901      	ldr	r1, [sp, #4]
 800e434:	4638      	mov	r0, r7
 800e436:	f00e f9f1 	bl	801c81c <memcmp>
 800e43a:	2800      	cmp	r0, #0
 800e43c:	d13e      	bne.n	800e4bc <net_if_ipv6_addr_onlink+0xa8>
	if (!remain) {
 800e43e:	f1ba 0f00 	cmp.w	sl, #0
 800e442:	d014      	beq.n	800e46e <net_if_ipv6_addr_onlink+0x5a>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
 800e444:	f1ca 0208 	rsb	r2, sl, #8
 800e448:	23ff      	movs	r3, #255	; 0xff
 800e44a:	4093      	lsls	r3, r2
 800e44c:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 800e450:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
 800e454:	f817 300b 	ldrb.w	r3, [r7, fp]
 800e458:	9a01      	ldr	r2, [sp, #4]
 800e45a:	f812 200b 	ldrb.w	r2, [r2, fp]
 800e45e:	4053      	eors	r3, r2
 800e460:	ea1a 0f03 	tst.w	sl, r3
 800e464:	bf0c      	ite	eq
 800e466:	f04f 0901 	moveq.w	r9, #1
 800e46a:	f04f 0900 	movne.w	r9, #0
			if (ipv6->prefix[i].is_used &&
 800e46e:	f1b9 0f00 	cmp.w	r9, #0
 800e472:	d126      	bne.n	800e4c2 <net_if_ipv6_addr_onlink+0xae>
		for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
 800e474:	3401      	adds	r4, #1
 800e476:	2c01      	cmp	r4, #1
 800e478:	dc29      	bgt.n	800e4ce <net_if_ipv6_addr_onlink+0xba>
			if (ipv6->prefix[i].is_used &&
 800e47a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800e47e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800e482:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 800e486:	f3c3 0940 	ubfx	r9, r3, #1, #1
 800e48a:	f013 0f02 	tst.w	r3, #2
 800e48e:	d0f1      	beq.n	800e474 <net_if_ipv6_addr_onlink+0x60>
			    net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
 800e490:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 800e494:	00ff      	lsls	r7, r7, #3
 800e496:	37b8      	adds	r7, #184	; 0xb8
 800e498:	4437      	add	r7, r6
 800e49a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800e49e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800e4a2:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
	uint8_t bytes = length / 8U;
 800e4a6:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	uint8_t remain = bits % 8;
 800e4aa:	f1c3 0a00 	rsb	sl, r3, #0
 800e4ae:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
 800e4b2:	2b80      	cmp	r3, #128	; 0x80
 800e4b4:	d9bc      	bls.n	800e430 <net_if_ipv6_addr_onlink+0x1c>
		return false;
 800e4b6:	f04f 0900 	mov.w	r9, #0
 800e4ba:	e7d8      	b.n	800e46e <net_if_ipv6_addr_onlink+0x5a>
		return false;
 800e4bc:	f04f 0900 	mov.w	r9, #0
 800e4c0:	e7d5      	b.n	800e46e <net_if_ipv6_addr_onlink+0x5a>
				if (iface) {
 800e4c2:	f1b8 0f00 	cmp.w	r8, #0
 800e4c6:	d017      	beq.n	800e4f8 <net_if_ipv6_addr_onlink+0xe4>
					*iface = tmp;
 800e4c8:	f8c8 5000 	str.w	r5, [r8]
				goto out;
 800e4cc:	e014      	b.n	800e4f8 <net_if_ipv6_addr_onlink+0xe4>
	STRUCT_SECTION_FOREACH(net_if, tmp) {
 800e4ce:	f505 7506 	add.w	r5, r5, #536	; 0x218
 800e4d2:	4b0f      	ldr	r3, [pc, #60]	; (800e510 <net_if_ipv6_addr_onlink+0xfc>)
 800e4d4:	429d      	cmp	r5, r3
 800e4d6:	d20d      	bcs.n	800e4f4 <net_if_ipv6_addr_onlink+0xe0>
		struct net_if_ipv6 *ipv6 = tmp->config.ip.ipv6;
 800e4d8:	f8d5 6210 	ldr.w	r6, [r5, #528]	; 0x210
		if (iface && *iface && *iface != tmp) {
 800e4dc:	f1b8 0f00 	cmp.w	r8, #0
 800e4e0:	d004      	beq.n	800e4ec <net_if_ipv6_addr_onlink+0xd8>
 800e4e2:	f8d8 3000 	ldr.w	r3, [r8]
 800e4e6:	b10b      	cbz	r3, 800e4ec <net_if_ipv6_addr_onlink+0xd8>
 800e4e8:	42ab      	cmp	r3, r5
 800e4ea:	d1f0      	bne.n	800e4ce <net_if_ipv6_addr_onlink+0xba>
		if (!ipv6) {
 800e4ec:	2e00      	cmp	r6, #0
 800e4ee:	d0ee      	beq.n	800e4ce <net_if_ipv6_addr_onlink+0xba>
		for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
 800e4f0:	2400      	movs	r4, #0
 800e4f2:	e7c0      	b.n	800e476 <net_if_ipv6_addr_onlink+0x62>
	bool ret = false;
 800e4f4:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_mutex_unlock(mutex);
 800e4f8:	4803      	ldr	r0, [pc, #12]	; (800e508 <net_if_ipv6_addr_onlink+0xf4>)
 800e4fa:	f007 fa99 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800e4fe:	4648      	mov	r0, r9
 800e500:	b003      	add	sp, #12
 800e502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e506:	bf00      	nop
 800e508:	20001094 	.word	0x20001094
 800e50c:	200011c8 	.word	0x200011c8
 800e510:	200013e0 	.word	0x200013e0

0800e514 <net_if_ipv6_prefix_rm>:
{
 800e514:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e518:	4607      	mov	r7, r0
 800e51a:	4688      	mov	r8, r1
 800e51c:	4691      	mov	r9, r2
	return z_impl_k_mutex_lock(mutex, timeout);
 800e51e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e526:	482a      	ldr	r0, [pc, #168]	; (800e5d0 <net_if_ipv6_prefix_rm+0xbc>)
 800e528:	f007 f9f8 	bl	801591c <z_impl_k_mutex_lock>
	ipv6 = iface->config.ip.ipv6;
 800e52c:	f8d7 6210 	ldr.w	r6, [r7, #528]	; 0x210
	if (!ipv6) {
 800e530:	2e00      	cmp	r6, #0
 800e532:	d04a      	beq.n	800e5ca <net_if_ipv6_prefix_rm+0xb6>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
 800e534:	2400      	movs	r4, #0
 800e536:	e000      	b.n	800e53a <net_if_ipv6_prefix_rm+0x26>
 800e538:	3401      	adds	r4, #1
 800e53a:	2c01      	cmp	r4, #1
 800e53c:	dc3d      	bgt.n	800e5ba <net_if_ipv6_prefix_rm+0xa6>
		if (!ipv6->prefix[i].is_used) {
 800e53e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800e542:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800e546:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 800e54a:	f3c3 0a40 	ubfx	sl, r3, #1, #1
 800e54e:	f013 0f02 	tst.w	r3, #2
 800e552:	d0f1      	beq.n	800e538 <net_if_ipv6_prefix_rm+0x24>
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
 800e554:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 800e558:	00ed      	lsls	r5, r5, #3
 800e55a:	35b8      	adds	r5, #184	; 0xb8
 800e55c:	4435      	add	r5, r6
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 800e55e:	2210      	movs	r2, #16
 800e560:	4641      	mov	r1, r8
 800e562:	4628      	mov	r0, r5
 800e564:	f00e f95a 	bl	801c81c <memcmp>
 800e568:	2800      	cmp	r0, #0
 800e56a:	d1e5      	bne.n	800e538 <net_if_ipv6_prefix_rm+0x24>
		    ipv6->prefix[i].len != len) {
 800e56c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800e570:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800e574:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
		if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
 800e578:	454b      	cmp	r3, r9
 800e57a:	d1dd      	bne.n	800e538 <net_if_ipv6_prefix_rm+0x24>
		net_if_ipv6_prefix_unset_timer(&ipv6->prefix[i]);
 800e57c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e580:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800e584:	00c0      	lsls	r0, r0, #3
 800e586:	30a8      	adds	r0, #168	; 0xa8
 800e588:	4430      	add	r0, r6
 800e58a:	f00b f98a 	bl	80198a2 <net_if_ipv6_prefix_unset_timer>
		ipv6->prefix[i].is_used = false;
 800e58e:	445c      	add	r4, fp
 800e590:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800e594:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
 800e598:	f36f 0341 	bfc	r3, #1, #1
 800e59c:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
		remove_prefix_addresses(iface, ipv6, addr, len);
 800e5a0:	464b      	mov	r3, r9
 800e5a2:	4642      	mov	r2, r8
 800e5a4:	4631      	mov	r1, r6
 800e5a6:	4638      	mov	r0, r7
 800e5a8:	f00b f90d 	bl	80197c6 <remove_prefix_addresses>
		net_mgmt_event_notify_with_info(
 800e5ac:	2310      	movs	r3, #16
 800e5ae:	462a      	mov	r2, r5
 800e5b0:	4639      	mov	r1, r7
 800e5b2:	4808      	ldr	r0, [pc, #32]	; (800e5d4 <net_if_ipv6_prefix_rm+0xc0>)
 800e5b4:	f001 f920 	bl	800f7f8 <net_mgmt_event_notify_with_info>
		goto out;
 800e5b8:	e001      	b.n	800e5be <net_if_ipv6_prefix_rm+0xaa>
	bool ret = false;
 800e5ba:	f04f 0a00 	mov.w	sl, #0
	return z_impl_k_mutex_unlock(mutex);
 800e5be:	4804      	ldr	r0, [pc, #16]	; (800e5d0 <net_if_ipv6_prefix_rm+0xbc>)
 800e5c0:	f007 fa36 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800e5c4:	4650      	mov	r0, sl
 800e5c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool ret = false;
 800e5ca:	f04f 0a00 	mov.w	sl, #0
 800e5ce:	e7f6      	b.n	800e5be <net_if_ipv6_prefix_rm+0xaa>
 800e5d0:	20001094 	.word	0x20001094
 800e5d4:	e0600006 	.word	0xe0600006

0800e5d8 <net_if_ipv6_get_hop_limit>:
{
 800e5d8:	b510      	push	{r4, lr}
 800e5da:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800e5dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e5e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5e4:	4807      	ldr	r0, [pc, #28]	; (800e604 <net_if_ipv6_get_hop_limit+0x2c>)
 800e5e6:	f007 f999 	bl	801591c <z_impl_k_mutex_lock>
	if (!iface->config.ip.ipv6) {
 800e5ea:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800e5ee:	b133      	cbz	r3, 800e5fe <net_if_ipv6_get_hop_limit+0x26>
	ret = iface->config.ip.ipv6->hop_limit;
 800e5f0:	f893 410d 	ldrb.w	r4, [r3, #269]	; 0x10d
	return z_impl_k_mutex_unlock(mutex);
 800e5f4:	4803      	ldr	r0, [pc, #12]	; (800e604 <net_if_ipv6_get_hop_limit+0x2c>)
 800e5f6:	f007 fa1b 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	bd10      	pop	{r4, pc}
	int ret = 0;
 800e5fe:	2400      	movs	r4, #0
 800e600:	e7f8      	b.n	800e5f4 <net_if_ipv6_get_hop_limit+0x1c>
 800e602:	bf00      	nop
 800e604:	20001094 	.word	0x20001094

0800e608 <net_ipv6_set_hop_limit>:
{
 800e608:	b538      	push	{r3, r4, r5, lr}
 800e60a:	4604      	mov	r4, r0
 800e60c:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800e60e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e616:	4806      	ldr	r0, [pc, #24]	; (800e630 <net_ipv6_set_hop_limit+0x28>)
 800e618:	f007 f980 	bl	801591c <z_impl_k_mutex_lock>
	if (!iface->config.ip.ipv6) {
 800e61c:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 800e620:	b10b      	cbz	r3, 800e626 <net_ipv6_set_hop_limit+0x1e>
	iface->config.ip.ipv6->hop_limit = hop_limit;
 800e622:	f883 510d 	strb.w	r5, [r3, #269]	; 0x10d
	return z_impl_k_mutex_unlock(mutex);
 800e626:	4802      	ldr	r0, [pc, #8]	; (800e630 <net_ipv6_set_hop_limit+0x28>)
 800e628:	f007 fa02 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800e62c:	bd38      	pop	{r3, r4, r5, pc}
 800e62e:	bf00      	nop
 800e630:	20001094 	.word	0x20001094

0800e634 <net_if_ipv6_get_ll>:
{
 800e634:	b538      	push	{r3, r4, r5, lr}
 800e636:	4604      	mov	r4, r0
 800e638:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800e63a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e63e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e642:	481b      	ldr	r0, [pc, #108]	; (800e6b0 <net_if_ipv6_get_ll+0x7c>)
 800e644:	f007 f96a 	bl	801591c <z_impl_k_mutex_lock>
	ipv6 = iface->config.ip.ipv6;
 800e648:	f8d4 4210 	ldr.w	r4, [r4, #528]	; 0x210
	if (!ipv6) {
 800e64c:	b35c      	cbz	r4, 800e6a6 <net_if_ipv6_get_ll+0x72>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 800e64e:	2300      	movs	r3, #0
 800e650:	e000      	b.n	800e654 <net_if_ipv6_get_ll+0x20>
 800e652:	3301      	adds	r3, #1
 800e654:	2b01      	cmp	r3, #1
 800e656:	dc25      	bgt.n	800e6a4 <net_if_ipv6_get_ll+0x70>
		if (!ipv6->unicast[i].is_used ||
 800e658:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e65c:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 800e660:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800e664:	f012 0f02 	tst.w	r2, #2
 800e668:	d0f3      	beq.n	800e652 <net_if_ipv6_get_ll+0x1e>
 800e66a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800e66e:	d007      	beq.n	800e680 <net_if_ipv6_get_ll+0x4c>
		     ipv6->unicast[i].addr_state != addr_state) ||
 800e670:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e674:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 800e678:	f992 202d 	ldrsb.w	r2, [r2, #45]	; 0x2d
		    (addr_state != NET_ADDR_ANY_STATE &&
 800e67c:	42aa      	cmp	r2, r5
 800e67e:	d1e8      	bne.n	800e652 <net_if_ipv6_get_ll+0x1e>
		    ipv6->unicast[i].address.family != AF_INET6) {
 800e680:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e684:	0112      	lsls	r2, r2, #4
 800e686:	5aa2      	ldrh	r2, [r4, r2]
		     ipv6->unicast[i].addr_state != addr_state) ||
 800e688:	2a02      	cmp	r2, #2
 800e68a:	d1e2      	bne.n	800e652 <net_if_ipv6_get_ll+0x1e>
		if (net_ipv6_is_ll_addr(&ipv6->unicast[i].address.in6_addr)) {
 800e68c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800e690:	eb04 1202 	add.w	r2, r4, r2, lsl #4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
 800e694:	f832 0f04 	ldrh.w	r0, [r2, #4]!
 800e698:	f248 01fe 	movw	r1, #33022	; 0x80fe
 800e69c:	4288      	cmp	r0, r1
 800e69e:	d1d8      	bne.n	800e652 <net_if_ipv6_get_ll+0x1e>
			addr = &ipv6->unicast[i].address.in6_addr;
 800e6a0:	4614      	mov	r4, r2
 800e6a2:	e000      	b.n	800e6a6 <net_if_ipv6_get_ll+0x72>
	struct in6_addr *addr = NULL;
 800e6a4:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
 800e6a6:	4802      	ldr	r0, [pc, #8]	; (800e6b0 <net_if_ipv6_get_ll+0x7c>)
 800e6a8:	f007 f9c2 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800e6ac:	4620      	mov	r0, r4
 800e6ae:	bd38      	pop	{r3, r4, r5, pc}
 800e6b0:	20001094 	.word	0x20001094

0800e6b4 <net_if_ipv6_select_src_addr>:
{
 800e6b4:	b570      	push	{r4, r5, r6, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	4606      	mov	r6, r0
 800e6ba:	460c      	mov	r4, r1
	uint8_t best_match = 0U;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	f88d 3007 	strb.w	r3, [sp, #7]
	return z_impl_k_mutex_lock(mutex, timeout);
 800e6c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e6c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e6ca:	4829      	ldr	r0, [pc, #164]	; (800e770 <net_if_ipv6_select_src_addr+0xbc>)
 800e6cc:	f007 f926 	bl	801591c <z_impl_k_mutex_lock>
 800e6d0:	8822      	ldrh	r2, [r4, #0]
	if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast_link(dst)) {
 800e6d2:	f248 03fe 	movw	r3, #33022	; 0x80fe
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d029      	beq.n	800e72e <net_if_ipv6_select_src_addr+0x7a>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 800e6da:	7823      	ldrb	r3, [r4, #0]
 800e6dc:	2bff      	cmp	r3, #255	; 0xff
 800e6de:	d00a      	beq.n	800e6f6 <net_if_ipv6_select_src_addr+0x42>
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	bb23      	cbnz	r3, 800e72e <net_if_ipv6_select_src_addr+0x7a>
		if (dst_iface) {
 800e6e4:	b1fe      	cbz	r6, 800e726 <net_if_ipv6_select_src_addr+0x72>
			src = net_if_ipv6_get_best_match(dst_iface, dst,
 800e6e6:	f10d 0207 	add.w	r2, sp, #7
 800e6ea:	4621      	mov	r1, r4
 800e6ec:	4630      	mov	r0, r6
 800e6ee:	f7fe f873 	bl	800c7d8 <net_if_ipv6_get_best_match>
 800e6f2:	4605      	mov	r5, r0
 800e6f4:	e021      	b.n	800e73a <net_if_ipv6_select_src_addr+0x86>
 800e6f6:	7863      	ldrb	r3, [r4, #1]
 800e6f8:	2b02      	cmp	r3, #2
 800e6fa:	d001      	beq.n	800e700 <net_if_ipv6_select_src_addr+0x4c>
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	e7f0      	b.n	800e6e2 <net_if_ipv6_select_src_addr+0x2e>
 800e700:	2301      	movs	r3, #1
 800e702:	e7ee      	b.n	800e6e2 <net_if_ipv6_select_src_addr+0x2e>
			STRUCT_SECTION_FOREACH(net_if, iface) {
 800e704:	f505 7506 	add.w	r5, r5, #536	; 0x218
 800e708:	461e      	mov	r6, r3
 800e70a:	4b1a      	ldr	r3, [pc, #104]	; (800e774 <net_if_ipv6_select_src_addr+0xc0>)
 800e70c:	429d      	cmp	r5, r3
 800e70e:	d20c      	bcs.n	800e72a <net_if_ipv6_select_src_addr+0x76>
				addr = net_if_ipv6_get_best_match(iface, dst,
 800e710:	f10d 0207 	add.w	r2, sp, #7
 800e714:	4621      	mov	r1, r4
 800e716:	4628      	mov	r0, r5
 800e718:	f7fe f85e 	bl	800c7d8 <net_if_ipv6_get_best_match>
				if (addr) {
 800e71c:	4603      	mov	r3, r0
 800e71e:	2800      	cmp	r0, #0
 800e720:	d1f0      	bne.n	800e704 <net_if_ipv6_select_src_addr+0x50>
 800e722:	4633      	mov	r3, r6
 800e724:	e7ee      	b.n	800e704 <net_if_ipv6_select_src_addr+0x50>
			STRUCT_SECTION_FOREACH(net_if, iface) {
 800e726:	4d14      	ldr	r5, [pc, #80]	; (800e778 <net_if_ipv6_select_src_addr+0xc4>)
 800e728:	e7ef      	b.n	800e70a <net_if_ipv6_select_src_addr+0x56>
 800e72a:	4635      	mov	r5, r6
 800e72c:	e005      	b.n	800e73a <net_if_ipv6_select_src_addr+0x86>
		if (dst_iface) {
 800e72e:	b15e      	cbz	r6, 800e748 <net_if_ipv6_select_src_addr+0x94>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
 800e730:	2101      	movs	r1, #1
 800e732:	4630      	mov	r0, r6
 800e734:	f7ff ff7e 	bl	800e634 <net_if_ipv6_get_ll>
 800e738:	4605      	mov	r5, r0
	if (!src) {
 800e73a:	b1ad      	cbz	r5, 800e768 <net_if_ipv6_select_src_addr+0xb4>
	return z_impl_k_mutex_unlock(mutex);
 800e73c:	480c      	ldr	r0, [pc, #48]	; (800e770 <net_if_ipv6_select_src_addr+0xbc>)
 800e73e:	f007 f977 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800e742:	4628      	mov	r0, r5
 800e744:	b002      	add	sp, #8
 800e746:	bd70      	pop	{r4, r5, r6, pc}
			STRUCT_SECTION_FOREACH(net_if, iface) {
 800e748:	4c0b      	ldr	r4, [pc, #44]	; (800e778 <net_if_ipv6_select_src_addr+0xc4>)
 800e74a:	4b0a      	ldr	r3, [pc, #40]	; (800e774 <net_if_ipv6_select_src_addr+0xc0>)
 800e74c:	429c      	cmp	r4, r3
 800e74e:	d209      	bcs.n	800e764 <net_if_ipv6_select_src_addr+0xb0>
				addr = net_if_ipv6_get_ll(iface,
 800e750:	2101      	movs	r1, #1
 800e752:	4620      	mov	r0, r4
 800e754:	f7ff ff6e 	bl	800e634 <net_if_ipv6_get_ll>
				if (addr) {
 800e758:	4605      	mov	r5, r0
 800e75a:	2800      	cmp	r0, #0
 800e75c:	d1ed      	bne.n	800e73a <net_if_ipv6_select_src_addr+0x86>
			STRUCT_SECTION_FOREACH(net_if, iface) {
 800e75e:	f504 7406 	add.w	r4, r4, #536	; 0x218
 800e762:	e7f2      	b.n	800e74a <net_if_ipv6_select_src_addr+0x96>
	const struct in6_addr *src = NULL;
 800e764:	4635      	mov	r5, r6
 800e766:	e7e8      	b.n	800e73a <net_if_ipv6_select_src_addr+0x86>
		src = net_ipv6_unspecified_address();
 800e768:	f000 ff20 	bl	800f5ac <net_ipv6_unspecified_address>
 800e76c:	4605      	mov	r5, r0
		goto out;
 800e76e:	e7e5      	b.n	800e73c <net_if_ipv6_select_src_addr+0x88>
 800e770:	20001094 	.word	0x20001094
 800e774:	200013e0 	.word	0x200013e0
 800e778:	200011c8 	.word	0x200011c8

0800e77c <net_if_ipv6_calc_reachable_time>:
{
 800e77c:	b570      	push	{r4, r5, r6, lr}
 800e77e:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800e780:	4e0c      	ldr	r6, [pc, #48]	; (800e7b4 <net_if_ipv6_calc_reachable_time+0x38>)
 800e782:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e78a:	4630      	mov	r0, r6
 800e78c:	f007 f8c6 	bl	801591c <z_impl_k_mutex_lock>
	min_reachable = (MIN_RANDOM_NUMER * ipv6->base_reachable_time)
 800e790:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
 800e794:	0845      	lsrs	r5, r0, #1
	max_reachable = (MAX_RANDOM_NUMER * ipv6->base_reachable_time)
 800e796:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800e79a:	0844      	lsrs	r4, r0, #1
	return z_impl_k_mutex_unlock(mutex);
 800e79c:	4630      	mov	r0, r6
 800e79e:	f007 f947 	bl	8015a30 <z_impl_k_mutex_unlock>
 800e7a2:	f005 fe41 	bl	8014428 <z_impl_sys_rand32_get>
	       sys_rand32_get() % (max_reachable - min_reachable);
 800e7a6:	1b63      	subs	r3, r4, r5
 800e7a8:	fbb0 f2f3 	udiv	r2, r0, r3
 800e7ac:	fb03 0012 	mls	r0, r3, r2, r0
}
 800e7b0:	4428      	add	r0, r5
 800e7b2:	bd70      	pop	{r4, r5, r6, pc}
 800e7b4:	20001094 	.word	0x20001094

0800e7b8 <iface_ipv6_init>:
{
 800e7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7ba:	b089      	sub	sp, #36	; 0x24
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	4605      	mov	r5, r0
	k_work_init_delayable(&dad_timer, dad_timeout);
 800e7c0:	4948      	ldr	r1, [pc, #288]	; (800e8e4 <iface_ipv6_init+0x12c>)
 800e7c2:	4849      	ldr	r0, [pc, #292]	; (800e8e8 <iface_ipv6_init+0x130>)
 800e7c4:	f00d fc98 	bl	801c0f8 <k_work_init_delayable>
	list->head = NULL;
 800e7c8:	4b48      	ldr	r3, [pc, #288]	; (800e8ec <iface_ipv6_init+0x134>)
 800e7ca:	2400      	movs	r4, #0
 800e7cc:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
 800e7ce:	605c      	str	r4, [r3, #4]
	k_work_init_delayable(&rs_timer, rs_timeout);
 800e7d0:	4947      	ldr	r1, [pc, #284]	; (800e8f0 <iface_ipv6_init+0x138>)
 800e7d2:	4848      	ldr	r0, [pc, #288]	; (800e8f4 <iface_ipv6_init+0x13c>)
 800e7d4:	f00d fc90 	bl	801c0f8 <k_work_init_delayable>
	list->head = NULL;
 800e7d8:	4b47      	ldr	r3, [pc, #284]	; (800e8f8 <iface_ipv6_init+0x140>)
 800e7da:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
 800e7dc:	605c      	str	r4, [r3, #4]
	k_work_init_delayable(&address_lifetime_timer,
 800e7de:	4947      	ldr	r1, [pc, #284]	; (800e8fc <iface_ipv6_init+0x144>)
 800e7e0:	4847      	ldr	r0, [pc, #284]	; (800e900 <iface_ipv6_init+0x148>)
 800e7e2:	f00d fc89 	bl	801c0f8 <k_work_init_delayable>
	k_work_init_delayable(&prefix_lifetime_timer, prefix_lifetime_timeout);
 800e7e6:	4947      	ldr	r1, [pc, #284]	; (800e904 <iface_ipv6_init+0x14c>)
 800e7e8:	4847      	ldr	r0, [pc, #284]	; (800e908 <iface_ipv6_init+0x150>)
 800e7ea:	f00d fc85 	bl	801c0f8 <k_work_init_delayable>
	if (if_count > ARRAY_SIZE(ipv6_addresses)) {
 800e7ee:	2d01      	cmp	r5, #1
 800e7f0:	dd58      	ble.n	800e8a4 <iface_ipv6_init+0xec>
		NET_WARN("You have %lu IPv6 net_if addresses but %d "
 800e7f2:	466e      	mov	r6, sp
 800e7f4:	b088      	sub	sp, #32
 800e7f6:	4668      	mov	r0, sp
 800e7f8:	f110 030c 	adds.w	r3, r0, #12
 800e7fc:	d054      	beq.n	800e8a8 <iface_ipv6_init+0xf0>
 800e7fe:	2210      	movs	r2, #16
 800e800:	b11b      	cbz	r3, 800e80a <iface_ipv6_init+0x52>
 800e802:	2a04      	cmp	r2, #4
 800e804:	dd01      	ble.n	800e80a <iface_ipv6_init+0x52>
 800e806:	4941      	ldr	r1, [pc, #260]	; (800e90c <iface_ipv6_init+0x154>)
 800e808:	6101      	str	r1, [r0, #16]
 800e80a:	b11b      	cbz	r3, 800e814 <iface_ipv6_init+0x5c>
 800e80c:	2a08      	cmp	r2, #8
 800e80e:	dd01      	ble.n	800e814 <iface_ipv6_init+0x5c>
 800e810:	2101      	movs	r1, #1
 800e812:	6141      	str	r1, [r0, #20]
 800e814:	b113      	cbz	r3, 800e81c <iface_ipv6_init+0x64>
 800e816:	2a0c      	cmp	r2, #12
 800e818:	dd00      	ble.n	800e81c <iface_ipv6_init+0x64>
 800e81a:	6185      	str	r5, [r0, #24]
 800e81c:	2a0f      	cmp	r2, #15
 800e81e:	dd46      	ble.n	800e8ae <iface_ipv6_init+0xf6>
 800e820:	2110      	movs	r1, #16
 800e822:	b143      	cbz	r3, 800e836 <iface_ipv6_init+0x7e>
 800e824:	2300      	movs	r3, #0
 800e826:	f8a7 3005 	strh.w	r3, [r7, #5]
 800e82a:	71fb      	strb	r3, [r7, #7]
 800e82c:	2204      	movs	r2, #4
 800e82e:	713a      	strb	r2, [r7, #4]
 800e830:	71bb      	strb	r3, [r7, #6]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	60c3      	str	r3, [r0, #12]
 800e836:	2200      	movs	r2, #0
 800e838:	f36f 0200 	bfc	r2, #0, #1
 800e83c:	f36f 0241 	bfc	r2, #1, #1
 800e840:	f36f 0282 	bfc	r2, #2, #1
 800e844:	f36f 02c5 	bfc	r2, #3, #3
 800e848:	2402      	movs	r4, #2
 800e84a:	f364 1288 	bfi	r2, r4, #6, #3
 800e84e:	f401 737d 	and.w	r3, r1, #1012	; 0x3f4
 800e852:	f363 2252 	bfi	r2, r3, #9, #10
 800e856:	4d2e      	ldr	r5, [pc, #184]	; (800e910 <iface_ipv6_init+0x158>)
 800e858:	2300      	movs	r3, #0
 800e85a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800e85e:	4629      	mov	r1, r5
 800e860:	f009 fa77 	bl	8017d52 <z_log_msg2_finalize>
 800e864:	46b5      	mov	sp, r6
		NET_WARN("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT "
 800e866:	4b2b      	ldr	r3, [pc, #172]	; (800e914 <iface_ipv6_init+0x15c>)
 800e868:	61bb      	str	r3, [r7, #24]
 800e86a:	2300      	movs	r3, #0
 800e86c:	f8a7 3005 	strh.w	r3, [r7, #5]
 800e870:	71fb      	strb	r3, [r7, #7]
 800e872:	713c      	strb	r4, [r7, #4]
 800e874:	71bb      	strb	r3, [r7, #6]
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	617a      	str	r2, [r7, #20]
 800e87a:	461a      	mov	r2, r3
 800e87c:	f363 0200 	bfi	r2, r3, #0, #1
 800e880:	f363 0241 	bfi	r2, r3, #1, #1
 800e884:	f363 0282 	bfi	r2, r3, #2, #1
 800e888:	f363 02c5 	bfi	r2, r3, #3, #3
 800e88c:	f364 1288 	bfi	r2, r4, #6, #3
 800e890:	2108      	movs	r1, #8
 800e892:	f361 2252 	bfi	r2, r1, #9, #10
 800e896:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800e89a:	4629      	mov	r1, r5
 800e89c:	f107 0008 	add.w	r0, r7, #8
 800e8a0:	f009 fa57 	bl	8017d52 <z_log_msg2_finalize>
		NET_WARN("You have %lu IPv6 net_if addresses but %d "
 800e8a4:	2500      	movs	r5, #0
 800e8a6:	e017      	b.n	800e8d8 <iface_ipv6_init+0x120>
 800e8a8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800e8ac:	e7a8      	b.n	800e800 <iface_ipv6_init+0x48>
 800e8ae:	f06f 011b 	mvn.w	r1, #27
 800e8b2:	e7b6      	b.n	800e822 <iface_ipv6_init+0x6a>
		ipv6_addresses[i].ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
 800e8b4:	4b18      	ldr	r3, [pc, #96]	; (800e918 <iface_ipv6_init+0x160>)
 800e8b6:	f44f 748a 	mov.w	r4, #276	; 0x114
 800e8ba:	fb04 3405 	mla	r4, r4, r5, r3
 800e8be:	2340      	movs	r3, #64	; 0x40
 800e8c0:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
		ipv6_addresses[i].ipv6.base_reachable_time = REACHABLE_TIME;
 800e8c4:	f247 5330 	movw	r3, #30000	; 0x7530
 800e8c8:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
	ipv6->reachable_time = net_if_ipv6_calc_reachable_time(ipv6);
 800e8cc:	4620      	mov	r0, r4
 800e8ce:	f7ff ff55 	bl	800e77c <net_if_ipv6_calc_reachable_time>
 800e8d2:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
	for (i = 0; i < ARRAY_SIZE(ipv6_addresses); i++) {
 800e8d6:	3501      	adds	r5, #1
 800e8d8:	2d00      	cmp	r5, #0
 800e8da:	ddeb      	ble.n	800e8b4 <iface_ipv6_init+0xfc>
}
 800e8dc:	3724      	adds	r7, #36	; 0x24
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8e2:	bf00      	nop
 800e8e4:	0800d849 	.word	0x0800d849
 800e8e8:	20001c98 	.word	0x20001c98
 800e8ec:	200031b4 	.word	0x200031b4
 800e8f0:	0800d615 	.word	0x0800d615
 800e8f4:	20001d28 	.word	0x20001d28
 800e8f8:	200031cc 	.word	0x200031cc
 800e8fc:	0800d2dd 	.word	0x0800d2dd
 800e900:	20001c68 	.word	0x20001c68
 800e904:	0800e03d 	.word	0x0800e03d
 800e908:	20001cc8 	.word	0x20001cc8
 800e90c:	0801e24c 	.word	0x0801e24c
 800e910:	0801d778 	.word	0x0801d778
 800e914:	0801e28c 	.word	0x0801e28c
 800e918:	2000322c 	.word	0x2000322c

0800e91c <net_if_config_ipv4_get>:
{
 800e91c:	b538      	push	{r3, r4, r5, lr}
 800e91e:	4604      	mov	r4, r0
 800e920:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800e922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e92a:	481a      	ldr	r0, [pc, #104]	; (800e994 <net_if_config_ipv4_get+0x78>)
 800e92c:	f006 fff6 	bl	801591c <z_impl_k_mutex_lock>
	if (iface == NULL) {
 800e930:	b19c      	cbz	r4, 800e95a <net_if_config_ipv4_get+0x3e>
	return atomic_test_bit(iface->if_dev->flags, value);
 800e932:	6823      	ldr	r3, [r4, #0]
 800e934:	f3bf 8f5b 	dmb	ish
 800e938:	68db      	ldr	r3, [r3, #12]
 800e93a:	f3bf 8f5b 	dmb	ish
	if (!net_if_flag_is_set(iface, NET_IF_IPV4)) {
 800e93e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e942:	d00a      	beq.n	800e95a <net_if_config_ipv4_get+0x3e>
	if (iface->config.ip.ipv4) {
 800e944:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800e948:	b1eb      	cbz	r3, 800e986 <net_if_config_ipv4_get+0x6a>
		if (ipv4) {
 800e94a:	b105      	cbz	r5, 800e94e <net_if_config_ipv4_get+0x32>
			*ipv4 = iface->config.ip.ipv4;
 800e94c:	602b      	str	r3, [r5, #0]
	int ret = 0;
 800e94e:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
 800e950:	4810      	ldr	r0, [pc, #64]	; (800e994 <net_if_config_ipv4_get+0x78>)
 800e952:	f007 f86d 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800e956:	4620      	mov	r0, r4
 800e958:	bd38      	pop	{r3, r4, r5, pc}
		ret = -ENOTSUP;
 800e95a:	f06f 0485 	mvn.w	r4, #133	; 0x85
		goto out;
 800e95e:	e7f7      	b.n	800e950 <net_if_config_ipv4_get+0x34>
		if (ipv4_addresses[i].iface) {
 800e960:	490d      	ldr	r1, [pc, #52]	; (800e998 <net_if_config_ipv4_get+0x7c>)
 800e962:	2258      	movs	r2, #88	; 0x58
 800e964:	fb02 1203 	mla	r2, r2, r3, r1
 800e968:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e96a:	b10a      	cbz	r2, 800e970 <net_if_config_ipv4_get+0x54>
	for (i = 0; i < ARRAY_SIZE(ipv4_addresses); i++) {
 800e96c:	3301      	adds	r3, #1
 800e96e:	e00b      	b.n	800e988 <net_if_config_ipv4_get+0x6c>
		iface->config.ip.ipv4 = &ipv4_addresses[i].ipv4;
 800e970:	4a09      	ldr	r2, [pc, #36]	; (800e998 <net_if_config_ipv4_get+0x7c>)
 800e972:	2158      	movs	r1, #88	; 0x58
 800e974:	fb01 2303 	mla	r3, r1, r3, r2
 800e978:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
		ipv4_addresses[i].iface = iface;
 800e97c:	655c      	str	r4, [r3, #84]	; 0x54
		if (ipv4) {
 800e97e:	b105      	cbz	r5, 800e982 <net_if_config_ipv4_get+0x66>
			*ipv4 = &ipv4_addresses[i].ipv4;
 800e980:	602b      	str	r3, [r5, #0]
	int ret = 0;
 800e982:	2400      	movs	r4, #0
		goto out;
 800e984:	e7e4      	b.n	800e950 <net_if_config_ipv4_get+0x34>
	for (i = 0; i < ARRAY_SIZE(ipv4_addresses); i++) {
 800e986:	2300      	movs	r3, #0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	dde9      	ble.n	800e960 <net_if_config_ipv4_get+0x44>
	ret = -ESRCH;
 800e98c:	f06f 0402 	mvn.w	r4, #2
 800e990:	e7de      	b.n	800e950 <net_if_config_ipv4_get+0x34>
 800e992:	bf00      	nop
 800e994:	20001094 	.word	0x20001094
 800e998:	200031d4 	.word	0x200031d4

0800e99c <net_if_ipv4_get_ttl>:
{
 800e99c:	b510      	push	{r4, lr}
 800e99e:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800e9a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9a8:	4807      	ldr	r0, [pc, #28]	; (800e9c8 <net_if_ipv4_get_ttl+0x2c>)
 800e9aa:	f006 ffb7 	bl	801591c <z_impl_k_mutex_lock>
	if (!iface->config.ip.ipv4) {
 800e9ae:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800e9b2:	b133      	cbz	r3, 800e9c2 <net_if_ipv4_get_ttl+0x26>
	ret = iface->config.ip.ipv4->ttl;
 800e9b4:	f893 4050 	ldrb.w	r4, [r3, #80]	; 0x50
	return z_impl_k_mutex_unlock(mutex);
 800e9b8:	4803      	ldr	r0, [pc, #12]	; (800e9c8 <net_if_ipv4_get_ttl+0x2c>)
 800e9ba:	f007 f839 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800e9be:	4620      	mov	r0, r4
 800e9c0:	bd10      	pop	{r4, pc}
	int ret = 0;
 800e9c2:	2400      	movs	r4, #0
 800e9c4:	e7f8      	b.n	800e9b8 <net_if_ipv4_get_ttl+0x1c>
 800e9c6:	bf00      	nop
 800e9c8:	20001094 	.word	0x20001094

0800e9cc <net_if_ipv4_addr_mask_cmp>:
{
 800e9cc:	b538      	push	{r3, r4, r5, lr}
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800e9d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9da:	4818      	ldr	r0, [pc, #96]	; (800ea3c <net_if_ipv4_addr_mask_cmp+0x70>)
 800e9dc:	f006 ff9e 	bl	801591c <z_impl_k_mutex_lock>
	ipv4 = iface->config.ip.ipv4;
 800e9e0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
	if (!ipv4) {
 800e9e4:	b92b      	cbnz	r3, 800e9f2 <net_if_ipv4_addr_mask_cmp+0x26>
	bool ret = false;
 800e9e6:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
 800e9e8:	4814      	ldr	r0, [pc, #80]	; (800ea3c <net_if_ipv4_addr_mask_cmp+0x70>)
 800e9ea:	f007 f821 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	bd38      	pop	{r3, r4, r5, pc}
	subnet = UNALIGNED_GET(&addr->s_addr) & ipv4->netmask.s_addr;
 800e9f2:	682a      	ldr	r2, [r5, #0]
 800e9f4:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800e9f6:	ea05 0002 	and.w	r0, r5, r2
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	2a00      	cmp	r2, #0
 800e9fe:	dd01      	ble.n	800ea04 <net_if_ipv4_addr_mask_cmp+0x38>
	bool ret = false;
 800ea00:	2400      	movs	r4, #0
out:
 800ea02:	e7f1      	b.n	800e9e8 <net_if_ipv4_addr_mask_cmp+0x1c>
		if (!ipv4->unicast[i].is_used ||
 800ea04:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800ea08:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800ea0c:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
 800ea10:	f3c1 0440 	ubfx	r4, r1, #1, #1
 800ea14:	f011 0f02 	tst.w	r1, #2
 800ea18:	d00d      	beq.n	800ea36 <net_if_ipv4_addr_mask_cmp+0x6a>
		    ipv4->unicast[i].address.family != AF_INET) {
 800ea1a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800ea1e:	0109      	lsls	r1, r1, #4
 800ea20:	5a59      	ldrh	r1, [r3, r1]
		if (!ipv4->unicast[i].is_used ||
 800ea22:	2901      	cmp	r1, #1
 800ea24:	d107      	bne.n	800ea36 <net_if_ipv4_addr_mask_cmp+0x6a>
		if ((ipv4->unicast[i].address.in_addr.s_addr &
 800ea26:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800ea2a:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800ea2e:	6849      	ldr	r1, [r1, #4]
 800ea30:	4029      	ands	r1, r5
 800ea32:	4281      	cmp	r1, r0
 800ea34:	d0d8      	beq.n	800e9e8 <net_if_ipv4_addr_mask_cmp+0x1c>
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
 800ea36:	3201      	adds	r2, #1
 800ea38:	e7e0      	b.n	800e9fc <net_if_ipv4_addr_mask_cmp+0x30>
 800ea3a:	bf00      	nop
 800ea3c:	20001094 	.word	0x20001094

0800ea40 <net_if_ipv4_is_addr_bcast>:
{
 800ea40:	b570      	push	{r4, r5, r6, lr}
 800ea42:	4604      	mov	r4, r0
 800ea44:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800ea46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea4e:	480f      	ldr	r0, [pc, #60]	; (800ea8c <net_if_ipv4_is_addr_bcast+0x4c>)
 800ea50:	f006 ff64 	bl	801591c <z_impl_k_mutex_lock>
	if (iface) {
 800ea54:	b914      	cbnz	r4, 800ea5c <net_if_ipv4_is_addr_bcast+0x1c>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800ea56:	4c0e      	ldr	r4, [pc, #56]	; (800ea90 <net_if_ipv4_is_addr_bcast+0x50>)
	bool ret = false;
 800ea58:	2600      	movs	r6, #0
 800ea5a:	e00b      	b.n	800ea74 <net_if_ipv4_is_addr_bcast+0x34>
		ret = ipv4_is_broadcast_address(iface, addr);
 800ea5c:	4629      	mov	r1, r5
 800ea5e:	4620      	mov	r0, r4
 800ea60:	f00a ff52 	bl	8019908 <ipv4_is_broadcast_address>
 800ea64:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
 800ea66:	4809      	ldr	r0, [pc, #36]	; (800ea8c <net_if_ipv4_is_addr_bcast+0x4c>)
 800ea68:	f006 ffe2 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800ea6c:	4630      	mov	r0, r6
 800ea6e:	bd70      	pop	{r4, r5, r6, pc}
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800ea70:	f504 7406 	add.w	r4, r4, #536	; 0x218
 800ea74:	4b07      	ldr	r3, [pc, #28]	; (800ea94 <net_if_ipv4_is_addr_bcast+0x54>)
 800ea76:	429c      	cmp	r4, r3
 800ea78:	d2f5      	bcs.n	800ea66 <net_if_ipv4_is_addr_bcast+0x26>
		ret = ipv4_is_broadcast_address(iface, addr);
 800ea7a:	4629      	mov	r1, r5
 800ea7c:	4620      	mov	r0, r4
 800ea7e:	f00a ff43 	bl	8019908 <ipv4_is_broadcast_address>
		if (ret) {
 800ea82:	4606      	mov	r6, r0
 800ea84:	2800      	cmp	r0, #0
 800ea86:	d0f3      	beq.n	800ea70 <net_if_ipv4_is_addr_bcast+0x30>
 800ea88:	e7ed      	b.n	800ea66 <net_if_ipv4_is_addr_bcast+0x26>
 800ea8a:	bf00      	nop
 800ea8c:	20001094 	.word	0x20001094
 800ea90:	200011c8 	.word	0x200011c8
 800ea94:	200013e0 	.word	0x200013e0

0800ea98 <net_if_ipv4_select_src_addr>:
{
 800ea98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea9a:	b083      	sub	sp, #12
 800ea9c:	4606      	mov	r6, r0
 800ea9e:	460d      	mov	r5, r1
	uint8_t best_match = 0U;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	f88d 3007 	strb.w	r3, [sp, #7]
	return z_impl_k_mutex_lock(mutex, timeout);
 800eaa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eaaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eaae:	482c      	ldr	r0, [pc, #176]	; (800eb60 <net_if_ipv4_select_src_addr+0xc8>)
 800eab0:	f006 ff34 	bl	801591c <z_impl_k_mutex_lock>
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xA9FE0000) == 0xA9FE0000;
 800eab4:	682a      	ldr	r2, [r5, #0]
 800eab6:	0a13      	lsrs	r3, r2, #8
 800eab8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eabc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800eac0:	0211      	lsls	r1, r2, #8
 800eac2:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 800eac6:	430b      	orrs	r3, r1
 800eac8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	if (!net_ipv4_is_ll_addr(dst)) {
 800eacc:	4a25      	ldr	r2, [pc, #148]	; (800eb64 <net_if_ipv4_select_src_addr+0xcc>)
 800eace:	ea32 0303 	bics.w	r3, r2, r3
 800ead2:	d022      	beq.n	800eb1a <net_if_ipv4_select_src_addr+0x82>
		if (dst_iface) {
 800ead4:	b1f6      	cbz	r6, 800eb14 <net_if_ipv4_select_src_addr+0x7c>
			src = net_if_ipv4_get_best_match(dst_iface, dst,
 800ead6:	f10d 0207 	add.w	r2, sp, #7
 800eada:	4629      	mov	r1, r5
 800eadc:	4630      	mov	r0, r6
 800eade:	f7fd fec9 	bl	800c874 <net_if_ipv4_get_best_match>
 800eae2:	4607      	mov	r7, r0
	if (!src) {
 800eae4:	b387      	cbz	r7, 800eb48 <net_if_ipv4_select_src_addr+0xb0>
	return z_impl_k_mutex_unlock(mutex);
 800eae6:	481e      	ldr	r0, [pc, #120]	; (800eb60 <net_if_ipv4_select_src_addr+0xc8>)
 800eae8:	f006 ffa2 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800eaec:	4638      	mov	r0, r7
 800eaee:	b003      	add	sp, #12
 800eaf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			STRUCT_SECTION_FOREACH(net_if, iface) {
 800eaf2:	f504 7406 	add.w	r4, r4, #536	; 0x218
 800eaf6:	461f      	mov	r7, r3
 800eaf8:	4b1b      	ldr	r3, [pc, #108]	; (800eb68 <net_if_ipv4_select_src_addr+0xd0>)
 800eafa:	429c      	cmp	r4, r3
 800eafc:	d2f2      	bcs.n	800eae4 <net_if_ipv4_select_src_addr+0x4c>
				addr = net_if_ipv4_get_best_match(iface, dst,
 800eafe:	f10d 0207 	add.w	r2, sp, #7
 800eb02:	4629      	mov	r1, r5
 800eb04:	4620      	mov	r0, r4
 800eb06:	f7fd feb5 	bl	800c874 <net_if_ipv4_get_best_match>
				if (addr) {
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	2800      	cmp	r0, #0
 800eb0e:	d1f0      	bne.n	800eaf2 <net_if_ipv4_select_src_addr+0x5a>
 800eb10:	463b      	mov	r3, r7
 800eb12:	e7ee      	b.n	800eaf2 <net_if_ipv4_select_src_addr+0x5a>
	const struct in_addr *src = NULL;
 800eb14:	4637      	mov	r7, r6
			STRUCT_SECTION_FOREACH(net_if, iface) {
 800eb16:	4c15      	ldr	r4, [pc, #84]	; (800eb6c <net_if_ipv4_select_src_addr+0xd4>)
 800eb18:	e7ee      	b.n	800eaf8 <net_if_ipv4_select_src_addr+0x60>
		if (dst_iface) {
 800eb1a:	b12e      	cbz	r6, 800eb28 <net_if_ipv4_select_src_addr+0x90>
			src = net_if_ipv4_get_ll(dst_iface, NET_ADDR_PREFERRED);
 800eb1c:	2101      	movs	r1, #1
 800eb1e:	4630      	mov	r0, r6
 800eb20:	f00a ff05 	bl	801992e <net_if_ipv4_get_ll>
 800eb24:	4607      	mov	r7, r0
 800eb26:	e7dd      	b.n	800eae4 <net_if_ipv4_select_src_addr+0x4c>
			STRUCT_SECTION_FOREACH(net_if, iface) {
 800eb28:	4c10      	ldr	r4, [pc, #64]	; (800eb6c <net_if_ipv4_select_src_addr+0xd4>)
 800eb2a:	4b0f      	ldr	r3, [pc, #60]	; (800eb68 <net_if_ipv4_select_src_addr+0xd0>)
 800eb2c:	429c      	cmp	r4, r3
 800eb2e:	d209      	bcs.n	800eb44 <net_if_ipv4_select_src_addr+0xac>
				addr = net_if_ipv4_get_ll(iface,
 800eb30:	2101      	movs	r1, #1
 800eb32:	4620      	mov	r0, r4
 800eb34:	f00a fefb 	bl	801992e <net_if_ipv4_get_ll>
				if (addr) {
 800eb38:	4607      	mov	r7, r0
 800eb3a:	2800      	cmp	r0, #0
 800eb3c:	d1d2      	bne.n	800eae4 <net_if_ipv4_select_src_addr+0x4c>
			STRUCT_SECTION_FOREACH(net_if, iface) {
 800eb3e:	f504 7406 	add.w	r4, r4, #536	; 0x218
 800eb42:	e7f2      	b.n	800eb2a <net_if_ipv4_select_src_addr+0x92>
	const struct in_addr *src = NULL;
 800eb44:	4637      	mov	r7, r6
 800eb46:	e7cd      	b.n	800eae4 <net_if_ipv4_select_src_addr+0x4c>
		src = net_if_ipv4_get_global_addr(dst_iface,
 800eb48:	2101      	movs	r1, #1
 800eb4a:	4630      	mov	r0, r6
 800eb4c:	f00a fef4 	bl	8019938 <net_if_ipv4_get_global_addr>
		if (!src) {
 800eb50:	4607      	mov	r7, r0
 800eb52:	2800      	cmp	r0, #0
 800eb54:	d1c7      	bne.n	800eae6 <net_if_ipv4_select_src_addr+0x4e>
			src = net_ipv4_unspecified_address();
 800eb56:	f000 fd21 	bl	800f59c <net_ipv4_unspecified_address>
 800eb5a:	4607      	mov	r7, r0
		goto out;
 800eb5c:	e7c3      	b.n	800eae6 <net_if_ipv4_select_src_addr+0x4e>
 800eb5e:	bf00      	nop
 800eb60:	20001094 	.word	0x20001094
 800eb64:	a9fe0000 	.word	0xa9fe0000
 800eb68:	200013e0 	.word	0x200013e0
 800eb6c:	200011c8 	.word	0x200011c8

0800eb70 <net_if_ipv4_addr_lookup>:
{
 800eb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb72:	4606      	mov	r6, r0
 800eb74:	460f      	mov	r7, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800eb76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb7e:	4819      	ldr	r0, [pc, #100]	; (800ebe4 <net_if_ipv4_addr_lookup+0x74>)
 800eb80:	f006 fecc 	bl	801591c <z_impl_k_mutex_lock>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800eb84:	4b18      	ldr	r3, [pc, #96]	; (800ebe8 <net_if_ipv4_addr_lookup+0x78>)
 800eb86:	e008      	b.n	800eb9a <net_if_ipv4_addr_lookup+0x2a>
				if (ret) {
 800eb88:	b107      	cbz	r7, 800eb8c <net_if_ipv4_addr_lookup+0x1c>
					*ret = iface;
 800eb8a:	603b      	str	r3, [r7, #0]
				ifaddr = &ipv4->unicast[i];
 800eb8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800eb90:	eb04 1402 	add.w	r4, r4, r2, lsl #4
				goto out;
 800eb94:	e021      	b.n	800ebda <net_if_ipv4_addr_lookup+0x6a>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800eb96:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800eb9a:	4a14      	ldr	r2, [pc, #80]	; (800ebec <net_if_ipv4_addr_lookup+0x7c>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d21b      	bcs.n	800ebd8 <net_if_ipv4_addr_lookup+0x68>
		struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
 800eba0:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		if (!ipv4) {
 800eba4:	2c00      	cmp	r4, #0
 800eba6:	d0f6      	beq.n	800eb96 <net_if_ipv4_addr_lookup+0x26>
		for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
 800eba8:	2200      	movs	r2, #0
 800ebaa:	2a00      	cmp	r2, #0
 800ebac:	dcf3      	bgt.n	800eb96 <net_if_ipv4_addr_lookup+0x26>
			if (!ipv4->unicast[i].is_used ||
 800ebae:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 800ebb2:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 800ebb6:	f895 102f 	ldrb.w	r1, [r5, #47]	; 0x2f
 800ebba:	f011 0f02 	tst.w	r1, #2
 800ebbe:	d009      	beq.n	800ebd4 <net_if_ipv4_addr_lookup+0x64>
			    ipv4->unicast[i].address.family != AF_INET) {
 800ebc0:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800ebc4:	0109      	lsls	r1, r1, #4
 800ebc6:	5a61      	ldrh	r1, [r4, r1]
			if (!ipv4->unicast[i].is_used ||
 800ebc8:	2901      	cmp	r1, #1
 800ebca:	d103      	bne.n	800ebd4 <net_if_ipv4_addr_lookup+0x64>
			if (UNALIGNED_GET(&addr->s4_addr32[0]) ==
 800ebcc:	6830      	ldr	r0, [r6, #0]
			    ipv4->unicast[i].address.in_addr.s_addr) {
 800ebce:	6869      	ldr	r1, [r5, #4]
			if (UNALIGNED_GET(&addr->s4_addr32[0]) ==
 800ebd0:	4281      	cmp	r1, r0
 800ebd2:	d0d9      	beq.n	800eb88 <net_if_ipv4_addr_lookup+0x18>
		for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
 800ebd4:	3201      	adds	r2, #1
 800ebd6:	e7e8      	b.n	800ebaa <net_if_ipv4_addr_lookup+0x3a>
	struct net_if_addr *ifaddr = NULL;
 800ebd8:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
 800ebda:	4802      	ldr	r0, [pc, #8]	; (800ebe4 <net_if_ipv4_addr_lookup+0x74>)
 800ebdc:	f006 ff28 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800ebe0:	4620      	mov	r0, r4
 800ebe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebe4:	20001094 	.word	0x20001094
 800ebe8:	200011c8 	.word	0x200011c8
 800ebec:	200013e0 	.word	0x200013e0

0800ebf0 <net_if_ipv4_set_netmask>:
{
 800ebf0:	b538      	push	{r3, r4, r5, lr}
 800ebf2:	4604      	mov	r4, r0
 800ebf4:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 800ebf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ebfe:	4809      	ldr	r0, [pc, #36]	; (800ec24 <net_if_ipv4_set_netmask+0x34>)
 800ec00:	f006 fe8c 	bl	801591c <z_impl_k_mutex_lock>
	if (net_if_config_ipv4_get(iface, NULL) < 0) {
 800ec04:	2100      	movs	r1, #0
 800ec06:	4620      	mov	r0, r4
 800ec08:	f7ff fe88 	bl	800e91c <net_if_config_ipv4_get>
 800ec0c:	2800      	cmp	r0, #0
 800ec0e:	db04      	blt.n	800ec1a <net_if_ipv4_set_netmask+0x2a>
	if (!iface->config.ip.ipv4) {
 800ec10:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800ec14:	b10b      	cbz	r3, 800ec1a <net_if_ipv4_set_netmask+0x2a>
	net_ipaddr_copy(&iface->config.ip.ipv4->netmask, netmask);
 800ec16:	682a      	ldr	r2, [r5, #0]
 800ec18:	64da      	str	r2, [r3, #76]	; 0x4c
	return z_impl_k_mutex_unlock(mutex);
 800ec1a:	4802      	ldr	r0, [pc, #8]	; (800ec24 <net_if_ipv4_set_netmask+0x34>)
 800ec1c:	f006 ff08 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800ec20:	bd38      	pop	{r3, r4, r5, pc}
 800ec22:	bf00      	nop
 800ec24:	20001094 	.word	0x20001094

0800ec28 <net_if_ipv4_addr_add>:
{
 800ec28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec2c:	b082      	sub	sp, #8
 800ec2e:	4604      	mov	r4, r0
 800ec30:	460d      	mov	r5, r1
 800ec32:	4617      	mov	r7, r2
 800ec34:	4698      	mov	r8, r3
	return z_impl_k_mutex_lock(mutex, timeout);
 800ec36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec3e:	482e      	ldr	r0, [pc, #184]	; (800ecf8 <net_if_ipv4_addr_add+0xd0>)
 800ec40:	f006 fe6c 	bl	801591c <z_impl_k_mutex_lock>
	if (net_if_config_ipv4_get(iface, &ipv4) < 0) {
 800ec44:	a901      	add	r1, sp, #4
 800ec46:	4620      	mov	r0, r4
 800ec48:	f7ff fe68 	bl	800e91c <net_if_config_ipv4_get>
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	db51      	blt.n	800ecf4 <net_if_ipv4_addr_add+0xcc>
	ifaddr = ipv4_addr_find(iface, addr);
 800ec50:	4629      	mov	r1, r5
 800ec52:	4620      	mov	r0, r4
 800ec54:	f00a fd14 	bl	8019680 <ipv4_addr_find>
	if (ifaddr) {
 800ec58:	4606      	mov	r6, r0
 800ec5a:	b130      	cbz	r0, 800ec6a <net_if_ipv4_addr_add+0x42>
	return z_impl_k_mutex_unlock(mutex);
 800ec5c:	4826      	ldr	r0, [pc, #152]	; (800ecf8 <net_if_ipv4_addr_add+0xd0>)
 800ec5e:	f006 fee7 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800ec62:	4630      	mov	r0, r6
 800ec64:	b002      	add	sp, #8
 800ec66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	2a00      	cmp	r2, #0
 800ec6e:	dd20      	ble.n	800ecb2 <net_if_ipv4_addr_add+0x8a>
	if (ifaddr) {
 800ec70:	2e00      	cmp	r6, #0
 800ec72:	d0f3      	beq.n	800ec5c <net_if_ipv4_addr_add+0x34>
		ifaddr->is_used = true;
 800ec74:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 800ec78:	f043 0302 	orr.w	r3, r3, #2
 800ec7c:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
		ifaddr->address.family = AF_INET;
 800ec80:	2301      	movs	r3, #1
 800ec82:	8033      	strh	r3, [r6, #0]
						addr->s4_addr32[0];
 800ec84:	682b      	ldr	r3, [r5, #0]
		ifaddr->address.in_addr.s4_addr32[0] =
 800ec86:	6073      	str	r3, [r6, #4]
		ifaddr->addr_type = addr_type;
 800ec88:	f886 702c 	strb.w	r7, [r6, #44]	; 0x2c
		if (vlifetime) {
 800ec8c:	f1b8 0f00 	cmp.w	r8, #0
 800ec90:	d029      	beq.n	800ece6 <net_if_ipv4_addr_add+0xbe>
			ifaddr->is_infinite = false;
 800ec92:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 800ec96:	f36f 0300 	bfc	r3, #0, #1
 800ec9a:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
		ifaddr->addr_state = NET_ADDR_PREFERRED;
 800ec9e:	2301      	movs	r3, #1
 800eca0:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
		net_mgmt_event_notify_with_info(NET_EVENT_IPV4_ADDR_ADD, iface,
 800eca4:	2304      	movs	r3, #4
 800eca6:	18f2      	adds	r2, r6, r3
 800eca8:	4621      	mov	r1, r4
 800ecaa:	4814      	ldr	r0, [pc, #80]	; (800ecfc <net_if_ipv4_addr_add+0xd4>)
 800ecac:	f000 fda4 	bl	800f7f8 <net_mgmt_event_notify_with_info>
		goto out;
 800ecb0:	e7d4      	b.n	800ec5c <net_if_ipv4_addr_add+0x34>
		struct net_if_addr *cur = &ipv4->unicast[i];
 800ecb2:	9b01      	ldr	r3, [sp, #4]
 800ecb4:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800ecb8:	eb03 1101 	add.w	r1, r3, r1, lsl #4
		if (addr_type == NET_ADDR_DHCP
 800ecbc:	2f02      	cmp	r7, #2
 800ecbe:	d00a      	beq.n	800ecd6 <net_if_ipv4_addr_add+0xae>
		if (!ipv4->unicast[i].is_used) {
 800ecc0:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800ecc4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800ecc8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eccc:	f013 0f02 	tst.w	r3, #2
 800ecd0:	d007      	beq.n	800ece2 <net_if_ipv4_addr_add+0xba>
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
 800ecd2:	3201      	adds	r2, #1
 800ecd4:	e7ca      	b.n	800ec6c <net_if_ipv4_addr_add+0x44>
		    && cur->addr_type == NET_ADDR_OVERRIDABLE) {
 800ecd6:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
 800ecda:	2804      	cmp	r0, #4
 800ecdc:	d1f0      	bne.n	800ecc0 <net_if_ipv4_addr_add+0x98>
			ifaddr = cur;
 800ecde:	460e      	mov	r6, r1
 800ece0:	e7c6      	b.n	800ec70 <net_if_ipv4_addr_add+0x48>
			ifaddr = cur;
 800ece2:	460e      	mov	r6, r1
 800ece4:	e7c4      	b.n	800ec70 <net_if_ipv4_addr_add+0x48>
			ifaddr->is_infinite = true;
 800ece6:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 800ecea:	f043 0301 	orr.w	r3, r3, #1
 800ecee:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
 800ecf2:	e7d4      	b.n	800ec9e <net_if_ipv4_addr_add+0x76>
	struct net_if_addr *ifaddr = NULL;
 800ecf4:	2600      	movs	r6, #0
 800ecf6:	e7b1      	b.n	800ec5c <net_if_ipv4_addr_add+0x34>
 800ecf8:	20001094 	.word	0x20001094
 800ecfc:	e0040001 	.word	0xe0040001

0800ed00 <net_if_call_link_cb>:
{
 800ed00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed04:	4606      	mov	r6, r0
 800ed06:	460f      	mov	r7, r1
 800ed08:	4690      	mov	r8, r2
	return z_impl_k_mutex_lock(mutex, timeout);
 800ed0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed12:	4810      	ldr	r0, [pc, #64]	; (800ed54 <net_if_call_link_cb+0x54>)
 800ed14:	f006 fe02 	bl	801591c <z_impl_k_mutex_lock>
	return list->head;
 800ed18:	4b0f      	ldr	r3, [pc, #60]	; (800ed58 <net_if_call_link_cb+0x58>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
 800ed1c:	b11b      	cbz	r3, 800ed26 <net_if_call_link_cb+0x26>
 800ed1e:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 800ed20:	b133      	cbz	r3, 800ed30 <net_if_call_link_cb+0x30>
	return node->next;
 800ed22:	681c      	ldr	r4, [r3, #0]
 800ed24:	e004      	b.n	800ed30 <net_if_call_link_cb+0x30>
 800ed26:	461c      	mov	r4, r3
 800ed28:	e002      	b.n	800ed30 <net_if_call_link_cb+0x30>
 800ed2a:	4625      	mov	r5, r4
 800ed2c:	4623      	mov	r3, r4
 800ed2e:	462c      	mov	r4, r5
 800ed30:	b15b      	cbz	r3, 800ed4a <net_if_call_link_cb+0x4a>
		link->cb(iface, lladdr, status);
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	4642      	mov	r2, r8
 800ed36:	4639      	mov	r1, r7
 800ed38:	4630      	mov	r0, r6
 800ed3a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
 800ed3c:	2c00      	cmp	r4, #0
 800ed3e:	d0f4      	beq.n	800ed2a <net_if_call_link_cb+0x2a>
 800ed40:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800ed42:	2c00      	cmp	r4, #0
 800ed44:	d0f2      	beq.n	800ed2c <net_if_call_link_cb+0x2c>
	return node->next;
 800ed46:	6825      	ldr	r5, [r4, #0]
 800ed48:	e7f0      	b.n	800ed2c <net_if_call_link_cb+0x2c>
	return z_impl_k_mutex_unlock(mutex);
 800ed4a:	4802      	ldr	r0, [pc, #8]	; (800ed54 <net_if_call_link_cb+0x54>)
 800ed4c:	f006 fe70 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800ed50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed54:	20001094 	.word	0x20001094
 800ed58:	20003340 	.word	0x20003340

0800ed5c <net_if_tx>:
{
 800ed5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed5e:	b08d      	sub	sp, #52	; 0x34
	struct net_linkaddr ll_dst = {
 800ed60:	2300      	movs	r3, #0
 800ed62:	9304      	str	r3, [sp, #16]
 800ed64:	9305      	str	r3, [sp, #20]
	if (!pkt) {
 800ed66:	2900      	cmp	r1, #0
 800ed68:	f000 80aa 	beq.w	800eec0 <net_if_tx+0x164>
 800ed6c:	4604      	mov	r4, r0
 800ed6e:	460d      	mov	r5, r1
	return list->head;
 800ed70:	4b55      	ldr	r3, [pc, #340]	; (800eec8 <net_if_tx+0x16c>)
 800ed72:	681b      	ldr	r3, [r3, #0]
	if (!sys_slist_is_empty(&link_callbacks)) {
 800ed74:	b1d3      	cbz	r3, 800edac <net_if_tx+0x50>
		if (net_linkaddr_set(&ll_dst_storage,
 800ed76:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800ed78:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   uint8_t *new_addr, uint8_t new_len)
{
	if (!lladdr_store || !new_addr) {
 800ed7c:	2900      	cmp	r1, #0
 800ed7e:	d03c      	beq.n	800edfa <net_if_tx+0x9e>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
 800ed80:	2a06      	cmp	r2, #6
 800ed82:	d83d      	bhi.n	800ee00 <net_if_tx+0xa4>
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
 800ed84:	f88d 2009 	strb.w	r2, [sp, #9]
	memcpy(lladdr_store->addr, new_addr, new_len);
 800ed88:	2306      	movs	r3, #6
 800ed8a:	f10d 000a 	add.w	r0, sp, #10
 800ed8e:	f00d fd61 	bl	801c854 <__memcpy_chk>

	return 0;
 800ed92:	2300      	movs	r3, #0
 800ed94:	b953      	cbnz	r3, 800edac <net_if_tx+0x50>
			ll_dst.addr = ll_dst_storage.addr;
 800ed96:	f10d 030a 	add.w	r3, sp, #10
 800ed9a:	9304      	str	r3, [sp, #16]
			ll_dst.len = ll_dst_storage.len;
 800ed9c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800eda0:	f88d 3014 	strb.w	r3, [sp, #20]
			ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
 800eda4:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800eda8:	f88d 3015 	strb.w	r3, [sp, #21]
	return pkt->context;
 800edac:	696e      	ldr	r6, [r5, #20]
	if (iface == NULL) {
 800edae:	b354      	cbz	r4, 800ee06 <net_if_tx+0xaa>
	return atomic_test_bit(iface->if_dev->flags, value);
 800edb0:	6823      	ldr	r3, [r4, #0]
 800edb2:	f3bf 8f5b 	dmb	ish
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	f3bf 8f5b 	dmb	ish
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
 800edbc:	f013 0f01 	tst.w	r3, #1
 800edc0:	d021      	beq.n	800ee06 <net_if_tx+0xaa>
	return pkt->family;
 800edc2:	f895 304b 	ldrb.w	r3, [r5, #75]	; 0x4b
		if (IS_ENABLED(CONFIG_NET_TCP) &&
 800edc6:	f013 0f0e 	tst.w	r3, #14
 800edca:	d005      	beq.n	800edd8 <net_if_tx+0x7c>
	pkt->pkt_queued = send;
 800edcc:	f895 304a 	ldrb.w	r3, [r5, #74]	; 0x4a
 800edd0:	f36f 0300 	bfc	r3, #0, #1
 800edd4:	f885 304a 	strb.w	r3, [r5, #74]	; 0x4a
	if (!iface || !iface->if_dev) {
 800edd8:	6823      	ldr	r3, [r4, #0]
 800edda:	b103      	cbz	r3, 800edde <net_if_tx+0x82>
	return iface->if_dev->l2;
 800eddc:	685b      	ldr	r3, [r3, #4]
		status = net_if_l2(iface)->send(iface, pkt);
 800edde:	685b      	ldr	r3, [r3, #4]
 800ede0:	4629      	mov	r1, r5
 800ede2:	4620      	mov	r0, r4
 800ede4:	4798      	blx	r3
	if (status < 0) {
 800ede6:	1e07      	subs	r7, r0, #0
 800ede8:	db33      	blt.n	800ee52 <net_if_tx+0xf6>
	UPDATE_STAT(iface, stats.bytes.sent += bytes);
 800edea:	4a38      	ldr	r2, [pc, #224]	; (800eecc <net_if_tx+0x170>)
 800edec:	6853      	ldr	r3, [r2, #4]
 800edee:	443b      	add	r3, r7
 800edf0:	6053      	str	r3, [r2, #4]
 800edf2:	68e3      	ldr	r3, [r4, #12]
 800edf4:	443b      	add	r3, r7
 800edf6:	60e3      	str	r3, [r4, #12]
}
 800edf8:	e02e      	b.n	800ee58 <net_if_tx+0xfc>
		return -EINVAL;
 800edfa:	f06f 0315 	mvn.w	r3, #21
 800edfe:	e7c9      	b.n	800ed94 <net_if_tx+0x38>
		return -EMSGSIZE;
 800ee00:	f06f 0379 	mvn.w	r3, #121	; 0x79
 800ee04:	e7c6      	b.n	800ed94 <net_if_tx+0x38>
		NET_WARN("iface %p is down", iface);
 800ee06:	4b32      	ldr	r3, [pc, #200]	; (800eed0 <net_if_tx+0x174>)
 800ee08:	930a      	str	r3, [sp, #40]	; 0x28
 800ee0a:	940b      	str	r4, [sp, #44]	; 0x2c
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	f8ad 3005 	strh.w	r3, [sp, #5]
 800ee12:	f88d 3007 	strb.w	r3, [sp, #7]
 800ee16:	2203      	movs	r2, #3
 800ee18:	f88d 2004 	strb.w	r2, [sp, #4]
 800ee1c:	f88d 3006 	strb.w	r3, [sp, #6]
 800ee20:	9a01      	ldr	r2, [sp, #4]
 800ee22:	9209      	str	r2, [sp, #36]	; 0x24
 800ee24:	461a      	mov	r2, r3
 800ee26:	f363 0200 	bfi	r2, r3, #0, #1
 800ee2a:	f363 0241 	bfi	r2, r3, #1, #1
 800ee2e:	f363 0282 	bfi	r2, r3, #2, #1
 800ee32:	f363 02c5 	bfi	r2, r3, #3, #3
 800ee36:	2102      	movs	r1, #2
 800ee38:	f361 1288 	bfi	r2, r1, #6, #3
 800ee3c:	210c      	movs	r1, #12
 800ee3e:	f361 2252 	bfi	r2, r1, #9, #10
 800ee42:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800ee46:	4923      	ldr	r1, [pc, #140]	; (800eed4 <net_if_tx+0x178>)
 800ee48:	a806      	add	r0, sp, #24
 800ee4a:	f008 ff82 	bl	8017d52 <z_log_msg2_finalize>
		status = -ENETDOWN;
 800ee4e:	f06f 0772 	mvn.w	r7, #114	; 0x72
		net_pkt_unref(pkt);
 800ee52:	4628      	mov	r0, r5
 800ee54:	f00b faa0 	bl	801a398 <net_pkt_unref>
	if (context) {
 800ee58:	b166      	cbz	r6, 800ee74 <net_if_tx+0x118>
	if (!context) {
 800ee5a:	b15e      	cbz	r6, 800ee74 <net_if_tx+0x118>
	if (context->send_cb) {
 800ee5c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800ee5e:	b11b      	cbz	r3, 800ee68 <net_if_tx+0x10c>
		context->send_cb(context, status, context->user_data);
 800ee60:	6832      	ldr	r2, [r6, #0]
 800ee62:	4639      	mov	r1, r7
 800ee64:	4630      	mov	r0, r6
 800ee66:	4798      	blx	r3
 *
 * @return Network context IP protocol.
 */
static inline uint16_t net_context_get_ip_proto(struct net_context *context)
{
	return context->proto;
 800ee68:	f8b6 306e 	ldrh.w	r3, [r6, #110]	; 0x6e
	if (IS_ENABLED(CONFIG_NET_UDP) &&
 800ee6c:	2b11      	cmp	r3, #17
 800ee6e:	d00b      	beq.n	800ee88 <net_if_tx+0x12c>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
 800ee70:	2b06      	cmp	r3, #6
 800ee72:	d019      	beq.n	800eea8 <net_if_tx+0x14c>
	if (ll_dst.addr) {
 800ee74:	9b04      	ldr	r3, [sp, #16]
 800ee76:	b32b      	cbz	r3, 800eec4 <net_if_tx+0x168>
		net_if_call_link_cb(iface, &ll_dst, status);
 800ee78:	463a      	mov	r2, r7
 800ee7a:	a904      	add	r1, sp, #16
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	f7ff ff3f 	bl	800ed00 <net_if_call_link_cb>
	return true;
 800ee82:	2001      	movs	r0, #1
}
 800ee84:	b00d      	add	sp, #52	; 0x34
 800ee86:	bdf0      	pop	{r4, r5, r6, r7, pc}
static inline
struct net_if *net_context_get_iface(struct net_context *context)
{
	NET_ASSERT(context);

	return net_if_get_by_index(context->iface);
 800ee88:	f996 0072 	ldrsb.w	r0, [r6, #114]	; 0x72
		/* coverity[OVERRUN] */
		return (struct net_if *) arch_syscall_invoke1(*(uintptr_t *)&index, K_SYSCALL_NET_IF_GET_BY_INDEX);
	}
#endif
	compiler_barrier();
	return z_impl_net_if_get_by_index(index);
 800ee8c:	f7fe fa7e 	bl	800d38c <z_impl_net_if_get_by_index>
	UPDATE_STAT(iface, stats.udp.sent++);
 800ee90:	4a0e      	ldr	r2, [pc, #56]	; (800eecc <net_if_tx+0x170>)
 800ee92:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800ee96:	3301      	adds	r3, #1
 800ee98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800ee9c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 800eea0:	3301      	adds	r3, #1
 800eea2:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
 800eea6:	e7e5      	b.n	800ee74 <net_if_tx+0x118>
 800eea8:	f996 0072 	ldrsb.w	r0, [r6, #114]	; 0x72
 800eeac:	f7fe fa6e 	bl	800d38c <z_impl_net_if_get_by_index>
	UPDATE_STAT(iface, stats.tcp.sent++);
 800eeb0:	4a06      	ldr	r2, [pc, #24]	; (800eecc <net_if_tx+0x170>)
 800eeb2:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 800eeb4:	3301      	adds	r3, #1
 800eeb6:	66d3      	str	r3, [r2, #108]	; 0x6c
 800eeb8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800eeba:	3301      	adds	r3, #1
 800eebc:	6743      	str	r3, [r0, #116]	; 0x74
}
 800eebe:	e7d9      	b.n	800ee74 <net_if_tx+0x118>
		return false;
 800eec0:	2000      	movs	r0, #0
 800eec2:	e7df      	b.n	800ee84 <net_if_tx+0x128>
	return true;
 800eec4:	2001      	movs	r0, #1
 800eec6:	e7dd      	b.n	800ee84 <net_if_tx+0x128>
 800eec8:	20003340 	.word	0x20003340
 800eecc:	20002a58 	.word	0x20002a58
 800eed0:	0801e2c4 	.word	0x0801e2c4
 800eed4:	0801d778 	.word	0x0801d778

0800eed8 <net_if_send_data>:
{
 800eed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eedc:	b089      	sub	sp, #36	; 0x24
 800eede:	4604      	mov	r4, r0
 800eee0:	460d      	mov	r5, r1
	return pkt->context;
 800eee2:	694f      	ldr	r7, [r1, #20]
	return &pkt->lladdr_dst;
 800eee4:	f101 083c 	add.w	r8, r1, #60	; 0x3c
	return z_impl_k_mutex_lock(mutex, timeout);
 800eee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eeec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eef0:	484f      	ldr	r0, [pc, #316]	; (800f030 <net_if_send_data+0x158>)
 800eef2:	f006 fd13 	bl	801591c <z_impl_k_mutex_lock>
	if (iface == NULL) {
 800eef6:	b144      	cbz	r4, 800ef0a <net_if_send_data+0x32>
	return atomic_test_bit(iface->if_dev->flags, value);
 800eef8:	6823      	ldr	r3, [r4, #0]
 800eefa:	f3bf 8f5b 	dmb	ish
 800eefe:	68db      	ldr	r3, [r3, #12]
 800ef00:	f3bf 8f5b 	dmb	ish
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
 800ef04:	f013 0f01 	tst.w	r3, #1
 800ef08:	d141      	bne.n	800ef8e <net_if_send_data+0xb6>
		NET_WARN("iface %p is down", iface);
 800ef0a:	4b4a      	ldr	r3, [pc, #296]	; (800f034 <net_if_send_data+0x15c>)
 800ef0c:	9306      	str	r3, [sp, #24]
 800ef0e:	9407      	str	r4, [sp, #28]
 800ef10:	2300      	movs	r3, #0
 800ef12:	f8ad 3005 	strh.w	r3, [sp, #5]
 800ef16:	f88d 3007 	strb.w	r3, [sp, #7]
 800ef1a:	2203      	movs	r2, #3
 800ef1c:	f88d 2004 	strb.w	r2, [sp, #4]
 800ef20:	f88d 3006 	strb.w	r3, [sp, #6]
 800ef24:	9a01      	ldr	r2, [sp, #4]
 800ef26:	9205      	str	r2, [sp, #20]
 800ef28:	461a      	mov	r2, r3
 800ef2a:	f363 0200 	bfi	r2, r3, #0, #1
 800ef2e:	f363 0241 	bfi	r2, r3, #1, #1
 800ef32:	f363 0282 	bfi	r2, r3, #2, #1
 800ef36:	f363 02c5 	bfi	r2, r3, #3, #3
 800ef3a:	2602      	movs	r6, #2
 800ef3c:	f366 1288 	bfi	r2, r6, #6, #3
 800ef40:	210c      	movs	r1, #12
 800ef42:	f361 2252 	bfi	r2, r1, #9, #10
 800ef46:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800ef4a:	493b      	ldr	r1, [pc, #236]	; (800f038 <net_if_send_data+0x160>)
 800ef4c:	a802      	add	r0, sp, #8
 800ef4e:	f008 ff00 	bl	8017d52 <z_log_msg2_finalize>
		status = -ENETDOWN;
 800ef52:	f06f 0972 	mvn.w	r9, #114	; 0x72
		if (context) {
 800ef56:	b167      	cbz	r7, 800ef72 <net_if_send_data+0x9a>
	if (!context) {
 800ef58:	b15f      	cbz	r7, 800ef72 <net_if_send_data+0x9a>
	if (context->send_cb) {
 800ef5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef5c:	b11b      	cbz	r3, 800ef66 <net_if_send_data+0x8e>
		context->send_cb(context, status, context->user_data);
 800ef5e:	683a      	ldr	r2, [r7, #0]
 800ef60:	4649      	mov	r1, r9
 800ef62:	4638      	mov	r0, r7
 800ef64:	4798      	blx	r3
	return context->proto;
 800ef66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
	if (IS_ENABLED(CONFIG_NET_UDP) &&
 800ef6a:	2b11      	cmp	r3, #17
 800ef6c:	d043      	beq.n	800eff6 <net_if_send_data+0x11e>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
 800ef6e:	2b06      	cmp	r3, #6
 800ef70:	d051      	beq.n	800f016 <net_if_send_data+0x13e>
		if (dst->addr) {
 800ef72:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800ef74:	b123      	cbz	r3, 800ef80 <net_if_send_data+0xa8>
			net_if_call_link_cb(iface, dst, status);
 800ef76:	464a      	mov	r2, r9
 800ef78:	4641      	mov	r1, r8
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	f7ff fec0 	bl	800ed00 <net_if_call_link_cb>
	return z_impl_k_mutex_unlock(mutex);
 800ef80:	482b      	ldr	r0, [pc, #172]	; (800f030 <net_if_send_data+0x158>)
 800ef82:	f006 fd55 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 800ef86:	4630      	mov	r0, r6
 800ef88:	b009      	add	sp, #36	; 0x24
 800ef8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef8e:	6823      	ldr	r3, [r4, #0]
 800ef90:	f3bf 8f5b 	dmb	ish
 800ef94:	68db      	ldr	r3, [r3, #12]
 800ef96:	f3bf 8f5b 	dmb	ish
	if (!net_if_flag_is_set(iface, NET_IF_UP) ||
 800ef9a:	f013 0f10 	tst.w	r3, #16
 800ef9e:	d1b4      	bne.n	800ef0a <net_if_send_data+0x32>
 800efa0:	6823      	ldr	r3, [r4, #0]
 800efa2:	f3bf 8f5b 	dmb	ish
 800efa6:	68db      	ldr	r3, [r3, #12]
 800efa8:	f3bf 8f5b 	dmb	ish
	if (!net_if_flag_is_set(iface, NET_IF_POINTOPOINT) &&
 800efac:	f013 0f02 	tst.w	r3, #2
 800efb0:	d101      	bne.n	800efb6 <net_if_send_data+0xde>
	    !net_pkt_lladdr_src(pkt)->addr) {
 800efb2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
	if (!net_if_flag_is_set(iface, NET_IF_POINTOPOINT) &&
 800efb4:	b16b      	cbz	r3, 800efd2 <net_if_send_data+0xfa>
	return pkt->family;
 800efb6:	f895 304b 	ldrb.w	r3, [r5, #75]	; 0x4b
 800efba:	f3c3 0342 	ubfx	r3, r3, #1, #3
	if (IS_ENABLED(CONFIG_NET_IPV6) && net_pkt_family(pkt) == AF_INET6) {
 800efbe:	2b02      	cmp	r3, #2
 800efc0:	d010      	beq.n	800efe4 <net_if_send_data+0x10c>
	enum net_verdict verdict = NET_OK;
 800efc2:	2600      	movs	r6, #0
	} else if (verdict == NET_OK) {
 800efc4:	2e00      	cmp	r6, #0
 800efc6:	d1db      	bne.n	800ef80 <net_if_send_data+0xa8>
		net_if_queue_tx(iface, pkt);
 800efc8:	4629      	mov	r1, r5
 800efca:	4620      	mov	r0, r4
 800efcc:	f7fe f9f2 	bl	800d3b4 <net_if_queue_tx>
 800efd0:	e7d6      	b.n	800ef80 <net_if_send_data+0xa8>
	return net_if_get_link_addr(pkt->iface);
 800efd2:	69ab      	ldr	r3, [r5, #24]
	return &iface->if_dev->link_addr;
 800efd4:	681a      	ldr	r2, [r3, #0]
		net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
 800efd6:	6912      	ldr	r2, [r2, #16]
 800efd8:	636a      	str	r2, [r5, #52]	; 0x34
 800efda:	681b      	ldr	r3, [r3, #0]
		net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
 800efdc:	7d1b      	ldrb	r3, [r3, #20]
 800efde:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 800efe2:	e7e8      	b.n	800efb6 <net_if_send_data+0xde>
		verdict = net_ipv6_prepare_for_send(pkt);
 800efe4:	4628      	mov	r0, r5
 800efe6:	f003 fd4f 	bl	8012a88 <net_ipv6_prepare_for_send>
 800efea:	4606      	mov	r6, r0
	if (verdict == NET_DROP) {
 800efec:	2802      	cmp	r0, #2
 800efee:	d1e9      	bne.n	800efc4 <net_if_send_data+0xec>
	int status = -EIO;
 800eff0:	f06f 0904 	mvn.w	r9, #4
 800eff4:	e7af      	b.n	800ef56 <net_if_send_data+0x7e>
	return net_if_get_by_index(context->iface);
 800eff6:	f997 0072 	ldrsb.w	r0, [r7, #114]	; 0x72
 800effa:	f7fe f9c7 	bl	800d38c <z_impl_net_if_get_by_index>
	UPDATE_STAT(iface, stats.udp.sent++);
 800effe:	4a0f      	ldr	r2, [pc, #60]	; (800f03c <net_if_send_data+0x164>)
 800f000:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800f004:	3301      	adds	r3, #1
 800f006:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800f00a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 800f00e:	3301      	adds	r3, #1
 800f010:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
 800f014:	e7ad      	b.n	800ef72 <net_if_send_data+0x9a>
 800f016:	f997 0072 	ldrsb.w	r0, [r7, #114]	; 0x72
 800f01a:	f7fe f9b7 	bl	800d38c <z_impl_net_if_get_by_index>
	UPDATE_STAT(iface, stats.tcp.sent++);
 800f01e:	4a07      	ldr	r2, [pc, #28]	; (800f03c <net_if_send_data+0x164>)
 800f020:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 800f022:	3301      	adds	r3, #1
 800f024:	66d3      	str	r3, [r2, #108]	; 0x6c
 800f026:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800f028:	3301      	adds	r3, #1
 800f02a:	6743      	str	r3, [r0, #116]	; 0x74
}
 800f02c:	e7a1      	b.n	800ef72 <net_if_send_data+0x9a>
 800f02e:	bf00      	nop
 800f030:	20001094 	.word	0x20001094
 800f034:	0801e2c4 	.word	0x0801e2c4
 800f038:	0801d778 	.word	0x0801d778
 800f03c:	20002a58 	.word	0x20002a58

0800f040 <net_if_get_by_iface>:
	return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
}

int net_if_get_by_iface(struct net_if *iface)
{
	if (!(iface >= _net_if_list_start && iface < _net_if_list_end)) {
 800f040:	4b09      	ldr	r3, [pc, #36]	; (800f068 <net_if_get_by_iface+0x28>)
 800f042:	4298      	cmp	r0, r3
 800f044:	d30a      	bcc.n	800f05c <net_if_get_by_iface+0x1c>
 800f046:	4b09      	ldr	r3, [pc, #36]	; (800f06c <net_if_get_by_iface+0x2c>)
 800f048:	4298      	cmp	r0, r3
 800f04a:	d20a      	bcs.n	800f062 <net_if_get_by_iface+0x22>
		return -1;
	}

	return (iface - _net_if_list_start) + 1;
 800f04c:	4b06      	ldr	r3, [pc, #24]	; (800f068 <net_if_get_by_iface+0x28>)
 800f04e:	1ac0      	subs	r0, r0, r3
 800f050:	10c0      	asrs	r0, r0, #3
 800f052:	4b07      	ldr	r3, [pc, #28]	; (800f070 <net_if_get_by_iface+0x30>)
 800f054:	fb03 f000 	mul.w	r0, r3, r0
 800f058:	3001      	adds	r0, #1
 800f05a:	4770      	bx	lr
		return -1;
 800f05c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f060:	4770      	bx	lr
 800f062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800f066:	4770      	bx	lr
 800f068:	200011c8 	.word	0x200011c8
 800f06c:	200013e0 	.word	0x200013e0
 800f070:	07a44c6b 	.word	0x07a44c6b

0800f074 <net_if_foreach>:

void net_if_foreach(net_if_cb_t cb, void *user_data)
{
 800f074:	b570      	push	{r4, r5, r6, lr}
 800f076:	4606      	mov	r6, r0
 800f078:	460d      	mov	r5, r1
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800f07a:	4c05      	ldr	r4, [pc, #20]	; (800f090 <net_if_foreach+0x1c>)
 800f07c:	4b05      	ldr	r3, [pc, #20]	; (800f094 <net_if_foreach+0x20>)
 800f07e:	429c      	cmp	r4, r3
 800f080:	d205      	bcs.n	800f08e <net_if_foreach+0x1a>
		cb(iface, user_data);
 800f082:	4629      	mov	r1, r5
 800f084:	4620      	mov	r0, r4
 800f086:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800f088:	f504 7406 	add.w	r4, r4, #536	; 0x218
 800f08c:	e7f6      	b.n	800f07c <net_if_foreach+0x8>
	}
}
 800f08e:	bd70      	pop	{r4, r5, r6, pc}
 800f090:	200011c8 	.word	0x200011c8
 800f094:	200013e0 	.word	0x200013e0

0800f098 <net_if_up>:

int net_if_up(struct net_if *iface)
{
 800f098:	b538      	push	{r3, r4, r5, lr}
 800f09a:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800f09c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f0a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0a4:	4823      	ldr	r0, [pc, #140]	; (800f134 <net_if_up+0x9c>)
 800f0a6:	f006 fc39 	bl	801591c <z_impl_k_mutex_lock>
	if (iface == NULL) {
 800f0aa:	b144      	cbz	r4, 800f0be <net_if_up+0x26>
	return atomic_test_bit(iface->if_dev->flags, value);
 800f0ac:	6823      	ldr	r3, [r4, #0]
 800f0ae:	f3bf 8f5b 	dmb	ish
 800f0b2:	68db      	ldr	r3, [r3, #12]
 800f0b4:	f3bf 8f5b 	dmb	ish

	NET_DBG("iface %p", iface);

	k_mutex_lock(&lock, K_FOREVER);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
 800f0b8:	f013 0f01 	tst.w	r3, #1
 800f0bc:	d136      	bne.n	800f12c <net_if_up+0x94>
	if (!iface || !iface->if_dev) {
 800f0be:	b34c      	cbz	r4, 800f114 <net_if_up+0x7c>
 800f0c0:	6823      	ldr	r3, [r4, #0]
 800f0c2:	b34b      	cbz	r3, 800f118 <net_if_up+0x80>
	return iface->if_dev->l2;
 800f0c4:	685b      	ldr	r3, [r3, #4]
		net_if_flag_set(iface, NET_IF_UP);
		goto notify;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
 800f0c6:	b34b      	cbz	r3, 800f11c <net_if_up+0x84>
 800f0c8:	689b      	ldr	r3, [r3, #8]
 800f0ca:	b34b      	cbz	r3, 800f120 <net_if_up+0x88>
		goto done;
	}

	/* Notify L2 to enable the interface */
	status = net_if_l2(iface)->enable(iface, true);
 800f0cc:	2101      	movs	r1, #1
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	4798      	blx	r3
	if (status < 0) {
 800f0d2:	1e05      	subs	r5, r0, #0
 800f0d4:	db19      	blt.n	800f10a <net_if_up+0x72>
	atomic_set_bit(iface->if_dev->flags, value);
 800f0d6:	6823      	ldr	r3, [r4, #0]
 800f0d8:	330c      	adds	r3, #12
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800f0da:	f3bf 8f5b 	dmb	ish
 800f0de:	e853 2f00 	ldrex	r2, [r3]
 800f0e2:	f042 0201 	orr.w	r2, r2, #1
 800f0e6:	e843 2100 	strex	r1, r2, [r3]
 800f0ea:	2900      	cmp	r1, #0
 800f0ec:	d1f7      	bne.n	800f0de <net_if_up+0x46>
 800f0ee:	f3bf 8f5b 	dmb	ish
	net_if_flag_set(iface, NET_IF_UP);

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	f00a fa5c 	bl	80195b0 <l2_flags_get>
 800f0f8:	f010 0f08 	tst.w	r0, #8
 800f0fc:	d012      	beq.n	800f124 <net_if_up+0x8c>
				     const void *info, size_t length);

static inline void net_mgmt_event_notify(uint32_t mgmt_event,
					 struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
 800f0fe:	2300      	movs	r3, #0
 800f100:	461a      	mov	r2, r3
 800f102:	4621      	mov	r1, r4
 800f104:	480c      	ldr	r0, [pc, #48]	; (800f138 <net_if_up+0xa0>)
 800f106:	f000 fb77 	bl	800f7f8 <net_mgmt_event_notify_with_info>
	return z_impl_k_mutex_unlock(mutex);
 800f10a:	480a      	ldr	r0, [pc, #40]	; (800f134 <net_if_up+0x9c>)
 800f10c:	f006 fc90 	bl	8015a30 <z_impl_k_mutex_unlock>

out:
	k_mutex_unlock(&lock);

	return status;
}
 800f110:	4628      	mov	r0, r5
 800f112:	bd38      	pop	{r3, r4, r5, pc}
	int status = 0;
 800f114:	2500      	movs	r5, #0
 800f116:	e7de      	b.n	800f0d6 <net_if_up+0x3e>
 800f118:	2500      	movs	r5, #0
 800f11a:	e7dc      	b.n	800f0d6 <net_if_up+0x3e>
 800f11c:	2500      	movs	r5, #0
 800f11e:	e7da      	b.n	800f0d6 <net_if_up+0x3e>
 800f120:	2500      	movs	r5, #0
 800f122:	e7d8      	b.n	800f0d6 <net_if_up+0x3e>
		iface_ipv6_start(iface);
 800f124:	4620      	mov	r0, r4
 800f126:	f00a fb46 	bl	80197b6 <iface_ipv6_start>
 800f12a:	e7e8      	b.n	800f0fe <net_if_up+0x66>
		status = -EALREADY;
 800f12c:	f06f 0577 	mvn.w	r5, #119	; 0x77
 800f130:	e7eb      	b.n	800f10a <net_if_up+0x72>
 800f132:	bf00      	nop
 800f134:	20001094 	.word	0x20001094
 800f138:	d0010002 	.word	0xd0010002

0800f13c <net_if_carrier_down>:

void net_if_carrier_down(struct net_if *iface)
{
 800f13c:	b538      	push	{r3, r4, r5, lr}
 800f13e:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800f140:	4d0f      	ldr	r5, [pc, #60]	; (800f180 <net_if_carrier_down+0x44>)
 800f142:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f14a:	4628      	mov	r0, r5
 800f14c:	f006 fbe6 	bl	801591c <z_impl_k_mutex_lock>
	atomic_clear_bit(iface->if_dev->flags, value);
 800f150:	6823      	ldr	r3, [r4, #0]
 800f152:	330c      	adds	r3, #12
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
 800f154:	f3bf 8f5b 	dmb	ish
 800f158:	e853 2f00 	ldrex	r2, [r3]
 800f15c:	f022 0201 	bic.w	r2, r2, #1
 800f160:	e843 2100 	strex	r1, r2, [r3]
 800f164:	2900      	cmp	r1, #0
 800f166:	d1f7      	bne.n	800f158 <net_if_carrier_down+0x1c>
 800f168:	f3bf 8f5b 	dmb	ish
 800f16c:	2300      	movs	r3, #0
 800f16e:	461a      	mov	r2, r3
 800f170:	4621      	mov	r1, r4
 800f172:	4804      	ldr	r0, [pc, #16]	; (800f184 <net_if_carrier_down+0x48>)
 800f174:	f000 fb40 	bl	800f7f8 <net_mgmt_event_notify_with_info>
	return z_impl_k_mutex_unlock(mutex);
 800f178:	4628      	mov	r0, r5
 800f17a:	f006 fc59 	bl	8015a30 <z_impl_k_mutex_unlock>
	net_ipv4_autoconf_reset(iface);

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);

	k_mutex_unlock(&lock);
}
 800f17e:	bd38      	pop	{r3, r4, r5, pc}
 800f180:	20001094 	.word	0x20001094
 800f184:	d0010001 	.word	0xd0010001

0800f188 <net_if_register_timestamp_cb>:

void net_if_register_timestamp_cb(struct net_if_timestamp_cb *handle,
				  struct net_pkt *pkt,
				  struct net_if *iface,
				  net_if_timestamp_callback_t cb)
{
 800f188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f18c:	4605      	mov	r5, r0
 800f18e:	460f      	mov	r7, r1
 800f190:	4691      	mov	r9, r2
 800f192:	4698      	mov	r8, r3
	return z_impl_k_mutex_lock(mutex, timeout);
 800f194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f19c:	481a      	ldr	r0, [pc, #104]	; (800f208 <net_if_register_timestamp_cb+0x80>)
 800f19e:	f006 fbbd 	bl	801591c <z_impl_k_mutex_lock>
	k_mutex_lock(&lock, K_FOREVER);

	sys_slist_find_and_remove(&timestamp_callbacks, &handle->node);
 800f1a2:	462e      	mov	r6, r5
 800f1a4:	4b19      	ldr	r3, [pc, #100]	; (800f20c <net_if_register_timestamp_cb+0x84>)
 800f1a6:	681c      	ldr	r4, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800f1a8:	2000      	movs	r0, #0
 800f1aa:	b16c      	cbz	r4, 800f1c8 <net_if_register_timestamp_cb+0x40>
 800f1ac:	42a6      	cmp	r6, r4
 800f1ae:	d002      	beq.n	800f1b6 <net_if_register_timestamp_cb+0x2e>
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	6824      	ldr	r4, [r4, #0]
 800f1b4:	e7f9      	b.n	800f1aa <net_if_register_timestamp_cb+0x22>
Z_GENLIST_REMOVE(slist, snode)
 800f1b6:	b1b8      	cbz	r0, 800f1e8 <net_if_register_timestamp_cb+0x60>
	return node->next;
 800f1b8:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
 800f1ba:	6003      	str	r3, [r0, #0]
	return list->tail;
 800f1bc:	4b13      	ldr	r3, [pc, #76]	; (800f20c <net_if_register_timestamp_cb+0x84>)
 800f1be:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800f1c0:	429d      	cmp	r5, r3
 800f1c2:	d01a      	beq.n	800f1fa <net_if_register_timestamp_cb+0x72>
	parent->next = child;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	602b      	str	r3, [r5, #0]
	return list->head;
 800f1c8:	4b10      	ldr	r3, [pc, #64]	; (800f20c <net_if_register_timestamp_cb+0x84>)
 800f1ca:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 800f1cc:	602a      	str	r2, [r5, #0]
	list->head = node;
 800f1ce:	601d      	str	r5, [r3, #0]
	return list->tail;
 800f1d0:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 800f1d2:	b1ab      	cbz	r3, 800f200 <net_if_register_timestamp_cb+0x78>
	sys_slist_prepend(&timestamp_callbacks, &handle->node);

	handle->iface = iface;
 800f1d4:	f8c5 9008 	str.w	r9, [r5, #8]
	handle->cb = cb;
 800f1d8:	f8c5 800c 	str.w	r8, [r5, #12]
	handle->pkt = pkt;
 800f1dc:	606f      	str	r7, [r5, #4]
	return z_impl_k_mutex_unlock(mutex);
 800f1de:	480a      	ldr	r0, [pc, #40]	; (800f208 <net_if_register_timestamp_cb+0x80>)
 800f1e0:	f006 fc26 	bl	8015a30 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&lock);
}
 800f1e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next;
 800f1e8:	682a      	ldr	r2, [r5, #0]
	list->head = node;
 800f1ea:	4b08      	ldr	r3, [pc, #32]	; (800f20c <net_if_register_timestamp_cb+0x84>)
 800f1ec:	601a      	str	r2, [r3, #0]
	return list->tail;
 800f1ee:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800f1f0:	429d      	cmp	r5, r3
 800f1f2:	d1e7      	bne.n	800f1c4 <net_if_register_timestamp_cb+0x3c>
	list->tail = node;
 800f1f4:	4b05      	ldr	r3, [pc, #20]	; (800f20c <net_if_register_timestamp_cb+0x84>)
 800f1f6:	605a      	str	r2, [r3, #4]
}
 800f1f8:	e7e4      	b.n	800f1c4 <net_if_register_timestamp_cb+0x3c>
	list->tail = node;
 800f1fa:	4b04      	ldr	r3, [pc, #16]	; (800f20c <net_if_register_timestamp_cb+0x84>)
 800f1fc:	6058      	str	r0, [r3, #4]
}
 800f1fe:	e7e1      	b.n	800f1c4 <net_if_register_timestamp_cb+0x3c>
	list->tail = node;
 800f200:	4b02      	ldr	r3, [pc, #8]	; (800f20c <net_if_register_timestamp_cb+0x84>)
 800f202:	605d      	str	r5, [r3, #4]
}
 800f204:	e7e6      	b.n	800f1d4 <net_if_register_timestamp_cb+0x4c>
 800f206:	bf00      	nop
 800f208:	20001094 	.word	0x20001094
 800f20c:	20003398 	.word	0x20003398

0800f210 <net_if_unregister_timestamp_cb>:

void net_if_unregister_timestamp_cb(struct net_if_timestamp_cb *handle)
{
 800f210:	b510      	push	{r4, lr}
 800f212:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800f214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f21c:	4812      	ldr	r0, [pc, #72]	; (800f268 <net_if_unregister_timestamp_cb+0x58>)
 800f21e:	f006 fb7d 	bl	801591c <z_impl_k_mutex_lock>
	k_mutex_lock(&lock, K_FOREVER);

	sys_slist_find_and_remove(&timestamp_callbacks, &handle->node);
 800f222:	4621      	mov	r1, r4
	return list->head;
 800f224:	4b11      	ldr	r3, [pc, #68]	; (800f26c <net_if_unregister_timestamp_cb+0x5c>)
 800f226:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800f228:	2200      	movs	r2, #0
 800f22a:	b16b      	cbz	r3, 800f248 <net_if_unregister_timestamp_cb+0x38>
 800f22c:	4299      	cmp	r1, r3
 800f22e:	d002      	beq.n	800f236 <net_if_unregister_timestamp_cb+0x26>
 800f230:	461a      	mov	r2, r3
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	e7f9      	b.n	800f22a <net_if_unregister_timestamp_cb+0x1a>
Z_GENLIST_REMOVE(slist, snode)
 800f236:	b15a      	cbz	r2, 800f250 <net_if_unregister_timestamp_cb+0x40>
	return node->next;
 800f238:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
 800f23a:	6013      	str	r3, [r2, #0]
	return list->tail;
 800f23c:	4b0b      	ldr	r3, [pc, #44]	; (800f26c <net_if_unregister_timestamp_cb+0x5c>)
 800f23e:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800f240:	429c      	cmp	r4, r3
 800f242:	d00e      	beq.n	800f262 <net_if_unregister_timestamp_cb+0x52>
	parent->next = child;
 800f244:	2300      	movs	r3, #0
 800f246:	6023      	str	r3, [r4, #0]
	return z_impl_k_mutex_unlock(mutex);
 800f248:	4807      	ldr	r0, [pc, #28]	; (800f268 <net_if_unregister_timestamp_cb+0x58>)
 800f24a:	f006 fbf1 	bl	8015a30 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&lock);
}
 800f24e:	bd10      	pop	{r4, pc}
	return node->next;
 800f250:	6822      	ldr	r2, [r4, #0]
	list->head = node;
 800f252:	4b06      	ldr	r3, [pc, #24]	; (800f26c <net_if_unregister_timestamp_cb+0x5c>)
 800f254:	601a      	str	r2, [r3, #0]
	return list->tail;
 800f256:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800f258:	429c      	cmp	r4, r3
 800f25a:	d1f3      	bne.n	800f244 <net_if_unregister_timestamp_cb+0x34>
	list->tail = node;
 800f25c:	4b03      	ldr	r3, [pc, #12]	; (800f26c <net_if_unregister_timestamp_cb+0x5c>)
 800f25e:	605a      	str	r2, [r3, #4]
}
 800f260:	e7f0      	b.n	800f244 <net_if_unregister_timestamp_cb+0x34>
	list->tail = node;
 800f262:	4b02      	ldr	r3, [pc, #8]	; (800f26c <net_if_unregister_timestamp_cb+0x5c>)
 800f264:	605a      	str	r2, [r3, #4]
}
 800f266:	e7ed      	b.n	800f244 <net_if_unregister_timestamp_cb+0x34>
 800f268:	20001094 	.word	0x20001094
 800f26c:	20003398 	.word	0x20003398

0800f270 <net_if_call_timestamp_cb>:

void net_if_call_timestamp_cb(struct net_pkt *pkt)
{
 800f270:	b538      	push	{r3, r4, r5, lr}
 800f272:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800f274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f27c:	4811      	ldr	r0, [pc, #68]	; (800f2c4 <net_if_call_timestamp_cb+0x54>)
 800f27e:	f006 fb4d 	bl	801591c <z_impl_k_mutex_lock>
	return list->head;
 800f282:	4b11      	ldr	r3, [pc, #68]	; (800f2c8 <net_if_call_timestamp_cb+0x58>)
 800f284:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
 800f286:	b1a3      	cbz	r3, 800f2b2 <net_if_call_timestamp_cb+0x42>
	return node->next;
 800f288:	681c      	ldr	r4, [r3, #0]
 800f28a:	e006      	b.n	800f29a <net_if_call_timestamp_cb+0x2a>
			CONTAINER_OF(sn, struct net_if_timestamp_cb, node);

		if (((handle->iface == NULL) ||
		     (handle->iface == net_pkt_iface(pkt))) &&
		    (handle->pkt == NULL || handle->pkt == pkt)) {
			handle->cb(pkt);
 800f28c:	68db      	ldr	r3, [r3, #12]
 800f28e:	4628      	mov	r0, r5
 800f290:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 800f292:	b184      	cbz	r4, 800f2b6 <net_if_call_timestamp_cb+0x46>
	return node->next;
 800f294:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
 800f296:	4623      	mov	r3, r4
 800f298:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_NODE_SAFE(&timestamp_callbacks, sn, sns) {
 800f29a:	b173      	cbz	r3, 800f2ba <net_if_call_timestamp_cb+0x4a>
		if (((handle->iface == NULL) ||
 800f29c:	689a      	ldr	r2, [r3, #8]
 800f29e:	b112      	cbz	r2, 800f2a6 <net_if_call_timestamp_cb+0x36>
	return pkt->iface;
 800f2a0:	69a9      	ldr	r1, [r5, #24]
 800f2a2:	428a      	cmp	r2, r1
 800f2a4:	d1f5      	bne.n	800f292 <net_if_call_timestamp_cb+0x22>
		    (handle->pkt == NULL || handle->pkt == pkt)) {
 800f2a6:	685a      	ldr	r2, [r3, #4]
		     (handle->iface == net_pkt_iface(pkt))) &&
 800f2a8:	2a00      	cmp	r2, #0
 800f2aa:	d0ef      	beq.n	800f28c <net_if_call_timestamp_cb+0x1c>
		    (handle->pkt == NULL || handle->pkt == pkt)) {
 800f2ac:	42aa      	cmp	r2, r5
 800f2ae:	d1f0      	bne.n	800f292 <net_if_call_timestamp_cb+0x22>
 800f2b0:	e7ec      	b.n	800f28c <net_if_call_timestamp_cb+0x1c>
 800f2b2:	461c      	mov	r4, r3
 800f2b4:	e7f1      	b.n	800f29a <net_if_call_timestamp_cb+0x2a>
 800f2b6:	4622      	mov	r2, r4
 800f2b8:	e7ed      	b.n	800f296 <net_if_call_timestamp_cb+0x26>
	return z_impl_k_mutex_unlock(mutex);
 800f2ba:	4802      	ldr	r0, [pc, #8]	; (800f2c4 <net_if_call_timestamp_cb+0x54>)
 800f2bc:	f006 fbb8 	bl	8015a30 <z_impl_k_mutex_unlock>
		}
	}

	k_mutex_unlock(&lock);
}
 800f2c0:	bd38      	pop	{r3, r4, r5, pc}
 800f2c2:	bf00      	nop
 800f2c4:	20001094 	.word	0x20001094
 800f2c8:	20003398 	.word	0x20003398

0800f2cc <net_tx_ts_thread>:
{
 800f2cc:	b508      	push	{r3, lr}
 800f2ce:	e001      	b.n	800f2d4 <net_tx_ts_thread+0x8>
			net_if_call_timestamp_cb(pkt);
 800f2d0:	f7ff ffce 	bl	800f270 <net_if_call_timestamp_cb>
	return z_impl_k_queue_get(queue, timeout);
 800f2d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f2d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f2dc:	4802      	ldr	r0, [pc, #8]	; (800f2e8 <net_tx_ts_thread+0x1c>)
 800f2de:	f006 fbeb 	bl	8015ab8 <z_impl_k_queue_get>
		if (pkt) {
 800f2e2:	2800      	cmp	r0, #0
 800f2e4:	d1f4      	bne.n	800f2d0 <net_tx_ts_thread+0x4>
 800f2e6:	e7f5      	b.n	800f2d4 <net_tx_ts_thread+0x8>
 800f2e8:	20001148 	.word	0x20001148

0800f2ec <net_if_add_tx_timestamp>:

void net_if_add_tx_timestamp(struct net_pkt *pkt)
{
 800f2ec:	b508      	push	{r3, lr}
 800f2ee:	4601      	mov	r1, r0
	k_fifo_put(&tx_ts_queue, pkt);
 800f2f0:	4801      	ldr	r0, [pc, #4]	; (800f2f8 <net_if_add_tx_timestamp+0xc>)
 800f2f2:	f00c fe3a 	bl	801bf6a <k_queue_append>
}
 800f2f6:	bd08      	pop	{r3, pc}
 800f2f8:	20001148 	.word	0x20001148

0800f2fc <net_if_init>:
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
 800f2fc:	b570      	push	{r4, r5, r6, lr}
 800f2fe:	b096      	sub	sp, #88	; 0x58
	return z_impl_k_mutex_lock(mutex, timeout);
 800f300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f308:	4852      	ldr	r0, [pc, #328]	; (800f454 <net_if_init+0x158>)
 800f30a:	f006 fb07 	bl	801591c <z_impl_k_mutex_lock>

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);

	net_tc_tx_init();
 800f30e:	f000 fd07 	bl	800fd20 <net_tc_tx_init>

	STRUCT_SECTION_FOREACH(net_if, iface) {
 800f312:	4c51      	ldr	r4, [pc, #324]	; (800f458 <net_if_init+0x15c>)
	int if_count = 0;
 800f314:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800f316:	e044      	b.n	800f3a2 <net_if_init+0xa6>
		NET_ERR("Iface %p driver API init NULL", iface);
 800f318:	4b50      	ldr	r3, [pc, #320]	; (800f45c <net_if_init+0x160>)
 800f31a:	9314      	str	r3, [sp, #80]	; 0x50
 800f31c:	9415      	str	r4, [sp, #84]	; 0x54
 800f31e:	2300      	movs	r3, #0
 800f320:	f8ad 3025 	strh.w	r3, [sp, #37]	; 0x25
 800f324:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800f328:	2203      	movs	r2, #3
 800f32a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800f32e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 800f332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f334:	9213      	str	r2, [sp, #76]	; 0x4c
 800f336:	f363 0500 	bfi	r5, r3, #0, #1
 800f33a:	f363 0541 	bfi	r5, r3, #1, #1
 800f33e:	f363 0582 	bfi	r5, r3, #2, #1
 800f342:	f363 05c5 	bfi	r5, r3, #3, #3
 800f346:	2201      	movs	r2, #1
 800f348:	f362 1588 	bfi	r5, r2, #6, #3
 800f34c:	220c      	movs	r2, #12
 800f34e:	f362 2552 	bfi	r5, r2, #9, #10
 800f352:	f363 45de 	bfi	r5, r3, #19, #12
 800f356:	f363 75df 	bfi	r5, r3, #31, #1
 800f35a:	462a      	mov	r2, r5
 800f35c:	4940      	ldr	r1, [pc, #256]	; (800f460 <net_if_init+0x164>)
 800f35e:	a810      	add	r0, sp, #64	; 0x40
 800f360:	f008 fcf7 	bl	8017d52 <z_log_msg2_finalize>
		return;
 800f364:	e01a      	b.n	800f39c <net_if_init+0xa0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 800f366:	e853 1f00 	ldrex	r1, [r3]
 800f36a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800f36e:	e843 1000 	strex	r0, r1, [r3]
 800f372:	2800      	cmp	r0, #0
 800f374:	d1f7      	bne.n	800f366 <net_if_init+0x6a>
 800f376:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(iface->if_dev->flags, value);
 800f37a:	6823      	ldr	r3, [r4, #0]
 800f37c:	330c      	adds	r3, #12
 800f37e:	f3bf 8f5b 	dmb	ish
 800f382:	e853 1f00 	ldrex	r1, [r3]
 800f386:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800f38a:	e843 1000 	strex	r0, r1, [r3]
 800f38e:	2800      	cmp	r0, #0
 800f390:	d1f7      	bne.n	800f382 <net_if_init+0x86>
 800f392:	f3bf 8f5b 	dmb	ish
	api->init(iface);
 800f396:	6813      	ldr	r3, [r2, #0]
 800f398:	4620      	mov	r0, r4
 800f39a:	4798      	blx	r3
		init_iface(iface);
		if_count++;
 800f39c:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800f39e:	f504 7406 	add.w	r4, r4, #536	; 0x218
 800f3a2:	4b30      	ldr	r3, [pc, #192]	; (800f464 <net_if_init+0x168>)
 800f3a4:	429c      	cmp	r4, r3
 800f3a6:	d20b      	bcs.n	800f3c0 <net_if_init+0xc4>
	return iface->if_dev->dev;
 800f3a8:	6823      	ldr	r3, [r4, #0]
 800f3aa:	681a      	ldr	r2, [r3, #0]
	const struct net_if_api *api = net_if_get_device(iface)->api;
 800f3ac:	6892      	ldr	r2, [r2, #8]
	if (!api || !api->init) {
 800f3ae:	2a00      	cmp	r2, #0
 800f3b0:	d0b2      	beq.n	800f318 <net_if_init+0x1c>
 800f3b2:	6811      	ldr	r1, [r2, #0]
 800f3b4:	2900      	cmp	r1, #0
 800f3b6:	d0af      	beq.n	800f318 <net_if_init+0x1c>
	atomic_set_bit(iface->if_dev->flags, value);
 800f3b8:	330c      	adds	r3, #12
 800f3ba:	f3bf 8f5b 	dmb	ish
 800f3be:	e7d2      	b.n	800f366 <net_if_init+0x6a>
	}

	if (if_count == 0) {
 800f3c0:	b326      	cbz	r6, 800f40c <net_if_init+0x110>
		NET_ERR("There is no network interface to work with!");
		goto out;
	}

	iface_ipv6_init(if_count);
 800f3c2:	4630      	mov	r0, r6
 800f3c4:	f7ff f9f8 	bl	800e7b8 <iface_ipv6_init>
	iface_ipv4_init(if_count);
 800f3c8:	4630      	mov	r0, r6
 800f3ca:	f7fd fabf 	bl	800c94c <iface_ipv4_init>
	iface_router_init();
 800f3ce:	f7fd ff75 	bl	800d2bc <iface_router_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800f3d2:	4c25      	ldr	r4, [pc, #148]	; (800f468 <net_if_init+0x16c>)
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f3dc:	2300      	movs	r3, #0
 800f3de:	9304      	str	r3, [sp, #16]
 800f3e0:	f06f 020e 	mvn.w	r2, #14
 800f3e4:	9203      	str	r2, [sp, #12]
 800f3e6:	9302      	str	r3, [sp, #8]
 800f3e8:	9301      	str	r3, [sp, #4]
 800f3ea:	9300      	str	r3, [sp, #0]
 800f3ec:	4b1f      	ldr	r3, [pc, #124]	; (800f46c <net_if_init+0x170>)
 800f3ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f3f2:	491f      	ldr	r1, [pc, #124]	; (800f470 <net_if_init+0x174>)
 800f3f4:	4620      	mov	r0, r4
 800f3f6:	f00c fce5 	bl	801bdc4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 800f3fa:	491e      	ldr	r1, [pc, #120]	; (800f474 <net_if_init+0x178>)
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	f006 f9e1 	bl	80157c4 <z_impl_k_thread_name_set>
	return z_impl_k_mutex_unlock(mutex);
 800f402:	4814      	ldr	r0, [pc, #80]	; (800f454 <net_if_init+0x158>)
 800f404:	f006 fb14 	bl	8015a30 <z_impl_k_mutex_unlock>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
 800f408:	b016      	add	sp, #88	; 0x58
 800f40a:	bd70      	pop	{r4, r5, r6, pc}
		NET_ERR("There is no network interface to work with!");
 800f40c:	4b1a      	ldr	r3, [pc, #104]	; (800f478 <net_if_init+0x17c>)
 800f40e:	930e      	str	r3, [sp, #56]	; 0x38
 800f410:	2300      	movs	r3, #0
 800f412:	f8ad 3025 	strh.w	r3, [sp, #37]	; 0x25
 800f416:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 800f41a:	2202      	movs	r2, #2
 800f41c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 800f420:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 800f424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f426:	920d      	str	r2, [sp, #52]	; 0x34
 800f428:	461a      	mov	r2, r3
 800f42a:	f363 0200 	bfi	r2, r3, #0, #1
 800f42e:	f363 0241 	bfi	r2, r3, #1, #1
 800f432:	f363 0282 	bfi	r2, r3, #2, #1
 800f436:	f363 02c5 	bfi	r2, r3, #3, #3
 800f43a:	2101      	movs	r1, #1
 800f43c:	f361 1288 	bfi	r2, r1, #6, #3
 800f440:	2108      	movs	r1, #8
 800f442:	f361 2252 	bfi	r2, r1, #9, #10
 800f446:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800f44a:	4905      	ldr	r1, [pc, #20]	; (800f460 <net_if_init+0x164>)
 800f44c:	a80a      	add	r0, sp, #40	; 0x28
 800f44e:	f008 fc80 	bl	8017d52 <z_log_msg2_finalize>
		goto out;
 800f452:	e7d6      	b.n	800f402 <net_if_init+0x106>
 800f454:	20001094 	.word	0x20001094
 800f458:	200011c8 	.word	0x200011c8
 800f45c:	0801e2d8 	.word	0x0801e2d8
 800f460:	0801d778 	.word	0x0801d778
 800f464:	200013e0 	.word	0x200013e0
 800f468:	20001d58 	.word	0x20001d58
 800f46c:	0800f2cd 	.word	0x0800f2cd
 800f470:	20004500 	.word	0x20004500
 800f474:	0801e324 	.word	0x0801e324
 800f478:	0801e2f8 	.word	0x0801e2f8

0800f47c <net_if_post_init>:

void net_if_post_init(void)
{
 800f47c:	b510      	push	{r4, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800f47e:	4c0c      	ldr	r4, [pc, #48]	; (800f4b0 <net_if_post_init+0x34>)
 800f480:	e004      	b.n	800f48c <net_if_post_init+0x10>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
 800f482:	4620      	mov	r0, r4
 800f484:	f7ff fe08 	bl	800f098 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
 800f488:	f504 7406 	add.w	r4, r4, #536	; 0x218
 800f48c:	4b09      	ldr	r3, [pc, #36]	; (800f4b4 <net_if_post_init+0x38>)
 800f48e:	429c      	cmp	r4, r3
 800f490:	d20c      	bcs.n	800f4ac <net_if_post_init+0x30>
	if (iface == NULL) {
 800f492:	2c00      	cmp	r4, #0
 800f494:	d0f5      	beq.n	800f482 <net_if_post_init+0x6>
	return atomic_test_bit(iface->if_dev->flags, value);
 800f496:	6823      	ldr	r3, [r4, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 800f498:	f3bf 8f5b 	dmb	ish
 800f49c:	68db      	ldr	r3, [r3, #12]
 800f49e:	f3bf 8f5b 	dmb	ish
 800f4a2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d1ee      	bne.n	800f488 <net_if_post_init+0xc>
 800f4aa:	e7ea      	b.n	800f482 <net_if_post_init+0x6>
		}
	}
}
 800f4ac:	bd10      	pop	{r4, pc}
 800f4ae:	bf00      	nop
 800f4b0:	200011c8 	.word	0x200011c8
 800f4b4:	200013e0 	.word	0x200013e0

0800f4b8 <net_value_to_udec>:
	*(ptr - 1) = '\0';
	return buf;
}

static int net_value_to_udec(char *buf, uint32_t value, int precision)
{
 800f4b8:	b470      	push	{r4, r5, r6}
 800f4ba:	4606      	mov	r6, r0
	int i;
	int temp;
	char *start = buf;

	divisor = 1000000000U;
	if (precision < 0) {
 800f4bc:	2a00      	cmp	r2, #0
 800f4be:	db03      	blt.n	800f4c8 <net_value_to_udec+0x10>
	for (i = 9; i >= 0; i--, divisor /= 10U) {
		temp = value / divisor;
		value = value % divisor;
		if ((precision > i) || (temp != 0)) {
			precision = i;
			*buf++ = (char) (temp + '0');
 800f4c0:	4630      	mov	r0, r6
 800f4c2:	2409      	movs	r4, #9
 800f4c4:	4b0e      	ldr	r3, [pc, #56]	; (800f500 <net_value_to_udec+0x48>)
 800f4c6:	e00a      	b.n	800f4de <net_value_to_udec+0x26>
		precision = 1;
 800f4c8:	2201      	movs	r2, #1
 800f4ca:	e7f9      	b.n	800f4c0 <net_value_to_udec+0x8>
			*buf++ = (char) (temp + '0');
 800f4cc:	3530      	adds	r5, #48	; 0x30
 800f4ce:	f800 5b01 	strb.w	r5, [r0], #1
			precision = i;
 800f4d2:	4622      	mov	r2, r4
	for (i = 9; i >= 0; i--, divisor /= 10U) {
 800f4d4:	3c01      	subs	r4, #1
 800f4d6:	4d0b      	ldr	r5, [pc, #44]	; (800f504 <net_value_to_udec+0x4c>)
 800f4d8:	fba5 5303 	umull	r5, r3, r5, r3
 800f4dc:	08db      	lsrs	r3, r3, #3
 800f4de:	2c00      	cmp	r4, #0
 800f4e0:	db08      	blt.n	800f4f4 <net_value_to_udec+0x3c>
		temp = value / divisor;
 800f4e2:	fbb1 f5f3 	udiv	r5, r1, r3
		value = value % divisor;
 800f4e6:	fb03 1115 	mls	r1, r3, r5, r1
		if ((precision > i) || (temp != 0)) {
 800f4ea:	42a2      	cmp	r2, r4
 800f4ec:	dcee      	bgt.n	800f4cc <net_value_to_udec+0x14>
 800f4ee:	2d00      	cmp	r5, #0
 800f4f0:	d0f0      	beq.n	800f4d4 <net_value_to_udec+0x1c>
 800f4f2:	e7eb      	b.n	800f4cc <net_value_to_udec+0x14>
		}
	}
	*buf = 0;
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	7003      	strb	r3, [r0, #0]

	return buf - start;
}
 800f4f8:	1b80      	subs	r0, r0, r6
 800f4fa:	bc70      	pop	{r4, r5, r6}
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop
 800f500:	3b9aca00 	.word	0x3b9aca00
 800f504:	cccccccd 	.word	0xcccccccd

0800f508 <net_sprint_ll_addr_buf>:
	if (ll == NULL) {
 800f508:	b330      	cbz	r0, 800f558 <net_sprint_ll_addr_buf+0x50>
{
 800f50a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f50e:	460e      	mov	r6, r1
 800f510:	4690      	mov	r8, r2
 800f512:	4607      	mov	r7, r0
	switch (ll_len) {
 800f514:	2906      	cmp	r1, #6
 800f516:	d004      	beq.n	800f522 <net_sprint_ll_addr_buf+0x1a>
 800f518:	2908      	cmp	r1, #8
 800f51a:	d002      	beq.n	800f522 <net_sprint_ll_addr_buf+0x1a>
 800f51c:	2902      	cmp	r1, #2
 800f51e:	d000      	beq.n	800f522 <net_sprint_ll_addr_buf+0x1a>
		len = 6U;
 800f520:	2606      	movs	r6, #6
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
 800f522:	b2dd      	uxtb	r5, r3
	char *ptr = buf;
 800f524:	4640      	mov	r0, r8
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
 800f526:	2400      	movs	r4, #0
 800f528:	42b4      	cmp	r4, r6
 800f52a:	d20d      	bcs.n	800f548 <net_sprint_ll_addr_buf+0x40>
 800f52c:	b165      	cbz	r5, 800f548 <net_sprint_ll_addr_buf+0x40>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
 800f52e:	2301      	movs	r3, #1
 800f530:	2241      	movs	r2, #65	; 0x41
 800f532:	5d39      	ldrb	r1, [r7, r4]
 800f534:	f00a fab4 	bl	8019aa0 <net_byte_to_hex>
		*ptr++ = ':';
 800f538:	233a      	movs	r3, #58	; 0x3a
 800f53a:	f800 3b01 	strb.w	r3, [r0], #1
		blen -= 3U;
 800f53e:	3d03      	subs	r5, #3
 800f540:	b2ed      	uxtb	r5, r5
	for (i = 0U, blen = buflen; i < len && blen > 0; i++) {
 800f542:	3401      	adds	r4, #1
 800f544:	b2e4      	uxtb	r4, r4
 800f546:	e7ef      	b.n	800f528 <net_sprint_ll_addr_buf+0x20>
	if (!(ptr - buf)) {
 800f548:	4540      	cmp	r0, r8
 800f54a:	d007      	beq.n	800f55c <net_sprint_ll_addr_buf+0x54>
	*(ptr - 1) = '\0';
 800f54c:	2300      	movs	r3, #0
 800f54e:	f800 3c01 	strb.w	r3, [r0, #-1]
	return buf;
 800f552:	4640      	mov	r0, r8
}
 800f554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return "<unknown>";
 800f558:	4801      	ldr	r0, [pc, #4]	; (800f560 <net_sprint_ll_addr_buf+0x58>)
}
 800f55a:	4770      	bx	lr
		return NULL;
 800f55c:	2000      	movs	r0, #0
 800f55e:	e7f9      	b.n	800f554 <net_sprint_ll_addr_buf+0x4c>
 800f560:	0801e338 	.word	0x0801e338

0800f564 <net_sprint_addr>:
{
 800f564:	b510      	push	{r4, lr}
	char *s = buf[++i % NBUFS];
 800f566:	4b0a      	ldr	r3, [pc, #40]	; (800f590 <net_sprint_addr+0x2c>)
 800f568:	681a      	ldr	r2, [r3, #0]
 800f56a:	3201      	adds	r2, #1
 800f56c:	601a      	str	r2, [r3, #0]
 800f56e:	4b09      	ldr	r3, [pc, #36]	; (800f594 <net_sprint_addr+0x30>)
 800f570:	fb83 4302 	smull	r4, r3, r3, r2
 800f574:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 800f578:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f57c:	1ad3      	subs	r3, r2, r3
 800f57e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f582:	00dc      	lsls	r4, r3, #3
 800f584:	4a04      	ldr	r2, [pc, #16]	; (800f598 <net_sprint_addr+0x34>)
 800f586:	4422      	add	r2, r4
		/* coverity[OVERRUN] */
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
 800f588:	2328      	movs	r3, #40	; 0x28
 800f58a:	f00a faa6 	bl	8019ada <z_impl_net_addr_ntop>
}
 800f58e:	bd10      	pop	{r4, pc}
 800f590:	20003418 	.word	0x20003418
 800f594:	55555556 	.word	0x55555556
 800f598:	200033a0 	.word	0x200033a0

0800f59c <net_ipv4_unspecified_address>:
const struct in_addr *net_ipv4_unspecified_address(void)
{
	static const struct in_addr addr;

	return &addr;
}
 800f59c:	4800      	ldr	r0, [pc, #0]	; (800f5a0 <net_ipv4_unspecified_address+0x4>)
 800f59e:	4770      	bx	lr
 800f5a0:	0801e350 	.word	0x0801e350

0800f5a4 <net_ipv4_broadcast_address>:
const struct in_addr *net_ipv4_broadcast_address(void)
{
	static const struct in_addr addr = { { { 255, 255, 255, 255 } } };

	return &addr;
}
 800f5a4:	4800      	ldr	r0, [pc, #0]	; (800f5a8 <net_ipv4_broadcast_address+0x4>)
 800f5a6:	4770      	bx	lr
 800f5a8:	0801e354 	.word	0x0801e354

0800f5ac <net_ipv6_unspecified_address>:
const struct in6_addr in6addr_loopback = IN6ADDR_LOOPBACK_INIT;

const struct in6_addr *net_ipv6_unspecified_address(void)
{
	return &in6addr_any;
}
 800f5ac:	4800      	ldr	r0, [pc, #0]	; (800f5b0 <net_ipv6_unspecified_address+0x4>)
 800f5ae:	4770      	bx	lr
 800f5b0:	0801e358 	.word	0x0801e358

0800f5b4 <mgmt_thread>:
	log_stack_usage(&mgmt_thread_data);
#endif
}

static void mgmt_thread(void)
{
 800f5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5b8:	e013      	b.n	800f5e2 <mgmt_thread+0x2e>
		in_event = -1;
 800f5ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f5be:	4a50      	ldr	r2, [pc, #320]	; (800f700 <mgmt_thread+0x14c>)
 800f5c0:	8013      	strh	r3, [r2, #0]
		out_event = -1;
 800f5c2:	4a50      	ldr	r2, [pc, #320]	; (800f704 <mgmt_thread+0x150>)
 800f5c4:	8013      	strh	r3, [r2, #0]
 800f5c6:	e02f      	b.n	800f628 <mgmt_thread+0x74>
		out_event = 0;
 800f5c8:	4b4e      	ldr	r3, [pc, #312]	; (800f704 <mgmt_thread+0x150>)
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	801a      	strh	r2, [r3, #0]
 800f5ce:	e02b      	b.n	800f628 <mgmt_thread+0x74>
	return z_impl_k_sem_init(sem, initial_count, limit);
 800f5d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5d4:	2100      	movs	r1, #0
 800f5d6:	484c      	ldr	r0, [pc, #304]	; (800f708 <mgmt_thread+0x154>)
 800f5d8:	f00c fcde 	bl	801bf98 <z_impl_k_sem_init>
	return z_impl_k_mutex_unlock(mutex);
 800f5dc:	484b      	ldr	r0, [pc, #300]	; (800f70c <mgmt_thread+0x158>)
 800f5de:	f006 fa27 	bl	8015a30 <z_impl_k_mutex_unlock>
	struct mgmt_event_entry *mgmt_event;

	while (1) {
		k_sem_take(&network_event, K_FOREVER);
 800f5e2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f5e6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	return z_impl_k_sem_take(sem, timeout);
 800f5ea:	4622      	mov	r2, r4
 800f5ec:	462b      	mov	r3, r5
 800f5ee:	4846      	ldr	r0, [pc, #280]	; (800f708 <mgmt_thread+0x154>)
 800f5f0:	f006 fac8 	bl	8015b84 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
 800f5f4:	4622      	mov	r2, r4
 800f5f6:	462b      	mov	r3, r5
 800f5f8:	4844      	ldr	r0, [pc, #272]	; (800f70c <mgmt_thread+0x158>)
 800f5fa:	f006 f98f 	bl	801591c <z_impl_k_mutex_lock>
	if (out_event < 0 || !events[out_event].event) {
 800f5fe:	4b41      	ldr	r3, [pc, #260]	; (800f704 <mgmt_thread+0x150>)
 800f600:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f604:	2e00      	cmp	r6, #0
 800f606:	dbe3      	blt.n	800f5d0 <mgmt_thread+0x1c>
 800f608:	4b41      	ldr	r3, [pc, #260]	; (800f710 <mgmt_thread+0x15c>)
 800f60a:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d0de      	beq.n	800f5d0 <mgmt_thread+0x1c>
	out_event++;
 800f612:	1c73      	adds	r3, r6, #1
 800f614:	b21b      	sxth	r3, r3
 800f616:	4a3b      	ldr	r2, [pc, #236]	; (800f704 <mgmt_thread+0x150>)
 800f618:	8013      	strh	r3, [r2, #0]
	if (o_idx == in_event) {
 800f61a:	4a39      	ldr	r2, [pc, #228]	; (800f700 <mgmt_thread+0x14c>)
 800f61c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f620:	42b2      	cmp	r2, r6
 800f622:	d0ca      	beq.n	800f5ba <mgmt_thread+0x6>
	} else if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
 800f624:	2b02      	cmp	r3, #2
 800f626:	d0cf      	beq.n	800f5c8 <mgmt_thread+0x14>
	return &events[o_idx];
 800f628:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 800f710 <mgmt_thread+0x15c>
		(void)k_mutex_lock(&net_mgmt_lock, K_FOREVER);

		NET_DBG("Handling events, forwarding it relevantly");

		mgmt_event = mgmt_pop_event();
		if (!mgmt_event) {
 800f62c:	eb18 07c6 	adds.w	r7, r8, r6, lsl #3
 800f630:	d0ce      	beq.n	800f5d0 <mgmt_thread+0x1c>
	return list->head;
 800f632:	4b38      	ldr	r3, [pc, #224]	; (800f714 <mgmt_thread+0x160>)
 800f634:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
 800f636:	b12c      	cbz	r4, 800f644 <mgmt_thread+0x90>
 800f638:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 800f63a:	b104      	cbz	r4, 800f63e <mgmt_thread+0x8a>
	return node->next;
 800f63c:	6825      	ldr	r5, [r4, #0]
 800f63e:	f04f 0900 	mov.w	r9, #0
 800f642:	e01a      	b.n	800f67a <mgmt_thread+0xc6>
 800f644:	4625      	mov	r5, r4
 800f646:	e7fa      	b.n	800f63e <mgmt_thread+0x8a>
 800f648:	6822      	ldr	r2, [r4, #0]
	list->head = node;
 800f64a:	4b32      	ldr	r3, [pc, #200]	; (800f714 <mgmt_thread+0x160>)
 800f64c:	601a      	str	r2, [r3, #0]
	return list->tail;
 800f64e:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800f650:	429c      	cmp	r4, r3
 800f652:	d142      	bne.n	800f6da <mgmt_thread+0x126>
	list->tail = node;
 800f654:	4b2f      	ldr	r3, [pc, #188]	; (800f714 <mgmt_thread+0x160>)
 800f656:	605a      	str	r2, [r3, #4]
}
 800f658:	e03f      	b.n	800f6da <mgmt_thread+0x126>
	list->tail = node;
 800f65a:	4b2e      	ldr	r3, [pc, #184]	; (800f714 <mgmt_thread+0x160>)
 800f65c:	f8c3 9004 	str.w	r9, [r3, #4]
}
 800f660:	e03b      	b.n	800f6da <mgmt_thread+0x126>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
 800f662:	6863      	ldr	r3, [r4, #4]
 800f664:	687a      	ldr	r2, [r7, #4]
 800f666:	4620      	mov	r0, r4
 800f668:	4798      	blx	r3
			prev = &cb->node;
 800f66a:	46a1      	mov	r9, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
 800f66c:	2d00      	cmp	r5, #0
 800f66e:	d03a      	beq.n	800f6e6 <mgmt_thread+0x132>
 800f670:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
 800f672:	b105      	cbz	r5, 800f676 <mgmt_thread+0xc2>
	return node->next;
 800f674:	682b      	ldr	r3, [r5, #0]
 800f676:	462c      	mov	r4, r5
 800f678:	461d      	mov	r5, r3
 800f67a:	2c00      	cmp	r4, #0
 800f67c:	d035      	beq.n	800f6ea <mgmt_thread+0x136>
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
 800f67e:	6839      	ldr	r1, [r7, #0]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
 800f680:	68a2      	ldr	r2, [r4, #8]
 800f682:	0f13      	lsrs	r3, r2, #28
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) ==
 800f684:	ea83 7311 	eor.w	r3, r3, r1, lsr #28
 800f688:	f013 0f03 	tst.w	r3, #3
 800f68c:	d1ee      	bne.n	800f66c <mgmt_thread+0xb8>
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
 800f68e:	0c13      	lsrs	r3, r2, #16
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) ==
 800f690:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 800f694:	f3c3 030a 	ubfx	r3, r3, #0, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d1e7      	bne.n	800f66c <mgmt_thread+0xb8>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
 800f69c:	b28b      	uxth	r3, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
 800f69e:	b133      	cbz	r3, 800f6ae <mgmt_thread+0xfa>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
 800f6a0:	b293      	uxth	r3, r2
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
 800f6a2:	b123      	cbz	r3, 800f6ae <mgmt_thread+0xfa>
		     !(NET_MGMT_GET_COMMAND(mgmt_event->event) &
 800f6a4:	ea01 0302 	and.w	r3, r1, r2
 800f6a8:	b29b      	uxth	r3, r3
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d0de      	beq.n	800f66c <mgmt_thread+0xb8>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
 800f6ae:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
 800f6b2:	d0d6      	beq.n	800f662 <mgmt_thread+0xae>
			struct mgmt_event_wait *sync_data =
 800f6b4:	6862      	ldr	r2, [r4, #4]
			if (sync_data->iface &&
 800f6b6:	6993      	ldr	r3, [r2, #24]
 800f6b8:	b113      	cbz	r3, 800f6c0 <mgmt_thread+0x10c>
			    sync_data->iface != mgmt_event->iface) {
 800f6ba:	6878      	ldr	r0, [r7, #4]
			if (sync_data->iface &&
 800f6bc:	4283      	cmp	r3, r0
 800f6be:	d1d5      	bne.n	800f66c <mgmt_thread+0xb8>
			cb->raised_event = mgmt_event->event;
 800f6c0:	60a1      	str	r1, [r4, #8]
			sync_data->iface = mgmt_event->iface;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6193      	str	r3, [r2, #24]
Z_GENLIST_REMOVE(slist, snode)
 800f6c6:	f1b9 0f00 	cmp.w	r9, #0
 800f6ca:	d0bd      	beq.n	800f648 <mgmt_thread+0x94>
	return node->next;
 800f6cc:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
 800f6ce:	f8c9 3000 	str.w	r3, [r9]
	return list->tail;
 800f6d2:	4b10      	ldr	r3, [pc, #64]	; (800f714 <mgmt_thread+0x160>)
 800f6d4:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800f6d6:	429c      	cmp	r4, r3
 800f6d8:	d0bf      	beq.n	800f65a <mgmt_thread+0xa6>
	parent->next = child;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	6023      	str	r3, [r4, #0]
			k_sem_give(cb->sync_call);
 800f6de:	6860      	ldr	r0, [r4, #4]
	z_impl_k_sem_give(sem);
 800f6e0:	f006 fa28 	bl	8015b34 <z_impl_k_sem_give>
}
 800f6e4:	e7c2      	b.n	800f66c <mgmt_thread+0xb8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
 800f6e6:	462b      	mov	r3, r5
 800f6e8:	e7c5      	b.n	800f676 <mgmt_thread+0xc2>
	mgmt_event->event = 0U;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	f848 3036 	str.w	r3, [r8, r6, lsl #3]
	mgmt_event->iface = NULL;
 800f6f0:	607b      	str	r3, [r7, #4]
	return z_impl_k_mutex_unlock(mutex);
 800f6f2:	4806      	ldr	r0, [pc, #24]	; (800f70c <mgmt_thread+0x158>)
 800f6f4:	f006 f99c 	bl	8015a30 <z_impl_k_mutex_unlock>
	z_impl_k_yield();
 800f6f8:	f006 ff00 	bl	80164fc <z_impl_k_yield>
 800f6fc:	e771      	b.n	800f5e2 <mgmt_thread+0x2e>
 800f6fe:	bf00      	nop
 800f700:	20003c6c 	.word	0x20003c6c
 800f704:	20003c6e 	.word	0x20003c6e
 800f708:	200010fc 	.word	0x200010fc
 800f70c:	200010bc 	.word	0x200010bc
 800f710:	20003424 	.word	0x20003424
 800f714:	2000341c 	.word	0x2000341c

0800f718 <net_mgmt_add_event_callback>:

	return ret;
}

void net_mgmt_add_event_callback(struct net_mgmt_event_callback *cb)
{
 800f718:	b510      	push	{r4, lr}
 800f71a:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800f71c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f724:	480a      	ldr	r0, [pc, #40]	; (800f750 <net_mgmt_add_event_callback+0x38>)
 800f726:	f006 f8f9 	bl	801591c <z_impl_k_mutex_lock>
	return list->head;
 800f72a:	4b0a      	ldr	r3, [pc, #40]	; (800f754 <net_mgmt_add_event_callback+0x3c>)
 800f72c:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 800f72e:	6022      	str	r2, [r4, #0]
	list->head = node;
 800f730:	601c      	str	r4, [r3, #0]
	return list->tail;
 800f732:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 800f734:	b143      	cbz	r3, 800f748 <net_mgmt_add_event_callback+0x30>

	(void)k_mutex_lock(&net_mgmt_lock, K_FOREVER);

	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);
 800f736:	68a1      	ldr	r1, [r4, #8]
	global_event_mask |= event_mask;
 800f738:	4a07      	ldr	r2, [pc, #28]	; (800f758 <net_mgmt_add_event_callback+0x40>)
 800f73a:	6813      	ldr	r3, [r2, #0]
 800f73c:	430b      	orrs	r3, r1
 800f73e:	6013      	str	r3, [r2, #0]
	return z_impl_k_mutex_unlock(mutex);
 800f740:	4803      	ldr	r0, [pc, #12]	; (800f750 <net_mgmt_add_event_callback+0x38>)
 800f742:	f006 f975 	bl	8015a30 <z_impl_k_mutex_unlock>

	(void)k_mutex_unlock(&net_mgmt_lock);
}
 800f746:	bd10      	pop	{r4, pc}
	list->tail = node;
 800f748:	4b02      	ldr	r3, [pc, #8]	; (800f754 <net_mgmt_add_event_callback+0x3c>)
 800f74a:	605c      	str	r4, [r3, #4]
}
 800f74c:	e7f3      	b.n	800f736 <net_mgmt_add_event_callback+0x1e>
 800f74e:	bf00      	nop
 800f750:	200010bc 	.word	0x200010bc
 800f754:	2000341c 	.word	0x2000341c
 800f758:	20003434 	.word	0x20003434

0800f75c <net_mgmt_del_event_callback>:

void net_mgmt_del_event_callback(struct net_mgmt_event_callback *cb)
{
 800f75c:	b510      	push	{r4, lr}
 800f75e:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 800f760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f768:	4820      	ldr	r0, [pc, #128]	; (800f7ec <net_mgmt_del_event_callback+0x90>)
 800f76a:	f006 f8d7 	bl	801591c <z_impl_k_mutex_lock>
	NET_DBG("Deleting event callback %p", cb);

	(void)k_mutex_lock(&net_mgmt_lock, K_FOREVER);

	sys_slist_find_and_remove(&event_callbacks, &cb->node);
 800f76e:	4621      	mov	r1, r4
	return list->head;
 800f770:	4b1f      	ldr	r3, [pc, #124]	; (800f7f0 <net_mgmt_del_event_callback+0x94>)
 800f772:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 800f774:	2200      	movs	r2, #0
 800f776:	b16b      	cbz	r3, 800f794 <net_mgmt_del_event_callback+0x38>
 800f778:	428b      	cmp	r3, r1
 800f77a:	d002      	beq.n	800f782 <net_mgmt_del_event_callback+0x26>
 800f77c:	461a      	mov	r2, r3
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	e7f9      	b.n	800f776 <net_mgmt_del_event_callback+0x1a>
Z_GENLIST_REMOVE(slist, snode)
 800f782:	b18a      	cbz	r2, 800f7a8 <net_mgmt_del_event_callback+0x4c>
	return node->next;
 800f784:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
 800f786:	6013      	str	r3, [r2, #0]
	return list->tail;
 800f788:	4b19      	ldr	r3, [pc, #100]	; (800f7f0 <net_mgmt_del_event_callback+0x94>)
 800f78a:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800f78c:	42a3      	cmp	r3, r4
 800f78e:	d014      	beq.n	800f7ba <net_mgmt_del_event_callback+0x5e>
	parent->next = child;
 800f790:	2300      	movs	r3, #0
 800f792:	6023      	str	r3, [r4, #0]
	global_event_mask = 0U;
 800f794:	4b17      	ldr	r3, [pc, #92]	; (800f7f4 <net_mgmt_del_event_callback+0x98>)
 800f796:	2200      	movs	r2, #0
 800f798:	601a      	str	r2, [r3, #0]
	return list->head;
 800f79a:	4b15      	ldr	r3, [pc, #84]	; (800f7f0 <net_mgmt_del_event_callback+0x94>)
 800f79c:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
 800f79e:	b17a      	cbz	r2, 800f7c0 <net_mgmt_del_event_callback+0x64>
 800f7a0:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
 800f7a2:	b192      	cbz	r2, 800f7ca <net_mgmt_del_event_callback+0x6e>
	return node->next;
 800f7a4:	6813      	ldr	r3, [r2, #0]
 800f7a6:	e010      	b.n	800f7ca <net_mgmt_del_event_callback+0x6e>
 800f7a8:	6822      	ldr	r2, [r4, #0]
	list->head = node;
 800f7aa:	4b11      	ldr	r3, [pc, #68]	; (800f7f0 <net_mgmt_del_event_callback+0x94>)
 800f7ac:	601a      	str	r2, [r3, #0]
	return list->tail;
 800f7ae:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 800f7b0:	42a3      	cmp	r3, r4
 800f7b2:	d1ed      	bne.n	800f790 <net_mgmt_del_event_callback+0x34>
	list->tail = node;
 800f7b4:	4b0e      	ldr	r3, [pc, #56]	; (800f7f0 <net_mgmt_del_event_callback+0x94>)
 800f7b6:	605a      	str	r2, [r3, #4]
}
 800f7b8:	e7ea      	b.n	800f790 <net_mgmt_del_event_callback+0x34>
	list->tail = node;
 800f7ba:	4b0d      	ldr	r3, [pc, #52]	; (800f7f0 <net_mgmt_del_event_callback+0x94>)
 800f7bc:	605a      	str	r2, [r3, #4]
}
 800f7be:	e7e7      	b.n	800f790 <net_mgmt_del_event_callback+0x34>
 800f7c0:	4613      	mov	r3, r2
 800f7c2:	e002      	b.n	800f7ca <net_mgmt_del_event_callback+0x6e>
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	461a      	mov	r2, r3
 800f7c8:	460b      	mov	r3, r1
 800f7ca:	b15a      	cbz	r2, 800f7e4 <net_mgmt_del_event_callback+0x88>
		mgmt_add_event_mask(cb->event_mask);
 800f7cc:	6890      	ldr	r0, [r2, #8]
	global_event_mask |= event_mask;
 800f7ce:	4909      	ldr	r1, [pc, #36]	; (800f7f4 <net_mgmt_del_event_callback+0x98>)
 800f7d0:	680a      	ldr	r2, [r1, #0]
 800f7d2:	4302      	orrs	r2, r0
 800f7d4:	600a      	str	r2, [r1, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d0f4      	beq.n	800f7c4 <net_mgmt_del_event_callback+0x68>
 800f7da:	4619      	mov	r1, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d0f2      	beq.n	800f7c6 <net_mgmt_del_event_callback+0x6a>
	return node->next;
 800f7e0:	6819      	ldr	r1, [r3, #0]
 800f7e2:	e7f0      	b.n	800f7c6 <net_mgmt_del_event_callback+0x6a>
	return z_impl_k_mutex_unlock(mutex);
 800f7e4:	4801      	ldr	r0, [pc, #4]	; (800f7ec <net_mgmt_del_event_callback+0x90>)
 800f7e6:	f006 f923 	bl	8015a30 <z_impl_k_mutex_unlock>

	mgmt_rebuild_global_event_mask();

	(void)k_mutex_unlock(&net_mgmt_lock);
}
 800f7ea:	bd10      	pop	{r4, pc}
 800f7ec:	200010bc 	.word	0x200010bc
 800f7f0:	2000341c 	.word	0x2000341c
 800f7f4:	20003434 	.word	0x20003434

0800f7f8 <net_mgmt_event_notify_with_info>:

void net_mgmt_event_notify_with_info(uint32_t mgmt_event, struct net_if *iface,
				     const void *info, size_t length)
{
 800f7f8:	b538      	push	{r3, r4, r5, lr}
 800f7fa:	4604      	mov	r4, r0
 800f7fc:	460d      	mov	r5, r1
		  NET_MGMT_GET_LAYER(global_event_mask)) ==
 800f7fe:	4b29      	ldr	r3, [pc, #164]	; (800f8a4 <net_mgmt_event_notify_with_info+0xac>)
 800f800:	681a      	ldr	r2, [r3, #0]
 800f802:	ea6f 7312 	mvn.w	r3, r2, lsr #28
 800f806:	ea03 7310 	and.w	r3, r3, r0, lsr #28
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
 800f80a:	f013 0f03 	tst.w	r3, #3
 800f80e:	d10c      	bne.n	800f82a <net_mgmt_event_notify_with_info+0x32>
		  NET_MGMT_GET_LAYER_CODE(global_event_mask)) ==
 800f810:	ea6f 4312 	mvn.w	r3, r2, lsr #16
 800f814:	ea03 4310 	and.w	r3, r3, r0, lsr #16
 800f818:	f3c3 030a 	ubfx	r3, r3, #0, #11
		 NET_MGMT_GET_LAYER(mgmt_event)) &&
 800f81c:	b943      	cbnz	r3, 800f830 <net_mgmt_event_notify_with_info+0x38>
		  NET_MGMT_GET_COMMAND(global_event_mask)) ==
 800f81e:	ea20 0202 	bic.w	r2, r0, r2
 800f822:	b292      	uxth	r2, r2
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
 800f824:	b912      	cbnz	r2, 800f82c <net_mgmt_event_notify_with_info+0x34>
 800f826:	2301      	movs	r3, #1
 800f828:	e000      	b.n	800f82c <net_mgmt_event_notify_with_info+0x34>
 800f82a:	2300      	movs	r3, #0
	if (mgmt_is_event_handled(mgmt_event)) {
 800f82c:	b913      	cbnz	r3, 800f834 <net_mgmt_event_notify_with_info+0x3c>
			NET_MGMT_GET_COMMAND(mgmt_event));

		mgmt_push_event(mgmt_event, iface, info, length);
		k_sem_give(&network_event);
	}
}
 800f82e:	bd38      	pop	{r3, r4, r5, pc}
		 NET_MGMT_GET_LAYER_CODE(mgmt_event)) &&
 800f830:	2300      	movs	r3, #0
 800f832:	e7fb      	b.n	800f82c <net_mgmt_event_notify_with_info+0x34>
	return z_impl_k_mutex_lock(mutex, timeout);
 800f834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f83c:	481a      	ldr	r0, [pc, #104]	; (800f8a8 <net_mgmt_event_notify_with_info+0xb0>)
 800f83e:	f006 f86d 	bl	801591c <z_impl_k_mutex_lock>
	i_idx = in_event + 1;
 800f842:	4b1a      	ldr	r3, [pc, #104]	; (800f8ac <net_mgmt_event_notify_with_info+0xb4>)
 800f844:	881b      	ldrh	r3, [r3, #0]
 800f846:	3301      	adds	r3, #1
 800f848:	b21b      	sxth	r3, r3
	if (i_idx == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
 800f84a:	2b02      	cmp	r3, #2
 800f84c:	d015      	beq.n	800f87a <net_mgmt_event_notify_with_info+0x82>
	events[i_idx].event = mgmt_event;
 800f84e:	4a18      	ldr	r2, [pc, #96]	; (800f8b0 <net_mgmt_event_notify_with_info+0xb8>)
 800f850:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
	events[i_idx].iface = iface;
 800f854:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f858:	6055      	str	r5, [r2, #4]
	if (i_idx == out_event) {
 800f85a:	4a16      	ldr	r2, [pc, #88]	; (800f8b4 <net_mgmt_event_notify_with_info+0xbc>)
 800f85c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f860:	4293      	cmp	r3, r2
 800f862:	d00c      	beq.n	800f87e <net_mgmt_event_notify_with_info+0x86>
	} else if (out_event < 0) {
 800f864:	2a00      	cmp	r2, #0
 800f866:	db19      	blt.n	800f89c <net_mgmt_event_notify_with_info+0xa4>
	in_event = i_idx;
 800f868:	4a10      	ldr	r2, [pc, #64]	; (800f8ac <net_mgmt_event_notify_with_info+0xb4>)
 800f86a:	8013      	strh	r3, [r2, #0]
	return z_impl_k_mutex_unlock(mutex);
 800f86c:	480e      	ldr	r0, [pc, #56]	; (800f8a8 <net_mgmt_event_notify_with_info+0xb0>)
 800f86e:	f006 f8df 	bl	8015a30 <z_impl_k_mutex_unlock>
	z_impl_k_sem_give(sem);
 800f872:	4811      	ldr	r0, [pc, #68]	; (800f8b8 <net_mgmt_event_notify_with_info+0xc0>)
 800f874:	f006 f95e 	bl	8015b34 <z_impl_k_sem_give>
}
 800f878:	e7d9      	b.n	800f82e <net_mgmt_event_notify_with_info+0x36>
		i_idx = 0;
 800f87a:	2300      	movs	r3, #0
 800f87c:	e7e7      	b.n	800f84e <net_mgmt_event_notify_with_info+0x56>
		uint16_t o_idx = out_event + 1;
 800f87e:	b292      	uxth	r2, r2
 800f880:	3201      	adds	r2, #1
 800f882:	b292      	uxth	r2, r2
		if (o_idx == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
 800f884:	2a02      	cmp	r2, #2
 800f886:	d007      	beq.n	800f898 <net_mgmt_event_notify_with_info+0xa0>
		if (events[o_idx].event) {
 800f888:	4909      	ldr	r1, [pc, #36]	; (800f8b0 <net_mgmt_event_notify_with_info+0xb8>)
 800f88a:	f851 1032 	ldr.w	r1, [r1, r2, lsl #3]
 800f88e:	2900      	cmp	r1, #0
 800f890:	d0ea      	beq.n	800f868 <net_mgmt_event_notify_with_info+0x70>
			out_event = o_idx;
 800f892:	4908      	ldr	r1, [pc, #32]	; (800f8b4 <net_mgmt_event_notify_with_info+0xbc>)
 800f894:	800a      	strh	r2, [r1, #0]
 800f896:	e7e7      	b.n	800f868 <net_mgmt_event_notify_with_info+0x70>
			o_idx = 0U;
 800f898:	2200      	movs	r2, #0
 800f89a:	e7f5      	b.n	800f888 <net_mgmt_event_notify_with_info+0x90>
		out_event = i_idx;
 800f89c:	4a05      	ldr	r2, [pc, #20]	; (800f8b4 <net_mgmt_event_notify_with_info+0xbc>)
 800f89e:	8013      	strh	r3, [r2, #0]
 800f8a0:	e7e2      	b.n	800f868 <net_mgmt_event_notify_with_info+0x70>
 800f8a2:	bf00      	nop
 800f8a4:	20003434 	.word	0x20003434
 800f8a8:	200010bc 	.word	0x200010bc
 800f8ac:	20003c6c 	.word	0x20003c6c
 800f8b0:	20003424 	.word	0x20003424
 800f8b4:	20003c6e 	.word	0x20003c6e
 800f8b8:	200010fc 	.word	0x200010fc

0800f8bc <net_mgmt_event_init>:
				    raised_event, NULL, info, info_length,
				    timeout);
}

void net_mgmt_event_init(void)
{
 800f8bc:	b510      	push	{r4, lr}
 800f8be:	b088      	sub	sp, #32
	in_event = -1;
 800f8c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8c4:	4a11      	ldr	r2, [pc, #68]	; (800f90c <net_mgmt_event_init+0x50>)
 800f8c6:	8013      	strh	r3, [r2, #0]
	out_event = -1;
 800f8c8:	4a11      	ldr	r2, [pc, #68]	; (800f910 <net_mgmt_event_init+0x54>)
 800f8ca:	8013      	strh	r3, [r2, #0]

	(void)memset(events, 0, CONFIG_NET_MGMT_EVENT_QUEUE_SIZE *
 800f8cc:	4a11      	ldr	r2, [pc, #68]	; (800f914 <net_mgmt_event_init+0x58>)
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	6013      	str	r3, [r2, #0]
 800f8d2:	6053      	str	r3, [r2, #4]
 800f8d4:	6093      	str	r3, [r2, #8]
 800f8d6:	60d3      	str	r3, [r2, #12]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800f8d8:	4c0f      	ldr	r4, [pc, #60]	; (800f918 <net_mgmt_event_init+0x5c>)
 800f8da:	2000      	movs	r0, #0
 800f8dc:	2100      	movs	r1, #0
 800f8de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f8e2:	9304      	str	r3, [sp, #16]
 800f8e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f8e8:	9203      	str	r2, [sp, #12]
 800f8ea:	9302      	str	r3, [sp, #8]
 800f8ec:	9301      	str	r3, [sp, #4]
 800f8ee:	9300      	str	r3, [sp, #0]
 800f8f0:	4b0a      	ldr	r3, [pc, #40]	; (800f91c <net_mgmt_event_init+0x60>)
 800f8f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 800f8f6:	490a      	ldr	r1, [pc, #40]	; (800f920 <net_mgmt_event_init+0x64>)
 800f8f8:	4620      	mov	r0, r4
 800f8fa:	f00c fa63 	bl	801bdc4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 800f8fe:	4909      	ldr	r1, [pc, #36]	; (800f924 <net_mgmt_event_init+0x68>)
 800f900:	4620      	mov	r0, r4
 800f902:	f005 ff5f 	bl	80157c4 <z_impl_k_thread_name_set>
	k_thread_name_set(&mgmt_thread_data, "net_mgmt");

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
 800f906:	b008      	add	sp, #32
 800f908:	bd10      	pop	{r4, pc}
 800f90a:	bf00      	nop
 800f90c:	20003c6c 	.word	0x20003c6c
 800f910:	20003c6e 	.word	0x20003c6e
 800f914:	20003424 	.word	0x20003424
 800f918:	20001e40 	.word	0x20001e40
 800f91c:	0800f5b5 	.word	0x0800f5b5
 800f920:	20004980 	.word	0x20004980
 800f924:	0801e368 	.word	0x0801e368

0800f928 <net_context_init>:

	return NULL;
}

void net_context_init(void)
{
 800f928:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
 800f92a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f92e:	2101      	movs	r1, #1
 800f930:	4801      	ldr	r0, [pc, #4]	; (800f938 <net_context_init+0x10>)
 800f932:	f00c fb31 	bl	801bf98 <z_impl_k_sem_init>
	k_sem_init(&contexts_lock, 1, K_SEM_MAX_LIMIT);
}
 800f936:	bd08      	pop	{r3, pc}
 800f938:	20003438 	.word	0x20003438

0800f93c <pkt_buffer_length>:

static size_t pkt_buffer_length(struct net_pkt *pkt,
				size_t size,
				enum net_ip_protocol proto,
				size_t existing)
{
 800f93c:	b430      	push	{r4, r5}
 800f93e:	4602      	mov	r2, r0
 800f940:	4608      	mov	r0, r1
	return pkt->family;
 800f942:	f892 504b 	ldrb.w	r5, [r2, #75]	; 0x4b
	sa_family_t family = net_pkt_family(pkt);
 800f946:	f3c5 0542 	ubfx	r5, r5, #1, #3
	return pkt->iface;
 800f94a:	6994      	ldr	r4, [r2, #24]
	size_t max_len;

	if (net_pkt_iface(pkt)) {
 800f94c:	b174      	cbz	r4, 800f96c <pkt_buffer_length+0x30>
	return iface->if_dev->mtu;
 800f94e:	6822      	ldr	r2, [r4, #0]
 800f950:	8b12      	ldrh	r2, [r2, #24]
	} else {
		max_len = 0;
	}

	/* Family vs iface MTU */
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
 800f952:	2d02      	cmp	r5, #2
 800f954:	d00c      	beq.n	800f970 <pkt_buffer_length+0x34>
			 */
			max_len = size;
		}

		max_len = MAX(max_len, NET_IPV6_MTU);
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
 800f956:	2d01      	cmp	r5, #1
 800f958:	d015      	beq.n	800f986 <pkt_buffer_length+0x4a>
	if (!iface || !iface->if_dev) {
 800f95a:	b114      	cbz	r4, 800f962 <pkt_buffer_length+0x26>
 800f95c:	6824      	ldr	r4, [r4, #0]
 800f95e:	b104      	cbz	r4, 800f962 <pkt_buffer_length+0x26>
	return iface->if_dev->l2;
 800f960:	6864      	ldr	r4, [r4, #4]
		max_len = MAX(max_len, NET_IPV4_MTU);
	} else { /* family == AF_UNSPEC */
#if defined (CONFIG_NET_L2_ETHERNET)
		if (net_if_l2(net_pkt_iface(pkt)) ==
 800f962:	490d      	ldr	r1, [pc, #52]	; (800f998 <pkt_buffer_length+0x5c>)
 800f964:	428c      	cmp	r4, r1
 800f966:	d014      	beq.n	800f992 <pkt_buffer_length+0x56>
#endif /* CONFIG_NET_L2_ETHERNET */
		{
			/* Other L2 are not checked as the pkt MTU in this case
			 * is based on the IP layer (IPv6 most of the time).
			 */
			max_len = size;
 800f968:	4602      	mov	r2, r0
 800f96a:	e006      	b.n	800f97a <pkt_buffer_length+0x3e>
		max_len = 0;
 800f96c:	2200      	movs	r2, #0
 800f96e:	e7f0      	b.n	800f952 <pkt_buffer_length+0x16>
		max_len = MAX(max_len, NET_IPV6_MTU);
 800f970:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800f974:	bf38      	it	cc
 800f976:	f44f 62a0 	movcc.w	r2, #1280	; 0x500
		}
	}

	max_len -= existing;
 800f97a:	1ad3      	subs	r3, r2, r3

	return MIN(size, max_len);
}
 800f97c:	4298      	cmp	r0, r3
 800f97e:	bf28      	it	cs
 800f980:	4618      	movcs	r0, r3
 800f982:	bc30      	pop	{r4, r5}
 800f984:	4770      	bx	lr
		max_len = MAX(max_len, NET_IPV4_MTU);
 800f986:	f5b2 7f10 	cmp.w	r2, #576	; 0x240
 800f98a:	bf38      	it	cc
 800f98c:	f44f 7210 	movcc.w	r2, #576	; 0x240
 800f990:	e7f3      	b.n	800f97a <pkt_buffer_length+0x3e>
			max_len += NET_ETH_MAX_HDR_SIZE;
 800f992:	320e      	adds	r2, #14
 800f994:	e7f1      	b.n	800f97a <pkt_buffer_length+0x3e>
 800f996:	bf00      	nop
 800f998:	200013fc 	.word	0x200013fc

0800f99c <net_pkt_get_reserve_rx_data>:
{
 800f99c:	b508      	push	{r3, lr}
 800f99e:	4602      	mov	r2, r0
 800f9a0:	460b      	mov	r3, r1
	return net_pkt_get_reserve_data(&rx_bufs, timeout);
 800f9a2:	4802      	ldr	r0, [pc, #8]	; (800f9ac <net_pkt_get_reserve_rx_data+0x10>)
 800f9a4:	f00a fcbd 	bl	801a322 <net_pkt_get_reserve_data>
}
 800f9a8:	bd08      	pop	{r3, pc}
 800f9aa:	bf00      	nop
 800f9ac:	20001164 	.word	0x20001164

0800f9b0 <net_pkt_get_reserve_tx_data>:
{
 800f9b0:	b508      	push	{r3, lr}
 800f9b2:	4602      	mov	r2, r0
 800f9b4:	460b      	mov	r3, r1
	return net_pkt_get_reserve_data(&tx_bufs, timeout);
 800f9b6:	4802      	ldr	r0, [pc, #8]	; (800f9c0 <net_pkt_get_reserve_tx_data+0x10>)
 800f9b8:	f00a fcb3 	bl	801a322 <net_pkt_get_reserve_data>
}
 800f9bc:	bd08      	pop	{r3, pc}
 800f9be:	bf00      	nop
 800f9c0:	20001194 	.word	0x20001194

0800f9c4 <net_pkt_get_frag>:
{
 800f9c4:	b508      	push	{r3, lr}
 800f9c6:	4619      	mov	r1, r3
	if (pkt->slab == &rx_pkts) {
 800f9c8:	6840      	ldr	r0, [r0, #4]
 800f9ca:	4b05      	ldr	r3, [pc, #20]	; (800f9e0 <net_pkt_get_frag+0x1c>)
 800f9cc:	4298      	cmp	r0, r3
 800f9ce:	d003      	beq.n	800f9d8 <net_pkt_get_frag+0x14>
	return net_pkt_get_reserve_tx_data(timeout);
 800f9d0:	4610      	mov	r0, r2
 800f9d2:	f7ff ffed 	bl	800f9b0 <net_pkt_get_reserve_tx_data>
}
 800f9d6:	bd08      	pop	{r3, pc}
		return net_pkt_get_reserve_rx_data(timeout);
 800f9d8:	4610      	mov	r0, r2
 800f9da:	f7ff ffdf 	bl	800f99c <net_pkt_get_reserve_rx_data>
 800f9de:	e7fa      	b.n	800f9d6 <net_pkt_get_frag+0x12>
 800f9e0:	20001040 	.word	0x20001040

0800f9e4 <pkt_alloc>:
static struct net_pkt *pkt_alloc(struct k_mem_slab *slab, k_timeout_t timeout,
				 const char *caller, int line)
#else
static struct net_pkt *pkt_alloc(struct k_mem_slab *slab, k_timeout_t timeout)
#endif
{
 800f9e4:	b570      	push	{r4, r5, r6, lr}
 800f9e6:	b082      	sub	sp, #8
 800f9e8:	4604      	mov	r4, r0
 800f9ea:	4616      	mov	r6, r2
 800f9ec:	461d      	mov	r5, r3
	struct net_pkt *pkt;
	uint32_t create_time;
	int ret;

	if (k_is_in_isr()) {
 800f9ee:	f00c f9d1 	bl	801bd94 <k_is_in_isr>
 800f9f2:	b108      	cbz	r0, 800f9f8 <pkt_alloc+0x14>
		timeout = K_NO_WAIT;
 800f9f4:	2600      	movs	r6, #0
 800f9f6:	4635      	mov	r5, r6
		create_time = k_cycle_get_32();
	} else {
		ARG_UNUSED(create_time);
	}

	ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
 800f9f8:	4632      	mov	r2, r6
 800f9fa:	462b      	mov	r3, r5
 800f9fc:	a901      	add	r1, sp, #4
 800f9fe:	4620      	mov	r0, r4
 800fa00:	f005 feaa 	bl	8015758 <k_mem_slab_alloc>
	if (ret) {
 800fa04:	b9f0      	cbnz	r0, 800fa44 <pkt_alloc+0x60>
__ssp_bos_icheck3(memset, void *, int)
 800fa06:	2258      	movs	r2, #88	; 0x58
 800fa08:	2100      	movs	r1, #0
 800fa0a:	9801      	ldr	r0, [sp, #4]
 800fa0c:	f00c ff35 	bl	801c87a <memset>
		return NULL;
	}

	memset(pkt, 0, sizeof(struct net_pkt));

	pkt->atomic_ref = ATOMIC_INIT(1);
 800fa10:	9801      	ldr	r0, [sp, #4]
 800fa12:	2301      	movs	r3, #1
 800fa14:	6303      	str	r3, [r0, #48]	; 0x30
	pkt->slab = slab;
 800fa16:	6044      	str	r4, [r0, #4]
	pkt->ipv6_next_hdr = next_hdr;
 800fa18:	23ff      	movs	r3, #255	; 0xff
 800fa1a:	f880 3057 	strb.w	r3, [r0, #87]	; 0x57
#define RX_DEFAULT_PRIORITY CONFIG_NET_RX_DEFAULT_PRIORITY
#else
#define RX_DEFAULT_PRIORITY 0
#endif

	if (&tx_pkts == slab) {
 800fa1e:	4b0a      	ldr	r3, [pc, #40]	; (800fa48 <pkt_alloc+0x64>)
 800fa20:	429c      	cmp	r4, r3
 800fa22:	d007      	beq.n	800fa34 <pkt_alloc+0x50>
		net_pkt_set_priority(pkt, TX_DEFAULT_PRIORITY);
	} else if (&rx_pkts == slab) {
 800fa24:	4b09      	ldr	r3, [pc, #36]	; (800fa4c <pkt_alloc+0x68>)
 800fa26:	429c      	cmp	r4, r3
 800fa28:	d008      	beq.n	800fa3c <pkt_alloc+0x58>

#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	net_pkt_alloc_add(pkt, true, caller, line);
#endif

	net_pkt_cursor_init(pkt);
 800fa2a:	f00a fd16 	bl	801a45a <net_pkt_cursor_init>

	return pkt;
 800fa2e:	9801      	ldr	r0, [sp, #4]
}
 800fa30:	b002      	add	sp, #8
 800fa32:	bd70      	pop	{r4, r5, r6, pc}
	pkt->priority = priority;
 800fa34:	2301      	movs	r3, #1
 800fa36:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
}
 800fa3a:	e7f6      	b.n	800fa2a <pkt_alloc+0x46>
	pkt->priority = priority;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
}
 800fa42:	e7f2      	b.n	800fa2a <pkt_alloc+0x46>
		return NULL;
 800fa44:	2000      	movs	r0, #0
 800fa46:	e7f3      	b.n	800fa30 <pkt_alloc+0x4c>
 800fa48:	20001060 	.word	0x20001060
 800fa4c:	20001040 	.word	0x20001040

0800fa50 <net_pkt_alloc_buffer>:
{
 800fa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa54:	b08b      	sub	sp, #44	; 0x2c
 800fa56:	4604      	mov	r4, r0
 800fa58:	460e      	mov	r6, r1
 800fa5a:	4615      	mov	r5, r2
 800fa5c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 800fa60:	4640      	mov	r0, r8
 800fa62:	4649      	mov	r1, r9
 800fa64:	f00c fdd4 	bl	801c610 <sys_clock_timeout_end_calc>
 800fa68:	4607      	mov	r7, r0
 800fa6a:	468a      	mov	sl, r1
	if (!size && proto == 0 && net_pkt_family(pkt) == AF_UNSPEC) {
 800fa6c:	b92e      	cbnz	r6, 800fa7a <net_pkt_alloc_buffer+0x2a>
 800fa6e:	b925      	cbnz	r5, 800fa7a <net_pkt_alloc_buffer+0x2a>
	return pkt->family;
 800fa70:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800fa74:	f013 0f0e 	tst.w	r3, #14
 800fa78:	d077      	beq.n	800fb6a <net_pkt_alloc_buffer+0x11a>
	if (k_is_in_isr()) {
 800fa7a:	f00c f98b 	bl	801bd94 <k_is_in_isr>
 800fa7e:	b118      	cbz	r0, 800fa88 <net_pkt_alloc_buffer+0x38>
		timeout = K_NO_WAIT;
 800fa80:	f04f 0800 	mov.w	r8, #0
 800fa84:	f04f 0900 	mov.w	r9, #0
	alloc_len = net_pkt_available_buffer(pkt);
 800fa88:	4620      	mov	r0, r4
 800fa8a:	f00a fcba 	bl	801a402 <net_pkt_available_buffer>
	if (!alloc_len) {
 800fa8e:	4683      	mov	fp, r0
 800fa90:	b940      	cbnz	r0, 800faa4 <net_pkt_alloc_buffer+0x54>
 800fa92:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
		hdr_len = pkt_estimate_headers_length(pkt,
 800fa96:	462a      	mov	r2, r5
 800fa98:	f3c1 0142 	ubfx	r1, r1, #1, #3
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	f00a faae 	bl	8019ffe <pkt_estimate_headers_length>
 800faa2:	e000      	b.n	800faa6 <net_pkt_alloc_buffer+0x56>
	size_t hdr_len = 0;
 800faa4:	2000      	movs	r0, #0
	alloc_len = pkt_buffer_length(pkt, size + hdr_len, proto, alloc_len);
 800faa6:	465b      	mov	r3, fp
 800faa8:	462a      	mov	r2, r5
 800faaa:	1831      	adds	r1, r6, r0
 800faac:	4620      	mov	r0, r4
 800faae:	f7ff ff45 	bl	800f93c <pkt_buffer_length>
 800fab2:	4605      	mov	r5, r0
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
 800fab4:	6862      	ldr	r2, [r4, #4]
 800fab6:	4b2e      	ldr	r3, [pc, #184]	; (800fb70 <net_pkt_alloc_buffer+0x120>)
 800fab8:	429a      	cmp	r2, r3
 800faba:	d018      	beq.n	800faee <net_pkt_alloc_buffer+0x9e>
 800fabc:	4e2d      	ldr	r6, [pc, #180]	; (800fb74 <net_pkt_alloc_buffer+0x124>)
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 800fabe:	ea58 0309 	orrs.w	r3, r8, r9
 800fac2:	d005      	beq.n	800fad0 <net_pkt_alloc_buffer+0x80>
 800fac4:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800fac8:	bf08      	it	eq
 800faca:	f1b8 3fff 	cmpeq.w	r8, #4294967295	; 0xffffffff
 800face:	d110      	bne.n	800faf2 <net_pkt_alloc_buffer+0xa2>
	buf = pkt_alloc_buffer(pool, alloc_len, timeout);
 800fad0:	4642      	mov	r2, r8
 800fad2:	464b      	mov	r3, r9
 800fad4:	4629      	mov	r1, r5
 800fad6:	4630      	mov	r0, r6
 800fad8:	f00a fb63 	bl	801a1a2 <pkt_alloc_buffer>
	if (!buf) {
 800fadc:	4601      	mov	r1, r0
 800fade:	b1e8      	cbz	r0, 800fb1c <net_pkt_alloc_buffer+0xcc>
	net_pkt_append_buffer(pkt, buf);
 800fae0:	4620      	mov	r0, r4
 800fae2:	f00a fcd5 	bl	801a490 <net_pkt_append_buffer>
	return 0;
 800fae6:	2000      	movs	r0, #0
}
 800fae8:	b00b      	add	sp, #44	; 0x2c
 800faea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pool = pkt->slab == &tx_pkts ? &tx_bufs : &rx_bufs;
 800faee:	4e22      	ldr	r6, [pc, #136]	; (800fb78 <net_pkt_alloc_buffer+0x128>)
 800faf0:	e7e5      	b.n	800fabe <net_pkt_alloc_buffer+0x6e>
		int64_t remaining = end - sys_clock_tick_get();
 800faf2:	f006 ff77 	bl	80169e4 <sys_clock_tick_get>
 800faf6:	1a3b      	subs	r3, r7, r0
 800faf8:	9300      	str	r3, [sp, #0]
 800fafa:	eb6a 0301 	sbc.w	r3, sl, r1
 800fafe:	9301      	str	r3, [sp, #4]
		if (remaining <= 0) {
 800fb00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb04:	2a01      	cmp	r2, #1
 800fb06:	f173 0300 	sbcs.w	r3, r3, #0
 800fb0a:	db02      	blt.n	800fb12 <net_pkt_alloc_buffer+0xc2>
			timeout = Z_TIMEOUT_TICKS(remaining);
 800fb0c:	e9dd 8900 	ldrd	r8, r9, [sp]
 800fb10:	e7de      	b.n	800fad0 <net_pkt_alloc_buffer+0x80>
			timeout = K_NO_WAIT;
 800fb12:	f04f 0800 	mov.w	r8, #0
 800fb16:	f04f 0900 	mov.w	r9, #0
 800fb1a:	e7d9      	b.n	800fad0 <net_pkt_alloc_buffer+0x80>
		NET_ERR("Data buffer (%zd) allocation failed.", alloc_len);
 800fb1c:	4b17      	ldr	r3, [pc, #92]	; (800fb7c <net_pkt_alloc_buffer+0x12c>)
 800fb1e:	9308      	str	r3, [sp, #32]
 800fb20:	9509      	str	r5, [sp, #36]	; 0x24
 800fb22:	2300      	movs	r3, #0
 800fb24:	f8ad 300d 	strh.w	r3, [sp, #13]
 800fb28:	f88d 300f 	strb.w	r3, [sp, #15]
 800fb2c:	2203      	movs	r2, #3
 800fb2e:	f88d 200c 	strb.w	r2, [sp, #12]
 800fb32:	f88d 300e 	strb.w	r3, [sp, #14]
 800fb36:	9a03      	ldr	r2, [sp, #12]
 800fb38:	9207      	str	r2, [sp, #28]
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	f363 0200 	bfi	r2, r3, #0, #1
 800fb40:	f363 0241 	bfi	r2, r3, #1, #1
 800fb44:	f363 0282 	bfi	r2, r3, #2, #1
 800fb48:	f363 02c5 	bfi	r2, r3, #3, #3
 800fb4c:	2101      	movs	r1, #1
 800fb4e:	f361 1288 	bfi	r2, r1, #6, #3
 800fb52:	210c      	movs	r1, #12
 800fb54:	f361 2252 	bfi	r2, r1, #9, #10
 800fb58:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800fb5c:	4908      	ldr	r1, [pc, #32]	; (800fb80 <net_pkt_alloc_buffer+0x130>)
 800fb5e:	a804      	add	r0, sp, #16
 800fb60:	f008 f8f7 	bl	8017d52 <z_log_msg2_finalize>
		return -ENOMEM;
 800fb64:	f06f 000b 	mvn.w	r0, #11
 800fb68:	e7be      	b.n	800fae8 <net_pkt_alloc_buffer+0x98>
		return 0;
 800fb6a:	2000      	movs	r0, #0
 800fb6c:	e7bc      	b.n	800fae8 <net_pkt_alloc_buffer+0x98>
 800fb6e:	bf00      	nop
 800fb70:	20001060 	.word	0x20001060
 800fb74:	20001164 	.word	0x20001164
 800fb78:	20001194 	.word	0x20001194
 800fb7c:	0801e37c 	.word	0x0801e37c
 800fb80:	0801d7a8 	.word	0x0801d7a8

0800fb84 <net_pkt_alloc_with_buffer>:
					  size_t size,
					  sa_family_t family,
					  enum net_ip_protocol proto,
					  k_timeout_t timeout)
#endif
{
 800fb84:	b530      	push	{r4, r5, lr}
 800fb86:	b085      	sub	sp, #20
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
				     proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&tx_pkts, iface, size, family,
 800fb88:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 800fb8c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800fb90:	9300      	str	r3, [sp, #0]
 800fb92:	4613      	mov	r3, r2
 800fb94:	460a      	mov	r2, r1
 800fb96:	4601      	mov	r1, r0
 800fb98:	4802      	ldr	r0, [pc, #8]	; (800fba4 <net_pkt_alloc_with_buffer+0x20>)
 800fb9a:	f00a fc89 	bl	801a4b0 <pkt_alloc_with_buffer>
				     proto, timeout);
#endif
}
 800fb9e:	b005      	add	sp, #20
 800fba0:	bd30      	pop	{r4, r5, pc}
 800fba2:	bf00      	nop
 800fba4:	20001060 	.word	0x20001060

0800fba8 <net_pkt_rx_alloc_with_buffer>:
					     size_t size,
					     sa_family_t family,
					     enum net_ip_protocol proto,
					     k_timeout_t timeout)
#endif
{
 800fba8:	b530      	push	{r4, r5, lr}
 800fbaa:	b085      	sub	sp, #20
#if NET_LOG_LEVEL >= LOG_LEVEL_DBG
	return pkt_alloc_with_buffer(&rx_pkts, iface, size, family,
					proto, timeout, caller, line);
#else
	return pkt_alloc_with_buffer(&rx_pkts, iface, size, family,
 800fbac:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 800fbb0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800fbb4:	9300      	str	r3, [sp, #0]
 800fbb6:	4613      	mov	r3, r2
 800fbb8:	460a      	mov	r2, r1
 800fbba:	4601      	mov	r1, r0
 800fbbc:	4802      	ldr	r0, [pc, #8]	; (800fbc8 <net_pkt_rx_alloc_with_buffer+0x20>)
 800fbbe:	f00a fc77 	bl	801a4b0 <pkt_alloc_with_buffer>
					proto, timeout);
#endif
}
 800fbc2:	b005      	add	sp, #20
 800fbc4:	bd30      	pop	{r4, r5, pc}
 800fbc6:	bf00      	nop
 800fbc8:	20001040 	.word	0x20001040

0800fbcc <net_pkt_get_data>:
	return 0;
}

void *net_pkt_get_data(struct net_pkt *pkt,
		       struct net_pkt_data_access *access)
{
 800fbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbce:	b089      	sub	sp, #36	; 0x24
 800fbd0:	4605      	mov	r5, r0
 800fbd2:	460c      	mov	r4, r1
			return NULL;
		}

		return pkt->cursor.pos;
	} else {
		if (net_pkt_is_contiguous(pkt, access->size)) {
 800fbd4:	6849      	ldr	r1, [r1, #4]
 800fbd6:	f00a fdea 	bl	801a7ae <net_pkt_is_contiguous>
 800fbda:	b980      	cbnz	r0, 800fbfe <net_pkt_get_data+0x32>
}

static inline bool net_pkt_is_being_overwritten(struct net_pkt *pkt)
{
	return pkt->overwrite;
 800fbdc:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
			access->data = pkt->cursor.pos;
		} else if (net_pkt_is_being_overwritten(pkt)) {
 800fbe0:	f013 0f01 	tst.w	r3, #1
 800fbe4:	d00d      	beq.n	800fc02 <net_pkt_get_data+0x36>
			struct net_pkt_cursor backup;

			if (!access->data) {
 800fbe6:	6821      	ldr	r1, [r4, #0]
 800fbe8:	b171      	cbz	r1, 800fc08 <net_pkt_get_data+0x3c>
 * @param backup The cursor where to backup net_pkt cursor
 */
static inline void net_pkt_cursor_backup(struct net_pkt *pkt,
					 struct net_pkt_cursor *backup)
{
	backup->buf = pkt->cursor.buf;
 800fbea:	68ef      	ldr	r7, [r5, #12]
	backup->pos = pkt->cursor.pos;
 800fbec:	692e      	ldr	r6, [r5, #16]
				return NULL;
			}

			net_pkt_cursor_backup(pkt, &backup);

			if (net_pkt_read(pkt, access->data, access->size)) {
 800fbee:	6862      	ldr	r2, [r4, #4]
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	f00a fcc0 	bl	801a576 <net_pkt_read>
 800fbf6:	bb58      	cbnz	r0, 800fc50 <net_pkt_get_data+0x84>
 * @param backup The cursor from where to restore net_pkt cursor
 */
static inline void net_pkt_cursor_restore(struct net_pkt *pkt,
					  struct net_pkt_cursor *backup)
{
	pkt->cursor.buf = backup->buf;
 800fbf8:	60ef      	str	r7, [r5, #12]
	pkt->cursor.pos = backup->pos;
 800fbfa:	612e      	str	r6, [r5, #16]
 800fbfc:	e001      	b.n	800fc02 <net_pkt_get_data+0x36>
			access->data = pkt->cursor.pos;
 800fbfe:	692b      	ldr	r3, [r5, #16]
 800fc00:	6023      	str	r3, [r4, #0]
			}

			net_pkt_cursor_restore(pkt, &backup);
		}

		return access->data;
 800fc02:	6820      	ldr	r0, [r4, #0]
	}

	return NULL;
}
 800fc04:	b009      	add	sp, #36	; 0x24
 800fc06:	bdf0      	pop	{r4, r5, r6, r7, pc}
				NET_ERR("Uncontiguous data"
 800fc08:	4b13      	ldr	r3, [pc, #76]	; (800fc58 <net_pkt_get_data+0x8c>)
 800fc0a:	9306      	str	r3, [sp, #24]
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	f8ad 3005 	strh.w	r3, [sp, #5]
 800fc12:	f88d 3007 	strb.w	r3, [sp, #7]
 800fc16:	2202      	movs	r2, #2
 800fc18:	f88d 2004 	strb.w	r2, [sp, #4]
 800fc1c:	f88d 3006 	strb.w	r3, [sp, #6]
 800fc20:	9a01      	ldr	r2, [sp, #4]
 800fc22:	9205      	str	r2, [sp, #20]
 800fc24:	461a      	mov	r2, r3
 800fc26:	f363 0200 	bfi	r2, r3, #0, #1
 800fc2a:	f363 0241 	bfi	r2, r3, #1, #1
 800fc2e:	f363 0282 	bfi	r2, r3, #2, #1
 800fc32:	f363 02c5 	bfi	r2, r3, #3, #3
 800fc36:	2101      	movs	r1, #1
 800fc38:	f361 1288 	bfi	r2, r1, #6, #3
 800fc3c:	2108      	movs	r1, #8
 800fc3e:	f361 2252 	bfi	r2, r1, #9, #10
 800fc42:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800fc46:	4905      	ldr	r1, [pc, #20]	; (800fc5c <net_pkt_get_data+0x90>)
 800fc48:	a802      	add	r0, sp, #8
 800fc4a:	f008 f882 	bl	8017d52 <z_log_msg2_finalize>
				return NULL;
 800fc4e:	e001      	b.n	800fc54 <net_pkt_get_data+0x88>
	pkt->cursor.buf = backup->buf;
 800fc50:	60ef      	str	r7, [r5, #12]
	pkt->cursor.pos = backup->pos;
 800fc52:	612e      	str	r6, [r5, #16]
{
 800fc54:	2000      	movs	r0, #0
 800fc56:	e7d5      	b.n	800fc04 <net_pkt_get_data+0x38>
 800fc58:	0801e3a4 	.word	0x0801e3a4
 800fc5c:	0801d7a8 	.word	0x0801d7a8

0800fc60 <tx_tc2thread>:
		     "Too many traffic classes");

	NET_ASSERT(tc < ARRAY_SIZE(thread_priorities));

	return thread_priorities[tc];
}
 800fc60:	4b01      	ldr	r3, [pc, #4]	; (800fc68 <tx_tc2thread+0x8>)
 800fc62:	5c18      	ldrb	r0, [r3, r0]
 800fc64:	4770      	bx	lr
 800fc66:	bf00      	nop
 800fc68:	0801e448 	.word	0x0801e448

0800fc6c <rx_tc2thread>:
		     "Too many traffic classes");

	NET_ASSERT(tc < ARRAY_SIZE(thread_priorities));

	return thread_priorities[tc];
}
 800fc6c:	4b01      	ldr	r3, [pc, #4]	; (800fc74 <rx_tc2thread+0x8>)
 800fc6e:	5c18      	ldrb	r0, [r3, r0]
 800fc70:	4770      	bx	lr
 800fc72:	bf00      	nop
 800fc74:	0801e450 	.word	0x0801e450

0800fc78 <net_tc_submit_to_tx_queue>:
{
 800fc78:	b508      	push	{r3, lr}
	submit_to_queue(&tx_classes[tc].fifo, pkt);
 800fc7a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 800fc7e:	4b03      	ldr	r3, [pc, #12]	; (800fc8c <net_tc_submit_to_tx_queue+0x14>)
 800fc80:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800fc84:	f00a fdbe 	bl	801a804 <submit_to_queue>
}
 800fc88:	2001      	movs	r0, #1
 800fc8a:	bd08      	pop	{r3, pc}
 800fc8c:	20002368 	.word	0x20002368

0800fc90 <net_tc_submit_to_rx_queue>:
{
 800fc90:	b508      	push	{r3, lr}
	submit_to_queue(&rx_classes[tc].fifo, pkt);
 800fc92:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 800fc96:	4b03      	ldr	r3, [pc, #12]	; (800fca4 <net_tc_submit_to_rx_queue+0x14>)
 800fc98:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800fc9c:	f00a fdb2 	bl	801a804 <submit_to_queue>
}
 800fca0:	bd08      	pop	{r3, pc}
 800fca2:	bf00      	nop
 800fca4:	20001f28 	.word	0x20001f28

0800fca8 <net_tx_priority2tc>:
	if (prio > NET_PRIORITY_NC) {
 800fca8:	2807      	cmp	r0, #7
 800fcaa:	d900      	bls.n	800fcae <net_tx_priority2tc+0x6>
		prio = NET_PRIORITY_BE;
 800fcac:	2000      	movs	r0, #0
}
 800fcae:	4b01      	ldr	r3, [pc, #4]	; (800fcb4 <net_tx_priority2tc+0xc>)
 800fcb0:	5c18      	ldrb	r0, [r3, r0]
 800fcb2:	4770      	bx	lr
 800fcb4:	0801e440 	.word	0x0801e440

0800fcb8 <tc_tx_stats_priority_setup>:
/* Fixup the traffic class statistics so that "net stats" shell command will
 * print output correctly.
 */
#if NET_TC_TX_COUNT > 0
static void tc_tx_stats_priority_setup(struct net_if *iface)
{
 800fcb8:	b570      	push	{r4, r5, r6, lr}
 800fcba:	4606      	mov	r6, r0
	int i;

	for (i = 0; i < 8; i++) {
 800fcbc:	2400      	movs	r4, #0
 800fcbe:	e00b      	b.n	800fcd8 <tc_tx_stats_priority_setup+0x20>
		net_stats_update_tc_sent_priority(iface, net_tx_priority2tc(i),
 800fcc0:	b2e5      	uxtb	r5, r4
 800fcc2:	4628      	mov	r0, r5
 800fcc4:	f7ff fff0 	bl	800fca8 <net_tx_priority2tc>
	UPDATE_STAT(iface, stats.tc.sent[tc].priority = priority);
 800fcc8:	b2c3      	uxtb	r3, r0
 800fcca:	3307      	adds	r3, #7
 800fccc:	015b      	lsls	r3, r3, #5
 800fcce:	4a04      	ldr	r2, [pc, #16]	; (800fce0 <tc_tx_stats_priority_setup+0x28>)
 800fcd0:	54d5      	strb	r5, [r2, r3]
 800fcd2:	4433      	add	r3, r6
 800fcd4:	721d      	strb	r5, [r3, #8]
	for (i = 0; i < 8; i++) {
 800fcd6:	3401      	adds	r4, #1
 800fcd8:	2c07      	cmp	r4, #7
 800fcda:	ddf1      	ble.n	800fcc0 <tc_tx_stats_priority_setup+0x8>
						  i);
	}
}
 800fcdc:	bd70      	pop	{r4, r5, r6, pc}
 800fcde:	bf00      	nop
 800fce0:	20002a58 	.word	0x20002a58

0800fce4 <net_rx_priority2tc>:
	if (prio > NET_PRIORITY_NC) {
 800fce4:	2807      	cmp	r0, #7
 800fce6:	d900      	bls.n	800fcea <net_rx_priority2tc+0x6>
		prio = NET_PRIORITY_BE;
 800fce8:	2000      	movs	r0, #0
}
 800fcea:	4b01      	ldr	r3, [pc, #4]	; (800fcf0 <net_rx_priority2tc+0xc>)
 800fcec:	5c18      	ldrb	r0, [r3, r0]
 800fcee:	4770      	bx	lr
 800fcf0:	0801e438 	.word	0x0801e438

0800fcf4 <tc_rx_stats_priority_setup>:
#endif

#if NET_TC_RX_COUNT > 0
static void tc_rx_stats_priority_setup(struct net_if *iface)
{
 800fcf4:	b570      	push	{r4, r5, r6, lr}
 800fcf6:	4606      	mov	r6, r0
	int i;

	for (i = 0; i < 8; i++) {
 800fcf8:	2400      	movs	r4, #0
 800fcfa:	e00b      	b.n	800fd14 <tc_rx_stats_priority_setup+0x20>
		net_stats_update_tc_recv_priority(iface, net_rx_priority2tc(i),
 800fcfc:	b2e5      	uxtb	r5, r4
 800fcfe:	4628      	mov	r0, r5
 800fd00:	f7ff fff0 	bl	800fce4 <net_rx_priority2tc>
	UPDATE_STAT(iface, stats.tc.recv[tc].priority = priority);
 800fd04:	b2c3      	uxtb	r3, r0
 800fd06:	330d      	adds	r3, #13
 800fd08:	015b      	lsls	r3, r3, #5
 800fd0a:	4a04      	ldr	r2, [pc, #16]	; (800fd1c <tc_rx_stats_priority_setup+0x28>)
 800fd0c:	54d5      	strb	r5, [r2, r3]
 800fd0e:	4433      	add	r3, r6
 800fd10:	721d      	strb	r5, [r3, #8]
	for (i = 0; i < 8; i++) {
 800fd12:	3401      	adds	r4, #1
 800fd14:	2c07      	cmp	r4, #7
 800fd16:	ddf1      	ble.n	800fcfc <tc_rx_stats_priority_setup+0x8>
						  i);
	}
}
 800fd18:	bd70      	pop	{r4, r5, r6, pc}
 800fd1a:	bf00      	nop
 800fd1c:	20002a58 	.word	0x20002a58

0800fd20 <net_tc_tx_init>:

/* Create a fifo for each traffic class we are using. All the network
 * traffic goes through these classes.
 */
void net_tc_tx_init(void)
{
 800fd20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd24:	b091      	sub	sp, #68	; 0x44
	int i;

	BUILD_ASSERT(NET_TC_TX_COUNT >= 0);

#if defined(CONFIG_NET_STATISTICS)
	net_if_foreach(net_tc_tx_stats_priority_setup, NULL);
 800fd26:	2100      	movs	r1, #0
 800fd28:	4835      	ldr	r0, [pc, #212]	; (800fe00 <net_tc_tx_init+0xe0>)
 800fd2a:	f7ff f9a3 	bl	800f074 <net_if_foreach>
#endif

	for (i = 0; i < NET_TC_TX_COUNT; i++) {
 800fd2e:	2500      	movs	r5, #0
 800fd30:	e026      	b.n	800fd80 <net_tc_tx_init+0x60>
				      K_KERNEL_STACK_SIZEOF(tx_stack[i]),
				      (k_thread_entry_t)tc_tx_handler,
				      &tx_classes[i].fifo, NULL, NULL,
				      priority, 0, K_FOREVER);
		if (!tid) {
			NET_ERR("Cannot create TC handler thread %d", i);
 800fd32:	4b34      	ldr	r3, [pc, #208]	; (800fe04 <net_tc_tx_init+0xe4>)
 800fd34:	930e      	str	r3, [sp, #56]	; 0x38
 800fd36:	950f      	str	r5, [sp, #60]	; 0x3c
 800fd38:	2300      	movs	r3, #0
 800fd3a:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
 800fd3e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800fd42:	2203      	movs	r2, #3
 800fd44:	f88d 2020 	strb.w	r2, [sp, #32]
 800fd48:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 800fd4c:	9a08      	ldr	r2, [sp, #32]
 800fd4e:	920d      	str	r2, [sp, #52]	; 0x34
 800fd50:	f363 0800 	bfi	r8, r3, #0, #1
 800fd54:	f363 0841 	bfi	r8, r3, #1, #1
 800fd58:	f363 0882 	bfi	r8, r3, #2, #1
 800fd5c:	f363 08c5 	bfi	r8, r3, #3, #3
 800fd60:	2201      	movs	r2, #1
 800fd62:	f362 1888 	bfi	r8, r2, #6, #3
 800fd66:	220c      	movs	r2, #12
 800fd68:	f362 2852 	bfi	r8, r2, #9, #10
 800fd6c:	f363 48de 	bfi	r8, r3, #19, #12
 800fd70:	f363 78df 	bfi	r8, r3, #31, #1
 800fd74:	4642      	mov	r2, r8
 800fd76:	4924      	ldr	r1, [pc, #144]	; (800fe08 <net_tc_tx_init+0xe8>)
 800fd78:	a80a      	add	r0, sp, #40	; 0x28
 800fd7a:	f007 ffea 	bl	8017d52 <z_log_msg2_finalize>
	for (i = 0; i < NET_TC_TX_COUNT; i++) {
 800fd7e:	3501      	adds	r5, #1
 800fd80:	2d05      	cmp	r5, #5
 800fd82:	dc39      	bgt.n	800fdf8 <net_tc_tx_init+0xd8>
		thread_priority = tx_tc2thread(i);
 800fd84:	b2e8      	uxtb	r0, r5
 800fd86:	f7ff ff6b 	bl	800fc60 <tx_tc2thread>
		priority = IS_ENABLED(CONFIG_NET_TC_THREAD_COOPERATIVE) ?
 800fd8a:	f1a0 0710 	sub.w	r7, r0, #16
		k_fifo_init(&tx_classes[i].fifo);
 800fd8e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800fe18 <net_tc_tx_init+0xf8>
 800fd92:	012c      	lsls	r4, r5, #4
 800fd94:	eb05 1605 	add.w	r6, r5, r5, lsl #4
 800fd98:	eb09 1606 	add.w	r6, r9, r6, lsl #4
	z_impl_k_queue_init(queue);
 800fd9c:	4630      	mov	r0, r6
 800fd9e:	f00c f8d7 	bl	801bf50 <z_impl_k_queue_init>
		tid = k_thread_create(&tx_classes[i].handler, tx_stack[i],
 800fda2:	1960      	adds	r0, r4, r5
 800fda4:	0100      	lsls	r0, r0, #4
 800fda6:	3020      	adds	r0, #32
 800fda8:	4448      	add	r0, r9
 800fdaa:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 800fdae:	4b17      	ldr	r3, [pc, #92]	; (800fe0c <net_tc_tx_init+0xec>)
 800fdb0:	eb03 2101 	add.w	r1, r3, r1, lsl #8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800fdb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fdb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fdbc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	9304      	str	r3, [sp, #16]
 800fdc4:	9703      	str	r7, [sp, #12]
 800fdc6:	9302      	str	r3, [sp, #8]
 800fdc8:	9301      	str	r3, [sp, #4]
 800fdca:	9600      	str	r6, [sp, #0]
 800fdcc:	4b10      	ldr	r3, [pc, #64]	; (800fe10 <net_tc_tx_init+0xf0>)
 800fdce:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 800fdd2:	f00b fff7 	bl	801bdc4 <z_impl_k_thread_create>
		if (!tid) {
 800fdd6:	4604      	mov	r4, r0
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	d0aa      	beq.n	800fd32 <net_tc_tx_init+0x12>
		}

		if (IS_ENABLED(CONFIG_THREAD_NAME)) {
			char name[MAX_NAME_LEN];

			snprintk(name, sizeof(name), "tx_q[%d]", i);
 800fddc:	462b      	mov	r3, r5
 800fdde:	4a0d      	ldr	r2, [pc, #52]	; (800fe14 <net_tc_tx_init+0xf4>)
 800fde0:	2108      	movs	r1, #8
 800fde2:	a808      	add	r0, sp, #32
 800fde4:	f007 fcc7 	bl	8017776 <snprintk>
	return z_impl_k_thread_name_set(thread, str);
 800fde8:	a908      	add	r1, sp, #32
 800fdea:	4620      	mov	r0, r4
 800fdec:	f005 fcea 	bl	80157c4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	f00b ffd7 	bl	801bda4 <z_impl_k_thread_start>
 800fdf6:	e7c2      	b.n	800fd7e <net_tc_tx_init+0x5e>
		}

		k_thread_start(tid);
	}
#endif
}
 800fdf8:	b011      	add	sp, #68	; 0x44
 800fdfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdfe:	bf00      	nop
 800fe00:	0801a849 	.word	0x0801a849
 800fe04:	0801e3f4 	.word	0x0801e3f4
 800fe08:	0801d7c0 	.word	0x0801d7c0
 800fe0c:	20004d00 	.word	0x20004d00
 800fe10:	0801a80d 	.word	0x0801a80d
 800fe14:	0801e418 	.word	0x0801e418
 800fe18:	20002368 	.word	0x20002368

0800fe1c <net_tc_rx_init>:

void net_tc_rx_init(void)
{
 800fe1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe20:	b091      	sub	sp, #68	; 0x44
	int i;

	BUILD_ASSERT(NET_TC_RX_COUNT >= 0);

#if defined(CONFIG_NET_STATISTICS)
	net_if_foreach(net_tc_rx_stats_priority_setup, NULL);
 800fe22:	2100      	movs	r1, #0
 800fe24:	4835      	ldr	r0, [pc, #212]	; (800fefc <net_tc_rx_init+0xe0>)
 800fe26:	f7ff f925 	bl	800f074 <net_if_foreach>
#endif

	for (i = 0; i < NET_TC_RX_COUNT; i++) {
 800fe2a:	2500      	movs	r5, #0
 800fe2c:	e026      	b.n	800fe7c <net_tc_rx_init+0x60>
				      K_KERNEL_STACK_SIZEOF(rx_stack[i]),
				      (k_thread_entry_t)tc_rx_handler,
				      &rx_classes[i].fifo, NULL, NULL,
				      priority, 0, K_FOREVER);
		if (!tid) {
			NET_ERR("Cannot create TC handler thread %d", i);
 800fe2e:	4b34      	ldr	r3, [pc, #208]	; (800ff00 <net_tc_rx_init+0xe4>)
 800fe30:	930e      	str	r3, [sp, #56]	; 0x38
 800fe32:	950f      	str	r5, [sp, #60]	; 0x3c
 800fe34:	2300      	movs	r3, #0
 800fe36:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
 800fe3a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800fe3e:	2203      	movs	r2, #3
 800fe40:	f88d 2020 	strb.w	r2, [sp, #32]
 800fe44:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 800fe48:	9a08      	ldr	r2, [sp, #32]
 800fe4a:	920d      	str	r2, [sp, #52]	; 0x34
 800fe4c:	f363 0800 	bfi	r8, r3, #0, #1
 800fe50:	f363 0841 	bfi	r8, r3, #1, #1
 800fe54:	f363 0882 	bfi	r8, r3, #2, #1
 800fe58:	f363 08c5 	bfi	r8, r3, #3, #3
 800fe5c:	2201      	movs	r2, #1
 800fe5e:	f362 1888 	bfi	r8, r2, #6, #3
 800fe62:	220c      	movs	r2, #12
 800fe64:	f362 2852 	bfi	r8, r2, #9, #10
 800fe68:	f363 48de 	bfi	r8, r3, #19, #12
 800fe6c:	f363 78df 	bfi	r8, r3, #31, #1
 800fe70:	4642      	mov	r2, r8
 800fe72:	4924      	ldr	r1, [pc, #144]	; (800ff04 <net_tc_rx_init+0xe8>)
 800fe74:	a80a      	add	r0, sp, #40	; 0x28
 800fe76:	f007 ff6c 	bl	8017d52 <z_log_msg2_finalize>
	for (i = 0; i < NET_TC_RX_COUNT; i++) {
 800fe7a:	3501      	adds	r5, #1
 800fe7c:	2d03      	cmp	r5, #3
 800fe7e:	dc39      	bgt.n	800fef4 <net_tc_rx_init+0xd8>
		thread_priority = rx_tc2thread(i);
 800fe80:	b2e8      	uxtb	r0, r5
 800fe82:	f7ff fef3 	bl	800fc6c <rx_tc2thread>
		priority = IS_ENABLED(CONFIG_NET_TC_THREAD_COOPERATIVE) ?
 800fe86:	f1a0 0710 	sub.w	r7, r0, #16
		k_fifo_init(&rx_classes[i].fifo);
 800fe8a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800ff14 <net_tc_rx_init+0xf8>
 800fe8e:	012c      	lsls	r4, r5, #4
 800fe90:	eb05 1605 	add.w	r6, r5, r5, lsl #4
 800fe94:	eb09 1606 	add.w	r6, r9, r6, lsl #4
	z_impl_k_queue_init(queue);
 800fe98:	4630      	mov	r0, r6
 800fe9a:	f00c f859 	bl	801bf50 <z_impl_k_queue_init>
		tid = k_thread_create(&rx_classes[i].handler, rx_stack[i],
 800fe9e:	1960      	adds	r0, r4, r5
 800fea0:	0100      	lsls	r0, r0, #4
 800fea2:	3020      	adds	r0, #32
 800fea4:	4448      	add	r0, r9
 800fea6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800feaa:	4b17      	ldr	r3, [pc, #92]	; (800ff08 <net_tc_rx_init+0xec>)
 800feac:	eb03 2141 	add.w	r1, r3, r1, lsl #9
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 800feb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800feb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800feb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800febc:	2300      	movs	r3, #0
 800febe:	9304      	str	r3, [sp, #16]
 800fec0:	9703      	str	r7, [sp, #12]
 800fec2:	9302      	str	r3, [sp, #8]
 800fec4:	9301      	str	r3, [sp, #4]
 800fec6:	9600      	str	r6, [sp, #0]
 800fec8:	4b10      	ldr	r3, [pc, #64]	; (800ff0c <net_tc_rx_init+0xf0>)
 800feca:	f44f 62bc 	mov.w	r2, #1504	; 0x5e0
 800fece:	f00b ff79 	bl	801bdc4 <z_impl_k_thread_create>
		if (!tid) {
 800fed2:	4604      	mov	r4, r0
 800fed4:	2800      	cmp	r0, #0
 800fed6:	d0aa      	beq.n	800fe2e <net_tc_rx_init+0x12>
		}

		if (IS_ENABLED(CONFIG_THREAD_NAME)) {
			char name[MAX_NAME_LEN];

			snprintk(name, sizeof(name), "rx_q[%d]", i);
 800fed8:	462b      	mov	r3, r5
 800feda:	4a0d      	ldr	r2, [pc, #52]	; (800ff10 <net_tc_rx_init+0xf4>)
 800fedc:	2108      	movs	r1, #8
 800fede:	a808      	add	r0, sp, #32
 800fee0:	f007 fc49 	bl	8017776 <snprintk>
	return z_impl_k_thread_name_set(thread, str);
 800fee4:	a908      	add	r1, sp, #32
 800fee6:	4620      	mov	r0, r4
 800fee8:	f005 fc6c 	bl	80157c4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 800feec:	4620      	mov	r0, r4
 800feee:	f00b ff59 	bl	801bda4 <z_impl_k_thread_start>
 800fef2:	e7c2      	b.n	800fe7a <net_tc_rx_init+0x5e>
		}

		k_thread_start(tid);
	}
#endif
}
 800fef4:	b011      	add	sp, #68	; 0x44
 800fef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fefa:	bf00      	nop
 800fefc:	0801a851 	.word	0x0801a851
 800ff00:	0801e3f4 	.word	0x0801e3f4
 800ff04:	0801d7c0 	.word	0x0801d7c0
 800ff08:	20006b00 	.word	0x20006b00
 800ff0c:	0801a82b 	.word	0x0801a82b
 800ff10:	0801e424 	.word	0x0801e424
 800ff14:	20001f28 	.word	0x20001f28

0800ff18 <icmpv4_handle_header_options>:
}

static int icmpv4_handle_header_options(struct net_pkt *pkt,
					struct net_pkt *reply,
					const struct in_addr *src)
{
 800ff18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	460c      	mov	r4, r1
	struct net_icmpv4_hdr_opts_data ud;
	uint8_t len;

	ud.reply = reply;
 800ff1e:	9100      	str	r1, [sp, #0]
	ud.src = src;
 800ff20:	9201      	str	r2, [sp, #4]

	if (net_ipv4_parse_hdr_options(pkt, icmpv4_reply_to_options, &ud)) {
 800ff22:	466a      	mov	r2, sp
 800ff24:	4910      	ldr	r1, [pc, #64]	; (800ff68 <icmpv4_handle_header_options+0x50>)
 800ff26:	f00a ff41 	bl	801adac <net_ipv4_parse_hdr_options>
 800ff2a:	b9b0      	cbnz	r0, 800ff5a <icmpv4_handle_header_options+0x42>
 800ff2c:	4607      	mov	r7, r0
	return pkt->ipv4_opts_len;
 800ff2e:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
	}

	len = net_pkt_ipv4_opts_len(reply);

	/* IPv4 optional header part should ends in 32 bit boundary */
	if (len % 4U != 0U) {
 800ff32:	f015 0303 	ands.w	r3, r5, #3
 800ff36:	d104      	bne.n	800ff42 <icmpv4_handle_header_options+0x2a>
	pkt->ipv4_opts_len = opts_len;
 800ff38:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50

	/* Options are added now, update the header length. */
	net_pkt_set_ipv4_opts_len(reply, len);

	return 0;
}
 800ff3c:	4638      	mov	r0, r7
 800ff3e:	b003      	add	sp, #12
 800ff40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint8_t i = 4U - (len % 4U);
 800ff42:	f1c3 0304 	rsb	r3, r3, #4
 800ff46:	b2de      	uxtb	r6, r3
		if (net_pkt_memset(reply, NET_IPV4_OPTS_NOP, i)) {
 800ff48:	4632      	mov	r2, r6
 800ff4a:	2101      	movs	r1, #1
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	f00a fb06 	bl	801a55e <net_pkt_memset>
 800ff52:	b928      	cbnz	r0, 800ff60 <icmpv4_handle_header_options+0x48>
		len += i;
 800ff54:	4435      	add	r5, r6
 800ff56:	b2ed      	uxtb	r5, r5
 800ff58:	e7ee      	b.n	800ff38 <icmpv4_handle_header_options+0x20>
		return -EINVAL;
 800ff5a:	f06f 0715 	mvn.w	r7, #21
 800ff5e:	e7ed      	b.n	800ff3c <icmpv4_handle_header_options+0x24>
			return -EINVAL;
 800ff60:	f06f 0715 	mvn.w	r7, #21
 800ff64:	e7ea      	b.n	800ff3c <icmpv4_handle_header_options+0x24>
 800ff66:	bf00      	nop
 800ff68:	0801abdb 	.word	0x0801abdb

0800ff6c <icmpv4_handle_echo_request>:
#endif

static enum net_verdict icmpv4_handle_echo_request(struct net_pkt *pkt,
					   struct net_ipv4_hdr *ip_hdr,
					   struct net_icmp_hdr *icmp_hdr)
{
 800ff6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff70:	b083      	sub	sp, #12
 800ff72:	4605      	mov	r5, r0
	return UNALIGNED_GET(&addr->s_addr) == 0;
 800ff74:	68cb      	ldr	r3, [r1, #12]
	int16_t payload_len;

	/* If interface can not select src address based on dst addr
	 * and src address is unspecified, drop the echo request.
	 */
	if (net_ipv4_is_addr_unspecified((struct in_addr *)ip_hdr->src)) {
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	f000 8084 	beq.w	8010084 <icmpv4_handle_echo_request+0x118>
 800ff7c:	460e      	mov	r6, r1
	return net_buf_frags_len(pkt->frags);
 800ff7e:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
 800ff80:	2200      	movs	r2, #0
	while (buf) {
 800ff82:	e002      	b.n	800ff8a <icmpv4_handle_echo_request+0x1e>
		bytes += buf->len;
 800ff84:	8999      	ldrh	r1, [r3, #12]
 800ff86:	440a      	add	r2, r1
		buf = buf->frags;
 800ff88:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d1fa      	bne.n	800ff84 <icmpv4_handle_echo_request+0x18>
	NET_DBG("Received Echo Request from %s to %s",
		log_strdup(net_sprint_ipv4_addr(&ip_hdr->src)),
		log_strdup(net_sprint_ipv4_addr(&ip_hdr->dst)));

	payload_len = net_pkt_get_len(pkt) -
		      net_pkt_ip_hdr_len(pkt) -
 800ff8e:	f895 4048 	ldrb.w	r4, [r5, #72]	; 0x48
	payload_len = net_pkt_get_len(pkt) -
 800ff92:	1b14      	subs	r4, r2, r4
 800ff94:	b2a4      	uxth	r4, r4
	return pkt->ipv4_opts_len;
 800ff96:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
		      net_pkt_ip_hdr_len(pkt) -
 800ff9a:	1a64      	subs	r4, r4, r1
 800ff9c:	b2a4      	uxth	r4, r4
		      net_pkt_ipv4_opts_len(pkt) - NET_ICMPH_LEN;
 800ff9e:	3c04      	subs	r4, #4
	payload_len = net_pkt_get_len(pkt) -
 800ffa0:	b224      	sxth	r4, r4
	if (payload_len < NET_ICMPV4_UNUSED_LEN) {
 800ffa2:	2c03      	cmp	r4, #3
 800ffa4:	dd6e      	ble.n	8010084 <icmpv4_handle_echo_request+0x118>

	reply = net_pkt_alloc_with_buffer(net_pkt_iface(pkt),
					  net_pkt_ipv4_opts_len(pkt) +
					  payload_len,
					  AF_INET, IPPROTO_ICMP,
					  PKT_WAIT_TIME);
 800ffa6:	f242 7210 	movw	r2, #10000	; 0x2710
 800ffaa:	2300      	movs	r3, #0
	reply = net_pkt_alloc_with_buffer(net_pkt_iface(pkt),
 800ffac:	e9cd 2300 	strd	r2, r3, [sp]
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	461a      	mov	r2, r3
 800ffb4:	4421      	add	r1, r4
 800ffb6:	69a8      	ldr	r0, [r5, #24]
 800ffb8:	f7ff fde4 	bl	800fb84 <net_pkt_alloc_with_buffer>
	if (!reply) {
 800ffbc:	4607      	mov	r7, r0
 800ffbe:	2800      	cmp	r0, #0
 800ffc0:	d05c      	beq.n	801007c <icmpv4_handle_echo_request+0x110>
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
 800ffc2:	6931      	ldr	r1, [r6, #16]
 800ffc4:	0a0a      	lsrs	r2, r1, #8
 800ffc6:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 800ffca:	ea43 6211 	orr.w	r2, r3, r1, lsr #24
 800ffce:	020b      	lsls	r3, r1, #8
 800ffd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ffd4:	4313      	orrs	r3, r2
 800ffd6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ffda:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
		NET_DBG("DROP: No buffer");
		goto drop;
	}

	if (net_ipv4_is_addr_mcast((struct in_addr *)ip_hdr->dst) ||
 800ffde:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800ffe2:	d00e      	beq.n	8010002 <icmpv4_handle_echo_request+0x96>
	return pkt->iface;
 800ffe4:	f8d5 9018 	ldr.w	r9, [r5, #24]
	    net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
				   (struct in_addr *)ip_hdr->dst)) {
 800ffe8:	46b0      	mov	r8, r6
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 800ffea:	f7ff fadb 	bl	800f5a4 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 800ffee:	f858 2f10 	ldr.w	r2, [r8, #16]!
 800fff2:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d03f      	beq.n	8010078 <icmpv4_handle_echo_request+0x10c>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 800fff8:	4641      	mov	r1, r8
 800fffa:	4648      	mov	r0, r9
 800fffc:	f7fe fd20 	bl	800ea40 <net_if_ipv4_is_addr_bcast>
	if (net_ipv4_is_addr_mcast((struct in_addr *)ip_hdr->dst) ||
 8010000:	b128      	cbz	r0, 801000e <icmpv4_handle_echo_request+0xa2>
		src = net_if_ipv4_select_src_addr(net_pkt_iface(pkt),
 8010002:	f106 0110 	add.w	r1, r6, #16
 8010006:	69a8      	ldr	r0, [r5, #24]
 8010008:	f7fe fd46 	bl	800ea98 <net_if_ipv4_select_src_addr>
 801000c:	4680      	mov	r8, r0
						  (struct in_addr *)ip_hdr->dst);
	} else {
		src = (struct in_addr *)ip_hdr->dst;
	}

	if (net_ipv4_create(reply, src, (struct in_addr *)ip_hdr->src)) {
 801000e:	f106 020c 	add.w	r2, r6, #12
 8010012:	4641      	mov	r1, r8
 8010014:	4638      	mov	r0, r7
 8010016:	f00a fe62 	bl	801acde <net_ipv4_create>
 801001a:	bb78      	cbnz	r0, 801007c <icmpv4_handle_echo_request+0x110>
	return pkt->ipv4_opts_len;
 801001c:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
		goto drop;
	}

	if (IS_ENABLED(CONFIG_NET_IPV4_HDR_OPTIONS)) {
		if (net_pkt_ipv4_opts_len(pkt) &&
 8010020:	b12b      	cbz	r3, 801002e <icmpv4_handle_echo_request+0xc2>
		    icmpv4_handle_header_options(pkt, reply, src)) {
 8010022:	4642      	mov	r2, r8
 8010024:	4639      	mov	r1, r7
 8010026:	4628      	mov	r0, r5
 8010028:	f7ff ff76 	bl	800ff18 <icmpv4_handle_header_options>
		if (net_pkt_ipv4_opts_len(pkt) &&
 801002c:	bb30      	cbnz	r0, 801007c <icmpv4_handle_echo_request+0x110>
			goto drop;
		}
	}

	if (icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
 801002e:	2200      	movs	r2, #0
 8010030:	4611      	mov	r1, r2
 8010032:	4638      	mov	r0, r7
 8010034:	f00a fc10 	bl	801a858 <icmpv4_create>
 8010038:	bb00      	cbnz	r0, 801007c <icmpv4_handle_echo_request+0x110>
	    net_pkt_copy(reply, pkt, payload_len)) {
 801003a:	4622      	mov	r2, r4
 801003c:	4629      	mov	r1, r5
 801003e:	4638      	mov	r0, r7
 8010040:	f00a fabc 	bl	801a5bc <net_pkt_copy>
	if (icmpv4_create(reply, NET_ICMPV4_ECHO_REPLY, 0) ||
 8010044:	b9d0      	cbnz	r0, 801007c <icmpv4_handle_echo_request+0x110>
		goto drop;
	}

	net_pkt_cursor_init(reply);
 8010046:	4638      	mov	r0, r7
 8010048:	f00a fa07 	bl	801a45a <net_pkt_cursor_init>
	net_ipv4_finalize(reply, IPPROTO_ICMP);
 801004c:	2101      	movs	r1, #1
 801004e:	4638      	mov	r0, r7
 8010050:	f00a fe53 	bl	801acfa <net_ipv4_finalize>

	NET_DBG("Sending Echo Reply from %s to %s",
		log_strdup(net_sprint_ipv4_addr(src)),
		log_strdup(net_sprint_ipv4_addr(&ip_hdr->src)));

	if (net_send_data(reply) < 0) {
 8010054:	4638      	mov	r0, r7
 8010056:	f7fc fa8d 	bl	800c574 <net_send_data>
 801005a:	2800      	cmp	r0, #0
 801005c:	db0e      	blt.n	801007c <icmpv4_handle_echo_request+0x110>
	return pkt->iface;
 801005e:	69ba      	ldr	r2, [r7, #24]
	UPDATE_STAT(iface, stats.icmp.sent++);
 8010060:	490e      	ldr	r1, [pc, #56]	; (801009c <icmpv4_handle_echo_request+0x130>)
 8010062:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8010064:	3301      	adds	r3, #1
 8010066:	648b      	str	r3, [r1, #72]	; 0x48
 8010068:	6d13      	ldr	r3, [r2, #80]	; 0x50
 801006a:	3301      	adds	r3, #1
 801006c:	6513      	str	r3, [r2, #80]	; 0x50
		goto drop;
	}

	net_stats_update_icmp_sent(net_pkt_iface(reply));

	net_pkt_unref(pkt);
 801006e:	4628      	mov	r0, r5
 8010070:	f00a f992 	bl	801a398 <net_pkt_unref>

	return NET_OK;
 8010074:	2000      	movs	r0, #0
 8010076:	e00e      	b.n	8010096 <icmpv4_handle_echo_request+0x12a>
		return true;
 8010078:	2001      	movs	r0, #1
 801007a:	e7c1      	b.n	8010000 <icmpv4_handle_echo_request+0x94>
drop:
	if (reply) {
 801007c:	b117      	cbz	r7, 8010084 <icmpv4_handle_echo_request+0x118>
		net_pkt_unref(reply);
 801007e:	4638      	mov	r0, r7
 8010080:	f00a f98a 	bl	801a398 <net_pkt_unref>
 8010084:	69aa      	ldr	r2, [r5, #24]
	UPDATE_STAT(iface, stats.icmp.drop++);
 8010086:	4905      	ldr	r1, [pc, #20]	; (801009c <icmpv4_handle_echo_request+0x130>)
 8010088:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 801008a:	3301      	adds	r3, #1
 801008c:	64cb      	str	r3, [r1, #76]	; 0x4c
 801008e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8010090:	3301      	adds	r3, #1
 8010092:	6553      	str	r3, [r2, #84]	; 0x54
	}

	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
 8010094:	2002      	movs	r0, #2
}
 8010096:	b003      	add	sp, #12
 8010098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801009c:	20002a58 	.word	0x20002a58

080100a0 <net_icmpv4_send_error>:

	return ret;
}

int net_icmpv4_send_error(struct net_pkt *orig, uint8_t type, uint8_t code)
{
 80100a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100a4:	b086      	sub	sp, #24
 80100a6:	4604      	mov	r4, r0
 80100a8:	460e      	mov	r6, r1
 80100aa:	4617      	mov	r7, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 80100ac:	2300      	movs	r3, #0
 80100ae:	9304      	str	r3, [sp, #16]
 80100b0:	2314      	movs	r3, #20
 80100b2:	9305      	str	r3, [sp, #20]
	int err = -EIO;
	struct net_ipv4_hdr *ip_hdr;
	struct net_pkt *pkt;
	size_t copy_len;

	net_pkt_cursor_init(orig);
 80100b4:	f00a f9d1 	bl	801a45a <net_pkt_cursor_init>

	ip_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(orig, &ipv4_access);
 80100b8:	a904      	add	r1, sp, #16
 80100ba:	4620      	mov	r0, r4
 80100bc:	f7ff fd86 	bl	800fbcc <net_pkt_get_data>
	if (!ip_hdr) {
 80100c0:	2800      	cmp	r0, #0
 80100c2:	f000 808a 	beq.w	80101da <net_icmpv4_send_error+0x13a>
 80100c6:	4605      	mov	r5, r0
		goto drop_no_pkt;
	}

	if (ip_hdr->proto == IPPROTO_ICMP) {
 80100c8:	7a43      	ldrb	r3, [r0, #9]
 80100ca:	2b01      	cmp	r3, #1
 80100cc:	d03c      	beq.n	8010148 <net_icmpv4_send_error+0xa8>
 80100ce:	f8d4 9018 	ldr.w	r9, [r4, #24]
			goto drop_no_pkt;
		}
	}

	if (net_ipv4_is_addr_bcast(net_pkt_iface(orig),
				   (struct in_addr *)ip_hdr->dst)) {
 80100d2:	46a8      	mov	r8, r5
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 80100d4:	f7ff fa66 	bl	800f5a4 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 80100d8:	f858 2f10 	ldr.w	r2, [r8, #16]!
 80100dc:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 80100de:	429a      	cmp	r2, r3
 80100e0:	d041      	beq.n	8010166 <net_icmpv4_send_error+0xc6>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 80100e2:	4641      	mov	r1, r8
 80100e4:	4648      	mov	r0, r9
 80100e6:	f7fe fcab 	bl	800ea40 <net_if_ipv4_is_addr_bcast>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(orig),
 80100ea:	2800      	cmp	r0, #0
 80100ec:	d178      	bne.n	80101e0 <net_icmpv4_send_error+0x140>
			log_strdup(net_sprint_ipv4_addr(&ip_hdr->src)),
			net_proto2str(AF_INET, ip_hdr->proto));
		goto drop_no_pkt;
	}

	if (ip_hdr->proto == IPPROTO_UDP) {
 80100ee:	7a6b      	ldrb	r3, [r5, #9]
 80100f0:	2b11      	cmp	r3, #17
 80100f2:	d03d      	beq.n	8010170 <net_icmpv4_send_error+0xd0>
		copy_len = sizeof(struct net_ipv4_hdr) +
			sizeof(struct net_udp_hdr);
	} else if (ip_hdr->proto == IPPROTO_TCP) {
 80100f4:	2b06      	cmp	r3, #6
 80100f6:	d038      	beq.n	801016a <net_icmpv4_send_error+0xca>
		copy_len = sizeof(struct net_ipv4_hdr) +
			sizeof(struct net_tcp_hdr);
	} else {
		copy_len = 0;
 80100f8:	f04f 0a00 	mov.w	sl, #0
	}

	pkt = net_pkt_alloc_with_buffer(net_pkt_iface(orig),
 80100fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8010100:	2300      	movs	r3, #0
 8010102:	e9cd 2300 	strd	r2, r3, [sp]
 8010106:	2301      	movs	r3, #1
 8010108:	461a      	mov	r2, r3
 801010a:	f10a 0104 	add.w	r1, sl, #4
 801010e:	69a0      	ldr	r0, [r4, #24]
 8010110:	f7ff fd38 	bl	800fb84 <net_pkt_alloc_with_buffer>
					copy_len + NET_ICMPV4_UNUSED_LEN,
					AF_INET, IPPROTO_ICMP,
					PKT_WAIT_TIME);
	if (!pkt) {
 8010114:	4681      	mov	r9, r0
 8010116:	2800      	cmp	r0, #0
 8010118:	d065      	beq.n	80101e6 <net_icmpv4_send_error+0x146>
		err =  -ENOMEM;
		goto drop_no_pkt;
	}

	if (net_ipv4_create(pkt, (struct in_addr *)ip_hdr->dst,
 801011a:	f105 020c 	add.w	r2, r5, #12
 801011e:	4641      	mov	r1, r8
 8010120:	f00a fddd 	bl	801acde <net_ipv4_create>
 8010124:	b338      	cbz	r0, 8010176 <net_icmpv4_send_error+0xd6>
		net_stats_update_icmp_sent(net_pkt_iface(orig));
		return 0;
	}

drop:
	net_pkt_unref(pkt);
 8010126:	4648      	mov	r0, r9
 8010128:	f00a f936 	bl	801a398 <net_pkt_unref>
	int err = -EIO;
 801012c:	f06f 0504 	mvn.w	r5, #4
 8010130:	69a2      	ldr	r2, [r4, #24]
 8010132:	492e      	ldr	r1, [pc, #184]	; (80101ec <net_icmpv4_send_error+0x14c>)
 8010134:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8010136:	3301      	adds	r3, #1
 8010138:	64cb      	str	r3, [r1, #76]	; 0x4c
 801013a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 801013c:	3301      	adds	r3, #1
 801013e:	6553      	str	r3, [r2, #84]	; 0x54
drop_no_pkt:
	net_stats_update_icmp_drop(net_pkt_iface(orig));

	return err;

}
 8010140:	4628      	mov	r0, r5
 8010142:	b006      	add	sp, #24
 8010144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
 8010148:	2300      	movs	r3, #0
 801014a:	9302      	str	r3, [sp, #8]
 801014c:	2304      	movs	r3, #4
 801014e:	9303      	str	r3, [sp, #12]
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
 8010150:	a902      	add	r1, sp, #8
 8010152:	4620      	mov	r0, r4
 8010154:	f7ff fd3a 	bl	800fbcc <net_pkt_get_data>
		if (!icmp_hdr || icmp_hdr->code < 8) {
 8010158:	b110      	cbz	r0, 8010160 <net_icmpv4_send_error+0xc0>
 801015a:	7843      	ldrb	r3, [r0, #1]
 801015c:	2b07      	cmp	r3, #7
 801015e:	d8b6      	bhi.n	80100ce <net_icmpv4_send_error+0x2e>
			err = -EINVAL;
 8010160:	f06f 0515 	mvn.w	r5, #21
 8010164:	e7e4      	b.n	8010130 <net_icmpv4_send_error+0x90>
		return true;
 8010166:	2001      	movs	r0, #1
 8010168:	e7bf      	b.n	80100ea <net_icmpv4_send_error+0x4a>
		copy_len = sizeof(struct net_ipv4_hdr) +
 801016a:	f04f 0a28 	mov.w	sl, #40	; 0x28
 801016e:	e7c5      	b.n	80100fc <net_icmpv4_send_error+0x5c>
		copy_len = sizeof(struct net_ipv4_hdr) +
 8010170:	f04f 0a1c 	mov.w	sl, #28
 8010174:	e7c2      	b.n	80100fc <net_icmpv4_send_error+0x5c>
	    icmpv4_create(pkt, type, code) ||
 8010176:	463a      	mov	r2, r7
 8010178:	4631      	mov	r1, r6
 801017a:	4648      	mov	r0, r9
 801017c:	f00a fb6c 	bl	801a858 <icmpv4_create>
			    (struct in_addr *)ip_hdr->src) ||
 8010180:	2800      	cmp	r0, #0
 8010182:	d1d0      	bne.n	8010126 <net_icmpv4_send_error+0x86>
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
 8010184:	2204      	movs	r2, #4
 8010186:	2100      	movs	r1, #0
 8010188:	4648      	mov	r0, r9
 801018a:	f00a f9e8 	bl	801a55e <net_pkt_memset>
	    icmpv4_create(pkt, type, code) ||
 801018e:	2800      	cmp	r0, #0
 8010190:	d1c9      	bne.n	8010126 <net_icmpv4_send_error+0x86>
	    net_pkt_copy(pkt, orig, copy_len)) {
 8010192:	4652      	mov	r2, sl
 8010194:	4621      	mov	r1, r4
 8010196:	4648      	mov	r0, r9
 8010198:	f00a fa10 	bl	801a5bc <net_pkt_copy>
	    net_pkt_memset(pkt, 0, NET_ICMPV4_UNUSED_LEN) ||
 801019c:	4605      	mov	r5, r0
 801019e:	2800      	cmp	r0, #0
 80101a0:	d1c1      	bne.n	8010126 <net_icmpv4_send_error+0x86>
	net_pkt_cursor_init(pkt);
 80101a2:	4648      	mov	r0, r9
 80101a4:	f00a f959 	bl	801a45a <net_pkt_cursor_init>
	net_ipv4_finalize(pkt, IPPROTO_ICMP);
 80101a8:	2101      	movs	r1, #1
 80101aa:	4648      	mov	r0, r9
 80101ac:	f00a fda5 	bl	801acfa <net_ipv4_finalize>
	net_pkt_lladdr_dst(pkt)->addr = net_pkt_lladdr_src(orig)->addr;
 80101b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80101b2:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
	net_pkt_lladdr_dst(pkt)->len = net_pkt_lladdr_src(orig)->len;
 80101b6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80101ba:	f889 3040 	strb.w	r3, [r9, #64]	; 0x40
	if (net_send_data(pkt) >= 0) {
 80101be:	4648      	mov	r0, r9
 80101c0:	f7fc f9d8 	bl	800c574 <net_send_data>
 80101c4:	2800      	cmp	r0, #0
 80101c6:	dbae      	blt.n	8010126 <net_icmpv4_send_error+0x86>
 80101c8:	69a2      	ldr	r2, [r4, #24]
	UPDATE_STAT(iface, stats.icmp.sent++);
 80101ca:	4908      	ldr	r1, [pc, #32]	; (80101ec <net_icmpv4_send_error+0x14c>)
 80101cc:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 80101ce:	3301      	adds	r3, #1
 80101d0:	648b      	str	r3, [r1, #72]	; 0x48
 80101d2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80101d4:	3301      	adds	r3, #1
 80101d6:	6513      	str	r3, [r2, #80]	; 0x50
		return 0;
 80101d8:	e7b2      	b.n	8010140 <net_icmpv4_send_error+0xa0>
	int err = -EIO;
 80101da:	f06f 0504 	mvn.w	r5, #4
 80101de:	e7a7      	b.n	8010130 <net_icmpv4_send_error+0x90>
 80101e0:	f06f 0504 	mvn.w	r5, #4
 80101e4:	e7a4      	b.n	8010130 <net_icmpv4_send_error+0x90>
		err =  -ENOMEM;
 80101e6:	f06f 050b 	mvn.w	r5, #11
 80101ea:	e7a1      	b.n	8010130 <net_icmpv4_send_error+0x90>
 80101ec:	20002a58 	.word	0x20002a58

080101f0 <net_icmpv4_register_handler>:
	return list->head;
 80101f0:	4b04      	ldr	r3, [pc, #16]	; (8010204 <net_icmpv4_register_handler+0x14>)
 80101f2:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 80101f4:	6002      	str	r2, [r0, #0]
	list->head = node;
 80101f6:	6018      	str	r0, [r3, #0]
	return list->tail;
 80101f8:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 80101fa:	b103      	cbz	r3, 80101fe <net_icmpv4_register_handler+0xe>

void net_icmpv4_register_handler(struct net_icmpv4_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
 80101fc:	4770      	bx	lr
	list->tail = node;
 80101fe:	4b01      	ldr	r3, [pc, #4]	; (8010204 <net_icmpv4_register_handler+0x14>)
 8010200:	6058      	str	r0, [r3, #4]
 8010202:	e7fb      	b.n	80101fc <net_icmpv4_register_handler+0xc>
 8010204:	20003450 	.word	0x20003450

08010208 <net_icmpv4_input>:
	sys_slist_find_and_remove(&handlers, &handler->node);
}

enum net_verdict net_icmpv4_input(struct net_pkt *pkt,
				  struct net_ipv4_hdr *ip_hdr)
{
 8010208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801020c:	b082      	sub	sp, #8
 801020e:	4606      	mov	r6, r0
 8010210:	460f      	mov	r7, r1
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 8010212:	2300      	movs	r3, #0
 8010214:	9300      	str	r3, [sp, #0]
 8010216:	2304      	movs	r3, #4
 8010218:	9301      	str	r3, [sp, #4]
					      struct net_icmp_hdr);
	struct net_icmp_hdr *icmp_hdr;
	struct net_icmpv4_handler *cb;

	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 801021a:	4669      	mov	r1, sp
 801021c:	f7ff fcd6 	bl	800fbcc <net_pkt_get_data>
	if (!icmp_hdr) {
 8010220:	2800      	cmp	r0, #0
 8010222:	d046      	beq.n	80102b2 <net_icmpv4_input+0xaa>
 8010224:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
}

static inline uint16_t net_calc_chksum_icmpv4(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMP);
 8010226:	2101      	movs	r1, #1
 8010228:	4630      	mov	r0, r6
 801022a:	f009 fe22 	bl	8019e72 <net_calc_chksum>
		NET_DBG("DROP: NULL ICMPv4 header");
		return NET_DROP;
	}

	if (net_calc_chksum_icmpv4(pkt) != 0U) {
 801022e:	2800      	cmp	r0, #0
 8010230:	d133      	bne.n	801029a <net_icmpv4_input+0x92>
 8010232:	f8d6 8018 	ldr.w	r8, [r6, #24]
		NET_DBG("DROP: Invalid checksum");
		goto drop;
	}

	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
				   (struct in_addr *)ip_hdr->dst) &&
 8010236:	463c      	mov	r4, r7
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8010238:	f7ff f9b4 	bl	800f5a4 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 801023c:	f854 2f10 	ldr.w	r2, [r4, #16]!
 8010240:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8010242:	429a      	cmp	r2, r3
 8010244:	d013      	beq.n	801026e <net_icmpv4_input+0x66>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 8010246:	4621      	mov	r1, r4
 8010248:	4640      	mov	r0, r8
 801024a:	f7fe fbf9 	bl	800ea40 <net_if_ipv4_is_addr_bcast>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
 801024e:	bb20      	cbnz	r0, 801029a <net_icmpv4_input+0x92>
 * Packet needs to be set to overwrite mode.
 */
static inline int net_pkt_acknowledge_data(struct net_pkt *pkt,
					   struct net_pkt_data_access *access)
{
	return net_pkt_skip(pkt, access->size);
 8010250:	9901      	ldr	r1, [sp, #4]
 8010252:	4630      	mov	r0, r6
 8010254:	f00a f977 	bl	801a546 <net_pkt_skip>
	return pkt->iface;
 8010258:	69b2      	ldr	r2, [r6, #24]
	UPDATE_STAT(iface, stats.icmp.recv++);
 801025a:	4917      	ldr	r1, [pc, #92]	; (80102b8 <net_icmpv4_input+0xb0>)
 801025c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 801025e:	3301      	adds	r3, #1
 8010260:	644b      	str	r3, [r1, #68]	; 0x44
 8010262:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8010264:	3301      	adds	r3, #1
 8010266:	64d3      	str	r3, [r2, #76]	; 0x4c
	return list->head;
 8010268:	4b14      	ldr	r3, [pc, #80]	; (80102bc <net_icmpv4_input+0xb4>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	e004      	b.n	8010278 <net_icmpv4_input+0x70>
		return true;
 801026e:	2001      	movs	r0, #1
 8010270:	e7ed      	b.n	801024e <net_icmpv4_input+0x46>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8010272:	b10b      	cbz	r3, 8010278 <net_icmpv4_input+0x70>
	return node->next;
 8010274:	681b      	ldr	r3, [r3, #0]
	NET_DBG("ICMPv4 packet received type %d code %d",
		icmp_hdr->type, icmp_hdr->code);

	net_stats_update_icmp_recv(net_pkt_iface(pkt));

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
 8010276:	b183      	cbz	r3, 801029a <net_icmpv4_input+0x92>
 8010278:	b17b      	cbz	r3, 801029a <net_icmpv4_input+0x92>
		if (cb->type == icmp_hdr->type &&
 801027a:	7a1c      	ldrb	r4, [r3, #8]
 801027c:	782a      	ldrb	r2, [r5, #0]
 801027e:	4294      	cmp	r4, r2
 8010280:	d1f7      	bne.n	8010272 <net_icmpv4_input+0x6a>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
 8010282:	7a5a      	ldrb	r2, [r3, #9]
 8010284:	7869      	ldrb	r1, [r5, #1]
		if (cb->type == icmp_hdr->type &&
 8010286:	428a      	cmp	r2, r1
 8010288:	d001      	beq.n	801028e <net_icmpv4_input+0x86>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
 801028a:	2a00      	cmp	r2, #0
 801028c:	d1f1      	bne.n	8010272 <net_icmpv4_input+0x6a>
			return cb->handler(pkt, ip_hdr, icmp_hdr);
 801028e:	685b      	ldr	r3, [r3, #4]
 8010290:	462a      	mov	r2, r5
 8010292:	4639      	mov	r1, r7
 8010294:	4630      	mov	r0, r6
 8010296:	4798      	blx	r3
 8010298:	e008      	b.n	80102ac <net_icmpv4_input+0xa4>
 801029a:	69b2      	ldr	r2, [r6, #24]
	UPDATE_STAT(iface, stats.icmp.drop++);
 801029c:	4906      	ldr	r1, [pc, #24]	; (80102b8 <net_icmpv4_input+0xb0>)
 801029e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80102a0:	3301      	adds	r3, #1
 80102a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80102a4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80102a6:	3301      	adds	r3, #1
 80102a8:	6553      	str	r3, [r2, #84]	; 0x54
	}

drop:
	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
 80102aa:	2002      	movs	r0, #2
}
 80102ac:	b002      	add	sp, #8
 80102ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NET_DROP;
 80102b2:	2002      	movs	r0, #2
 80102b4:	e7fa      	b.n	80102ac <net_icmpv4_input+0xa4>
 80102b6:	bf00      	nop
 80102b8:	20002a58 	.word	0x20002a58
 80102bc:	20003450 	.word	0x20003450

080102c0 <net_icmpv4_init>:
	.code = 0,
	.handler = icmpv4_handle_echo_request,
};

void net_icmpv4_init(void)
{
 80102c0:	b508      	push	{r3, lr}
	net_icmpv4_register_handler(&echo_request_handler);
 80102c2:	4802      	ldr	r0, [pc, #8]	; (80102cc <net_icmpv4_init+0xc>)
 80102c4:	f7ff ff94 	bl	80101f0 <net_icmpv4_register_handler>
}
 80102c8:	bd08      	pop	{r3, pc}
 80102ca:	bf00      	nop
 80102cc:	2000080c 	.word	0x2000080c

080102d0 <net_ipv4_input>:
	return 0;
}
#endif

enum net_verdict net_ipv4_input(struct net_pkt *pkt)
{
 80102d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102d4:	b090      	sub	sp, #64	; 0x40
 80102d6:	4606      	mov	r6, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 80102d8:	2200      	movs	r2, #0
 80102da:	920e      	str	r2, [sp, #56]	; 0x38
 80102dc:	2314      	movs	r3, #20
 80102de:	930f      	str	r3, [sp, #60]	; 0x3c
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 80102e0:	a90c      	add	r1, sp, #48	; 0x30
 80102e2:	910a      	str	r1, [sp, #40]	; 0x28
 80102e4:	2108      	movs	r1, #8
 80102e6:	910b      	str	r1, [sp, #44]	; 0x2c
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
 80102e8:	eb0d 0103 	add.w	r1, sp, r3
 80102ec:	9103      	str	r1, [sp, #12]
 80102ee:	9304      	str	r3, [sp, #16]
	return net_buf_frags_len(pkt->frags);
 80102f0:	6883      	ldr	r3, [r0, #8]
 80102f2:	b11b      	cbz	r3, 80102fc <net_ipv4_input+0x2c>
		bytes += buf->len;
 80102f4:	8999      	ldrh	r1, [r3, #12]
 80102f6:	440a      	add	r2, r1
		buf = buf->frags;
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	e7fa      	b.n	80102f2 <net_ipv4_input+0x22>
	int real_len = net_pkt_get_len(pkt);
 80102fc:	4614      	mov	r4, r2
	return pkt->iface;
 80102fe:	69b2      	ldr	r2, [r6, #24]
	UPDATE_STAT(iface, stats.ipv4.recv++);
 8010300:	498c      	ldr	r1, [pc, #560]	; (8010534 <net_ipv4_input+0x264>)
 8010302:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8010304:	3301      	adds	r3, #1
 8010306:	634b      	str	r3, [r1, #52]	; 0x34
 8010308:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 801030a:	3301      	adds	r3, #1
 801030c:	63d3      	str	r3, [r2, #60]	; 0x3c
	net_pkt_cursor_backup(pkt, &hdr_start);
#endif

	net_stats_update_ipv4_recv(net_pkt_iface(pkt));

	hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
 801030e:	a90e      	add	r1, sp, #56	; 0x38
 8010310:	4630      	mov	r0, r6
 8010312:	f7ff fc5b 	bl	800fbcc <net_pkt_get_data>
	if (!hdr) {
 8010316:	4607      	mov	r7, r0
 8010318:	2800      	cmp	r0, #0
 801031a:	d065      	beq.n	80103e8 <net_ipv4_input+0x118>
		NET_DBG("DROP: no buffer");
		goto drop;
	}

	hdr_len = (hdr->vhl & NET_IPV4_IHL_MASK) * 4U;
 801031c:	7803      	ldrb	r3, [r0, #0]
 801031e:	f003 030f 	and.w	r3, r3, #15
 8010322:	009b      	lsls	r3, r3, #2
	if (hdr_len < sizeof(struct net_ipv4_hdr)) {
 8010324:	2b13      	cmp	r3, #19
 8010326:	d95f      	bls.n	80103e8 <net_ipv4_input+0x118>
	pkt->ip_hdr_len = len;
 8010328:	2214      	movs	r2, #20
 801032a:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
		goto drop;
	}

	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv4_hdr));

	opts_len = hdr_len - sizeof(struct net_ipv4_hdr);
 801032e:	3b14      	subs	r3, #20
 8010330:	b2dd      	uxtb	r5, r3
	if (opts_len > NET_IPV4_HDR_OPTNS_MAX_LEN) {
 8010332:	2d28      	cmp	r5, #40	; 0x28
 8010334:	f200 80fb 	bhi.w	801052e <net_ipv4_input+0x25e>
		return -EINVAL;
	}

	if (hdr->ttl == 0) {
 8010338:	7a03      	ldrb	r3, [r0, #8]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d054      	beq.n	80103e8 <net_ipv4_input+0x118>
	pkt->ipv4_opts_len = opts_len;
 801033e:	f886 5050 	strb.w	r5, [r6, #80]	; 0x50
		goto drop;
	}

	net_pkt_set_ipv4_opts_len(pkt, opts_len);

	pkt_len = ntohs(hdr->len);
 8010342:	8843      	ldrh	r3, [r0, #2]
 8010344:	0a19      	lsrs	r1, r3, #8
 8010346:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 801034a:	b289      	uxth	r1, r1
	if (real_len < pkt_len) {
 801034c:	42a1      	cmp	r1, r4
 801034e:	dc4b      	bgt.n	80103e8 <net_ipv4_input+0x118>
		NET_DBG("DROP: pkt len per hdr %d != pkt real len %d",
			pkt_len, real_len);
		goto drop;
	} else if (real_len > pkt_len) {
 8010350:	db56      	blt.n	8010400 <net_ipv4_input+0x130>
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
 8010352:	68f9      	ldr	r1, [r7, #12]
 8010354:	0a0a      	lsrs	r2, r1, #8
 8010356:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 801035a:	ea43 6211 	orr.w	r2, r3, r1, lsr #24
 801035e:	020b      	lsls	r3, r1, #8
 8010360:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010364:	4313      	orrs	r3, r2
 8010366:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801036a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
		net_pkt_update_length(pkt, pkt_len);
	}

	if (net_ipv4_is_addr_mcast((struct in_addr *)hdr->src)) {
 801036e:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8010372:	d039      	beq.n	80103e8 <net_ipv4_input+0x118>
	return pkt->iface;
 8010374:	f8d6 8018 	ldr.w	r8, [r6, #24]
		NET_DBG("DROP: src addr is %s", "mcast");
		goto drop;
	}

	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt), (struct in_addr *)hdr->src)) {
 8010378:	463c      	mov	r4, r7
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 801037a:	f7ff f913 	bl	800f5a4 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 801037e:	f854 2f0c 	ldr.w	r2, [r4, #12]!
 8010382:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8010384:	429a      	cmp	r2, r3
 8010386:	d03f      	beq.n	8010408 <net_ipv4_input+0x138>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 8010388:	4621      	mov	r1, r4
 801038a:	4640      	mov	r0, r8
 801038c:	f7fe fb58 	bl	800ea40 <net_if_ipv4_is_addr_bcast>
 8010390:	bb50      	cbnz	r0, 80103e8 <net_ipv4_input+0x118>
	return UNALIGNED_GET(&addr->s_addr) == 0;
 8010392:	68fb      	ldr	r3, [r7, #12]
		NET_DBG("DROP: src addr is %s", "bcast");
		goto drop;
	}

	if (net_ipv4_is_addr_unspecified((struct in_addr *)hdr->src)) {
 8010394:	b343      	cbz	r3, 80103e8 <net_ipv4_input+0x118>
		NET_DBG("DROP: src addr is %s", "unspecified");
		goto drop;
	}

	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
 8010396:	69b0      	ldr	r0, [r6, #24]
 8010398:	f009 fae8 	bl	801996c <net_if_need_calc_rx_checksum>
 801039c:	b118      	cbz	r0, 80103a6 <net_ipv4_input+0xd6>
	    net_calc_chksum_ipv4(pkt) != 0U) {
 801039e:	4630      	mov	r0, r6
 80103a0:	f009 fe04 	bl	8019fac <net_calc_chksum_ipv4>
	if (net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
 80103a4:	bb00      	cbnz	r0, 80103e8 <net_ipv4_input+0x118>
		NET_DBG("DROP: invalid chksum");
		goto drop;
	}

	if ((!net_ipv4_is_my_addr((struct in_addr *)hdr->dst) &&
 80103a6:	f107 0410 	add.w	r4, r7, #16
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
 80103aa:	2100      	movs	r1, #0
 80103ac:	4620      	mov	r0, r4
 80103ae:	f7fe fbdf 	bl	800eb70 <net_if_ipv4_addr_lookup>
 80103b2:	2800      	cmp	r0, #0
 80103b4:	bf14      	ite	ne
 80103b6:	2001      	movne	r0, #1
 80103b8:	2000      	moveq	r0, #0
	if (!ret) {
 80103ba:	d027      	beq.n	801040c <net_ipv4_input+0x13c>
 80103bc:	2800      	cmp	r0, #0
 80103be:	d138      	bne.n	8010432 <net_ipv4_input+0x162>
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
 80103c0:	693a      	ldr	r2, [r7, #16]
 80103c2:	0a13      	lsrs	r3, r2, #8
 80103c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80103c8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80103cc:	0211      	lsls	r1, r2, #8
 80103ce:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 80103d2:	430b      	orrs	r3, r1
 80103d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80103d8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80103dc:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80103e0:	d027      	beq.n	8010432 <net_ipv4_input+0x162>
	     !net_ipv4_is_addr_mcast((struct in_addr *)hdr->dst) &&
	     !(hdr->proto == IPPROTO_UDP &&
 80103e2:	7a7b      	ldrb	r3, [r7, #9]
	     !net_ipv4_is_addr_mcast((struct in_addr *)hdr->dst) &&
 80103e4:	2b11      	cmp	r3, #17
 80103e6:	d01e      	beq.n	8010426 <net_ipv4_input+0x156>
 80103e8:	69b2      	ldr	r2, [r6, #24]
	UPDATE_STAT(iface, stats.ipv4.drop++);
 80103ea:	4952      	ldr	r1, [pc, #328]	; (8010534 <net_ipv4_input+0x264>)
 80103ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80103ee:	3301      	adds	r3, #1
 80103f0:	640b      	str	r3, [r1, #64]	; 0x40
 80103f2:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80103f4:	3301      	adds	r3, #1
 80103f6:	6493      	str	r3, [r2, #72]	; 0x48
	if (verdict != NET_DROP) {
		return verdict;
	}
drop:
	net_stats_update_ipv4_drop(net_pkt_iface(pkt));
	return NET_DROP;
 80103f8:	2002      	movs	r0, #2
}
 80103fa:	b010      	add	sp, #64	; 0x40
 80103fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_pkt_update_length(pkt, pkt_len);
 8010400:	4630      	mov	r0, r6
 8010402:	f00a f92a 	bl	801a65a <net_pkt_update_length>
 8010406:	e7a4      	b.n	8010352 <net_ipv4_input+0x82>
		return true;
 8010408:	2001      	movs	r0, #1
 801040a:	e7c1      	b.n	8010390 <net_ipv4_input+0xc0>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 801040c:	f7ff f8ca 	bl	800f5a4 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8010410:	6822      	ldr	r2, [r4, #0]
 8010412:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8010414:	429a      	cmp	r2, r3
 8010416:	d004      	beq.n	8010422 <net_ipv4_input+0x152>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 8010418:	4621      	mov	r1, r4
 801041a:	2000      	movs	r0, #0
 801041c:	f7fe fb10 	bl	800ea40 <net_if_ipv4_is_addr_bcast>
 8010420:	e7cc      	b.n	80103bc <net_ipv4_input+0xec>
		return true;
 8010422:	2001      	movs	r0, #1
 8010424:	e7ca      	b.n	80103bc <net_ipv4_input+0xec>
	       (net_ipv4_addr_cmp((struct in_addr *)hdr->dst, net_ipv4_broadcast_address()) ||
 8010426:	f7ff f8bd 	bl	800f5a4 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	6802      	ldr	r2, [r0, #0]
	     !(hdr->proto == IPPROTO_UDP &&
 801042e:	429a      	cmp	r2, r3
 8010430:	d1da      	bne.n	80103e8 <net_ipv4_input+0x118>
	    (hdr->proto == IPPROTO_TCP &&
 8010432:	7a7b      	ldrb	r3, [r7, #9]
				   net_ipv4_unspecified_address()))))) ||
 8010434:	2b06      	cmp	r3, #6
 8010436:	d039      	beq.n	80104ac <net_ipv4_input+0x1dc>
	return net_pkt_skip(pkt, access->size);
 8010438:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801043a:	4630      	mov	r0, r6
 801043c:	f00a f883 	bl	801a546 <net_pkt_skip>
	if (opts_len) {
 8010440:	2d00      	cmp	r5, #0
 8010442:	d144      	bne.n	80104ce <net_ipv4_input+0x1fe>
	net_pkt_set_ipv4_ttl(pkt, hdr->ttl);
 8010444:	7a3b      	ldrb	r3, [r7, #8]
	pkt->ipv4_ttl = ttl;
 8010446:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
	pkt->family = family;
 801044a:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
 801044e:	2201      	movs	r2, #1
 8010450:	f362 0343 	bfi	r3, r2, #1, #3
 8010454:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
	switch (hdr->proto) {
 8010458:	7a7b      	ldrb	r3, [r7, #9]
 801045a:	3b01      	subs	r3, #1
 801045c:	2b10      	cmp	r3, #16
 801045e:	d8c3      	bhi.n	80103e8 <net_ipv4_input+0x118>
 8010460:	a201      	add	r2, pc, #4	; (adr r2, 8010468 <net_ipv4_input+0x198>)
 8010462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010466:	bf00      	nop
 8010468:	080104dd 	.word	0x080104dd
 801046c:	080104eb 	.word	0x080104eb
 8010470:	080103e9 	.word	0x080103e9
 8010474:	080103e9 	.word	0x080103e9
 8010478:	080103e9 	.word	0x080103e9
 801047c:	080104f9 	.word	0x080104f9
 8010480:	080103e9 	.word	0x080103e9
 8010484:	080103e9 	.word	0x080103e9
 8010488:	080103e9 	.word	0x080103e9
 801048c:	080103e9 	.word	0x080103e9
 8010490:	080103e9 	.word	0x080103e9
 8010494:	080103e9 	.word	0x080103e9
 8010498:	080103e9 	.word	0x080103e9
 801049c:	080103e9 	.word	0x080103e9
 80104a0:	080103e9 	.word	0x080103e9
 80104a4:	080103e9 	.word	0x080103e9
 80104a8:	0801051f 	.word	0x0801051f
	return pkt->iface;
 80104ac:	f8d6 8018 	ldr.w	r8, [r6, #24]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 80104b0:	f7ff f878 	bl	800f5a4 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 80104b4:	6822      	ldr	r2, [r4, #0]
 80104b6:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d006      	beq.n	80104ca <net_ipv4_input+0x1fa>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 80104bc:	4621      	mov	r1, r4
 80104be:	4640      	mov	r0, r8
 80104c0:	f7fe fabe 	bl	800ea40 <net_if_ipv4_is_addr_bcast>
	    (hdr->proto == IPPROTO_TCP &&
 80104c4:	2800      	cmp	r0, #0
 80104c6:	d0b7      	beq.n	8010438 <net_ipv4_input+0x168>
 80104c8:	e78e      	b.n	80103e8 <net_ipv4_input+0x118>
		return true;
 80104ca:	2001      	movs	r0, #1
 80104cc:	e7fa      	b.n	80104c4 <net_ipv4_input+0x1f4>
		if (net_pkt_skip(pkt, opts_len)) {
 80104ce:	4629      	mov	r1, r5
 80104d0:	4630      	mov	r0, r6
 80104d2:	f00a f838 	bl	801a546 <net_pkt_skip>
 80104d6:	2800      	cmp	r0, #0
 80104d8:	d0b4      	beq.n	8010444 <net_ipv4_input+0x174>
 80104da:	e785      	b.n	80103e8 <net_ipv4_input+0x118>
		verdict = net_icmpv4_input(pkt, hdr);
 80104dc:	4639      	mov	r1, r7
 80104de:	4630      	mov	r0, r6
 80104e0:	f7ff fe92 	bl	8010208 <net_icmpv4_input>
		if (verdict == NET_DROP) {
 80104e4:	2802      	cmp	r0, #2
 80104e6:	d188      	bne.n	80103fa <net_ipv4_input+0x12a>
 80104e8:	e77e      	b.n	80103e8 <net_ipv4_input+0x118>
		verdict = net_ipv4_igmp_input(pkt, hdr);
 80104ea:	4639      	mov	r1, r7
 80104ec:	4630      	mov	r0, r6
 80104ee:	f000 f8bf 	bl	8010670 <net_ipv4_igmp_input>
		if (verdict == NET_DROP) {
 80104f2:	2802      	cmp	r0, #2
 80104f4:	d181      	bne.n	80103fa <net_ipv4_input+0x12a>
 80104f6:	e777      	b.n	80103e8 <net_ipv4_input+0x118>
		proto_hdr.tcp = net_tcp_input(pkt, &tcp_access);
 80104f8:	a903      	add	r1, sp, #12
 80104fa:	4630      	mov	r0, r6
 80104fc:	f003 fc90 	bl	8013e20 <net_tcp_input>
 8010500:	9002      	str	r0, [sp, #8]
		if (proto_hdr.tcp) {
 8010502:	2800      	cmp	r0, #0
 8010504:	f43f af70 	beq.w	80103e8 <net_ipv4_input+0x118>
	ip.ipv4 = hdr;
 8010508:	9701      	str	r7, [sp, #4]
	verdict = net_conn_input(pkt, &ip, hdr->proto, &proto_hdr);
 801050a:	ab02      	add	r3, sp, #8
 801050c:	7a7a      	ldrb	r2, [r7, #9]
 801050e:	a901      	add	r1, sp, #4
 8010510:	4630      	mov	r0, r6
 8010512:	f003 fabb 	bl	8013a8c <net_conn_input>
	if (verdict != NET_DROP) {
 8010516:	2802      	cmp	r0, #2
 8010518:	f47f af6f 	bne.w	80103fa <net_ipv4_input+0x12a>
drop:
 801051c:	e764      	b.n	80103e8 <net_ipv4_input+0x118>
		proto_hdr.udp = net_udp_input(pkt, &udp_access);
 801051e:	a90a      	add	r1, sp, #40	; 0x28
 8010520:	4630      	mov	r0, r6
 8010522:	f003 fcbb 	bl	8013e9c <net_udp_input>
 8010526:	9002      	str	r0, [sp, #8]
		if (proto_hdr.udp) {
 8010528:	2800      	cmp	r0, #0
 801052a:	d1ed      	bne.n	8010508 <net_ipv4_input+0x238>
 801052c:	e75c      	b.n	80103e8 <net_ipv4_input+0x118>
		return -EINVAL;
 801052e:	20ea      	movs	r0, #234	; 0xea
 8010530:	e763      	b.n	80103fa <net_ipv4_input+0x12a>
 8010532:	bf00      	nop
 8010534:	20002a58 	.word	0x20002a58

08010538 <igmp_send>:

	return igmp_v2_create(pkt, group, type);
}

static int igmp_send(struct net_pkt *pkt)
{
 8010538:	b538      	push	{r3, r4, r5, lr}
 801053a:	4604      	mov	r4, r0
	int ret;

	net_pkt_cursor_init(pkt);
 801053c:	f009 ff8d 	bl	801a45a <net_pkt_cursor_init>
	net_ipv4_finalize(pkt, IPPROTO_IGMP);
 8010540:	2102      	movs	r1, #2
 8010542:	4620      	mov	r0, r4
 8010544:	f00a fbd9 	bl	801acfa <net_ipv4_finalize>

	ret = net_send_data(pkt);
 8010548:	4620      	mov	r0, r4
 801054a:	f7fc f813 	bl	800c574 <net_send_data>
	if (ret < 0) {
 801054e:	1e05      	subs	r5, r0, #0
 8010550:	db0e      	blt.n	8010570 <igmp_send+0x38>
 8010552:	69a2      	ldr	r2, [r4, #24]
	UPDATE_STAT(iface, stats.ipv4_igmp.sent++);
 8010554:	490e      	ldr	r1, [pc, #56]	; (8010590 <igmp_send+0x58>)
 8010556:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 801055a:	3301      	adds	r3, #1
 801055c:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
 8010560:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8010564:	3301      	adds	r3, #1
 8010566:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		return ret;
	}

	net_stats_update_ipv4_igmp_sent(net_pkt_iface(pkt));

	return 0;
 801056a:	2500      	movs	r5, #0
}
 801056c:	4628      	mov	r0, r5
 801056e:	bd38      	pop	{r3, r4, r5, pc}
 8010570:	69a2      	ldr	r2, [r4, #24]
	UPDATE_STAT(iface, stats.ipv4_igmp.drop++);
 8010572:	4907      	ldr	r1, [pc, #28]	; (8010590 <igmp_send+0x58>)
 8010574:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
 8010578:	3301      	adds	r3, #1
 801057a:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
 801057e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8010582:	3301      	adds	r3, #1
 8010584:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		net_pkt_unref(pkt);
 8010588:	4620      	mov	r0, r4
 801058a:	f009 ff05 	bl	801a398 <net_pkt_unref>
		return ret;
 801058e:	e7ed      	b.n	801056c <igmp_send+0x34>
 8010590:	20002a58 	.word	0x20002a58

08010594 <send_igmp_report>:

static int send_igmp_report(struct net_if *iface,
			    struct net_ipv4_igmp_v2_query *igmp_v2_hdr)
{
 8010594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010598:	b082      	sub	sp, #8
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
 801059a:	f8d0 5214 	ldr.w	r5, [r0, #532]	; 0x214
	struct net_pkt *pkt = NULL;
	int i, count = 0;
	int ret = 0;

	if (!ipv4) {
 801059e:	b92d      	cbnz	r5, 80105ac <send_igmp_report+0x18>
		return -ENOENT;
 80105a0:	f06f 0601 	mvn.w	r6, #1
	if (pkt) {
		net_pkt_unref(pkt);
	}

	return ret;
}
 80105a4:	4630      	mov	r0, r6
 80105a6:	b002      	add	sp, #8
 80105a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ac:	4604      	mov	r4, r0
	int i, count = 0;
 80105ae:	2100      	movs	r1, #0
	for (i = 0; i < NET_IF_MAX_IPV4_MADDR; i++) {
 80105b0:	460b      	mov	r3, r1
 80105b2:	e013      	b.n	80105dc <send_igmp_report+0x48>
		if (!ipv4->mcast[i].is_used || !ipv4->mcast[i].is_joined) {
 80105b4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80105b8:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80105bc:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 80105c0:	f012 0f01 	tst.w	r2, #1
 80105c4:	d009      	beq.n	80105da <send_igmp_report+0x46>
 80105c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80105ca:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80105ce:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 80105d2:	f012 0f02 	tst.w	r2, #2
 80105d6:	d000      	beq.n	80105da <send_igmp_report+0x46>
		count++;
 80105d8:	3101      	adds	r1, #1
	for (i = 0; i < NET_IF_MAX_IPV4_MADDR; i++) {
 80105da:	3301      	adds	r3, #1
 80105dc:	2b00      	cmp	r3, #0
 80105de:	dde9      	ble.n	80105b4 <send_igmp_report+0x20>
	if (count == 0) {
 80105e0:	b911      	cbnz	r1, 80105e8 <send_igmp_report+0x54>
		return -ESRCH;
 80105e2:	f06f 0602 	mvn.w	r6, #2
 80105e6:	e7dd      	b.n	80105a4 <send_igmp_report+0x10>
	int ret = 0;
 80105e8:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV4_MADDR; i++) {
 80105ea:	4637      	mov	r7, r6
 80105ec:	2f00      	cmp	r7, #0
 80105ee:	dd08      	ble.n	8010602 <send_igmp_report+0x6e>
drop:
 80105f0:	f04f 0800 	mov.w	r8, #0
	if (pkt) {
 80105f4:	f1b8 0f00 	cmp.w	r8, #0
 80105f8:	d0d4      	beq.n	80105a4 <send_igmp_report+0x10>
		net_pkt_unref(pkt);
 80105fa:	4640      	mov	r0, r8
 80105fc:	f009 fecc 	bl	801a398 <net_pkt_unref>
 8010600:	e7d0      	b.n	80105a4 <send_igmp_report+0x10>
		if (!ipv4->mcast[i].is_used || !ipv4->mcast[i].is_joined) {
 8010602:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8010606:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 801060a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801060e:	f013 0f01 	tst.w	r3, #1
 8010612:	d026      	beq.n	8010662 <send_igmp_report+0xce>
 8010614:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8010618:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 801061c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010620:	f013 0f02 	tst.w	r3, #2
 8010624:	d01d      	beq.n	8010662 <send_igmp_report+0xce>
					PKT_WAIT_TIME);
 8010626:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801062a:	2300      	movs	r3, #0
		pkt = net_pkt_alloc_with_buffer(iface,
 801062c:	e9cd 2300 	strd	r2, r3, [sp]
 8010630:	2302      	movs	r3, #2
 8010632:	2201      	movs	r2, #1
 8010634:	210c      	movs	r1, #12
 8010636:	4620      	mov	r0, r4
 8010638:	f7ff faa4 	bl	800fb84 <net_pkt_alloc_with_buffer>
		if (!pkt) {
 801063c:	4680      	mov	r8, r0
 801063e:	b190      	cbz	r0, 8010666 <send_igmp_report+0xd2>
					    &ipv4->mcast[i].address.in_addr,
 8010640:	eb07 0247 	add.w	r2, r7, r7, lsl #1
 8010644:	00d2      	lsls	r2, r2, #3
 8010646:	3230      	adds	r2, #48	; 0x30
 8010648:	442a      	add	r2, r5
		ret = igmp_v2_create_packet(pkt, &all_routers,
 801064a:	2316      	movs	r3, #22
 801064c:	3204      	adds	r2, #4
 801064e:	4907      	ldr	r1, [pc, #28]	; (801066c <send_igmp_report+0xd8>)
 8010650:	f00a fc48 	bl	801aee4 <igmp_v2_create_packet>
		if (ret < 0) {
 8010654:	1e06      	subs	r6, r0, #0
 8010656:	dbcd      	blt.n	80105f4 <send_igmp_report+0x60>
		ret = igmp_send(pkt);
 8010658:	4640      	mov	r0, r8
 801065a:	f7ff ff6d 	bl	8010538 <igmp_send>
		if (ret < 0) {
 801065e:	1e06      	subs	r6, r0, #0
 8010660:	dbc8      	blt.n	80105f4 <send_igmp_report+0x60>
	for (i = 0; i < NET_IF_MAX_IPV4_MADDR; i++) {
 8010662:	3701      	adds	r7, #1
 8010664:	e7c2      	b.n	80105ec <send_igmp_report+0x58>
			return -ENOMEM;
 8010666:	f06f 060b 	mvn.w	r6, #11
 801066a:	e79b      	b.n	80105a4 <send_igmp_report+0x10>
 801066c:	0801e46c 	.word	0x0801e46c

08010670 <net_ipv4_igmp_input>:

enum net_verdict net_ipv4_igmp_input(struct net_pkt *pkt,
				     struct net_ipv4_hdr *ip_hdr)
{
 8010670:	b530      	push	{r4, r5, lr}
 8010672:	b083      	sub	sp, #12
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(igmp_access,
 8010674:	2300      	movs	r3, #0
 8010676:	9300      	str	r3, [sp, #0]
 8010678:	2308      	movs	r3, #8
 801067a:	9301      	str	r3, [sp, #4]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 801067c:	690b      	ldr	r3, [r1, #16]
 801067e:	4a1d      	ldr	r2, [pc, #116]	; (80106f4 <net_ipv4_igmp_input+0x84>)
 8010680:	6812      	ldr	r2, [r2, #0]
	struct net_ipv4_igmp_v2_query *igmp_hdr;

	/* TODO: receive from arbitrary group address instead of
	 * all_systems
	 */
	if (!net_ipv4_addr_cmp_raw(ip_hdr->dst, (uint8_t *)&all_systems)) {
 8010682:	429a      	cmp	r2, r3
 8010684:	d002      	beq.n	801068c <net_ipv4_igmp_input+0x1c>
		NET_DBG("DROP: Invalid dst address");
		return NET_DROP;
 8010686:	2002      	movs	r0, #2

drop:
	net_stats_update_ipv4_igmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
}
 8010688:	b003      	add	sp, #12
 801068a:	bd30      	pop	{r4, r5, pc}
 801068c:	4604      	mov	r4, r0
	igmp_hdr = (struct net_ipv4_igmp_v2_query *)net_pkt_get_data(pkt,
 801068e:	4669      	mov	r1, sp
 8010690:	f7ff fa9c 	bl	800fbcc <net_pkt_get_data>
	if (!igmp_hdr) {
 8010694:	4605      	mov	r5, r0
 8010696:	b350      	cbz	r0, 80106ee <net_ipv4_igmp_input+0x7e>
	if (net_calc_chksum_igmp((uint8_t *)igmp_hdr,
 8010698:	2108      	movs	r1, #8
 801069a:	f009 fc9e 	bl	8019fda <net_calc_chksum_igmp>
 801069e:	b9c0      	cbnz	r0, 80106d2 <net_ipv4_igmp_input+0x62>
	return net_pkt_skip(pkt, access->size);
 80106a0:	9901      	ldr	r1, [sp, #4]
 80106a2:	4620      	mov	r0, r4
 80106a4:	f009 ff4f 	bl	801a546 <net_pkt_skip>
	return pkt->iface;
 80106a8:	69a2      	ldr	r2, [r4, #24]
	UPDATE_STAT(iface, stats.ipv4_igmp.recv++);
 80106aa:	4913      	ldr	r1, [pc, #76]	; (80106f8 <net_ipv4_igmp_input+0x88>)
 80106ac:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
 80106b0:	3301      	adds	r3, #1
 80106b2:	f8c1 30b8 	str.w	r3, [r1, #184]	; 0xb8
 80106b6:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80106ba:	3301      	adds	r3, #1
 80106bc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	(void)send_igmp_report(net_pkt_iface(pkt), igmp_hdr);
 80106c0:	4629      	mov	r1, r5
 80106c2:	69a0      	ldr	r0, [r4, #24]
 80106c4:	f7ff ff66 	bl	8010594 <send_igmp_report>
	net_pkt_unref(pkt);
 80106c8:	4620      	mov	r0, r4
 80106ca:	f009 fe65 	bl	801a398 <net_pkt_unref>
	return NET_OK;
 80106ce:	2000      	movs	r0, #0
 80106d0:	e7da      	b.n	8010688 <net_ipv4_igmp_input+0x18>
 80106d2:	69a2      	ldr	r2, [r4, #24]
	UPDATE_STAT(iface, stats.ipv4_igmp.drop++);
 80106d4:	4908      	ldr	r1, [pc, #32]	; (80106f8 <net_ipv4_igmp_input+0x88>)
 80106d6:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
 80106da:	3301      	adds	r3, #1
 80106dc:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
 80106e0:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 80106e4:	3301      	adds	r3, #1
 80106e6:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
	return NET_DROP;
 80106ea:	2002      	movs	r0, #2
 80106ec:	e7cc      	b.n	8010688 <net_ipv4_igmp_input+0x18>
		return NET_DROP;
 80106ee:	2002      	movs	r0, #2
 80106f0:	e7ca      	b.n	8010688 <net_ipv4_igmp_input+0x18>
 80106f2:	bf00      	nop
 80106f4:	0801e470 	.word	0x0801e470
 80106f8:	20002a58 	.word	0x20002a58

080106fc <net_icmpv6_register_handler>:
	return list->head;
 80106fc:	4b04      	ldr	r3, [pc, #16]	; (8010710 <net_icmpv6_register_handler+0x14>)
 80106fe:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 8010700:	6002      	str	r2, [r0, #0]
	list->head = node;
 8010702:	6018      	str	r0, [r3, #0]
	return list->tail;
 8010704:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 8010706:	b103      	cbz	r3, 801070a <net_icmpv6_register_handler+0xe>
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
 8010708:	4770      	bx	lr
	list->tail = node;
 801070a:	4b01      	ldr	r3, [pc, #4]	; (8010710 <net_icmpv6_register_handler+0x14>)
 801070c:	6058      	str	r0, [r3, #4]
 801070e:	e7fb      	b.n	8010708 <net_icmpv6_register_handler+0xc>
 8010710:	20003458 	.word	0x20003458

08010714 <icmpv6_handle_echo_request>:

static
enum net_verdict icmpv6_handle_echo_request(struct net_pkt *pkt,
					    struct net_ipv6_hdr *ip_hdr,
					    struct net_icmp_hdr *icmp_hdr)
{
 8010714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010716:	b083      	sub	sp, #12
 8010718:	4605      	mov	r5, r0

	NET_DBG("Received Echo Request from %s to %s",
		log_strdup(net_sprint_ipv6_addr(&ip_hdr->src)),
		log_strdup(net_sprint_ipv6_addr(&ip_hdr->dst)));

	payload_len = ntohs(ip_hdr->len) -
 801071a:	888b      	ldrh	r3, [r1, #4]
 801071c:	0a1c      	lsrs	r4, r3, #8
 801071e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8010722:	b2a4      	uxth	r4, r4
	return pkt->ipv6_ext_len;
 8010724:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8010728:	1ae4      	subs	r4, r4, r3
 801072a:	b2a4      	uxth	r4, r4
		net_pkt_ipv6_ext_len(pkt) - NET_ICMPH_LEN;
 801072c:	3c04      	subs	r4, #4
	payload_len = ntohs(ip_hdr->len) -
 801072e:	b224      	sxth	r4, r4
	if (payload_len < NET_ICMPV6_UNUSED_LEN) {
 8010730:	2c03      	cmp	r4, #3
 8010732:	dd4c      	ble.n	80107ce <icmpv6_handle_echo_request+0xba>
 8010734:	460e      	mov	r6, r1
		goto drop;
	}

	reply = net_pkt_alloc_with_buffer(net_pkt_iface(pkt), payload_len,
					  AF_INET6, IPPROTO_ICMPV6,
					  PKT_WAIT_TIME);
 8010736:	f242 7210 	movw	r2, #10000	; 0x2710
 801073a:	2300      	movs	r3, #0
	reply = net_pkt_alloc_with_buffer(net_pkt_iface(pkt), payload_len,
 801073c:	e9cd 2300 	strd	r2, r3, [sp]
 8010740:	233a      	movs	r3, #58	; 0x3a
 8010742:	2202      	movs	r2, #2
 8010744:	4621      	mov	r1, r4
 8010746:	6980      	ldr	r0, [r0, #24]
 8010748:	f7ff fa1c 	bl	800fb84 <net_pkt_alloc_with_buffer>
	if (!reply) {
 801074c:	4607      	mov	r7, r0
 801074e:	2800      	cmp	r0, #0
 8010750:	d039      	beq.n	80107c6 <icmpv6_handle_echo_request+0xb2>
	return addr->s6_addr[0] == 0xFF;
 8010752:	7e33      	ldrb	r3, [r6, #24]
		NET_DBG("DROP: No buffer");
		goto drop;
	}

	if (net_ipv6_is_addr_mcast((struct in6_addr *)ip_hdr->dst)) {
 8010754:	2bff      	cmp	r3, #255	; 0xff
 8010756:	d02f      	beq.n	80107b8 <icmpv6_handle_echo_request+0xa4>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
						  (struct in6_addr *)ip_hdr->dst);
	} else {
		src = (struct in6_addr *)ip_hdr->dst;
 8010758:	f106 0118 	add.w	r1, r6, #24

	/* We must not set the destination ll address here but trust
	 * that it is set properly using a value from neighbor cache.
	 * Same for source as it points to original pkt ll src address.
	 */
	net_pkt_lladdr_dst(reply)->addr = NULL;
 801075c:	2300      	movs	r3, #0
 801075e:	63fb      	str	r3, [r7, #60]	; 0x3c
	net_pkt_lladdr_src(reply)->addr = NULL;
 8010760:	637b      	str	r3, [r7, #52]	; 0x34

	if (net_ipv6_create(reply, src, (struct in6_addr *)ip_hdr->src)) {
 8010762:	f106 0208 	add.w	r2, r6, #8
 8010766:	4638      	mov	r0, r7
 8010768:	f00a fc95 	bl	801b096 <net_ipv6_create>
 801076c:	bb58      	cbnz	r0, 80107c6 <icmpv6_handle_echo_request+0xb2>
		NET_DBG("DROP: wrong buffer");
		goto drop;
	}

	if (net_icmpv6_create(reply, NET_ICMPV6_ECHO_REPLY, 0) ||
 801076e:	2200      	movs	r2, #0
 8010770:	2181      	movs	r1, #129	; 0x81
 8010772:	4638      	mov	r0, r7
 8010774:	f00a fbfe 	bl	801af74 <net_icmpv6_create>
 8010778:	bb28      	cbnz	r0, 80107c6 <icmpv6_handle_echo_request+0xb2>
	    net_pkt_copy(reply, pkt, payload_len)) {
 801077a:	4622      	mov	r2, r4
 801077c:	4629      	mov	r1, r5
 801077e:	4638      	mov	r0, r7
 8010780:	f009 ff1c 	bl	801a5bc <net_pkt_copy>
	if (net_icmpv6_create(reply, NET_ICMPV6_ECHO_REPLY, 0) ||
 8010784:	b9f8      	cbnz	r0, 80107c6 <icmpv6_handle_echo_request+0xb2>
		NET_DBG("DROP: wrong buffer");
		goto drop;
	}

	net_pkt_cursor_init(reply);
 8010786:	4638      	mov	r0, r7
 8010788:	f009 fe67 	bl	801a45a <net_pkt_cursor_init>
	net_ipv6_finalize(reply, IPPROTO_ICMPV6);
 801078c:	213a      	movs	r1, #58	; 0x3a
 801078e:	4638      	mov	r0, r7
 8010790:	f00a fcc0 	bl	801b114 <net_ipv6_finalize>

	NET_DBG("Sending Echo Reply from %s to %s",
		log_strdup(net_sprint_ipv6_addr(src)),
		log_strdup(net_sprint_ipv6_addr(&ip_hdr->src)));

	if (net_send_data(reply) < 0) {
 8010794:	4638      	mov	r0, r7
 8010796:	f7fb feed 	bl	800c574 <net_send_data>
 801079a:	2800      	cmp	r0, #0
 801079c:	db13      	blt.n	80107c6 <icmpv6_handle_echo_request+0xb2>
	return pkt->iface;
 801079e:	69ba      	ldr	r2, [r7, #24]
	UPDATE_STAT(iface, stats.icmp.sent++);
 80107a0:	4910      	ldr	r1, [pc, #64]	; (80107e4 <icmpv6_handle_echo_request+0xd0>)
 80107a2:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 80107a4:	3301      	adds	r3, #1
 80107a6:	648b      	str	r3, [r1, #72]	; 0x48
 80107a8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80107aa:	3301      	adds	r3, #1
 80107ac:	6513      	str	r3, [r2, #80]	; 0x50
		goto drop;
	}

	net_stats_update_icmp_sent(net_pkt_iface(reply));

	net_pkt_unref(pkt);
 80107ae:	4628      	mov	r0, r5
 80107b0:	f009 fdf2 	bl	801a398 <net_pkt_unref>

	return NET_OK;
 80107b4:	2000      	movs	r0, #0
 80107b6:	e013      	b.n	80107e0 <icmpv6_handle_echo_request+0xcc>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
 80107b8:	f106 0118 	add.w	r1, r6, #24
 80107bc:	69a8      	ldr	r0, [r5, #24]
 80107be:	f7fd ff79 	bl	800e6b4 <net_if_ipv6_select_src_addr>
 80107c2:	4601      	mov	r1, r0
 80107c4:	e7ca      	b.n	801075c <icmpv6_handle_echo_request+0x48>

drop:
	if (reply) {
 80107c6:	b117      	cbz	r7, 80107ce <icmpv6_handle_echo_request+0xba>
		net_pkt_unref(reply);
 80107c8:	4638      	mov	r0, r7
 80107ca:	f009 fde5 	bl	801a398 <net_pkt_unref>
 80107ce:	69aa      	ldr	r2, [r5, #24]
	UPDATE_STAT(iface, stats.icmp.drop++);
 80107d0:	4904      	ldr	r1, [pc, #16]	; (80107e4 <icmpv6_handle_echo_request+0xd0>)
 80107d2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80107d4:	3301      	adds	r3, #1
 80107d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80107d8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80107da:	3301      	adds	r3, #1
 80107dc:	6553      	str	r3, [r2, #84]	; 0x54
	}

	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
 80107de:	2002      	movs	r0, #2
}
 80107e0:	b003      	add	sp, #12
 80107e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80107e4:	20002a58 	.word	0x20002a58

080107e8 <net_icmpv6_send_error>:

int net_icmpv6_send_error(struct net_pkt *orig, uint8_t type, uint8_t code,
			  uint32_t param)
{
 80107e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107ec:	b086      	sub	sp, #24
 80107ee:	4605      	mov	r5, r0
 80107f0:	460e      	mov	r6, r1
 80107f2:	4617      	mov	r7, r2
 80107f4:	4698      	mov	r8, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 80107f6:	2300      	movs	r3, #0
 80107f8:	9304      	str	r3, [sp, #16]
 80107fa:	2328      	movs	r3, #40	; 0x28
 80107fc:	9305      	str	r3, [sp, #20]
	const struct in6_addr *src;
	struct net_pkt *pkt;
	size_t copy_len;
	int ret;

	net_pkt_cursor_init(orig);
 80107fe:	f009 fe2c 	bl	801a45a <net_pkt_cursor_init>

	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(orig, &ipv6_access);
 8010802:	a904      	add	r1, sp, #16
 8010804:	4628      	mov	r0, r5
 8010806:	f7ff f9e1 	bl	800fbcc <net_pkt_get_data>
	if (!ip_hdr) {
 801080a:	2800      	cmp	r0, #0
 801080c:	f000 80db 	beq.w	80109c6 <net_icmpv6_send_error+0x1de>
 8010810:	4681      	mov	r9, r0
		goto drop_no_pkt;
	}

	if (ip_hdr->nexthdr == IPPROTO_ICMPV6) {
 8010812:	7983      	ldrb	r3, [r0, #6]
 8010814:	2b3a      	cmp	r3, #58	; 0x3a
 8010816:	d008      	beq.n	801082a <net_icmpv6_send_error+0x42>
		}

		net_pkt_cursor_init(orig);
	}

	if (ip_hdr->nexthdr == IPPROTO_UDP) {
 8010818:	f899 3006 	ldrb.w	r3, [r9, #6]
 801081c:	2b11      	cmp	r3, #17
 801081e:	d07e      	beq.n	801091e <net_icmpv6_send_error+0x136>
		copy_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_udp_hdr);
	} else if (ip_hdr->nexthdr == IPPROTO_TCP) {
 8010820:	2b06      	cmp	r3, #6
 8010822:	d07e      	beq.n	8010922 <net_icmpv6_send_error+0x13a>
	return net_buf_frags_len(pkt->frags);
 8010824:	68ac      	ldr	r4, [r5, #8]
	size_t bytes = 0;
 8010826:	2000      	movs	r0, #0
	while (buf) {
 8010828:	e01a      	b.n	8010860 <net_icmpv6_send_error+0x78>
		NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv6_access,
 801082a:	2300      	movs	r3, #0
 801082c:	9302      	str	r3, [sp, #8]
 801082e:	2304      	movs	r3, #4
 8010830:	9303      	str	r3, [sp, #12]
	return net_pkt_skip(pkt, access->size);
 8010832:	9905      	ldr	r1, [sp, #20]
 8010834:	4628      	mov	r0, r5
 8010836:	f009 fe86 	bl	801a546 <net_pkt_skip>
		icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(
 801083a:	a902      	add	r1, sp, #8
 801083c:	4628      	mov	r0, r5
 801083e:	f7ff f9c5 	bl	800fbcc <net_pkt_get_data>
		if (!icmp_hdr || icmp_hdr->code < 128) {
 8010842:	b118      	cbz	r0, 801084c <net_icmpv6_send_error+0x64>
 8010844:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010848:	2b00      	cmp	r3, #0
 801084a:	db02      	blt.n	8010852 <net_icmpv6_send_error+0x6a>
			err = -EINVAL;
 801084c:	f06f 0415 	mvn.w	r4, #21
 8010850:	e059      	b.n	8010906 <net_icmpv6_send_error+0x11e>
		net_pkt_cursor_init(orig);
 8010852:	4628      	mov	r0, r5
 8010854:	f009 fe01 	bl	801a45a <net_pkt_cursor_init>
 8010858:	e7de      	b.n	8010818 <net_icmpv6_send_error+0x30>
		bytes += buf->len;
 801085a:	89a3      	ldrh	r3, [r4, #12]
 801085c:	4418      	add	r0, r3
		buf = buf->frags;
 801085e:	6824      	ldr	r4, [r4, #0]
	while (buf) {
 8010860:	2c00      	cmp	r4, #0
 8010862:	d1fa      	bne.n	801085a <net_icmpv6_send_error+0x72>
	} else {
		copy_len = net_pkt_get_len(orig);
	}

	pkt = net_pkt_alloc_with_buffer(net_pkt_iface(orig),
					net_pkt_lladdr_src(orig)->len * 2 +
 8010864:	f895 1038 	ldrb.w	r1, [r5, #56]	; 0x38
 8010868:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	pkt = net_pkt_alloc_with_buffer(net_pkt_iface(orig),
 801086c:	f242 7210 	movw	r2, #10000	; 0x2710
 8010870:	2300      	movs	r3, #0
 8010872:	e9cd 2300 	strd	r2, r3, [sp]
 8010876:	233a      	movs	r3, #58	; 0x3a
 8010878:	2202      	movs	r2, #2
 801087a:	3104      	adds	r1, #4
 801087c:	69a8      	ldr	r0, [r5, #24]
 801087e:	f7ff f981 	bl	800fb84 <net_pkt_alloc_with_buffer>
					copy_len + NET_ICMPV6_UNUSED_LEN,
					AF_INET6, IPPROTO_ICMPV6,
					PKT_WAIT_TIME);
	if (!pkt) {
 8010882:	4682      	mov	sl, r0
 8010884:	2800      	cmp	r0, #0
 8010886:	f000 80a1 	beq.w	80109cc <net_icmpv6_send_error+0x1e4>
	 * as the link address will be set in the pkt when the packet is
	 * constructed in L2. So basically all this for just to create some
	 * extra space for link addresses so that we can set the lladdr
	 * pointers in net_pkt.
	 */
	ret = net_pkt_write(pkt, net_pkt_lladdr_src(orig)->addr,
 801088a:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
 801088e:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8010890:	f009 ff96 	bl	801a7c0 <net_pkt_write>
			    net_pkt_lladdr_src(orig)->len);
	if (ret < 0) {
 8010894:	1e04      	subs	r4, r0, #0
 8010896:	db33      	blt.n	8010900 <net_icmpv6_send_error+0x118>
		err = ret;
		goto drop;
	}

	net_pkt_lladdr_dst(pkt)->addr = pkt->buffer->data;
 8010898:	f8da 3008 	ldr.w	r3, [sl, #8]
 801089c:	689b      	ldr	r3, [r3, #8]
 801089e:	f8ca 303c 	str.w	r3, [sl, #60]	; 0x3c

	ret = net_pkt_write(pkt, net_pkt_lladdr_dst(orig)->addr,
 80108a2:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
 80108a6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80108a8:	4650      	mov	r0, sl
 80108aa:	f009 ff89 	bl	801a7c0 <net_pkt_write>
			    net_pkt_lladdr_dst(orig)->len);
	if (ret < 0) {
 80108ae:	1e04      	subs	r4, r0, #0
 80108b0:	db26      	blt.n	8010900 <net_icmpv6_send_error+0x118>
		err = ret;
		goto drop;
	}

	net_buf_pull_mem(pkt->buffer, net_pkt_lladdr_dst(orig)->len);
 80108b2:	f8da 0008 	ldr.w	r0, [sl, #8]
	return net_buf_simple_pull_mem(&buf->b, len);
 80108b6:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
 80108ba:	3008      	adds	r0, #8
 80108bc:	f007 ff7d 	bl	80187ba <net_buf_simple_pull_mem>

	net_pkt_lladdr_src(pkt)->addr = pkt->buffer->data;
 80108c0:	f8da 0008 	ldr.w	r0, [sl, #8]
 80108c4:	f850 3f08 	ldr.w	r3, [r0, #8]!
 80108c8:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
 80108cc:	f895 1038 	ldrb.w	r1, [r5, #56]	; 0x38
 80108d0:	f007 ff73 	bl	80187ba <net_buf_simple_pull_mem>

	net_buf_pull_mem(pkt->buffer, net_pkt_lladdr_src(orig)->len);

	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_dst(orig)->len;
 80108d4:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 80108d8:	f88a 3038 	strb.w	r3, [sl, #56]	; 0x38
	net_pkt_lladdr_dst(pkt)->len = net_pkt_lladdr_src(orig)->len;
 80108dc:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 80108e0:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
 80108e4:	f899 3018 	ldrb.w	r3, [r9, #24]

	if (net_ipv6_is_addr_mcast((struct in6_addr *)ip_hdr->dst)) {
 80108e8:	2bff      	cmp	r3, #255	; 0xff
 80108ea:	d01c      	beq.n	8010926 <net_icmpv6_send_error+0x13e>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
						  (struct in6_addr *)ip_hdr->dst);
	} else {
		src = (struct in6_addr *)ip_hdr->dst;
 80108ec:	f109 0118 	add.w	r1, r9, #24
	}

	if (net_ipv6_create(pkt, src, (struct in6_addr *)ip_hdr->src) ||
 80108f0:	f109 0208 	add.w	r2, r9, #8
 80108f4:	4650      	mov	r0, sl
 80108f6:	f00a fbce 	bl	801b096 <net_ipv6_create>
 80108fa:	b1e0      	cbz	r0, 8010936 <net_icmpv6_send_error+0x14e>
	int err = -EIO;
 80108fc:	f06f 0404 	mvn.w	r4, #4
		net_stats_update_icmp_sent(net_pkt_iface(pkt));
		return 0;
	}

drop:
	net_pkt_unref(pkt);
 8010900:	4650      	mov	r0, sl
 8010902:	f009 fd49 	bl	801a398 <net_pkt_unref>
	return pkt->iface;
 8010906:	69aa      	ldr	r2, [r5, #24]
 8010908:	4932      	ldr	r1, [pc, #200]	; (80109d4 <net_icmpv6_send_error+0x1ec>)
 801090a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 801090c:	3301      	adds	r3, #1
 801090e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8010910:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8010912:	3301      	adds	r3, #1
 8010914:	6553      	str	r3, [r2, #84]	; 0x54

drop_no_pkt:
	net_stats_update_icmp_drop(net_pkt_iface(orig));

	return err;
}
 8010916:	4620      	mov	r0, r4
 8010918:	b006      	add	sp, #24
 801091a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		copy_len = sizeof(struct net_ipv6_hdr) +
 801091e:	2030      	movs	r0, #48	; 0x30
 8010920:	e7a0      	b.n	8010864 <net_icmpv6_send_error+0x7c>
		copy_len = sizeof(struct net_ipv6_hdr) +
 8010922:	203c      	movs	r0, #60	; 0x3c
 8010924:	e79e      	b.n	8010864 <net_icmpv6_send_error+0x7c>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
 8010926:	f109 0118 	add.w	r1, r9, #24
 801092a:	f8da 0018 	ldr.w	r0, [sl, #24]
 801092e:	f7fd fec1 	bl	800e6b4 <net_if_ipv6_select_src_addr>
 8010932:	4601      	mov	r1, r0
 8010934:	e7dc      	b.n	80108f0 <net_icmpv6_send_error+0x108>
	    net_icmpv6_create(pkt, type, code)) {
 8010936:	463a      	mov	r2, r7
 8010938:	4631      	mov	r1, r6
 801093a:	4650      	mov	r0, sl
 801093c:	f00a fb1a 	bl	801af74 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, (struct in6_addr *)ip_hdr->src) ||
 8010940:	2800      	cmp	r0, #0
 8010942:	d1db      	bne.n	80108fc <net_icmpv6_send_error+0x114>
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
 8010944:	2e04      	cmp	r6, #4
 8010946:	d029      	beq.n	801099c <net_icmpv6_send_error+0x1b4>
		err = net_pkt_memset(pkt, 0, NET_ICMPV6_UNUSED_LEN);
 8010948:	2204      	movs	r2, #4
 801094a:	2100      	movs	r1, #0
 801094c:	4650      	mov	r0, sl
 801094e:	f009 fe06 	bl	801a55e <net_pkt_memset>
 8010952:	4604      	mov	r4, r0
	copy_len = net_pkt_available_buffer(pkt);
 8010954:	4650      	mov	r0, sl
 8010956:	f009 fd54 	bl	801a402 <net_pkt_available_buffer>
 801095a:	4602      	mov	r2, r0
	if (err || net_pkt_copy(pkt, orig, copy_len)) {
 801095c:	2c00      	cmp	r4, #0
 801095e:	d1cf      	bne.n	8010900 <net_icmpv6_send_error+0x118>
 8010960:	4629      	mov	r1, r5
 8010962:	4650      	mov	r0, sl
 8010964:	f009 fe2a 	bl	801a5bc <net_pkt_copy>
 8010968:	4606      	mov	r6, r0
 801096a:	2800      	cmp	r0, #0
 801096c:	d1c8      	bne.n	8010900 <net_icmpv6_send_error+0x118>
	net_pkt_cursor_init(pkt);
 801096e:	4650      	mov	r0, sl
 8010970:	f009 fd73 	bl	801a45a <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
 8010974:	213a      	movs	r1, #58	; 0x3a
 8010976:	4650      	mov	r0, sl
 8010978:	f00a fbcc 	bl	801b114 <net_ipv6_finalize>
	if (net_send_data(pkt) >= 0) {
 801097c:	4650      	mov	r0, sl
 801097e:	f7fb fdf9 	bl	800c574 <net_send_data>
 8010982:	2800      	cmp	r0, #0
 8010984:	dbbc      	blt.n	8010900 <net_icmpv6_send_error+0x118>
 8010986:	f8da 2018 	ldr.w	r2, [sl, #24]
	UPDATE_STAT(iface, stats.icmp.sent++);
 801098a:	4912      	ldr	r1, [pc, #72]	; (80109d4 <net_icmpv6_send_error+0x1ec>)
 801098c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 801098e:	3301      	adds	r3, #1
 8010990:	648b      	str	r3, [r1, #72]	; 0x48
 8010992:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8010994:	3301      	adds	r3, #1
 8010996:	6513      	str	r3, [r2, #80]	; 0x50
		return 0;
 8010998:	4634      	mov	r4, r6
 801099a:	e7bc      	b.n	8010916 <net_icmpv6_send_error+0x12e>
	uint32_t data_be32 = htonl(data);
 801099c:	ea4f 2318 	mov.w	r3, r8, lsr #8
 80109a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80109a4:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 80109a8:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80109ac:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 80109b0:	4313      	orrs	r3, r2
 80109b2:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80109b6:	9302      	str	r3, [sp, #8]
	return net_pkt_write(pkt, &data_be32, sizeof(uint32_t));
 80109b8:	2204      	movs	r2, #4
 80109ba:	a902      	add	r1, sp, #8
 80109bc:	4650      	mov	r0, sl
 80109be:	f009 feff 	bl	801a7c0 <net_pkt_write>
 80109c2:	4604      	mov	r4, r0
 80109c4:	e7c6      	b.n	8010954 <net_icmpv6_send_error+0x16c>
	int err = -EIO;
 80109c6:	f06f 0404 	mvn.w	r4, #4
 80109ca:	e79c      	b.n	8010906 <net_icmpv6_send_error+0x11e>
		err = -ENOMEM;
 80109cc:	f06f 040b 	mvn.w	r4, #11
 80109d0:	e799      	b.n	8010906 <net_icmpv6_send_error+0x11e>
 80109d2:	bf00      	nop
 80109d4:	20002a58 	.word	0x20002a58

080109d8 <net_icmpv6_input>:
	return ret;
}

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  struct net_ipv6_hdr *ip_hdr)
{
 80109d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109da:	b083      	sub	sp, #12
 80109dc:	4606      	mov	r6, r0
 80109de:	460f      	mov	r7, r1
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 80109e0:	2300      	movs	r3, #0
 80109e2:	9300      	str	r3, [sp, #0]
 80109e4:	2304      	movs	r3, #4
 80109e6:	9301      	str	r3, [sp, #4]
					      struct net_icmp_hdr);
	struct net_icmp_hdr *icmp_hdr;
	struct net_icmpv6_handler *cb;

	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 80109e8:	4669      	mov	r1, sp
 80109ea:	f7ff f8ef 	bl	800fbcc <net_pkt_get_data>
	if (!icmp_hdr) {
 80109ee:	2800      	cmp	r0, #0
 80109f0:	d033      	beq.n	8010a5a <net_icmpv6_input+0x82>
 80109f2:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
 80109f4:	213a      	movs	r1, #58	; 0x3a
 80109f6:	4630      	mov	r0, r6
 80109f8:	f009 fa3b 	bl	8019e72 <net_calc_chksum>
		NET_DBG("DROP: NULL ICMPv6 header");
		return NET_DROP;
	}

	if (net_calc_chksum_icmpv6(pkt) != 0U) {
 80109fc:	bb10      	cbnz	r0, 8010a44 <net_icmpv6_input+0x6c>
	return net_pkt_skip(pkt, access->size);
 80109fe:	9901      	ldr	r1, [sp, #4]
 8010a00:	4630      	mov	r0, r6
 8010a02:	f009 fda0 	bl	801a546 <net_pkt_skip>
	return pkt->iface;
 8010a06:	69b2      	ldr	r2, [r6, #24]
	UPDATE_STAT(iface, stats.icmp.recv++);
 8010a08:	4915      	ldr	r1, [pc, #84]	; (8010a60 <net_icmpv6_input+0x88>)
 8010a0a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8010a0c:	3301      	adds	r3, #1
 8010a0e:	644b      	str	r3, [r1, #68]	; 0x44
 8010a10:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8010a12:	3301      	adds	r3, #1
 8010a14:	64d3      	str	r3, [r2, #76]	; 0x4c
	return list->head;
 8010a16:	4b13      	ldr	r3, [pc, #76]	; (8010a64 <net_icmpv6_input+0x8c>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	e002      	b.n	8010a22 <net_icmpv6_input+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8010a1c:	b10b      	cbz	r3, 8010a22 <net_icmpv6_input+0x4a>
	return node->next;
 8010a1e:	681b      	ldr	r3, [r3, #0]
		net_icmpv6_type2str(icmp_hdr->type),
		icmp_hdr->type, icmp_hdr->code);

	net_stats_update_icmp_recv(net_pkt_iface(pkt));

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
 8010a20:	b183      	cbz	r3, 8010a44 <net_icmpv6_input+0x6c>
 8010a22:	b17b      	cbz	r3, 8010a44 <net_icmpv6_input+0x6c>
		if (cb->type == icmp_hdr->type &&
 8010a24:	7a1c      	ldrb	r4, [r3, #8]
 8010a26:	782a      	ldrb	r2, [r5, #0]
 8010a28:	4294      	cmp	r4, r2
 8010a2a:	d1f7      	bne.n	8010a1c <net_icmpv6_input+0x44>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
 8010a2c:	7a5a      	ldrb	r2, [r3, #9]
 8010a2e:	7868      	ldrb	r0, [r5, #1]
		if (cb->type == icmp_hdr->type &&
 8010a30:	4282      	cmp	r2, r0
 8010a32:	d001      	beq.n	8010a38 <net_icmpv6_input+0x60>
		    (cb->code == icmp_hdr->code || cb->code == 0U)) {
 8010a34:	2a00      	cmp	r2, #0
 8010a36:	d1f1      	bne.n	8010a1c <net_icmpv6_input+0x44>
			return cb->handler(pkt, ip_hdr, icmp_hdr);
 8010a38:	685b      	ldr	r3, [r3, #4]
 8010a3a:	462a      	mov	r2, r5
 8010a3c:	4639      	mov	r1, r7
 8010a3e:	4630      	mov	r0, r6
 8010a40:	4798      	blx	r3
 8010a42:	e008      	b.n	8010a56 <net_icmpv6_input+0x7e>
 8010a44:	69b2      	ldr	r2, [r6, #24]
	UPDATE_STAT(iface, stats.icmp.drop++);
 8010a46:	4906      	ldr	r1, [pc, #24]	; (8010a60 <net_icmpv6_input+0x88>)
 8010a48:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8010a4a:	3301      	adds	r3, #1
 8010a4c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8010a4e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8010a50:	3301      	adds	r3, #1
 8010a52:	6553      	str	r3, [r2, #84]	; 0x54
		}
	}
drop:
	net_stats_update_icmp_drop(net_pkt_iface(pkt));

	return NET_DROP;
 8010a54:	2002      	movs	r0, #2
}
 8010a56:	b003      	add	sp, #12
 8010a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NET_DROP;
 8010a5a:	2002      	movs	r0, #2
 8010a5c:	e7fb      	b.n	8010a56 <net_icmpv6_input+0x7e>
 8010a5e:	bf00      	nop
 8010a60:	20002a58 	.word	0x20002a58
 8010a64:	20003458 	.word	0x20003458

08010a68 <net_icmpv6_init>:
	.code = 0,
	.handler = icmpv6_handle_echo_request,
};

void net_icmpv6_init(void)
{
 8010a68:	b508      	push	{r3, lr}
	net_icmpv6_register_handler(&echo_request_handler);
 8010a6a:	4802      	ldr	r0, [pc, #8]	; (8010a74 <net_icmpv6_init+0xc>)
 8010a6c:	f7ff fe46 	bl	80106fc <net_icmpv6_register_handler>
}
 8010a70:	bd08      	pop	{r3, pc}
 8010a72:	bf00      	nop
 8010a74:	20000818 	.word	0x20000818

08010a78 <net_nbr_link>:
int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 const struct net_linkaddr *lladdr)
{
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
 8010a78:	7843      	ldrb	r3, [r0, #1]
 8010a7a:	2bff      	cmp	r3, #255	; 0xff
 8010a7c:	d153      	bne.n	8010b26 <net_nbr_link+0xae>
{
 8010a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a82:	4607      	mov	r7, r0
 8010a84:	4688      	mov	r8, r1
 8010a86:	4616      	mov	r6, r2
	int i, avail = -1;
 8010a88:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 8010a8c:	2400      	movs	r4, #0
 8010a8e:	e006      	b.n	8010a9e <net_nbr_link+0x26>
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
			avail = i;
		}

		if (net_neighbor_lladdr[i].ref &&
 8010a90:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8010a94:	4b27      	ldr	r3, [pc, #156]	; (8010b34 <net_nbr_link+0xbc>)
 8010a96:	4413      	add	r3, r2
 8010a98:	7a1b      	ldrb	r3, [r3, #8]
 8010a9a:	b96b      	cbnz	r3, 8010ab8 <net_nbr_link+0x40>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 8010a9c:	3401      	adds	r4, #1
 8010a9e:	2c07      	cmp	r4, #7
 8010aa0:	dc1f      	bgt.n	8010ae2 <net_nbr_link+0x6a>
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
 8010aa2:	2d00      	cmp	r5, #0
 8010aa4:	daf4      	bge.n	8010a90 <net_nbr_link+0x18>
 8010aa6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8010aaa:	4b22      	ldr	r3, [pc, #136]	; (8010b34 <net_nbr_link+0xbc>)
 8010aac:	4413      	add	r3, r2
 8010aae:	7a1b      	ldrb	r3, [r3, #8]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d1ed      	bne.n	8010a90 <net_nbr_link+0x18>
			avail = i;
 8010ab4:	4625      	mov	r5, r4
 8010ab6:	e7eb      	b.n	8010a90 <net_nbr_link+0x18>
		    !memcmp(lladdr->addr,
			    net_neighbor_lladdr[i].lladdr.addr,
 8010ab8:	491e      	ldr	r1, [pc, #120]	; (8010b34 <net_nbr_link+0xbc>)
 8010aba:	4411      	add	r1, r2
		    !memcmp(lladdr->addr,
 8010abc:	7932      	ldrb	r2, [r6, #4]
 8010abe:	3102      	adds	r1, #2
 8010ac0:	6830      	ldr	r0, [r6, #0]
 8010ac2:	f00b feab 	bl	801c81c <memcmp>
		if (net_neighbor_lladdr[i].ref &&
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	2800      	cmp	r0, #0
 8010aca:	d1e7      	bne.n	8010a9c <net_nbr_link+0x24>
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
 8010acc:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 8010ad0:	4a18      	ldr	r2, [pc, #96]	; (8010b34 <net_nbr_link+0xbc>)
 8010ad2:	440a      	add	r2, r1
 8010ad4:	7a11      	ldrb	r1, [r2, #8]
 8010ad6:	3101      	adds	r1, #1
 8010ad8:	7211      	strb	r1, [r2, #8]

			nbr->idx = i;
 8010ada:	707c      	strb	r4, [r7, #1]
			nbr->iface = iface;
 8010adc:	f8c7 8008 	str.w	r8, [r7, #8]

			return 0;
 8010ae0:	e01e      	b.n	8010b20 <net_nbr_link+0xa8>
		}
	}

	if (avail < 0) {
 8010ae2:	2d00      	cmp	r5, #0
 8010ae4:	db23      	blt.n	8010b2e <net_nbr_link+0xb6>
	}

	/* There was no existing entry in the lladdr cache,
	 * so allocate one for this lladdr.
	 */
	net_neighbor_lladdr[avail].ref++;
 8010ae6:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8010aea:	4812      	ldr	r0, [pc, #72]	; (8010b34 <net_nbr_link+0xbc>)
 8010aec:	4418      	add	r0, r3
 8010aee:	7a03      	ldrb	r3, [r0, #8]
 8010af0:	3301      	adds	r3, #1
 8010af2:	7203      	strb	r3, [r0, #8]
	nbr->idx = avail;
 8010af4:	707d      	strb	r5, [r7, #1]

	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
 8010af6:	6831      	ldr	r1, [r6, #0]
 8010af8:	7932      	ldrb	r2, [r6, #4]
	if (!lladdr_store || !new_addr) {
 8010afa:	b130      	cbz	r0, 8010b0a <net_nbr_link+0x92>
 8010afc:	b129      	cbz	r1, 8010b0a <net_nbr_link+0x92>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
 8010afe:	2a06      	cmp	r2, #6
 8010b00:	d803      	bhi.n	8010b0a <net_nbr_link+0x92>
	lladdr_store->len = new_len;
 8010b02:	7042      	strb	r2, [r0, #1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8010b04:	3002      	adds	r0, #2
 8010b06:	f00b fe97 	bl	801c838 <memcpy>
			 lladdr->len);
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
 8010b0a:	7931      	ldrb	r1, [r6, #4]
 8010b0c:	4b09      	ldr	r3, [pc, #36]	; (8010b34 <net_nbr_link+0xbc>)
 8010b0e:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8010b12:	195a      	adds	r2, r3, r5
 8010b14:	7051      	strb	r1, [r2, #1]
	net_neighbor_lladdr[avail].lladdr.type = lladdr->type;
 8010b16:	7972      	ldrb	r2, [r6, #5]
 8010b18:	555a      	strb	r2, [r3, r5]

	nbr->iface = iface;
 8010b1a:	f8c7 8008 	str.w	r8, [r7, #8]

	return 0;
 8010b1e:	2300      	movs	r3, #0
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EALREADY;
 8010b26:	f06f 0377 	mvn.w	r3, #119	; 0x77
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	4770      	bx	lr
		return -ENOENT;
 8010b2e:	f06f 0301 	mvn.w	r3, #1
 8010b32:	e7f5      	b.n	8010b20 <net_nbr_link+0xa8>
 8010b34:	20003460 	.word	0x20003460

08010b38 <net_nbr_unlink>:

int net_nbr_unlink(struct net_nbr *nbr, struct net_linkaddr *lladdr)
{
	ARG_UNUSED(lladdr);

	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
 8010b38:	7843      	ldrb	r3, [r0, #1]
 8010b3a:	2bff      	cmp	r3, #255	; 0xff
 8010b3c:	d019      	beq.n	8010b72 <net_nbr_unlink+0x3a>
	}

	NET_ASSERT(nbr->idx < CONFIG_NET_IPV6_MAX_NEIGHBORS);
	NET_ASSERT(net_neighbor_lladdr[nbr->idx].ref > 0);

	net_neighbor_lladdr[nbr->idx].ref--;
 8010b3e:	4a0e      	ldr	r2, [pc, #56]	; (8010b78 <net_nbr_unlink+0x40>)
 8010b40:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8010b44:	4413      	add	r3, r2
 8010b46:	7a19      	ldrb	r1, [r3, #8]
 8010b48:	3901      	subs	r1, #1
 8010b4a:	7219      	strb	r1, [r3, #8]

	if (!net_neighbor_lladdr[nbr->idx].ref) {
 8010b4c:	7843      	ldrb	r3, [r0, #1]
 8010b4e:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 8010b52:	440a      	add	r2, r1
 8010b54:	7a12      	ldrb	r2, [r2, #8]
 8010b56:	b932      	cbnz	r2, 8010b66 <net_nbr_unlink+0x2e>
		(void)memset(net_neighbor_lladdr[nbr->idx].lladdr.addr, 0,
 8010b58:	460b      	mov	r3, r1
 8010b5a:	4a07      	ldr	r2, [pc, #28]	; (8010b78 <net_nbr_unlink+0x40>)
 8010b5c:	4413      	add	r3, r2
__ssp_bos_icheck3(memset, void *, int)
 8010b5e:	2200      	movs	r2, #0
 8010b60:	f8c3 2002 	str.w	r2, [r3, #2]
 8010b64:	80da      	strh	r2, [r3, #6]
			     sizeof(net_neighbor_lladdr[nbr->idx].lladdr.addr));
	}

	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
 8010b66:	23ff      	movs	r3, #255	; 0xff
 8010b68:	7043      	strb	r3, [r0, #1]
	nbr->iface = NULL;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	6083      	str	r3, [r0, #8]

	return 0;
 8010b6e:	4618      	mov	r0, r3
 8010b70:	4770      	bx	lr
		return -EALREADY;
 8010b72:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
 8010b76:	4770      	bx	lr
 8010b78:	20003460 	.word	0x20003460

08010b7c <net_nbr_get_lladdr>:
{
	NET_ASSERT(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
		   "idx %d >= max %d", idx,
		   CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
 8010b7c:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
 8010b80:	4b01      	ldr	r3, [pc, #4]	; (8010b88 <net_nbr_get_lladdr+0xc>)
 8010b82:	4418      	add	r0, r3
 8010b84:	4770      	bx	lr
 8010b86:	bf00      	nop
 8010b88:	20003460 	.word	0x20003460

08010b8c <net_ipv6_input>:
		return 0;
	}
}

enum net_verdict net_ipv6_input(struct net_pkt *pkt, bool is_loopback)
{
 8010b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b90:	b095      	sub	sp, #84	; 0x54
 8010b92:	4604      	mov	r4, r0
 8010b94:	4688      	mov	r8, r1
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 8010b96:	2500      	movs	r5, #0
 8010b98:	9512      	str	r5, [sp, #72]	; 0x48
 8010b9a:	2328      	movs	r3, #40	; 0x28
 8010b9c:	9313      	str	r3, [sp, #76]	; 0x4c
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 8010b9e:	ab10      	add	r3, sp, #64	; 0x40
 8010ba0:	930e      	str	r3, [sp, #56]	; 0x38
 8010ba2:	2308      	movs	r3, #8
 8010ba4:	930f      	str	r3, [sp, #60]	; 0x3c
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
 8010ba6:	ab09      	add	r3, sp, #36	; 0x24
 8010ba8:	9307      	str	r3, [sp, #28]
 8010baa:	2314      	movs	r3, #20
 8010bac:	9308      	str	r3, [sp, #32]
 8010bae:	6980      	ldr	r0, [r0, #24]
	struct net_if *pkt_iface = net_pkt_iface(pkt);
 8010bb0:	9006      	str	r0, [sp, #24]
	return net_buf_frags_len(pkt->frags);
 8010bb2:	68a3      	ldr	r3, [r4, #8]
	while (buf) {
 8010bb4:	b11b      	cbz	r3, 8010bbe <net_ipv6_input+0x32>
		bytes += buf->len;
 8010bb6:	899a      	ldrh	r2, [r3, #12]
 8010bb8:	4415      	add	r5, r2
		buf = buf->frags;
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	e7fa      	b.n	8010bb4 <net_ipv6_input+0x28>
	UPDATE_STAT(iface, stats.ipv6.recv++);
 8010bbe:	4aaa      	ldr	r2, [pc, #680]	; (8010e68 <net_ipv6_input+0x2dc>)
 8010bc0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	6253      	str	r3, [r2, #36]	; 0x24
 8010bc6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010bc8:	3301      	adds	r3, #1
 8010bca:	62c3      	str	r3, [r0, #44]	; 0x2c
	net_pkt_cursor_backup(pkt, &hdr_start);
#endif

	net_stats_update_ipv6_recv(pkt_iface);

	hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
 8010bcc:	a912      	add	r1, sp, #72	; 0x48
 8010bce:	4620      	mov	r0, r4
 8010bd0:	f7fe fffc 	bl	800fbcc <net_pkt_get_data>
	if (!hdr) {
 8010bd4:	4606      	mov	r6, r0
 8010bd6:	2800      	cmp	r0, #0
 8010bd8:	f000 8110 	beq.w	8010dfc <net_ipv6_input+0x270>
		NET_DBG("DROP: no buffer");
		goto drop;
	}

	pkt_len = ntohs(hdr->len) + sizeof(struct net_ipv6_hdr);
 8010bdc:	8883      	ldrh	r3, [r0, #4]
 8010bde:	0a1f      	lsrs	r7, r3, #8
 8010be0:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
 8010be4:	b2bf      	uxth	r7, r7
 8010be6:	f107 0128 	add.w	r1, r7, #40	; 0x28
	if (real_len < pkt_len) {
 8010bea:	42a9      	cmp	r1, r5
 8010bec:	f300 8106 	bgt.w	8010dfc <net_ipv6_input+0x270>
		NET_DBG("DROP: pkt len per hdr %d != pkt real len %d",
			pkt_len, real_len);
		goto drop;
	} else if (real_len > pkt_len) {
 8010bf0:	db09      	blt.n	8010c06 <net_ipv6_input+0x7a>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8010bf2:	68b3      	ldr	r3, [r6, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8010bf4:	b95b      	cbnz	r3, 8010c0e <net_ipv6_input+0x82>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8010bf6:	68f3      	ldr	r3, [r6, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8010bf8:	bbab      	cbnz	r3, 8010c66 <net_ipv6_input+0xda>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8010bfa:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8010bfc:	bbab      	cbnz	r3, 8010c6a <net_ipv6_input+0xde>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
 8010bfe:	6973      	ldr	r3, [r6, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8010c00:	b3ab      	cbz	r3, 8010c6e <net_ipv6_input+0xe2>
 8010c02:	2300      	movs	r3, #0
 8010c04:	e004      	b.n	8010c10 <net_ipv6_input+0x84>
		net_pkt_update_length(pkt, pkt_len);
 8010c06:	4620      	mov	r0, r4
 8010c08:	f009 fd27 	bl	801a65a <net_pkt_update_length>
 8010c0c:	e7f1      	b.n	8010bf2 <net_ipv6_input+0x66>
 8010c0e:	2300      	movs	r3, #0

	NET_DBG("IPv6 packet len %d received from %s to %s", pkt_len,
		log_strdup(net_sprint_ipv6_addr(&hdr->src)),
		log_strdup(net_sprint_ipv6_addr(&hdr->dst)));

	if (net_ipv6_is_addr_unspecified((struct in6_addr *)hdr->src)) {
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	f040 80f3 	bne.w	8010dfc <net_ipv6_input+0x270>
	return addr->s6_addr[0] == 0xFF;
 8010c16:	7a33      	ldrb	r3, [r6, #8]
		NET_DBG("DROP: src addr is %s", "unspecified");
		goto drop;
	}

	if (net_ipv6_is_addr_mcast((struct in6_addr *)hdr->src) ||
 8010c18:	2bff      	cmp	r3, #255	; 0xff
 8010c1a:	f000 80ef 	beq.w	8010dfc <net_ipv6_input+0x270>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 8010c1e:	7e33      	ldrb	r3, [r6, #24]
 8010c20:	2bff      	cmp	r3, #255	; 0xff
 8010c22:	d026      	beq.n	8010c72 <net_ipv6_input+0xe6>
 8010c24:	2200      	movs	r2, #0
 8010c26:	2a00      	cmp	r2, #0
 8010c28:	f040 80e8 	bne.w	8010dfc <net_ipv6_input+0x270>
	    net_ipv6_is_addr_mcast_scope((struct in6_addr *)hdr->dst, 0)) {
		NET_DBG("DROP: multicast packet");
		goto drop;
	}

	if (!is_loopback) {
 8010c2c:	f1b8 0f00 	cmp.w	r8, #0
 8010c30:	d167      	bne.n	8010d02 <net_ipv6_input+0x176>
		if (net_ipv6_is_addr_loopback((struct in6_addr *)hdr->dst) ||
 8010c32:	4632      	mov	r2, r6
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8010c34:	f852 1f18 	ldr.w	r1, [r2, #24]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8010c38:	bb09      	cbnz	r1, 8010c7e <net_ipv6_input+0xf2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8010c3a:	6851      	ldr	r1, [r2, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8010c3c:	2900      	cmp	r1, #0
 8010c3e:	d13c      	bne.n	8010cba <net_ipv6_input+0x12e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8010c40:	6891      	ldr	r1, [r2, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8010c42:	2900      	cmp	r1, #0
 8010c44:	d13b      	bne.n	8010cbe <net_ipv6_input+0x132>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
 8010c46:	68d1      	ldr	r1, [r2, #12]
 8010c48:	0a0a      	lsrs	r2, r1, #8
 8010c4a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8010c4e:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
 8010c52:	0208      	lsls	r0, r1, #8
 8010c54:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 8010c58:	4302      	orrs	r2, r0
 8010c5a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8010c5e:	2a01      	cmp	r2, #1
 8010c60:	d02f      	beq.n	8010cc2 <net_ipv6_input+0x136>
 8010c62:	2200      	movs	r2, #0
 8010c64:	e00c      	b.n	8010c80 <net_ipv6_input+0xf4>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8010c66:	2300      	movs	r3, #0
 8010c68:	e7d2      	b.n	8010c10 <net_ipv6_input+0x84>
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	e7d0      	b.n	8010c10 <net_ipv6_input+0x84>
 8010c6e:	2301      	movs	r3, #1
 8010c70:	e7ce      	b.n	8010c10 <net_ipv6_input+0x84>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 8010c72:	7e72      	ldrb	r2, [r6, #25]
 8010c74:	b10a      	cbz	r2, 8010c7a <net_ipv6_input+0xee>
 8010c76:	2200      	movs	r2, #0
 8010c78:	e7d5      	b.n	8010c26 <net_ipv6_input+0x9a>
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	e7d3      	b.n	8010c26 <net_ipv6_input+0x9a>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8010c7e:	2200      	movs	r2, #0
 8010c80:	2a00      	cmp	r2, #0
 8010c82:	f040 80bb 	bne.w	8010dfc <net_ipv6_input+0x270>
		    net_ipv6_is_addr_loopback((struct in6_addr *)hdr->src)) {
 8010c86:	4632      	mov	r2, r6
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8010c88:	f852 1f08 	ldr.w	r1, [r2, #8]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8010c8c:	b9d9      	cbnz	r1, 8010cc6 <net_ipv6_input+0x13a>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8010c8e:	6851      	ldr	r1, [r2, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8010c90:	2900      	cmp	r1, #0
 8010c92:	d16d      	bne.n	8010d70 <net_ipv6_input+0x1e4>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8010c94:	6891      	ldr	r1, [r2, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8010c96:	2900      	cmp	r1, #0
 8010c98:	d16c      	bne.n	8010d74 <net_ipv6_input+0x1e8>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
 8010c9a:	68d1      	ldr	r1, [r2, #12]
 8010c9c:	0a0a      	lsrs	r2, r1, #8
 8010c9e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8010ca2:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
 8010ca6:	0208      	lsls	r0, r1, #8
 8010ca8:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 8010cac:	4302      	orrs	r2, r0
 8010cae:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8010cb2:	2a01      	cmp	r2, #1
 8010cb4:	d060      	beq.n	8010d78 <net_ipv6_input+0x1ec>
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	e006      	b.n	8010cc8 <net_ipv6_input+0x13c>
 8010cba:	2200      	movs	r2, #0
 8010cbc:	e7e0      	b.n	8010c80 <net_ipv6_input+0xf4>
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	e7de      	b.n	8010c80 <net_ipv6_input+0xf4>
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	e7dc      	b.n	8010c80 <net_ipv6_input+0xf4>
 8010cc6:	2200      	movs	r2, #0
		if (net_ipv6_is_addr_loopback((struct in6_addr *)hdr->dst) ||
 8010cc8:	2a00      	cmp	r2, #0
 8010cca:	f040 8097 	bne.w	8010dfc <net_ipv6_input+0x270>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 8010cce:	2bff      	cmp	r3, #255	; 0xff
 8010cd0:	d054      	beq.n	8010d7c <net_ipv6_input+0x1f0>
 8010cd2:	2300      	movs	r3, #0
			NET_DBG("DROP: ::1 packet");
			goto drop;
		}

		if (net_ipv6_is_addr_mcast_iface((struct in6_addr *)hdr->dst) ||
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	f040 8091 	bne.w	8010dfc <net_ipv6_input+0x270>
		    (net_ipv6_is_addr_mcast_group(
 8010cda:	f7fe fc67 	bl	800f5ac <net_ipv6_unspecified_address>
	return UNALIGNED_GET(&addr->s6_addr16[1]) == group->s6_addr16[1] &&
 8010cde:	8b72      	ldrh	r2, [r6, #26]
 8010ce0:	8843      	ldrh	r3, [r0, #2]
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	d051      	beq.n	8010d8a <net_ipv6_input+0x1fe>
 8010ce6:	2300      	movs	r3, #0
		if (net_ipv6_is_addr_mcast_iface((struct in6_addr *)hdr->dst) ||
 8010ce8:	b15b      	cbz	r3, 8010d02 <net_ipv6_input+0x176>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 8010cea:	7e33      	ldrb	r3, [r6, #24]
 8010cec:	2bff      	cmp	r3, #255	; 0xff
 8010cee:	d06b      	beq.n	8010dc8 <net_ipv6_input+0x23c>
 8010cf0:	2200      	movs	r2, #0
			    (struct in6_addr *)hdr->dst,
			    net_ipv6_unspecified_address()) &&
 8010cf2:	2a00      	cmp	r2, #0
 8010cf4:	f040 8082 	bne.w	8010dfc <net_ipv6_input+0x270>
 8010cf8:	2bff      	cmp	r3, #255	; 0xff
 8010cfa:	d06c      	beq.n	8010dd6 <net_ipv6_input+0x24a>
 8010cfc:	2300      	movs	r3, #0
		     (net_ipv6_is_addr_mcast_site((struct in6_addr *)hdr->dst) ||
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d17c      	bne.n	8010dfc <net_ipv6_input+0x270>
			goto drop;
		}
	}

	/* Check extension headers */
	net_pkt_set_ipv6_next_hdr(pkt, hdr->nexthdr);
 8010d02:	79b3      	ldrb	r3, [r6, #6]
	pkt->ipv6_next_hdr = next_hdr;
 8010d04:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
	pkt->ipv6_ext_len = len;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
	pkt->ip_hdr_len = len;
 8010d0e:	2328      	movs	r3, #40	; 0x28
 8010d10:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
	return pkt->frags->data;
 8010d14:	68a3      	ldr	r3, [r4, #8]
 8010d16:	689b      	ldr	r3, [r3, #8]
	net_pkt_set_ipv6_ext_len(pkt, 0);
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));
	net_pkt_set_ipv6_hop_limit(pkt, NET_IPV6_HDR(pkt)->hop_limit);
 8010d18:	79db      	ldrb	r3, [r3, #7]
	pkt->ipv6_hop_limit = hop_limit;
 8010d1a:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
	pkt->family = family;
 8010d1e:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8010d22:	2202      	movs	r2, #2
 8010d24:	f362 0343 	bfi	r3, r2, #1, #3
 8010d28:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
	return addr->s6_addr[0] == 0xFF;
 8010d2c:	7e33      	ldrb	r3, [r6, #24]
		if (ipv6_forward_mcast_packet(pkt, hdr) == NET_DROP) {
			goto drop;
		}
	}

	if (!net_ipv6_is_addr_mcast((struct in6_addr *)hdr->dst)) {
 8010d2e:	2bff      	cmp	r3, #255	; 0xff
 8010d30:	d158      	bne.n	8010de4 <net_ipv6_input+0x258>
 8010d32:	7e33      	ldrb	r3, [r6, #24]
					   (struct in6_addr *)hdr->dst);
			goto drop;
		}
	}

	if (net_ipv6_is_addr_mcast((struct in6_addr *)hdr->dst) &&
 8010d34:	2bff      	cmp	r3, #255	; 0xff
 8010d36:	f040 809d 	bne.w	8010e74 <net_ipv6_input+0x2e8>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 8010d3a:	7e73      	ldrb	r3, [r6, #25]
 8010d3c:	2b01      	cmp	r3, #1
 8010d3e:	d000      	beq.n	8010d42 <net_ipv6_input+0x1b6>
 8010d40:	2300      	movs	r3, #0
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	f040 8096 	bne.w	8010e74 <net_ipv6_input+0x2e8>
	    !(net_ipv6_is_addr_mcast_iface((struct in6_addr *)hdr->dst) ||
	      net_ipv6_is_addr_mcast_link_all_nodes((struct in6_addr *)hdr->dst))) {
 8010d48:	f106 0018 	add.w	r0, r6, #24
 8010d4c:	7e33      	ldrb	r3, [r6, #24]
 8010d4e:	2bff      	cmp	r3, #255	; 0xff
 8010d50:	d060      	beq.n	8010e14 <net_ipv6_input+0x288>
 8010d52:	2300      	movs	r3, #0
	return net_ipv6_is_addr_mcast_link(addr) &&
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	f000 808b 	beq.w	8010e70 <net_ipv6_input+0x2e4>
	return UNALIGNED_GET(&addr->s6_addr16[1]) == group->s6_addr16[1] &&
 8010d5a:	8842      	ldrh	r2, [r0, #2]
 8010d5c:	4b43      	ldr	r3, [pc, #268]	; (8010e6c <net_ipv6_input+0x2e0>)
 8010d5e:	885b      	ldrh	r3, [r3, #2]
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
 8010d60:	429a      	cmp	r2, r3
 8010d62:	d05e      	beq.n	8010e22 <net_ipv6_input+0x296>
 8010d64:	2300      	movs	r3, #0
	return net_ipv6_is_addr_mcast_link(addr) &&
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	f000 80a2 	beq.w	8010eb0 <net_ipv6_input+0x324>
 8010d6c:	2301      	movs	r3, #1
 8010d6e:	e080      	b.n	8010e72 <net_ipv6_input+0x2e6>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8010d70:	2200      	movs	r2, #0
 8010d72:	e7a9      	b.n	8010cc8 <net_ipv6_input+0x13c>
 8010d74:	2200      	movs	r2, #0
 8010d76:	e7a7      	b.n	8010cc8 <net_ipv6_input+0x13c>
 8010d78:	2201      	movs	r2, #1
 8010d7a:	e7a5      	b.n	8010cc8 <net_ipv6_input+0x13c>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 8010d7c:	7e73      	ldrb	r3, [r6, #25]
 8010d7e:	2b01      	cmp	r3, #1
 8010d80:	d001      	beq.n	8010d86 <net_ipv6_input+0x1fa>
 8010d82:	2300      	movs	r3, #0
 8010d84:	e7a6      	b.n	8010cd4 <net_ipv6_input+0x148>
 8010d86:	2301      	movs	r3, #1
 8010d88:	e7a4      	b.n	8010cd4 <net_ipv6_input+0x148>
		UNALIGNED_GET(&addr->s6_addr16[2]) == group->s6_addr16[2] &&
 8010d8a:	8bb3      	ldrh	r3, [r6, #28]
 8010d8c:	8882      	ldrh	r2, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr16[1]) == group->s6_addr16[1] &&
 8010d8e:	429a      	cmp	r2, r3
 8010d90:	d001      	beq.n	8010d96 <net_ipv6_input+0x20a>
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
 8010d92:	2300      	movs	r3, #0
 8010d94:	e7a8      	b.n	8010ce8 <net_ipv6_input+0x15c>
		UNALIGNED_GET(&addr->s6_addr16[3]) == group->s6_addr16[3] &&
 8010d96:	8bf2      	ldrh	r2, [r6, #30]
 8010d98:	88c3      	ldrh	r3, [r0, #6]
		UNALIGNED_GET(&addr->s6_addr16[2]) == group->s6_addr16[2] &&
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d001      	beq.n	8010da2 <net_ipv6_input+0x216>
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
 8010d9e:	2300      	movs	r3, #0
 8010da0:	e7a2      	b.n	8010ce8 <net_ipv6_input+0x15c>
		UNALIGNED_GET(&addr->s6_addr32[1]) == group->s6_addr32[1] &&
 8010da2:	69f2      	ldr	r2, [r6, #28]
 8010da4:	6843      	ldr	r3, [r0, #4]
		UNALIGNED_GET(&addr->s6_addr16[3]) == group->s6_addr16[3] &&
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d001      	beq.n	8010dae <net_ipv6_input+0x222>
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
 8010daa:	2300      	movs	r3, #0
 8010dac:	e79c      	b.n	8010ce8 <net_ipv6_input+0x15c>
 8010dae:	6a32      	ldr	r2, [r6, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == group->s6_addr32[1] &&
 8010db0:	4293      	cmp	r3, r2
 8010db2:	d001      	beq.n	8010db8 <net_ipv6_input+0x22c>
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
 8010db4:	2300      	movs	r3, #0
 8010db6:	e797      	b.n	8010ce8 <net_ipv6_input+0x15c>
		UNALIGNED_GET(&addr->s6_addr32[3]) == group->s6_addr32[3];
 8010db8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010dba:	68c2      	ldr	r2, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d001      	beq.n	8010dc4 <net_ipv6_input+0x238>
 8010dc0:	2300      	movs	r3, #0
 8010dc2:	e791      	b.n	8010ce8 <net_ipv6_input+0x15c>
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	e78f      	b.n	8010ce8 <net_ipv6_input+0x15c>
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 8010dc8:	7e72      	ldrb	r2, [r6, #25]
 8010dca:	2a05      	cmp	r2, #5
 8010dcc:	d001      	beq.n	8010dd2 <net_ipv6_input+0x246>
 8010dce:	2200      	movs	r2, #0
 8010dd0:	e78f      	b.n	8010cf2 <net_ipv6_input+0x166>
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	e78d      	b.n	8010cf2 <net_ipv6_input+0x166>
 8010dd6:	7e73      	ldrb	r3, [r6, #25]
 8010dd8:	2b08      	cmp	r3, #8
 8010dda:	d001      	beq.n	8010de0 <net_ipv6_input+0x254>
 8010ddc:	2300      	movs	r3, #0
 8010dde:	e78e      	b.n	8010cfe <net_ipv6_input+0x172>
 8010de0:	2301      	movs	r3, #1
 8010de2:	e78c      	b.n	8010cfe <net_ipv6_input+0x172>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
 8010de4:	2100      	movs	r1, #0
 8010de6:	f106 0018 	add.w	r0, r6, #24
 8010dea:	f7fc fcd9 	bl	800d7a0 <net_if_ipv6_addr_lookup>
		if (!net_ipv6_is_my_addr((struct in6_addr *)hdr->dst)) {
 8010dee:	2800      	cmp	r0, #0
 8010df0:	d19f      	bne.n	8010d32 <net_ipv6_input+0x1a6>
			if (ipv6_route_packet(pkt, hdr) == NET_OK) {
 8010df2:	4631      	mov	r1, r6
 8010df4:	4620      	mov	r0, r4
 8010df6:	f00a f919 	bl	801b02c <ipv6_route_packet>
 8010dfa:	b140      	cbz	r0, 8010e0e <net_ipv6_input+0x282>
	if (verdict != NET_DROP) {
		return verdict;
	}

drop:
	net_stats_update_ipv6_drop(pkt_iface);
 8010dfc:	9a06      	ldr	r2, [sp, #24]
	UPDATE_STAT(iface, stats.ipv6.drop++);
 8010dfe:	491a      	ldr	r1, [pc, #104]	; (8010e68 <net_ipv6_input+0x2dc>)
 8010e00:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8010e02:	3301      	adds	r3, #1
 8010e04:	630b      	str	r3, [r1, #48]	; 0x30
 8010e06:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8010e08:	3301      	adds	r3, #1
 8010e0a:	6393      	str	r3, [r2, #56]	; 0x38
	return NET_DROP;
 8010e0c:	2002      	movs	r0, #2

	NET_DBG("DROP: Unknown/wrong nexthdr type");
	net_stats_update_ip_errors_protoerr(pkt_iface);

	return NET_DROP;
}
 8010e0e:	b015      	add	sp, #84	; 0x54
 8010e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
 8010e14:	7843      	ldrb	r3, [r0, #1]
 8010e16:	2b02      	cmp	r3, #2
 8010e18:	d001      	beq.n	8010e1e <net_ipv6_input+0x292>
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	e79a      	b.n	8010d54 <net_ipv6_input+0x1c8>
 8010e1e:	2301      	movs	r3, #1
 8010e20:	e798      	b.n	8010d54 <net_ipv6_input+0x1c8>
		UNALIGNED_GET(&addr->s6_addr16[2]) == group->s6_addr16[2] &&
 8010e22:	8882      	ldrh	r2, [r0, #4]
 8010e24:	4b11      	ldr	r3, [pc, #68]	; (8010e6c <net_ipv6_input+0x2e0>)
 8010e26:	889b      	ldrh	r3, [r3, #4]
	return UNALIGNED_GET(&addr->s6_addr16[1]) == group->s6_addr16[1] &&
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	d001      	beq.n	8010e30 <net_ipv6_input+0x2a4>
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	e79a      	b.n	8010d66 <net_ipv6_input+0x1da>
		UNALIGNED_GET(&addr->s6_addr16[3]) == group->s6_addr16[3] &&
 8010e30:	88c2      	ldrh	r2, [r0, #6]
 8010e32:	4b0e      	ldr	r3, [pc, #56]	; (8010e6c <net_ipv6_input+0x2e0>)
 8010e34:	88db      	ldrh	r3, [r3, #6]
		UNALIGNED_GET(&addr->s6_addr16[2]) == group->s6_addr16[2] &&
 8010e36:	429a      	cmp	r2, r3
 8010e38:	d001      	beq.n	8010e3e <net_ipv6_input+0x2b2>
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	e793      	b.n	8010d66 <net_ipv6_input+0x1da>
		UNALIGNED_GET(&addr->s6_addr32[1]) == group->s6_addr32[1] &&
 8010e3e:	6842      	ldr	r2, [r0, #4]
 8010e40:	4b0a      	ldr	r3, [pc, #40]	; (8010e6c <net_ipv6_input+0x2e0>)
 8010e42:	685b      	ldr	r3, [r3, #4]
		UNALIGNED_GET(&addr->s6_addr16[3]) == group->s6_addr16[3] &&
 8010e44:	429a      	cmp	r2, r3
 8010e46:	d001      	beq.n	8010e4c <net_ipv6_input+0x2c0>
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
 8010e48:	2300      	movs	r3, #0
 8010e4a:	e78c      	b.n	8010d66 <net_ipv6_input+0x1da>
 8010e4c:	6882      	ldr	r2, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == group->s6_addr32[1] &&
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	d001      	beq.n	8010e56 <net_ipv6_input+0x2ca>
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
 8010e52:	2300      	movs	r3, #0
 8010e54:	e787      	b.n	8010d66 <net_ipv6_input+0x1da>
		UNALIGNED_GET(&addr->s6_addr32[3]) == group->s6_addr32[3];
 8010e56:	68c2      	ldr	r2, [r0, #12]
 8010e58:	4b04      	ldr	r3, [pc, #16]	; (8010e6c <net_ipv6_input+0x2e0>)
 8010e5a:	68db      	ldr	r3, [r3, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == group->s6_addr32[1] &&
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	d001      	beq.n	8010e64 <net_ipv6_input+0x2d8>
 8010e60:	2300      	movs	r3, #0
 8010e62:	e780      	b.n	8010d66 <net_ipv6_input+0x1da>
 8010e64:	2301      	movs	r3, #1
 8010e66:	e77e      	b.n	8010d66 <net_ipv6_input+0x1da>
 8010e68:	20002a58 	.word	0x20002a58
 8010e6c:	0801e494 	.word	0x0801e494
	return net_ipv6_is_addr_mcast_link(addr) &&
 8010e70:	2300      	movs	r3, #0
	    !(net_ipv6_is_addr_mcast_iface((struct in6_addr *)hdr->dst) ||
 8010e72:	b1fb      	cbz	r3, 8010eb4 <net_ipv6_input+0x328>
	return net_pkt_skip(pkt, access->size);
 8010e74:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010e76:	4620      	mov	r0, r4
 8010e78:	f009 fb65 	bl	801a546 <net_pkt_skip>
	current_hdr = hdr->nexthdr;
 8010e7c:	79b5      	ldrb	r5, [r6, #6]
	ext_bitmap = extension_to_bitmap(current_hdr, ext_bitmap);
 8010e7e:	2100      	movs	r1, #0
 8010e80:	4628      	mov	r0, r5
 8010e82:	f00a f8ba 	bl	801affa <extension_to_bitmap>
 8010e86:	4680      	mov	r8, r0
	pkt->ipv6_prev_hdr_start = offset;
 8010e88:	2306      	movs	r3, #6
 8010e8a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
	uint16_t ext_len = 0U;
 8010e8e:	f04f 0a00 	mov.w	sl, #0
 8010e92:	46a9      	mov	r9, r5


static inline bool net_ipv6_is_nexthdr_upper_layer(uint8_t nexthdr)
{
	return (nexthdr == IPPROTO_ICMPV6 || nexthdr == IPPROTO_UDP ||
		nexthdr == IPPROTO_TCP ||
 8010e94:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
 8010e98:	f000 80c5 	beq.w	8011026 <net_ipv6_input+0x49a>
	return (nexthdr == IPPROTO_ICMPV6 || nexthdr == IPPROTO_UDP ||
 8010e9c:	f1b9 0f11 	cmp.w	r9, #17
 8010ea0:	f000 8100 	beq.w	80110a4 <net_ipv6_input+0x518>
		nexthdr == IPPROTO_TCP ||
 8010ea4:	f1b9 0f06 	cmp.w	r9, #6
 8010ea8:	f000 80bb 	beq.w	8011022 <net_ipv6_input+0x496>
 8010eac:	2300      	movs	r3, #0
 8010eae:	e0bb      	b.n	8011028 <net_ipv6_input+0x49c>
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	e7de      	b.n	8010e72 <net_ipv6_input+0x2e6>
		if_mcast_addr = net_if_ipv6_maddr_lookup(
 8010eb4:	a906      	add	r1, sp, #24
 8010eb6:	f7fd f90d 	bl	800e0d4 <net_if_ipv6_maddr_lookup>
		if (!if_mcast_addr ||
 8010eba:	2800      	cmp	r0, #0
 8010ebc:	d09e      	beq.n	8010dfc <net_ipv6_input+0x270>
	return addr->is_joined;
 8010ebe:	7d03      	ldrb	r3, [r0, #20]
 8010ec0:	f013 0f02 	tst.w	r3, #2
 8010ec4:	d1d6      	bne.n	8010e74 <net_ipv6_input+0x2e8>
 8010ec6:	e799      	b.n	8010dfc <net_ipv6_input+0x270>
		switch (nexthdr) {
 8010ec8:	f1a5 033b 	sub.w	r3, r5, #59	; 0x3b
 8010ecc:	b2db      	uxtb	r3, r3
 8010ece:	2b01      	cmp	r3, #1
 8010ed0:	d90e      	bls.n	8010ef0 <net_ipv6_input+0x364>
 8010ed2:	2d3a      	cmp	r5, #58	; 0x3a
 8010ed4:	d006      	beq.n	8010ee4 <net_ipv6_input+0x358>
	return (nexthdr == IPPROTO_ICMPV6 || nexthdr == IPPROTO_UDP ||
 8010ed6:	2d11      	cmp	r5, #17
 8010ed8:	d028      	beq.n	8010f2c <net_ipv6_input+0x3a0>
		nexthdr == IPPROTO_TCP ||
 8010eda:	2d06      	cmp	r5, #6
 8010edc:	d104      	bne.n	8010ee8 <net_ipv6_input+0x35c>
 8010ede:	f04f 0b01 	mov.w	fp, #1
 8010ee2:	e001      	b.n	8010ee8 <net_ipv6_input+0x35c>
 8010ee4:	f04f 0b01 	mov.w	fp, #1
			if (net_ipv6_is_nexthdr_upper_layer(nexthdr)) {
 8010ee8:	f01b 0f01 	tst.w	fp, #1
 8010eec:	f000 80c7 	beq.w	801107e <net_ipv6_input+0x4f2>
		switch (current_hdr) {
 8010ef0:	f1b9 0f00 	cmp.w	r9, #0
 8010ef4:	d003      	beq.n	8010efe <net_ipv6_input+0x372>
 8010ef6:	f1b9 0f3c 	cmp.w	r9, #60	; 0x3c
 8010efa:	f040 80c0 	bne.w	801107e <net_ipv6_input+0x4f2>
		exthdr_len = ipv6_handle_ext_hdr_options(pkt, hdr, pkt_len);
 8010efe:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8010f02:	b2ad      	uxth	r5, r5
		uint8_t val = 0U;
 8010f04:	2300      	movs	r3, #0
 8010f06:	f88d 300b 	strb.w	r3, [sp, #11]
	return net_pkt_read(pkt, data, 1);
 8010f0a:	2201      	movs	r2, #1
 8010f0c:	f10d 010b 	add.w	r1, sp, #11
 8010f10:	4620      	mov	r0, r4
 8010f12:	f009 fb30 	bl	801a576 <net_pkt_read>
		if (net_pkt_read_u8(pkt, &val)) {
 8010f16:	b960      	cbnz	r0, 8010f32 <net_ipv6_input+0x3a6>
		exthdr_len = val * 8U + 8;
 8010f18:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010f1c:	3301      	adds	r3, #1
 8010f1e:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
	if (exthdr_len > pkt_len) {
 8010f22:	ebb5 0fc3 	cmp.w	r5, r3, lsl #3
 8010f26:	d379      	bcc.n	801101c <net_ipv6_input+0x490>
	length += 2U;
 8010f28:	2502      	movs	r5, #2
 8010f2a:	e011      	b.n	8010f50 <net_ipv6_input+0x3c4>
 8010f2c:	f04f 0b01 	mov.w	fp, #1
 8010f30:	e7da      	b.n	8010ee8 <net_ipv6_input+0x35c>
			return -ENOBUFS;
 8010f32:	f06f 0b68 	mvn.w	fp, #104	; 0x68
 8010f36:	e05a      	b.n	8010fee <net_ipv6_input+0x462>
 8010f38:	2201      	movs	r2, #1
 8010f3a:	f10d 010b 	add.w	r1, sp, #11
 8010f3e:	4620      	mov	r0, r4
 8010f40:	f009 fb19 	bl	801a576 <net_pkt_read>
			if (net_pkt_read_u8(pkt, &opt_len)) {
 8010f44:	b1b0      	cbz	r0, 8010f74 <net_ipv6_input+0x3e8>
				return -ENOBUFS;
 8010f46:	f06f 0b68 	mvn.w	fp, #104	; 0x68
 8010f4a:	e050      	b.n	8010fee <net_ipv6_input+0x462>
			length++;
 8010f4c:	3501      	adds	r5, #1
 8010f4e:	b2ad      	uxth	r5, r5
	while (length < exthdr_len) {
 8010f50:	45ab      	cmp	fp, r5
 8010f52:	d94c      	bls.n	8010fee <net_ipv6_input+0x462>
		opt_type_offset = net_pkt_get_current_offset(pkt);
 8010f54:	4620      	mov	r0, r4
 8010f56:	f009 fb91 	bl	801a67c <net_pkt_get_current_offset>
 8010f5a:	4681      	mov	r9, r0
 8010f5c:	2201      	movs	r2, #1
 8010f5e:	f10d 010a 	add.w	r1, sp, #10
 8010f62:	4620      	mov	r0, r4
 8010f64:	f009 fb07 	bl	801a576 <net_pkt_read>
		if (net_pkt_read_u8(pkt, &opt_type)) {
 8010f68:	2800      	cmp	r0, #0
 8010f6a:	d13e      	bne.n	8010fea <net_ipv6_input+0x45e>
		if (opt_type != NET_IPV6_EXT_HDR_OPT_PAD1) {
 8010f6c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d1e1      	bne.n	8010f38 <net_ipv6_input+0x3ac>
		switch (opt_type) {
 8010f74:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d0e7      	beq.n	8010f4c <net_ipv6_input+0x3c0>
 8010f7c:	2b01      	cmp	r3, #1
 8010f7e:	d01b      	beq.n	8010fb8 <net_ipv6_input+0x42c>
			if (opt_len > (exthdr_len - (1 + 1 + 1 + 1))) {
 8010f80:	f1ab 0203 	sub.w	r2, fp, #3
 8010f84:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8010f88:	428a      	cmp	r2, r1
 8010f8a:	dd3e      	ble.n	801100a <net_ipv6_input+0x47e>
	switch (opt_type & 0xc0) {
 8010f8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010f90:	2b80      	cmp	r3, #128	; 0x80
 8010f92:	d020      	beq.n	8010fd6 <net_ipv6_input+0x44a>
 8010f94:	2bc0      	cmp	r3, #192	; 0xc0
 8010f96:	d01b      	beq.n	8010fd0 <net_ipv6_input+0x444>
 8010f98:	b1c3      	cbz	r3, 8010fcc <net_ipv6_input+0x440>
	return true;
 8010f9a:	2301      	movs	r3, #1
			if (ipv6_drop_on_unknown_option(pkt, hdr,
 8010f9c:	bbc3      	cbnz	r3, 8011010 <net_ipv6_input+0x484>
			if (net_pkt_skip(pkt, opt_len)) {
 8010f9e:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8010fa2:	4620      	mov	r0, r4
 8010fa4:	f009 facf 	bl	801a546 <net_pkt_skip>
 8010fa8:	bba8      	cbnz	r0, 8011016 <net_ipv6_input+0x48a>
			length += opt_len + 2;
 8010faa:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8010fae:	441d      	add	r5, r3
 8010fb0:	b2ad      	uxth	r5, r5
 8010fb2:	3502      	adds	r5, #2
 8010fb4:	b2ad      	uxth	r5, r5
			break;
 8010fb6:	e7cb      	b.n	8010f50 <net_ipv6_input+0x3c4>
			length += opt_len + 2;
 8010fb8:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8010fbc:	440d      	add	r5, r1
 8010fbe:	b2ad      	uxth	r5, r5
 8010fc0:	3502      	adds	r5, #2
 8010fc2:	b2ad      	uxth	r5, r5
			net_pkt_skip(pkt, opt_len);
 8010fc4:	4620      	mov	r0, r4
 8010fc6:	f009 fabe 	bl	801a546 <net_pkt_skip>
			break;
 8010fca:	e7c1      	b.n	8010f50 <net_ipv6_input+0x3c4>
	switch (opt_type & 0xc0) {
 8010fcc:	9b00      	ldr	r3, [sp, #0]
 8010fce:	e7e5      	b.n	8010f9c <net_ipv6_input+0x410>
	return addr->s6_addr[0] == 0xFF;
 8010fd0:	7e33      	ldrb	r3, [r6, #24]
		if (net_ipv6_is_addr_mcast((struct in6_addr *)hdr->dst)) {
 8010fd2:	2bff      	cmp	r3, #255	; 0xff
 8010fd4:	d007      	beq.n	8010fe6 <net_ipv6_input+0x45a>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
 8010fd6:	464b      	mov	r3, r9
 8010fd8:	2202      	movs	r2, #2
 8010fda:	2104      	movs	r1, #4
 8010fdc:	4620      	mov	r0, r4
 8010fde:	f7ff fc03 	bl	80107e8 <net_icmpv6_send_error>
	return true;
 8010fe2:	2301      	movs	r3, #1
		break;
 8010fe4:	e7da      	b.n	8010f9c <net_ipv6_input+0x410>
	return true;
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	e7d8      	b.n	8010f9c <net_ipv6_input+0x410>
			return -ENOBUFS;
 8010fea:	f06f 0b68 	mvn.w	fp, #104	; 0x68
		if (exthdr_len < 0) {
 8010fee:	f1bb 0f00 	cmp.w	fp, #0
 8010ff2:	f6ff af03 	blt.w	8010dfc <net_ipv6_input+0x270>
		ext_len += exthdr_len;
 8010ff6:	44da      	add	sl, fp
 8010ff8:	fa1f fa8a 	uxth.w	sl, sl
		current_hdr = nexthdr;
 8010ffc:	f89d 9017 	ldrb.w	r9, [sp, #23]
	pkt->ipv6_prev_hdr_start = offset;
 8011000:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011004:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
}
 8011008:	e744      	b.n	8010e94 <net_ipv6_input+0x308>
				return -EINVAL;
 801100a:	f06f 0b15 	mvn.w	fp, #21
 801100e:	e7ee      	b.n	8010fee <net_ipv6_input+0x462>
				return -ENOTSUP;
 8011010:	f06f 0b85 	mvn.w	fp, #133	; 0x85
 8011014:	e7eb      	b.n	8010fee <net_ipv6_input+0x462>
				return -ENOBUFS;
 8011016:	f06f 0b68 	mvn.w	fp, #104	; 0x68
 801101a:	e7e8      	b.n	8010fee <net_ipv6_input+0x462>
		return -EINVAL;
 801101c:	f06f 0b15 	mvn.w	fp, #21
 8011020:	e7e5      	b.n	8010fee <net_ipv6_input+0x462>
 8011022:	2301      	movs	r3, #1
 8011024:	e000      	b.n	8011028 <net_ipv6_input+0x49c>
 8011026:	2301      	movs	r3, #1
	while (!net_ipv6_is_nexthdr_upper_layer(current_hdr)) {
 8011028:	9300      	str	r3, [sp, #0]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d13c      	bne.n	80110a8 <net_ipv6_input+0x51c>
		if (current_hdr == NET_IPV6_NEXTHDR_NONE) {
 801102e:	f1b9 0f3b 	cmp.w	r9, #59	; 0x3b
 8011032:	d06b      	beq.n	801110c <net_ipv6_input+0x580>
		prev_hdr_offset = net_pkt_get_current_offset(pkt);
 8011034:	4620      	mov	r0, r4
 8011036:	f009 fb21 	bl	801a67c <net_pkt_get_current_offset>
 801103a:	9001      	str	r0, [sp, #4]
	return net_pkt_read(pkt, data, 1);
 801103c:	2201      	movs	r2, #1
 801103e:	f10d 0117 	add.w	r1, sp, #23
 8011042:	4620      	mov	r0, r4
 8011044:	f009 fa97 	bl	801a576 <net_pkt_read>
		if (net_pkt_read_u8(pkt, &nexthdr)) {
 8011048:	4683      	mov	fp, r0
 801104a:	2800      	cmp	r0, #0
 801104c:	f47f aed6 	bne.w	8010dfc <net_ipv6_input+0x270>
		ext_bit = extension_to_bitmap(nexthdr, ext_bitmap);
 8011050:	f89d 5017 	ldrb.w	r5, [sp, #23]
 8011054:	4641      	mov	r1, r8
 8011056:	4628      	mov	r0, r5
 8011058:	f009 ffcf 	bl	801affa <extension_to_bitmap>
		if (ext_bit & ext_bitmap) {
 801105c:	ea00 0308 	and.w	r3, r0, r8
 8011060:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011064:	d10b      	bne.n	801107e <net_ipv6_input+0x4f2>
		ext_bitmap |= ext_bit;
 8011066:	ea40 0808 	orr.w	r8, r0, r8
 801106a:	fa5f f888 	uxtb.w	r8, r8
		switch (nexthdr) {
 801106e:	2d2c      	cmp	r5, #44	; 0x2c
 8011070:	f43f af3e 	beq.w	8010ef0 <net_ipv6_input+0x364>
 8011074:	f63f af28 	bhi.w	8010ec8 <net_ipv6_input+0x33c>
 8011078:	2d00      	cmp	r5, #0
 801107a:	f47f af2a 	bne.w	8010ed2 <net_ipv6_input+0x346>
			      net_pkt_get_current_offset(pkt) - 1);
 801107e:	4620      	mov	r0, r4
 8011080:	f009 fafc 	bl	801a67c <net_pkt_get_current_offset>
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
 8011084:	1e43      	subs	r3, r0, #1
 8011086:	2201      	movs	r2, #1
 8011088:	2104      	movs	r1, #4
 801108a:	4620      	mov	r0, r4
 801108c:	f7ff fbac 	bl	80107e8 <net_icmpv6_send_error>
	net_stats_update_ip_errors_protoerr(pkt_iface);
 8011090:	9a06      	ldr	r2, [sp, #24]
	UPDATE_STAT(iface, stats.ip_errors.protoerr++);
 8011092:	491f      	ldr	r1, [pc, #124]	; (8011110 <net_ipv6_input+0x584>)
 8011094:	6a0b      	ldr	r3, [r1, #32]
 8011096:	3301      	adds	r3, #1
 8011098:	620b      	str	r3, [r1, #32]
 801109a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801109c:	3301      	adds	r3, #1
 801109e:	6293      	str	r3, [r2, #40]	; 0x28
	return NET_DROP;
 80110a0:	2002      	movs	r0, #2
 80110a2:	e6b4      	b.n	8010e0e <net_ipv6_input+0x282>
 80110a4:	2301      	movs	r3, #1
 80110a6:	e7bf      	b.n	8011028 <net_ipv6_input+0x49c>
 80110a8:	464d      	mov	r5, r9
	pkt->ipv6_ext_len = len;
 80110aa:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
	switch (current_hdr) {
 80110ae:	2d11      	cmp	r5, #17
 80110b0:	d022      	beq.n	80110f8 <net_ipv6_input+0x56c>
 80110b2:	2d3a      	cmp	r5, #58	; 0x3a
 80110b4:	d019      	beq.n	80110ea <net_ipv6_input+0x55e>
 80110b6:	2d06      	cmp	r5, #6
 80110b8:	f47f aea0 	bne.w	8010dfc <net_ipv6_input+0x270>
		proto_hdr.tcp = net_tcp_input(pkt, &tcp_access);
 80110bc:	a907      	add	r1, sp, #28
 80110be:	4620      	mov	r0, r4
 80110c0:	f002 feae 	bl	8013e20 <net_tcp_input>
 80110c4:	9004      	str	r0, [sp, #16]
		if (proto_hdr.tcp) {
 80110c6:	2800      	cmp	r0, #0
 80110c8:	f43f ae98 	beq.w	8010dfc <net_ipv6_input+0x270>
			verdict = NET_OK;
 80110cc:	2000      	movs	r0, #0
	} else if (current_hdr == IPPROTO_ICMPV6) {
 80110ce:	2d3a      	cmp	r5, #58	; 0x3a
 80110d0:	f43f ae9d 	beq.w	8010e0e <net_ipv6_input+0x282>
	ip.ipv6 = hdr;
 80110d4:	9603      	str	r6, [sp, #12]
	verdict = net_conn_input(pkt, &ip, current_hdr, &proto_hdr);
 80110d6:	ab04      	add	r3, sp, #16
 80110d8:	462a      	mov	r2, r5
 80110da:	a903      	add	r1, sp, #12
 80110dc:	4620      	mov	r0, r4
 80110de:	f002 fcd5 	bl	8013a8c <net_conn_input>
	if (verdict != NET_DROP) {
 80110e2:	2802      	cmp	r0, #2
 80110e4:	f47f ae93 	bne.w	8010e0e <net_ipv6_input+0x282>
drop:
 80110e8:	e688      	b.n	8010dfc <net_ipv6_input+0x270>
		verdict = net_icmpv6_input(pkt, hdr);
 80110ea:	4631      	mov	r1, r6
 80110ec:	4620      	mov	r0, r4
 80110ee:	f7ff fc73 	bl	80109d8 <net_icmpv6_input>
	if (verdict == NET_DROP) {
 80110f2:	2802      	cmp	r0, #2
 80110f4:	d1eb      	bne.n	80110ce <net_ipv6_input+0x542>
 80110f6:	e681      	b.n	8010dfc <net_ipv6_input+0x270>
		proto_hdr.udp = net_udp_input(pkt, &udp_access);
 80110f8:	a90e      	add	r1, sp, #56	; 0x38
 80110fa:	4620      	mov	r0, r4
 80110fc:	f002 fece 	bl	8013e9c <net_udp_input>
 8011100:	9004      	str	r0, [sp, #16]
		if (proto_hdr.udp) {
 8011102:	2800      	cmp	r0, #0
 8011104:	f43f ae7a 	beq.w	8010dfc <net_ipv6_input+0x270>
			verdict = NET_OK;
 8011108:	2000      	movs	r0, #0
 801110a:	e7e0      	b.n	80110ce <net_ipv6_input+0x542>
			return NET_DROP;
 801110c:	2002      	movs	r0, #2
 801110e:	e67e      	b.n	8010e0e <net_ipv6_input+0x282>
 8011110:	20002a58 	.word	0x20002a58

08011114 <nbr_lookup>:
#endif

static struct net_nbr *nbr_lookup(struct net_nbr_table *table,
				  struct net_if *iface,
				  const struct in6_addr *addr)
{
 8011114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011116:	460d      	mov	r5, r1
 8011118:	4616      	mov	r6, r2
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 801111a:	2400      	movs	r4, #0
 801111c:	e00b      	b.n	8011136 <nbr_lookup+0x22>
	return (struct net_ipv6_nbr_data *)nbr->data;
 801111e:	4a0f      	ldr	r2, [pc, #60]	; (801115c <nbr_lookup+0x48>)
 8011120:	2354      	movs	r3, #84	; 0x54
 8011122:	fb03 2304 	mla	r3, r3, r4, r2
 8011126:	68d8      	ldr	r0, [r3, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 8011128:	2210      	movs	r2, #16
 801112a:	4631      	mov	r1, r6
 801112c:	3004      	adds	r0, #4
 801112e:	f00b fb75 	bl	801c81c <memcmp>

		if (iface && nbr->iface != iface) {
			continue;
		}

		if (net_ipv6_addr_cmp(&net_ipv6_nbr_data(nbr)->addr, addr)) {
 8011132:	b188      	cbz	r0, 8011158 <nbr_lookup+0x44>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 8011134:	3401      	adds	r4, #1
 8011136:	2c07      	cmp	r4, #7
 8011138:	dc0d      	bgt.n	8011156 <nbr_lookup+0x42>
	return &net_neighbor_pool[idx].nbr;
 801113a:	4808      	ldr	r0, [pc, #32]	; (801115c <nbr_lookup+0x48>)
 801113c:	2354      	movs	r3, #84	; 0x54
 801113e:	fb03 f304 	mul.w	r3, r3, r4
 8011142:	18c7      	adds	r7, r0, r3
		if (!nbr->ref) {
 8011144:	5cc3      	ldrb	r3, [r0, r3]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d0f4      	beq.n	8011134 <nbr_lookup+0x20>
		if (iface && nbr->iface != iface) {
 801114a:	2d00      	cmp	r5, #0
 801114c:	d0e7      	beq.n	801111e <nbr_lookup+0xa>
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	42ab      	cmp	r3, r5
 8011152:	d1ef      	bne.n	8011134 <nbr_lookup+0x20>
 8011154:	e7e3      	b.n	801111e <nbr_lookup+0xa>
			return nbr;
		}
	}

	return NULL;
 8011156:	2700      	movs	r7, #0
}
 8011158:	4638      	mov	r0, r7
 801115a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801115c:	2000083c 	.word	0x2000083c

08011160 <ipv6_nbr_set_state>:
{
 8011160:	b538      	push	{r3, r4, r5, lr}
 8011162:	68c2      	ldr	r2, [r0, #12]
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
 8011164:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8011168:	428b      	cmp	r3, r1
 801116a:	d009      	beq.n	8011180 <ipv6_nbr_set_state+0x20>
 801116c:	4604      	mov	r4, r0
 801116e:	2b05      	cmp	r3, #5
 8011170:	d006      	beq.n	8011180 <ipv6_nbr_set_state+0x20>
	net_ipv6_nbr_data(nbr)->state = new_state;
 8011172:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
 8011176:	68c3      	ldr	r3, [r0, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
 8011178:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801117c:	2a02      	cmp	r2, #2
 801117e:	d000      	beq.n	8011182 <ipv6_nbr_set_state+0x22>
}
 8011180:	bd38      	pop	{r3, r4, r5, pc}
		if (stale_counter + 1 != UINT32_MAX) {
 8011182:	4a18      	ldr	r2, [pc, #96]	; (80111e4 <ipv6_nbr_set_state+0x84>)
 8011184:	6812      	ldr	r2, [r2, #0]
 8011186:	f112 0f02 	cmn.w	r2, #2
 801118a:	d004      	beq.n	8011196 <ipv6_nbr_set_state+0x36>
			net_ipv6_nbr_data(nbr)->stale_counter = stale_counter++;
 801118c:	1c50      	adds	r0, r2, #1
 801118e:	4915      	ldr	r1, [pc, #84]	; (80111e4 <ipv6_nbr_set_state+0x84>)
 8011190:	6008      	str	r0, [r1, #0]
 8011192:	639a      	str	r2, [r3, #56]	; 0x38
 8011194:	e7f4      	b.n	8011180 <ipv6_nbr_set_state+0x20>
	return z_impl_k_sem_take(sem, timeout);
 8011196:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801119a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801119e:	4812      	ldr	r0, [pc, #72]	; (80111e8 <ipv6_nbr_set_state+0x88>)
 80111a0:	f004 fcf0 	bl	8015b84 <z_impl_k_sem_take>
			stale_counter = 0U;
 80111a4:	2300      	movs	r3, #0
 80111a6:	4a0f      	ldr	r2, [pc, #60]	; (80111e4 <ipv6_nbr_set_state+0x84>)
 80111a8:	6013      	str	r3, [r2, #0]
			for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 80111aa:	e000      	b.n	80111ae <ipv6_nbr_set_state+0x4e>
 80111ac:	3301      	adds	r3, #1
 80111ae:	2b07      	cmp	r3, #7
 80111b0:	dc13      	bgt.n	80111da <ipv6_nbr_set_state+0x7a>
				if (!n || !n->ref) {
 80111b2:	2254      	movs	r2, #84	; 0x54
 80111b4:	fb02 f203 	mul.w	r2, r2, r3
 80111b8:	490c      	ldr	r1, [pc, #48]	; (80111ec <ipv6_nbr_set_state+0x8c>)
 80111ba:	5c8a      	ldrb	r2, [r1, r2]
 80111bc:	2a00      	cmp	r2, #0
 80111be:	d0f5      	beq.n	80111ac <ipv6_nbr_set_state+0x4c>
 80111c0:	68e2      	ldr	r2, [r4, #12]
				if (!data) {
 80111c2:	2a00      	cmp	r2, #0
 80111c4:	d0f2      	beq.n	80111ac <ipv6_nbr_set_state+0x4c>
				if (data->state != NET_IPV6_NBR_STATE_STALE) {
 80111c6:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
 80111ca:	2902      	cmp	r1, #2
 80111cc:	d1ee      	bne.n	80111ac <ipv6_nbr_set_state+0x4c>
				data->stale_counter = stale_counter++;
 80111ce:	4805      	ldr	r0, [pc, #20]	; (80111e4 <ipv6_nbr_set_state+0x84>)
 80111d0:	6801      	ldr	r1, [r0, #0]
 80111d2:	1c4d      	adds	r5, r1, #1
 80111d4:	6005      	str	r5, [r0, #0]
 80111d6:	6391      	str	r1, [r2, #56]	; 0x38
 80111d8:	e7e8      	b.n	80111ac <ipv6_nbr_set_state+0x4c>
	z_impl_k_sem_give(sem);
 80111da:	4803      	ldr	r0, [pc, #12]	; (80111e8 <ipv6_nbr_set_state+0x88>)
 80111dc:	f004 fcaa 	bl	8015b34 <z_impl_k_sem_give>
 80111e0:	e7ce      	b.n	8011180 <ipv6_nbr_set_state+0x20>
 80111e2:	bf00      	nop
 80111e4:	200034d8 	.word	0x200034d8
 80111e8:	200034c0 	.word	0x200034c0
 80111ec:	2000083c 	.word	0x2000083c

080111f0 <nbr_new>:
}

static struct net_nbr *nbr_new(struct net_if *iface,
			       const struct in6_addr *addr, bool is_router,
			       enum net_ipv6_nbr_state state)
{
 80111f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111f4:	b082      	sub	sp, #8
 80111f6:	4604      	mov	r4, r0
 80111f8:	460d      	mov	r5, r1
 80111fa:	4616      	mov	r6, r2
 80111fc:	461f      	mov	r7, r3
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
 80111fe:	4807      	ldr	r0, [pc, #28]	; (801121c <nbr_new+0x2c>)
 8011200:	f009 fee1 	bl	801afc6 <net_nbr_get>

	if (!nbr) {
 8011204:	4680      	mov	r8, r0
 8011206:	b128      	cbz	r0, 8011214 <nbr_new+0x24>
		return NULL;
	}

	nbr_init(nbr, iface, addr, is_router, state);
 8011208:	9700      	str	r7, [sp, #0]
 801120a:	4633      	mov	r3, r6
 801120c:	462a      	mov	r2, r5
 801120e:	4621      	mov	r1, r4
 8011210:	f009 ffe5 	bl	801b1de <nbr_init>
	NET_DBG("nbr %p iface %p/%d state %d IPv6 %s",
		nbr, iface, net_if_get_by_iface(iface), state,
		log_strdup(net_sprint_ipv6_addr(addr)));

	return nbr;
}
 8011214:	4640      	mov	r0, r8
 8011216:	b002      	add	sp, #8
 8011218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801121c:	20000830 	.word	0x20000830

08011220 <dbg_update_neighbor_lladdr>:

static void dbg_update_neighbor_lladdr(const struct net_linkaddr *new_lladdr,
				       const struct net_linkaddr_storage *old_lladdr,
				       const struct in6_addr *addr)
{
 8011220:	b500      	push	{lr}
 8011222:	b087      	sub	sp, #28
 8011224:	4608      	mov	r0, r1

static inline char *net_sprint_ll_addr(const uint8_t *ll, uint8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
 8011226:	2318      	movs	r3, #24
 8011228:	4a06      	ldr	r2, [pc, #24]	; (8011244 <dbg_update_neighbor_lladdr+0x24>)
 801122a:	7849      	ldrb	r1, [r1, #1]
 801122c:	3002      	adds	r0, #2
 801122e:	f7fe f96b 	bl	800f508 <net_sprint_ll_addr_buf>
 8011232:	4603      	mov	r3, r0
	char out[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	snprintk(out, sizeof(out), "%s",
 8011234:	4a04      	ldr	r2, [pc, #16]	; (8011248 <dbg_update_neighbor_lladdr+0x28>)
 8011236:	2118      	movs	r1, #24
 8011238:	4668      	mov	r0, sp
 801123a:	f006 fa9c 	bl	8017776 <snprintk>
	NET_DBG("Updating neighbor %s lladdr %s (was %s)",
		log_strdup(net_sprint_ipv6_addr(addr)),
		log_strdup(net_sprint_ll_addr(new_lladdr->addr,
					      new_lladdr->len)),
		log_strdup(out));
}
 801123e:	b007      	add	sp, #28
 8011240:	f85d fb04 	ldr.w	pc, [sp], #4
 8011244:	200034a8 	.word	0x200034a8
 8011248:	0801e938 	.word	0x0801e938

0801124c <ipv6_nd_restart_reachable_timer>:
}
#endif /* CONFIG_NET_IPV6_NBR_CACHE */

#if defined(CONFIG_NET_IPV6_ND)
static void ipv6_nd_restart_reachable_timer(struct net_nbr *nbr, int64_t time)
{
 801124c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011250:	4614      	mov	r4, r2
 8011252:	461d      	mov	r5, r3
	int64_t remaining;

	if (nbr) {
 8011254:	b168      	cbz	r0, 8011272 <ipv6_nd_restart_reachable_timer+0x26>
 8011256:	4680      	mov	r8, r0
 8011258:	f8d0 900c 	ldr.w	r9, [r0, #12]
	return z_impl_k_uptime_ticks();
 801125c:	f00b f9d4 	bl	801c608 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8011260:	220a      	movs	r2, #10
 8011262:	2300      	movs	r3, #0
 8011264:	f7ef fc6a 	bl	8000b3c <__aeabi_uldivmod>
		net_ipv6_nbr_data(nbr)->reachable = k_uptime_get();
 8011268:	e9c9 0106 	strd	r0, r1, [r9, #24]
 801126c:	f8d8 300c 	ldr.w	r3, [r8, #12]
		net_ipv6_nbr_data(nbr)->reachable_timeout = time;
 8011270:	621c      	str	r4, [r3, #32]
	return z_timeout_remaining(&dwork->timeout);
 8011272:	481b      	ldr	r0, [pc, #108]	; (80112e0 <ipv6_nd_restart_reachable_timer+0x94>)
 8011274:	f00b f981 	bl	801c57a <z_timeout_remaining>
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_ceil32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, true, false);
 8011278:	2300      	movs	r3, #0
		t += off;
 801127a:	f110 0609 	adds.w	r6, r0, #9
 801127e:	eb43 0703 	adc.w	r7, r3, r3
		if (result32 && (t < BIT64(32))) {
 8011282:	2f01      	cmp	r7, #1
 8011284:	bf08      	it	eq
 8011286:	2e00      	cmpeq	r6, #0
 8011288:	d220      	bcs.n	80112cc <ipv6_nd_restart_reachable_timer+0x80>
			return ((uint32_t)t) / (from_hz / to_hz);
 801128a:	4b16      	ldr	r3, [pc, #88]	; (80112e4 <ipv6_nd_restart_reachable_timer+0x98>)
 801128c:	fba3 3006 	umull	r3, r0, r3, r6
 8011290:	08c0      	lsrs	r0, r0, #3
	}

	remaining = k_ticks_to_ms_ceil32(
 8011292:	4602      	mov	r2, r0
 8011294:	2300      	movs	r3, #0
		k_work_delayable_remaining_get(&ipv6_nd_reachable_timer));
	if (!remaining || remaining > time) {
 8011296:	ea52 0103 	orrs.w	r1, r2, r3
 801129a:	d003      	beq.n	80112a4 <ipv6_nd_restart_reachable_timer+0x58>
 801129c:	4284      	cmp	r4, r0
 801129e:	eb75 0303 	sbcs.w	r3, r5, r3
 80112a2:	da11      	bge.n	80112c8 <ipv6_nd_restart_reachable_timer+0x7c>
		k_work_reschedule(&ipv6_nd_reachable_timer, K_MSEC(time));
 80112a4:	4621      	mov	r1, r4
 80112a6:	4628      	mov	r0, r5
 80112a8:	2c00      	cmp	r4, #0
 80112aa:	f175 0300 	sbcs.w	r3, r5, #0
 80112ae:	db14      	blt.n	80112da <ipv6_nd_restart_reachable_timer+0x8e>
			return t * ((uint64_t)to_hz / from_hz);
 80112b0:	0084      	lsls	r4, r0, #2
 80112b2:	008a      	lsls	r2, r1, #2
 80112b4:	ea44 7391 	orr.w	r3, r4, r1, lsr #30
 80112b8:	1852      	adds	r2, r2, r1
 80112ba:	eb40 0303 	adc.w	r3, r0, r3
 80112be:	1892      	adds	r2, r2, r2
 80112c0:	415b      	adcs	r3, r3
 80112c2:	4809      	ldr	r0, [pc, #36]	; (80112e8 <ipv6_nd_restart_reachable_timer+0x9c>)
 80112c4:	f004 fe26 	bl	8015f14 <k_work_reschedule>
	}
}
 80112c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return t / ((uint64_t)from_hz / to_hz);
 80112cc:	220a      	movs	r2, #10
 80112ce:	2300      	movs	r3, #0
 80112d0:	4630      	mov	r0, r6
 80112d2:	4639      	mov	r1, r7
 80112d4:	f7ef fc32 	bl	8000b3c <__aeabi_uldivmod>
 80112d8:	e7db      	b.n	8011292 <ipv6_nd_restart_reachable_timer+0x46>
		k_work_reschedule(&ipv6_nd_reachable_timer, K_MSEC(time));
 80112da:	2100      	movs	r1, #0
 80112dc:	4608      	mov	r0, r1
 80112de:	e7e7      	b.n	80112b0 <ipv6_nd_restart_reachable_timer+0x64>
 80112e0:	200029d8 	.word	0x200029d8
 80112e4:	cccccccd 	.word	0xcccccccd
 80112e8:	200029c8 	.word	0x200029c8

080112ec <ipv6_ns_reply_timeout>:
{
 80112ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112f0:	f00b f98a 	bl	801c608 <z_impl_k_uptime_ticks>
 80112f4:	220a      	movs	r2, #10
 80112f6:	2300      	movs	r3, #0
 80112f8:	f7ef fc20 	bl	8000b3c <__aeabi_uldivmod>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
 80112fc:	4605      	mov	r5, r0
 80112fe:	4688      	mov	r8, r1
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 8011300:	2400      	movs	r4, #0
 8011302:	e006      	b.n	8011312 <ipv6_ns_reply_timeout+0x26>
	return z_timeout_remaining(&dwork->timeout);
 8011304:	482a      	ldr	r0, [pc, #168]	; (80113b0 <ipv6_ns_reply_timeout+0xc4>)
 8011306:	f00b f938 	bl	801c57a <z_timeout_remaining>
			if (!k_work_delayable_remaining_get(
 801130a:	ea50 0301 	orrs.w	r3, r0, r1
 801130e:	d035      	beq.n	801137c <ipv6_ns_reply_timeout+0x90>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 8011310:	3401      	adds	r4, #1
 8011312:	2c07      	cmp	r4, #7
 8011314:	dc49      	bgt.n	80113aa <ipv6_ns_reply_timeout+0xbe>
	return &net_neighbor_pool[idx].nbr;
 8011316:	4a27      	ldr	r2, [pc, #156]	; (80113b4 <ipv6_ns_reply_timeout+0xc8>)
 8011318:	2354      	movs	r3, #84	; 0x54
 801131a:	fb03 f304 	mul.w	r3, r3, r4
 801131e:	eb02 0903 	add.w	r9, r2, r3
		if (!nbr || !nbr->ref) {
 8011322:	5cd3      	ldrb	r3, [r2, r3]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d0f3      	beq.n	8011310 <ipv6_ns_reply_timeout+0x24>
 8011328:	f8d9 a00c 	ldr.w	sl, [r9, #12]
		if (!data) {
 801132c:	f1ba 0f00 	cmp.w	sl, #0
 8011330:	d0ee      	beq.n	8011310 <ipv6_ns_reply_timeout+0x24>
		if (!data->send_ns) {
 8011332:	e9da 010a 	ldrd	r0, r1, [sl, #40]	; 0x28
 8011336:	ea50 0301 	orrs.w	r3, r0, r1
 801133a:	d0e9      	beq.n	8011310 <ipv6_ns_reply_timeout+0x24>
		remaining = data->send_ns + NS_REPLY_TIMEOUT - current;
 801133c:	f510 727a 	adds.w	r2, r0, #1000	; 0x3e8
 8011340:	f141 0300 	adc.w	r3, r1, #0
 8011344:	1b56      	subs	r6, r2, r5
 8011346:	eb63 0708 	sbc.w	r7, r3, r8
		if (remaining > 0) {
 801134a:	2e01      	cmp	r6, #1
 801134c:	f177 0300 	sbcs.w	r3, r7, #0
 8011350:	dad8      	bge.n	8011304 <ipv6_ns_reply_timeout+0x18>
		data->send_ns = 0;
 8011352:	2200      	movs	r2, #0
 8011354:	2300      	movs	r3, #0
 8011356:	e9ca 230a 	strd	r2, r3, [sl, #40]	; 0x28
		if (!data->pending) {
 801135a:	f8da 0000 	ldr.w	r0, [sl]
 801135e:	2800      	cmp	r0, #0
 8011360:	d0d6      	beq.n	8011310 <ipv6_ns_reply_timeout+0x24>
		net_pkt_unref(data->pending);
 8011362:	f009 f819 	bl	801a398 <net_pkt_unref>
		net_pkt_unref(data->pending);
 8011366:	f8da 0000 	ldr.w	r0, [sl]
 801136a:	f009 f815 	bl	801a398 <net_pkt_unref>
		data->pending = NULL;
 801136e:	2300      	movs	r3, #0
 8011370:	f8ca 3000 	str.w	r3, [sl]
		net_nbr_unref(nbr);
 8011374:	4648      	mov	r0, r9
 8011376:	f009 fe18 	bl	801afaa <net_nbr_unref>
 801137a:	e7c9      	b.n	8011310 <ipv6_ns_reply_timeout+0x24>
						  K_MSEC(remaining));
 801137c:	4631      	mov	r1, r6
 801137e:	4638      	mov	r0, r7
 8011380:	2e00      	cmp	r6, #0
 8011382:	f177 0300 	sbcs.w	r3, r7, #0
 8011386:	db0d      	blt.n	80113a4 <ipv6_ns_reply_timeout+0xb8>
			return t * ((uint64_t)to_hz / from_hz);
 8011388:	ea4f 0c80 	mov.w	ip, r0, lsl #2
 801138c:	008a      	lsls	r2, r1, #2
 801138e:	ea4c 7391 	orr.w	r3, ip, r1, lsr #30
 8011392:	1852      	adds	r2, r2, r1
 8011394:	eb40 0303 	adc.w	r3, r0, r3
				k_work_reschedule(&ipv6_ns_reply_timer,
 8011398:	1892      	adds	r2, r2, r2
 801139a:	415b      	adcs	r3, r3
 801139c:	4806      	ldr	r0, [pc, #24]	; (80113b8 <ipv6_ns_reply_timeout+0xcc>)
 801139e:	f004 fdb9 	bl	8015f14 <k_work_reschedule>
			continue;
 80113a2:	e7b5      	b.n	8011310 <ipv6_ns_reply_timeout+0x24>
						  K_MSEC(remaining));
 80113a4:	2100      	movs	r1, #0
 80113a6:	4608      	mov	r0, r1
 80113a8:	e7ee      	b.n	8011388 <ipv6_ns_reply_timeout+0x9c>
}
 80113aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113ae:	bf00      	nop
 80113b0:	20002a08 	.word	0x20002a08
 80113b4:	2000083c 	.word	0x2000083c
 80113b8:	200029f8 	.word	0x200029f8

080113bc <net_ipv6_nbr_rm>:
{
 80113bc:	b570      	push	{r4, r5, r6, lr}
 80113be:	4604      	mov	r4, r0
 80113c0:	460d      	mov	r5, r1
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
 80113c2:	460a      	mov	r2, r1
 80113c4:	4601      	mov	r1, r0
 80113c6:	4816      	ldr	r0, [pc, #88]	; (8011420 <net_ipv6_nbr_rm+0x64>)
 80113c8:	f7ff fea4 	bl	8011114 <nbr_lookup>
	if (!nbr) {
 80113cc:	b330      	cbz	r0, 801141c <net_ipv6_nbr_rm+0x60>
 80113ce:	4606      	mov	r6, r0
	net_route_del_by_nexthop(iface, addr);
 80113d0:	4629      	mov	r1, r5
 80113d2:	4620      	mov	r0, r4
 80113d4:	f002 f8ec 	bl	80135b0 <net_route_del_by_nexthop>
 80113d8:	68f5      	ldr	r5, [r6, #12]
	data->send_ns = 0;
 80113da:	2200      	movs	r2, #0
 80113dc:	2300      	movs	r3, #0
 80113de:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
	if (data->pending) {
 80113e2:	6828      	ldr	r0, [r5, #0]
 80113e4:	b118      	cbz	r0, 80113ee <net_ipv6_nbr_rm+0x32>
		net_pkt_unref(data->pending);
 80113e6:	f008 ffd7 	bl	801a398 <net_pkt_unref>
		data->pending = NULL;
 80113ea:	2300      	movs	r3, #0
 80113ec:	602b      	str	r3, [r5, #0]
 80113ee:	68f3      	ldr	r3, [r6, #12]
	net_ipv6_nbr_data(nbr)->reachable = 0;
 80113f0:	2000      	movs	r0, #0
 80113f2:	2100      	movs	r1, #0
 80113f4:	e9c3 0106 	strd	r0, r1, [r3, #24]
 80113f8:	68f3      	ldr	r3, [r6, #12]
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
 80113fa:	2500      	movs	r5, #0
 80113fc:	621d      	str	r5, [r3, #32]
	net_nbr_unref(nbr);
 80113fe:	4630      	mov	r0, r6
 8011400:	f009 fdd3 	bl	801afaa <net_nbr_unref>
	net_nbr_unlink(nbr, NULL);
 8011404:	4629      	mov	r1, r5
 8011406:	4630      	mov	r0, r6
 8011408:	f7ff fb96 	bl	8010b38 <net_nbr_unlink>
 801140c:	462b      	mov	r3, r5
 801140e:	462a      	mov	r2, r5
 8011410:	4621      	mov	r1, r4
 8011412:	4804      	ldr	r0, [pc, #16]	; (8011424 <net_ipv6_nbr_rm+0x68>)
 8011414:	f7fe f9f0 	bl	800f7f8 <net_mgmt_event_notify_with_info>
	return true;
 8011418:	2001      	movs	r0, #1
}
 801141a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
 801141c:	2000      	movs	r0, #0
 801141e:	e7fc      	b.n	801141a <net_ipv6_nbr_rm+0x5e>
 8011420:	20000830 	.word	0x20000830
 8011424:	e0600010 	.word	0xe0600010

08011428 <ipv6_nd_remove_old_stale_nbr>:
{
 8011428:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
 801142a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801142e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011432:	481e      	ldr	r0, [pc, #120]	; (80114ac <ipv6_nd_remove_old_stale_nbr+0x84>)
 8011434:	f004 fba6 	bl	8015b84 <z_impl_k_sem_take>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 8011438:	2300      	movs	r3, #0
	uint32_t oldest = UINT32_MAX;
 801143a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	int nbr_idx = -1;
 801143e:	4620      	mov	r0, r4
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 8011440:	e002      	b.n	8011448 <ipv6_nd_remove_old_stale_nbr+0x20>
			oldest = data->stale_counter;
 8011442:	6b94      	ldr	r4, [r2, #56]	; 0x38
			nbr_idx = i;
 8011444:	4618      	mov	r0, r3
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 8011446:	3301      	adds	r3, #1
 8011448:	2b07      	cmp	r3, #7
 801144a:	dc1d      	bgt.n	8011488 <ipv6_nd_remove_old_stale_nbr+0x60>
		if (!nbr || !nbr->ref) {
 801144c:	2254      	movs	r2, #84	; 0x54
 801144e:	fb02 f203 	mul.w	r2, r2, r3
 8011452:	4917      	ldr	r1, [pc, #92]	; (80114b0 <ipv6_nd_remove_old_stale_nbr+0x88>)
 8011454:	5c8a      	ldrb	r2, [r1, r2]
 8011456:	2a00      	cmp	r2, #0
 8011458:	d0f5      	beq.n	8011446 <ipv6_nd_remove_old_stale_nbr+0x1e>
 801145a:	2254      	movs	r2, #84	; 0x54
 801145c:	fb02 1203 	mla	r2, r2, r3, r1
 8011460:	68d2      	ldr	r2, [r2, #12]
		if (!data || data->is_router ||
 8011462:	2a00      	cmp	r2, #0
 8011464:	d0ef      	beq.n	8011446 <ipv6_nd_remove_old_stale_nbr+0x1e>
 8011466:	f892 1035 	ldrb.w	r1, [r2, #53]	; 0x35
 801146a:	2900      	cmp	r1, #0
 801146c:	d1eb      	bne.n	8011446 <ipv6_nd_remove_old_stale_nbr+0x1e>
		    data->state != NET_IPV6_NBR_STATE_STALE) {
 801146e:	f892 1030 	ldrb.w	r1, [r2, #48]	; 0x30
		if (!data || data->is_router ||
 8011472:	2902      	cmp	r1, #2
 8011474:	d1e7      	bne.n	8011446 <ipv6_nd_remove_old_stale_nbr+0x1e>
		if (nbr_idx == -1) {
 8011476:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801147a:	d0e2      	beq.n	8011442 <ipv6_nd_remove_old_stale_nbr+0x1a>
		if (oldest == MIN(oldest, data->stale_counter)) {
 801147c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 801147e:	42a2      	cmp	r2, r4
 8011480:	d2e1      	bcs.n	8011446 <ipv6_nd_remove_old_stale_nbr+0x1e>
		oldest = data->stale_counter;
 8011482:	4614      	mov	r4, r2
		nbr_idx = i;
 8011484:	4618      	mov	r0, r3
 8011486:	e7de      	b.n	8011446 <ipv6_nd_remove_old_stale_nbr+0x1e>
	if (nbr_idx != -1) {
 8011488:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801148c:	d103      	bne.n	8011496 <ipv6_nd_remove_old_stale_nbr+0x6e>
	z_impl_k_sem_give(sem);
 801148e:	4807      	ldr	r0, [pc, #28]	; (80114ac <ipv6_nd_remove_old_stale_nbr+0x84>)
 8011490:	f004 fb50 	bl	8015b34 <z_impl_k_sem_give>
}
 8011494:	bd10      	pop	{r4, pc}
 8011496:	4b06      	ldr	r3, [pc, #24]	; (80114b0 <ipv6_nd_remove_old_stale_nbr+0x88>)
 8011498:	2254      	movs	r2, #84	; 0x54
 801149a:	fb02 3000 	mla	r0, r2, r0, r3
 801149e:	68c1      	ldr	r1, [r0, #12]
		net_ipv6_nbr_rm(nbr->iface,
 80114a0:	3104      	adds	r1, #4
 80114a2:	6880      	ldr	r0, [r0, #8]
 80114a4:	f7ff ff8a 	bl	80113bc <net_ipv6_nbr_rm>
 80114a8:	e7f1      	b.n	801148e <ipv6_nd_remove_old_stale_nbr+0x66>
 80114aa:	bf00      	nop
 80114ac:	200034c0 	.word	0x200034c0
 80114b0:	2000083c 	.word	0x2000083c

080114b4 <add_nbr>:
{
 80114b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114b6:	4604      	mov	r4, r0
 80114b8:	460d      	mov	r5, r1
 80114ba:	4616      	mov	r6, r2
 80114bc:	461f      	mov	r7, r3
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
 80114be:	460a      	mov	r2, r1
 80114c0:	4601      	mov	r1, r0
 80114c2:	480b      	ldr	r0, [pc, #44]	; (80114f0 <add_nbr+0x3c>)
 80114c4:	f7ff fe26 	bl	8011114 <nbr_lookup>
	if (nbr) {
 80114c8:	b100      	cbz	r0, 80114cc <add_nbr+0x18>
}
 80114ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nbr = nbr_new(iface, addr, is_router, state);
 80114cc:	463b      	mov	r3, r7
 80114ce:	4632      	mov	r2, r6
 80114d0:	4629      	mov	r1, r5
 80114d2:	4620      	mov	r0, r4
 80114d4:	f7ff fe8c 	bl	80111f0 <nbr_new>
	if (nbr) {
 80114d8:	2800      	cmp	r0, #0
 80114da:	d1f6      	bne.n	80114ca <add_nbr+0x16>
	ipv6_nd_remove_old_stale_nbr();
 80114dc:	f7ff ffa4 	bl	8011428 <ipv6_nd_remove_old_stale_nbr>
	nbr = nbr_new(iface, addr, is_router, state);
 80114e0:	463b      	mov	r3, r7
 80114e2:	4632      	mov	r2, r6
 80114e4:	4629      	mov	r1, r5
 80114e6:	4620      	mov	r0, r4
 80114e8:	f7ff fe82 	bl	80111f0 <nbr_new>
	if (!nbr) {
 80114ec:	e7ed      	b.n	80114ca <add_nbr+0x16>
 80114ee:	bf00      	nop
 80114f0:	20000830 	.word	0x20000830

080114f4 <net_ipv6_nbr_lookup>:
{
 80114f4:	b508      	push	{r3, lr}
 80114f6:	460a      	mov	r2, r1
	return nbr_lookup(&net_neighbor.table, iface, addr);
 80114f8:	4601      	mov	r1, r0
 80114fa:	4802      	ldr	r0, [pc, #8]	; (8011504 <net_ipv6_nbr_lookup+0x10>)
 80114fc:	f7ff fe0a 	bl	8011114 <nbr_lookup>
}
 8011500:	bd08      	pop	{r3, pc}
 8011502:	bf00      	nop
 8011504:	20000830 	.word	0x20000830

08011508 <net_ipv6_send_na>:
{
 8011508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801150c:	b087      	sub	sp, #28
 801150e:	4605      	mov	r5, r0
 8011510:	460e      	mov	r6, r1
 8011512:	4617      	mov	r7, r2
 8011514:	4698      	mov	r8, r3
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
 8011516:	2300      	movs	r3, #0
 8011518:	9304      	str	r3, [sp, #16]
 801151a:	2314      	movs	r3, #20
 801151c:	9305      	str	r3, [sp, #20]
	return &iface->if_dev->link_addr;
 801151e:	6803      	ldr	r3, [r0, #0]
	uint8_t total_len = net_if_get_link_addr(iface)->len +
 8011520:	7d1c      	ldrb	r4, [r3, #20]
	return ROUND_UP(total_len, 8U);
 8011522:	3409      	adds	r4, #9
 8011524:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
	pkt = net_pkt_alloc_with_buffer(iface,
 8011528:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801152c:	2300      	movs	r3, #0
 801152e:	e9cd 2300 	strd	r2, r3, [sp]
 8011532:	233a      	movs	r3, #58	; 0x3a
 8011534:	2202      	movs	r2, #2
 8011536:	f104 0114 	add.w	r1, r4, #20
 801153a:	f7fe fb23 	bl	800fb84 <net_pkt_alloc_with_buffer>
	if (!pkt) {
 801153e:	2800      	cmp	r0, #0
 8011540:	f000 808c 	beq.w	801165c <net_ipv6_send_na+0x154>
 8011544:	4681      	mov	r9, r0
	pkt->ipv6_hop_limit = hop_limit;
 8011546:	23ff      	movs	r3, #255	; 0xff
 8011548:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
	if (net_ipv6_create(pkt, src, dst) ||
 801154c:	463a      	mov	r2, r7
 801154e:	4631      	mov	r1, r6
 8011550:	f009 fda1 	bl	801b096 <net_ipv6_create>
 8011554:	b140      	cbz	r0, 8011568 <net_ipv6_send_na+0x60>
	int ret = -ENOBUFS;
 8011556:	f06f 0668 	mvn.w	r6, #104	; 0x68
	net_pkt_unref(pkt);
 801155a:	4648      	mov	r0, r9
 801155c:	f008 ff1c 	bl	801a398 <net_pkt_unref>
}
 8011560:	4630      	mov	r0, r6
 8011562:	b007      	add	sp, #28
 8011564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    net_icmpv6_create(pkt, NET_ICMPV6_NA, 0)) {
 8011568:	2200      	movs	r2, #0
 801156a:	2188      	movs	r1, #136	; 0x88
 801156c:	4648      	mov	r0, r9
 801156e:	f009 fd01 	bl	801af74 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, dst) ||
 8011572:	2800      	cmp	r0, #0
 8011574:	d1ef      	bne.n	8011556 <net_ipv6_send_na+0x4e>
	na_hdr = (struct net_icmpv6_na_hdr *)net_pkt_get_data(pkt, &na_access);
 8011576:	a904      	add	r1, sp, #16
 8011578:	4648      	mov	r0, r9
 801157a:	f7fe fb27 	bl	800fbcc <net_pkt_get_data>
	if (!na_hdr) {
 801157e:	4603      	mov	r3, r0
 8011580:	2800      	cmp	r0, #0
 8011582:	d068      	beq.n	8011656 <net_ipv6_send_na+0x14e>
 8011584:	2200      	movs	r2, #0
 8011586:	6002      	str	r2, [r0, #0]
 8011588:	6042      	str	r2, [r0, #4]
 801158a:	6082      	str	r2, [r0, #8]
 801158c:	60c2      	str	r2, [r0, #12]
 801158e:	6102      	str	r2, [r0, #16]
	na_hdr->flags = flags;
 8011590:	4602      	mov	r2, r0
 8011592:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8011596:	f802 1b04 	strb.w	r1, [r2], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 801159a:	f8d8 7000 	ldr.w	r7, [r8]
 801159e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 80115a2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80115a6:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80115aa:	605f      	str	r7, [r3, #4]
 80115ac:	6056      	str	r6, [r2, #4]
 80115ae:	6090      	str	r0, [r2, #8]
 80115b0:	60d1      	str	r1, [r2, #12]
	if (net_pkt_set_data(pkt, &na_access)) {
 80115b2:	a904      	add	r1, sp, #16
 80115b4:	4648      	mov	r0, r9
 80115b6:	f009 f91e 	bl	801a7f6 <net_pkt_set_data>
 80115ba:	4606      	mov	r6, r0
 80115bc:	b110      	cbz	r0, 80115c4 <net_ipv6_send_na+0xbc>
	int ret = -ENOBUFS;
 80115be:	f06f 0668 	mvn.w	r6, #104	; 0x68
 80115c2:	e7ca      	b.n	801155a <net_ipv6_send_na+0x52>
 80115c4:	682f      	ldr	r7, [r5, #0]
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
 80115c6:	2202      	movs	r2, #2
 80115c8:	f88d 200c 	strb.w	r2, [sp, #12]
 80115cc:	08e3      	lsrs	r3, r4, #3
 80115ce:	f88d 300d 	strb.w	r3, [sp, #13]
	if (net_pkt_write(pkt, &opt_hdr,
 80115d2:	a903      	add	r1, sp, #12
 80115d4:	4648      	mov	r0, r9
 80115d6:	f009 f8f3 	bl	801a7c0 <net_pkt_write>
 80115da:	b120      	cbz	r0, 80115e6 <net_ipv6_send_na+0xde>
		return false;
 80115dc:	2300      	movs	r3, #0
	if (!set_llao(pkt, net_if_get_link_addr(iface),
 80115de:	b9a3      	cbnz	r3, 801160a <net_ipv6_send_na+0x102>
	int ret = -ENOBUFS;
 80115e0:	f06f 0668 	mvn.w	r6, #104	; 0x68
 80115e4:	e7b9      	b.n	801155a <net_ipv6_send_na+0x52>
	    net_pkt_write(pkt, lladdr->addr, lladdr->len) ||
 80115e6:	7d3a      	ldrb	r2, [r7, #20]
 80115e8:	6939      	ldr	r1, [r7, #16]
 80115ea:	4648      	mov	r0, r9
 80115ec:	f009 f8e8 	bl	801a7c0 <net_pkt_write>
			  sizeof(struct net_icmpv6_nd_opt_hdr)) ||
 80115f0:	2800      	cmp	r0, #0
 80115f2:	d1f3      	bne.n	80115dc <net_ipv6_send_na+0xd4>
	    net_pkt_memset(pkt, 0, llao_len - lladdr->len - 2)) {
 80115f4:	7d3a      	ldrb	r2, [r7, #20]
 80115f6:	1aa2      	subs	r2, r4, r2
 80115f8:	3a02      	subs	r2, #2
 80115fa:	2100      	movs	r1, #0
 80115fc:	4648      	mov	r0, r9
 80115fe:	f008 ffae 	bl	801a55e <net_pkt_memset>
	    net_pkt_write(pkt, lladdr->addr, lladdr->len) ||
 8011602:	2800      	cmp	r0, #0
 8011604:	d1ea      	bne.n	80115dc <net_ipv6_send_na+0xd4>
	return true;
 8011606:	2301      	movs	r3, #1
 8011608:	e7e9      	b.n	80115de <net_ipv6_send_na+0xd6>
	net_pkt_cursor_init(pkt);
 801160a:	4648      	mov	r0, r9
 801160c:	f008 ff25 	bl	801a45a <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
 8011610:	213a      	movs	r1, #58	; 0x3a
 8011612:	4648      	mov	r0, r9
 8011614:	f009 fd7e 	bl	801b114 <net_ipv6_finalize>
	if (net_send_data(pkt) < 0) {
 8011618:	4648      	mov	r0, r9
 801161a:	f7fa ffab 	bl	800c574 <net_send_data>
 801161e:	2800      	cmp	r0, #0
 8011620:	db0b      	blt.n	801163a <net_ipv6_send_na+0x132>
	UPDATE_STAT(iface, stats.ipv6_nd.sent++);
 8011622:	4a10      	ldr	r2, [pc, #64]	; (8011664 <net_ipv6_send_na+0x15c>)
 8011624:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 8011628:	3301      	adds	r3, #1
 801162a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 801162e:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8011632:	3301      	adds	r3, #1
 8011634:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	return 0;
 8011638:	e792      	b.n	8011560 <net_ipv6_send_na+0x58>
	UPDATE_STAT(iface, stats.ipv6_nd.drop++);
 801163a:	4a0a      	ldr	r2, [pc, #40]	; (8011664 <net_ipv6_send_na+0x15c>)
 801163c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8011640:	3301      	adds	r3, #1
 8011642:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8011646:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 801164a:	3301      	adds	r3, #1
 801164c:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
		ret = -EINVAL;
 8011650:	f06f 0615 	mvn.w	r6, #21
		goto drop;
 8011654:	e781      	b.n	801155a <net_ipv6_send_na+0x52>
	int ret = -ENOBUFS;
 8011656:	f06f 0668 	mvn.w	r6, #104	; 0x68
 801165a:	e77e      	b.n	801155a <net_ipv6_send_na+0x52>
		return -ENOMEM;
 801165c:	f06f 060b 	mvn.w	r6, #11
 8011660:	e77e      	b.n	8011560 <net_ipv6_send_na+0x58>
 8011662:	bf00      	nop
 8011664:	20002a58 	.word	0x20002a58

08011668 <handle_na_input>:
}

static enum net_verdict handle_na_input(struct net_pkt *pkt,
					struct net_ipv6_hdr *ip_hdr,
					struct net_icmp_hdr *icmp_hdr)
{
 8011668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801166c:	b09c      	sub	sp, #112	; 0x70
 801166e:	4604      	mov	r4, r0
 8011670:	4688      	mov	r8, r1
 8011672:	4616      	mov	r6, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(na_access,
 8011674:	2500      	movs	r5, #0
 8011676:	9508      	str	r5, [sp, #32]
 8011678:	2314      	movs	r3, #20
 801167a:	9309      	str	r3, [sp, #36]	; 0x24
					      struct net_icmpv6_na_hdr);
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
 801167c:	ab07      	add	r3, sp, #28
 801167e:	9305      	str	r3, [sp, #20]
 8011680:	2302      	movs	r3, #2
 8011682:	9306      	str	r3, [sp, #24]
	return net_buf_frags_len(pkt->frags);
 8011684:	6883      	ldr	r3, [r0, #8]
	while (buf) {
 8011686:	b11b      	cbz	r3, 8011690 <handle_na_input+0x28>
		bytes += buf->len;
 8011688:	899a      	ldrh	r2, [r3, #12]
 801168a:	4415      	add	r5, r2
		buf = buf->frags;
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	e7fa      	b.n	8011686 <handle_na_input+0x1e>
	uint16_t length = net_pkt_get_len(pkt);
 8011690:	b2ad      	uxth	r5, r5
	uint16_t tllao_offset = 0U;
	struct net_icmpv6_nd_opt_hdr *nd_opt_hdr;
	struct net_icmpv6_na_hdr *na_hdr;
	struct net_if_addr *ifaddr;

	na_hdr = (struct net_icmpv6_na_hdr *)net_pkt_get_data(pkt, &na_access);
 8011692:	a908      	add	r1, sp, #32
 8011694:	4620      	mov	r0, r4
 8011696:	f7fe fa99 	bl	800fbcc <net_pkt_get_data>
	if (!na_hdr) {
 801169a:	4607      	mov	r7, r0
 801169c:	b328      	cbz	r0, 80116ea <handle_na_input+0x82>
	return pkt->iface;
 801169e:	69a2      	ldr	r2, [r4, #24]
	UPDATE_STAT(iface, stats.ipv6_nd.recv++);
 80116a0:	49b4      	ldr	r1, [pc, #720]	; (8011974 <handle_na_input+0x30c>)
 80116a2:	f8d1 30a4 	ldr.w	r3, [r1, #164]	; 0xa4
 80116a6:	3301      	adds	r3, #1
 80116a8:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
 80116ac:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 80116b0:	3301      	adds	r3, #1
 80116b2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	dbg_addr_recv_tgt("Neighbor Advertisement",
			  &ip_hdr->src, &ip_hdr->dst, &na_hdr->tgt, pkt);

	net_stats_update_ipv6_nd_recv(net_pkt_iface(pkt));

	if (((length < (sizeof(struct net_ipv6_hdr) +
 80116b6:	2d41      	cmp	r5, #65	; 0x41
 80116b8:	d903      	bls.n	80116c2 <handle_na_input+0x5a>
			sizeof(struct net_icmp_hdr) +
			sizeof(struct net_icmpv6_na_hdr) +
			sizeof(struct net_icmpv6_nd_opt_hdr))) ||
	     (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
 80116ba:	f898 3007 	ldrb.w	r3, [r8, #7]
			sizeof(struct net_icmpv6_nd_opt_hdr))) ||
 80116be:	2bff      	cmp	r3, #255	; 0xff
 80116c0:	d037      	beq.n	8011732 <handle_na_input+0xca>
	     net_ipv6_is_addr_mcast((struct in6_addr *)na_hdr->tgt) ||
	     (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED &&
	      net_ipv6_is_addr_mcast((struct in6_addr *)ip_hdr->dst))) &&
	    (icmp_hdr->code != 0U)) {
 80116c2:	7873      	ldrb	r3, [r6, #1]
	      net_ipv6_is_addr_mcast((struct in6_addr *)ip_hdr->dst))) &&
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	f040 8096 	bne.w	80117f6 <handle_na_input+0x18e>
	return net_pkt_skip(pkt, access->size);
 80116ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80116cc:	4620      	mov	r0, r4
 80116ce:	f008 ff3a 	bl	801a546 <net_pkt_skip>
	pkt->ipv6_ext_opt_len = len;
 80116d2:	2314      	movs	r3, #20
 80116d4:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
	}

	net_pkt_acknowledge_data(pkt, &na_access);

	net_pkt_set_ipv6_ext_opt_len(pkt, sizeof(struct net_icmpv6_na_hdr));
	length -= (sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr));
 80116d8:	3d2c      	subs	r5, #44	; 0x2c
 80116da:	b2ad      	uxth	r5, r5

	nd_opt_hdr = (struct net_icmpv6_nd_opt_hdr *)
				net_pkt_get_data(pkt, &nd_access);
 80116dc:	eb0d 0103 	add.w	r1, sp, r3
 80116e0:	4620      	mov	r0, r4
 80116e2:	f7fe fa73 	bl	800fbcc <net_pkt_get_data>
	uint16_t tllao_offset = 0U;
 80116e6:	2600      	movs	r6, #0

	while (nd_opt_hdr && nd_opt_hdr->len &&
 80116e8:	e03f      	b.n	801176a <handle_na_input+0x102>
		NET_ERR("DROP: NULL NA header");
 80116ea:	4ba3      	ldr	r3, [pc, #652]	; (8011978 <handle_na_input+0x310>)
 80116ec:	9314      	str	r3, [sp, #80]	; 0x50
 80116ee:	2300      	movs	r3, #0
 80116f0:	f8ad 300d 	strh.w	r3, [sp, #13]
 80116f4:	f88d 300f 	strb.w	r3, [sp, #15]
 80116f8:	2202      	movs	r2, #2
 80116fa:	f88d 200c 	strb.w	r2, [sp, #12]
 80116fe:	f88d 300e 	strb.w	r3, [sp, #14]
 8011702:	9a03      	ldr	r2, [sp, #12]
 8011704:	9213      	str	r2, [sp, #76]	; 0x4c
 8011706:	461a      	mov	r2, r3
 8011708:	f363 0200 	bfi	r2, r3, #0, #1
 801170c:	f363 0241 	bfi	r2, r3, #1, #1
 8011710:	f363 0282 	bfi	r2, r3, #2, #1
 8011714:	f363 02c5 	bfi	r2, r3, #3, #3
 8011718:	2101      	movs	r1, #1
 801171a:	f361 1288 	bfi	r2, r1, #6, #3
 801171e:	2108      	movs	r1, #8
 8011720:	f361 2252 	bfi	r2, r1, #9, #10
 8011724:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8011728:	4994      	ldr	r1, [pc, #592]	; (801197c <handle_na_input+0x314>)
 801172a:	a810      	add	r0, sp, #64	; 0x40
 801172c:	f006 fb11 	bl	8017d52 <z_log_msg2_finalize>
		goto drop;
 8011730:	e061      	b.n	80117f6 <handle_na_input+0x18e>
	return addr->s6_addr[0] == 0xFF;
 8011732:	7903      	ldrb	r3, [r0, #4]
	     (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
 8011734:	2bff      	cmp	r3, #255	; 0xff
 8011736:	d0c4      	beq.n	80116c2 <handle_na_input+0x5a>
	     (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED &&
 8011738:	7803      	ldrb	r3, [r0, #0]
	     net_ipv6_is_addr_mcast((struct in6_addr *)na_hdr->tgt) ||
 801173a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801173e:	d0c4      	beq.n	80116ca <handle_na_input+0x62>
 8011740:	f898 3018 	ldrb.w	r3, [r8, #24]
	     (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED &&
 8011744:	2bff      	cmp	r3, #255	; 0xff
 8011746:	d1c0      	bne.n	80116ca <handle_na_input+0x62>
 8011748:	e7bb      	b.n	80116c2 <handle_na_input+0x5a>

		prev_opt_len = net_pkt_ipv6_ext_opt_len(pkt);

		net_pkt_set_ipv6_ext_opt_len(pkt,
					     net_pkt_ipv6_ext_opt_len(pkt) +
					     (nd_opt_hdr->len << 3));
 801174a:	00db      	lsls	r3, r3, #3
 801174c:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
 801174e:	4413      	add	r3, r2
 8011750:	b2db      	uxtb	r3, r3
 8011752:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56

		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
 8011756:	4293      	cmp	r3, r2
 8011758:	d91f      	bls.n	801179a <handle_na_input+0x132>
	return net_pkt_skip(pkt, access->size);
 801175a:	9906      	ldr	r1, [sp, #24]
 801175c:	4620      	mov	r0, r4
 801175e:	f008 fef2 	bl	801a546 <net_pkt_skip>
			goto drop;
		}

		net_pkt_acknowledge_data(pkt, &nd_access);
		nd_opt_hdr = (struct net_icmpv6_nd_opt_hdr *)
					net_pkt_get_data(pkt, &nd_access);
 8011762:	a905      	add	r1, sp, #20
 8011764:	4620      	mov	r0, r4
 8011766:	f7fe fa31 	bl	800fbcc <net_pkt_get_data>
	while (nd_opt_hdr && nd_opt_hdr->len &&
 801176a:	2800      	cmp	r0, #0
 801176c:	d039      	beq.n	80117e2 <handle_na_input+0x17a>
 801176e:	7843      	ldrb	r3, [r0, #1]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d036      	beq.n	80117e2 <handle_na_input+0x17a>
	return pkt->ipv6_ext_opt_len;
 8011774:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
	       net_pkt_ipv6_ext_opt_len(pkt) < length) {
 8011778:	b291      	uxth	r1, r2
	while (nd_opt_hdr && nd_opt_hdr->len &&
 801177a:	42a9      	cmp	r1, r5
 801177c:	d231      	bcs.n	80117e2 <handle_na_input+0x17a>
		switch (nd_opt_hdr->type) {
 801177e:	7800      	ldrb	r0, [r0, #0]
 8011780:	2802      	cmp	r0, #2
 8011782:	d1e2      	bne.n	801174a <handle_na_input+0xe2>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
 8011784:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
	return pkt->ipv6_ext_len;
 8011788:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801178c:	4406      	add	r6, r0
				sizeof(struct net_icmp_hdr) +
 801178e:	fa11 f686 	uxtah	r6, r1, r6
 8011792:	b2b6      	uxth	r6, r6
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
 8011794:	3606      	adds	r6, #6
 8011796:	b2b6      	uxth	r6, r6
			break;
 8011798:	e7d7      	b.n	801174a <handle_na_input+0xe2>
			NET_ERR("DROP: Corrupted NA message");
 801179a:	4b79      	ldr	r3, [pc, #484]	; (8011980 <handle_na_input+0x318>)
 801179c:	930e      	str	r3, [sp, #56]	; 0x38
 801179e:	2300      	movs	r3, #0
 80117a0:	f8ad 300d 	strh.w	r3, [sp, #13]
 80117a4:	f88d 300f 	strb.w	r3, [sp, #15]
 80117a8:	2202      	movs	r2, #2
 80117aa:	f88d 200c 	strb.w	r2, [sp, #12]
 80117ae:	f88d 300e 	strb.w	r3, [sp, #14]
 80117b2:	9a03      	ldr	r2, [sp, #12]
 80117b4:	920d      	str	r2, [sp, #52]	; 0x34
 80117b6:	461a      	mov	r2, r3
 80117b8:	f363 0200 	bfi	r2, r3, #0, #1
 80117bc:	f363 0241 	bfi	r2, r3, #1, #1
 80117c0:	f363 0282 	bfi	r2, r3, #2, #1
 80117c4:	f363 02c5 	bfi	r2, r3, #3, #3
 80117c8:	2101      	movs	r1, #1
 80117ca:	f361 1288 	bfi	r2, r1, #6, #3
 80117ce:	2108      	movs	r1, #8
 80117d0:	f361 2252 	bfi	r2, r1, #9, #10
 80117d4:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80117d8:	4968      	ldr	r1, [pc, #416]	; (801197c <handle_na_input+0x314>)
 80117da:	a80a      	add	r0, sp, #40	; 0x28
 80117dc:	f006 fab9 	bl	8017d52 <z_log_msg2_finalize>
			goto drop;
 80117e0:	e009      	b.n	80117f6 <handle_na_input+0x18e>
	}

	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
						  (struct in6_addr *)na_hdr->tgt);
 80117e2:	1d3d      	adds	r5, r7, #4
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
 80117e4:	4629      	mov	r1, r5
 80117e6:	69a0      	ldr	r0, [r4, #24]
 80117e8:	f7fc f8a8 	bl	800d93c <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
 80117ec:	2800      	cmp	r0, #0
 80117ee:	d040      	beq.n	8011872 <handle_na_input+0x20a>
			net_pkt_iface(pkt),
			net_if_get_by_iface(net_pkt_iface(pkt)),
			log_strdup(net_sprint_ipv6_addr(&na_hdr->tgt)));

#if defined(CONFIG_NET_IPV6_DAD)
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
 80117f0:	f990 302d 	ldrsb.w	r3, [r0, #45]	; 0x2d
 80117f4:	b17b      	cbz	r3, 8011816 <handle_na_input+0x1ae>
	return pkt->iface;
 80117f6:	69a2      	ldr	r2, [r4, #24]
	UPDATE_STAT(iface, stats.ipv6_nd.drop++);
 80117f8:	495e      	ldr	r1, [pc, #376]	; (8011974 <handle_na_input+0x30c>)
 80117fa:	f8d1 30a0 	ldr.w	r3, [r1, #160]	; 0xa0
 80117fe:	3301      	adds	r3, #1
 8011800:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
 8011804:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 8011808:	3301      	adds	r3, #1
 801180a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	return NET_OK;

drop:
	net_stats_update_ipv6_nd_drop(net_pkt_iface(pkt));

	return NET_DROP;
 801180e:	2002      	movs	r0, #2
}
 8011810:	b01c      	add	sp, #112	; 0x70
 8011812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011816:	69a0      	ldr	r0, [r4, #24]
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
 8011818:	882a      	ldrh	r2, [r5, #0]
	if (net_ipv6_is_ll_addr(addr)) {
 801181a:	f248 03fe 	movw	r3, #33022	; 0x80fe
 801181e:	429a      	cmp	r2, r3
 8011820:	d003      	beq.n	801182a <handle_na_input+0x1c2>
	net_if_ipv6_dad_failed(iface, addr);
 8011822:	4629      	mov	r1, r5
 8011824:	f7fc fb8e 	bl	800df44 <net_if_ipv6_dad_failed>
		goto drop;
 8011828:	e7e5      	b.n	80117f6 <handle_na_input+0x18e>
		NET_ERR("DAD failed, no ll IPv6 address!");
 801182a:	4b56      	ldr	r3, [pc, #344]	; (8011984 <handle_na_input+0x31c>)
 801182c:	931a      	str	r3, [sp, #104]	; 0x68
 801182e:	2300      	movs	r3, #0
 8011830:	f8ad 300d 	strh.w	r3, [sp, #13]
 8011834:	f88d 300f 	strb.w	r3, [sp, #15]
 8011838:	2202      	movs	r2, #2
 801183a:	f88d 200c 	strb.w	r2, [sp, #12]
 801183e:	f88d 300e 	strb.w	r3, [sp, #14]
 8011842:	9a03      	ldr	r2, [sp, #12]
 8011844:	9219      	str	r2, [sp, #100]	; 0x64
 8011846:	461a      	mov	r2, r3
 8011848:	f363 0200 	bfi	r2, r3, #0, #1
 801184c:	f363 0241 	bfi	r2, r3, #1, #1
 8011850:	f363 0282 	bfi	r2, r3, #2, #1
 8011854:	f363 02c5 	bfi	r2, r3, #3, #3
 8011858:	2101      	movs	r1, #1
 801185a:	f361 1288 	bfi	r2, r1, #6, #3
 801185e:	2108      	movs	r1, #8
 8011860:	f361 2252 	bfi	r2, r1, #9, #10
 8011864:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8011868:	4944      	ldr	r1, [pc, #272]	; (801197c <handle_na_input+0x314>)
 801186a:	a816      	add	r0, sp, #88	; 0x58
 801186c:	f006 fa71 	bl	8017d52 <z_log_msg2_finalize>
		return false;
 8011870:	e7c1      	b.n	80117f6 <handle_na_input+0x18e>
	struct net_linkaddr_storage lladdr = { 0 };
 8011872:	2300      	movs	r3, #0
 8011874:	9301      	str	r3, [sp, #4]
 8011876:	9302      	str	r3, [sp, #8]
			 (struct in6_addr *)na_hdr->tgt);
 8011878:	f107 0804 	add.w	r8, r7, #4
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
 801187c:	4642      	mov	r2, r8
 801187e:	69a1      	ldr	r1, [r4, #24]
 8011880:	4841      	ldr	r0, [pc, #260]	; (8011988 <handle_na_input+0x320>)
 8011882:	f7ff fc47 	bl	8011114 <nbr_lookup>
	if (!nbr) {
 8011886:	4605      	mov	r5, r0
 8011888:	2800      	cmp	r0, #0
 801188a:	f000 812f 	beq.w	8011aec <handle_na_input+0x484>
	if (tllao_offset) {
 801188e:	b9be      	cbnz	r6, 80118c0 <handle_na_input+0x258>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
 8011890:	786b      	ldrb	r3, [r5, #1]
 8011892:	2bff      	cmp	r3, #255	; 0xff
 8011894:	d13a      	bne.n	801190c <handle_na_input+0x2a4>
		if (!tllao_offset) {
 8011896:	bb5e      	cbnz	r6, 80118f0 <handle_na_input+0x288>
			return false;
 8011898:	2300      	movs	r3, #0
	if (!handle_na_neighbor(pkt, na_hdr, tllao_offset)) {
 801189a:	2b00      	cmp	r3, #0
 801189c:	d0ab      	beq.n	80117f6 <handle_na_input+0x18e>
 801189e:	69a2      	ldr	r2, [r4, #24]
	UPDATE_STAT(iface, stats.ipv6_nd.sent++);
 80118a0:	4934      	ldr	r1, [pc, #208]	; (8011974 <handle_na_input+0x30c>)
 80118a2:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
 80118a6:	3301      	adds	r3, #1
 80118a8:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
 80118ac:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
 80118b0:	3301      	adds	r3, #1
 80118b2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	net_pkt_unref(pkt);
 80118b6:	4620      	mov	r0, r4
 80118b8:	f008 fd6e 	bl	801a398 <net_pkt_unref>
	return NET_OK;
 80118bc:	2000      	movs	r0, #0
 80118be:	e7a7      	b.n	8011810 <handle_na_input+0x1a8>
		lladdr.len = net_pkt_lladdr_src(pkt)->len;
 80118c0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80118c4:	f88d 3005 	strb.w	r3, [sp, #5]
		net_pkt_cursor_init(pkt);
 80118c8:	4620      	mov	r0, r4
 80118ca:	f008 fdc6 	bl	801a45a <net_pkt_cursor_init>
		if (net_pkt_skip(pkt, tllao_offset) ||
 80118ce:	4631      	mov	r1, r6
 80118d0:	4620      	mov	r0, r4
 80118d2:	f008 fe38 	bl	801a546 <net_pkt_skip>
 80118d6:	b108      	cbz	r0, 80118dc <handle_na_input+0x274>
			return false;
 80118d8:	2300      	movs	r3, #0
 80118da:	e7de      	b.n	801189a <handle_na_input+0x232>
		    net_pkt_read(pkt, lladdr.addr, lladdr.len)) {
 80118dc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80118e0:	f10d 0106 	add.w	r1, sp, #6
 80118e4:	4620      	mov	r0, r4
 80118e6:	f008 fe46 	bl	801a576 <net_pkt_read>
		if (net_pkt_skip(pkt, tllao_offset) ||
 80118ea:	2800      	cmp	r0, #0
 80118ec:	d0d0      	beq.n	8011890 <handle_na_input+0x228>
 80118ee:	e7f3      	b.n	80118d8 <handle_na_input+0x270>
		nbr_lladdr.len = lladdr.len;
 80118f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80118f4:	f88d 3010 	strb.w	r3, [sp, #16]
		nbr_lladdr.addr = lladdr.addr;
 80118f8:	f10d 0306 	add.w	r3, sp, #6
 80118fc:	9303      	str	r3, [sp, #12]
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
 80118fe:	aa03      	add	r2, sp, #12
 8011900:	69a1      	ldr	r1, [r4, #24]
 8011902:	4628      	mov	r0, r5
 8011904:	f7ff f8b8 	bl	8010a78 <net_nbr_link>
 8011908:	2800      	cmp	r0, #0
 801190a:	d13f      	bne.n	801198c <handle_na_input+0x324>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
 801190c:	7868      	ldrb	r0, [r5, #1]
 801190e:	f7ff f935 	bl	8010b7c <net_nbr_get_lladdr>
	if (!cached_lladdr) {
 8011912:	4681      	mov	r9, r0
 8011914:	2800      	cmp	r0, #0
 8011916:	f000 80eb 	beq.w	8011af0 <handle_na_input+0x488>
	if (tllao_offset) {
 801191a:	2e00      	cmp	r6, #0
 801191c:	d151      	bne.n	80119c2 <handle_na_input+0x35a>
	bool lladdr_changed = false;
 801191e:	f04f 0a00 	mov.w	sl, #0
 8011922:	68eb      	ldr	r3, [r5, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
 8011924:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8011928:	2a00      	cmp	r2, #0
 801192a:	d171      	bne.n	8011a10 <handle_na_input+0x3a8>
		if (!tllao_offset) {
 801192c:	2e00      	cmp	r6, #0
 801192e:	f000 80e1 	beq.w	8011af4 <handle_na_input+0x48c>
		if (lladdr_changed) {
 8011932:	f1ba 0f00 	cmp.w	sl, #0
 8011936:	d150      	bne.n	80119da <handle_na_input+0x372>
		if (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED) {
 8011938:	783b      	ldrb	r3, [r7, #0]
 801193a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801193e:	d062      	beq.n	8011a06 <handle_na_input+0x39e>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
 8011940:	2101      	movs	r1, #1
 8011942:	4628      	mov	r0, r5
 8011944:	f7ff fc0c 	bl	8011160 <ipv6_nbr_set_state>
 8011948:	68ea      	ldr	r2, [r5, #12]
			net_ipv6_nbr_data(nbr)->ns_count = 0U;
 801194a:	2300      	movs	r3, #0
 801194c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
 8011950:	68ea      	ldr	r2, [r5, #12]
			net_ipv6_nbr_data(nbr)->reachable = 0;
 8011952:	2000      	movs	r0, #0
 8011954:	2100      	movs	r1, #0
 8011956:	e9c2 0106 	strd	r0, r1, [r2, #24]
 801195a:	68ea      	ldr	r2, [r5, #12]
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
 801195c:	6213      	str	r3, [r2, #32]
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
 801195e:	4629      	mov	r1, r5
 8011960:	69a0      	ldr	r0, [r4, #24]
 8011962:	f009 fcc9 	bl	801b2f8 <net_ipv6_nbr_set_reachable_timer>
 8011966:	68ea      	ldr	r2, [r5, #12]
			(na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER);
 8011968:	783b      	ldrb	r3, [r7, #0]
 801196a:	09db      	lsrs	r3, r3, #7
		net_ipv6_nbr_data(nbr)->is_router =
 801196c:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
		goto send_pending;
 8011970:	e069      	b.n	8011a46 <handle_na_input+0x3de>
 8011972:	bf00      	nop
 8011974:	20002a58 	.word	0x20002a58
 8011978:	0801e4a4 	.word	0x0801e4a4
 801197c:	0801d788 	.word	0x0801d788
 8011980:	0801e4bc 	.word	0x0801e4bc
 8011984:	0801e4d8 	.word	0x0801e4d8
 8011988:	20000830 	.word	0x20000830
 801198c:	68ee      	ldr	r6, [r5, #12]
	data->send_ns = 0;
 801198e:	2200      	movs	r2, #0
 8011990:	2300      	movs	r3, #0
 8011992:	e9c6 230a 	strd	r2, r3, [r6, #40]	; 0x28
	if (data->pending) {
 8011996:	6830      	ldr	r0, [r6, #0]
 8011998:	b118      	cbz	r0, 80119a2 <handle_na_input+0x33a>
		net_pkt_unref(data->pending);
 801199a:	f008 fcfd 	bl	801a398 <net_pkt_unref>
		data->pending = NULL;
 801199e:	2300      	movs	r3, #0
 80119a0:	6033      	str	r3, [r6, #0]
 80119a2:	68eb      	ldr	r3, [r5, #12]
	net_ipv6_nbr_data(nbr)->reachable = 0;
 80119a4:	2000      	movs	r0, #0
 80119a6:	2100      	movs	r1, #0
 80119a8:	e9c3 0106 	strd	r0, r1, [r3, #24]
 80119ac:	68eb      	ldr	r3, [r5, #12]
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
 80119ae:	2600      	movs	r6, #0
 80119b0:	621e      	str	r6, [r3, #32]
	net_nbr_unref(nbr);
 80119b2:	4628      	mov	r0, r5
 80119b4:	f009 faf9 	bl	801afaa <net_nbr_unref>
	net_nbr_unlink(nbr, NULL);
 80119b8:	4631      	mov	r1, r6
 80119ba:	4628      	mov	r0, r5
 80119bc:	f7ff f8bc 	bl	8010b38 <net_nbr_unlink>
}
 80119c0:	e76a      	b.n	8011898 <handle_na_input+0x230>
		lladdr_changed = memcmp(lladdr.addr,
 80119c2:	7842      	ldrb	r2, [r0, #1]
 80119c4:	1c81      	adds	r1, r0, #2
 80119c6:	f10d 0006 	add.w	r0, sp, #6
 80119ca:	f00a ff27 	bl	801c81c <memcmp>
 80119ce:	f1b0 0a00 	subs.w	sl, r0, #0
 80119d2:	bf18      	it	ne
 80119d4:	f04f 0a01 	movne.w	sl, #1
 80119d8:	e7a3      	b.n	8011922 <handle_na_input+0x2ba>
			dbg_update_neighbor_lladdr_raw(
 80119da:	4642      	mov	r2, r8
 80119dc:	4649      	mov	r1, r9
 80119de:	f10d 0006 	add.w	r0, sp, #6
 80119e2:	f009 fc37 	bl	801b254 <dbg_update_neighbor_lladdr_raw>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
 80119e6:	f899 2001 	ldrb.w	r2, [r9, #1]
	if (!lladdr_store || !new_addr) {
 80119ea:	f1b9 0f00 	cmp.w	r9, #0
 80119ee:	d0a3      	beq.n	8011938 <handle_na_input+0x2d0>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
 80119f0:	2a06      	cmp	r2, #6
 80119f2:	d8a1      	bhi.n	8011938 <handle_na_input+0x2d0>
	lladdr_store->len = new_len;
 80119f4:	f889 2001 	strb.w	r2, [r9, #1]
 80119f8:	f10d 0106 	add.w	r1, sp, #6
 80119fc:	f109 0002 	add.w	r0, r9, #2
 8011a00:	f00a ff1a 	bl	801c838 <memcpy>
 8011a04:	e798      	b.n	8011938 <handle_na_input+0x2d0>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
 8011a06:	2102      	movs	r1, #2
 8011a08:	4628      	mov	r0, r5
 8011a0a:	f7ff fba9 	bl	8011160 <ipv6_nbr_set_state>
 8011a0e:	e7aa      	b.n	8011966 <handle_na_input+0x2fe>
	if (!(na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE) && lladdr_changed) {
 8011a10:	783b      	ldrb	r3, [r7, #0]
 8011a12:	f013 0320 	ands.w	r3, r3, #32
 8011a16:	d102      	bne.n	8011a1e <handle_na_input+0x3b6>
 8011a18:	f1ba 0f00 	cmp.w	sl, #0
 8011a1c:	d124      	bne.n	8011a68 <handle_na_input+0x400>
	if (na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE ||
 8011a1e:	b91b      	cbnz	r3, 8011a28 <handle_na_input+0x3c0>
 8011a20:	b166      	cbz	r6, 8011a3c <handle_na_input+0x3d4>
 8011a22:	f1ba 0f00 	cmp.w	sl, #0
 8011a26:	d109      	bne.n	8011a3c <handle_na_input+0x3d4>
		if (lladdr_changed) {
 8011a28:	f1ba 0f00 	cmp.w	sl, #0
 8011a2c:	d125      	bne.n	8011a7a <handle_na_input+0x412>
		if (na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED) {
 8011a2e:	783b      	ldrb	r3, [r7, #0]
 8011a30:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011a34:	d137      	bne.n	8011aa6 <handle_na_input+0x43e>
			if (lladdr_changed) {
 8011a36:	f1ba 0f00 	cmp.w	sl, #0
 8011a3a:	d145      	bne.n	8011ac8 <handle_na_input+0x460>
 8011a3c:	68ea      	ldr	r2, [r5, #12]
		(na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER);
 8011a3e:	783b      	ldrb	r3, [r7, #0]
 8011a40:	09db      	lsrs	r3, r3, #7
	net_ipv6_nbr_data(nbr)->is_router =
 8011a42:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
 8011a46:	68eb      	ldr	r3, [r5, #12]
	pending = net_ipv6_nbr_data(nbr)->pending;
 8011a48:	681e      	ldr	r6, [r3, #0]
	if (pending) {
 8011a4a:	2e00      	cmp	r6, #0
 8011a4c:	d054      	beq.n	8011af8 <handle_na_input+0x490>
		if (net_send_data(pending) < 0) {
 8011a4e:	4630      	mov	r0, r6
 8011a50:	f7fa fd90 	bl	800c574 <net_send_data>
 8011a54:	2800      	cmp	r0, #0
 8011a56:	db3c      	blt.n	8011ad2 <handle_na_input+0x46a>
 8011a58:	68eb      	ldr	r3, [r5, #12]
			net_ipv6_nbr_data(nbr)->pending = NULL;
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	601a      	str	r2, [r3, #0]
		net_pkt_unref(pending);
 8011a5e:	4630      	mov	r0, r6
 8011a60:	f008 fc9a 	bl	801a398 <net_pkt_unref>
	return true;
 8011a64:	2301      	movs	r3, #1
 8011a66:	e718      	b.n	801189a <handle_na_input+0x232>
		if (net_ipv6_nbr_data(nbr)->state ==
 8011a68:	2a01      	cmp	r2, #1
 8011a6a:	d001      	beq.n	8011a70 <handle_na_input+0x408>
		return false;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	e714      	b.n	801189a <handle_na_input+0x232>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
 8011a70:	2102      	movs	r1, #2
 8011a72:	4628      	mov	r0, r5
 8011a74:	f7ff fb74 	bl	8011160 <ipv6_nbr_set_state>
 8011a78:	e7f8      	b.n	8011a6c <handle_na_input+0x404>
			dbg_update_neighbor_lladdr_raw(
 8011a7a:	4642      	mov	r2, r8
 8011a7c:	4649      	mov	r1, r9
 8011a7e:	f10d 0006 	add.w	r0, sp, #6
 8011a82:	f009 fbe7 	bl	801b254 <dbg_update_neighbor_lladdr_raw>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
 8011a86:	f899 2001 	ldrb.w	r2, [r9, #1]
	if (!lladdr_store || !new_addr) {
 8011a8a:	f1b9 0f00 	cmp.w	r9, #0
 8011a8e:	d0ce      	beq.n	8011a2e <handle_na_input+0x3c6>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
 8011a90:	2a06      	cmp	r2, #6
 8011a92:	d8cc      	bhi.n	8011a2e <handle_na_input+0x3c6>
	lladdr_store->len = new_len;
 8011a94:	f889 2001 	strb.w	r2, [r9, #1]
 8011a98:	f10d 0106 	add.w	r1, sp, #6
 8011a9c:	f109 0002 	add.w	r0, r9, #2
 8011aa0:	f00a feca 	bl	801c838 <memcpy>
 8011aa4:	e7c3      	b.n	8011a2e <handle_na_input+0x3c6>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
 8011aa6:	2101      	movs	r1, #1
 8011aa8:	4628      	mov	r0, r5
 8011aaa:	f7ff fb59 	bl	8011160 <ipv6_nbr_set_state>
 8011aae:	68eb      	ldr	r3, [r5, #12]
			net_ipv6_nbr_data(nbr)->reachable = 0;
 8011ab0:	2000      	movs	r0, #0
 8011ab2:	2100      	movs	r1, #0
 8011ab4:	e9c3 0106 	strd	r0, r1, [r3, #24]
 8011ab8:	68eb      	ldr	r3, [r5, #12]
			net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
 8011aba:	2200      	movs	r2, #0
 8011abc:	621a      	str	r2, [r3, #32]
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
 8011abe:	4629      	mov	r1, r5
 8011ac0:	69a0      	ldr	r0, [r4, #24]
 8011ac2:	f009 fc19 	bl	801b2f8 <net_ipv6_nbr_set_reachable_timer>
 8011ac6:	e7b9      	b.n	8011a3c <handle_na_input+0x3d4>
				ipv6_nbr_set_state(nbr,
 8011ac8:	2102      	movs	r1, #2
 8011aca:	4628      	mov	r0, r5
 8011acc:	f7ff fb48 	bl	8011160 <ipv6_nbr_set_state>
 8011ad0:	e7b4      	b.n	8011a3c <handle_na_input+0x3d4>
 8011ad2:	68ed      	ldr	r5, [r5, #12]
	data->send_ns = 0;
 8011ad4:	2200      	movs	r2, #0
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
	if (data->pending) {
 8011adc:	6828      	ldr	r0, [r5, #0]
 8011ade:	2800      	cmp	r0, #0
 8011ae0:	d0bd      	beq.n	8011a5e <handle_na_input+0x3f6>
		net_pkt_unref(data->pending);
 8011ae2:	f008 fc59 	bl	801a398 <net_pkt_unref>
		data->pending = NULL;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	602b      	str	r3, [r5, #0]
 8011aea:	e7b8      	b.n	8011a5e <handle_na_input+0x3f6>
		return false;
 8011aec:	2300      	movs	r3, #0
 8011aee:	e6d4      	b.n	801189a <handle_na_input+0x232>
		return false;
 8011af0:	2300      	movs	r3, #0
 8011af2:	e6d2      	b.n	801189a <handle_na_input+0x232>
			return false;
 8011af4:	2300      	movs	r3, #0
 8011af6:	e6d0      	b.n	801189a <handle_na_input+0x232>
	return true;
 8011af8:	2301      	movs	r3, #1
 8011afa:	e6ce      	b.n	801189a <handle_na_input+0x232>

08011afc <net_ipv6_send_ns>:
		     struct net_pkt *pending,
		     const struct in6_addr *src,
		     const struct in6_addr *dst,
		     const struct in6_addr *tgt,
		     bool is_my_address)
{
 8011afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b00:	b08b      	sub	sp, #44	; 0x2c
 8011b02:	4604      	mov	r4, r0
 8011b04:	460e      	mov	r6, r1
 8011b06:	4692      	mov	sl, r2
 8011b08:	f89d 7054 	ldrb.w	r7, [sp, #84]	; 0x54
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	9208      	str	r2, [sp, #32]
 8011b10:	2214      	movs	r2, #20
 8011b12:	9209      	str	r2, [sp, #36]	; 0x24
	struct net_icmpv6_ns_hdr *ns_hdr;
	struct in6_addr node_dst;
	struct net_nbr *nbr;
	uint8_t llao_len;

	if (!dst) {
 8011b14:	469b      	mov	fp, r3
 8011b16:	b1db      	cbz	r3, 8011b50 <net_ipv6_send_ns+0x54>
 8011b18:	6823      	ldr	r3, [r4, #0]
	uint8_t total_len = net_if_get_link_addr(iface)->len +
 8011b1a:	7d1d      	ldrb	r5, [r3, #20]
	return ROUND_UP(total_len, 8U);
 8011b1c:	3509      	adds	r5, #9
 8011b1e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
		dst = &node_dst;
	}

	llao_len = get_llao_len(iface);

	if (is_my_address) {
 8011b22:	2f00      	cmp	r7, #0
 8011b24:	d135      	bne.n	8011b92 <net_ipv6_send_ns+0x96>
		src = net_ipv6_unspecified_address();
		llao_len = 0U;
	} else {
		if (!src) {
 8011b26:	f1ba 0f00 	cmp.w	sl, #0
 8011b2a:	d037      	beq.n	8011b9c <net_ipv6_send_ns+0xa0>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8011b2c:	f8da 3000 	ldr.w	r3, [sl]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d139      	bne.n	8011ba8 <net_ipv6_send_ns+0xac>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8011b34:	f8da 3004 	ldr.w	r3, [sl, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d16c      	bne.n	8011c16 <net_ipv6_send_ns+0x11a>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8011b3c:	f8da 3008 	ldr.w	r3, [sl, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d16a      	bne.n	8011c1a <net_ipv6_send_ns+0x11e>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
 8011b44:	f8da 300c 	ldr.w	r3, [sl, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d068      	beq.n	8011c1e <net_ipv6_send_ns+0x122>
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	e02c      	b.n	8011baa <net_ipv6_send_ns+0xae>
	dst->s6_addr[0]   = 0xFF;
 8011b50:	22ff      	movs	r2, #255	; 0xff
 8011b52:	f88d 2010 	strb.w	r2, [sp, #16]
	dst->s6_addr[1]   = 0x02;
 8011b56:	2302      	movs	r3, #2
 8011b58:	f88d 3011 	strb.w	r3, [sp, #17]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	f8ad 3012 	strh.w	r3, [sp, #18]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
 8011b62:	f8ad 3014 	strh.w	r3, [sp, #20]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
 8011b66:	f8ad 3016 	strh.w	r3, [sp, #22]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
 8011b6a:	f8ad 3018 	strh.w	r3, [sp, #24]
	dst->s6_addr[10]  = 0U;
 8011b6e:	f88d 301a 	strb.w	r3, [sp, #26]
	dst->s6_addr[11]  = 0x01;
 8011b72:	2301      	movs	r3, #1
 8011b74:	f88d 301b 	strb.w	r3, [sp, #27]
	dst->s6_addr[12]  = 0xFF;
 8011b78:	f88d 201c 	strb.w	r2, [sp, #28]
	dst->s6_addr[13]  = src->s6_addr[13];
 8011b7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011b7e:	7b5b      	ldrb	r3, [r3, #13]
 8011b80:	f88d 301d 	strb.w	r3, [sp, #29]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
 8011b84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011b86:	89db      	ldrh	r3, [r3, #14]
 8011b88:	f8ad 301e 	strh.w	r3, [sp, #30]
		dst = &node_dst;
 8011b8c:	f10d 0b10 	add.w	fp, sp, #16
 8011b90:	e7c2      	b.n	8011b18 <net_ipv6_send_ns+0x1c>
		src = net_ipv6_unspecified_address();
 8011b92:	f7fd fd0b 	bl	800f5ac <net_ipv6_unspecified_address>
 8011b96:	4682      	mov	sl, r0
		llao_len = 0U;
 8011b98:	2500      	movs	r5, #0
 8011b9a:	e009      	b.n	8011bb0 <net_ipv6_send_ns+0xb4>
			src = net_if_ipv6_select_src_addr(iface, tgt);
 8011b9c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8011b9e:	4620      	mov	r0, r4
 8011ba0:	f7fc fd88 	bl	800e6b4 <net_if_ipv6_select_src_addr>
 8011ba4:	4682      	mov	sl, r0
 8011ba6:	e7c1      	b.n	8011b2c <net_ipv6_send_ns+0x30>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8011ba8:	2300      	movs	r3, #0
		}

		if (net_ipv6_is_addr_unspecified(src)) {
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	f040 80d8 	bne.w	8011d60 <net_ipv6_send_ns+0x264>

			goto drop;
		}
	}

	pkt = net_pkt_alloc_with_buffer(iface,
 8011bb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	e9cd 2300 	strd	r2, r3, [sp]
 8011bba:	233a      	movs	r3, #58	; 0x3a
 8011bbc:	2202      	movs	r2, #2
 8011bbe:	f105 0114 	add.w	r1, r5, #20
 8011bc2:	4620      	mov	r0, r4
 8011bc4:	f7fd ffde 	bl	800fb84 <net_pkt_alloc_with_buffer>
					sizeof(struct net_icmpv6_ns_hdr) +
					llao_len,
					AF_INET6, IPPROTO_ICMPV6,
					ND_NET_BUF_TIMEOUT);
	if (!pkt) {
 8011bc8:	4680      	mov	r8, r0
 8011bca:	2800      	cmp	r0, #0
 8011bcc:	f000 80cd 	beq.w	8011d6a <net_ipv6_send_ns+0x26e>
	pkt->ipv6_hop_limit = hop_limit;
 8011bd0:	23ff      	movs	r3, #255	; 0xff
 8011bd2:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
		net_pkt_set_captured(pkt, net_pkt_is_captured(pending));
	}

	net_pkt_set_ipv6_hop_limit(pkt, NET_IPV6_ND_HOP_LIMIT);

	if (net_ipv6_create(pkt, src, dst) ||
 8011bd6:	465a      	mov	r2, fp
 8011bd8:	4651      	mov	r1, sl
 8011bda:	f009 fa5c 	bl	801b096 <net_ipv6_create>
 8011bde:	b300      	cbz	r0, 8011c22 <net_ipv6_send_ns+0x126>
	int ret = -ENOBUFS;
 8011be0:	f06f 0a68 	mvn.w	sl, #104	; 0x68
	net_stats_update_ipv6_nd_sent(iface);

	return 0;

drop:
	if (pending) {
 8011be4:	b116      	cbz	r6, 8011bec <net_ipv6_send_ns+0xf0>
		net_pkt_unref(pending);
 8011be6:	4630      	mov	r0, r6
 8011be8:	f008 fbd6 	bl	801a398 <net_pkt_unref>
	}

	if (pkt) {
 8011bec:	f1b8 0f00 	cmp.w	r8, #0
 8011bf0:	d002      	beq.n	8011bf8 <net_ipv6_send_ns+0xfc>
		net_pkt_unref(pkt);
 8011bf2:	4640      	mov	r0, r8
 8011bf4:	f008 fbd0 	bl	801a398 <net_pkt_unref>
	UPDATE_STAT(iface, stats.ipv6_nd.drop++);
 8011bf8:	4a63      	ldr	r2, [pc, #396]	; (8011d88 <net_ipv6_send_ns+0x28c>)
 8011bfa:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8011bfe:	3301      	adds	r3, #1
 8011c00:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8011c04:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8011c08:	3301      	adds	r3, #1
 8011c0a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	}

	net_stats_update_ipv6_nd_drop(iface);

	return ret;
}
 8011c0e:	4650      	mov	r0, sl
 8011c10:	b00b      	add	sp, #44	; 0x2c
 8011c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c16:	2300      	movs	r3, #0
 8011c18:	e7c7      	b.n	8011baa <net_ipv6_send_ns+0xae>
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	e7c5      	b.n	8011baa <net_ipv6_send_ns+0xae>
 8011c1e:	2301      	movs	r3, #1
 8011c20:	e7c3      	b.n	8011baa <net_ipv6_send_ns+0xae>
	    net_icmpv6_create(pkt, NET_ICMPV6_NS, 0)) {
 8011c22:	2200      	movs	r2, #0
 8011c24:	2187      	movs	r1, #135	; 0x87
 8011c26:	4640      	mov	r0, r8
 8011c28:	f009 f9a4 	bl	801af74 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, dst) ||
 8011c2c:	2800      	cmp	r0, #0
 8011c2e:	d1d7      	bne.n	8011be0 <net_ipv6_send_ns+0xe4>
	ns_hdr = (struct net_icmpv6_ns_hdr *)net_pkt_get_data(pkt, &ns_access);
 8011c30:	a908      	add	r1, sp, #32
 8011c32:	4640      	mov	r0, r8
 8011c34:	f7fd ffca 	bl	800fbcc <net_pkt_get_data>
	if (!ns_hdr) {
 8011c38:	4603      	mov	r3, r0
 8011c3a:	2800      	cmp	r0, #0
 8011c3c:	f000 8098 	beq.w	8011d70 <net_ipv6_send_ns+0x274>
	ns_hdr->reserved = 0U;
 8011c40:	2200      	movs	r2, #0
 8011c42:	7002      	strb	r2, [r0, #0]
 8011c44:	7042      	strb	r2, [r0, #1]
 8011c46:	7082      	strb	r2, [r0, #2]
 8011c48:	70c2      	strb	r2, [r0, #3]
 8011c4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011c4c:	f8d2 c000 	ldr.w	ip, [r2]
 8011c50:	6850      	ldr	r0, [r2, #4]
 8011c52:	6891      	ldr	r1, [r2, #8]
 8011c54:	68d2      	ldr	r2, [r2, #12]
 8011c56:	f8c3 c004 	str.w	ip, [r3, #4]
 8011c5a:	6098      	str	r0, [r3, #8]
 8011c5c:	60d9      	str	r1, [r3, #12]
 8011c5e:	611a      	str	r2, [r3, #16]
	if (net_pkt_set_data(pkt, &ns_access)) {
 8011c60:	a908      	add	r1, sp, #32
 8011c62:	4640      	mov	r0, r8
 8011c64:	f008 fdc7 	bl	801a7f6 <net_pkt_set_data>
 8011c68:	4682      	mov	sl, r0
 8011c6a:	2800      	cmp	r0, #0
 8011c6c:	f040 8083 	bne.w	8011d76 <net_ipv6_send_ns+0x27a>
	if (!is_my_address) {
 8011c70:	b97f      	cbnz	r7, 8011c92 <net_ipv6_send_ns+0x196>
 8011c72:	f8d4 b000 	ldr.w	fp, [r4]
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
 8011c76:	2301      	movs	r3, #1
 8011c78:	f88d 300c 	strb.w	r3, [sp, #12]
 8011c7c:	08eb      	lsrs	r3, r5, #3
 8011c7e:	f88d 300d 	strb.w	r3, [sp, #13]
	if (net_pkt_write(pkt, &opt_hdr,
 8011c82:	2202      	movs	r2, #2
 8011c84:	a903      	add	r1, sp, #12
 8011c86:	4640      	mov	r0, r8
 8011c88:	f008 fd9a 	bl	801a7c0 <net_pkt_write>
 8011c8c:	b1c0      	cbz	r0, 8011cc0 <net_ipv6_send_ns+0x1c4>
		if (!set_llao(pkt, net_if_get_link_addr(iface),
 8011c8e:	2f00      	cmp	r7, #0
 8011c90:	d074      	beq.n	8011d7c <net_ipv6_send_ns+0x280>
	net_pkt_cursor_init(pkt);
 8011c92:	4640      	mov	r0, r8
 8011c94:	f008 fbe1 	bl	801a45a <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
 8011c98:	213a      	movs	r1, #58	; 0x3a
 8011c9a:	4640      	mov	r0, r8
 8011c9c:	f009 fa3a 	bl	801b114 <net_ipv6_finalize>
	nbr = add_nbr(iface, tgt, false,
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	461a      	mov	r2, r3
 8011ca4:	9914      	ldr	r1, [sp, #80]	; 0x50
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	f7ff fc04 	bl	80114b4 <add_nbr>
	if (!nbr) {
 8011cac:	4605      	mov	r5, r0
 8011cae:	2800      	cmp	r0, #0
 8011cb0:	d067      	beq.n	8011d82 <net_ipv6_send_ns+0x286>
	if (pending) {
 8011cb2:	b36e      	cbz	r6, 8011d10 <net_ipv6_send_ns+0x214>
 8011cb4:	68c7      	ldr	r7, [r0, #12]
		if (!net_ipv6_nbr_data(nbr)->pending) {
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	b1bb      	cbz	r3, 8011cea <net_ipv6_send_ns+0x1ee>
	int ret = -ENOBUFS;
 8011cba:	f06f 0a68 	mvn.w	sl, #104	; 0x68
 8011cbe:	e791      	b.n	8011be4 <net_ipv6_send_ns+0xe8>
	    net_pkt_write(pkt, lladdr->addr, lladdr->len) ||
 8011cc0:	f89b 2014 	ldrb.w	r2, [fp, #20]
 8011cc4:	f8db 1010 	ldr.w	r1, [fp, #16]
 8011cc8:	4640      	mov	r0, r8
 8011cca:	f008 fd79 	bl	801a7c0 <net_pkt_write>
			  sizeof(struct net_icmpv6_nd_opt_hdr)) ||
 8011cce:	2800      	cmp	r0, #0
 8011cd0:	d1dd      	bne.n	8011c8e <net_ipv6_send_ns+0x192>
	    net_pkt_memset(pkt, 0, llao_len - lladdr->len - 2)) {
 8011cd2:	f89b 2014 	ldrb.w	r2, [fp, #20]
 8011cd6:	1aaa      	subs	r2, r5, r2
 8011cd8:	3a02      	subs	r2, #2
 8011cda:	2100      	movs	r1, #0
 8011cdc:	4640      	mov	r0, r8
 8011cde:	f008 fc3e 	bl	801a55e <net_pkt_memset>
	    net_pkt_write(pkt, lladdr->addr, lladdr->len) ||
 8011ce2:	2800      	cmp	r0, #0
 8011ce4:	d1d3      	bne.n	8011c8e <net_ipv6_send_ns+0x192>
	return true;
 8011ce6:	2701      	movs	r7, #1
 8011ce8:	e7d1      	b.n	8011c8e <net_ipv6_send_ns+0x192>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
 8011cea:	4630      	mov	r0, r6
 8011cec:	f008 fb2c 	bl	801a348 <net_pkt_ref>
 8011cf0:	6038      	str	r0, [r7, #0]
 8011cf2:	68ef      	ldr	r7, [r5, #12]
	return z_impl_k_uptime_ticks();
 8011cf4:	f00a fc88 	bl	801c608 <z_impl_k_uptime_ticks>
			return t / ((uint64_t)from_hz / to_hz);
 8011cf8:	220a      	movs	r2, #10
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	f7ee ff1e 	bl	8000b3c <__aeabi_uldivmod>
		net_ipv6_nbr_data(nbr)->send_ns = k_uptime_get();
 8011d00:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8011d04:	4821      	ldr	r0, [pc, #132]	; (8011d8c <net_ipv6_send_ns+0x290>)
 8011d06:	f00a fc38 	bl	801c57a <z_timeout_remaining>
		if (!k_work_delayable_remaining_get(&ipv6_ns_reply_timer)) {
 8011d0a:	ea50 0301 	orrs.w	r3, r0, r1
 8011d0e:	d010      	beq.n	8011d32 <net_ipv6_send_ns+0x236>
	if (net_send_data(pkt) < 0) {
 8011d10:	4640      	mov	r0, r8
 8011d12:	f7fa fc2f 	bl	800c574 <net_send_data>
 8011d16:	2800      	cmp	r0, #0
 8011d18:	db12      	blt.n	8011d40 <net_ipv6_send_ns+0x244>
	UPDATE_STAT(iface, stats.ipv6_nd.sent++);
 8011d1a:	4a1b      	ldr	r2, [pc, #108]	; (8011d88 <net_ipv6_send_ns+0x28c>)
 8011d1c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 8011d20:	3301      	adds	r3, #1
 8011d22:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8011d26:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	return 0;
 8011d30:	e76d      	b.n	8011c0e <net_ipv6_send_ns+0x112>
			k_work_reschedule(&ipv6_ns_reply_timer,
 8011d32:	f242 7210 	movw	r2, #10000	; 0x2710
 8011d36:	2300      	movs	r3, #0
 8011d38:	4815      	ldr	r0, [pc, #84]	; (8011d90 <net_ipv6_send_ns+0x294>)
 8011d3a:	f004 f8eb 	bl	8015f14 <k_work_reschedule>
 8011d3e:	e7e7      	b.n	8011d10 <net_ipv6_send_ns+0x214>
		if (pending) {
 8011d40:	b15e      	cbz	r6, 8011d5a <net_ipv6_send_ns+0x25e>
 8011d42:	68ed      	ldr	r5, [r5, #12]
	data->send_ns = 0;
 8011d44:	2200      	movs	r2, #0
 8011d46:	2300      	movs	r3, #0
 8011d48:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
	if (data->pending) {
 8011d4c:	682e      	ldr	r6, [r5, #0]
 8011d4e:	b126      	cbz	r6, 8011d5a <net_ipv6_send_ns+0x25e>
		net_pkt_unref(data->pending);
 8011d50:	4630      	mov	r0, r6
 8011d52:	f008 fb21 	bl	801a398 <net_pkt_unref>
		data->pending = NULL;
 8011d56:	2600      	movs	r6, #0
 8011d58:	602e      	str	r6, [r5, #0]
	int ret = -ENOBUFS;
 8011d5a:	f06f 0a68 	mvn.w	sl, #104	; 0x68
		goto drop;
 8011d5e:	e741      	b.n	8011be4 <net_ipv6_send_ns+0xe8>
			ret = -EINVAL;
 8011d60:	f06f 0a15 	mvn.w	sl, #21
	struct net_pkt *pkt = NULL;
 8011d64:	f04f 0800 	mov.w	r8, #0
 8011d68:	e73c      	b.n	8011be4 <net_ipv6_send_ns+0xe8>
		ret = -ENOMEM;
 8011d6a:	f06f 0a0b 	mvn.w	sl, #11
 8011d6e:	e739      	b.n	8011be4 <net_ipv6_send_ns+0xe8>
	int ret = -ENOBUFS;
 8011d70:	f06f 0a68 	mvn.w	sl, #104	; 0x68
 8011d74:	e736      	b.n	8011be4 <net_ipv6_send_ns+0xe8>
 8011d76:	f06f 0a68 	mvn.w	sl, #104	; 0x68
 8011d7a:	e733      	b.n	8011be4 <net_ipv6_send_ns+0xe8>
 8011d7c:	f06f 0a68 	mvn.w	sl, #104	; 0x68
 8011d80:	e730      	b.n	8011be4 <net_ipv6_send_ns+0xe8>
 8011d82:	f06f 0a68 	mvn.w	sl, #104	; 0x68
 8011d86:	e72d      	b.n	8011be4 <net_ipv6_send_ns+0xe8>
 8011d88:	20002a58 	.word	0x20002a58
 8011d8c:	20002a08 	.word	0x20002a08
 8011d90:	200029f8 	.word	0x200029f8

08011d94 <net_ipv6_nbr_add>:
{
 8011d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d98:	b084      	sub	sp, #16
 8011d9a:	4604      	mov	r4, r0
 8011d9c:	460f      	mov	r7, r1
 8011d9e:	4615      	mov	r5, r2
 8011da0:	461a      	mov	r2, r3
	nbr = add_nbr(iface, addr, is_router, state);
 8011da2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8011da6:	f7ff fb85 	bl	80114b4 <add_nbr>
	if (!nbr) {
 8011daa:	4606      	mov	r6, r0
 8011dac:	b1a8      	cbz	r0, 8011dda <net_ipv6_nbr_add+0x46>
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
 8011dae:	462a      	mov	r2, r5
 8011db0:	4621      	mov	r1, r4
 8011db2:	f7fe fe61 	bl	8010a78 <net_nbr_link>
 8011db6:	f110 0f78 	cmn.w	r0, #120	; 0x78
 8011dba:	d025      	beq.n	8011e08 <net_ipv6_nbr_add+0x74>
 8011dbc:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
 8011dbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d051      	beq.n	8011e6a <net_ipv6_nbr_add+0xd6>
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	461a      	mov	r2, r3
 8011dca:	4621      	mov	r1, r4
 8011dcc:	482b      	ldr	r0, [pc, #172]	; (8011e7c <net_ipv6_nbr_add+0xe8>)
 8011dce:	f7fd fd13 	bl	800f7f8 <net_mgmt_event_notify_with_info>
}
 8011dd2:	4630      	mov	r0, r6
 8011dd4:	b004      	add	sp, #16
 8011dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		NET_ERR("Could not add router neighbor %s [%s]",
 8011dda:	4639      	mov	r1, r7
 8011ddc:	2002      	movs	r0, #2
 8011dde:	f7fd fbc1 	bl	800f564 <net_sprint_addr>
 8011de2:	4604      	mov	r4, r0
 8011de4:	2318      	movs	r3, #24
 8011de6:	4a26      	ldr	r2, [pc, #152]	; (8011e80 <net_ipv6_nbr_add+0xec>)
 8011de8:	7929      	ldrb	r1, [r5, #4]
 8011dea:	6828      	ldr	r0, [r5, #0]
 8011dec:	f7fd fb8c 	bl	800f508 <net_sprint_ll_addr_buf>
 8011df0:	9003      	str	r0, [sp, #12]
 8011df2:	9402      	str	r4, [sp, #8]
 8011df4:	4b23      	ldr	r3, [pc, #140]	; (8011e84 <net_ipv6_nbr_add+0xf0>)
 8011df6:	9301      	str	r3, [sp, #4]
 8011df8:	2000      	movs	r0, #0
 8011dfa:	9000      	str	r0, [sp, #0]
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	2201      	movs	r2, #1
 8011e00:	4921      	ldr	r1, [pc, #132]	; (8011e88 <net_ipv6_nbr_add+0xf4>)
 8011e02:	f009 fa1a 	bl	801b23a <z_log_msg2_runtime_create>
		return NULL;
 8011e06:	e7e4      	b.n	8011dd2 <net_ipv6_nbr_add+0x3e>
 8011e08:	68f3      	ldr	r3, [r6, #12]
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
 8011e0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
 8011e0e:	2b05      	cmp	r3, #5
 8011e10:	d0d4      	beq.n	8011dbc <net_ipv6_nbr_add+0x28>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
 8011e12:	7870      	ldrb	r0, [r6, #1]
 8011e14:	f7fe feb2 	bl	8010b7c <net_nbr_get_lladdr>
 8011e18:	4680      	mov	r8, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
 8011e1a:	792a      	ldrb	r2, [r5, #4]
 8011e1c:	6829      	ldr	r1, [r5, #0]
 8011e1e:	3002      	adds	r0, #2
 8011e20:	f00a fcfc 	bl	801c81c <memcmp>
 8011e24:	b948      	cbnz	r0, 8011e3a <net_ipv6_nbr_add+0xa6>
 8011e26:	68f3      	ldr	r3, [r6, #12]
		} else if (net_ipv6_nbr_data(nbr)->state ==
 8011e28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d1c5      	bne.n	8011dbc <net_ipv6_nbr_add+0x28>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
 8011e30:	2102      	movs	r1, #2
 8011e32:	4630      	mov	r0, r6
 8011e34:	f7ff f994 	bl	8011160 <ipv6_nbr_set_state>
 8011e38:	e7c0      	b.n	8011dbc <net_ipv6_nbr_add+0x28>
			dbg_update_neighbor_lladdr(lladdr, cached_lladdr, addr);
 8011e3a:	463a      	mov	r2, r7
 8011e3c:	4641      	mov	r1, r8
 8011e3e:	4628      	mov	r0, r5
 8011e40:	f7ff f9ee 	bl	8011220 <dbg_update_neighbor_lladdr>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
 8011e44:	6829      	ldr	r1, [r5, #0]
 8011e46:	792a      	ldrb	r2, [r5, #4]
	if (!lladdr_store || !new_addr) {
 8011e48:	f1b8 0f00 	cmp.w	r8, #0
 8011e4c:	d008      	beq.n	8011e60 <net_ipv6_nbr_add+0xcc>
 8011e4e:	b139      	cbz	r1, 8011e60 <net_ipv6_nbr_add+0xcc>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
 8011e50:	2a06      	cmp	r2, #6
 8011e52:	d805      	bhi.n	8011e60 <net_ipv6_nbr_add+0xcc>
	lladdr_store->len = new_len;
 8011e54:	f888 2001 	strb.w	r2, [r8, #1]
 8011e58:	f108 0002 	add.w	r0, r8, #2
 8011e5c:	f00a fcec 	bl	801c838 <memcpy>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
 8011e60:	2102      	movs	r1, #2
 8011e62:	4630      	mov	r0, r6
 8011e64:	f7ff f97c 	bl	8011160 <ipv6_nbr_set_state>
 8011e68:	e7a8      	b.n	8011dbc <net_ipv6_nbr_add+0x28>
		ret = net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
 8011e6a:	2100      	movs	r1, #0
 8011e6c:	9101      	str	r1, [sp, #4]
 8011e6e:	9700      	str	r7, [sp, #0]
 8011e70:	460b      	mov	r3, r1
 8011e72:	460a      	mov	r2, r1
 8011e74:	4620      	mov	r0, r4
 8011e76:	f7ff fe41 	bl	8011afc <net_ipv6_send_ns>
		if (ret < 0) {
 8011e7a:	e7a4      	b.n	8011dc6 <net_ipv6_nbr_add+0x32>
 8011e7c:	e060000f 	.word	0xe060000f
 8011e80:	200034a8 	.word	0x200034a8
 8011e84:	0801e4f8 	.word	0x0801e4f8
 8011e88:	0801d788 	.word	0x0801d788

08011e8c <handle_ra_input>:
}

static enum net_verdict handle_ra_input(struct net_pkt *pkt,
					struct net_ipv6_hdr *ip_hdr,
					struct net_icmp_hdr *icmp_hdr)
{
 8011e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e90:	b0ad      	sub	sp, #180	; 0xb4
 8011e92:	af06      	add	r7, sp, #24
 8011e94:	4604      	mov	r4, r0
 8011e96:	60f9      	str	r1, [r7, #12]
 8011e98:	4616      	mov	r6, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ra_access,
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	663b      	str	r3, [r7, #96]	; 0x60
 8011e9e:	220c      	movs	r2, #12
 8011ea0:	667a      	str	r2, [r7, #100]	; 0x64
					      struct net_icmpv6_ra_hdr);
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
 8011ea2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8011ea6:	657a      	str	r2, [r7, #84]	; 0x54
 8011ea8:	2202      	movs	r2, #2
 8011eaa:	65ba      	str	r2, [r7, #88]	; 0x58
	return net_buf_frags_len(pkt->frags);
 8011eac:	6885      	ldr	r5, [r0, #8]
	while (buf) {
 8011eae:	b11d      	cbz	r5, 8011eb8 <handle_ra_input+0x2c>
		bytes += buf->len;
 8011eb0:	89aa      	ldrh	r2, [r5, #12]
 8011eb2:	4413      	add	r3, r2
		buf = buf->frags;
 8011eb4:	682d      	ldr	r5, [r5, #0]
 8011eb6:	e7fa      	b.n	8011eae <handle_ra_input+0x22>
	uint16_t length = net_pkt_get_len(pkt);
 8011eb8:	fa1f f883 	uxth.w	r8, r3
	struct net_icmpv6_ra_hdr *ra_hdr;
	struct net_if_router *router;
	uint32_t mtu, reachable_time, retrans_timer;
	uint16_t router_lifetime;

	ra_hdr = (struct net_icmpv6_ra_hdr *)net_pkt_get_data(pkt, &ra_access);
 8011ebc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	f7fd fe83 	bl	800fbcc <net_pkt_get_data>
	if (!ra_hdr) {
 8011ec6:	4681      	mov	r9, r0
 8011ec8:	2800      	cmp	r0, #0
 8011eca:	d070      	beq.n	8011fae <handle_ra_input+0x122>
	return pkt->iface;
 8011ecc:	69a2      	ldr	r2, [r4, #24]
	UPDATE_STAT(iface, stats.ipv6_nd.recv++);
 8011ece:	49c1      	ldr	r1, [pc, #772]	; (80121d4 <handle_ra_input+0x348>)
 8011ed0:	f8d1 30a4 	ldr.w	r3, [r1, #164]	; 0xa4
 8011ed4:	3301      	adds	r3, #1
 8011ed6:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
 8011eda:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 8011ede:	3301      	adds	r3, #1
 8011ee0:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

	dbg_addr_recv("Router Advertisement", &ip_hdr->src, &ip_hdr->dst, pkt);

	net_stats_update_ipv6_nd_recv(net_pkt_iface(pkt));

	if (((length < (sizeof(struct net_ipv6_hdr) +
 8011ee4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011ee8:	d904      	bls.n	8011ef4 <handle_ra_input+0x68>
			sizeof(struct net_icmp_hdr) +
			sizeof(struct net_icmpv6_ra_hdr) +
			sizeof(struct net_icmpv6_nd_opt_hdr))) ||
	     (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	79db      	ldrb	r3, [r3, #7]
			sizeof(struct net_icmpv6_nd_opt_hdr))) ||
 8011eee:	2bff      	cmp	r3, #255	; 0xff
 8011ef0:	f000 8092 	beq.w	8012018 <handle_ra_input+0x18c>
	     !net_ipv6_is_ll_addr((struct in6_addr *)ip_hdr->src)) &&
		icmp_hdr->code != 0U) {
 8011ef4:	7873      	ldrb	r3, [r6, #1]
	     !net_ipv6_is_ll_addr((struct in6_addr *)ip_hdr->src)) &&
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d17d      	bne.n	8011ff6 <handle_ra_input+0x16a>
	return net_pkt_skip(pkt, access->size);
 8011efa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011efc:	4620      	mov	r0, r4
 8011efe:	f008 fb22 	bl	801a546 <net_pkt_skip>
		goto drop;
	}

	net_pkt_acknowledge_data(pkt, &ra_access);

	router_lifetime = ntohs(ra_hdr->router_lifetime);
 8011f02:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8011f06:	0a13      	lsrs	r3, r2, #8
 8011f08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011f0c:	b29b      	uxth	r3, r3
 8011f0e:	607b      	str	r3, [r7, #4]
	reachable_time = ntohl(ra_hdr->reachable_time);
 8011f10:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011f14:	0a1e      	lsrs	r6, r3, #8
 8011f16:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8011f1a:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
 8011f1e:	021a      	lsls	r2, r3, #8
 8011f20:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8011f24:	4316      	orrs	r6, r2
 8011f26:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
	retrans_timer = ntohl(ra_hdr->retrans_timer);
 8011f2a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011f2e:	ea4f 2813 	mov.w	r8, r3, lsr #8
 8011f32:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8011f36:	ea48 6813 	orr.w	r8, r8, r3, lsr #24
 8011f3a:	021a      	lsls	r2, r3, #8
 8011f3c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8011f40:	ea48 0802 	orr.w	r8, r8, r2
 8011f44:	ea48 6803 	orr.w	r8, r8, r3, lsl #24

	if (ra_hdr->cur_hop_limit) {
 8011f48:	f899 1000 	ldrb.w	r1, [r9]
 8011f4c:	2900      	cmp	r1, #0
 8011f4e:	d16b      	bne.n	8012028 <handle_ra_input+0x19c>
				       ra_hdr->cur_hop_limit);
		NET_DBG("New hop limit %d",
			net_if_ipv6_get_hop_limit(net_pkt_iface(pkt)));
	}

	if (reachable_time && reachable_time <= MAX_REACHABLE_TIME &&
 8011f50:	1e72      	subs	r2, r6, #1
 8011f52:	4ba1      	ldr	r3, [pc, #644]	; (80121d8 <handle_ra_input+0x34c>)
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d213      	bcs.n	8011f80 <handle_ra_input+0xf4>
	return pkt->iface;
 8011f58:	69a3      	ldr	r3, [r4, #24]
	if (!iface->config.ip.ipv6) {
 8011f5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d066      	beq.n	8012030 <handle_ra_input+0x1a4>
	return iface->config.ip.ipv6->reachable_time;
 8011f62:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8011f66:	4296      	cmp	r6, r2
 8011f68:	d00a      	beq.n	8011f80 <handle_ra_input+0xf4>
	if (!iface->config.ip.ipv6) {
 8011f6a:	b10b      	cbz	r3, 8011f70 <handle_ra_input+0xe4>
	iface->config.ip.ipv6->base_reachable_time = reachable_time;
 8011f6c:	f8c3 60f8 	str.w	r6, [r3, #248]	; 0xf8
 8011f70:	69a3      	ldr	r3, [r4, #24]
	    (net_if_ipv6_get_reachable_time(net_pkt_iface(pkt)) !=
	     reachable_time)) {
		net_if_ipv6_set_base_reachable_time(net_pkt_iface(pkt),
						    reachable_time);
		net_if_ipv6_set_reachable_time(
 8011f72:	f8d3 6210 	ldr.w	r6, [r3, #528]	; 0x210
	ipv6->reachable_time = net_if_ipv6_calc_reachable_time(ipv6);
 8011f76:	4630      	mov	r0, r6
 8011f78:	f7fc fc00 	bl	800e77c <net_if_ipv6_calc_reachable_time>
 8011f7c:	f8c6 00fc 	str.w	r0, [r6, #252]	; 0xfc
			net_pkt_iface(pkt)->config.ip.ipv6);
	}

	if (retrans_timer) {
 8011f80:	f1b8 0f00 	cmp.w	r8, #0
 8011f84:	d007      	beq.n	8011f96 <handle_ra_input+0x10a>
 8011f86:	69a3      	ldr	r3, [r4, #24]
		net_if_ipv6_set_retrans_timer(net_pkt_iface(pkt),
 8011f88:	f8d9 2008 	ldr.w	r2, [r9, #8]
	if (!iface->config.ip.ipv6) {
 8011f8c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011f90:	b10b      	cbz	r3, 8011f96 <handle_ra_input+0x10a>
	iface->config.ip.ipv6->retrans_timer = retrans_timer;
 8011f92:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	pkt->ipv6_ext_opt_len = len;
 8011f96:	230c      	movs	r3, #12
 8011f98:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56

	net_pkt_set_ipv6_ext_opt_len(pkt, sizeof(struct net_icmpv6_ra_hdr));
	length -= (sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr));

	nd_opt_hdr = (struct net_icmpv6_nd_opt_hdr *)
				net_pkt_get_data(pkt, &nd_access);
 8011f9c:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	f7fd fe13 	bl	800fbcc <net_pkt_get_data>
 8011fa6:	4606      	mov	r6, r0
	struct net_nbr *nbr = NULL;
 8011fa8:	46aa      	mov	sl, r5
 8011faa:	60bd      	str	r5, [r7, #8]
	while (nd_opt_hdr) {
 8011fac:	e2e3      	b.n	8012576 <handle_ra_input+0x6ea>
		NET_ERR("DROP: NULL RA header");
 8011fae:	4b8b      	ldr	r3, [pc, #556]	; (80121dc <handle_ra_input+0x350>)
 8011fb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	f8a7 3031 	strh.w	r3, [r7, #49]	; 0x31
 8011fb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8011fbc:	2202      	movs	r2, #2
 8011fbe:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 8011fc2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8011fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011fc8:	677a      	str	r2, [r7, #116]	; 0x74
 8011fca:	461a      	mov	r2, r3
 8011fcc:	f363 0200 	bfi	r2, r3, #0, #1
 8011fd0:	f363 0241 	bfi	r2, r3, #1, #1
 8011fd4:	f363 0282 	bfi	r2, r3, #2, #1
 8011fd8:	f363 02c5 	bfi	r2, r3, #3, #3
 8011fdc:	2101      	movs	r1, #1
 8011fde:	f361 1288 	bfi	r2, r1, #6, #3
 8011fe2:	2108      	movs	r1, #8
 8011fe4:	f361 2252 	bfi	r2, r1, #9, #10
 8011fe8:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8011fec:	497c      	ldr	r1, [pc, #496]	; (80121e0 <handle_ra_input+0x354>)
 8011fee:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8011ff2:	f005 feae 	bl	8017d52 <z_log_msg2_finalize>
	return pkt->iface;
 8011ff6:	69a2      	ldr	r2, [r4, #24]
	UPDATE_STAT(iface, stats.ipv6_nd.drop++);
 8011ff8:	4976      	ldr	r1, [pc, #472]	; (80121d4 <handle_ra_input+0x348>)
 8011ffa:	f8d1 30a0 	ldr.w	r3, [r1, #160]	; 0xa0
 8011ffe:	3301      	adds	r3, #1
 8012000:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
 8012004:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 8012008:	3301      	adds	r3, #1
 801200a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	return NET_OK;

drop:
	net_stats_update_ipv6_nd_drop(net_pkt_iface(pkt));

	return NET_DROP;
 801200e:	2002      	movs	r0, #2
}
 8012010:	379c      	adds	r7, #156	; 0x9c
 8012012:	46bd      	mov	sp, r7
 8012014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	891a      	ldrh	r2, [r3, #8]
	     (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
 801201c:	f248 03fe 	movw	r3, #33022	; 0x80fe
 8012020:	429a      	cmp	r2, r3
 8012022:	f47f af67 	bne.w	8011ef4 <handle_ra_input+0x68>
 8012026:	e768      	b.n	8011efa <handle_ra_input+0x6e>
		net_ipv6_set_hop_limit(net_pkt_iface(pkt),
 8012028:	69a0      	ldr	r0, [r4, #24]
 801202a:	f7fc faed 	bl	800e608 <net_ipv6_set_hop_limit>
		NET_DBG("New hop limit %d",
 801202e:	e78f      	b.n	8011f50 <handle_ra_input+0xc4>
		return 0;
 8012030:	2200      	movs	r2, #0
 8012032:	e798      	b.n	8011f66 <handle_ra_input+0xda>
	if (!read_llao(pkt, len, &llstorage)) {
 8012034:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012038:	7871      	ldrb	r1, [r6, #1]
 801203a:	4620      	mov	r0, r4
 801203c:	f009 f936 	bl	801b2ac <read_llao>
 8012040:	b1b8      	cbz	r0, 8012072 <handle_ra_input+0x1e6>
	lladdr.len = llstorage.len;
 8012042:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8012046:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	lladdr.addr = llstorage.addr;
 801204a:	f107 0332 	add.w	r3, r7, #50	; 0x32
 801204e:	623b      	str	r3, [r7, #32]
 8012050:	69a0      	ldr	r0, [r4, #24]
	return pkt->frags->data;
 8012052:	68a3      	ldr	r3, [r4, #8]
 8012054:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt),
 8012056:	2302      	movs	r3, #2
 8012058:	9300      	str	r3, [sp, #0]
 801205a:	2301      	movs	r3, #1
 801205c:	f107 0220 	add.w	r2, r7, #32
 8012060:	3108      	adds	r1, #8
 8012062:	f7ff fe97 	bl	8011d94 <net_ipv6_nbr_add>
 8012066:	4682      	mov	sl, r0
			if (!nbr) {
 8012068:	f1ba 0f00 	cmp.w	sl, #0
 801206c:	f040 827d 	bne.w	801256a <handle_ra_input+0x6de>
 8012070:	e7c1      	b.n	8011ff6 <handle_ra_input+0x16a>
		return NULL;
 8012072:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8012076:	e7f7      	b.n	8012068 <handle_ra_input+0x1dc>
			if (net_pkt_skip(pkt, 2) ||
 8012078:	2102      	movs	r1, #2
 801207a:	4620      	mov	r0, r4
 801207c:	f008 fa63 	bl	801a546 <net_pkt_skip>
 8012080:	2800      	cmp	r0, #0
 8012082:	d1b8      	bne.n	8011ff6 <handle_ra_input+0x16a>
			    net_pkt_read_be32(pkt, &mtu)) {
 8012084:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8012088:	4620      	mov	r0, r4
 801208a:	f008 fa7e 	bl	801a58a <net_pkt_read_be32>
			if (net_pkt_skip(pkt, 2) ||
 801208e:	2800      	cmp	r0, #0
 8012090:	d1b1      	bne.n	8011ff6 <handle_ra_input+0x16a>
			if (mtu < MIN_IPV6_MTU || mtu > MAX_IPV6_MTU) {
 8012092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012094:	f5a3 62a0 	sub.w	r2, r3, #1280	; 0x500
 8012098:	f5b2 4f7b 	cmp.w	r2, #64256	; 0xfb00
 801209c:	d207      	bcs.n	80120ae <handle_ra_input+0x222>
	return pkt->iface;
 801209e:	69a2      	ldr	r2, [r4, #24]
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
 80120a0:	b29b      	uxth	r3, r3
	if (iface == NULL) {
 80120a2:	2a00      	cmp	r2, #0
 80120a4:	f000 8261 	beq.w	801256a <handle_ra_input+0x6de>
	iface->if_dev->mtu = mtu;
 80120a8:	6812      	ldr	r2, [r2, #0]
 80120aa:	8313      	strh	r3, [r2, #24]
 80120ac:	e25d      	b.n	801256a <handle_ra_input+0x6de>
				NET_ERR("DROP: Unsupported MTU %u, min is %u, "
 80120ae:	466d      	mov	r5, sp
 80120b0:	b088      	sub	sp, #32
 80120b2:	a806      	add	r0, sp, #24
 80120b4:	466a      	mov	r2, sp
 80120b6:	3224      	adds	r2, #36	; 0x24
 80120b8:	d03d      	beq.n	8012136 <handle_ra_input+0x2aa>
 80120ba:	2114      	movs	r1, #20
 80120bc:	b11a      	cbz	r2, 80120c6 <handle_ra_input+0x23a>
 80120be:	2904      	cmp	r1, #4
 80120c0:	dd01      	ble.n	80120c6 <handle_ra_input+0x23a>
 80120c2:	4e48      	ldr	r6, [pc, #288]	; (80121e4 <handle_ra_input+0x358>)
 80120c4:	6106      	str	r6, [r0, #16]
 80120c6:	b112      	cbz	r2, 80120ce <handle_ra_input+0x242>
 80120c8:	2908      	cmp	r1, #8
 80120ca:	dd00      	ble.n	80120ce <handle_ra_input+0x242>
 80120cc:	6143      	str	r3, [r0, #20]
 80120ce:	b122      	cbz	r2, 80120da <handle_ra_input+0x24e>
 80120d0:	290c      	cmp	r1, #12
 80120d2:	dd02      	ble.n	80120da <handle_ra_input+0x24e>
 80120d4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80120d8:	6183      	str	r3, [r0, #24]
 80120da:	b122      	cbz	r2, 80120e6 <handle_ra_input+0x25a>
 80120dc:	2910      	cmp	r1, #16
 80120de:	dd02      	ble.n	80120e6 <handle_ra_input+0x25a>
 80120e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80120e4:	61c3      	str	r3, [r0, #28]
 80120e6:	2913      	cmp	r1, #19
 80120e8:	dd28      	ble.n	801213c <handle_ra_input+0x2b0>
 80120ea:	2314      	movs	r3, #20
 80120ec:	b15a      	cbz	r2, 8012106 <handle_ra_input+0x27a>
 80120ee:	2200      	movs	r2, #0
 80120f0:	f8a7 2031 	strh.w	r2, [r7, #49]	; 0x31
 80120f4:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
 80120f8:	2105      	movs	r1, #5
 80120fa:	f887 1030 	strb.w	r1, [r7, #48]	; 0x30
 80120fe:	f887 2032 	strb.w	r2, [r7, #50]	; 0x32
 8012102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012104:	60c2      	str	r2, [r0, #12]
 8012106:	2200      	movs	r2, #0
 8012108:	f36f 0200 	bfc	r2, #0, #1
 801210c:	f36f 0241 	bfc	r2, #1, #1
 8012110:	f36f 0282 	bfc	r2, #2, #1
 8012114:	f36f 02c5 	bfc	r2, #3, #3
 8012118:	2101      	movs	r1, #1
 801211a:	f361 1288 	bfi	r2, r1, #6, #3
 801211e:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
 8012122:	f363 2252 	bfi	r2, r3, #9, #10
 8012126:	2300      	movs	r3, #0
 8012128:	f3c2 0212 	ubfx	r2, r2, #0, #19
 801212c:	492c      	ldr	r1, [pc, #176]	; (80121e0 <handle_ra_input+0x354>)
 801212e:	f005 fe10 	bl	8017d52 <z_log_msg2_finalize>
 8012132:	46ad      	mov	sp, r5
				goto drop;
 8012134:	e75f      	b.n	8011ff6 <handle_ra_input+0x16a>
				NET_ERR("DROP: Unsupported MTU %u, min is %u, "
 8012136:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801213a:	e7bf      	b.n	80120bc <handle_ra_input+0x230>
 801213c:	f06f 031b 	mvn.w	r3, #27
 8012140:	e7d4      	b.n	80120ec <handle_ra_input+0x260>
			if (nd_opt_hdr->len != 4) {
 8012142:	7873      	ldrb	r3, [r6, #1]
 8012144:	2b04      	cmp	r3, #4
 8012146:	d14f      	bne.n	80121e8 <handle_ra_input+0x35c>
	NET_PKT_DATA_ACCESS_DEFINE(rapfx_access,
 8012148:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801214c:	61bb      	str	r3, [r7, #24]
 801214e:	231e      	movs	r3, #30
 8012150:	61fb      	str	r3, [r7, #28]
				net_pkt_get_data(pkt, &rapfx_access);
 8012152:	f107 0118 	add.w	r1, r7, #24
 8012156:	4620      	mov	r0, r4
 8012158:	f7fd fd38 	bl	800fbcc <net_pkt_get_data>
	if (!pfx_info) {
 801215c:	4606      	mov	r6, r0
 801215e:	2800      	cmp	r0, #0
 8012160:	f000 8150 	beq.w	8012404 <handle_ra_input+0x578>
	return net_pkt_skip(pkt, access->size);
 8012164:	69f9      	ldr	r1, [r7, #28]
 8012166:	4620      	mov	r0, r4
 8012168:	f008 f9ed 	bl	801a546 <net_pkt_skip>
	valid_lifetime = ntohl(pfx_info->valid_lifetime);
 801216c:	f8d6 3002 	ldr.w	r3, [r6, #2]
 8012170:	0a1d      	lsrs	r5, r3, #8
 8012172:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8012176:	ea45 6513 	orr.w	r5, r5, r3, lsr #24
 801217a:	021a      	lsls	r2, r3, #8
 801217c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8012180:	4315      	orrs	r5, r2
 8012182:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
	preferred_lifetime = ntohl(pfx_info->preferred_lifetime);
 8012186:	f8d6 2006 	ldr.w	r2, [r6, #6]
 801218a:	0a13      	lsrs	r3, r2, #8
 801218c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012190:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8012194:	0211      	lsls	r1, r2, #8
 8012196:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 801219a:	430b      	orrs	r3, r1
 801219c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
	if (valid_lifetime >= preferred_lifetime &&
 80121a0:	429d      	cmp	r5, r3
 80121a2:	f0c0 8131 	bcc.w	8012408 <handle_ra_input+0x57c>
 80121a6:	89f2      	ldrh	r2, [r6, #14]
 80121a8:	f248 03fe 	movw	r3, #33022	; 0x80fe
 80121ac:	429a      	cmp	r2, r3
 80121ae:	f000 8130 	beq.w	8012412 <handle_ra_input+0x586>
		if (pfx_info->flags & NET_ICMPV6_RA_FLAG_ONLINK) {
 80121b2:	f996 3001 	ldrsb.w	r3, [r6, #1]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	db23      	blt.n	8012202 <handle_ra_input+0x376>
		if ((pfx_info->flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
 80121ba:	7873      	ldrb	r3, [r6, #1]
 80121bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80121c0:	f000 8129 	beq.w	8012416 <handle_ra_input+0x58a>
 80121c4:	2d00      	cmp	r5, #0
 80121c6:	f000 8128 	beq.w	801241a <handle_ra_input+0x58e>
		    (pfx_info->prefix_len == NET_IPV6_DEFAULT_PREFIX_LEN)) {
 80121ca:	7833      	ldrb	r3, [r6, #0]
		    valid_lifetime &&
 80121cc:	2b40      	cmp	r3, #64	; 0x40
 80121ce:	d06c      	beq.n	80122aa <handle_ra_input+0x41e>
	return true;
 80121d0:	2301      	movs	r3, #1
 80121d2:	e11a      	b.n	801240a <handle_ra_input+0x57e>
 80121d4:	20002a58 	.word	0x20002a58
 80121d8:	0036ee80 	.word	0x0036ee80
 80121dc:	0801e520 	.word	0x0801e520
 80121e0:	0801d788 	.word	0x0801d788
 80121e4:	0801e538 	.word	0x0801e538
				NET_ERR("DROP: Invalid %s length (%d)",
 80121e8:	9303      	str	r3, [sp, #12]
 80121ea:	4bb7      	ldr	r3, [pc, #732]	; (80124c8 <handle_ra_input+0x63c>)
 80121ec:	9302      	str	r3, [sp, #8]
 80121ee:	4bb7      	ldr	r3, [pc, #732]	; (80124cc <handle_ra_input+0x640>)
 80121f0:	9301      	str	r3, [sp, #4]
 80121f2:	2000      	movs	r0, #0
 80121f4:	9000      	str	r0, [sp, #0]
 80121f6:	4603      	mov	r3, r0
 80121f8:	2201      	movs	r2, #1
 80121fa:	49b5      	ldr	r1, [pc, #724]	; (80124d0 <handle_ra_input+0x644>)
 80121fc:	f009 f81d 	bl	801b23a <z_log_msg2_runtime_create>
				goto drop;
 8012200:	e6f9      	b.n	8011ff6 <handle_ra_input+0x16a>
					   (struct in6_addr *)prefix_info->prefix,
 8012202:	46b0      	mov	r8, r6
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
 8012204:	f818 2b0e 	ldrb.w	r2, [r8], #14
 8012208:	4641      	mov	r1, r8
 801220a:	69a0      	ldr	r0, [r4, #24]
 801220c:	f7fc f8a0 	bl	800e350 <net_if_ipv6_prefix_lookup>
	if (!prefix) {
 8012210:	4603      	mov	r3, r0
 8012212:	b190      	cbz	r0, 801223a <handle_ra_input+0x3ae>
	switch (prefix_info->valid_lifetime) {
 8012214:	f8d6 2002 	ldr.w	r2, [r6, #2]
 8012218:	2a00      	cmp	r2, #0
 801221a:	d037      	beq.n	801228c <handle_ra_input+0x400>
 801221c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8012220:	d03c      	beq.n	801229c <handle_ra_input+0x410>
	prefix->is_infinite = is_infinite;
 8012222:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8012226:	f36f 0200 	bfc	r2, #0, #1
 801222a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		net_if_ipv6_prefix_set_timer(prefix,
 801222e:	f8d6 1002 	ldr.w	r1, [r6, #2]
 8012232:	4618      	mov	r0, r3
 8012234:	f007 fb2d 	bl	8019892 <net_if_ipv6_prefix_set_timer>
		break;
 8012238:	e7bf      	b.n	80121ba <handle_ra_input+0x32e>
		if (!prefix_info->valid_lifetime) {
 801223a:	f8d6 3002 	ldr.w	r3, [r6, #2]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d0bb      	beq.n	80121ba <handle_ra_input+0x32e>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
 8012242:	7832      	ldrb	r2, [r6, #0]
 8012244:	4641      	mov	r1, r8
 8012246:	69a0      	ldr	r0, [r4, #24]
 8012248:	f7fc f826 	bl	800e298 <net_if_ipv6_prefix_add>
		if (prefix) {
 801224c:	4603      	mov	r3, r0
 801224e:	2800      	cmp	r0, #0
 8012250:	d1e0      	bne.n	8012214 <handle_ra_input+0x388>
			NET_ERR("Prefix %s/%d could not be added to "
 8012252:	4641      	mov	r1, r8
 8012254:	2002      	movs	r0, #2
 8012256:	f7fd f985 	bl	800f564 <net_sprint_addr>
 801225a:	6038      	str	r0, [r7, #0]
 801225c:	f896 8000 	ldrb.w	r8, [r6]
	return pkt->iface;
 8012260:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8012264:	4648      	mov	r0, r9
 8012266:	f7fc feeb 	bl	800f040 <net_if_get_by_iface>
 801226a:	9005      	str	r0, [sp, #20]
 801226c:	f8cd 9010 	str.w	r9, [sp, #16]
 8012270:	f8cd 800c 	str.w	r8, [sp, #12]
 8012274:	683b      	ldr	r3, [r7, #0]
 8012276:	9302      	str	r3, [sp, #8]
 8012278:	4b96      	ldr	r3, [pc, #600]	; (80124d4 <handle_ra_input+0x648>)
 801227a:	9301      	str	r3, [sp, #4]
 801227c:	2000      	movs	r0, #0
 801227e:	9000      	str	r0, [sp, #0]
 8012280:	4603      	mov	r3, r0
 8012282:	2201      	movs	r2, #1
 8012284:	4992      	ldr	r1, [pc, #584]	; (80124d0 <handle_ra_input+0x644>)
 8012286:	f008 ffd8 	bl	801b23a <z_log_msg2_runtime_create>
			return;
 801228a:	e796      	b.n	80121ba <handle_ra_input+0x32e>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
 801228c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8012290:	f103 0110 	add.w	r1, r3, #16
 8012294:	69a0      	ldr	r0, [r4, #24]
 8012296:	f7fc f93d 	bl	800e514 <net_if_ipv6_prefix_rm>
		break;
 801229a:	e78e      	b.n	80121ba <handle_ra_input+0x32e>
 801229c:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80122a0:	f042 0201 	orr.w	r2, r2, #1
 80122a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 80122a8:	e787      	b.n	80121ba <handle_ra_input+0x32e>
	struct in6_addr addr = { };
 80122aa:	2300      	movs	r3, #0
 80122ac:	623b      	str	r3, [r7, #32]
 80122ae:	627b      	str	r3, [r7, #36]	; 0x24
 80122b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80122b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122b4:	69a2      	ldr	r2, [r4, #24]
	return &iface->if_dev->link_addr;
 80122b6:	6811      	ldr	r1, [r2, #0]
 80122b8:	f101 0010 	add.w	r0, r1, #16
	UNALIGNED_PUT(htonl(0xfe800000), &addr->s6_addr32[0]);
 80122bc:	f248 02fe 	movw	r2, #33022	; 0x80fe
 80122c0:	623a      	str	r2, [r7, #32]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
 80122c2:	627b      	str	r3, [r7, #36]	; 0x24
	switch (lladdr->len) {
 80122c4:	7902      	ldrb	r2, [r0, #4]
 80122c6:	2a06      	cmp	r2, #6
 80122c8:	d03a      	beq.n	8012340 <handle_ra_input+0x4b4>
 80122ca:	2a08      	cmp	r2, #8
 80122cc:	d056      	beq.n	801237c <handle_ra_input+0x4f0>
 80122ce:	2a02      	cmp	r2, #2
 80122d0:	d01e      	beq.n	8012310 <handle_ra_input+0x484>
	memcpy(&addr, prefix_info->prefix, sizeof(prefix_info->prefix) / 2);
 80122d2:	4632      	mov	r2, r6
 80122d4:	f107 0320 	add.w	r3, r7, #32
 80122d8:	f852 0f0e 	ldr.w	r0, [r2, #14]!
 80122dc:	6851      	ldr	r1, [r2, #4]
 80122de:	c303      	stmia	r3!, {r0, r1}
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
 80122e0:	2100      	movs	r1, #0
 80122e2:	f107 0020 	add.w	r0, r7, #32
 80122e6:	f7fb fa5b 	bl	800d7a0 <net_if_ipv6_addr_lookup>
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
 80122ea:	4605      	mov	r5, r0
 80122ec:	b118      	cbz	r0, 80122f6 <handle_ra_input+0x46a>
 80122ee:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80122f2:	2b01      	cmp	r3, #1
 80122f4:	d04f      	beq.n	8012396 <handle_ra_input+0x50a>
		if (prefix_info->valid_lifetime ==
 80122f6:	f8d6 3002 	ldr.w	r3, [r6, #2]
 80122fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80122fe:	d079      	beq.n	80123f4 <handle_ra_input+0x568>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
 8012300:	2201      	movs	r2, #1
 8012302:	f107 0120 	add.w	r1, r7, #32
 8012306:	69a0      	ldr	r0, [r4, #24]
 8012308:	f7fb fb6e 	bl	800d9e8 <net_if_ipv6_addr_add>
	return true;
 801230c:	2301      	movs	r3, #1
 801230e:	e07c      	b.n	801240a <handle_ra_input+0x57e>
		if (lladdr->type == NET_LINK_IEEE802154 ||
 8012310:	7943      	ldrb	r3, [r0, #5]
 8012312:	2b01      	cmp	r3, #1
 8012314:	d001      	beq.n	801231a <handle_ra_input+0x48e>
 8012316:	2b06      	cmp	r3, #6
 8012318:	d1db      	bne.n	80122d2 <handle_ra_input+0x446>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
 801231a:	2300      	movs	r3, #0
 801231c:	62bb      	str	r3, [r7, #40]	; 0x28
			addr->s6_addr[11] = 0xff;
 801231e:	22ff      	movs	r2, #255	; 0xff
 8012320:	f887 202b 	strb.w	r2, [r7, #43]	; 0x2b
			addr->s6_addr[12] = 0xfe;
 8012324:	22fe      	movs	r2, #254	; 0xfe
 8012326:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
			addr->s6_addr[13] = 0U;
 801232a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			addr->s6_addr[14] = lladdr->addr[0];
 801232e:	690b      	ldr	r3, [r1, #16]
 8012330:	781b      	ldrb	r3, [r3, #0]
 8012332:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			addr->s6_addr[15] = lladdr->addr[1];
 8012336:	690b      	ldr	r3, [r1, #16]
 8012338:	785b      	ldrb	r3, [r3, #1]
 801233a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801233e:	e7c8      	b.n	80122d2 <handle_ra_input+0x446>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
 8012340:	690b      	ldr	r3, [r1, #16]
 8012342:	881a      	ldrh	r2, [r3, #0]
 8012344:	789b      	ldrb	r3, [r3, #2]
 8012346:	853a      	strh	r2, [r7, #40]	; 0x28
 8012348:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		addr->s6_addr[11] = 0xff;
 801234c:	23ff      	movs	r3, #255	; 0xff
 801234e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		addr->s6_addr[12] = 0xfe;
 8012352:	23fe      	movs	r3, #254	; 0xfe
 8012354:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
 8012358:	690b      	ldr	r3, [r1, #16]
 801235a:	f833 2f03 	ldrh.w	r2, [r3, #3]!
 801235e:	789b      	ldrb	r3, [r3, #2]
 8012360:	f8a7 202d 	strh.w	r2, [r7, #45]	; 0x2d
 8012364:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (lladdr->type == NET_LINK_ETHERNET) {
 8012368:	7943      	ldrb	r3, [r0, #5]
 801236a:	2b03      	cmp	r3, #3
 801236c:	d1b1      	bne.n	80122d2 <handle_ra_input+0x446>
			addr->s6_addr[8] ^= 0x02;
 801236e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012372:	f083 0302 	eor.w	r3, r3, #2
 8012376:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 801237a:	e7aa      	b.n	80122d2 <handle_ra_input+0x446>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
 801237c:	2308      	movs	r3, #8
 801237e:	6909      	ldr	r1, [r1, #16]
 8012380:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8012384:	f00a fa66 	bl	801c854 <__memcpy_chk>
		addr->s6_addr[8] ^= 0x02;
 8012388:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801238c:	f083 0302 	eor.w	r3, r3, #2
 8012390:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		break;
 8012394:	e79d      	b.n	80122d2 <handle_ra_input+0x446>
		if (prefix_info->valid_lifetime ==
 8012396:	f8d6 9002 	ldr.w	r9, [r6, #2]
 801239a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 801239e:	d01c      	beq.n	80123da <handle_ra_input+0x54e>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
 80123a0:	f5b9 5fe1 	cmp.w	r9, #7200	; 0x1c20
 80123a4:	d80d      	bhi.n	80123c2 <handle_ra_input+0x536>
	return net_timeout_remaining(&ifaddr->lifetime, k_uptime_get_32());
 80123a6:	f100 0814 	add.w	r8, r0, #20
 80123aa:	f00a f92d 	bl	801c608 <z_impl_k_uptime_ticks>
 80123ae:	220a      	movs	r2, #10
 80123b0:	2300      	movs	r3, #0
 80123b2:	f7ee fbc3 	bl	8000b3c <__aeabi_uldivmod>
 80123b6:	4601      	mov	r1, r0
 80123b8:	4640      	mov	r0, r8
 80123ba:	f007 fb08 	bl	80199ce <net_timeout_remaining>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
 80123be:	4581      	cmp	r9, r0
 80123c0:	d912      	bls.n	80123e8 <handle_ra_input+0x55c>
			net_if_ipv6_addr_update_lifetime(
 80123c2:	f8d6 1002 	ldr.w	r1, [r6, #2]
 80123c6:	4628      	mov	r0, r5
 80123c8:	f7fb faf6 	bl	800d9b8 <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
 80123cc:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80123d0:	f36f 0300 	bfc	r3, #0, #1
 80123d4:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
}
 80123d8:	e798      	b.n	801230c <handle_ra_input+0x480>
	ifaddr->is_infinite = is_infinite;
 80123da:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80123de:	f043 0301 	orr.w	r3, r3, #1
 80123e2:	f880 302f 	strb.w	r3, [r0, #47]	; 0x2f
			return;
 80123e6:	e791      	b.n	801230c <handle_ra_input+0x480>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
 80123e8:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 80123ec:	4628      	mov	r0, r5
 80123ee:	f7fb fae3 	bl	800d9b8 <net_if_ipv6_addr_update_lifetime>
 80123f2:	e7eb      	b.n	80123cc <handle_ra_input+0x540>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
 80123f4:	2300      	movs	r3, #0
 80123f6:	2201      	movs	r2, #1
 80123f8:	f107 0120 	add.w	r1, r7, #32
 80123fc:	69a0      	ldr	r0, [r4, #24]
 80123fe:	f7fb faf3 	bl	800d9e8 <net_if_ipv6_addr_add>
 8012402:	e783      	b.n	801230c <handle_ra_input+0x480>
		return false;
 8012404:	2300      	movs	r3, #0
 8012406:	e000      	b.n	801240a <handle_ra_input+0x57e>
	return true;
 8012408:	2301      	movs	r3, #1
			if (!handle_ra_prefix(pkt)) {
 801240a:	2b00      	cmp	r3, #0
 801240c:	f040 80ad 	bne.w	801256a <handle_ra_input+0x6de>
 8012410:	e5f1      	b.n	8011ff6 <handle_ra_input+0x16a>
	return true;
 8012412:	2301      	movs	r3, #1
 8012414:	e7f9      	b.n	801240a <handle_ra_input+0x57e>
 8012416:	2301      	movs	r3, #1
 8012418:	e7f7      	b.n	801240a <handle_ra_input+0x57e>
 801241a:	2301      	movs	r3, #1
 801241c:	e7f5      	b.n	801240a <handle_ra_input+0x57e>
			if (nd_opt_hdr->len == 0U || nd_opt_hdr->len > 3U) {
 801241e:	7876      	ldrb	r6, [r6, #1]
 8012420:	1e73      	subs	r3, r6, #1
 8012422:	b2db      	uxtb	r3, r3
 8012424:	2b02      	cmp	r3, #2
 8012426:	d842      	bhi.n	80124ae <handle_ra_input+0x622>
	NET_PKT_DATA_ACCESS_DEFINE(routeinfo_access,
 8012428:	f107 0318 	add.w	r3, r7, #24
 801242c:	623b      	str	r3, [r7, #32]
 801242e:	2306      	movs	r3, #6
 8012430:	627b      	str	r3, [r7, #36]	; 0x24
	struct in6_addr prefix_buf = { 0 };
 8012432:	2300      	movs	r3, #0
 8012434:	633b      	str	r3, [r7, #48]	; 0x30
 8012436:	637b      	str	r3, [r7, #52]	; 0x34
 8012438:	63bb      	str	r3, [r7, #56]	; 0x38
 801243a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t prefix_field_len = (len - 1) * 8;
 801243c:	1e75      	subs	r5, r6, #1
 801243e:	00ed      	lsls	r5, r5, #3
 8012440:	b2ed      	uxtb	r5, r5
				net_pkt_get_data(pkt, &routeinfo_access);
 8012442:	f107 0120 	add.w	r1, r7, #32
 8012446:	4620      	mov	r0, r4
 8012448:	f7fd fbc0 	bl	800fbcc <net_pkt_get_data>
	if (!route_info) {
 801244c:	4680      	mov	r8, r0
 801244e:	2800      	cmp	r0, #0
 8012450:	d07b      	beq.n	801254a <handle_ra_input+0x6be>
	return net_pkt_skip(pkt, access->size);
 8012452:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012454:	4620      	mov	r0, r4
 8012456:	f008 f876 	bl	801a546 <net_pkt_skip>
	if (ret < 0) {
 801245a:	2800      	cmp	r0, #0
 801245c:	db78      	blt.n	8012550 <handle_ra_input+0x6c4>
	prefix_len = route_info->prefix_len;
 801245e:	f898 9000 	ldrb.w	r9, [r8]
	route_lifetime = ntohl(route_info->route_lifetime);
 8012462:	f8d8 3002 	ldr.w	r3, [r8, #2]
 8012466:	0a1e      	lsrs	r6, r3, #8
 8012468:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801246c:	ea46 6613 	orr.w	r6, r6, r3, lsr #24
 8012470:	021a      	lsls	r2, r3, #8
 8012472:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8012476:	4316      	orrs	r6, r2
 8012478:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
	preference = route_info->flags.prf;
 801247c:	f898 8001 	ldrb.w	r8, [r8, #1]
 8012480:	f3c8 08c1 	ubfx	r8, r8, #3, #2
	ret = net_pkt_read(pkt, &prefix_buf, prefix_field_len);
 8012484:	462a      	mov	r2, r5
 8012486:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801248a:	4620      	mov	r0, r4
 801248c:	f008 f873 	bl	801a576 <net_pkt_read>
	if (ret < 0) {
 8012490:	2800      	cmp	r0, #0
 8012492:	db23      	blt.n	80124dc <handle_ra_input+0x650>
	if (route_lifetime == 0) {
 8012494:	2e00      	cmp	r6, #0
 8012496:	d14a      	bne.n	801252e <handle_ra_input+0x6a2>
		route = net_route_lookup(net_pkt_orig_iface(pkt), &prefix_buf);
 8012498:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801249c:	69a0      	ldr	r0, [r4, #24]
 801249e:	f000 fe5d 	bl	801315c <net_route_lookup>
		if (route != NULL) {
 80124a2:	2800      	cmp	r0, #0
 80124a4:	d056      	beq.n	8012554 <handle_ra_input+0x6c8>
			ret = net_route_del(route);
 80124a6:	f000 ff7d 	bl	80133a4 <net_route_del>
	return true;
 80124aa:	2501      	movs	r5, #1
 80124ac:	e04e      	b.n	801254c <handle_ra_input+0x6c0>
				NET_ERR("DROP: Invalid %s length (%d)",
 80124ae:	9603      	str	r6, [sp, #12]
 80124b0:	4b09      	ldr	r3, [pc, #36]	; (80124d8 <handle_ra_input+0x64c>)
 80124b2:	9302      	str	r3, [sp, #8]
 80124b4:	4b05      	ldr	r3, [pc, #20]	; (80124cc <handle_ra_input+0x640>)
 80124b6:	9301      	str	r3, [sp, #4]
 80124b8:	2000      	movs	r0, #0
 80124ba:	9000      	str	r0, [sp, #0]
 80124bc:	4603      	mov	r3, r0
 80124be:	2201      	movs	r2, #1
 80124c0:	4903      	ldr	r1, [pc, #12]	; (80124d0 <handle_ra_input+0x644>)
 80124c2:	f008 feba 	bl	801b23a <z_log_msg2_runtime_create>
				goto drop;
 80124c6:	e596      	b.n	8011ff6 <handle_ra_input+0x16a>
 80124c8:	0801e568 	.word	0x0801e568
 80124cc:	0801e574 	.word	0x0801e574
 80124d0:	0801d788 	.word	0x0801d788
 80124d4:	0801e594 	.word	0x0801e594
 80124d8:	0801e5c4 	.word	0x0801e5c4
		NET_ERR("Error reading prefix, %d", ret);
 80124dc:	4b66      	ldr	r3, [pc, #408]	; (8012678 <handle_ra_input+0x7ec>)
 80124de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80124e2:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
 80124e6:	2500      	movs	r5, #0
 80124e8:	f8a7 5015 	strh.w	r5, [r7, #21]
 80124ec:	75fd      	strb	r5, [r7, #23]
 80124ee:	2303      	movs	r3, #3
 80124f0:	753b      	strb	r3, [r7, #20]
 80124f2:	75bd      	strb	r5, [r7, #22]
 80124f4:	697b      	ldr	r3, [r7, #20]
 80124f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80124fa:	f365 0b00 	bfi	fp, r5, #0, #1
 80124fe:	f365 0b41 	bfi	fp, r5, #1, #1
 8012502:	f365 0b82 	bfi	fp, r5, #2, #1
 8012506:	f365 0bc5 	bfi	fp, r5, #3, #3
 801250a:	2301      	movs	r3, #1
 801250c:	f363 1b88 	bfi	fp, r3, #6, #3
 8012510:	230c      	movs	r3, #12
 8012512:	f363 2b52 	bfi	fp, r3, #9, #10
 8012516:	f365 4bde 	bfi	fp, r5, #19, #12
 801251a:	f365 7bdf 	bfi	fp, r5, #31, #1
 801251e:	462b      	mov	r3, r5
 8012520:	465a      	mov	r2, fp
 8012522:	4956      	ldr	r1, [pc, #344]	; (801267c <handle_ra_input+0x7f0>)
 8012524:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8012528:	f005 fc13 	bl	8017d52 <z_log_msg2_finalize>
		return false;
 801252c:	e00e      	b.n	801254c <handle_ra_input+0x6c0>
	return pkt->iface;
 801252e:	69a0      	ldr	r0, [r4, #24]
	return pkt->frags->data;
 8012530:	68a3      	ldr	r3, [r4, #8]
 8012532:	689b      	ldr	r3, [r3, #8]
		route = net_route_add(net_pkt_orig_iface(pkt),
 8012534:	f8cd 8004 	str.w	r8, [sp, #4]
 8012538:	9600      	str	r6, [sp, #0]
 801253a:	3308      	adds	r3, #8
 801253c:	464a      	mov	r2, r9
 801253e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012542:	f001 f8c5 	bl	80136d0 <net_route_add>
	return true;
 8012546:	2501      	movs	r5, #1
 8012548:	e000      	b.n	801254c <handle_ra_input+0x6c0>
		return false;
 801254a:	2500      	movs	r5, #0
			if (!handle_ra_route_info(pkt, nd_opt_hdr->len)) {
 801254c:	b96d      	cbnz	r5, 801256a <handle_ra_input+0x6de>
 801254e:	e552      	b.n	8011ff6 <handle_ra_input+0x16a>
		return false;
 8012550:	2500      	movs	r5, #0
 8012552:	e7fb      	b.n	801254c <handle_ra_input+0x6c0>
	return true;
 8012554:	2501      	movs	r5, #1
 8012556:	e7f9      	b.n	801254c <handle_ra_input+0x6c0>
			if (net_pkt_skip(pkt, nd_opt_hdr->len * 8U - 2)) {
 8012558:	7871      	ldrb	r1, [r6, #1]
 801255a:	00c9      	lsls	r1, r1, #3
 801255c:	3902      	subs	r1, #2
 801255e:	4620      	mov	r0, r4
 8012560:	f007 fff1 	bl	801a546 <net_pkt_skip>
 8012564:	2800      	cmp	r0, #0
 8012566:	f47f ad46 	bne.w	8011ff6 <handle_ra_input+0x16a>
					net_pkt_get_data(pkt, &nd_access);
 801256a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 801256e:	4620      	mov	r0, r4
 8012570:	f7fd fb2c 	bl	800fbcc <net_pkt_get_data>
 8012574:	4606      	mov	r6, r0
	while (nd_opt_hdr) {
 8012576:	2e00      	cmp	r6, #0
 8012578:	d03a      	beq.n	80125f0 <handle_ra_input+0x764>
	return net_pkt_skip(pkt, access->size);
 801257a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801257c:	4620      	mov	r0, r4
 801257e:	f007 ffe2 	bl	801a546 <net_pkt_skip>
		switch (nd_opt_hdr->type) {
 8012582:	7833      	ldrb	r3, [r6, #0]
 8012584:	3b01      	subs	r3, #1
 8012586:	2b17      	cmp	r3, #23
 8012588:	d8e6      	bhi.n	8012558 <handle_ra_input+0x6cc>
 801258a:	a201      	add	r2, pc, #4	; (adr r2, 8012590 <handle_ra_input+0x704>)
 801258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012590:	08012035 	.word	0x08012035
 8012594:	08012559 	.word	0x08012559
 8012598:	08012143 	.word	0x08012143
 801259c:	08012559 	.word	0x08012559
 80125a0:	08012079 	.word	0x08012079
 80125a4:	08012559 	.word	0x08012559
 80125a8:	08012559 	.word	0x08012559
 80125ac:	08012559 	.word	0x08012559
 80125b0:	08012559 	.word	0x08012559
 80125b4:	08012559 	.word	0x08012559
 80125b8:	08012559 	.word	0x08012559
 80125bc:	08012559 	.word	0x08012559
 80125c0:	08012559 	.word	0x08012559
 80125c4:	08012559 	.word	0x08012559
 80125c8:	08012559 	.word	0x08012559
 80125cc:	08012559 	.word	0x08012559
 80125d0:	08012559 	.word	0x08012559
 80125d4:	08012559 	.word	0x08012559
 80125d8:	08012559 	.word	0x08012559
 80125dc:	08012559 	.word	0x08012559
 80125e0:	08012559 	.word	0x08012559
 80125e4:	08012559 	.word	0x08012559
 80125e8:	08012559 	.word	0x08012559
 80125ec:	0801241f 	.word	0x0801241f
					   (struct in6_addr *)ip_hdr->src);
 80125f0:	68fd      	ldr	r5, [r7, #12]
 80125f2:	3508      	adds	r5, #8
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt),
 80125f4:	4629      	mov	r1, r5
 80125f6:	69a0      	ldr	r0, [r4, #24]
 80125f8:	f007 f95d 	bl	80198b6 <net_if_ipv6_router_lookup>
	if (router) {
 80125fc:	4603      	mov	r3, r0
 80125fe:	b378      	cbz	r0, 8012660 <handle_ra_input+0x7d4>
		if (!router_lifetime) {
 8012600:	687a      	ldr	r2, [r7, #4]
 8012602:	b352      	cbz	r2, 801265a <handle_ra_input+0x7ce>
			if (nbr) {
 8012604:	f1ba 0f00 	cmp.w	sl, #0
 8012608:	d004      	beq.n	8012614 <handle_ra_input+0x788>
 801260a:	f8da 200c 	ldr.w	r2, [sl, #12]
				net_ipv6_nbr_data(nbr)->is_router = true;
 801260e:	2101      	movs	r1, #1
 8012610:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
			net_if_ipv6_router_update_lifetime(
 8012614:	6879      	ldr	r1, [r7, #4]
 8012616:	4618      	mov	r0, r3
 8012618:	f007 f959 	bl	80198ce <net_if_ipv6_router_update_lifetime>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
 801261c:	f1ba 0f00 	cmp.w	sl, #0
 8012620:	d013      	beq.n	801264a <handle_ra_input+0x7be>
 8012622:	f8da 300c 	ldr.w	r3, [sl, #12]
 8012626:	6818      	ldr	r0, [r3, #0]
 8012628:	b178      	cbz	r0, 801264a <handle_ra_input+0x7be>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
 801262a:	f7f9 ffa3 	bl	800c574 <net_send_data>
 801262e:	2800      	cmp	r0, #0
 8012630:	db1c      	blt.n	801266c <handle_ra_input+0x7e0>
 8012632:	f8da 500c 	ldr.w	r5, [sl, #12]
	data->send_ns = 0;
 8012636:	2200      	movs	r2, #0
 8012638:	2300      	movs	r3, #0
 801263a:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
	if (data->pending) {
 801263e:	6828      	ldr	r0, [r5, #0]
 8012640:	b118      	cbz	r0, 801264a <handle_ra_input+0x7be>
		net_pkt_unref(data->pending);
 8012642:	f007 fea9 	bl	801a398 <net_pkt_unref>
		data->pending = NULL;
 8012646:	2300      	movs	r3, #0
 8012648:	602b      	str	r3, [r5, #0]
	net_if_stop_rs(net_pkt_iface(pkt));
 801264a:	69a0      	ldr	r0, [r4, #24]
 801264c:	f7fb f870 	bl	800d730 <net_if_stop_rs>
	net_pkt_unref(pkt);
 8012650:	4620      	mov	r0, r4
 8012652:	f007 fea1 	bl	801a398 <net_pkt_unref>
	return NET_OK;
 8012656:	2000      	movs	r0, #0
 8012658:	e4da      	b.n	8012010 <handle_ra_input+0x184>
			net_if_ipv6_router_rm(router);
 801265a:	f007 f951 	bl	8019900 <net_if_ipv6_router_rm>
 801265e:	e7dd      	b.n	801261c <handle_ra_input+0x790>
		net_if_ipv6_router_add(net_pkt_iface(pkt),
 8012660:	687a      	ldr	r2, [r7, #4]
 8012662:	4629      	mov	r1, r5
 8012664:	69a0      	ldr	r0, [r4, #24]
 8012666:	f007 f940 	bl	80198ea <net_if_ipv6_router_add>
 801266a:	e7d7      	b.n	801261c <handle_ra_input+0x790>
 801266c:	f8da 300c 	ldr.w	r3, [sl, #12]
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
 8012670:	6818      	ldr	r0, [r3, #0]
 8012672:	f007 fe91 	bl	801a398 <net_pkt_unref>
 8012676:	e7dc      	b.n	8012632 <handle_ra_input+0x7a6>
 8012678:	0801e5d4 	.word	0x0801e5d4
 801267c:	0801d788 	.word	0x0801d788

08012680 <handle_ns_input>:
{
 8012680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012684:	b0a9      	sub	sp, #164	; 0xa4
 8012686:	4604      	mov	r4, r0
 8012688:	460e      	mov	r6, r1
 801268a:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ns_access,
 801268c:	2500      	movs	r5, #0
 801268e:	950a      	str	r5, [sp, #40]	; 0x28
 8012690:	2314      	movs	r3, #20
 8012692:	930b      	str	r3, [sp, #44]	; 0x2c
	NET_PKT_DATA_ACCESS_DEFINE(nd_access, struct net_icmpv6_nd_opt_hdr);
 8012694:	ab09      	add	r3, sp, #36	; 0x24
 8012696:	9307      	str	r3, [sp, #28]
 8012698:	2302      	movs	r3, #2
 801269a:	9308      	str	r3, [sp, #32]
	return net_buf_frags_len(pkt->frags);
 801269c:	6883      	ldr	r3, [r0, #8]
	while (buf) {
 801269e:	b11b      	cbz	r3, 80126a8 <handle_ns_input+0x28>
		bytes += buf->len;
 80126a0:	899a      	ldrh	r2, [r3, #12]
 80126a2:	4415      	add	r5, r2
		buf = buf->frags;
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	e7fa      	b.n	801269e <handle_ns_input+0x1e>
	uint16_t length = net_pkt_get_len(pkt);
 80126a8:	b2ad      	uxth	r5, r5
	src_lladdr.len = 0;
 80126aa:	f88d 3010 	strb.w	r3, [sp, #16]
	ns_hdr = (struct net_icmpv6_ns_hdr *)net_pkt_get_data(pkt, &ns_access);
 80126ae:	a90a      	add	r1, sp, #40	; 0x28
 80126b0:	4620      	mov	r0, r4
 80126b2:	f7fd fa8b 	bl	800fbcc <net_pkt_get_data>
	if (!ns_hdr) {
 80126b6:	4681      	mov	r9, r0
 80126b8:	b318      	cbz	r0, 8012702 <handle_ns_input+0x82>
	return pkt->iface;
 80126ba:	69a2      	ldr	r2, [r4, #24]
	UPDATE_STAT(iface, stats.ipv6_nd.recv++);
 80126bc:	49be      	ldr	r1, [pc, #760]	; (80129b8 <handle_ns_input+0x338>)
 80126be:	f8d1 30a4 	ldr.w	r3, [r1, #164]	; 0xa4
 80126c2:	3301      	adds	r3, #1
 80126c4:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
 80126c8:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 80126cc:	3301      	adds	r3, #1
 80126ce:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	if (((length < (sizeof(struct net_ipv6_hdr) +
 80126d2:	2d3f      	cmp	r5, #63	; 0x3f
 80126d4:	d902      	bls.n	80126dc <handle_ns_input+0x5c>
	    (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT)) &&
 80126d6:	79f3      	ldrb	r3, [r6, #7]
			  sizeof(struct net_icmpv6_ns_hdr))) ||
 80126d8:	2bff      	cmp	r3, #255	; 0xff
 80126da:	d003      	beq.n	80126e4 <handle_ns_input+0x64>
	return addr->s6_addr[0] == 0xFF;
 80126dc:	f899 3004 	ldrb.w	r3, [r9, #4]
	    (ip_hdr->hop_limit != NET_IPV6_ND_HOP_LIMIT)) &&
 80126e0:	2bff      	cmp	r3, #255	; 0xff
 80126e2:	d032      	beq.n	801274a <handle_ns_input+0xca>
	return net_pkt_skip(pkt, access->size);
 80126e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80126e6:	4620      	mov	r0, r4
 80126e8:	f007 ff2d 	bl	801a546 <net_pkt_skip>
	pkt->ipv6_ext_opt_len = len;
 80126ec:	2314      	movs	r3, #20
 80126ee:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
	length -= (sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr));
 80126f2:	3d2c      	subs	r5, #44	; 0x2c
 80126f4:	b2ad      	uxth	r5, r5
				net_pkt_get_data(pkt, &nd_access);
 80126f6:	a907      	add	r1, sp, #28
 80126f8:	4620      	mov	r0, r4
 80126fa:	f7fd fa67 	bl	800fbcc <net_pkt_get_data>
 80126fe:	4607      	mov	r7, r0
	while (nd_opt_hdr && nd_opt_hdr->len > 0 &&
 8012700:	e04a      	b.n	8012798 <handle_ns_input+0x118>
		NET_ERR("DROP: NULL NS header");
 8012702:	4bae      	ldr	r3, [pc, #696]	; (80129bc <handle_ns_input+0x33c>)
 8012704:	9320      	str	r3, [sp, #128]	; 0x80
 8012706:	2300      	movs	r3, #0
 8012708:	f8ad 3009 	strh.w	r3, [sp, #9]
 801270c:	f88d 300b 	strb.w	r3, [sp, #11]
 8012710:	2202      	movs	r2, #2
 8012712:	f88d 2008 	strb.w	r2, [sp, #8]
 8012716:	f88d 300a 	strb.w	r3, [sp, #10]
 801271a:	9a02      	ldr	r2, [sp, #8]
 801271c:	921f      	str	r2, [sp, #124]	; 0x7c
 801271e:	461a      	mov	r2, r3
 8012720:	f363 0200 	bfi	r2, r3, #0, #1
 8012724:	f363 0241 	bfi	r2, r3, #1, #1
 8012728:	f363 0282 	bfi	r2, r3, #2, #1
 801272c:	f363 02c5 	bfi	r2, r3, #3, #3
 8012730:	2101      	movs	r1, #1
 8012732:	f361 1288 	bfi	r2, r1, #6, #3
 8012736:	2108      	movs	r1, #8
 8012738:	f361 2252 	bfi	r2, r1, #9, #10
 801273c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8012740:	499f      	ldr	r1, [pc, #636]	; (80129c0 <handle_ns_input+0x340>)
 8012742:	a81c      	add	r0, sp, #112	; 0x70
 8012744:	f005 fb05 	bl	8017d52 <z_log_msg2_finalize>
		goto drop;
 8012748:	e08e      	b.n	8012868 <handle_ns_input+0x1e8>
	     icmp_hdr->code != 0U)) {
 801274a:	f898 3001 	ldrb.w	r3, [r8, #1]
	    (net_ipv6_is_addr_mcast((struct in6_addr *)ns_hdr->tgt) &&
 801274e:	2b00      	cmp	r3, #0
 8012750:	d0c8      	beq.n	80126e4 <handle_ns_input+0x64>
 8012752:	e089      	b.n	8012868 <handle_ns_input+0x1e8>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8012754:	2300      	movs	r3, #0
			if (net_ipv6_is_addr_unspecified(
 8012756:	2b00      	cmp	r3, #0
 8012758:	f040 8086 	bne.w	8012868 <handle_ns_input+0x1e8>
			if (!read_llao(pkt, nd_opt_hdr->len, &src_lladdr_s)) {
 801275c:	aa05      	add	r2, sp, #20
 801275e:	7879      	ldrb	r1, [r7, #1]
 8012760:	4620      	mov	r0, r4
 8012762:	f008 fda3 	bl	801b2ac <read_llao>
 8012766:	2800      	cmp	r0, #0
 8012768:	d037      	beq.n	80127da <handle_ns_input+0x15a>
			src_lladdr.len = src_lladdr_s.len;
 801276a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 801276e:	f88d 3010 	strb.w	r3, [sp, #16]
			src_lladdr.addr = src_lladdr_s.addr;
 8012772:	f10d 0316 	add.w	r3, sp, #22
 8012776:	9303      	str	r3, [sp, #12]
	return pkt->ipv6_ext_opt_len;
 8012778:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
					     (nd_opt_hdr->len << 3));
 801277c:	787b      	ldrb	r3, [r7, #1]
 801277e:	00db      	lsls	r3, r3, #3
 8012780:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
 8012782:	4413      	add	r3, r2
 8012784:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
 8012786:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
 801278a:	4293      	cmp	r3, r2
 801278c:	d949      	bls.n	8012822 <handle_ns_input+0x1a2>
					net_pkt_get_data(pkt, &nd_access);
 801278e:	a907      	add	r1, sp, #28
 8012790:	4620      	mov	r0, r4
 8012792:	f7fd fa1b 	bl	800fbcc <net_pkt_get_data>
 8012796:	4607      	mov	r7, r0
	while (nd_opt_hdr && nd_opt_hdr->len > 0 &&
 8012798:	2f00      	cmp	r7, #0
 801279a:	d075      	beq.n	8012888 <handle_ns_input+0x208>
 801279c:	787b      	ldrb	r3, [r7, #1]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d072      	beq.n	8012888 <handle_ns_input+0x208>
	       net_pkt_ipv6_ext_opt_len(pkt) < length) {
 80127a2:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
	while (nd_opt_hdr && nd_opt_hdr->len > 0 &&
 80127a6:	42ab      	cmp	r3, r5
 80127a8:	d26e      	bcs.n	8012888 <handle_ns_input+0x208>
	return net_pkt_skip(pkt, access->size);
 80127aa:	9908      	ldr	r1, [sp, #32]
 80127ac:	4620      	mov	r0, r4
 80127ae:	f007 feca 	bl	801a546 <net_pkt_skip>
		switch (nd_opt_hdr->type) {
 80127b2:	783b      	ldrb	r3, [r7, #0]
 80127b4:	2b01      	cmp	r3, #1
 80127b6:	d1df      	bne.n	8012778 <handle_ns_input+0xf8>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 80127b8:	68b3      	ldr	r3, [r6, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d1ca      	bne.n	8012754 <handle_ns_input+0xd4>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 80127be:	68f3      	ldr	r3, [r6, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 80127c0:	b92b      	cbnz	r3, 80127ce <handle_ns_input+0x14e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 80127c2:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 80127c4:	b92b      	cbnz	r3, 80127d2 <handle_ns_input+0x152>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
 80127c6:	6973      	ldr	r3, [r6, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 80127c8:	b12b      	cbz	r3, 80127d6 <handle_ns_input+0x156>
 80127ca:	2300      	movs	r3, #0
 80127cc:	e7c3      	b.n	8012756 <handle_ns_input+0xd6>
 80127ce:	2300      	movs	r3, #0
 80127d0:	e7c1      	b.n	8012756 <handle_ns_input+0xd6>
 80127d2:	2300      	movs	r3, #0
 80127d4:	e7bf      	b.n	8012756 <handle_ns_input+0xd6>
 80127d6:	2301      	movs	r3, #1
 80127d8:	e7bd      	b.n	8012756 <handle_ns_input+0xd6>
				NET_ERR("DROP: failed to read LLAO");
 80127da:	4b7a      	ldr	r3, [pc, #488]	; (80129c4 <handle_ns_input+0x344>)
 80127dc:	9314      	str	r3, [sp, #80]	; 0x50
 80127de:	2300      	movs	r3, #0
 80127e0:	f8ad 3009 	strh.w	r3, [sp, #9]
 80127e4:	f88d 300b 	strb.w	r3, [sp, #11]
 80127e8:	2202      	movs	r2, #2
 80127ea:	f88d 2008 	strb.w	r2, [sp, #8]
 80127ee:	f88d 300a 	strb.w	r3, [sp, #10]
 80127f2:	9a02      	ldr	r2, [sp, #8]
 80127f4:	9213      	str	r2, [sp, #76]	; 0x4c
 80127f6:	461a      	mov	r2, r3
 80127f8:	f363 0200 	bfi	r2, r3, #0, #1
 80127fc:	f363 0241 	bfi	r2, r3, #1, #1
 8012800:	f363 0282 	bfi	r2, r3, #2, #1
 8012804:	f363 02c5 	bfi	r2, r3, #3, #3
 8012808:	2101      	movs	r1, #1
 801280a:	f361 1288 	bfi	r2, r1, #6, #3
 801280e:	2108      	movs	r1, #8
 8012810:	f361 2252 	bfi	r2, r1, #9, #10
 8012814:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8012818:	4969      	ldr	r1, [pc, #420]	; (80129c0 <handle_ns_input+0x340>)
 801281a:	a810      	add	r0, sp, #64	; 0x40
 801281c:	f005 fa99 	bl	8017d52 <z_log_msg2_finalize>
				goto drop;
 8012820:	e022      	b.n	8012868 <handle_ns_input+0x1e8>
			NET_ERR("DROP: Corrupted NS message");
 8012822:	4b69      	ldr	r3, [pc, #420]	; (80129c8 <handle_ns_input+0x348>)
 8012824:	931a      	str	r3, [sp, #104]	; 0x68
 8012826:	2300      	movs	r3, #0
 8012828:	f8ad 3009 	strh.w	r3, [sp, #9]
 801282c:	f88d 300b 	strb.w	r3, [sp, #11]
 8012830:	2202      	movs	r2, #2
 8012832:	f88d 2008 	strb.w	r2, [sp, #8]
 8012836:	f88d 300a 	strb.w	r3, [sp, #10]
 801283a:	9a02      	ldr	r2, [sp, #8]
 801283c:	9219      	str	r2, [sp, #100]	; 0x64
 801283e:	461a      	mov	r2, r3
 8012840:	f363 0200 	bfi	r2, r3, #0, #1
 8012844:	f363 0241 	bfi	r2, r3, #1, #1
 8012848:	f363 0282 	bfi	r2, r3, #2, #1
 801284c:	f363 02c5 	bfi	r2, r3, #3, #3
 8012850:	2101      	movs	r1, #1
 8012852:	f361 1288 	bfi	r2, r1, #6, #3
 8012856:	2108      	movs	r1, #8
 8012858:	f361 2252 	bfi	r2, r1, #9, #10
 801285c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8012860:	4957      	ldr	r1, [pc, #348]	; (80129c0 <handle_ns_input+0x340>)
 8012862:	a816      	add	r0, sp, #88	; 0x58
 8012864:	f005 fa75 	bl	8017d52 <z_log_msg2_finalize>
	return pkt->iface;
 8012868:	69a2      	ldr	r2, [r4, #24]
	UPDATE_STAT(iface, stats.ipv6_nd.drop++);
 801286a:	4953      	ldr	r1, [pc, #332]	; (80129b8 <handle_ns_input+0x338>)
 801286c:	f8d1 30a0 	ldr.w	r3, [r1, #160]	; 0xa0
 8012870:	3301      	adds	r3, #1
 8012872:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
 8012876:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 801287a:	3301      	adds	r3, #1
 801287c:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	return NET_DROP;
 8012880:	2002      	movs	r0, #2
}
 8012882:	b029      	add	sp, #164	; 0xa4
 8012884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			    net_pkt_iface(pkt), (struct in6_addr *)ns_hdr->tgt);
 8012888:	f109 0704 	add.w	r7, r9, #4
		ifaddr = net_if_ipv6_addr_lookup_by_iface(
 801288c:	4639      	mov	r1, r7
 801288e:	69a0      	ldr	r0, [r4, #24]
 8012890:	f7fb f854 	bl	800d93c <net_if_ipv6_addr_lookup_by_iface>
	if (!ifaddr) {
 8012894:	4603      	mov	r3, r0
 8012896:	2800      	cmp	r0, #0
 8012898:	d0e6      	beq.n	8012868 <handle_ns_input+0x1e8>
		tgt = &ifaddr->address.in6_addr;
 801289a:	f100 0904 	add.w	r9, r0, #4
		na_src = (struct in6_addr *)ip_hdr->dst;
 801289e:	f106 0818 	add.w	r8, r6, #24
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 80128a2:	68b2      	ldr	r2, [r6, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 80128a4:	b952      	cbnz	r2, 80128bc <handle_ns_input+0x23c>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 80128a6:	68f2      	ldr	r2, [r6, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 80128a8:	2a00      	cmp	r2, #0
 80128aa:	d161      	bne.n	8012970 <handle_ns_input+0x2f0>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 80128ac:	6932      	ldr	r2, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 80128ae:	2a00      	cmp	r2, #0
 80128b0:	d160      	bne.n	8012974 <handle_ns_input+0x2f4>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
 80128b2:	6972      	ldr	r2, [r6, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 80128b4:	2a00      	cmp	r2, #0
 80128b6:	d05f      	beq.n	8012978 <handle_ns_input+0x2f8>
 80128b8:	2200      	movs	r2, #0
 80128ba:	e000      	b.n	80128be <handle_ns_input+0x23e>
 80128bc:	2200      	movs	r2, #0
	if (net_ipv6_is_addr_unspecified((struct in6_addr *)ip_hdr->src)) {
 80128be:	2a00      	cmp	r2, #0
 80128c0:	f000 80a8 	beq.w	8012a14 <handle_ns_input+0x394>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
 80128c4:	69b1      	ldr	r1, [r6, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 80128c6:	f240 22ff 	movw	r2, #767	; 0x2ff
 80128ca:	4291      	cmp	r1, r2
 80128cc:	d056      	beq.n	801297c <handle_ns_input+0x2fc>
 80128ce:	2200      	movs	r2, #0
		if (!net_ipv6_is_addr_solicited_node((struct in6_addr *)ip_hdr->dst)) {
 80128d0:	2a00      	cmp	r2, #0
 80128d2:	d0c9      	beq.n	8012868 <handle_ns_input+0x1e8>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
 80128d4:	f993 302d 	ldrsb.w	r3, [r3, #45]	; 0x2d
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d061      	beq.n	80129a0 <handle_ns_input+0x320>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
 80128dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80128e0:	7633      	strb	r3, [r6, #24]
 80128e2:	2300      	movs	r3, #0
 80128e4:	2202      	movs	r2, #2
 80128e6:	7672      	strb	r2, [r6, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
 80128e8:	76b3      	strb	r3, [r6, #26]
 80128ea:	76f3      	strb	r3, [r6, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
 80128ec:	7733      	strb	r3, [r6, #28]
 80128ee:	7773      	strb	r3, [r6, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
 80128f0:	77b3      	strb	r3, [r6, #30]
 80128f2:	77f3      	strb	r3, [r6, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
 80128f4:	f886 3020 	strb.w	r3, [r6, #32]
 80128f8:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
 80128fc:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
 8012900:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
 8012904:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
 8012908:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
 801290c:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26
 8012910:	2301      	movs	r3, #1
 8012912:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
		net_ipaddr_copy((struct in6_addr *)ip_hdr->src,
 8012916:	4641      	mov	r1, r8
 8012918:	69a0      	ldr	r0, [r4, #24]
 801291a:	f7fb fecb 	bl	800e6b4 <net_if_ipv6_select_src_addr>
 801291e:	4603      	mov	r3, r0
 8012920:	ad0c      	add	r5, sp, #48	; 0x30
 8012922:	6800      	ldr	r0, [r0, #0]
 8012924:	6859      	ldr	r1, [r3, #4]
 8012926:	689a      	ldr	r2, [r3, #8]
 8012928:	68db      	ldr	r3, [r3, #12]
 801292a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801292c:	f106 0708 	add.w	r7, r6, #8
 8012930:	ad0c      	add	r5, sp, #48	; 0x30
 8012932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012934:	60b0      	str	r0, [r6, #8]
 8012936:	60f1      	str	r1, [r6, #12]
 8012938:	6132      	str	r2, [r6, #16]
 801293a:	6173      	str	r3, [r6, #20]
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
 801293c:	2520      	movs	r5, #32
	if (src_lladdr.len) {
 801293e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8012942:	b14b      	cbz	r3, 8012958 <handle_ns_input+0x2d8>
		if (!net_ipv6_nbr_add(net_pkt_iface(pkt),
 8012944:	2300      	movs	r3, #0
 8012946:	9300      	str	r3, [sp, #0]
 8012948:	aa03      	add	r2, sp, #12
 801294a:	f106 0108 	add.w	r1, r6, #8
 801294e:	69a0      	ldr	r0, [r4, #24]
 8012950:	f7ff fa20 	bl	8011d94 <net_ipv6_nbr_add>
 8012954:	2800      	cmp	r0, #0
 8012956:	d087      	beq.n	8012868 <handle_ns_input+0x1e8>
	if (!net_ipv6_send_na(net_pkt_iface(pkt), na_src,
 8012958:	9500      	str	r5, [sp, #0]
 801295a:	464b      	mov	r3, r9
 801295c:	4642      	mov	r2, r8
 801295e:	4639      	mov	r1, r7
 8012960:	69a0      	ldr	r0, [r4, #24]
 8012962:	f7fe fdd1 	bl	8011508 <net_ipv6_send_na>
 8012966:	2800      	cmp	r0, #0
 8012968:	f000 8085 	beq.w	8012a76 <handle_ns_input+0x3f6>
	return NET_DROP;
 801296c:	2002      	movs	r0, #2
 801296e:	e788      	b.n	8012882 <handle_ns_input+0x202>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8012970:	2200      	movs	r2, #0
 8012972:	e7a4      	b.n	80128be <handle_ns_input+0x23e>
 8012974:	2200      	movs	r2, #0
 8012976:	e7a2      	b.n	80128be <handle_ns_input+0x23e>
 8012978:	2201      	movs	r2, #1
 801297a:	e7a0      	b.n	80128be <handle_ns_input+0x23e>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
 801297c:	69f2      	ldr	r2, [r6, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
 801297e:	b95a      	cbnz	r2, 8012998 <handle_ns_input+0x318>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 8012980:	6a32      	ldr	r2, [r6, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
 8012982:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8012986:	d001      	beq.n	801298c <handle_ns_input+0x30c>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 8012988:	2200      	movs	r2, #0
 801298a:	e7a1      	b.n	80128d0 <handle_ns_input+0x250>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
 801298c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801298e:	b2d2      	uxtb	r2, r2
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 8012990:	2aff      	cmp	r2, #255	; 0xff
 8012992:	d003      	beq.n	801299c <handle_ns_input+0x31c>
 8012994:	2200      	movs	r2, #0
 8012996:	e79b      	b.n	80128d0 <handle_ns_input+0x250>
 8012998:	2200      	movs	r2, #0
 801299a:	e799      	b.n	80128d0 <handle_ns_input+0x250>
 801299c:	2201      	movs	r2, #1
 801299e:	e797      	b.n	80128d0 <handle_ns_input+0x250>
 80129a0:	69a0      	ldr	r0, [r4, #24]
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
 80129a2:	f8b9 2000 	ldrh.w	r2, [r9]
	if (net_ipv6_is_ll_addr(addr)) {
 80129a6:	f248 03fe 	movw	r3, #33022	; 0x80fe
 80129aa:	429a      	cmp	r2, r3
 80129ac:	d00e      	beq.n	80129cc <handle_ns_input+0x34c>
	net_if_ipv6_dad_failed(iface, addr);
 80129ae:	4649      	mov	r1, r9
 80129b0:	f7fb fac8 	bl	800df44 <net_if_ipv6_dad_failed>
			goto drop;
 80129b4:	e758      	b.n	8012868 <handle_ns_input+0x1e8>
 80129b6:	bf00      	nop
 80129b8:	20002a58 	.word	0x20002a58
 80129bc:	0801e5f0 	.word	0x0801e5f0
 80129c0:	0801d788 	.word	0x0801d788
 80129c4:	0801e608 	.word	0x0801e608
 80129c8:	0801e624 	.word	0x0801e624
		NET_ERR("DAD failed, no ll IPv6 address!");
 80129cc:	4b2c      	ldr	r3, [pc, #176]	; (8012a80 <handle_ns_input+0x400>)
 80129ce:	9326      	str	r3, [sp, #152]	; 0x98
 80129d0:	2300      	movs	r3, #0
 80129d2:	f8ad 3009 	strh.w	r3, [sp, #9]
 80129d6:	f88d 300b 	strb.w	r3, [sp, #11]
 80129da:	2202      	movs	r2, #2
 80129dc:	f88d 2008 	strb.w	r2, [sp, #8]
 80129e0:	f88d 300a 	strb.w	r3, [sp, #10]
 80129e4:	9a02      	ldr	r2, [sp, #8]
 80129e6:	9225      	str	r2, [sp, #148]	; 0x94
 80129e8:	461a      	mov	r2, r3
 80129ea:	f363 0200 	bfi	r2, r3, #0, #1
 80129ee:	f363 0241 	bfi	r2, r3, #1, #1
 80129f2:	f363 0282 	bfi	r2, r3, #2, #1
 80129f6:	f363 02c5 	bfi	r2, r3, #3, #3
 80129fa:	2101      	movs	r1, #1
 80129fc:	f361 1288 	bfi	r2, r1, #6, #3
 8012a00:	2108      	movs	r1, #8
 8012a02:	f361 2252 	bfi	r2, r1, #9, #10
 8012a06:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8012a0a:	491e      	ldr	r1, [pc, #120]	; (8012a84 <handle_ns_input+0x404>)
 8012a0c:	a822      	add	r0, sp, #136	; 0x88
 8012a0e:	f005 f9a0 	bl	8017d52 <z_log_msg2_finalize>
		return false;
 8012a12:	e729      	b.n	8012868 <handle_ns_input+0x1e8>
	if (net_ipv6_is_my_addr((struct in6_addr *)ip_hdr->src)) {
 8012a14:	f106 0508 	add.w	r5, r6, #8
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
 8012a18:	2100      	movs	r1, #0
 8012a1a:	4628      	mov	r0, r5
 8012a1c:	f7fa fec0 	bl	800d7a0 <net_if_ipv6_addr_lookup>
 8012a20:	2800      	cmp	r0, #0
 8012a22:	f47f af21 	bne.w	8012868 <handle_ns_input+0x1e8>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
 8012a26:	69b2      	ldr	r2, [r6, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 8012a28:	f240 23ff 	movw	r3, #767	; 0x2ff
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	d004      	beq.n	8012a3a <handle_ns_input+0x3ba>
 8012a30:	2300      	movs	r3, #0
	if (net_ipv6_is_addr_solicited_node((struct in6_addr *)ip_hdr->dst)) {
 8012a32:	b1a3      	cbz	r3, 8012a5e <handle_ns_input+0x3de>
		na_dst = (struct in6_addr *)ip_hdr->src;
 8012a34:	46a8      	mov	r8, r5
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
 8012a36:	2560      	movs	r5, #96	; 0x60
 8012a38:	e781      	b.n	801293e <handle_ns_input+0x2be>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
 8012a3a:	69f3      	ldr	r3, [r6, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
 8012a3c:	b95b      	cbnz	r3, 8012a56 <handle_ns_input+0x3d6>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 8012a3e:	6a33      	ldr	r3, [r6, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
 8012a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012a44:	d001      	beq.n	8012a4a <handle_ns_input+0x3ca>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 8012a46:	2300      	movs	r3, #0
 8012a48:	e7f3      	b.n	8012a32 <handle_ns_input+0x3b2>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
 8012a4a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012a4c:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
 8012a4e:	2bff      	cmp	r3, #255	; 0xff
 8012a50:	d003      	beq.n	8012a5a <handle_ns_input+0x3da>
 8012a52:	2300      	movs	r3, #0
 8012a54:	e7ed      	b.n	8012a32 <handle_ns_input+0x3b2>
 8012a56:	2300      	movs	r3, #0
 8012a58:	e7eb      	b.n	8012a32 <handle_ns_input+0x3b2>
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	e7e9      	b.n	8012a32 <handle_ns_input+0x3b2>
		ifaddr = net_if_ipv6_addr_lookup_by_iface(
 8012a5e:	4641      	mov	r1, r8
 8012a60:	69a0      	ldr	r0, [r4, #24]
 8012a62:	f7fa ff6b 	bl	800d93c <net_if_ipv6_addr_lookup_by_iface>
	if (ifaddr) {
 8012a66:	2800      	cmp	r0, #0
 8012a68:	f43f aefe 	beq.w	8012868 <handle_ns_input+0x1e8>
		tgt = &ifaddr->address.in6_addr;
 8012a6c:	f100 0904 	add.w	r9, r0, #4
		na_dst = (struct in6_addr *)ip_hdr->src;
 8012a70:	46a8      	mov	r8, r5
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
 8012a72:	2560      	movs	r5, #96	; 0x60
		goto send_na;
 8012a74:	e763      	b.n	801293e <handle_ns_input+0x2be>
		net_pkt_unref(pkt);
 8012a76:	4620      	mov	r0, r4
 8012a78:	f007 fc8e 	bl	801a398 <net_pkt_unref>
		return NET_OK;
 8012a7c:	2000      	movs	r0, #0
 8012a7e:	e700      	b.n	8012882 <handle_ns_input+0x202>
 8012a80:	0801e4d8 	.word	0x0801e4d8
 8012a84:	0801d788 	.word	0x0801d788

08012a88 <net_ipv6_prepare_for_send>:
{
 8012a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a8a:	b087      	sub	sp, #28
 8012a8c:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 8012a8e:	2300      	movs	r3, #0
 8012a90:	9304      	str	r3, [sp, #16]
 8012a92:	2228      	movs	r2, #40	; 0x28
 8012a94:	9205      	str	r2, [sp, #20]
	struct net_if *iface = NULL;
 8012a96:	9303      	str	r3, [sp, #12]
	ip_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
 8012a98:	a904      	add	r1, sp, #16
 8012a9a:	f7fd f897 	bl	800fbcc <net_pkt_get_data>
	if (!ip_hdr) {
 8012a9e:	2800      	cmp	r0, #0
 8012aa0:	f000 808f 	beq.w	8012bc2 <net_ipv6_prepare_for_send+0x13a>
 8012aa4:	4605      	mov	r5, r0
	if ((net_pkt_lladdr_dst(pkt)->addr &&
 8012aa6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012aa8:	b113      	cbz	r3, 8012ab0 <net_ipv6_prepare_for_send+0x28>
		return NET_OK;
 8012aaa:	2000      	movs	r0, #0
}
 8012aac:	b007      	add	sp, #28
 8012aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return addr->s6_addr[0] == 0xFF;
 8012ab0:	7e03      	ldrb	r3, [r0, #24]
	      !IS_ENABLED(CONFIG_NET_ROUTING))) ||
 8012ab2:	2bff      	cmp	r3, #255	; 0xff
 8012ab4:	d0f9      	beq.n	8012aaa <net_ipv6_prepare_for_send+0x22>
 8012ab6:	69a3      	ldr	r3, [r4, #24]
	if (iface == NULL) {
 8012ab8:	b143      	cbz	r3, 8012acc <net_ipv6_prepare_for_send+0x44>
	return atomic_test_bit(iface->if_dev->flags, value);
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	f3bf 8f5b 	dmb	ish
 8012ac0:	68db      	ldr	r3, [r3, #12]
 8012ac2:	f3bf 8f5b 	dmb	ish
	    net_ipv6_is_addr_mcast((struct in6_addr *)ip_hdr->dst) ||
 8012ac6:	f013 0f02 	tst.w	r3, #2
 8012aca:	d1ee      	bne.n	8012aaa <net_ipv6_prepare_for_send+0x22>
	if (net_if_ipv6_addr_onlink(&iface, (struct in6_addr *)ip_hdr->dst)) {
 8012acc:	f105 0618 	add.w	r6, r5, #24
 8012ad0:	4631      	mov	r1, r6
 8012ad2:	a803      	add	r0, sp, #12
 8012ad4:	f7fb fc9e 	bl	800e414 <net_if_ipv6_addr_onlink>
 8012ad8:	b308      	cbz	r0, 8012b1e <net_ipv6_prepare_for_send+0x96>
		net_pkt_set_iface(pkt, iface);
 8012ada:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
 8012adc:	61a3      	str	r3, [r4, #24]
	if (iface) {
 8012ade:	b13b      	cbz	r3, 8012af0 <net_ipv6_prepare_for_send+0x68>
	return &iface->if_dev->link_addr;
 8012ae0:	681a      	ldr	r2, [r3, #0]
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
 8012ae2:	7d52      	ldrb	r2, [r2, #21]
 8012ae4:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8012ae8:	681b      	ldr	r3, [r3, #0]
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
 8012aea:	7d5b      	ldrb	r3, [r3, #21]
 8012aec:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	if (!iface) {
 8012af0:	9b03      	ldr	r3, [sp, #12]
 8012af2:	b32b      	cbz	r3, 8012b40 <net_ipv6_prepare_for_send+0xb8>
	nbr = nbr_lookup(&net_neighbor.table, iface, nexthop);
 8012af4:	4632      	mov	r2, r6
 8012af6:	9903      	ldr	r1, [sp, #12]
 8012af8:	4833      	ldr	r0, [pc, #204]	; (8012bc8 <net_ipv6_prepare_for_send+0x140>)
 8012afa:	f7fe fb0b 	bl	8011114 <nbr_lookup>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
 8012afe:	4607      	mov	r7, r0
 8012b00:	b110      	cbz	r0, 8012b08 <net_ipv6_prepare_for_send+0x80>
 8012b02:	7840      	ldrb	r0, [r0, #1]
 8012b04:	28ff      	cmp	r0, #255	; 0xff
 8012b06:	d143      	bne.n	8012b90 <net_ipv6_prepare_for_send+0x108>
	ret = net_ipv6_send_ns(net_pkt_iface(pkt), pkt,
 8012b08:	2300      	movs	r3, #0
 8012b0a:	9301      	str	r3, [sp, #4]
 8012b0c:	9600      	str	r6, [sp, #0]
 8012b0e:	f105 0208 	add.w	r2, r5, #8
 8012b12:	4621      	mov	r1, r4
 8012b14:	69a0      	ldr	r0, [r4, #24]
 8012b16:	f7fe fff1 	bl	8011afc <net_ipv6_send_ns>
	return NET_CONTINUE;
 8012b1a:	2001      	movs	r0, #1
 8012b1c:	e7c6      	b.n	8012aac <net_ipv6_prepare_for_send+0x24>
		bool try_route = false;
 8012b1e:	2000      	movs	r0, #0
 8012b20:	f88d 000b 	strb.w	r0, [sp, #11]
		nexthop = check_route(NULL, (struct in6_addr *)ip_hdr->dst,
 8012b24:	f10d 020b 	add.w	r2, sp, #11
 8012b28:	4631      	mov	r1, r6
 8012b2a:	f008 fba1 	bl	801b270 <check_route>
		if (!nexthop) {
 8012b2e:	4606      	mov	r6, r0
 8012b30:	b120      	cbz	r0, 8012b3c <net_ipv6_prepare_for_send+0xb4>
		if (try_route) {
 8012b32:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d0da      	beq.n	8012af0 <net_ipv6_prepare_for_send+0x68>
 8012b3a:	e7db      	b.n	8012af4 <net_ipv6_prepare_for_send+0x6c>
			return NET_DROP;
 8012b3c:	2002      	movs	r0, #2
 8012b3e:	e7b5      	b.n	8012aac <net_ipv6_prepare_for_send+0x24>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
 8012b40:	4631      	mov	r1, r6
 8012b42:	a803      	add	r0, sp, #12
 8012b44:	f7fb fc66 	bl	800e414 <net_if_ipv6_addr_onlink>
 8012b48:	b160      	cbz	r0, 8012b64 <net_ipv6_prepare_for_send+0xdc>
			net_pkt_set_iface(pkt, iface);
 8012b4a:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
 8012b4c:	61a3      	str	r3, [r4, #24]
	if (iface) {
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d0d0      	beq.n	8012af4 <net_ipv6_prepare_for_send+0x6c>
 8012b52:	681a      	ldr	r2, [r3, #0]
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
 8012b54:	7d52      	ldrb	r2, [r2, #21]
 8012b56:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8012b5a:	681b      	ldr	r3, [r3, #0]
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
 8012b5c:	7d5b      	ldrb	r3, [r3, #21]
 8012b5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8012b62:	e7c7      	b.n	8012af4 <net_ipv6_prepare_for_send+0x6c>
			nbr = net_ipv6_nbr_lookup(NULL, nexthop);
 8012b64:	4631      	mov	r1, r6
 8012b66:	2000      	movs	r0, #0
 8012b68:	f7fe fcc4 	bl	80114f4 <net_ipv6_nbr_lookup>
			if (nbr) {
 8012b6c:	b168      	cbz	r0, 8012b8a <net_ipv6_prepare_for_send+0x102>
				iface = nbr->iface;
 8012b6e:	6883      	ldr	r3, [r0, #8]
 8012b70:	9303      	str	r3, [sp, #12]
	pkt->iface = iface;
 8012b72:	61a3      	str	r3, [r4, #24]
	if (iface) {
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d0bd      	beq.n	8012af4 <net_ipv6_prepare_for_send+0x6c>
 8012b78:	681a      	ldr	r2, [r3, #0]
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
 8012b7a:	7d52      	ldrb	r2, [r2, #21]
 8012b7c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8012b80:	681b      	ldr	r3, [r3, #0]
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
 8012b82:	7d5b      	ldrb	r3, [r3, #21]
 8012b84:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8012b88:	e7b4      	b.n	8012af4 <net_ipv6_prepare_for_send+0x6c>
	return pkt->iface;
 8012b8a:	69a3      	ldr	r3, [r4, #24]
				iface = net_pkt_iface(pkt);
 8012b8c:	9303      	str	r3, [sp, #12]
 8012b8e:	e7b1      	b.n	8012af4 <net_ipv6_prepare_for_send+0x6c>
		lladdr = net_nbr_get_lladdr(nbr->idx);
 8012b90:	f7fd fff4 	bl	8010b7c <net_nbr_get_lladdr>
		net_pkt_lladdr_dst(pkt)->addr = lladdr->addr;
 8012b94:	1c83      	adds	r3, r0, #2
 8012b96:	63e3      	str	r3, [r4, #60]	; 0x3c
		net_pkt_lladdr_dst(pkt)->len = lladdr->len;
 8012b98:	7843      	ldrb	r3, [r0, #1]
 8012b9a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8012b9e:	68fb      	ldr	r3, [r7, #12]
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
 8012ba0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012ba4:	2b02      	cmp	r3, #2
 8012ba6:	d001      	beq.n	8012bac <net_ipv6_prepare_for_send+0x124>
		return NET_OK;
 8012ba8:	2000      	movs	r0, #0
 8012baa:	e77f      	b.n	8012aac <net_ipv6_prepare_for_send+0x24>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
 8012bac:	2103      	movs	r1, #3
 8012bae:	4638      	mov	r0, r7
 8012bb0:	f7fe fad6 	bl	8011160 <ipv6_nbr_set_state>
			ipv6_nd_restart_reachable_timer(nbr,
 8012bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8012bb8:	2300      	movs	r3, #0
 8012bba:	4638      	mov	r0, r7
 8012bbc:	f7fe fb46 	bl	801124c <ipv6_nd_restart_reachable_timer>
 8012bc0:	e7f2      	b.n	8012ba8 <net_ipv6_prepare_for_send+0x120>
		return NET_DROP;
 8012bc2:	2002      	movs	r0, #2
 8012bc4:	e772      	b.n	8012aac <net_ipv6_prepare_for_send+0x24>
 8012bc6:	bf00      	nop
 8012bc8:	20000830 	.word	0x20000830

08012bcc <ipv6_nd_reachable_timeout>:
{
 8012bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bd0:	b083      	sub	sp, #12
 8012bd2:	f009 fd19 	bl	801c608 <z_impl_k_uptime_ticks>
 8012bd6:	220a      	movs	r2, #10
 8012bd8:	2300      	movs	r3, #0
 8012bda:	f7ed ffaf 	bl	8000b3c <__aeabi_uldivmod>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
 8012bde:	4605      	mov	r5, r0
 8012be0:	4689      	mov	r9, r1
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 8012be2:	2400      	movs	r4, #0
 8012be4:	e005      	b.n	8012bf2 <ipv6_nd_reachable_timeout+0x26>
			ipv6_nd_restart_reachable_timer(NULL, remaining);
 8012be6:	4632      	mov	r2, r6
 8012be8:	463b      	mov	r3, r7
 8012bea:	2000      	movs	r0, #0
 8012bec:	f7fe fb2e 	bl	801124c <ipv6_nd_restart_reachable_timer>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
 8012bf0:	3401      	adds	r4, #1
 8012bf2:	2c07      	cmp	r4, #7
 8012bf4:	f300 8081 	bgt.w	8012cfa <ipv6_nd_reachable_timeout+0x12e>
	return &net_neighbor_pool[idx].nbr;
 8012bf8:	4a41      	ldr	r2, [pc, #260]	; (8012d00 <ipv6_nd_reachable_timeout+0x134>)
 8012bfa:	2354      	movs	r3, #84	; 0x54
 8012bfc:	fb03 f304 	mul.w	r3, r3, r4
 8012c00:	eb02 0803 	add.w	r8, r2, r3
		if (!nbr || !nbr->ref) {
 8012c04:	5cd3      	ldrb	r3, [r2, r3]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d0f2      	beq.n	8012bf0 <ipv6_nd_reachable_timeout+0x24>
 8012c0a:	f8d8 100c 	ldr.w	r1, [r8, #12]
		if (!data) {
 8012c0e:	2900      	cmp	r1, #0
 8012c10:	d0ee      	beq.n	8012bf0 <ipv6_nd_reachable_timeout+0x24>
		if (!data->reachable) {
 8012c12:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8012c16:	ea52 0003 	orrs.w	r0, r2, r3
 8012c1a:	d0e9      	beq.n	8012bf0 <ipv6_nd_reachable_timeout+0x24>
		remaining = data->reachable + data->reachable_timeout - current;
 8012c1c:	6a08      	ldr	r0, [r1, #32]
 8012c1e:	1812      	adds	r2, r2, r0
 8012c20:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8012c24:	1b56      	subs	r6, r2, r5
 8012c26:	eb63 0709 	sbc.w	r7, r3, r9
		if (remaining > 0) {
 8012c2a:	2e01      	cmp	r6, #1
 8012c2c:	f177 0300 	sbcs.w	r3, r7, #0
 8012c30:	dad9      	bge.n	8012be6 <ipv6_nd_reachable_timeout+0x1a>
		data->reachable = 0;
 8012c32:	2200      	movs	r2, #0
 8012c34:	2300      	movs	r3, #0
 8012c36:	e9c1 2306 	strd	r2, r3, [r1, #24]
		switch (data->state) {
 8012c3a:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8012c3e:	2b04      	cmp	r3, #4
 8012c40:	d8d6      	bhi.n	8012bf0 <ipv6_nd_reachable_timeout+0x24>
 8012c42:	e8df f003 	tbb	[pc, r3]
 8012c46:	2103      	.short	0x2103
 8012c48:	2e25      	.short	0x2e25
 8012c4a:	34          	.byte	0x34
 8012c4b:	00          	.byte	0x00
			if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
 8012c4c:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 8012c50:	2b02      	cmp	r3, #2
 8012c52:	d908      	bls.n	8012c66 <ipv6_nd_reachable_timeout+0x9a>
				net_ipv6_nbr_rm(nbr->iface, &data->addr);
 8012c54:	4a2a      	ldr	r2, [pc, #168]	; (8012d00 <ipv6_nd_reachable_timeout+0x134>)
 8012c56:	2354      	movs	r3, #84	; 0x54
 8012c58:	fb03 2304 	mla	r3, r3, r4, r2
 8012c5c:	3104      	adds	r1, #4
 8012c5e:	6898      	ldr	r0, [r3, #8]
 8012c60:	f7fe fbac 	bl	80113bc <net_ipv6_nbr_rm>
 8012c64:	e7c4      	b.n	8012bf0 <ipv6_nd_reachable_timeout+0x24>
				data->ns_count++;
 8012c66:	3301      	adds	r3, #1
 8012c68:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
						       NULL, &data->addr,
 8012c6c:	1d0b      	adds	r3, r1, #4
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
 8012c6e:	4a24      	ldr	r2, [pc, #144]	; (8012d00 <ipv6_nd_reachable_timeout+0x134>)
 8012c70:	2054      	movs	r0, #84	; 0x54
 8012c72:	fb00 2004 	mla	r0, r0, r4, r2
 8012c76:	2100      	movs	r1, #0
 8012c78:	9101      	str	r1, [sp, #4]
 8012c7a:	9300      	str	r3, [sp, #0]
 8012c7c:	460b      	mov	r3, r1
 8012c7e:	460a      	mov	r2, r1
 8012c80:	6880      	ldr	r0, [r0, #8]
 8012c82:	f7fe ff3b 	bl	8011afc <net_ipv6_send_ns>
				if (ret < 0) {
 8012c86:	e7b3      	b.n	8012bf0 <ipv6_nd_reachable_timeout+0x24>
			data->state = NET_IPV6_NBR_STATE_STALE;
 8012c88:	2302      	movs	r3, #2
 8012c8a:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
			NET_DBG("nbr %p moving %s state to STALE (%d)",
 8012c8e:	e7af      	b.n	8012bf0 <ipv6_nd_reachable_timeout+0x24>
			net_ipv6_nbr_rm(nbr->iface, &data->addr);
 8012c90:	4a1b      	ldr	r2, [pc, #108]	; (8012d00 <ipv6_nd_reachable_timeout+0x134>)
 8012c92:	2354      	movs	r3, #84	; 0x54
 8012c94:	fb03 2304 	mla	r3, r3, r4, r2
 8012c98:	3104      	adds	r1, #4
 8012c9a:	6898      	ldr	r0, [r3, #8]
 8012c9c:	f7fe fb8e 	bl	80113bc <net_ipv6_nbr_rm>
			break;
 8012ca0:	e7a6      	b.n	8012bf0 <ipv6_nd_reachable_timeout+0x24>
			data->state = NET_IPV6_NBR_STATE_PROBE;
 8012ca2:	2304      	movs	r3, #4
 8012ca4:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30
			data->ns_count = 0U;
 8012ca8:	2300      	movs	r3, #0
 8012caa:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
			if (data->ns_count >= MAX_UNICAST_SOLICIT) {
 8012cae:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 8012cb2:	2b02      	cmp	r3, #2
 8012cb4:	d908      	bls.n	8012cc8 <ipv6_nd_reachable_timeout+0xfc>
				net_ipv6_nbr_rm(nbr->iface, &data->addr);
 8012cb6:	4a12      	ldr	r2, [pc, #72]	; (8012d00 <ipv6_nd_reachable_timeout+0x134>)
 8012cb8:	2354      	movs	r3, #84	; 0x54
 8012cba:	fb03 2304 	mla	r3, r3, r4, r2
 8012cbe:	3104      	adds	r1, #4
 8012cc0:	6898      	ldr	r0, [r3, #8]
 8012cc2:	f7fe fb7b 	bl	80113bc <net_ipv6_nbr_rm>
 8012cc6:	e793      	b.n	8012bf0 <ipv6_nd_reachable_timeout+0x24>
				data->ns_count++;
 8012cc8:	3301      	adds	r3, #1
 8012cca:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
						       NULL, &data->addr,
 8012cce:	1d08      	adds	r0, r1, #4
				ret = net_ipv6_send_ns(nbr->iface, NULL, NULL,
 8012cd0:	4b0b      	ldr	r3, [pc, #44]	; (8012d00 <ipv6_nd_reachable_timeout+0x134>)
 8012cd2:	f04f 0c54 	mov.w	ip, #84	; 0x54
 8012cd6:	fb0c 3c04 	mla	ip, ip, r4, r3
 8012cda:	2100      	movs	r1, #0
 8012cdc:	9101      	str	r1, [sp, #4]
 8012cde:	9000      	str	r0, [sp, #0]
 8012ce0:	460b      	mov	r3, r1
 8012ce2:	460a      	mov	r2, r1
 8012ce4:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8012ce8:	f7fe ff08 	bl	8011afc <net_ipv6_send_ns>
				ipv6_nd_restart_reachable_timer(nbr,
 8012cec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	4640      	mov	r0, r8
 8012cf4:	f7fe faaa 	bl	801124c <ipv6_nd_restart_reachable_timer>
 8012cf8:	e77a      	b.n	8012bf0 <ipv6_nd_reachable_timeout+0x24>
}
 8012cfa:	b003      	add	sp, #12
 8012cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d00:	2000083c 	.word	0x2000083c

08012d04 <net_ipv6_send_rs>:
{
 8012d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d08:	b089      	sub	sp, #36	; 0x24
 8012d0a:	4606      	mov	r6, r0
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
 8012d0c:	f240 23ff 	movw	r3, #767	; 0x2ff
 8012d10:	f8ad 3010 	strh.w	r3, [sp, #16]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
 8012d14:	2300      	movs	r3, #0
 8012d16:	f8ad 3012 	strh.w	r3, [sp, #18]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
 8012d1a:	f8ad 3014 	strh.w	r3, [sp, #20]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
 8012d1e:	f8ad 3016 	strh.w	r3, [sp, #22]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
 8012d22:	f8ad 3018 	strh.w	r3, [sp, #24]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
 8012d26:	f8ad 301a 	strh.w	r3, [sp, #26]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
 8012d2a:	f8ad 301c 	strh.w	r3, [sp, #28]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
 8012d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012d32:	f8ad 301e 	strh.w	r3, [sp, #30]
	src = net_if_ipv6_select_src_addr(iface, &dst);
 8012d36:	a904      	add	r1, sp, #16
 8012d38:	f7fb fcbc 	bl	800e6b4 <net_if_ipv6_select_src_addr>
 8012d3c:	4604      	mov	r4, r0
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8012d3e:	6803      	ldr	r3, [r0, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8012d40:	b93b      	cbnz	r3, 8012d52 <net_ipv6_send_rs+0x4e>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8012d42:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 8012d44:	bb5b      	cbnz	r3, 8012d9e <net_ipv6_send_rs+0x9a>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8012d46:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 8012d48:	bb5b      	cbnz	r3, 8012da2 <net_ipv6_send_rs+0x9e>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
 8012d4a:	68c3      	ldr	r3, [r0, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 8012d4c:	b35b      	cbz	r3, 8012da6 <net_ipv6_send_rs+0xa2>
 8012d4e:	2300      	movs	r3, #0
 8012d50:	e000      	b.n	8012d54 <net_ipv6_send_rs+0x50>
 8012d52:	2300      	movs	r3, #0
	if (!net_ipv6_is_addr_unspecified(src)) {
 8012d54:	bb4b      	cbnz	r3, 8012daa <net_ipv6_send_rs+0xa6>
 8012d56:	6833      	ldr	r3, [r6, #0]
	uint8_t total_len = net_if_get_link_addr(iface)->len +
 8012d58:	7d1f      	ldrb	r7, [r3, #20]
	return ROUND_UP(total_len, 8U);
 8012d5a:	3709      	adds	r7, #9
 8012d5c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
	pkt = net_pkt_alloc_with_buffer(iface,
 8012d60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012d64:	2300      	movs	r3, #0
 8012d66:	e9cd 2300 	strd	r2, r3, [sp]
 8012d6a:	233a      	movs	r3, #58	; 0x3a
 8012d6c:	2202      	movs	r2, #2
 8012d6e:	1d39      	adds	r1, r7, #4
 8012d70:	4630      	mov	r0, r6
 8012d72:	f7fc ff07 	bl	800fb84 <net_pkt_alloc_with_buffer>
	if (!pkt) {
 8012d76:	4605      	mov	r5, r0
 8012d78:	2800      	cmp	r0, #0
 8012d7a:	d077      	beq.n	8012e6c <net_ipv6_send_rs+0x168>
	pkt->ipv6_hop_limit = hop_limit;
 8012d7c:	23ff      	movs	r3, #255	; 0xff
 8012d7e:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
	if (net_ipv6_create(pkt, src, &dst) ||
 8012d82:	aa04      	add	r2, sp, #16
 8012d84:	4621      	mov	r1, r4
 8012d86:	f008 f986 	bl	801b096 <net_ipv6_create>
 8012d8a:	b180      	cbz	r0, 8012dae <net_ipv6_send_rs+0xaa>
	int ret = -ENOBUFS;
 8012d8c:	f06f 0468 	mvn.w	r4, #104	; 0x68
	net_pkt_unref(pkt);
 8012d90:	4628      	mov	r0, r5
 8012d92:	f007 fb01 	bl	801a398 <net_pkt_unref>
}
 8012d96:	4620      	mov	r0, r4
 8012d98:	b009      	add	sp, #36	; 0x24
 8012d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d9e:	2300      	movs	r3, #0
 8012da0:	e7d8      	b.n	8012d54 <net_ipv6_send_rs+0x50>
 8012da2:	2300      	movs	r3, #0
 8012da4:	e7d6      	b.n	8012d54 <net_ipv6_send_rs+0x50>
 8012da6:	2301      	movs	r3, #1
 8012da8:	e7d4      	b.n	8012d54 <net_ipv6_send_rs+0x50>
	uint8_t llao_len = 0U;
 8012daa:	2700      	movs	r7, #0
 8012dac:	e7d8      	b.n	8012d60 <net_ipv6_send_rs+0x5c>
	    net_icmpv6_create(pkt, NET_ICMPV6_RS, 0) ||
 8012dae:	2200      	movs	r2, #0
 8012db0:	2185      	movs	r1, #133	; 0x85
 8012db2:	4628      	mov	r0, r5
 8012db4:	f008 f8de 	bl	801af74 <net_icmpv6_create>
	if (net_ipv6_create(pkt, src, &dst) ||
 8012db8:	2800      	cmp	r0, #0
 8012dba:	d1e7      	bne.n	8012d8c <net_ipv6_send_rs+0x88>
	    net_pkt_memset(pkt, 0, sizeof(struct net_icmpv6_rs_hdr))) {
 8012dbc:	2204      	movs	r2, #4
 8012dbe:	2100      	movs	r1, #0
 8012dc0:	4628      	mov	r0, r5
 8012dc2:	f007 fbcc 	bl	801a55e <net_pkt_memset>
	    net_icmpv6_create(pkt, NET_ICMPV6_RS, 0) ||
 8012dc6:	4604      	mov	r4, r0
 8012dc8:	2800      	cmp	r0, #0
 8012dca:	d1df      	bne.n	8012d8c <net_ipv6_send_rs+0x88>
	if (llao_len > 0) {
 8012dcc:	b187      	cbz	r7, 8012df0 <net_ipv6_send_rs+0xec>
 8012dce:	f8d6 8000 	ldr.w	r8, [r6]
	struct net_icmpv6_nd_opt_hdr opt_hdr = {
 8012dd2:	2301      	movs	r3, #1
 8012dd4:	f88d 300c 	strb.w	r3, [sp, #12]
 8012dd8:	08fb      	lsrs	r3, r7, #3
 8012dda:	f88d 300d 	strb.w	r3, [sp, #13]
	if (net_pkt_write(pkt, &opt_hdr,
 8012dde:	2202      	movs	r2, #2
 8012de0:	a903      	add	r1, sp, #12
 8012de2:	4628      	mov	r0, r5
 8012de4:	f007 fcec 	bl	801a7c0 <net_pkt_write>
 8012de8:	b1d0      	cbz	r0, 8012e20 <net_ipv6_send_rs+0x11c>
		return false;
 8012dea:	2300      	movs	r3, #0
		if (!set_llao(pkt, net_if_get_link_addr(iface),
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d03a      	beq.n	8012e66 <net_ipv6_send_rs+0x162>
	net_pkt_cursor_init(pkt);
 8012df0:	4628      	mov	r0, r5
 8012df2:	f007 fb32 	bl	801a45a <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
 8012df6:	213a      	movs	r1, #58	; 0x3a
 8012df8:	4628      	mov	r0, r5
 8012dfa:	f008 f98b 	bl	801b114 <net_ipv6_finalize>
	if (net_send_data(pkt) < 0) {
 8012dfe:	4628      	mov	r0, r5
 8012e00:	f7f9 fbb8 	bl	800c574 <net_send_data>
 8012e04:	2800      	cmp	r0, #0
 8012e06:	db20      	blt.n	8012e4a <net_ipv6_send_rs+0x146>
	UPDATE_STAT(iface, stats.ipv6_nd.sent++);
 8012e08:	4a1a      	ldr	r2, [pc, #104]	; (8012e74 <net_ipv6_send_rs+0x170>)
 8012e0a:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 8012e0e:	3301      	adds	r3, #1
 8012e10:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8012e14:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
 8012e18:	3301      	adds	r3, #1
 8012e1a:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
	return 0;
 8012e1e:	e7ba      	b.n	8012d96 <net_ipv6_send_rs+0x92>
	    net_pkt_write(pkt, lladdr->addr, lladdr->len) ||
 8012e20:	f898 2014 	ldrb.w	r2, [r8, #20]
 8012e24:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012e28:	4628      	mov	r0, r5
 8012e2a:	f007 fcc9 	bl	801a7c0 <net_pkt_write>
			  sizeof(struct net_icmpv6_nd_opt_hdr)) ||
 8012e2e:	2800      	cmp	r0, #0
 8012e30:	d1db      	bne.n	8012dea <net_ipv6_send_rs+0xe6>
	    net_pkt_memset(pkt, 0, llao_len - lladdr->len - 2)) {
 8012e32:	f898 2014 	ldrb.w	r2, [r8, #20]
 8012e36:	1aba      	subs	r2, r7, r2
 8012e38:	3a02      	subs	r2, #2
 8012e3a:	2100      	movs	r1, #0
 8012e3c:	4628      	mov	r0, r5
 8012e3e:	f007 fb8e 	bl	801a55e <net_pkt_memset>
	    net_pkt_write(pkt, lladdr->addr, lladdr->len) ||
 8012e42:	2800      	cmp	r0, #0
 8012e44:	d1d1      	bne.n	8012dea <net_ipv6_send_rs+0xe6>
	return true;
 8012e46:	2301      	movs	r3, #1
 8012e48:	e7d0      	b.n	8012dec <net_ipv6_send_rs+0xe8>
	UPDATE_STAT(iface, stats.ipv6_nd.drop++);
 8012e4a:	4a0a      	ldr	r2, [pc, #40]	; (8012e74 <net_ipv6_send_rs+0x170>)
 8012e4c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8012e50:	3301      	adds	r3, #1
 8012e52:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8012e56:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 8012e5a:	3301      	adds	r3, #1
 8012e5c:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
		ret = -EINVAL;
 8012e60:	f06f 0415 	mvn.w	r4, #21
		goto drop;
 8012e64:	e794      	b.n	8012d90 <net_ipv6_send_rs+0x8c>
	int ret = -ENOBUFS;
 8012e66:	f06f 0468 	mvn.w	r4, #104	; 0x68
 8012e6a:	e791      	b.n	8012d90 <net_ipv6_send_rs+0x8c>
		return -ENOMEM;
 8012e6c:	f06f 040b 	mvn.w	r4, #11
 8012e70:	e791      	b.n	8012d96 <net_ipv6_send_rs+0x92>
 8012e72:	bf00      	nop
 8012e74:	20002a58 	.word	0x20002a58

08012e78 <net_ipv6_nbr_init>:
	.handler = handle_ra_input,
};
#endif /* CONFIG_NET_IPV6_ND */

void net_ipv6_nbr_init(void)
{
 8012e78:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
 8012e7a:	480c      	ldr	r0, [pc, #48]	; (8012eac <net_ipv6_nbr_init+0x34>)
 8012e7c:	f7fd fc3e 	bl	80106fc <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
 8012e80:	480b      	ldr	r0, [pc, #44]	; (8012eb0 <net_ipv6_nbr_init+0x38>)
 8012e82:	f7fd fc3b 	bl	80106fc <net_icmpv6_register_handler>
	k_work_init_delayable(&ipv6_ns_reply_timer, ipv6_ns_reply_timeout);
 8012e86:	490b      	ldr	r1, [pc, #44]	; (8012eb4 <net_ipv6_nbr_init+0x3c>)
 8012e88:	480b      	ldr	r0, [pc, #44]	; (8012eb8 <net_ipv6_nbr_init+0x40>)
 8012e8a:	f009 f935 	bl	801c0f8 <k_work_init_delayable>
	return z_impl_k_sem_init(sem, initial_count, limit);
 8012e8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012e92:	2101      	movs	r1, #1
 8012e94:	4809      	ldr	r0, [pc, #36]	; (8012ebc <net_ipv6_nbr_init+0x44>)
 8012e96:	f009 f87f 	bl	801bf98 <z_impl_k_sem_init>
	k_sem_init(&nbr_lock, 1, K_SEM_MAX_LIMIT);
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
 8012e9a:	4809      	ldr	r0, [pc, #36]	; (8012ec0 <net_ipv6_nbr_init+0x48>)
 8012e9c:	f7fd fc2e 	bl	80106fc <net_icmpv6_register_handler>
	k_work_init_delayable(&ipv6_nd_reachable_timer,
 8012ea0:	4908      	ldr	r1, [pc, #32]	; (8012ec4 <net_ipv6_nbr_init+0x4c>)
 8012ea2:	4809      	ldr	r0, [pc, #36]	; (8012ec8 <net_ipv6_nbr_init+0x50>)
 8012ea4:	f009 f928 	bl	801c0f8 <k_work_init_delayable>
			      ipv6_nd_reachable_timeout);
#endif
}
 8012ea8:	bd08      	pop	{r3, pc}
 8012eaa:	bf00      	nop
 8012eac:	20000adc 	.word	0x20000adc
 8012eb0:	20000824 	.word	0x20000824
 8012eb4:	080112ed 	.word	0x080112ed
 8012eb8:	200029f8 	.word	0x200029f8
 8012ebc:	200034c0 	.word	0x200034c0
 8012ec0:	20000ae8 	.word	0x20000ae8
 8012ec4:	08012bcd 	.word	0x08012bcd
 8012ec8:	200029c8 	.word	0x200029c8

08012ecc <mld_send>:

	return 0;
}

static int mld_send(struct net_pkt *pkt)
{
 8012ecc:	b510      	push	{r4, lr}
 8012ece:	4604      	mov	r4, r0
	net_pkt_cursor_init(pkt);
 8012ed0:	f007 fac3 	bl	801a45a <net_pkt_cursor_init>
	net_ipv6_finalize(pkt, IPPROTO_ICMPV6);
 8012ed4:	213a      	movs	r1, #58	; 0x3a
 8012ed6:	4620      	mov	r0, r4
 8012ed8:	f008 f91c 	bl	801b114 <net_ipv6_finalize>

	if (net_send_data(pkt) < 0) {
 8012edc:	4620      	mov	r0, r4
 8012ede:	f7f9 fb49 	bl	800c574 <net_send_data>
 8012ee2:	2800      	cmp	r0, #0
 8012ee4:	db14      	blt.n	8012f10 <mld_send+0x44>
	return pkt->iface;
 8012ee6:	69a1      	ldr	r1, [r4, #24]
	UPDATE_STAT(iface, stats.icmp.sent++);
 8012ee8:	4b16      	ldr	r3, [pc, #88]	; (8012f44 <mld_send+0x78>)
 8012eea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012eec:	3201      	adds	r2, #1
 8012eee:	649a      	str	r2, [r3, #72]	; 0x48
 8012ef0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8012ef2:	3201      	adds	r2, #1
 8012ef4:	650a      	str	r2, [r1, #80]	; 0x50
 8012ef6:	69a1      	ldr	r1, [r4, #24]
	UPDATE_STAT(iface, stats.ipv6_mld.sent++);
 8012ef8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8012efc:	3201      	adds	r2, #1
 8012efe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8012f02:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
 8012f06:	3301      	adds	r3, #1
 8012f08:	f8c1 30b8 	str.w	r3, [r1, #184]	; 0xb8
	}

	net_stats_update_icmp_sent(net_pkt_iface(pkt));
	net_stats_update_ipv6_mld_sent(net_pkt_iface(pkt));

	return 0;
 8012f0c:	2000      	movs	r0, #0
}
 8012f0e:	bd10      	pop	{r4, pc}
 8012f10:	69a1      	ldr	r1, [r4, #24]
	UPDATE_STAT(iface, stats.icmp.drop++);
 8012f12:	4b0c      	ldr	r3, [pc, #48]	; (8012f44 <mld_send+0x78>)
 8012f14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012f16:	3201      	adds	r2, #1
 8012f18:	64da      	str	r2, [r3, #76]	; 0x4c
 8012f1a:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8012f1c:	3201      	adds	r2, #1
 8012f1e:	654a      	str	r2, [r1, #84]	; 0x54
 8012f20:	69a1      	ldr	r1, [r4, #24]
	UPDATE_STAT(iface, stats.ipv6_mld.drop++);
 8012f22:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8012f26:	3201      	adds	r2, #1
 8012f28:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8012f2c:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 8012f30:	3301      	adds	r3, #1
 8012f32:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
		net_pkt_unref(pkt);
 8012f36:	4620      	mov	r0, r4
 8012f38:	f007 fa2e 	bl	801a398 <net_pkt_unref>
		return -1;
 8012f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f40:	e7e5      	b.n	8012f0e <mld_send+0x42>
 8012f42:	bf00      	nop
 8012f44:	20002a58 	.word	0x20002a58

08012f48 <handle_mld_query>:
	dbg_addr("Received", pkt_str, src, dst)

static enum net_verdict handle_mld_query(struct net_pkt *pkt,
					 struct net_ipv6_hdr *ip_hdr,
					 struct net_icmp_hdr *icmp_hdr)
{
 8012f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f4c:	b082      	sub	sp, #8
 8012f4e:	4606      	mov	r6, r0
 8012f50:	460f      	mov	r7, r1
 8012f52:	4690      	mov	r8, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(mld_access,
 8012f54:	2400      	movs	r4, #0
 8012f56:	9400      	str	r4, [sp, #0]
 8012f58:	2318      	movs	r3, #24
 8012f5a:	9301      	str	r3, [sp, #4]
	return net_buf_frags_len(pkt->frags);
 8012f5c:	6883      	ldr	r3, [r0, #8]
	while (buf) {
 8012f5e:	b11b      	cbz	r3, 8012f68 <handle_mld_query+0x20>
		bytes += buf->len;
 8012f60:	899d      	ldrh	r5, [r3, #12]
 8012f62:	442c      	add	r4, r5
		buf = buf->frags;
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	e7fa      	b.n	8012f5e <handle_mld_query+0x16>
					      struct net_icmpv6_mld_query);
	uint16_t length = net_pkt_get_len(pkt);
 8012f68:	b2a4      	uxth	r4, r4
	struct net_icmpv6_mld_query *mld_query;
	uint16_t pkt_len;

	mld_query = (struct net_icmpv6_mld_query *)
				net_pkt_get_data(pkt, &mld_access);
 8012f6a:	4669      	mov	r1, sp
 8012f6c:	4630      	mov	r0, r6
 8012f6e:	f7fc fe2d 	bl	800fbcc <net_pkt_get_data>
	if (!mld_query) {
 8012f72:	4605      	mov	r5, r0
 8012f74:	2800      	cmp	r0, #0
 8012f76:	d038      	beq.n	8012fea <handle_mld_query+0xa2>
	return net_pkt_skip(pkt, access->size);
 8012f78:	9901      	ldr	r1, [sp, #4]
 8012f7a:	4630      	mov	r0, r6
 8012f7c:	f007 fae3 	bl	801a546 <net_pkt_skip>
	return pkt->iface;
 8012f80:	69b2      	ldr	r2, [r6, #24]
	UPDATE_STAT(iface, stats.ipv6_mld.recv++);
 8012f82:	4922      	ldr	r1, [pc, #136]	; (801300c <handle_mld_query+0xc4>)
 8012f84:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
 8012f88:	3301      	adds	r3, #1
 8012f8a:	f8c1 30ac 	str.w	r3, [r1, #172]	; 0xac
 8012f8e:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8012f92:	3301      	adds	r3, #1
 8012f94:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4

	dbg_addr_recv("Multicast Listener Query", &ip_hdr->src, &ip_hdr->dst);

	net_stats_update_ipv6_mld_recv(net_pkt_iface(pkt));

	mld_query->num_sources = ntohs(mld_query->num_sources);
 8012f98:	8aeb      	ldrh	r3, [r5, #22]
 8012f9a:	0a1a      	lsrs	r2, r3, #8
 8012f9c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8012fa0:	b293      	uxth	r3, r2
 8012fa2:	82ea      	strh	r2, [r5, #22]
	return pkt->ipv6_ext_len;
 8012fa4:	f8b6 2050 	ldrh.w	r2, [r6, #80]	; 0x50

	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
		sizeof(struct net_icmp_hdr) +
		sizeof(struct net_icmpv6_mld_query) +
		sizeof(struct in6_addr) * mld_query->num_sources;
 8012fa8:	011b      	lsls	r3, r3, #4
 8012faa:	b29b      	uxth	r3, r3
		sizeof(struct net_icmpv6_mld_query) +
 8012fac:	4413      	add	r3, r2
 8012fae:	b29b      	uxth	r3, r3
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
 8012fb0:	3344      	adds	r3, #68	; 0x44
 8012fb2:	b29b      	uxth	r3, r3

	if (length < pkt_len || pkt_len > NET_IPV6_MTU ||
 8012fb4:	42a3      	cmp	r3, r4
 8012fb6:	d818      	bhi.n	8012fea <handle_mld_query+0xa2>
 8012fb8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8012fbc:	d815      	bhi.n	8012fea <handle_mld_query+0xa2>
	    ip_hdr->hop_limit != 1U || icmp_hdr->code != 0U) {
 8012fbe:	79fb      	ldrb	r3, [r7, #7]
	if (length < pkt_len || pkt_len > NET_IPV6_MTU ||
 8012fc0:	2b01      	cmp	r3, #1
 8012fc2:	d112      	bne.n	8012fea <handle_mld_query+0xa2>
	    ip_hdr->hop_limit != 1U || icmp_hdr->code != 0U) {
 8012fc4:	f898 4001 	ldrb.w	r4, [r8, #1]
 8012fc8:	b97c      	cbnz	r4, 8012fea <handle_mld_query+0xa2>
		goto drop;
	}

	/* Currently we only support an unspecified address query. */
	if (!net_ipv6_addr_cmp_raw(mld_query->mcast_address,
 8012fca:	3504      	adds	r5, #4
				   (uint8_t *)net_ipv6_unspecified_address())) {
 8012fcc:	f7fc faee 	bl	800f5ac <net_ipv6_unspecified_address>
 8012fd0:	4601      	mov	r1, r0
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 8012fd2:	2210      	movs	r2, #16
 8012fd4:	4628      	mov	r0, r5
 8012fd6:	f009 fc21 	bl	801c81c <memcmp>
	if (!net_ipv6_addr_cmp_raw(mld_query->mcast_address,
 8012fda:	b930      	cbnz	r0, 8012fea <handle_mld_query+0xa2>
		NET_DBG("DROP: only supporting unspecified address query");
		goto drop;
	}

	send_mld_report(net_pkt_iface(pkt));
 8012fdc:	69b0      	ldr	r0, [r6, #24]
 8012fde:	f008 fa9f 	bl	801b520 <send_mld_report>

	net_pkt_unref(pkt);
 8012fe2:	4630      	mov	r0, r6
 8012fe4:	f007 f9d8 	bl	801a398 <net_pkt_unref>

	return NET_OK;
 8012fe8:	e00c      	b.n	8013004 <handle_mld_query+0xbc>
	return pkt->iface;
 8012fea:	69b2      	ldr	r2, [r6, #24]
	UPDATE_STAT(iface, stats.ipv6_mld.drop++);
 8012fec:	4907      	ldr	r1, [pc, #28]	; (801300c <handle_mld_query+0xc4>)
 8012fee:	f8d1 30b4 	ldr.w	r3, [r1, #180]	; 0xb4
 8012ff2:	3301      	adds	r3, #1
 8012ff4:	f8c1 30b4 	str.w	r3, [r1, #180]	; 0xb4
 8012ff8:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
 8012ffc:	3301      	adds	r3, #1
 8012ffe:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

drop:
	net_stats_update_ipv6_mld_drop(net_pkt_iface(pkt));

	return NET_DROP;
 8013002:	2402      	movs	r4, #2
}
 8013004:	4620      	mov	r0, r4
 8013006:	b002      	add	sp, #8
 8013008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801300c:	20002a58 	.word	0x20002a58

08013010 <net_ipv6_mld_join>:
{
 8013010:	b530      	push	{r4, r5, lr}
 8013012:	b083      	sub	sp, #12
 8013014:	9001      	str	r0, [sp, #4]
 8013016:	460c      	mov	r4, r1
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
 8013018:	a901      	add	r1, sp, #4
 801301a:	4620      	mov	r0, r4
 801301c:	f7fb f85a 	bl	800e0d4 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
 8013020:	4605      	mov	r5, r0
 8013022:	b118      	cbz	r0, 801302c <net_ipv6_mld_join+0x1c>
	return addr->is_joined;
 8013024:	7d03      	ldrb	r3, [r0, #20]
 8013026:	f013 0f02 	tst.w	r3, #2
 801302a:	d122      	bne.n	8013072 <net_ipv6_mld_join+0x62>
	if (!maddr) {
 801302c:	b1bd      	cbz	r5, 801305e <net_ipv6_mld_join+0x4e>
	ret = mld_send_generic(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
 801302e:	2202      	movs	r2, #2
 8013030:	4621      	mov	r1, r4
 8013032:	9801      	ldr	r0, [sp, #4]
 8013034:	f008 fa46 	bl	801b4c4 <mld_send_generic>
	if (ret < 0) {
 8013038:	1e04      	subs	r4, r0, #0
 801303a:	db0d      	blt.n	8013058 <net_ipv6_mld_join+0x48>
	net_if_ipv6_maddr_join(maddr);
 801303c:	4628      	mov	r0, r5
 801303e:	f7fb f917 	bl	800e270 <net_if_ipv6_maddr_join>
	net_if_mcast_monitor(iface, &maddr->address, true);
 8013042:	2201      	movs	r2, #1
 8013044:	4629      	mov	r1, r5
 8013046:	9801      	ldr	r0, [sp, #4]
 8013048:	f7fa fa2e 	bl	800d4a8 <net_if_mcast_monitor>
	net_mgmt_event_notify_with_info(NET_EVENT_IPV6_MCAST_JOIN, iface,
 801304c:	2310      	movs	r3, #16
 801304e:	1d2a      	adds	r2, r5, #4
 8013050:	9901      	ldr	r1, [sp, #4]
 8013052:	4809      	ldr	r0, [pc, #36]	; (8013078 <net_ipv6_mld_join+0x68>)
 8013054:	f7fc fbd0 	bl	800f7f8 <net_mgmt_event_notify_with_info>
}
 8013058:	4620      	mov	r0, r4
 801305a:	b003      	add	sp, #12
 801305c:	bd30      	pop	{r4, r5, pc}
		maddr = net_if_ipv6_maddr_add(iface, addr);
 801305e:	4621      	mov	r1, r4
 8013060:	9801      	ldr	r0, [sp, #4]
 8013062:	f7fb f88f 	bl	800e184 <net_if_ipv6_maddr_add>
		if (!maddr) {
 8013066:	4605      	mov	r5, r0
 8013068:	2800      	cmp	r0, #0
 801306a:	d1e0      	bne.n	801302e <net_ipv6_mld_join+0x1e>
			return -ENOMEM;
 801306c:	f06f 040b 	mvn.w	r4, #11
 8013070:	e7f2      	b.n	8013058 <net_ipv6_mld_join+0x48>
		return -EALREADY;
 8013072:	f06f 0477 	mvn.w	r4, #119	; 0x77
 8013076:	e7ef      	b.n	8013058 <net_ipv6_mld_join+0x48>
 8013078:	e0600007 	.word	0xe0600007

0801307c <net_ipv6_mld_init>:
	.code = 0,
	.handler = handle_mld_query,
};

void net_ipv6_mld_init(void)
{
 801307c:	b508      	push	{r3, lr}
	net_icmpv6_register_handler(&mld_query_input_handler);
 801307e:	4802      	ldr	r0, [pc, #8]	; (8013088 <net_ipv6_mld_init+0xc>)
 8013080:	f7fd fb3c 	bl	80106fc <net_icmpv6_register_handler>
}
 8013084:	bd08      	pop	{r3, pc}
 8013086:	bf00      	nop
 8013088:	20000af4 	.word	0x20000af4

0801308c <nbr_new>:
}

static struct net_nbr *nbr_new(struct net_if *iface,
			       struct in6_addr *addr,
			       uint8_t prefix_len)
{
 801308c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013090:	b084      	sub	sp, #16
 8013092:	4605      	mov	r5, r0
 8013094:	460c      	mov	r4, r1
 8013096:	4690      	mov	r8, r2
	struct net_nbr *nbr = net_nbr_get(&net_nbr_routes.table);
 8013098:	480c      	ldr	r0, [pc, #48]	; (80130cc <nbr_new+0x40>)
 801309a:	f007 ff94 	bl	801afc6 <net_nbr_get>

	if (!nbr) {
 801309e:	4606      	mov	r6, r0
 80130a0:	b180      	cbz	r0, 80130c4 <nbr_new+0x38>
		return NULL;
	}

	nbr->iface = iface;
 80130a2:	6085      	str	r5, [r0, #8]
	return (struct net_route_entry *)nbr->data;
 80130a4:	68c7      	ldr	r7, [r0, #12]

	net_ipaddr_copy(&net_route_data(nbr)->addr, addr);
 80130a6:	466d      	mov	r5, sp
 80130a8:	6820      	ldr	r0, [r4, #0]
 80130aa:	6861      	ldr	r1, [r4, #4]
 80130ac:	68a2      	ldr	r2, [r4, #8]
 80130ae:	68e3      	ldr	r3, [r4, #12]
 80130b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80130b2:	466c      	mov	r4, sp
 80130b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80130b6:	6238      	str	r0, [r7, #32]
 80130b8:	6279      	str	r1, [r7, #36]	; 0x24
 80130ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80130bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	return (struct net_route_entry *)nbr->data;
 80130be:	68f3      	ldr	r3, [r6, #12]
	net_route_data(nbr)->prefix_len = prefix_len;
 80130c0:	f883 8030 	strb.w	r8, [r3, #48]	; 0x30
		nbr->idx, nbr, iface,
		log_strdup(net_sprint_ipv6_addr(&net_route_data(nbr)->addr)),
		prefix_len);

	return nbr;
}
 80130c4:	4630      	mov	r0, r6
 80130c6:	b004      	add	sp, #16
 80130c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130cc:	20000b00 	.word	0x20000b00

080130d0 <get_nexthop_route>:
	for (i = 0; i < CONFIG_NET_MAX_NEXTHOPS; i++) {
 80130d0:	2200      	movs	r2, #0
 80130d2:	2a07      	cmp	r2, #7
 80130d4:	dc15      	bgt.n	8013102 <get_nexthop_route+0x32>
{
 80130d6:	b508      	push	{r3, lr}
			((sizeof(struct net_nbr) + start->size) * idx));
 80130d8:	490b      	ldr	r1, [pc, #44]	; (8013108 <get_nexthop_route+0x38>)
 80130da:	884b      	ldrh	r3, [r1, #2]
 80130dc:	3314      	adds	r3, #20
 80130de:	fb03 f302 	mul.w	r3, r3, r2
	return (struct net_nbr *)((uint8_t *)start +
 80130e2:	18c8      	adds	r0, r1, r3
		if (!nbr->ref) {
 80130e4:	5ccb      	ldrb	r3, [r1, r3]
 80130e6:	b123      	cbz	r3, 80130f2 <get_nexthop_route+0x22>
	for (i = 0; i < CONFIG_NET_MAX_NEXTHOPS; i++) {
 80130e8:	3201      	adds	r2, #1
 80130ea:	2a07      	cmp	r2, #7
 80130ec:	ddf4      	ble.n	80130d8 <get_nexthop_route+0x8>
	return NULL;
 80130ee:	2000      	movs	r0, #0
}
 80130f0:	bd08      	pop	{r3, pc}
			nbr->data = nbr->__nbr;
 80130f2:	f100 0314 	add.w	r3, r0, #20
 80130f6:	60c3      	str	r3, [r0, #12]
			nbr->idx = NET_NBR_LLADDR_UNKNOWN;
 80130f8:	23ff      	movs	r3, #255	; 0xff
 80130fa:	7043      	strb	r3, [r0, #1]
			return net_nbr_ref(nbr);
 80130fc:	f007 ff5f 	bl	801afbe <net_nbr_ref>
 8013100:	e7f6      	b.n	80130f0 <get_nexthop_route+0x20>
	return NULL;
 8013102:	2000      	movs	r0, #0
}
 8013104:	4770      	bx	lr
 8013106:	bf00      	nop
 8013108:	20000d4c 	.word	0x20000d4c

0801310c <net_route_get_nbr>:
{
 801310c:	b538      	push	{r3, r4, r5, lr}
 801310e:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 8013110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013118:	480e      	ldr	r0, [pc, #56]	; (8013154 <net_route_get_nbr+0x48>)
 801311a:	f002 fbff 	bl	801591c <z_impl_k_mutex_lock>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
 801311e:	2300      	movs	r3, #0
 8013120:	e000      	b.n	8013124 <net_route_get_nbr+0x18>
 8013122:	3301      	adds	r3, #1
 8013124:	2b07      	cmp	r3, #7
 8013126:	dc0f      	bgt.n	8013148 <net_route_get_nbr+0x3c>
	return &net_route_entries_pool[idx].nbr;
 8013128:	4a0b      	ldr	r2, [pc, #44]	; (8013158 <net_route_get_nbr+0x4c>)
 801312a:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
 801312e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
		if (!nbr->ref) {
 8013132:	f812 2031 	ldrb.w	r2, [r2, r1, lsl #3]
 8013136:	2a00      	cmp	r2, #0
 8013138:	d0f3      	beq.n	8013122 <net_route_get_nbr+0x16>
		if (nbr->data == (uint8_t *)route) {
 801313a:	68e2      	ldr	r2, [r4, #12]
 801313c:	42aa      	cmp	r2, r5
 801313e:	d1f0      	bne.n	8013122 <net_route_get_nbr+0x16>
	return z_impl_k_mutex_unlock(mutex);
 8013140:	4804      	ldr	r0, [pc, #16]	; (8013154 <net_route_get_nbr+0x48>)
 8013142:	f002 fc75 	bl	8015a30 <z_impl_k_mutex_unlock>
			return nbr;
 8013146:	e003      	b.n	8013150 <net_route_get_nbr+0x44>
 8013148:	4802      	ldr	r0, [pc, #8]	; (8013154 <net_route_get_nbr+0x48>)
 801314a:	f002 fc71 	bl	8015a30 <z_impl_k_mutex_unlock>
	return NULL;
 801314e:	2400      	movs	r4, #0
}
 8013150:	4620      	mov	r0, r4
 8013152:	bd38      	pop	{r3, r4, r5, pc}
 8013154:	200010a8 	.word	0x200010a8
 8013158:	20000b0c 	.word	0x20000b0c

0801315c <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
 801315c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013160:	b083      	sub	sp, #12
 8013162:	4606      	mov	r6, r0
 8013164:	9101      	str	r1, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
 8013166:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801316a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801316e:	4848      	ldr	r0, [pc, #288]	; (8013290 <net_route_lookup+0x134>)
 8013170:	f002 fbd4 	bl	801591c <z_impl_k_mutex_lock>
	uint8_t longest_match = 0U;
	int i;

	k_mutex_lock(&lock, K_FOREVER);

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
 8013174:	2400      	movs	r4, #0
	uint8_t longest_match = 0U;
 8013176:	4625      	mov	r5, r4
	struct net_route_entry *route, *found = NULL;
 8013178:	46a0      	mov	r8, r4
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
 801317a:	e00a      	b.n	8013192 <net_route_lookup+0x36>
	return (struct net_route_entry *)nbr->data;
 801317c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8013180:	4a44      	ldr	r2, [pc, #272]	; (8013294 <net_route_lookup+0x138>)
 8013182:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013186:	68df      	ldr	r7, [r3, #12]
			continue;
		}

		route = net_route_data(nbr);

		if (route->prefix_len >= longest_match &&
 8013188:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801318c:	42ab      	cmp	r3, r5
 801318e:	d216      	bcs.n	80131be <net_route_lookup+0x62>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
 8013190:	3401      	adds	r4, #1
 8013192:	2c07      	cmp	r4, #7
 8013194:	dc45      	bgt.n	8013222 <net_route_lookup+0xc6>
 8013196:	f015 0f80 	tst.w	r5, #128	; 0x80
 801319a:	d142      	bne.n	8013222 <net_route_lookup+0xc6>
		if (!nbr->ref) {
 801319c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80131a0:	4a3c      	ldr	r2, [pc, #240]	; (8013294 <net_route_lookup+0x138>)
 80131a2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d0f2      	beq.n	8013190 <net_route_lookup+0x34>
		if (iface && nbr->iface != iface) {
 80131aa:	2e00      	cmp	r6, #0
 80131ac:	d0e6      	beq.n	801317c <net_route_lookup+0x20>
 80131ae:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80131b2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80131b6:	689b      	ldr	r3, [r3, #8]
 80131b8:	42b3      	cmp	r3, r6
 80131ba:	d1e9      	bne.n	8013190 <net_route_lookup+0x34>
 80131bc:	e7de      	b.n	801317c <net_route_lookup+0x20>
		    net_ipv6_is_prefix(dst->s6_addr,
				       route->addr.s6_addr,
 80131be:	f107 0b20 	add.w	fp, r7, #32
	uint8_t bytes = length / 8U;
 80131c2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	uint8_t remain = bits % 8;
 80131c6:	f1c3 0900 	rsb	r9, r3, #0
 80131ca:	f009 0907 	and.w	r9, r9, #7
	if (length > 128) {
 80131ce:	2b80      	cmp	r3, #128	; 0x80
 80131d0:	d906      	bls.n	80131e0 <net_route_lookup+0x84>
		return false;
 80131d2:	2300      	movs	r3, #0
		if (route->prefix_len >= longest_match &&
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d0db      	beq.n	8013190 <net_route_lookup+0x34>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
 80131d8:	f897 5030 	ldrb.w	r5, [r7, #48]	; 0x30
			found = route;
 80131dc:	46b8      	mov	r8, r7
 80131de:	e7d7      	b.n	8013190 <net_route_lookup+0x34>
	if (memcmp(addr1, addr2, bytes)) {
 80131e0:	4652      	mov	r2, sl
 80131e2:	4659      	mov	r1, fp
 80131e4:	9801      	ldr	r0, [sp, #4]
 80131e6:	f009 fb19 	bl	801c81c <memcmp>
 80131ea:	b9b0      	cbnz	r0, 801321a <net_route_lookup+0xbe>
	if (!remain) {
 80131ec:	f1b9 0f00 	cmp.w	r9, #0
 80131f0:	d015      	beq.n	801321e <net_route_lookup+0xc2>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
 80131f2:	f1c9 0208 	rsb	r2, r9, #8
 80131f6:	23ff      	movs	r3, #255	; 0xff
 80131f8:	4093      	lsls	r3, r2
 80131fa:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80131fe:	fa03 f909 	lsl.w	r9, r3, r9
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
 8013202:	9b01      	ldr	r3, [sp, #4]
 8013204:	f813 300a 	ldrb.w	r3, [r3, sl]
 8013208:	f81b 200a 	ldrb.w	r2, [fp, sl]
 801320c:	4053      	eors	r3, r2
 801320e:	ea19 0f03 	tst.w	r9, r3
 8013212:	bf0c      	ite	eq
 8013214:	2301      	moveq	r3, #1
 8013216:	2300      	movne	r3, #0
 8013218:	e7dc      	b.n	80131d4 <net_route_lookup+0x78>
		return false;
 801321a:	2300      	movs	r3, #0
 801321c:	e7da      	b.n	80131d4 <net_route_lookup+0x78>
		return true;
 801321e:	2301      	movs	r3, #1
 8013220:	e7d8      	b.n	80131d4 <net_route_lookup+0x78>
		}
	}

	if (found) {
 8013222:	f1b8 0f00 	cmp.w	r8, #0
 8013226:	d01b      	beq.n	8013260 <net_route_lookup+0x104>
	sys_slist_find_and_remove(&routes, &route->node);
 8013228:	4642      	mov	r2, r8
	return list->head;
 801322a:	4b1b      	ldr	r3, [pc, #108]	; (8013298 <net_route_lookup+0x13c>)
 801322c:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801322e:	2100      	movs	r1, #0
 8013230:	b17b      	cbz	r3, 8013252 <net_route_lookup+0xf6>
 8013232:	429a      	cmp	r2, r3
 8013234:	d002      	beq.n	801323c <net_route_lookup+0xe0>
 8013236:	4619      	mov	r1, r3
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	e7f9      	b.n	8013230 <net_route_lookup+0xd4>
Z_GENLIST_REMOVE(slist, snode)
 801323c:	b1b9      	cbz	r1, 801326e <net_route_lookup+0x112>
	return node->next;
 801323e:	f8d8 3000 	ldr.w	r3, [r8]
	parent->next = child;
 8013242:	600b      	str	r3, [r1, #0]
	return list->tail;
 8013244:	4b14      	ldr	r3, [pc, #80]	; (8013298 <net_route_lookup+0x13c>)
 8013246:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8013248:	429a      	cmp	r2, r3
 801324a:	d01a      	beq.n	8013282 <net_route_lookup+0x126>
	parent->next = child;
 801324c:	2300      	movs	r3, #0
 801324e:	f8c8 3000 	str.w	r3, [r8]
	return list->head;
 8013252:	4b11      	ldr	r3, [pc, #68]	; (8013298 <net_route_lookup+0x13c>)
 8013254:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
 8013256:	f8c8 1000 	str.w	r1, [r8]
	list->head = node;
 801325a:	601a      	str	r2, [r3, #0]
	return list->tail;
 801325c:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 801325e:	b19b      	cbz	r3, 8013288 <net_route_lookup+0x12c>
	return z_impl_k_mutex_unlock(mutex);
 8013260:	480b      	ldr	r0, [pc, #44]	; (8013290 <net_route_lookup+0x134>)
 8013262:	f002 fbe5 	bl	8015a30 <z_impl_k_mutex_unlock>
		update_route_access(found);
	}

	k_mutex_unlock(&lock);
	return found;
}
 8013266:	4640      	mov	r0, r8
 8013268:	b003      	add	sp, #12
 801326a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return node->next;
 801326e:	f8d8 1000 	ldr.w	r1, [r8]
	list->head = node;
 8013272:	4b09      	ldr	r3, [pc, #36]	; (8013298 <net_route_lookup+0x13c>)
 8013274:	6019      	str	r1, [r3, #0]
	return list->tail;
 8013276:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8013278:	429a      	cmp	r2, r3
 801327a:	d1e7      	bne.n	801324c <net_route_lookup+0xf0>
	list->tail = node;
 801327c:	4b06      	ldr	r3, [pc, #24]	; (8013298 <net_route_lookup+0x13c>)
 801327e:	6059      	str	r1, [r3, #4]
}
 8013280:	e7e4      	b.n	801324c <net_route_lookup+0xf0>
	list->tail = node;
 8013282:	4b05      	ldr	r3, [pc, #20]	; (8013298 <net_route_lookup+0x13c>)
 8013284:	6059      	str	r1, [r3, #4]
}
 8013286:	e7e1      	b.n	801324c <net_route_lookup+0xf0>
	list->tail = node;
 8013288:	4b03      	ldr	r3, [pc, #12]	; (8013298 <net_route_lookup+0x13c>)
 801328a:	605a      	str	r2, [r3, #4]
}
 801328c:	e7e8      	b.n	8013260 <net_route_lookup+0x104>
 801328e:	bf00      	nop
 8013290:	200010a8 	.word	0x200010a8
 8013294:	20000b0c 	.word	0x20000b0c
 8013298:	200034e4 	.word	0x200034e4

0801329c <net_route_update_lifetime>:
{
	NET_DBG("Updating route lifetime of %s to %u secs",
		log_strdup(net_sprint_ipv6_addr(&route->addr)),
		lifetime);

	if (!route) {
 801329c:	2800      	cmp	r0, #0
 801329e:	d079      	beq.n	8013394 <net_route_update_lifetime+0xf8>
{
 80132a0:	b570      	push	{r4, r5, r6, lr}
 80132a2:	460c      	mov	r4, r1
 80132a4:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 80132a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80132aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80132ae:	483a      	ldr	r0, [pc, #232]	; (8013398 <net_route_update_lifetime+0xfc>)
 80132b0:	f002 fb34 	bl	801591c <z_impl_k_mutex_lock>
		return;
	}

	k_mutex_lock(&lock, K_FOREVER);

	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
 80132b4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80132b8:	d127      	bne.n	801330a <net_route_update_lifetime+0x6e>
		route->is_infinite = true;
 80132ba:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 80132be:	f043 0304 	orr.w	r3, r3, #4
 80132c2:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31

		(void)sys_slist_find_and_remove(&active_route_lifetime_timers,
 80132c6:	f105 0210 	add.w	r2, r5, #16
	return list->head;
 80132ca:	4b34      	ldr	r3, [pc, #208]	; (801339c <net_route_update_lifetime+0x100>)
 80132cc:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80132ce:	2100      	movs	r1, #0
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d04b      	beq.n	801336c <net_route_update_lifetime+0xd0>
 80132d4:	4293      	cmp	r3, r2
 80132d6:	d002      	beq.n	80132de <net_route_update_lifetime+0x42>
 80132d8:	4619      	mov	r1, r3
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	e7f8      	b.n	80132d0 <net_route_update_lifetime+0x34>
Z_GENLIST_REMOVE(slist, snode)
 80132de:	b141      	cbz	r1, 80132f2 <net_route_update_lifetime+0x56>
	return node->next;
 80132e0:	692b      	ldr	r3, [r5, #16]
	parent->next = child;
 80132e2:	600b      	str	r3, [r1, #0]
	return list->tail;
 80132e4:	4b2d      	ldr	r3, [pc, #180]	; (801339c <net_route_update_lifetime+0x100>)
 80132e6:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 80132e8:	4293      	cmp	r3, r2
 80132ea:	d00b      	beq.n	8013304 <net_route_update_lifetime+0x68>
	parent->next = child;
 80132ec:	2300      	movs	r3, #0
 80132ee:	612b      	str	r3, [r5, #16]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80132f0:	e03c      	b.n	801336c <net_route_update_lifetime+0xd0>
	return node->next;
 80132f2:	6929      	ldr	r1, [r5, #16]
	list->head = node;
 80132f4:	4b29      	ldr	r3, [pc, #164]	; (801339c <net_route_update_lifetime+0x100>)
 80132f6:	6019      	str	r1, [r3, #0]
	return list->tail;
 80132f8:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 80132fa:	4293      	cmp	r3, r2
 80132fc:	d1f6      	bne.n	80132ec <net_route_update_lifetime+0x50>
	list->tail = node;
 80132fe:	4b27      	ldr	r3, [pc, #156]	; (801339c <net_route_update_lifetime+0x100>)
 8013300:	6059      	str	r1, [r3, #4]
}
 8013302:	e7f3      	b.n	80132ec <net_route_update_lifetime+0x50>
	list->tail = node;
 8013304:	4b25      	ldr	r3, [pc, #148]	; (801339c <net_route_update_lifetime+0x100>)
 8013306:	6059      	str	r1, [r3, #4]
}
 8013308:	e7f0      	b.n	80132ec <net_route_update_lifetime+0x50>
						&route->lifetime.node);
	} else {
		route->is_infinite = false;
 801330a:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 801330e:	f36f 0382 	bfc	r3, #2, #1
 8013312:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
	return z_impl_k_uptime_ticks();
 8013316:	f009 f977 	bl	801c608 <z_impl_k_uptime_ticks>
 801331a:	220a      	movs	r2, #10
 801331c:	2300      	movs	r3, #0
 801331e:	f7ed fc0d 	bl	8000b3c <__aeabi_uldivmod>
 8013322:	4602      	mov	r2, r0

		net_timeout_set(&route->lifetime, lifetime, k_uptime_get_32());
 8013324:	f105 0610 	add.w	r6, r5, #16
 8013328:	4621      	mov	r1, r4
 801332a:	4630      	mov	r0, r6
 801332c:	f006 fb23 	bl	8019976 <net_timeout_set>

		(void)sys_slist_find_and_remove(&active_route_lifetime_timers,
 8013330:	4631      	mov	r1, r6
	return list->head;
 8013332:	4b1a      	ldr	r3, [pc, #104]	; (801339c <net_route_update_lifetime+0x100>)
 8013334:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8013336:	2200      	movs	r2, #0
 8013338:	b15b      	cbz	r3, 8013352 <net_route_update_lifetime+0xb6>
 801333a:	428b      	cmp	r3, r1
 801333c:	d002      	beq.n	8013344 <net_route_update_lifetime+0xa8>
 801333e:	461a      	mov	r2, r3
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	e7f9      	b.n	8013338 <net_route_update_lifetime+0x9c>
Z_GENLIST_REMOVE(slist, snode)
 8013344:	b1b2      	cbz	r2, 8013374 <net_route_update_lifetime+0xd8>
	return node->next;
 8013346:	692b      	ldr	r3, [r5, #16]
	parent->next = child;
 8013348:	6013      	str	r3, [r2, #0]
	return list->tail;
 801334a:	4b14      	ldr	r3, [pc, #80]	; (801339c <net_route_update_lifetime+0x100>)
 801334c:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 801334e:	42b3      	cmp	r3, r6
 8013350:	d019      	beq.n	8013386 <net_route_update_lifetime+0xea>
	parent->next = child;
 8013352:	2300      	movs	r3, #0
 8013354:	612b      	str	r3, [r5, #16]
	return list->tail;
 8013356:	4b11      	ldr	r3, [pc, #68]	; (801339c <net_route_update_lifetime+0x100>)
 8013358:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
 801335a:	b1bb      	cbz	r3, 801338c <net_route_update_lifetime+0xf0>
	parent->next = child;
 801335c:	601e      	str	r6, [r3, #0]
	list->tail = node;
 801335e:	4b0f      	ldr	r3, [pc, #60]	; (801339c <net_route_update_lifetime+0x100>)
 8013360:	605e      	str	r6, [r3, #4]
						&route->lifetime.node);
		sys_slist_append(&active_route_lifetime_timers,
				 &route->lifetime.node);
		k_work_reschedule(&route_lifetime_timer, K_NO_WAIT);
 8013362:	2200      	movs	r2, #0
 8013364:	2300      	movs	r3, #0
 8013366:	480e      	ldr	r0, [pc, #56]	; (80133a0 <net_route_update_lifetime+0x104>)
 8013368:	f002 fdd4 	bl	8015f14 <k_work_reschedule>
	return z_impl_k_mutex_unlock(mutex);
 801336c:	480a      	ldr	r0, [pc, #40]	; (8013398 <net_route_update_lifetime+0xfc>)
 801336e:	f002 fb5f 	bl	8015a30 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&lock);
}
 8013372:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
 8013374:	692a      	ldr	r2, [r5, #16]
	list->head = node;
 8013376:	4b09      	ldr	r3, [pc, #36]	; (801339c <net_route_update_lifetime+0x100>)
 8013378:	601a      	str	r2, [r3, #0]
	return list->tail;
 801337a:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 801337c:	42b3      	cmp	r3, r6
 801337e:	d1e8      	bne.n	8013352 <net_route_update_lifetime+0xb6>
	list->tail = node;
 8013380:	4b06      	ldr	r3, [pc, #24]	; (801339c <net_route_update_lifetime+0x100>)
 8013382:	605a      	str	r2, [r3, #4]
}
 8013384:	e7e5      	b.n	8013352 <net_route_update_lifetime+0xb6>
	list->tail = node;
 8013386:	4b05      	ldr	r3, [pc, #20]	; (801339c <net_route_update_lifetime+0x100>)
 8013388:	605a      	str	r2, [r3, #4]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801338a:	e7e2      	b.n	8013352 <net_route_update_lifetime+0xb6>
	list->tail = node;
 801338c:	4b03      	ldr	r3, [pc, #12]	; (801339c <net_route_update_lifetime+0x100>)
 801338e:	605e      	str	r6, [r3, #4]
	list->head = node;
 8013390:	601e      	str	r6, [r3, #0]
}
 8013392:	e7e6      	b.n	8013362 <net_route_update_lifetime+0xc6>
 8013394:	4770      	bx	lr
 8013396:	bf00      	nop
 8013398:	200010a8 	.word	0x200010a8
 801339c:	200034dc 	.word	0x200034dc
 80133a0:	20002a28 	.word	0x20002a28

080133a4 <net_route_del>:
	struct net_route_nexthop *nexthop_route;
#if defined(CONFIG_NET_MGMT_EVENT_INFO)
       struct net_event_ipv6_route info;
#endif

	if (!route) {
 80133a4:	2800      	cmp	r0, #0
 80133a6:	d07b      	beq.n	80134a0 <net_route_del+0xfc>
{
 80133a8:	b538      	push	{r3, r4, r5, lr}
 80133aa:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 80133ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80133b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133b4:	483c      	ldr	r0, [pc, #240]	; (80134a8 <net_route_del+0x104>)
 80133b6:	f002 fab1 	bl	801591c <z_impl_k_mutex_lock>
 80133ba:	2300      	movs	r3, #0
 80133bc:	461a      	mov	r2, r3
 80133be:	68e1      	ldr	r1, [r4, #12]
 80133c0:	483a      	ldr	r0, [pc, #232]	; (80134ac <net_route_del+0x108>)
 80133c2:	f7fc fa19 	bl	800f7f8 <net_mgmt_event_notify_with_info>
					sizeof(struct net_event_ipv6_route));
#else
	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, route->iface);
#endif

	if (!route->is_infinite) {
 80133c6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80133ca:	f013 0f04 	tst.w	r3, #4
 80133ce:	d116      	bne.n	80133fe <net_route_del+0x5a>
		sys_slist_find_and_remove(&active_route_lifetime_timers,
 80133d0:	f104 0210 	add.w	r2, r4, #16
	return list->head;
 80133d4:	4b36      	ldr	r3, [pc, #216]	; (80134b0 <net_route_del+0x10c>)
 80133d6:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80133d8:	2100      	movs	r1, #0
 80133da:	b16b      	cbz	r3, 80133f8 <net_route_del+0x54>
 80133dc:	429a      	cmp	r2, r3
 80133de:	d002      	beq.n	80133e6 <net_route_del+0x42>
 80133e0:	4619      	mov	r1, r3
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	e7f9      	b.n	80133da <net_route_del+0x36>
Z_GENLIST_REMOVE(slist, snode)
 80133e6:	b1a1      	cbz	r1, 8013412 <net_route_del+0x6e>
	return node->next;
 80133e8:	6923      	ldr	r3, [r4, #16]
	parent->next = child;
 80133ea:	600b      	str	r3, [r1, #0]
	return list->tail;
 80133ec:	4b30      	ldr	r3, [pc, #192]	; (80134b0 <net_route_del+0x10c>)
 80133ee:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 80133f0:	429a      	cmp	r2, r3
 80133f2:	d017      	beq.n	8013424 <net_route_del+0x80>
	parent->next = child;
 80133f4:	2300      	movs	r3, #0
 80133f6:	6123      	str	r3, [r4, #16]
	return list->head;
 80133f8:	4b2d      	ldr	r3, [pc, #180]	; (80134b0 <net_route_del+0x10c>)
 80133fa:	681b      	ldr	r3, [r3, #0]
					  &route->lifetime.node);

		if (sys_slist_is_empty(&active_route_lifetime_timers)) {
 80133fc:	b1ab      	cbz	r3, 801342a <net_route_del+0x86>
			k_work_cancel_delayable(&route_lifetime_timer);
		}
	}

	sys_slist_find_and_remove(&routes, &route->node);
 80133fe:	4621      	mov	r1, r4
 8013400:	4b2c      	ldr	r3, [pc, #176]	; (80134b4 <net_route_del+0x110>)
 8013402:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8013404:	2200      	movs	r2, #0
 8013406:	b1eb      	cbz	r3, 8013444 <net_route_del+0xa0>
 8013408:	4299      	cmp	r1, r3
 801340a:	d012      	beq.n	8013432 <net_route_del+0x8e>
 801340c:	461a      	mov	r2, r3
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	e7f9      	b.n	8013406 <net_route_del+0x62>
	return node->next;
 8013412:	6921      	ldr	r1, [r4, #16]
	list->head = node;
 8013414:	4b26      	ldr	r3, [pc, #152]	; (80134b0 <net_route_del+0x10c>)
 8013416:	6019      	str	r1, [r3, #0]
	return list->tail;
 8013418:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 801341a:	429a      	cmp	r2, r3
 801341c:	d1ea      	bne.n	80133f4 <net_route_del+0x50>
	list->tail = node;
 801341e:	4b24      	ldr	r3, [pc, #144]	; (80134b0 <net_route_del+0x10c>)
 8013420:	6059      	str	r1, [r3, #4]
}
 8013422:	e7e7      	b.n	80133f4 <net_route_del+0x50>
	list->tail = node;
 8013424:	4b22      	ldr	r3, [pc, #136]	; (80134b0 <net_route_del+0x10c>)
 8013426:	6059      	str	r1, [r3, #4]
}
 8013428:	e7e4      	b.n	80133f4 <net_route_del+0x50>
			k_work_cancel_delayable(&route_lifetime_timer);
 801342a:	4823      	ldr	r0, [pc, #140]	; (80134b8 <net_route_del+0x114>)
 801342c:	f008 fe96 	bl	801c15c <k_work_cancel_delayable>
 8013430:	e7e5      	b.n	80133fe <net_route_del+0x5a>
Z_GENLIST_REMOVE(slist, snode)
 8013432:	b172      	cbz	r2, 8013452 <net_route_del+0xae>
	return node->next;
 8013434:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
 8013436:	6013      	str	r3, [r2, #0]
	return list->tail;
 8013438:	4b1e      	ldr	r3, [pc, #120]	; (80134b4 <net_route_del+0x110>)
 801343a:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 801343c:	429c      	cmp	r4, r3
 801343e:	d011      	beq.n	8013464 <net_route_del+0xc0>
	parent->next = child;
 8013440:	2300      	movs	r3, #0
 8013442:	6023      	str	r3, [r4, #0]

	nbr = net_route_get_nbr(route);
 8013444:	4620      	mov	r0, r4
 8013446:	f7ff fe61 	bl	801310c <net_route_get_nbr>
	if (!nbr) {
 801344a:	4605      	mov	r5, r0
 801344c:	b168      	cbz	r0, 801346a <net_route_del+0xc6>
	return list->head;
 801344e:	6864      	ldr	r4, [r4, #4]
 8013450:	e014      	b.n	801347c <net_route_del+0xd8>
	return node->next;
 8013452:	6822      	ldr	r2, [r4, #0]
	list->head = node;
 8013454:	4b17      	ldr	r3, [pc, #92]	; (80134b4 <net_route_del+0x110>)
 8013456:	601a      	str	r2, [r3, #0]
	return list->tail;
 8013458:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 801345a:	429c      	cmp	r4, r3
 801345c:	d1f0      	bne.n	8013440 <net_route_del+0x9c>
	list->tail = node;
 801345e:	4b15      	ldr	r3, [pc, #84]	; (80134b4 <net_route_del+0x110>)
 8013460:	605a      	str	r2, [r3, #4]
}
 8013462:	e7ed      	b.n	8013440 <net_route_del+0x9c>
	list->tail = node;
 8013464:	4b13      	ldr	r3, [pc, #76]	; (80134b4 <net_route_del+0x110>)
 8013466:	605a      	str	r2, [r3, #4]
}
 8013468:	e7ea      	b.n	8013440 <net_route_del+0x9c>
	return z_impl_k_mutex_unlock(mutex);
 801346a:	480f      	ldr	r0, [pc, #60]	; (80134a8 <net_route_del+0x104>)
 801346c:	f002 fae0 	bl	8015a30 <z_impl_k_mutex_unlock>
		k_mutex_unlock(&lock);
		return -ENOENT;
 8013470:	f06f 0001 	mvn.w	r0, #1
 8013474:	e013      	b.n	801349e <net_route_del+0xfa>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8013476:	b10c      	cbz	r4, 801347c <net_route_del+0xd8>
	return node->next;
 8013478:	6824      	ldr	r4, [r4, #0]
	}

	net_route_info("Deleted", route, &route->addr);

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
 801347a:	b14c      	cbz	r4, 8013490 <net_route_del+0xec>
 801347c:	b144      	cbz	r4, 8013490 <net_route_del+0xec>
		if (!nexthop_route->nbr) {
 801347e:	6860      	ldr	r0, [r4, #4]
 8013480:	2800      	cmp	r0, #0
 8013482:	d0f8      	beq.n	8013476 <net_route_del+0xd2>
			continue;
		}

		nbr_nexthop_put(nexthop_route->nbr);
 8013484:	f008 f8b7 	bl	801b5f6 <nbr_nexthop_put>
		release_nexthop_route(nexthop_route);
 8013488:	4620      	mov	r0, r4
 801348a:	f008 f8b9 	bl	801b600 <release_nexthop_route>
 801348e:	e7f2      	b.n	8013476 <net_route_del+0xd2>
	net_nbr_unref(nbr);
 8013490:	4628      	mov	r0, r5
 8013492:	f007 fd8a 	bl	801afaa <net_nbr_unref>
 8013496:	4804      	ldr	r0, [pc, #16]	; (80134a8 <net_route_del+0x104>)
 8013498:	f002 faca 	bl	8015a30 <z_impl_k_mutex_unlock>
	}

	nbr_free(nbr);

	k_mutex_unlock(&lock);
	return 0;
 801349c:	2000      	movs	r0, #0
}
 801349e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
 80134a0:	f06f 0015 	mvn.w	r0, #21
}
 80134a4:	4770      	bx	lr
 80134a6:	bf00      	nop
 80134a8:	200010a8 	.word	0x200010a8
 80134ac:	e060000c 	.word	0xe060000c
 80134b0:	200034dc 	.word	0x200034dc
 80134b4:	200034e4 	.word	0x200034e4
 80134b8:	20002a28 	.word	0x20002a28

080134bc <route_expired>:
{
 80134bc:	b508      	push	{r3, lr}
	sys_slist_find_and_remove(&active_route_lifetime_timers,
 80134be:	f100 0210 	add.w	r2, r0, #16
	return list->head;
 80134c2:	4b10      	ldr	r3, [pc, #64]	; (8013504 <route_expired+0x48>)
 80134c4:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80134c6:	2100      	movs	r1, #0
 80134c8:	b16b      	cbz	r3, 80134e6 <route_expired+0x2a>
 80134ca:	4293      	cmp	r3, r2
 80134cc:	d002      	beq.n	80134d4 <route_expired+0x18>
 80134ce:	4619      	mov	r1, r3
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	e7f9      	b.n	80134c8 <route_expired+0xc>
Z_GENLIST_REMOVE(slist, snode)
 80134d4:	b151      	cbz	r1, 80134ec <route_expired+0x30>
	return node->next;
 80134d6:	6903      	ldr	r3, [r0, #16]
	parent->next = child;
 80134d8:	600b      	str	r3, [r1, #0]
	return list->tail;
 80134da:	4b0a      	ldr	r3, [pc, #40]	; (8013504 <route_expired+0x48>)
 80134dc:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 80134de:	4293      	cmp	r3, r2
 80134e0:	d00d      	beq.n	80134fe <route_expired+0x42>
	parent->next = child;
 80134e2:	2300      	movs	r3, #0
 80134e4:	6103      	str	r3, [r0, #16]
	net_route_del(route);
 80134e6:	f7ff ff5d 	bl	80133a4 <net_route_del>
}
 80134ea:	bd08      	pop	{r3, pc}
	return node->next;
 80134ec:	6901      	ldr	r1, [r0, #16]
	list->head = node;
 80134ee:	4b05      	ldr	r3, [pc, #20]	; (8013504 <route_expired+0x48>)
 80134f0:	6019      	str	r1, [r3, #0]
	return list->tail;
 80134f2:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 80134f4:	4293      	cmp	r3, r2
 80134f6:	d1f4      	bne.n	80134e2 <route_expired+0x26>
	list->tail = node;
 80134f8:	4b02      	ldr	r3, [pc, #8]	; (8013504 <route_expired+0x48>)
 80134fa:	6059      	str	r1, [r3, #4]
}
 80134fc:	e7f1      	b.n	80134e2 <route_expired+0x26>
	list->tail = node;
 80134fe:	4b01      	ldr	r3, [pc, #4]	; (8013504 <route_expired+0x48>)
 8013500:	6059      	str	r1, [r3, #4]
}
 8013502:	e7ee      	b.n	80134e2 <route_expired+0x26>
 8013504:	200034dc 	.word	0x200034dc

08013508 <route_lifetime_timeout>:
{
 8013508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_uptime_ticks();
 801350a:	f009 f87d 	bl	801c608 <z_impl_k_uptime_ticks>
 801350e:	220a      	movs	r2, #10
 8013510:	2300      	movs	r3, #0
 8013512:	f7ed fb13 	bl	8000b3c <__aeabi_uldivmod>
	return (uint32_t)k_uptime_get();
 8013516:	4607      	mov	r7, r0
	return z_impl_k_mutex_lock(mutex, timeout);
 8013518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801351c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013520:	4820      	ldr	r0, [pc, #128]	; (80135a4 <route_lifetime_timeout+0x9c>)
 8013522:	f002 f9fb 	bl	801591c <z_impl_k_mutex_lock>
	return list->head;
 8013526:	4b20      	ldr	r3, [pc, #128]	; (80135a8 <route_lifetime_timeout+0xa0>)
 8013528:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_route_lifetime_timers,
 801352a:	b305      	cbz	r5, 801356e <route_lifetime_timeout+0x66>
 801352c:	3d10      	subs	r5, #16
 801352e:	d022      	beq.n	8013576 <route_lifetime_timeout+0x6e>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8013530:	f115 0410 	adds.w	r4, r5, #16
 8013534:	d01c      	beq.n	8013570 <route_lifetime_timeout+0x68>
	return node->next;
 8013536:	692c      	ldr	r4, [r5, #16]
 8013538:	b1d4      	cbz	r4, 8013570 <route_lifetime_timeout+0x68>
 801353a:	3c10      	subs	r4, #16
 801353c:	e018      	b.n	8013570 <route_lifetime_timeout+0x68>
			route_expired(current);
 801353e:	4628      	mov	r0, r5
 8013540:	f7ff ffbc 	bl	80134bc <route_expired>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_route_lifetime_timers,
 8013544:	b1cc      	cbz	r4, 801357a <route_lifetime_timeout+0x72>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8013546:	f114 0310 	adds.w	r3, r4, #16
 801354a:	d002      	beq.n	8013552 <route_lifetime_timeout+0x4a>
	return node->next;
 801354c:	6923      	ldr	r3, [r4, #16]
 801354e:	b103      	cbz	r3, 8013552 <route_lifetime_timeout+0x4a>
 8013550:	3b10      	subs	r3, #16
 8013552:	4625      	mov	r5, r4
 8013554:	461c      	mov	r4, r3
 8013556:	b195      	cbz	r5, 801357e <route_lifetime_timeout+0x76>
		uint32_t this_update = net_timeout_evaluate(timeout,
 8013558:	4639      	mov	r1, r7
 801355a:	f105 0010 	add.w	r0, r5, #16
 801355e:	f006 fa52 	bl	8019a06 <net_timeout_evaluate>
		if (this_update == 0U) {
 8013562:	2800      	cmp	r0, #0
 8013564:	d0eb      	beq.n	801353e <route_lifetime_timeout+0x36>
		if (this_update < next_update) {
 8013566:	4286      	cmp	r6, r0
 8013568:	d9ec      	bls.n	8013544 <route_lifetime_timeout+0x3c>
			next_update = this_update;
 801356a:	4606      	mov	r6, r0
 801356c:	e7ea      	b.n	8013544 <route_lifetime_timeout+0x3c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&active_route_lifetime_timers,
 801356e:	462c      	mov	r4, r5
 8013570:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8013574:	e7ef      	b.n	8013556 <route_lifetime_timeout+0x4e>
 8013576:	462c      	mov	r4, r5
 8013578:	e7fa      	b.n	8013570 <route_lifetime_timeout+0x68>
 801357a:	4623      	mov	r3, r4
 801357c:	e7e9      	b.n	8013552 <route_lifetime_timeout+0x4a>
	if (next_update != UINT32_MAX) {
 801357e:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8013582:	d103      	bne.n	801358c <route_lifetime_timeout+0x84>
	return z_impl_k_mutex_unlock(mutex);
 8013584:	4807      	ldr	r0, [pc, #28]	; (80135a4 <route_lifetime_timeout+0x9c>)
 8013586:	f002 fa53 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 801358a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return t * ((uint64_t)to_hz / from_hz);
 801358c:	00b0      	lsls	r0, r6, #2
 801358e:	0fb1      	lsrs	r1, r6, #30
 8013590:	1980      	adds	r0, r0, r6
 8013592:	f141 0100 	adc.w	r1, r1, #0
		k_work_reschedule(&route_lifetime_timer, K_MSEC(next_update));
 8013596:	1802      	adds	r2, r0, r0
 8013598:	eb41 0301 	adc.w	r3, r1, r1
 801359c:	4803      	ldr	r0, [pc, #12]	; (80135ac <route_lifetime_timeout+0xa4>)
 801359e:	f002 fcb9 	bl	8015f14 <k_work_reschedule>
 80135a2:	e7ef      	b.n	8013584 <route_lifetime_timeout+0x7c>
 80135a4:	200010a8 	.word	0x200010a8
 80135a8:	200034dc 	.word	0x200034dc
 80135ac:	20002a28 	.word	0x20002a28

080135b0 <net_route_del_by_nexthop>:

int net_route_del_by_nexthop(struct net_if *iface, struct in6_addr *nexthop)
{
 80135b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135b2:	4604      	mov	r4, r0
 80135b4:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 80135b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80135ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80135be:	4819      	ldr	r0, [pc, #100]	; (8013624 <net_route_del_by_nexthop+0x74>)
 80135c0:	f002 f9ac 	bl	801591c <z_impl_k_mutex_lock>
	NET_ASSERT(iface);
	NET_ASSERT(nexthop);

	k_mutex_lock(&lock, K_FOREVER);

	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
 80135c4:	4629      	mov	r1, r5
 80135c6:	4620      	mov	r0, r4
 80135c8:	f7fd ff94 	bl	80114f4 <net_ipv6_nbr_lookup>
 80135cc:	4604      	mov	r4, r0

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
 80135ce:	2500      	movs	r5, #0
	int count = 0, status = 0;
 80135d0:	462f      	mov	r7, r5
 80135d2:	462e      	mov	r6, r5
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
 80135d4:	e004      	b.n	80135e0 <net_route_del_by_nexthop+0x30>

		SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route,
					     node) {
			if (nexthop_route->nbr == nbr_nexthop) {
				/* This route contains this nexthop */
				ret = net_route_del(route);
 80135d6:	f7ff fee5 	bl	80133a4 <net_route_del>
				if (!ret) {
 80135da:	b9b8      	cbnz	r0, 801360c <net_route_del_by_nexthop+0x5c>
					count++;
 80135dc:	3601      	adds	r6, #1
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
 80135de:	3501      	adds	r5, #1
 80135e0:	2d07      	cmp	r5, #7
 80135e2:	dc15      	bgt.n	8013610 <net_route_del_by_nexthop+0x60>
	return (struct net_route_entry *)nbr->data;
 80135e4:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 80135e8:	4a0f      	ldr	r2, [pc, #60]	; (8013628 <net_route_del_by_nexthop+0x78>)
 80135ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80135ee:	68d8      	ldr	r0, [r3, #12]
		if (!route) {
 80135f0:	2800      	cmp	r0, #0
 80135f2:	d0f4      	beq.n	80135de <net_route_del_by_nexthop+0x2e>
	return list->head;
 80135f4:	6843      	ldr	r3, [r0, #4]
		SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route,
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d0f1      	beq.n	80135de <net_route_del_by_nexthop+0x2e>
			if (nexthop_route->nbr == nbr_nexthop) {
 80135fa:	685a      	ldr	r2, [r3, #4]
 80135fc:	42a2      	cmp	r2, r4
 80135fe:	d0ea      	beq.n	80135d6 <net_route_del_by_nexthop+0x26>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8013600:	2b00      	cmp	r3, #0
 8013602:	d0f8      	beq.n	80135f6 <net_route_del_by_nexthop+0x46>
	return node->next;
 8013604:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route,
 8013606:	2b00      	cmp	r3, #0
 8013608:	d1f5      	bne.n	80135f6 <net_route_del_by_nexthop+0x46>
 801360a:	e7e8      	b.n	80135de <net_route_del_by_nexthop+0x2e>
				} else {
					status = ret;
 801360c:	4607      	mov	r7, r0
 801360e:	e7e6      	b.n	80135de <net_route_del_by_nexthop+0x2e>
	return z_impl_k_mutex_unlock(mutex);
 8013610:	4804      	ldr	r0, [pc, #16]	; (8013624 <net_route_del_by_nexthop+0x74>)
 8013612:	f002 fa0d 	bl	8015a30 <z_impl_k_mutex_unlock>
		}
	}

	k_mutex_unlock(&lock);

	if (count) {
 8013616:	b90e      	cbnz	r6, 801361c <net_route_del_by_nexthop+0x6c>
		return count;
	} else if (status < 0) {
 8013618:	2f00      	cmp	r7, #0
 801361a:	db01      	blt.n	8013620 <net_route_del_by_nexthop+0x70>
		return status;
	}

	return 0;
}
 801361c:	4630      	mov	r0, r6
 801361e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return status;
 8013620:	463e      	mov	r6, r7
 8013622:	e7fb      	b.n	801361c <net_route_del_by_nexthop+0x6c>
 8013624:	200010a8 	.word	0x200010a8
 8013628:	20000b0c 	.word	0x20000b0c

0801362c <net_route_get_nexthop>:

	return status;
}

struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
 801362c:	b530      	push	{r4, r5, lr}
 801362e:	b089      	sub	sp, #36	; 0x24
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
 8013630:	4605      	mov	r5, r0
 8013632:	2800      	cmp	r0, #0
 8013634:	d042      	beq.n	80136bc <net_route_get_nexthop+0x90>
	return z_impl_k_mutex_lock(mutex, timeout);
 8013636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801363a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801363e:	4821      	ldr	r0, [pc, #132]	; (80136c4 <net_route_get_nexthop+0x98>)
 8013640:	f002 f96c 	bl	801591c <z_impl_k_mutex_lock>
	return list->head;
 8013644:	686d      	ldr	r5, [r5, #4]
 8013646:	e007      	b.n	8013658 <net_route_get_nexthop+0x2c>
			continue;
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
		if (ipv6_nbr_data) {
			addr = &ipv6_nbr_data->addr;
 8013648:	1d05      	adds	r5, r0, #4
	return z_impl_k_mutex_unlock(mutex);
 801364a:	481e      	ldr	r0, [pc, #120]	; (80136c4 <net_route_get_nexthop+0x98>)
 801364c:	f002 f9f0 	bl	8015a30 <z_impl_k_mutex_unlock>
			NET_ASSERT(addr);

			k_mutex_unlock(&lock);
			return addr;
 8013650:	e034      	b.n	80136bc <net_route_get_nexthop+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8013652:	b10d      	cbz	r5, 8013658 <net_route_get_nexthop+0x2c>
	return node->next;
 8013654:	682d      	ldr	r5, [r5, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
 8013656:	b36d      	cbz	r5, 80136b4 <net_route_get_nexthop+0x88>
 8013658:	b365      	cbz	r5, 80136b4 <net_route_get_nexthop+0x88>
		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
 801365a:	686b      	ldr	r3, [r5, #4]
 801365c:	785a      	ldrb	r2, [r3, #1]
 801365e:	2aff      	cmp	r2, #255	; 0xff
 8013660:	d0f7      	beq.n	8013652 <net_route_get_nexthop+0x26>
 8013662:	68d8      	ldr	r0, [r3, #12]
		if (ipv6_nbr_data) {
 8013664:	2800      	cmp	r0, #0
 8013666:	d1ef      	bne.n	8013648 <net_route_get_nexthop+0x1c>
		} else {
			NET_ERR("could not get neighbor data from next hop");
 8013668:	4b17      	ldr	r3, [pc, #92]	; (80136c8 <net_route_get_nexthop+0x9c>)
 801366a:	9306      	str	r3, [sp, #24]
 801366c:	2300      	movs	r3, #0
 801366e:	f8ad 3005 	strh.w	r3, [sp, #5]
 8013672:	f88d 3007 	strb.w	r3, [sp, #7]
 8013676:	2202      	movs	r2, #2
 8013678:	f88d 2004 	strb.w	r2, [sp, #4]
 801367c:	f88d 3006 	strb.w	r3, [sp, #6]
 8013680:	9a01      	ldr	r2, [sp, #4]
 8013682:	9205      	str	r2, [sp, #20]
 8013684:	f363 0400 	bfi	r4, r3, #0, #1
 8013688:	f363 0441 	bfi	r4, r3, #1, #1
 801368c:	f363 0482 	bfi	r4, r3, #2, #1
 8013690:	f363 04c5 	bfi	r4, r3, #3, #3
 8013694:	2201      	movs	r2, #1
 8013696:	f362 1488 	bfi	r4, r2, #6, #3
 801369a:	2208      	movs	r2, #8
 801369c:	f362 2452 	bfi	r4, r2, #9, #10
 80136a0:	f363 44de 	bfi	r4, r3, #19, #12
 80136a4:	f363 74df 	bfi	r4, r3, #31, #1
 80136a8:	4622      	mov	r2, r4
 80136aa:	4908      	ldr	r1, [pc, #32]	; (80136cc <net_route_get_nexthop+0xa0>)
 80136ac:	a802      	add	r0, sp, #8
 80136ae:	f004 fb50 	bl	8017d52 <z_log_msg2_finalize>
 80136b2:	e7ce      	b.n	8013652 <net_route_get_nexthop+0x26>
 80136b4:	4803      	ldr	r0, [pc, #12]	; (80136c4 <net_route_get_nexthop+0x98>)
 80136b6:	f002 f9bb 	bl	8015a30 <z_impl_k_mutex_unlock>
		}
	}

	k_mutex_unlock(&lock);
	return NULL;
 80136ba:	2500      	movs	r5, #0
}
 80136bc:	4628      	mov	r0, r5
 80136be:	b009      	add	sp, #36	; 0x24
 80136c0:	bd30      	pop	{r4, r5, pc}
 80136c2:	bf00      	nop
 80136c4:	200010a8 	.word	0x200010a8
 80136c8:	0801e640 	.word	0x0801e640
 80136cc:	0801d7b0 	.word	0x0801d7b0

080136d0 <net_route_add>:
{
 80136d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136d4:	b08e      	sub	sp, #56	; 0x38
 80136d6:	4605      	mov	r5, r0
 80136d8:	460e      	mov	r6, r1
 80136da:	4690      	mov	r8, r2
 80136dc:	461f      	mov	r7, r3
 80136de:	f89d 905c 	ldrb.w	r9, [sp, #92]	; 0x5c
	if (net_ipv6_addr_cmp(addr, net_ipv6_unspecified_address())) {
 80136e2:	f7fb ff63 	bl	800f5ac <net_ipv6_unspecified_address>
 80136e6:	4601      	mov	r1, r0
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 80136e8:	2210      	movs	r2, #16
 80136ea:	4630      	mov	r0, r6
 80136ec:	f009 f896 	bl	801c81c <memcmp>
 80136f0:	2800      	cmp	r0, #0
 80136f2:	f000 80f5 	beq.w	80138e0 <net_route_add+0x210>
	return z_impl_k_mutex_lock(mutex, timeout);
 80136f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80136fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80136fe:	4879      	ldr	r0, [pc, #484]	; (80138e4 <net_route_add+0x214>)
 8013700:	f002 f90c 	bl	801591c <z_impl_k_mutex_lock>
	nbr_nexthop = net_ipv6_nbr_lookup(iface, nexthop);
 8013704:	4639      	mov	r1, r7
 8013706:	4628      	mov	r0, r5
 8013708:	f7fd fef4 	bl	80114f4 <net_ipv6_nbr_lookup>
	if (!nbr_nexthop) {
 801370c:	4604      	mov	r4, r0
 801370e:	2800      	cmp	r0, #0
 8013710:	d067      	beq.n	80137e2 <net_route_add+0x112>
	nexthop_lladdr = net_nbr_get_lladdr(nbr_nexthop->idx);
 8013712:	7840      	ldrb	r0, [r0, #1]
 8013714:	f7fd fa32 	bl	8010b7c <net_nbr_get_lladdr>
	route = net_route_lookup(iface, addr);
 8013718:	4631      	mov	r1, r6
 801371a:	4628      	mov	r0, r5
 801371c:	f7ff fd1e 	bl	801315c <net_route_lookup>
	if (route) {
 8013720:	4604      	mov	r4, r0
 8013722:	b368      	cbz	r0, 8013780 <net_route_add+0xb0>
		nexthop_addr = net_route_get_nexthop(route);
 8013724:	f7ff ff82 	bl	801362c <net_route_get_nexthop>
		if (nexthop_addr && net_ipv6_addr_cmp(nexthop, nexthop_addr)) {
 8013728:	4601      	mov	r1, r0
 801372a:	b120      	cbz	r0, 8013736 <net_route_add+0x66>
 801372c:	2210      	movs	r2, #16
 801372e:	4638      	mov	r0, r7
 8013730:	f009 f874 	bl	801c81c <memcmp>
 8013734:	b1b0      	cbz	r0, 8013764 <net_route_add+0x94>
		if (route_preference_is_lower(route->preference, preference)) {
 8013736:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 801373a:	f003 0303 	and.w	r3, r3, #3
	if (new == NET_ROUTE_PREFERENCE_RESERVED || (new & 0xfc) != 0) {
 801373e:	f1b9 0f02 	cmp.w	r9, #2
 8013742:	f000 80c9 	beq.w	80138d8 <net_route_add+0x208>
 8013746:	f019 0ffc 	tst.w	r9, #252	; 0xfc
 801374a:	f040 80c7 	bne.w	80138dc <net_route_add+0x20c>
	old = (old + 1) & 0x3;
 801374e:	3301      	adds	r3, #1
 8013750:	f003 0303 	and.w	r3, r3, #3
	new = (new + 1) & 0x3;
 8013754:	f109 0201 	add.w	r2, r9, #1
 8013758:	f002 0203 	and.w	r2, r2, #3
		if (route_preference_is_lower(route->preference, preference)) {
 801375c:	4293      	cmp	r3, r2
 801375e:	d90c      	bls.n	801377a <net_route_add+0xaa>
			route = NULL;
 8013760:	2400      	movs	r4, #0
 8013762:	e03e      	b.n	80137e2 <net_route_add+0x112>
			net_route_update_lifetime(route, lifetime);
 8013764:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013766:	4620      	mov	r0, r4
 8013768:	f7ff fd98 	bl	801329c <net_route_update_lifetime>
			route->preference = preference;
 801376c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8013770:	f369 0301 	bfi	r3, r9, #0, #2
 8013774:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
			goto exit;
 8013778:	e033      	b.n	80137e2 <net_route_add+0x112>
		net_route_del(route);
 801377a:	4620      	mov	r0, r4
 801377c:	f7ff fe12 	bl	80133a4 <net_route_del>
	nbr = nbr_new(iface, addr, prefix_len);
 8013780:	4642      	mov	r2, r8
 8013782:	4631      	mov	r1, r6
 8013784:	4628      	mov	r0, r5
 8013786:	f7ff fc81 	bl	801308c <nbr_new>
	if (!nbr) {
 801378a:	4682      	mov	sl, r0
 801378c:	2800      	cmp	r0, #0
 801378e:	d02f      	beq.n	80137f0 <net_route_add+0x120>
	tmp = get_nexthop_route();
 8013790:	f7ff fc9e 	bl	80130d0 <get_nexthop_route>
	if (!tmp) {
 8013794:	4604      	mov	r4, r0
 8013796:	2800      	cmp	r0, #0
 8013798:	d077      	beq.n	801388a <net_route_add+0x1ba>
	return (struct net_route_nexthop *)nbr->data;
 801379a:	68c6      	ldr	r6, [r0, #12]
	return (struct net_route_entry *)nbr->data;
 801379c:	f8da 400c 	ldr.w	r4, [sl, #12]
	route->iface = iface;
 80137a0:	60e5      	str	r5, [r4, #12]
	route->preference = preference;
 80137a2:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80137a6:	f369 0301 	bfi	r3, r9, #0, #2
 80137aa:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	net_route_update_lifetime(route, lifetime);
 80137ae:	9916      	ldr	r1, [sp, #88]	; 0x58
 80137b0:	4620      	mov	r0, r4
 80137b2:	f7ff fd73 	bl	801329c <net_route_update_lifetime>
	return list->head;
 80137b6:	4b4c      	ldr	r3, [pc, #304]	; (80138e8 <net_route_add+0x218>)
 80137b8:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 80137ba:	6022      	str	r2, [r4, #0]
	list->head = node;
 80137bc:	601c      	str	r4, [r3, #0]
	return list->tail;
 80137be:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	f000 8086 	beq.w	80138d2 <net_route_add+0x202>
	tmp = nbr_nexthop_get(iface, nexthop);
 80137c6:	4639      	mov	r1, r7
 80137c8:	4628      	mov	r0, r5
 80137ca:	f007 ff0b 	bl	801b5e4 <nbr_nexthop_get>
	nexthop_route->nbr = tmp;
 80137ce:	6070      	str	r0, [r6, #4]
	parent->next = child;
 80137d0:	2200      	movs	r2, #0
 80137d2:	6032      	str	r2, [r6, #0]
	list->head = node;
 80137d4:	6066      	str	r6, [r4, #4]
	list->tail = node;
 80137d6:	60a6      	str	r6, [r4, #8]
 80137d8:	4613      	mov	r3, r2
 80137da:	4629      	mov	r1, r5
 80137dc:	4843      	ldr	r0, [pc, #268]	; (80138ec <net_route_add+0x21c>)
 80137de:	f7fc f80b 	bl	800f7f8 <net_mgmt_event_notify_with_info>
	return z_impl_k_mutex_unlock(mutex);
 80137e2:	4840      	ldr	r0, [pc, #256]	; (80138e4 <net_route_add+0x214>)
 80137e4:	f002 f924 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 80137e8:	4620      	mov	r0, r4
 80137ea:	b00e      	add	sp, #56	; 0x38
 80137ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return list->tail;
 80137f0:	4b3d      	ldr	r3, [pc, #244]	; (80138e8 <net_route_add+0x218>)
 80137f2:	6858      	ldr	r0, [r3, #4]
	return list->head;
 80137f4:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 80137f6:	b181      	cbz	r1, 801381a <net_route_add+0x14a>
 80137f8:	4288      	cmp	r0, r1
 80137fa:	d002      	beq.n	8013802 <net_route_add+0x132>
 80137fc:	468a      	mov	sl, r1
 80137fe:	6809      	ldr	r1, [r1, #0]
 8013800:	e7f9      	b.n	80137f6 <net_route_add+0x126>
Z_GENLIST_REMOVE(slist, snode)
 8013802:	f1ba 0f00 	cmp.w	sl, #0
 8013806:	d037      	beq.n	8013878 <net_route_add+0x1a8>
	return node->next;
 8013808:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
 801380a:	f8ca 3000 	str.w	r3, [sl]
	return list->tail;
 801380e:	4b36      	ldr	r3, [pc, #216]	; (80138e8 <net_route_add+0x218>)
 8013810:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8013812:	4298      	cmp	r0, r3
 8013814:	d035      	beq.n	8013882 <net_route_add+0x1b2>
	parent->next = child;
 8013816:	2300      	movs	r3, #0
 8013818:	6003      	str	r3, [r0, #0]
		net_route_del(route);
 801381a:	f7ff fdc3 	bl	80133a4 <net_route_del>
		nbr = nbr_new(iface, addr, prefix_len);
 801381e:	4642      	mov	r2, r8
 8013820:	4631      	mov	r1, r6
 8013822:	4628      	mov	r0, r5
 8013824:	f7ff fc32 	bl	801308c <nbr_new>
		if (!nbr) {
 8013828:	4682      	mov	sl, r0
 801382a:	2800      	cmp	r0, #0
 801382c:	d1b0      	bne.n	8013790 <net_route_add+0xc0>
			NET_ERR("Neighbor route alloc failed!");
 801382e:	4b30      	ldr	r3, [pc, #192]	; (80138f0 <net_route_add+0x220>)
 8013830:	9306      	str	r3, [sp, #24]
 8013832:	2300      	movs	r3, #0
 8013834:	f8ad 3005 	strh.w	r3, [sp, #5]
 8013838:	f88d 3007 	strb.w	r3, [sp, #7]
 801383c:	2202      	movs	r2, #2
 801383e:	f88d 2004 	strb.w	r2, [sp, #4]
 8013842:	f88d 3006 	strb.w	r3, [sp, #6]
 8013846:	9a01      	ldr	r2, [sp, #4]
 8013848:	9205      	str	r2, [sp, #20]
 801384a:	461a      	mov	r2, r3
 801384c:	f363 0200 	bfi	r2, r3, #0, #1
 8013850:	f363 0241 	bfi	r2, r3, #1, #1
 8013854:	f363 0282 	bfi	r2, r3, #2, #1
 8013858:	f363 02c5 	bfi	r2, r3, #3, #3
 801385c:	2101      	movs	r1, #1
 801385e:	f361 1288 	bfi	r2, r1, #6, #3
 8013862:	2108      	movs	r1, #8
 8013864:	f361 2252 	bfi	r2, r1, #9, #10
 8013868:	f3c2 0212 	ubfx	r2, r2, #0, #19
 801386c:	4921      	ldr	r1, [pc, #132]	; (80138f4 <net_route_add+0x224>)
 801386e:	a802      	add	r0, sp, #8
 8013870:	f004 fa6f 	bl	8017d52 <z_log_msg2_finalize>
			route = NULL;
 8013874:	4654      	mov	r4, sl
			goto exit;
 8013876:	e7b4      	b.n	80137e2 <net_route_add+0x112>
	return node->next;
 8013878:	6802      	ldr	r2, [r0, #0]
	list->head = node;
 801387a:	4b1b      	ldr	r3, [pc, #108]	; (80138e8 <net_route_add+0x218>)
 801387c:	601a      	str	r2, [r3, #0]
	list->tail = node;
 801387e:	605a      	str	r2, [r3, #4]
}
 8013880:	e7c9      	b.n	8013816 <net_route_add+0x146>
	list->tail = node;
 8013882:	4b19      	ldr	r3, [pc, #100]	; (80138e8 <net_route_add+0x218>)
 8013884:	f8c3 a004 	str.w	sl, [r3, #4]
}
 8013888:	e7c5      	b.n	8013816 <net_route_add+0x146>
		NET_ERR("No nexthop route available!");
 801388a:	4b1b      	ldr	r3, [pc, #108]	; (80138f8 <net_route_add+0x228>)
 801388c:	930c      	str	r3, [sp, #48]	; 0x30
 801388e:	2300      	movs	r3, #0
 8013890:	f8ad 3005 	strh.w	r3, [sp, #5]
 8013894:	f88d 3007 	strb.w	r3, [sp, #7]
 8013898:	2202      	movs	r2, #2
 801389a:	f88d 2004 	strb.w	r2, [sp, #4]
 801389e:	f88d 3006 	strb.w	r3, [sp, #6]
 80138a2:	9a01      	ldr	r2, [sp, #4]
 80138a4:	920b      	str	r2, [sp, #44]	; 0x2c
 80138a6:	461a      	mov	r2, r3
 80138a8:	f363 0200 	bfi	r2, r3, #0, #1
 80138ac:	f363 0241 	bfi	r2, r3, #1, #1
 80138b0:	f363 0282 	bfi	r2, r3, #2, #1
 80138b4:	f363 02c5 	bfi	r2, r3, #3, #3
 80138b8:	2101      	movs	r1, #1
 80138ba:	f361 1288 	bfi	r2, r1, #6, #3
 80138be:	2108      	movs	r1, #8
 80138c0:	f361 2252 	bfi	r2, r1, #9, #10
 80138c4:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80138c8:	490a      	ldr	r1, [pc, #40]	; (80138f4 <net_route_add+0x224>)
 80138ca:	a808      	add	r0, sp, #32
 80138cc:	f004 fa41 	bl	8017d52 <z_log_msg2_finalize>
		goto exit;
 80138d0:	e787      	b.n	80137e2 <net_route_add+0x112>
	list->tail = node;
 80138d2:	4b05      	ldr	r3, [pc, #20]	; (80138e8 <net_route_add+0x218>)
 80138d4:	605c      	str	r4, [r3, #4]
}
 80138d6:	e776      	b.n	80137c6 <net_route_add+0xf6>
			route = NULL;
 80138d8:	2400      	movs	r4, #0
 80138da:	e782      	b.n	80137e2 <net_route_add+0x112>
 80138dc:	2400      	movs	r4, #0
 80138de:	e780      	b.n	80137e2 <net_route_add+0x112>
		return NULL;
 80138e0:	2400      	movs	r4, #0
 80138e2:	e781      	b.n	80137e8 <net_route_add+0x118>
 80138e4:	200010a8 	.word	0x200010a8
 80138e8:	200034e4 	.word	0x200034e4
 80138ec:	e060000b 	.word	0xe060000b
 80138f0:	0801e66c 	.word	0x0801e66c
 80138f4:	0801d7b0 	.word	0x0801d7b0
 80138f8:	0801e68c 	.word	0x0801e68c

080138fc <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
 80138fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138fe:	4605      	mov	r5, r0
 8013900:	460c      	mov	r4, r1
 8013902:	4617      	mov	r7, r2
 8013904:	461e      	mov	r6, r3
	return z_impl_k_mutex_lock(mutex, timeout);
 8013906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801390a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801390e:	4815      	ldr	r0, [pc, #84]	; (8013964 <net_route_get_info+0x68>)
 8013910:	f002 f804 	bl	801591c <z_impl_k_mutex_lock>
	bool ret = false;

	k_mutex_lock(&lock, K_FOREVER);

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
 8013914:	4621      	mov	r1, r4
 8013916:	4628      	mov	r0, r5
 8013918:	f7fd fdec 	bl	80114f4 <net_ipv6_nbr_lookup>
 801391c:	b140      	cbz	r0, 8013930 <net_route_get_info+0x34>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
 801391e:	2300      	movs	r3, #0
 8013920:	603b      	str	r3, [r7, #0]
		*nexthop = dst;
 8013922:	6034      	str	r4, [r6, #0]

		ret = true;
 8013924:	2401      	movs	r4, #1
	return z_impl_k_mutex_unlock(mutex);
 8013926:	480f      	ldr	r0, [pc, #60]	; (8013964 <net_route_get_info+0x68>)
 8013928:	f002 f882 	bl	8015a30 <z_impl_k_mutex_unlock>
	}

exit:
	k_mutex_unlock(&lock);
	return ret;
}
 801392c:	4620      	mov	r0, r4
 801392e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*route = net_route_lookup(iface, dst);
 8013930:	4621      	mov	r1, r4
 8013932:	4628      	mov	r0, r5
 8013934:	f7ff fc12 	bl	801315c <net_route_lookup>
 8013938:	6038      	str	r0, [r7, #0]
	if (*route) {
 801393a:	b138      	cbz	r0, 801394c <net_route_get_info+0x50>
		*nexthop = net_route_get_nexthop(*route);
 801393c:	f7ff fe76 	bl	801362c <net_route_get_nexthop>
 8013940:	6030      	str	r0, [r6, #0]
		if (!*nexthop) {
 8013942:	b108      	cbz	r0, 8013948 <net_route_get_info+0x4c>
		ret = true;
 8013944:	2401      	movs	r4, #1
 8013946:	e7ee      	b.n	8013926 <net_route_get_info+0x2a>
	bool ret = false;
 8013948:	2400      	movs	r4, #0
 801394a:	e7ec      	b.n	8013926 <net_route_get_info+0x2a>
		router = net_if_ipv6_router_find_default(NULL, dst);
 801394c:	4621      	mov	r1, r4
 801394e:	2000      	movs	r0, #0
 8013950:	f005 ffb7 	bl	80198c2 <net_if_ipv6_router_find_default>
		if (!router) {
 8013954:	4603      	mov	r3, r0
 8013956:	b118      	cbz	r0, 8013960 <net_route_get_info+0x64>
		*nexthop = &router->address.in6_addr;
 8013958:	3308      	adds	r3, #8
 801395a:	6033      	str	r3, [r6, #0]
		ret = true;
 801395c:	2401      	movs	r4, #1
		goto exit;
 801395e:	e7e2      	b.n	8013926 <net_route_get_info+0x2a>
	bool ret = false;
 8013960:	2400      	movs	r4, #0
 8013962:	e7e0      	b.n	8013926 <net_route_get_info+0x2a>
 8013964:	200010a8 	.word	0x200010a8

08013968 <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
 8013968:	b5f0      	push	{r4, r5, r6, r7, lr}
 801396a:	b089      	sub	sp, #36	; 0x24
 801396c:	4604      	mov	r4, r0
 801396e:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
 8013970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013978:	483c      	ldr	r0, [pc, #240]	; (8013a6c <net_route_packet+0x104>)
 801397a:	f001 ffcf 	bl	801591c <z_impl_k_mutex_lock>
	struct net_nbr *nbr;
	int err;

	k_mutex_lock(&lock, K_FOREVER);

	nbr = net_ipv6_nbr_lookup(NULL, nexthop);
 801397e:	4629      	mov	r1, r5
 8013980:	2000      	movs	r0, #0
 8013982:	f7fd fdb7 	bl	80114f4 <net_ipv6_nbr_lookup>
	if (!nbr) {
 8013986:	2800      	cmp	r0, #0
 8013988:	d061      	beq.n	8013a4e <net_route_packet+0xe6>
 801398a:	4606      	mov	r6, r0
			log_strdup(net_sprint_ipv6_addr(nexthop)));
		err = -ENOENT;
		goto error;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
 801398c:	7840      	ldrb	r0, [r0, #1]
 801398e:	f7fd f8f5 	bl	8010b7c <net_nbr_get_lladdr>
	if (!lladdr) {
 8013992:	4605      	mov	r5, r0
 8013994:	2800      	cmp	r0, #0
 8013996:	d062      	beq.n	8013a5e <net_route_packet+0xf6>
#endif
#if defined(CONFIG_NET_L2_PPP)
		/* PPP does not populate the lladdr fields */
		if (net_if_l2(net_pkt_iface(pkt)) != &NET_L2_GET_NAME(PPP)) {
#endif
			if (!net_pkt_lladdr_src(pkt)->addr) {
 8013998:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801399a:	2800      	cmp	r0, #0
 801399c:	d062      	beq.n	8013a64 <net_route_packet+0xfc>

			/* Sanitycheck: If src and dst ll addresses are going
			 * to be same, then something went wrong in route
			 * lookup.
			 */
			if (!memcmp(net_pkt_lladdr_src(pkt)->addr, lladdr->addr,
 801399e:	1caf      	adds	r7, r5, #2
 80139a0:	786a      	ldrb	r2, [r5, #1]
 80139a2:	4639      	mov	r1, r7
 80139a4:	f008 ff3a 	bl	801c81c <memcmp>
 80139a8:	b358      	cbz	r0, 8013a02 <net_route_packet+0x9a>
	pkt->forwarding = forward;
 80139aa:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 80139ae:	f043 0301 	orr.w	r3, r3, #1
 80139b2:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
	return net_if_get_link_addr(pkt->iface);
 80139b6:	69a3      	ldr	r3, [r4, #24]
	return &iface->if_dev->link_addr;
 80139b8:	681a      	ldr	r2, [r3, #0]
	net_pkt_set_forwarding(pkt, true);

	/* Set the destination and source ll address in the packet.
	 * We set the destination address to be the nexthop recipient.
	 */
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
 80139ba:	6912      	ldr	r2, [r2, #16]
 80139bc:	6362      	str	r2, [r4, #52]	; 0x34
 80139be:	681a      	ldr	r2, [r3, #0]
	net_pkt_lladdr_src(pkt)->type = net_pkt_lladdr_if(pkt)->type;
 80139c0:	7d52      	ldrb	r2, [r2, #21]
 80139c2:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 80139c6:	681b      	ldr	r3, [r3, #0]
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
 80139c8:	7d1b      	ldrb	r3, [r3, #20]
 80139ca:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

	net_pkt_lladdr_dst(pkt)->addr = lladdr->addr;
 80139ce:	63e7      	str	r7, [r4, #60]	; 0x3c
	net_pkt_lladdr_dst(pkt)->type = lladdr->type;
 80139d0:	782b      	ldrb	r3, [r5, #0]
 80139d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	net_pkt_lladdr_dst(pkt)->len = lladdr->len;
 80139d6:	786b      	ldrb	r3, [r5, #1]
 80139d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

	net_pkt_set_iface(pkt, nbr->iface);
 80139dc:	68b3      	ldr	r3, [r6, #8]
	pkt->iface = iface;
 80139de:	61a3      	str	r3, [r4, #24]
	if (iface) {
 80139e0:	b13b      	cbz	r3, 80139f2 <net_route_packet+0x8a>
 80139e2:	681a      	ldr	r2, [r3, #0]
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
 80139e4:	7d52      	ldrb	r2, [r2, #21]
 80139e6:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 80139ea:	681b      	ldr	r3, [r3, #0]
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
 80139ec:	7d5b      	ldrb	r3, [r3, #21]
 80139ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	return z_impl_k_mutex_unlock(mutex);
 80139f2:	481e      	ldr	r0, [pc, #120]	; (8013a6c <net_route_packet+0x104>)
 80139f4:	f002 f81c 	bl	8015a30 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&lock);
	return net_send_data(pkt);
 80139f8:	4620      	mov	r0, r4
 80139fa:	f7f8 fdbb 	bl	800c574 <net_send_data>
 80139fe:	4604      	mov	r4, r0
 8013a00:	e02a      	b.n	8013a58 <net_route_packet+0xf0>
				NET_ERR("Src ll and Dst ll are same");
 8013a02:	4b1b      	ldr	r3, [pc, #108]	; (8013a70 <net_route_packet+0x108>)
 8013a04:	9306      	str	r3, [sp, #24]
 8013a06:	2300      	movs	r3, #0
 8013a08:	f8ad 3005 	strh.w	r3, [sp, #5]
 8013a0c:	f88d 3007 	strb.w	r3, [sp, #7]
 8013a10:	2202      	movs	r2, #2
 8013a12:	f88d 2004 	strb.w	r2, [sp, #4]
 8013a16:	f88d 3006 	strb.w	r3, [sp, #6]
 8013a1a:	9a01      	ldr	r2, [sp, #4]
 8013a1c:	9205      	str	r2, [sp, #20]
 8013a1e:	461a      	mov	r2, r3
 8013a20:	f363 0200 	bfi	r2, r3, #0, #1
 8013a24:	f363 0241 	bfi	r2, r3, #1, #1
 8013a28:	f363 0282 	bfi	r2, r3, #2, #1
 8013a2c:	f363 02c5 	bfi	r2, r3, #3, #3
 8013a30:	2101      	movs	r1, #1
 8013a32:	f361 1288 	bfi	r2, r1, #6, #3
 8013a36:	2108      	movs	r1, #8
 8013a38:	f361 2252 	bfi	r2, r1, #9, #10
 8013a3c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8013a40:	490c      	ldr	r1, [pc, #48]	; (8013a74 <net_route_packet+0x10c>)
 8013a42:	a802      	add	r0, sp, #8
 8013a44:	f004 f985 	bl	8017d52 <z_log_msg2_finalize>
				err = -EINVAL;
 8013a48:	f06f 0415 	mvn.w	r4, #21
				goto error;
 8013a4c:	e001      	b.n	8013a52 <net_route_packet+0xea>
		err = -ENOENT;
 8013a4e:	f06f 0401 	mvn.w	r4, #1
 8013a52:	4806      	ldr	r0, [pc, #24]	; (8013a6c <net_route_packet+0x104>)
 8013a54:	f001 ffec 	bl	8015a30 <z_impl_k_mutex_unlock>

error:
	k_mutex_unlock(&lock);
	return err;
}
 8013a58:	4620      	mov	r0, r4
 8013a5a:	b009      	add	sp, #36	; 0x24
 8013a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = -ESRCH;
 8013a5e:	f06f 0402 	mvn.w	r4, #2
 8013a62:	e7f6      	b.n	8013a52 <net_route_packet+0xea>
				err = -EINVAL;
 8013a64:	f06f 0415 	mvn.w	r4, #21
 8013a68:	e7f3      	b.n	8013a52 <net_route_packet+0xea>
 8013a6a:	bf00      	nop
 8013a6c:	200010a8 	.word	0x200010a8
 8013a70:	0801e6a8 	.word	0x0801e6a8
 8013a74:	0801d7b0 	.word	0x0801d7b0

08013a78 <net_route_init>:

	return net_send_data(pkt);
}

void net_route_init(void)
{
 8013a78:	b508      	push	{r3, lr}
		CONFIG_NET_MAX_ROUTES, sizeof(net_route_entries_pool));

	NET_DBG("Allocated %d nexthop entries (%zu bytes)",
		CONFIG_NET_MAX_NEXTHOPS, sizeof(net_route_nexthop_pool));

	k_work_init_delayable(&route_lifetime_timer, route_lifetime_timeout);
 8013a7a:	4902      	ldr	r1, [pc, #8]	; (8013a84 <net_route_init+0xc>)
 8013a7c:	4802      	ldr	r0, [pc, #8]	; (8013a88 <net_route_init+0x10>)
 8013a7e:	f008 fb3b 	bl	801c0f8 <k_work_init_delayable>
}
 8013a82:	bd08      	pop	{r3, pc}
 8013a84:	08013509 	.word	0x08013509
 8013a88:	20002a28 	.word	0x20002a28

08013a8c <net_conn_input>:

enum net_verdict net_conn_input(struct net_pkt *pkt,
				union net_ip_header *ip_hdr,
				uint8_t proto,
				union net_proto_header *proto_hdr)
{
 8013a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a90:	b089      	sub	sp, #36	; 0x24
 8013a92:	4606      	mov	r6, r0
 8013a94:	460f      	mov	r7, r1
 8013a96:	4615      	mov	r5, r2
 8013a98:	9303      	str	r3, [sp, #12]
	return pkt->iface;
 8013a9a:	6983      	ldr	r3, [r0, #24]
 8013a9c:	9305      	str	r3, [sp, #20]
	struct net_conn *conn;
	enum net_verdict ret;
	uint16_t src_port;
	uint16_t dst_port;

	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
 8013a9e:	2a11      	cmp	r2, #17
 8013aa0:	d029      	beq.n	8013af6 <net_conn_input+0x6a>
		src_port = proto_hdr->udp->src_port;
		dst_port = proto_hdr->udp->dst_port;
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
 8013aa2:	2a06      	cmp	r2, #6
 8013aa4:	f040 818c 	bne.w	8013dc0 <net_conn_input+0x334>
		if (proto_hdr->tcp == NULL) {
 8013aa8:	9b03      	ldr	r3, [sp, #12]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	f000 818b 	beq.w	8013dc8 <net_conn_input+0x33c>
			return NET_DROP;
		}

		src_port = proto_hdr->tcp->src_port;
 8013ab2:	f8b3 9000 	ldrh.w	r9, [r3]
		dst_port = proto_hdr->tcp->dst_port;
 8013ab6:	f8b3 b002 	ldrh.w	fp, [r3, #2]
	} else {
		NET_DBG("No suitable protocol handler configured");
		return NET_DROP;
	}

	if (!conn_are_end_points_valid(pkt, ip_hdr, src_port, dst_port)) {
 8013aba:	465b      	mov	r3, fp
 8013abc:	464a      	mov	r2, r9
 8013abe:	4639      	mov	r1, r7
 8013ac0:	4630      	mov	r0, r6
 8013ac2:	f007 fe0b 	bl	801b6dc <conn_are_end_points_valid>
 8013ac6:	9002      	str	r0, [sp, #8]
 8013ac8:	2800      	cmp	r0, #0
 8013aca:	f000 817f 	beq.w	8013dcc <net_conn_input+0x340>
	return pkt->family;
 8013ace:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
 8013ad2:	f3c3 0342 	ubfx	r3, r3, #1, #3
		ntohs(src_port), ntohs(dst_port), net_pkt_family(pkt));

	/* If we receive a packet with multicast destination address, we might
	 * need to deliver the packet to multiple recipients.
	 */
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
 8013ad6:	2b01      	cmp	r3, #1
 8013ad8:	d014      	beq.n	8013b04 <net_conn_input+0x78>
			is_mcast_pkt = true;
		} else if (net_if_ipv4_is_addr_bcast(
				pkt_iface, (struct in_addr *)ip_hdr->ipv4->dst)) {
			is_bcast_pkt = true;
		}
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
 8013ada:	2b02      	cmp	r3, #2
 8013adc:	d02f      	beq.n	8013b3e <net_conn_input+0xb2>
	bool is_bcast_pkt = false;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	9307      	str	r3, [sp, #28]
	bool is_mcast_pkt = false, mcast_pkt_delivered = false;
 8013ae2:	9302      	str	r3, [sp, #8]
	return list->head;
 8013ae4:	4ba8      	ldr	r3, [pc, #672]	; (8013d88 <net_conn_input+0x2fc>)
 8013ae6:	681c      	ldr	r4, [r3, #0]
 8013ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013aec:	9304      	str	r3, [sp, #16]
 8013aee:	2300      	movs	r3, #0
 8013af0:	9306      	str	r3, [sp, #24]
 8013af2:	4698      	mov	r8, r3
 8013af4:	e03b      	b.n	8013b6e <net_conn_input+0xe2>
		src_port = proto_hdr->udp->src_port;
 8013af6:	9b03      	ldr	r3, [sp, #12]
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	f8b3 9000 	ldrh.w	r9, [r3]
		dst_port = proto_hdr->udp->dst_port;
 8013afe:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 8013b02:	e7da      	b.n	8013aba <net_conn_input+0x2e>
		if (net_ipv4_is_addr_mcast((struct in_addr *)ip_hdr->ipv4->dst)) {
 8013b04:	6839      	ldr	r1, [r7, #0]
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
 8013b06:	690a      	ldr	r2, [r1, #16]
 8013b08:	0a13      	lsrs	r3, r2, #8
 8013b0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013b0e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8013b12:	0210      	lsls	r0, r2, #8
 8013b14:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 8013b18:	4303      	orrs	r3, r0
 8013b1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8013b1e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013b22:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8013b26:	d102      	bne.n	8013b2e <net_conn_input+0xa2>
	bool is_bcast_pkt = false;
 8013b28:	2300      	movs	r3, #0
 8013b2a:	9307      	str	r3, [sp, #28]
 8013b2c:	e7da      	b.n	8013ae4 <net_conn_input+0x58>
		} else if (net_if_ipv4_is_addr_bcast(
 8013b2e:	3110      	adds	r1, #16
 8013b30:	9805      	ldr	r0, [sp, #20]
 8013b32:	f7fa ff85 	bl	800ea40 <net_if_ipv4_is_addr_bcast>
 8013b36:	9007      	str	r0, [sp, #28]
 8013b38:	b948      	cbnz	r0, 8013b4e <net_conn_input+0xc2>
	bool is_mcast_pkt = false, mcast_pkt_delivered = false;
 8013b3a:	9002      	str	r0, [sp, #8]
 8013b3c:	e7d2      	b.n	8013ae4 <net_conn_input+0x58>
					   net_pkt_family(pkt) == AF_INET6) {
		if (net_ipv6_is_addr_mcast((struct in6_addr *)ip_hdr->ipv6->dst)) {
 8013b3e:	683b      	ldr	r3, [r7, #0]
	return addr->s6_addr[0] == 0xFF;
 8013b40:	7e1b      	ldrb	r3, [r3, #24]
 8013b42:	2bff      	cmp	r3, #255	; 0xff
 8013b44:	d006      	beq.n	8013b54 <net_conn_input+0xc8>
	bool is_bcast_pkt = false;
 8013b46:	2300      	movs	r3, #0
 8013b48:	9307      	str	r3, [sp, #28]
	bool is_mcast_pkt = false, mcast_pkt_delivered = false;
 8013b4a:	9302      	str	r3, [sp, #8]
 8013b4c:	e7ca      	b.n	8013ae4 <net_conn_input+0x58>
 8013b4e:	2300      	movs	r3, #0
 8013b50:	9302      	str	r3, [sp, #8]
 8013b52:	e7c7      	b.n	8013ae4 <net_conn_input+0x58>
	bool is_bcast_pkt = false;
 8013b54:	2300      	movs	r3, #0
 8013b56:	9307      	str	r3, [sp, #28]
 8013b58:	e7c4      	b.n	8013ae4 <net_conn_input+0x58>
	return pkt->iface;
 8013b5a:	f8d6 a018 	ldr.w	sl, [r6, #24]
 8013b5e:	f993 0072 	ldrsb.w	r0, [r3, #114]	; 0x72
 8013b62:	f7f9 fc13 	bl	800d38c <z_impl_net_if_get_by_index>
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
		if (conn->context != NULL &&
		    net_context_is_bound_to_iface(conn->context) &&
 8013b66:	4582      	cmp	sl, r0
 8013b68:	d00b      	beq.n	8013b82 <net_conn_input+0xf6>
Z_GENLIST_PEEK_NEXT(slist, snode)
 8013b6a:	b104      	cbz	r4, 8013b6e <net_conn_input+0xe2>
	return node->next;
 8013b6c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn_used, conn, node) {
 8013b6e:	2c00      	cmp	r4, #0
 8013b70:	f000 809e 	beq.w	8013cb0 <net_conn_input+0x224>
		if (conn->context != NULL &&
 8013b74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013b76:	b123      	cbz	r3, 8013b82 <net_conn_input+0xf6>
	return context->flags & NET_CONTEXT_BOUND_TO_IFACE;
 8013b78:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 8013b7c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8013b80:	d1eb      	bne.n	8013b5a <net_conn_input+0xce>
			if ((conn->proto != proto) && (proto != ETH_P_ALL) &&
				(proto != IPPROTO_RAW)) {
				continue;
			}
		} else {
			if ((conn->proto != proto)) {
 8013b82:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8013b86:	b2ab      	uxth	r3, r5
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	d1ee      	bne.n	8013b6a <net_conn_input+0xde>
				continue;
			}
		}

		if (conn->family != AF_UNSPEC &&
 8013b8c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8013b90:	b12b      	cbz	r3, 8013b9e <net_conn_input+0x112>
	return pkt->family;
 8013b92:	f896 204b 	ldrb.w	r2, [r6, #75]	; 0x4b
 8013b96:	f3c2 0242 	ubfx	r2, r2, #1, #3
 8013b9a:	4293      	cmp	r3, r2
 8013b9c:	d1e5      	bne.n	8013b6a <net_conn_input+0xde>
			}
		}

		if (IS_ENABLED(CONFIG_NET_UDP) ||
		    IS_ENABLED(CONFIG_NET_TCP)) {
			if (net_sin(&conn->remote_addr)->sin_port) {
 8013b9e:	88e3      	ldrh	r3, [r4, #6]
 8013ba0:	b10b      	cbz	r3, 8013ba6 <net_conn_input+0x11a>
				if (net_sin(&conn->remote_addr)->sin_port !=
 8013ba2:	454b      	cmp	r3, r9
 8013ba4:	d1e1      	bne.n	8013b6a <net_conn_input+0xde>
				    src_port) {
					continue;
				}
			}

			if (net_sin(&conn->local_addr)->sin_port) {
 8013ba6:	8be3      	ldrh	r3, [r4, #30]
 8013ba8:	b10b      	cbz	r3, 8013bae <net_conn_input+0x122>
				if (net_sin(&conn->local_addr)->sin_port !=
 8013baa:	455b      	cmp	r3, fp
 8013bac:	d1dd      	bne.n	8013b6a <net_conn_input+0xde>
				    dst_port) {
					continue;
				}
			}

			if (conn->flags & NET_CONN_REMOTE_ADDR_SET) {
 8013bae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013bb2:	f013 0f02 	tst.w	r3, #2
 8013bb6:	d119      	bne.n	8013bec <net_conn_input+0x160>
						   true)) {
					continue;
				}
			}

			if (conn->flags & NET_CONN_LOCAL_ADDR_SET) {
 8013bb8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013bbc:	f013 0f04 	tst.w	r3, #4
 8013bc0:	d11d      	bne.n	8013bfe <net_conn_input+0x172>

			/* If we have an existing best_match, and that one
			 * specifies a remote port, then we've matched to a
			 * LISTENING connection that should not override.
			 */
			if (best_match != NULL &&
 8013bc2:	f1b8 0f00 	cmp.w	r8, #0
 8013bc6:	d004      	beq.n	8013bd2 <net_conn_input+0x146>
			    best_match->flags & NET_CONN_REMOTE_PORT_SPEC) {
 8013bc8:	f898 3043 	ldrb.w	r3, [r8, #67]	; 0x43
			if (best_match != NULL &&
 8013bcc:	f013 0f08 	tst.w	r3, #8
 8013bd0:	d1cb      	bne.n	8013b6a <net_conn_input+0xde>
				continue;
			}

			if (best_rank < NET_CONN_RANK(conn->flags)) {
 8013bd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013bd6:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8013bda:	9a04      	ldr	r2, [sp, #16]
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	dac4      	bge.n	8013b6a <net_conn_input+0xde>
				struct net_pkt *mcast_pkt;

				if (!is_mcast_pkt) {
 8013be0:	9a02      	ldr	r2, [sp, #8]
 8013be2:	b9b2      	cbnz	r2, 8013c12 <net_conn_input+0x186>
					best_rank = NET_CONN_RANK(conn->flags);
 8013be4:	b21b      	sxth	r3, r3
 8013be6:	9304      	str	r3, [sp, #16]
					best_match = conn;
 8013be8:	46a0      	mov	r8, r4
 8013bea:	e7be      	b.n	8013b6a <net_conn_input+0xde>
				if (!conn_addr_cmp(pkt, ip_hdr,
 8013bec:	2301      	movs	r3, #1
 8013bee:	1d22      	adds	r2, r4, #4
 8013bf0:	4639      	mov	r1, r7
 8013bf2:	4630      	mov	r0, r6
 8013bf4:	f007 fd28 	bl	801b648 <conn_addr_cmp>
 8013bf8:	2800      	cmp	r0, #0
 8013bfa:	d1dd      	bne.n	8013bb8 <net_conn_input+0x12c>
 8013bfc:	e7b5      	b.n	8013b6a <net_conn_input+0xde>
				if (!conn_addr_cmp(pkt, ip_hdr,
 8013bfe:	2300      	movs	r3, #0
 8013c00:	f104 021c 	add.w	r2, r4, #28
 8013c04:	4639      	mov	r1, r7
 8013c06:	4630      	mov	r0, r6
 8013c08:	f007 fd1e 	bl	801b648 <conn_addr_cmp>
 8013c0c:	2800      	cmp	r0, #0
 8013c0e:	d1d8      	bne.n	8013bc2 <net_conn_input+0x136>
 8013c10:	e7ab      	b.n	8013b6a <net_conn_input+0xde>
				 */

				NET_DBG("[%p] mcast match found cb %p ud %p",
					conn, conn->cb,	conn->user_data);

				mcast_pkt = net_pkt_clone(pkt, CLONE_TIMEOUT);
 8013c12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013c16:	2300      	movs	r3, #0
 8013c18:	4630      	mov	r0, r6
 8013c1a:	f006 fd48 	bl	801a6ae <net_pkt_clone>
				if (!mcast_pkt) {
 8013c1e:	4601      	mov	r1, r0
 8013c20:	9006      	str	r0, [sp, #24]
 8013c22:	2800      	cmp	r0, #0
 8013c24:	f000 8091 	beq.w	8013d4a <net_conn_input+0x2be>
					goto drop;
				}

				if (conn->cb(conn, mcast_pkt, ip_hdr,
 8013c28:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
 8013c2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013c2e:	9300      	str	r3, [sp, #0]
 8013c30:	9b03      	ldr	r3, [sp, #12]
 8013c32:	463a      	mov	r2, r7
 8013c34:	4620      	mov	r0, r4
 8013c36:	47d0      	blx	sl
 8013c38:	2802      	cmp	r0, #2
 8013c3a:	d00c      	beq.n	8013c56 <net_conn_input+0x1ca>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
 8013c3c:	2d11      	cmp	r5, #17
 8013c3e:	d02a      	beq.n	8013c96 <net_conn_input+0x20a>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
 8013c40:	2d06      	cmp	r5, #6
 8013c42:	d10f      	bne.n	8013c64 <net_conn_input+0x1d8>
	UPDATE_STAT(iface, stats.tcp.recv++);
 8013c44:	4a51      	ldr	r2, [pc, #324]	; (8013d8c <net_conn_input+0x300>)
 8013c46:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8013c48:	3301      	adds	r3, #1
 8013c4a:	6693      	str	r3, [r2, #104]	; 0x68
 8013c4c:	9a05      	ldr	r2, [sp, #20]
 8013c4e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8013c50:	3301      	adds	r3, #1
 8013c52:	6713      	str	r3, [r2, #112]	; 0x70
}
 8013c54:	e006      	b.n	8013c64 <net_conn_input+0x1d8>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
 8013c56:	2d11      	cmp	r5, #17
 8013c58:	d007      	beq.n	8013c6a <net_conn_input+0x1de>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
 8013c5a:	2d06      	cmp	r5, #6
 8013c5c:	d012      	beq.n	8013c84 <net_conn_input+0x1f8>
					     proto_hdr, conn->user_data) ==
								NET_DROP) {
					net_stats_update_per_proto_drop(
							pkt_iface, proto);
					net_pkt_unref(mcast_pkt);
 8013c5e:	9806      	ldr	r0, [sp, #24]
 8013c60:	f006 fb9a 	bl	801a398 <net_pkt_unref>
				} else {
					net_stats_update_per_proto_recv(
						pkt_iface, proto);
				}

				mcast_pkt_delivered = true;
 8013c64:	9b02      	ldr	r3, [sp, #8]
 8013c66:	9306      	str	r3, [sp, #24]
 8013c68:	e77f      	b.n	8013b6a <net_conn_input+0xde>
	UPDATE_STAT(iface, stats.udp.drop++);
 8013c6a:	4a48      	ldr	r2, [pc, #288]	; (8013d8c <net_conn_input+0x300>)
 8013c6c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8013c70:	3301      	adds	r3, #1
 8013c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013c76:	9a05      	ldr	r2, [sp, #20]
 8013c78:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8013c7c:	3301      	adds	r3, #1
 8013c7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8013c82:	e7ec      	b.n	8013c5e <net_conn_input+0x1d2>
	UPDATE_STAT(iface, stats.tcp.drop++);
 8013c84:	4a41      	ldr	r2, [pc, #260]	; (8013d8c <net_conn_input+0x300>)
 8013c86:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8013c88:	3301      	adds	r3, #1
 8013c8a:	6653      	str	r3, [r2, #100]	; 0x64
 8013c8c:	9a05      	ldr	r2, [sp, #20]
 8013c8e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8013c90:	3301      	adds	r3, #1
 8013c92:	66d3      	str	r3, [r2, #108]	; 0x6c
}
 8013c94:	e7e3      	b.n	8013c5e <net_conn_input+0x1d2>
	UPDATE_STAT(iface, stats.udp.recv++);
 8013c96:	4a3d      	ldr	r2, [pc, #244]	; (8013d8c <net_conn_input+0x300>)
 8013c98:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8013c9c:	3301      	adds	r3, #1
 8013c9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8013ca2:	9a05      	ldr	r2, [sp, #20]
 8013ca4:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8013ca8:	3301      	adds	r3, #1
 8013caa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8013cae:	e7d9      	b.n	8013c64 <net_conn_input+0x1d8>
			best_rank = 0;
			best_match = conn;
		}
	}

	if ((is_mcast_pkt && mcast_pkt_delivered) ||
 8013cb0:	9b02      	ldr	r3, [sp, #8]
 8013cb2:	b10b      	cbz	r3, 8013cb8 <net_conn_input+0x22c>
 8013cb4:	9b06      	ldr	r3, [sp, #24]
 8013cb6:	b9c3      	cbnz	r3, 8013cea <net_conn_input+0x25e>
 8013cb8:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
 8013cbc:	f3c3 0342 	ubfx	r3, r3, #1, #3
			return NET_OK;
		}
	}

	conn = best_match;
	if (conn) {
 8013cc0:	f1b8 0f00 	cmp.w	r8, #0
 8013cc4:	d02c      	beq.n	8013d20 <net_conn_input+0x294>
		NET_DBG("[%p] match found cb %p ud %p rank 0x%02x",
			conn, conn->cb, conn->user_data, conn->flags);

		if (conn->cb(conn, pkt, ip_hdr, proto_hdr,
 8013cc6:	f8d8 4034 	ldr.w	r4, [r8, #52]	; 0x34
 8013cca:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8013cce:	9300      	str	r3, [sp, #0]
 8013cd0:	9b03      	ldr	r3, [sp, #12]
 8013cd2:	463a      	mov	r2, r7
 8013cd4:	4631      	mov	r1, r6
 8013cd6:	4640      	mov	r0, r8
 8013cd8:	47a0      	blx	r4
 8013cda:	2802      	cmp	r0, #2
 8013cdc:	d035      	beq.n	8013d4a <net_conn_input+0x2be>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
 8013cde:	2d11      	cmp	r5, #17
 8013ce0:	d008      	beq.n	8013cf4 <net_conn_input+0x268>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
 8013ce2:	2d06      	cmp	r5, #6
 8013ce4:	d013      	beq.n	8013d0e <net_conn_input+0x282>
			goto drop;
		}

		net_stats_update_per_proto_recv(pkt_iface, proto);

		return NET_OK;
 8013ce6:	2000      	movs	r0, #0
 8013ce8:	e06b      	b.n	8013dc2 <net_conn_input+0x336>
			net_pkt_unref(pkt);
 8013cea:	4630      	mov	r0, r6
 8013cec:	f006 fb54 	bl	801a398 <net_pkt_unref>
			return NET_OK;
 8013cf0:	2000      	movs	r0, #0
 8013cf2:	e066      	b.n	8013dc2 <net_conn_input+0x336>
	UPDATE_STAT(iface, stats.udp.recv++);
 8013cf4:	4a25      	ldr	r2, [pc, #148]	; (8013d8c <net_conn_input+0x300>)
 8013cf6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8013cfa:	3301      	adds	r3, #1
 8013cfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8013d00:	9a05      	ldr	r2, [sp, #20]
 8013d02:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8013d06:	3301      	adds	r3, #1
 8013d08:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8013d0c:	e7eb      	b.n	8013ce6 <net_conn_input+0x25a>
	UPDATE_STAT(iface, stats.tcp.recv++);
 8013d0e:	4a1f      	ldr	r2, [pc, #124]	; (8013d8c <net_conn_input+0x300>)
 8013d10:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8013d12:	3301      	adds	r3, #1
 8013d14:	6693      	str	r3, [r2, #104]	; 0x68
 8013d16:	9a05      	ldr	r2, [sp, #20]
 8013d18:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8013d1a:	3301      	adds	r3, #1
 8013d1c:	6713      	str	r3, [r2, #112]	; 0x70
}
 8013d1e:	e7e2      	b.n	8013ce6 <net_conn_input+0x25a>
	NET_DBG("No match found.");

	/* Do not send ICMP error for Packet socket as that makes no
	 * sense here.
	 */
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 8013d20:	2b02      	cmp	r3, #2
 8013d22:	d018      	beq.n	8013d56 <net_conn_input+0x2ca>
	    net_pkt_family(pkt) == AF_INET6 && is_mcast_pkt) {
		;
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8013d24:	2b01      	cmp	r3, #1
 8013d26:	d103      	bne.n	8013d30 <net_conn_input+0x2a4>
		   net_pkt_family(pkt) == AF_INET &&
 8013d28:	9b02      	ldr	r3, [sp, #8]
 8013d2a:	b973      	cbnz	r3, 8013d4a <net_conn_input+0x2be>
		   (is_mcast_pkt || is_bcast_pkt)) {
 8013d2c:	9b07      	ldr	r3, [sp, #28]
 8013d2e:	b963      	cbnz	r3, 8013d4a <net_conn_input+0x2be>
 8013d30:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
 8013d34:	f3c3 0342 	ubfx	r3, r3, #1, #3
	if (IS_ENABLED(CONFIG_NET_IPV6) && net_pkt_family(pkt) == AF_INET6) {
 8013d38:	2b02      	cmp	r3, #2
 8013d3a:	d010      	beq.n	8013d5e <net_conn_input+0x2d2>
		net_icmpv4_send_error(pkt, NET_ICMPV4_DST_UNREACH,
 8013d3c:	2203      	movs	r2, #3
 8013d3e:	4611      	mov	r1, r2
 8013d40:	4630      	mov	r0, r6
 8013d42:	f7fc f9ad 	bl	80100a0 <net_icmpv4_send_error>
		    net_pkt_family(pkt) == AF_PACKET) {
		;
	} else {
		conn_send_icmp_error(pkt);

		if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
 8013d46:	2d06      	cmp	r5, #6
 8013d48:	d010      	beq.n	8013d6c <net_conn_input+0x2e0>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
 8013d4a:	2d11      	cmp	r5, #17
 8013d4c:	d020      	beq.n	8013d90 <net_conn_input+0x304>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
 8013d4e:	2d06      	cmp	r5, #6
 8013d50:	d02c      	beq.n	8013dac <net_conn_input+0x320>
	}

drop:
	net_stats_update_per_proto_drop(pkt_iface, proto);

	return NET_DROP;
 8013d52:	2002      	movs	r0, #2
 8013d54:	e035      	b.n	8013dc2 <net_conn_input+0x336>
	    net_pkt_family(pkt) == AF_INET6 && is_mcast_pkt) {
 8013d56:	9a02      	ldr	r2, [sp, #8]
 8013d58:	2a00      	cmp	r2, #0
 8013d5a:	d1f6      	bne.n	8013d4a <net_conn_input+0x2be>
 8013d5c:	e7e2      	b.n	8013d24 <net_conn_input+0x298>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
 8013d5e:	2300      	movs	r3, #0
 8013d60:	2204      	movs	r2, #4
 8013d62:	2101      	movs	r1, #1
 8013d64:	4630      	mov	r0, r6
 8013d66:	f7fc fd3f 	bl	80107e8 <net_icmpv6_send_error>
 8013d6a:	e7ec      	b.n	8013d46 <net_conn_input+0x2ba>
	UPDATE_STAT(iface, stats.tcp.connrst++);
 8013d6c:	4a07      	ldr	r2, [pc, #28]	; (8013d8c <net_conn_input+0x300>)
 8013d6e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8013d72:	3301      	adds	r3, #1
 8013d74:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8013d78:	9a05      	ldr	r2, [sp, #20]
 8013d7a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8013d7e:	3301      	adds	r3, #1
 8013d80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8013d84:	e7e1      	b.n	8013d4a <net_conn_input+0x2be>
 8013d86:	bf00      	nop
 8013d88:	200034f4 	.word	0x200034f4
 8013d8c:	20002a58 	.word	0x20002a58
	UPDATE_STAT(iface, stats.udp.drop++);
 8013d90:	4a0f      	ldr	r2, [pc, #60]	; (8013dd0 <net_conn_input+0x344>)
 8013d92:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8013d96:	3301      	adds	r3, #1
 8013d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8013d9c:	9a05      	ldr	r2, [sp, #20]
 8013d9e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8013da2:	3301      	adds	r3, #1
 8013da4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	return NET_DROP;
 8013da8:	2002      	movs	r0, #2
}
 8013daa:	e00a      	b.n	8013dc2 <net_conn_input+0x336>
	UPDATE_STAT(iface, stats.tcp.drop++);
 8013dac:	4a08      	ldr	r2, [pc, #32]	; (8013dd0 <net_conn_input+0x344>)
 8013dae:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8013db0:	3301      	adds	r3, #1
 8013db2:	6653      	str	r3, [r2, #100]	; 0x64
 8013db4:	9a05      	ldr	r2, [sp, #20]
 8013db6:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8013db8:	3301      	adds	r3, #1
 8013dba:	66d3      	str	r3, [r2, #108]	; 0x6c
 8013dbc:	2002      	movs	r0, #2
}
 8013dbe:	e000      	b.n	8013dc2 <net_conn_input+0x336>
		return NET_DROP;
 8013dc0:	2002      	movs	r0, #2
}
 8013dc2:	b009      	add	sp, #36	; 0x24
 8013dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return NET_DROP;
 8013dc8:	2002      	movs	r0, #2
 8013dca:	e7fa      	b.n	8013dc2 <net_conn_input+0x336>
		return NET_DROP;
 8013dcc:	2002      	movs	r0, #2
 8013dce:	e7f8      	b.n	8013dc2 <net_conn_input+0x336>
 8013dd0:	20002a58 	.word	0x20002a58

08013dd4 <net_conn_init>:
	list->head = NULL;
 8013dd4:	4a0f      	ldr	r2, [pc, #60]	; (8013e14 <net_conn_init+0x40>)
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	6013      	str	r3, [r2, #0]
	list->tail = NULL;
 8013dda:	6053      	str	r3, [r2, #4]
	list->head = NULL;
 8013ddc:	4a0e      	ldr	r2, [pc, #56]	; (8013e18 <net_conn_init+0x44>)
 8013dde:	6013      	str	r3, [r2, #0]
	list->tail = NULL;
 8013de0:	6053      	str	r3, [r2, #4]
	int i;

	sys_slist_init(&conn_unused);
	sys_slist_init(&conn_used);

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
 8013de2:	2b07      	cmp	r3, #7
 8013de4:	dc15      	bgt.n	8013e12 <net_conn_init+0x3e>
{
 8013de6:	b430      	push	{r4, r5}
 8013de8:	e004      	b.n	8013df4 <net_conn_init+0x20>
	list->tail = node;
 8013dea:	4a0a      	ldr	r2, [pc, #40]	; (8013e14 <net_conn_init+0x40>)
 8013dec:	6054      	str	r4, [r2, #4]
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
 8013dee:	3301      	adds	r3, #1
 8013df0:	2b07      	cmp	r3, #7
 8013df2:	dc0c      	bgt.n	8013e0e <net_conn_init+0x3a>
		sys_slist_prepend(&conn_unused, &conns[i].node);
 8013df4:	4809      	ldr	r0, [pc, #36]	; (8013e1c <net_conn_init+0x48>)
 8013df6:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8013dfa:	0091      	lsls	r1, r2, #2
 8013dfc:	1844      	adds	r4, r0, r1
	return list->head;
 8013dfe:	4a05      	ldr	r2, [pc, #20]	; (8013e14 <net_conn_init+0x40>)
 8013e00:	6815      	ldr	r5, [r2, #0]
	parent->next = child;
 8013e02:	5045      	str	r5, [r0, r1]
	list->head = node;
 8013e04:	6014      	str	r4, [r2, #0]
	return list->tail;
 8013e06:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_PREPEND(slist, snode)
 8013e08:	2a00      	cmp	r2, #0
 8013e0a:	d1f0      	bne.n	8013dee <net_conn_init+0x1a>
 8013e0c:	e7ed      	b.n	8013dea <net_conn_init+0x16>
	}
}
 8013e0e:	bc30      	pop	{r4, r5}
 8013e10:	4770      	bx	lr
 8013e12:	4770      	bx	lr
 8013e14:	200034ec 	.word	0x200034ec
 8013e18:	200034f4 	.word	0x200034f4
 8013e1c:	200034fc 	.word	0x200034fc

08013e20 <net_tcp_input>:
	return net_pkt_set_data(pkt, &tcp_access);
}

struct net_tcp_hdr *net_tcp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *tcp_access)
{
 8013e20:	b570      	push	{r4, r5, r6, lr}
 8013e22:	4604      	mov	r4, r0
 8013e24:	460d      	mov	r5, r1
	struct net_tcp_hdr *tcp_hdr;

	if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
 8013e26:	6980      	ldr	r0, [r0, #24]
 8013e28:	f005 fda0 	bl	801996c <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
 8013e2c:	b120      	cbz	r0, 8013e38 <net_tcp_input+0x18>
	return net_calc_chksum(pkt, IPPROTO_TCP);
 8013e2e:	2106      	movs	r1, #6
 8013e30:	4620      	mov	r0, r4
 8013e32:	f006 f81e 	bl	8019e72 <net_calc_chksum>
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt)) &&
 8013e36:	b950      	cbnz	r0, 8013e4e <net_tcp_input+0x2e>
	    net_calc_chksum_tcp(pkt) != 0U) {
		NET_DBG("DROP: checksum mismatch");
		goto drop;
	}

	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, tcp_access);
 8013e38:	4629      	mov	r1, r5
 8013e3a:	4620      	mov	r0, r4
 8013e3c:	f7fb fec6 	bl	800fbcc <net_pkt_get_data>
	if (tcp_hdr && !net_pkt_set_data(pkt, tcp_access)) {
 8013e40:	4606      	mov	r6, r0
 8013e42:	b120      	cbz	r0, 8013e4e <net_tcp_input+0x2e>
 8013e44:	4629      	mov	r1, r5
 8013e46:	4620      	mov	r0, r4
 8013e48:	f006 fcd5 	bl	801a7f6 <net_pkt_set_data>
 8013e4c:	b140      	cbz	r0, 8013e60 <net_tcp_input+0x40>
	return pkt->iface;
 8013e4e:	69a2      	ldr	r2, [r4, #24]
	UPDATE_STAT(iface, stats.tcp.chkerr++);
 8013e50:	4904      	ldr	r1, [pc, #16]	; (8013e64 <net_tcp_input+0x44>)
 8013e52:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8013e54:	3301      	adds	r3, #1
 8013e56:	674b      	str	r3, [r1, #116]	; 0x74
 8013e58:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8013e5a:	3301      	adds	r3, #1
 8013e5c:	67d3      	str	r3, [r2, #124]	; 0x7c
		return tcp_hdr;
	}

drop:
	net_stats_update_tcp_seg_chkerr(net_pkt_iface(pkt));
	return NULL;
 8013e5e:	2600      	movs	r6, #0
}
 8013e60:	4630      	mov	r0, r6
 8013e62:	bd70      	pop	{r4, r5, r6, pc}
 8013e64:	20002a58 	.word	0x20002a58

08013e68 <net_tcp_init>:
{
	return tcp_state_to_str(state, false);
}

void net_tcp_init(void)
{
 8013e68:	b510      	push	{r4, lr}
 8013e6a:	b082      	sub	sp, #8
#define THREAD_PRIORITY K_PRIO_PREEMPT(0)
#endif

	/* Use private workqueue in order not to block the system work queue.
	 */
	k_work_queue_start(&tcp_work_q, work_q_stack,
 8013e6c:	4c08      	ldr	r4, [pc, #32]	; (8013e90 <net_tcp_init+0x28>)
 8013e6e:	2300      	movs	r3, #0
 8013e70:	9300      	str	r3, [sp, #0]
 8013e72:	f06f 030f 	mvn.w	r3, #15
 8013e76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013e7a:	4906      	ldr	r1, [pc, #24]	; (8013e94 <net_tcp_init+0x2c>)
 8013e7c:	4620      	mov	r0, r4
 8013e7e:	f002 f80b 	bl	8015e98 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
 8013e82:	4905      	ldr	r1, [pc, #20]	; (8013e98 <net_tcp_init+0x30>)
 8013e84:	4620      	mov	r0, r4
 8013e86:	f001 fc9d 	bl	80157c4 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(work_q_stack), THREAD_PRIORITY,
			   NULL);

	k_thread_name_set(&tcp_work_q.thread, "tcp_work");
	NET_DBG("Workq started. Thread ID: %p", &tcp_work_q.thread);
}
 8013e8a:	b002      	add	sp, #8
 8013e8c:	bd10      	pop	{r4, pc}
 8013e8e:	bf00      	nop
 8013e90:	20002c60 	.word	0x20002c60
 8013e94:	20008300 	.word	0x20008300
 8013e98:	0801e6e8 	.word	0x0801e6e8

08013e9c <net_udp_input>:
	return net_conn_unregister(handle);
}

struct net_udp_hdr *net_udp_input(struct net_pkt *pkt,
				  struct net_pkt_data_access *udp_access)
{
 8013e9c:	b570      	push	{r4, r5, r6, lr}
 8013e9e:	4604      	mov	r4, r0
 8013ea0:	460e      	mov	r6, r1
	struct net_udp_hdr *udp_hdr;

	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, udp_access);
 8013ea2:	f7fb fe93 	bl	800fbcc <net_pkt_get_data>
	if (!udp_hdr || net_pkt_set_data(pkt, udp_access)) {
 8013ea6:	b328      	cbz	r0, 8013ef4 <net_udp_input+0x58>
 8013ea8:	4605      	mov	r5, r0
 8013eaa:	4631      	mov	r1, r6
 8013eac:	4620      	mov	r0, r4
 8013eae:	f006 fca2 	bl	801a7f6 <net_pkt_set_data>
 8013eb2:	b9f8      	cbnz	r0, 8013ef4 <net_udp_input+0x58>
		NET_DBG("DROP: corrupted header");
		goto drop;
	}

	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
 8013eb4:	88ab      	ldrh	r3, [r5, #4]
 8013eb6:	0a18      	lsrs	r0, r3, #8
 8013eb8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8013ebc:	b280      	uxth	r0, r0
	return net_buf_frags_len(pkt->frags);
 8013ebe:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
 8013ec0:	2200      	movs	r2, #0
	while (buf) {
 8013ec2:	e002      	b.n	8013eca <net_udp_input+0x2e>
		bytes += buf->len;
 8013ec4:	8999      	ldrh	r1, [r3, #12]
 8013ec6:	440a      	add	r2, r1
		buf = buf->frags;
 8013ec8:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d1fa      	bne.n	8013ec4 <net_udp_input+0x28>
	return pkt->ip_hdr_len;
 8013ece:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8013ed2:	1ad2      	subs	r2, r2, r3
	return pkt->ipv6_ext_len;
 8013ed4:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
				    net_pkt_ip_hdr_len(pkt) -
 8013ed8:	1ad2      	subs	r2, r2, r3
	if (ntohs(udp_hdr->len) != (net_pkt_get_len(pkt) -
 8013eda:	4290      	cmp	r0, r2
 8013edc:	d10a      	bne.n	8013ef4 <net_udp_input+0x58>
		NET_DBG("DROP: Invalid hdr length");
		goto drop;
	}

	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
	    net_if_need_calc_rx_checksum(net_pkt_iface(pkt))) {
 8013ede:	69a0      	ldr	r0, [r4, #24]
 8013ee0:	f005 fd44 	bl	801996c <net_if_need_calc_rx_checksum>
	if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
 8013ee4:	b198      	cbz	r0, 8013f0e <net_udp_input+0x72>
		if (!udp_hdr->chksum) {
 8013ee6:	88eb      	ldrh	r3, [r5, #6]
 8013ee8:	b123      	cbz	r3, 8013ef4 <net_udp_input+0x58>
	return net_calc_chksum(pkt, IPPROTO_UDP);
 8013eea:	2111      	movs	r1, #17
 8013eec:	4620      	mov	r0, r4
 8013eee:	f005 ffc0 	bl	8019e72 <net_calc_chksum>
			}

			goto drop;
		}

		if (net_calc_verify_chksum_udp(pkt) != 0U) {
 8013ef2:	b160      	cbz	r0, 8013f0e <net_udp_input+0x72>
	return pkt->iface;
 8013ef4:	69a2      	ldr	r2, [r4, #24]
	UPDATE_STAT(iface, stats.udp.chkerr++);
 8013ef6:	4907      	ldr	r1, [pc, #28]	; (8013f14 <net_udp_input+0x78>)
 8013ef8:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8013efc:	3301      	adds	r3, #1
 8013efe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8013f02:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8013f06:	3301      	adds	r3, #1
 8013f08:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	}
out:
	return udp_hdr;
drop:
	net_stats_update_udp_chkerr(net_pkt_iface(pkt));
	return NULL;
 8013f0c:	2500      	movs	r5, #0
}
 8013f0e:	4628      	mov	r0, r5
 8013f10:	bd70      	pop	{r4, r5, r6, pc}
 8013f12:	bf00      	nop
 8013f14:	20002a58 	.word	0x20002a58

08013f18 <check_interface>:
		k_sem_give(&waiter);
	}
}

static bool check_interface(struct net_if *iface)
{
 8013f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013f1c:	b083      	sub	sp, #12
 8013f1e:	af00      	add	r7, sp, #0
	if (iface == NULL) {
 8013f20:	4606      	mov	r6, r0
 8013f22:	b140      	cbz	r0, 8013f36 <check_interface+0x1e>
	return atomic_test_bit(iface->if_dev->flags, value);
 8013f24:	6803      	ldr	r3, [r0, #0]
 8013f26:	f3bf 8f5b 	dmb	ish
 8013f2a:	68dc      	ldr	r4, [r3, #12]
 8013f2c:	f3bf 8f5b 	dmb	ish
	if (net_if_is_up(iface)) {
 8013f30:	f014 0401 	ands.w	r4, r4, #1
 8013f34:	d14f      	bne.n	8013fd6 <check_interface+0xbe>
		k_sem_reset(&counter);
		k_sem_give(&waiter);
		return true;
	}

	NET_INFO("Waiting interface %d (%p) to be up...",
 8013f36:	4630      	mov	r0, r6
 8013f38:	f7fb f882 	bl	800f040 <net_if_get_by_iface>
 8013f3c:	46e9      	mov	r9, sp
 8013f3e:	b088      	sub	sp, #32
 8013f40:	466c      	mov	r4, sp
 8013f42:	f114 050c 	adds.w	r5, r4, #12
 8013f46:	d04d      	beq.n	8013fe4 <check_interface+0xcc>
 8013f48:	f04f 0810 	mov.w	r8, #16
 8013f4c:	b125      	cbz	r5, 8013f58 <check_interface+0x40>
 8013f4e:	f1b8 0f04 	cmp.w	r8, #4
 8013f52:	dd01      	ble.n	8013f58 <check_interface+0x40>
 8013f54:	4b29      	ldr	r3, [pc, #164]	; (8013ffc <check_interface+0xe4>)
 8013f56:	6123      	str	r3, [r4, #16]
 8013f58:	4630      	mov	r0, r6
 8013f5a:	f7fb f871 	bl	800f040 <net_if_get_by_iface>
 8013f5e:	b115      	cbz	r5, 8013f66 <check_interface+0x4e>
 8013f60:	f1b8 0f08 	cmp.w	r8, #8
 8013f64:	dc41      	bgt.n	8013fea <check_interface+0xd2>
 8013f66:	b11d      	cbz	r5, 8013f70 <check_interface+0x58>
 8013f68:	f1b8 0f0c 	cmp.w	r8, #12
 8013f6c:	dd00      	ble.n	8013f70 <check_interface+0x58>
 8013f6e:	61a6      	str	r6, [r4, #24]
 8013f70:	f1b8 0f0f 	cmp.w	r8, #15
 8013f74:	dd3e      	ble.n	8013ff4 <check_interface+0xdc>
 8013f76:	2310      	movs	r3, #16
 8013f78:	b145      	cbz	r5, 8013f8c <check_interface+0x74>
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	f8a7 2005 	strh.w	r2, [r7, #5]
 8013f80:	71fa      	strb	r2, [r7, #7]
 8013f82:	2104      	movs	r1, #4
 8013f84:	7139      	strb	r1, [r7, #4]
 8013f86:	71ba      	strb	r2, [r7, #6]
 8013f88:	687a      	ldr	r2, [r7, #4]
 8013f8a:	60e2      	str	r2, [r4, #12]
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	f36f 0200 	bfc	r2, #0, #1
 8013f92:	f36f 0241 	bfc	r2, #1, #1
 8013f96:	f36f 0282 	bfc	r2, #2, #1
 8013f9a:	f36f 02c5 	bfc	r2, #3, #3
 8013f9e:	2103      	movs	r1, #3
 8013fa0:	f361 1288 	bfi	r2, r1, #6, #3
 8013fa4:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
 8013fa8:	f363 2252 	bfi	r2, r3, #9, #10
 8013fac:	2300      	movs	r3, #0
 8013fae:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8013fb2:	4913      	ldr	r1, [pc, #76]	; (8014000 <check_interface+0xe8>)
 8013fb4:	4620      	mov	r0, r4
 8013fb6:	f003 fecc 	bl	8017d52 <z_log_msg2_finalize>
 8013fba:	46cd      	mov	sp, r9
	cb->handler = handler;
 8013fbc:	4811      	ldr	r0, [pc, #68]	; (8014004 <check_interface+0xec>)
 8013fbe:	4b12      	ldr	r3, [pc, #72]	; (8014008 <check_interface+0xf0>)
 8013fc0:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
 8013fc2:	4b12      	ldr	r3, [pc, #72]	; (801400c <check_interface+0xf4>)
 8013fc4:	6083      	str	r3, [r0, #8]
		 net_if_get_by_iface(iface), iface);

	net_mgmt_init_event_callback(&mgmt_iface_cb, iface_up_handler,
				     NET_EVENT_IF_UP);
	net_mgmt_add_event_callback(&mgmt_iface_cb);
 8013fc6:	f7fb fba7 	bl	800f718 <net_mgmt_add_event_callback>

	return false;
 8013fca:	2400      	movs	r4, #0
}
 8013fcc:	4620      	mov	r0, r4
 8013fce:	370c      	adds	r7, #12
 8013fd0:	46bd      	mov	sp, r7
 8013fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_reset(sem);
 8013fd6:	480e      	ldr	r0, [pc, #56]	; (8014010 <check_interface+0xf8>)
 8013fd8:	f001 fdfe 	bl	8015bd8 <z_impl_k_sem_reset>
	z_impl_k_sem_give(sem);
 8013fdc:	480d      	ldr	r0, [pc, #52]	; (8014014 <check_interface+0xfc>)
 8013fde:	f001 fda9 	bl	8015b34 <z_impl_k_sem_give>
		return true;
 8013fe2:	e7f3      	b.n	8013fcc <check_interface+0xb4>
	NET_INFO("Waiting interface %d (%p) to be up...",
 8013fe4:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 8013fe8:	e7b0      	b.n	8013f4c <check_interface+0x34>
 8013fea:	4630      	mov	r0, r6
 8013fec:	f7fb f828 	bl	800f040 <net_if_get_by_iface>
 8013ff0:	6160      	str	r0, [r4, #20]
 8013ff2:	e7b8      	b.n	8013f66 <check_interface+0x4e>
 8013ff4:	f06f 031b 	mvn.w	r3, #27
 8013ff8:	e7be      	b.n	8013f78 <check_interface+0x60>
 8013ffa:	bf00      	nop
 8013ffc:	0801e704 	.word	0x0801e704
 8014000:	0801d730 	.word	0x0801d730
 8014004:	2000371c 	.word	0x2000371c
 8014008:	08014019 	.word	0x08014019
 801400c:	d0010002 	.word	0xd0010002
 8014010:	200010e4 	.word	0x200010e4
 8014014:	20001114 	.word	0x20001114

08014018 <iface_up_handler>:
	if (mgmt_event == NET_EVENT_IF_UP) {
 8014018:	4b30      	ldr	r3, [pc, #192]	; (80140dc <iface_up_handler+0xc4>)
 801401a:	4299      	cmp	r1, r3
 801401c:	d000      	beq.n	8014020 <iface_up_handler+0x8>
 801401e:	4770      	bx	lr
{
 8014020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014024:	b083      	sub	sp, #12
 8014026:	af00      	add	r7, sp, #0
 8014028:	4614      	mov	r4, r2
		NET_INFO("Interface %d (%p) coming up",
 801402a:	4610      	mov	r0, r2
 801402c:	f7fb f808 	bl	800f040 <net_if_get_by_iface>
 8014030:	46e9      	mov	r9, sp
 8014032:	b088      	sub	sp, #32
 8014034:	466d      	mov	r5, sp
 8014036:	f115 060c 	adds.w	r6, r5, #12
 801403a:	d043      	beq.n	80140c4 <iface_up_handler+0xac>
 801403c:	f04f 0810 	mov.w	r8, #16
 8014040:	b126      	cbz	r6, 801404c <iface_up_handler+0x34>
 8014042:	f1b8 0f04 	cmp.w	r8, #4
 8014046:	dd01      	ble.n	801404c <iface_up_handler+0x34>
 8014048:	4b25      	ldr	r3, [pc, #148]	; (80140e0 <iface_up_handler+0xc8>)
 801404a:	612b      	str	r3, [r5, #16]
 801404c:	4620      	mov	r0, r4
 801404e:	f7fa fff7 	bl	800f040 <net_if_get_by_iface>
 8014052:	b116      	cbz	r6, 801405a <iface_up_handler+0x42>
 8014054:	f1b8 0f08 	cmp.w	r8, #8
 8014058:	dc37      	bgt.n	80140ca <iface_up_handler+0xb2>
 801405a:	b11e      	cbz	r6, 8014064 <iface_up_handler+0x4c>
 801405c:	f1b8 0f0c 	cmp.w	r8, #12
 8014060:	dd00      	ble.n	8014064 <iface_up_handler+0x4c>
 8014062:	61ac      	str	r4, [r5, #24]
 8014064:	f1b8 0f0f 	cmp.w	r8, #15
 8014068:	dd34      	ble.n	80140d4 <iface_up_handler+0xbc>
 801406a:	2310      	movs	r3, #16
 801406c:	b146      	cbz	r6, 8014080 <iface_up_handler+0x68>
 801406e:	2200      	movs	r2, #0
 8014070:	f8a7 2005 	strh.w	r2, [r7, #5]
 8014074:	71fa      	strb	r2, [r7, #7]
 8014076:	2104      	movs	r1, #4
 8014078:	7139      	strb	r1, [r7, #4]
 801407a:	71ba      	strb	r2, [r7, #6]
 801407c:	687a      	ldr	r2, [r7, #4]
 801407e:	60ea      	str	r2, [r5, #12]
 8014080:	2200      	movs	r2, #0
 8014082:	f36f 0200 	bfc	r2, #0, #1
 8014086:	f36f 0241 	bfc	r2, #1, #1
 801408a:	f36f 0282 	bfc	r2, #2, #1
 801408e:	f36f 02c5 	bfc	r2, #3, #3
 8014092:	2103      	movs	r1, #3
 8014094:	f361 1288 	bfi	r2, r1, #6, #3
 8014098:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
 801409c:	f363 2252 	bfi	r2, r3, #9, #10
 80140a0:	2300      	movs	r3, #0
 80140a2:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80140a6:	490f      	ldr	r1, [pc, #60]	; (80140e4 <iface_up_handler+0xcc>)
 80140a8:	4628      	mov	r0, r5
 80140aa:	f003 fe52 	bl	8017d52 <z_log_msg2_finalize>
 80140ae:	46cd      	mov	sp, r9
	z_impl_k_sem_reset(sem);
 80140b0:	480d      	ldr	r0, [pc, #52]	; (80140e8 <iface_up_handler+0xd0>)
 80140b2:	f001 fd91 	bl	8015bd8 <z_impl_k_sem_reset>
	z_impl_k_sem_give(sem);
 80140b6:	480d      	ldr	r0, [pc, #52]	; (80140ec <iface_up_handler+0xd4>)
 80140b8:	f001 fd3c 	bl	8015b34 <z_impl_k_sem_give>
}
 80140bc:	370c      	adds	r7, #12
 80140be:	46bd      	mov	sp, r7
 80140c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		NET_INFO("Interface %d (%p) coming up",
 80140c4:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 80140c8:	e7ba      	b.n	8014040 <iface_up_handler+0x28>
 80140ca:	4620      	mov	r0, r4
 80140cc:	f7fa ffb8 	bl	800f040 <net_if_get_by_iface>
 80140d0:	6168      	str	r0, [r5, #20]
 80140d2:	e7c2      	b.n	801405a <iface_up_handler+0x42>
 80140d4:	f06f 031b 	mvn.w	r3, #27
 80140d8:	e7c8      	b.n	801406c <iface_up_handler+0x54>
 80140da:	bf00      	nop
 80140dc:	d0010002 	.word	0xd0010002
 80140e0:	0801e72c 	.word	0x0801e72c
 80140e4:	0801d730 	.word	0x0801d730
 80140e8:	200010e4 	.word	0x200010e4
 80140ec:	20001114 	.word	0x20001114

080140f0 <setup_ipv4>:
{
 80140f0:	b510      	push	{r4, lr}
 80140f2:	b08a      	sub	sp, #40	; 0x28
 80140f4:	4604      	mov	r4, r0
	return z_impl_net_addr_pton(family, src, dst);
 80140f6:	aa05      	add	r2, sp, #20
 80140f8:	4927      	ldr	r1, [pc, #156]	; (8014198 <setup_ipv4+0xa8>)
 80140fa:	2001      	movs	r0, #1
 80140fc:	f005 fdd5 	bl	8019caa <z_impl_net_addr_pton>
	if (net_addr_pton(AF_INET, CONFIG_NET_CONFIG_MY_IPV4_ADDR, &addr)) {
 8014100:	2800      	cmp	r0, #0
 8014102:	d138      	bne.n	8014176 <setup_ipv4+0x86>
	net_if_ipv4_addr_add(iface, &addr, NET_ADDR_MANUAL, 0);
 8014104:	2300      	movs	r3, #0
 8014106:	2203      	movs	r2, #3
 8014108:	a905      	add	r1, sp, #20
 801410a:	4620      	mov	r0, r4
 801410c:	f7fa fd8c 	bl	800ec28 <net_if_ipv4_addr_add>
	return z_impl_net_addr_ntop(family, src, dst, size);
 8014110:	2310      	movs	r3, #16
 8014112:	aa06      	add	r2, sp, #24
 8014114:	a905      	add	r1, sp, #20
 8014116:	2001      	movs	r0, #1
 8014118:	f005 fcdf 	bl	8019ada <z_impl_net_addr_ntop>
	NET_INFO("IPv4 address: %s",
 801411c:	9002      	str	r0, [sp, #8]
 801411e:	4b1f      	ldr	r3, [pc, #124]	; (801419c <setup_ipv4+0xac>)
 8014120:	9301      	str	r3, [sp, #4]
 8014122:	2000      	movs	r0, #0
 8014124:	9000      	str	r0, [sp, #0]
 8014126:	4603      	mov	r3, r0
 8014128:	2203      	movs	r2, #3
 801412a:	491d      	ldr	r1, [pc, #116]	; (80141a0 <setup_ipv4+0xb0>)
 801412c:	f007 fb85 	bl	801b83a <z_log_msg2_runtime_create>
	return z_impl_net_addr_pton(family, src, dst);
 8014130:	aa05      	add	r2, sp, #20
 8014132:	491c      	ldr	r1, [pc, #112]	; (80141a4 <setup_ipv4+0xb4>)
 8014134:	2001      	movs	r0, #1
 8014136:	f005 fdb8 	bl	8019caa <z_impl_net_addr_pton>
		if (net_addr_pton(AF_INET, CONFIG_NET_CONFIG_MY_IPV4_NETMASK,
 801413a:	b340      	cbz	r0, 801418e <setup_ipv4+0x9e>
			NET_ERR("Invalid netmask: %s",
 801413c:	4b19      	ldr	r3, [pc, #100]	; (80141a4 <setup_ipv4+0xb4>)
 801413e:	9302      	str	r3, [sp, #8]
 8014140:	4b19      	ldr	r3, [pc, #100]	; (80141a8 <setup_ipv4+0xb8>)
 8014142:	9301      	str	r3, [sp, #4]
 8014144:	2000      	movs	r0, #0
 8014146:	9000      	str	r0, [sp, #0]
 8014148:	4603      	mov	r3, r0
 801414a:	2201      	movs	r2, #1
 801414c:	4914      	ldr	r1, [pc, #80]	; (80141a0 <setup_ipv4+0xb0>)
 801414e:	f007 fb74 	bl	801b83a <z_log_msg2_runtime_create>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
 8014152:	4b16      	ldr	r3, [pc, #88]	; (80141ac <setup_ipv4+0xbc>)
 8014154:	f3bf 8f5b 	dmb	ish
 8014158:	e853 2f00 	ldrex	r2, [r3]
 801415c:	f042 0204 	orr.w	r2, r2, #4
 8014160:	e843 2100 	strex	r1, r2, [r3]
 8014164:	2900      	cmp	r1, #0
 8014166:	d1f7      	bne.n	8014158 <setup_ipv4+0x68>
 8014168:	f3bf 8f5b 	dmb	ish
 801416c:	4810      	ldr	r0, [pc, #64]	; (80141b0 <setup_ipv4+0xc0>)
 801416e:	f001 fce1 	bl	8015b34 <z_impl_k_sem_give>
}
 8014172:	b00a      	add	sp, #40	; 0x28
 8014174:	bd10      	pop	{r4, pc}
		NET_ERR("Invalid address: %s", CONFIG_NET_CONFIG_MY_IPV4_ADDR);
 8014176:	4b08      	ldr	r3, [pc, #32]	; (8014198 <setup_ipv4+0xa8>)
 8014178:	9302      	str	r3, [sp, #8]
 801417a:	4b0e      	ldr	r3, [pc, #56]	; (80141b4 <setup_ipv4+0xc4>)
 801417c:	9301      	str	r3, [sp, #4]
 801417e:	2000      	movs	r0, #0
 8014180:	9000      	str	r0, [sp, #0]
 8014182:	4603      	mov	r3, r0
 8014184:	2201      	movs	r2, #1
 8014186:	4906      	ldr	r1, [pc, #24]	; (80141a0 <setup_ipv4+0xb0>)
 8014188:	f007 fb57 	bl	801b83a <z_log_msg2_runtime_create>
		return;
 801418c:	e7f1      	b.n	8014172 <setup_ipv4+0x82>
			net_if_ipv4_set_netmask(iface, &addr);
 801418e:	a905      	add	r1, sp, #20
 8014190:	4620      	mov	r0, r4
 8014192:	f7fa fd2d 	bl	800ebf0 <net_if_ipv4_set_netmask>
 8014196:	e7dc      	b.n	8014152 <setup_ipv4+0x62>
 8014198:	0801e748 	.word	0x0801e748
 801419c:	0801e768 	.word	0x0801e768
 80141a0:	0801d730 	.word	0x0801d730
 80141a4:	0801e77c 	.word	0x0801e77c
 80141a8:	0801e78c 	.word	0x0801e78c
 80141ac:	20003728 	.word	0x20003728
 80141b0:	20001114 	.word	0x20001114
 80141b4:	0801e754 	.word	0x0801e754

080141b8 <net_config_init_by_iface>:
}
#endif

int net_config_init_by_iface(struct net_if *iface, const char *app_info,
			     uint32_t flags, int32_t timeout)
{
 80141b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141bc:	b084      	sub	sp, #16
 80141be:	4607      	mov	r7, r0
 80141c0:	4615      	mov	r5, r2
 80141c2:	461e      	mov	r6, r3
#define LOOP_DIVIDER 10
	int loop = timeout / LOOP_DIVIDER;
 80141c4:	4b51      	ldr	r3, [pc, #324]	; (801430c <net_config_init_by_iface+0x154>)
 80141c6:	fb83 2306 	smull	r2, r3, r3, r6
 80141ca:	17f4      	asrs	r4, r6, #31
 80141cc:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
	int count;

	if (app_info) {
 80141d0:	b149      	cbz	r1, 80141e6 <net_config_init_by_iface+0x2e>
		NET_INFO("%s", log_strdup(app_info));
 80141d2:	9102      	str	r1, [sp, #8]
 80141d4:	4b4e      	ldr	r3, [pc, #312]	; (8014310 <net_config_init_by_iface+0x158>)
 80141d6:	9301      	str	r3, [sp, #4]
 80141d8:	2000      	movs	r0, #0
 80141da:	9000      	str	r0, [sp, #0]
 80141dc:	4603      	mov	r3, r0
 80141de:	2203      	movs	r2, #3
 80141e0:	494c      	ldr	r1, [pc, #304]	; (8014314 <net_config_init_by_iface+0x15c>)
 80141e2:	f007 fb2a 	bl	801b83a <z_log_msg2_runtime_create>
	}

	if (!iface) {
 80141e6:	b127      	cbz	r7, 80141f2 <net_config_init_by_iface+0x3a>
		iface = net_if_get_default();
	}

	if (timeout < 0) {
 80141e8:	2e00      	cmp	r6, #0
 80141ea:	db06      	blt.n	80141fa <net_config_init_by_iface+0x42>
		count = -1;
	} else if (timeout == 0) {
 80141ec:	b9a6      	cbnz	r6, 8014218 <net_config_init_by_iface+0x60>
		count = 0;
 80141ee:	46b0      	mov	r8, r6
 80141f0:	e005      	b.n	80141fe <net_config_init_by_iface+0x46>
		iface = net_if_get_default();
 80141f2:	f7f9 f94d 	bl	800d490 <net_if_get_default>
 80141f6:	4607      	mov	r7, r0
 80141f8:	e7f6      	b.n	80141e8 <net_config_init_by_iface+0x30>
		count = -1;
 80141fa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	} else {
		count = LOOP_DIVIDER;
	}

	/* First make sure that network interface is up */
	if (check_interface(iface) == false) {
 80141fe:	4638      	mov	r0, r7
 8014200:	f7ff fe8a 	bl	8013f18 <check_interface>
 8014204:	2800      	cmp	r0, #0
 8014206:	d133      	bne.n	8014270 <net_config_init_by_iface+0xb8>
	return z_impl_k_sem_init(sem, initial_count, limit);
 8014208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801420c:	2101      	movs	r1, #1
 801420e:	4842      	ldr	r0, [pc, #264]	; (8014318 <net_config_init_by_iface+0x160>)
 8014210:	f007 fec2 	bl	801bf98 <z_impl_k_sem_init>
 8014214:	4643      	mov	r3, r8
 8014216:	e003      	b.n	8014220 <net_config_init_by_iface+0x68>
		count = LOOP_DIVIDER;
 8014218:	f04f 080a 	mov.w	r8, #10
 801421c:	e7ef      	b.n	80141fe <net_config_init_by_iface+0x46>
		k_sem_init(&counter, 1, K_SEM_MAX_LIMIT);

		while (count-- > 0) {
 801421e:	4643      	mov	r3, r8
 8014220:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8014224:	2b00      	cmp	r3, #0
 8014226:	dd1b      	ble.n	8014260 <net_config_init_by_iface+0xa8>
	return sem->count;
 8014228:	4b3b      	ldr	r3, [pc, #236]	; (8014318 <net_config_init_by_iface+0x160>)
 801422a:	689b      	ldr	r3, [r3, #8]
			if (!k_sem_count_get(&counter)) {
 801422c:	b1c3      	cbz	r3, 8014260 <net_config_init_by_iface+0xa8>
				break;
			}

			if (k_sem_take(&waiter, K_MSEC(loop))) {
 801422e:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
 8014232:	4660      	mov	r0, ip
 8014234:	17c1      	asrs	r1, r0, #31
 8014236:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 801423a:	ea4f 028c 	mov.w	r2, ip, lsl #2
 801423e:	ea4e 739c 	orr.w	r3, lr, ip, lsr #30
 8014242:	eb12 020c 	adds.w	r2, r2, ip
 8014246:	eb41 0303 	adc.w	r3, r1, r3
 801424a:	1892      	adds	r2, r2, r2
 801424c:	415b      	adcs	r3, r3
	return z_impl_k_sem_take(sem, timeout);
 801424e:	4833      	ldr	r0, [pc, #204]	; (801431c <net_config_init_by_iface+0x164>)
 8014250:	f001 fc98 	bl	8015b84 <z_impl_k_sem_take>
 8014254:	2800      	cmp	r0, #0
 8014256:	d0e2      	beq.n	801421e <net_config_init_by_iface+0x66>
 8014258:	4b2f      	ldr	r3, [pc, #188]	; (8014318 <net_config_init_by_iface+0x160>)
 801425a:	689b      	ldr	r3, [r3, #8]
				if (!k_sem_count_get(&counter)) {
 801425c:	2b00      	cmp	r3, #0
 801425e:	d1de      	bne.n	801421e <net_config_init_by_iface+0x66>
				}
			}
		}

#if defined(CONFIG_NET_NATIVE)
		net_mgmt_del_event_callback(&mgmt_iface_cb);
 8014260:	482f      	ldr	r0, [pc, #188]	; (8014320 <net_config_init_by_iface+0x168>)
 8014262:	f7fb fa7b 	bl	800f75c <net_mgmt_del_event_callback>
#endif

		/* Network interface did not come up. We will not try
		 * to setup things in that case.
		 */
		if (timeout > 0 && count < 0) {
 8014266:	2e00      	cmp	r6, #0
 8014268:	dd02      	ble.n	8014270 <net_config_init_by_iface+0xb8>
 801426a:	f1b8 0f00 	cmp.w	r8, #0
 801426e:	db25      	blt.n	80142bc <net_config_init_by_iface+0x104>
				"interface");
			return -ENETDOWN;
		}
	}

	setup_ipv4(iface);
 8014270:	4638      	mov	r0, r7
 8014272:	f7ff ff3d 	bl	80140f0 <setup_ipv4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8014276:	f3bf 8f5b 	dmb	ish
 801427a:	4b2a      	ldr	r3, [pc, #168]	; (8014324 <net_config_init_by_iface+0x16c>)
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	f3bf 8f5b 	dmb	ish
	setup_ipv6(iface, flags);

	/* Loop here until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (!services_are_ready(flags) && count-- > 0) {
 8014282:	ea35 0303 	bics.w	r3, r5, r3
 8014286:	d028      	beq.n	80142da <net_config_init_by_iface+0x122>
 8014288:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
 801428c:	f1b8 0f00 	cmp.w	r8, #0
 8014290:	dd22      	ble.n	80142d8 <net_config_init_by_iface+0x120>
		k_sem_take(&waiter, K_MSEC(loop));
 8014292:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
 8014296:	4660      	mov	r0, ip
 8014298:	17c1      	asrs	r1, r0, #31
 801429a:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 801429e:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80142a2:	ea4e 739c 	orr.w	r3, lr, ip, lsr #30
 80142a6:	eb12 020c 	adds.w	r2, r2, ip
 80142aa:	eb41 0303 	adc.w	r3, r1, r3
 80142ae:	1892      	adds	r2, r2, r2
 80142b0:	415b      	adcs	r3, r3
 80142b2:	481a      	ldr	r0, [pc, #104]	; (801431c <net_config_init_by_iface+0x164>)
 80142b4:	f001 fc66 	bl	8015b84 <z_impl_k_sem_take>
	while (!services_are_ready(flags) && count-- > 0) {
 80142b8:	46b8      	mov	r8, r7
 80142ba:	e7dc      	b.n	8014276 <net_config_init_by_iface+0xbe>
			NET_ERR("Timeout while waiting network %s",
 80142bc:	4b1a      	ldr	r3, [pc, #104]	; (8014328 <net_config_init_by_iface+0x170>)
 80142be:	9302      	str	r3, [sp, #8]
 80142c0:	4b1a      	ldr	r3, [pc, #104]	; (801432c <net_config_init_by_iface+0x174>)
 80142c2:	9301      	str	r3, [sp, #4]
 80142c4:	2000      	movs	r0, #0
 80142c6:	9000      	str	r0, [sp, #0]
 80142c8:	4603      	mov	r3, r0
 80142ca:	2201      	movs	r2, #1
 80142cc:	4911      	ldr	r1, [pc, #68]	; (8014314 <net_config_init_by_iface+0x15c>)
 80142ce:	f007 fab4 	bl	801b83a <z_log_msg2_runtime_create>
			return -ENETDOWN;
 80142d2:	f06f 0072 	mvn.w	r0, #114	; 0x72
 80142d6:	e004      	b.n	80142e2 <net_config_init_by_iface+0x12a>
	while (!services_are_ready(flags) && count-- > 0) {
 80142d8:	46b8      	mov	r8, r7
	}

	if (count == -1 && timeout > 0) {
 80142da:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80142de:	d003      	beq.n	80142e8 <net_config_init_by_iface+0x130>
		NET_ERR("Timeout while waiting network %s", "setup");
		return -ETIMEDOUT;
	}

	return 0;
 80142e0:	2000      	movs	r0, #0
}
 80142e2:	b004      	add	sp, #16
 80142e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (count == -1 && timeout > 0) {
 80142e8:	2e00      	cmp	r6, #0
 80142ea:	dc01      	bgt.n	80142f0 <net_config_init_by_iface+0x138>
	return 0;
 80142ec:	2000      	movs	r0, #0
 80142ee:	e7f8      	b.n	80142e2 <net_config_init_by_iface+0x12a>
		NET_ERR("Timeout while waiting network %s", "setup");
 80142f0:	4b0f      	ldr	r3, [pc, #60]	; (8014330 <net_config_init_by_iface+0x178>)
 80142f2:	9302      	str	r3, [sp, #8]
 80142f4:	4b0d      	ldr	r3, [pc, #52]	; (801432c <net_config_init_by_iface+0x174>)
 80142f6:	9301      	str	r3, [sp, #4]
 80142f8:	2000      	movs	r0, #0
 80142fa:	9000      	str	r0, [sp, #0]
 80142fc:	4603      	mov	r3, r0
 80142fe:	2201      	movs	r2, #1
 8014300:	4904      	ldr	r1, [pc, #16]	; (8014314 <net_config_init_by_iface+0x15c>)
 8014302:	f007 fa9a 	bl	801b83a <z_log_msg2_runtime_create>
		return -ETIMEDOUT;
 8014306:	f06f 0073 	mvn.w	r0, #115	; 0x73
 801430a:	e7ea      	b.n	80142e2 <net_config_init_by_iface+0x12a>
 801430c:	66666667 	.word	0x66666667
 8014310:	0801e938 	.word	0x0801e938
 8014314:	0801d730 	.word	0x0801d730
 8014318:	200010e4 	.word	0x200010e4
 801431c:	20001114 	.word	0x20001114
 8014320:	2000371c 	.word	0x2000371c
 8014324:	20003728 	.word	0x20003728
 8014328:	0801e7a0 	.word	0x0801e7a0
 801432c:	0801e7ac 	.word	0x0801e7ac
 8014330:	0801e7d0 	.word	0x0801e7d0

08014334 <net_config_init_app>:
		return;
	}
}

int net_config_init_app(const struct device *dev, const char *app_info)
{
 8014334:	b530      	push	{r4, r5, lr}
 8014336:	b08f      	sub	sp, #60	; 0x3c
 8014338:	460c      	mov	r4, r1
	struct net_if *iface = NULL;
 801433a:	2300      	movs	r3, #0
 801433c:	9301      	str	r3, [sp, #4]
	uint32_t flags = 0U;
	int ret;

	if (dev) {
 801433e:	b120      	cbz	r0, 801434a <net_config_init_app+0x16>
 8014340:	4605      	mov	r5, r0
		iface = net_if_lookup_by_dev(dev);
 8014342:	f7f9 f893 	bl	800d46c <net_if_lookup_by_dev>
 8014346:	9001      	str	r0, [sp, #4]
		if (iface == NULL) {
 8014348:	b168      	cbz	r0, 8014366 <net_config_init_app+0x32>
	if (IS_ENABLED(CONFIG_NET_CONFIG_NEED_IPV4)) {
		flags |= NET_CONFIG_NEED_IPV4;
	}

	/* Only try to use a network interface that is auto started */
	if (iface == NULL) {
 801434a:	9b01      	ldr	r3, [sp, #4]
 801434c:	b383      	cbz	r3, 80143b0 <net_config_init_app+0x7c>
		net_if_foreach(iface_find_cb, &iface);
	}

	/* Initialize the application automatically if needed */
	ret = net_config_init_by_iface(iface, app_info, flags,
 801434e:	f247 5330 	movw	r3, #30000	; 0x7530
 8014352:	2204      	movs	r2, #4
 8014354:	4621      	mov	r1, r4
 8014356:	9801      	ldr	r0, [sp, #4]
 8014358:	f7ff ff2e 	bl	80141b8 <net_config_init_by_iface>
				CONFIG_NET_CONFIG_INIT_TIMEOUT * MSEC_PER_SEC);
	if (ret < 0) {
 801435c:	1e04      	subs	r4, r0, #0
 801435e:	db2c      	blt.n	80143ba <net_config_init_app+0x86>
			log_backend_activate(backend, NULL);
		}
	}

	return ret;
}
 8014360:	4620      	mov	r0, r4
 8014362:	b00f      	add	sp, #60	; 0x3c
 8014364:	bd30      	pop	{r4, r5, pc}
			NET_WARN("No interface for device %p, using default",
 8014366:	4b27      	ldr	r3, [pc, #156]	; (8014404 <net_config_init_app+0xd0>)
 8014368:	9306      	str	r3, [sp, #24]
 801436a:	9507      	str	r5, [sp, #28]
 801436c:	2300      	movs	r3, #0
 801436e:	f8ad 3001 	strh.w	r3, [sp, #1]
 8014372:	f88d 3003 	strb.w	r3, [sp, #3]
 8014376:	2203      	movs	r2, #3
 8014378:	f88d 2000 	strb.w	r2, [sp]
 801437c:	f88d 3002 	strb.w	r3, [sp, #2]
 8014380:	9a00      	ldr	r2, [sp, #0]
 8014382:	9205      	str	r2, [sp, #20]
 8014384:	461a      	mov	r2, r3
 8014386:	f363 0200 	bfi	r2, r3, #0, #1
 801438a:	f363 0241 	bfi	r2, r3, #1, #1
 801438e:	f363 0282 	bfi	r2, r3, #2, #1
 8014392:	f363 02c5 	bfi	r2, r3, #3, #3
 8014396:	2102      	movs	r1, #2
 8014398:	f361 1288 	bfi	r2, r1, #6, #3
 801439c:	210c      	movs	r1, #12
 801439e:	f361 2252 	bfi	r2, r1, #9, #10
 80143a2:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80143a6:	4918      	ldr	r1, [pc, #96]	; (8014408 <net_config_init_app+0xd4>)
 80143a8:	a802      	add	r0, sp, #8
 80143aa:	f003 fcd2 	bl	8017d52 <z_log_msg2_finalize>
 80143ae:	e7cc      	b.n	801434a <net_config_init_app+0x16>
		net_if_foreach(iface_find_cb, &iface);
 80143b0:	a901      	add	r1, sp, #4
 80143b2:	4816      	ldr	r0, [pc, #88]	; (801440c <net_config_init_app+0xd8>)
 80143b4:	f7fa fe5e 	bl	800f074 <net_if_foreach>
 80143b8:	e7c9      	b.n	801434e <net_config_init_app+0x1a>
		NET_ERR("Network initialization failed (%d)", ret);
 80143ba:	4b15      	ldr	r3, [pc, #84]	; (8014410 <net_config_init_app+0xdc>)
 80143bc:	930c      	str	r3, [sp, #48]	; 0x30
 80143be:	940d      	str	r4, [sp, #52]	; 0x34
 80143c0:	2300      	movs	r3, #0
 80143c2:	f8ad 3001 	strh.w	r3, [sp, #1]
 80143c6:	f88d 3003 	strb.w	r3, [sp, #3]
 80143ca:	2203      	movs	r2, #3
 80143cc:	f88d 2000 	strb.w	r2, [sp]
 80143d0:	f88d 3002 	strb.w	r3, [sp, #2]
 80143d4:	9a00      	ldr	r2, [sp, #0]
 80143d6:	920b      	str	r2, [sp, #44]	; 0x2c
 80143d8:	461a      	mov	r2, r3
 80143da:	f363 0200 	bfi	r2, r3, #0, #1
 80143de:	f363 0241 	bfi	r2, r3, #1, #1
 80143e2:	f363 0282 	bfi	r2, r3, #2, #1
 80143e6:	f363 02c5 	bfi	r2, r3, #3, #3
 80143ea:	2101      	movs	r1, #1
 80143ec:	f361 1288 	bfi	r2, r1, #6, #3
 80143f0:	210c      	movs	r1, #12
 80143f2:	f361 2252 	bfi	r2, r1, #9, #10
 80143f6:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80143fa:	4903      	ldr	r1, [pc, #12]	; (8014408 <net_config_init_app+0xd4>)
 80143fc:	a808      	add	r0, sp, #32
 80143fe:	f003 fca8 	bl	8017d52 <z_log_msg2_finalize>
	return ret;
 8014402:	e7ad      	b.n	8014360 <net_config_init_app+0x2c>
 8014404:	0801e7d8 	.word	0x0801e7d8
 8014408:	0801d730 	.word	0x0801d730
 801440c:	0801b81d 	.word	0x0801b81d
 8014410:	0801e804 	.word	0x0801e804

08014414 <init_app>:

#if defined(CONFIG_NET_CONFIG_AUTO_INIT)
static int init_app(const struct device *dev)
{
 8014414:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	(void)net_config_init_app(NULL, "Initializing network");
 8014416:	4903      	ldr	r1, [pc, #12]	; (8014424 <init_app+0x10>)
 8014418:	2000      	movs	r0, #0
 801441a:	f7ff ff8b 	bl	8014334 <net_config_init_app>

	return 0;
}
 801441e:	2000      	movs	r0, #0
 8014420:	bd08      	pop	{r3, pc}
 8014422:	bf00      	nop
 8014424:	0801e828 	.word	0x0801e828

08014428 <z_impl_sys_rand32_get>:
 * different values.
 *
 * @return a 32-bit number
 */
uint32_t z_impl_sys_rand32_get(void)
{
 8014428:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
 801442a:	f000 f97f 	bl	801472c <sys_clock_cycle_get_32>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
 801442e:	4b08      	ldr	r3, [pc, #32]	; (8014450 <z_impl_sys_rand32_get+0x28>)
 8014430:	f3bf 8f5b 	dmb	ish
 8014434:	e853 2f00 	ldrex	r2, [r3]
 8014438:	4906      	ldr	r1, [pc, #24]	; (8014454 <z_impl_sys_rand32_get+0x2c>)
 801443a:	1851      	adds	r1, r2, r1
 801443c:	e843 1c00 	strex	ip, r1, [r3]
 8014440:	f1bc 0f00 	cmp.w	ip, #0
 8014444:	d1f6      	bne.n	8014434 <z_impl_sys_rand32_get+0xc>
 8014446:	f3bf 8f5b 	dmb	ish
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
}
 801444a:	4410      	add	r0, r2
 801444c:	bd08      	pop	{r3, pc}
 801444e:	bf00      	nop
 8014450:	2000372c 	.word	0x2000372c
 8014454:	3b9aca03 	.word	0x3b9aca03

08014458 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
 8014458:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
 801445a:	4c04      	ldr	r4, [pc, #16]	; (801446c <rtt_console_init+0x14>)
 801445c:	4620      	mov	r0, r4
 801445e:	f7ef feb5 	bl	80041cc <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
 8014462:	4620      	mov	r0, r4
 8014464:	f7f3 f98a 	bl	800777c <__stdout_hook_install>

	return 0;
}
 8014468:	2000      	movs	r0, #0
 801446a:	bd10      	pop	{r4, pc}
 801446c:	08014471 	.word	0x08014471

08014470 <rtt_console_out>:
{
 8014470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014472:	b083      	sub	sp, #12
 8014474:	4607      	mov	r7, r0
	char c = (char)character;
 8014476:	f88d 0007 	strb.w	r0, [sp, #7]
	int max_cnt = CONFIG_RTT_TX_RETRY_CNT;
 801447a:	2602      	movs	r6, #2
 801447c:	e006      	b.n	801448c <rtt_console_out+0x1c>
			host_present = true;
 801447e:	4b13      	ldr	r3, [pc, #76]	; (80144cc <rtt_console_out+0x5c>)
 8014480:	2201      	movs	r2, #1
 8014482:	701a      	strb	r2, [r3, #0]
 8014484:	e01e      	b.n	80144c4 <rtt_console_out+0x54>
				wait();
 8014486:	f007 f9e5 	bl	801b854 <wait>
				max_cnt--;
 801448a:	3e01      	subs	r6, #1
	return z_impl_k_mutex_lock(mutex, timeout);
 801448c:	4d10      	ldr	r5, [pc, #64]	; (80144d0 <rtt_console_out+0x60>)
 801448e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014496:	4628      	mov	r0, r5
 8014498:	f001 fa40 	bl	801591c <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
 801449c:	2201      	movs	r2, #1
 801449e:	f10d 0107 	add.w	r1, sp, #7
 80144a2:	2000      	movs	r0, #0
 80144a4:	f000 f9ec 	bl	8014880 <SEGGER_RTT_WriteNoLock>
 80144a8:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
 80144aa:	4628      	mov	r0, r5
 80144ac:	f001 fac0 	bl	8015a30 <z_impl_k_mutex_unlock>
		if (cnt) {
 80144b0:	2c00      	cmp	r4, #0
 80144b2:	d1e4      	bne.n	801447e <rtt_console_out+0xe>
		} else if (host_present) {
 80144b4:	4b05      	ldr	r3, [pc, #20]	; (80144cc <rtt_console_out+0x5c>)
 80144b6:	781b      	ldrb	r3, [r3, #0]
 80144b8:	b123      	cbz	r3, 80144c4 <rtt_console_out+0x54>
			if (max_cnt) {
 80144ba:	2e00      	cmp	r6, #0
 80144bc:	d1e3      	bne.n	8014486 <rtt_console_out+0x16>
				host_present = false;
 80144be:	4b03      	ldr	r3, [pc, #12]	; (80144cc <rtt_console_out+0x5c>)
 80144c0:	2200      	movs	r2, #0
 80144c2:	701a      	strb	r2, [r3, #0]
}
 80144c4:	4638      	mov	r0, r7
 80144c6:	b003      	add	sp, #12
 80144c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144ca:	bf00      	nop
 80144cc:	20003c78 	.word	0x20003c78
 80144d0:	200010d0 	.word	0x200010d0

080144d4 <uart_xmc4xxx_init>:

	XMC_UART_CH_Transmit((XMC_USIC_CH_t *)config->base, (uint16_t)c);
}

static int uart_xmc4xxx_init(const struct device *dev)
{
 80144d4:	b570      	push	{r4, r5, r6, lr}
	const struct uart_device_config *config = dev->config;
 80144d6:	6843      	ldr	r3, [r0, #4]
	struct uart_xmc4xxx_data *data = dev->data;
 80144d8:	6901      	ldr	r1, [r0, #16]
	XMC_USIC_CH_t *uart = (XMC_USIC_CH_t *)config->base;
 80144da:	681c      	ldr	r4, [r3, #0]

	data->config.data_bits = 8U;
 80144dc:	2308      	movs	r3, #8
 80144de:	714b      	strb	r3, [r1, #5]
	data->config.stop_bits = 1U;
 80144e0:	2501      	movs	r5, #1
 80144e2:	71cd      	strb	r5, [r1, #7]
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Init(XMC_USIC_CH_t *const channel, const XMC_UART_CH_CONFIG_t *const config)
{
  XMC_UART_CH_InitEx(channel, config, true);
 80144e4:	462a      	mov	r2, r5
 80144e6:	4620      	mov	r0, r4
 80144e8:	f003 ff2e 	bl	8018348 <XMC_UART_CH_InitEx>

	/* configure PIN 0.0 and 0.1 as UART */
	XMC_UART_CH_Init(uart, &(data->config));
	XMC_GPIO_SetMode(P0_0, XMC_GPIO_MODE_INPUT_TRISTATE);
 80144ec:	4e0e      	ldr	r6, [pc, #56]	; (8014528 <uart_xmc4xxx_init+0x54>)
 80144ee:	2200      	movs	r2, #0
 80144f0:	4611      	mov	r1, r2
 80144f2:	4630      	mov	r0, r6
 80144f4:	f003 fca0 	bl	8017e38 <XMC_GPIO_SetMode>
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_EnableInputInversion() \n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_UART_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~(USIC_CH_DX0CR_INSW_Msk | USIC_CH_DX0CR_DSEN_Msk)));
 80144f8:	69e3      	ldr	r3, [r4, #28]
 80144fa:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 80144fe:	61e3      	str	r3, [r4, #28]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8014500:	69e3      	ldr	r3, [r4, #28]
 8014502:	f023 0307 	bic.w	r3, r3, #7
 8014506:	f043 0303 	orr.w	r3, r3, #3
 801450a:	61e3      	str	r3, [r4, #28]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 801450c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801450e:	f023 030f 	bic.w	r3, r3, #15
 8014512:	f043 0302 	orr.w	r3, r3, #2
 8014516:	6423      	str	r3, [r4, #64]	; 0x40
	XMC_UART_CH_SetInputSource(uart, XMC_UART_CH_INPUT_RXD,
				   USIC1_C1_DX0_P0_0);
	XMC_UART_CH_Start(uart);

	XMC_GPIO_SetMode(P0_1,
 8014518:	2290      	movs	r2, #144	; 0x90
 801451a:	4629      	mov	r1, r5
 801451c:	4630      	mov	r0, r6
 801451e:	f003 fc8b 	bl	8017e38 <XMC_GPIO_SetMode>
			 XMC_GPIO_MODE_OUTPUT_PUSH_PULL | P0_1_AF_U1C1_DOUT0);

	return 0;
}
 8014522:	2000      	movs	r0, #0
 8014524:	bd70      	pop	{r4, r5, r6, pc}
 8014526:	bf00      	nop
 8014528:	48028000 	.word	0x48028000

0801452c <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 801452c:	4b0b      	ldr	r3, [pc, #44]	; (801455c <elapsed+0x30>)
 801452e:	6899      	ldr	r1, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8014530:	681a      	ldr	r2, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
 8014532:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8014534:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8014538:	d101      	bne.n	801453e <elapsed+0x12>
	    || (val1 < val2)) {
 801453a:	4281      	cmp	r1, r0
 801453c:	d207      	bcs.n	801454e <elapsed+0x22>
		overflow_cyc += last_load;
 801453e:	4b08      	ldr	r3, [pc, #32]	; (8014560 <elapsed+0x34>)
 8014540:	681a      	ldr	r2, [r3, #0]
 8014542:	4908      	ldr	r1, [pc, #32]	; (8014564 <elapsed+0x38>)
 8014544:	6809      	ldr	r1, [r1, #0]
 8014546:	440a      	add	r2, r1
 8014548:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 801454a:	4b04      	ldr	r3, [pc, #16]	; (801455c <elapsed+0x30>)
 801454c:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
 801454e:	4b05      	ldr	r3, [pc, #20]	; (8014564 <elapsed+0x38>)
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	1a1b      	subs	r3, r3, r0
 8014554:	4a02      	ldr	r2, [pc, #8]	; (8014560 <elapsed+0x34>)
 8014556:	6810      	ldr	r0, [r2, #0]
}
 8014558:	4418      	add	r0, r3
 801455a:	4770      	bx	lr
 801455c:	e000e010 	.word	0xe000e010
 8014560:	2000373c 	.word	0x2000373c
 8014564:	20003738 	.word	0x20003738

08014568 <sys_clock_driver_init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014568:	4b09      	ldr	r3, [pc, #36]	; (8014590 <sys_clock_driver_init+0x28>)
 801456a:	2204      	movs	r2, #4
 801456c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8014570:	f642 62df 	movw	r2, #11999	; 0x2edf
 8014574:	4b07      	ldr	r3, [pc, #28]	; (8014594 <sys_clock_driver_init+0x2c>)
 8014576:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8014578:	2000      	movs	r0, #0
 801457a:	4b07      	ldr	r3, [pc, #28]	; (8014598 <sys_clock_driver_init+0x30>)
 801457c:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 801457e:	4b07      	ldr	r3, [pc, #28]	; (801459c <sys_clock_driver_init+0x34>)
 8014580:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8014582:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8014584:	681a      	ldr	r2, [r3, #0]
 8014586:	f042 0207 	orr.w	r2, r2, #7
 801458a:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 801458c:	4770      	bx	lr
 801458e:	bf00      	nop
 8014590:	e000ed00 	.word	0xe000ed00
 8014594:	20003738 	.word	0x20003738
 8014598:	2000373c 	.word	0x2000373c
 801459c:	e000e010 	.word	0xe000e010

080145a0 <sys_clock_isr>:
{
 80145a0:	b508      	push	{r3, lr}
	elapsed();
 80145a2:	f7ff ffc3 	bl	801452c <elapsed>
	cycle_count += overflow_cyc;
 80145a6:	4b0c      	ldr	r3, [pc, #48]	; (80145d8 <sys_clock_isr+0x38>)
 80145a8:	6818      	ldr	r0, [r3, #0]
 80145aa:	4a0c      	ldr	r2, [pc, #48]	; (80145dc <sys_clock_isr+0x3c>)
 80145ac:	6811      	ldr	r1, [r2, #0]
 80145ae:	4408      	add	r0, r1
 80145b0:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 80145b2:	2200      	movs	r2, #0
 80145b4:	601a      	str	r2, [r3, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 80145b6:	4a0a      	ldr	r2, [pc, #40]	; (80145e0 <sys_clock_isr+0x40>)
 80145b8:	6811      	ldr	r1, [r2, #0]
 80145ba:	1a40      	subs	r0, r0, r1
 80145bc:	4b09      	ldr	r3, [pc, #36]	; (80145e4 <sys_clock_isr+0x44>)
 80145be:	fba3 3000 	umull	r3, r0, r3, r0
 80145c2:	0a00      	lsrs	r0, r0, #8
		announced_cycles += dticks * CYC_PER_TICK;
 80145c4:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80145c8:	fb03 1300 	mla	r3, r3, r0, r1
 80145cc:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
 80145ce:	f002 f9a7 	bl	8016920 <sys_clock_announce>
	z_arm_int_exit();
 80145d2:	f7f2 f96f 	bl	80068b4 <z_arm_exc_exit>
}
 80145d6:	bd08      	pop	{r3, pc}
 80145d8:	2000373c 	.word	0x2000373c
 80145dc:	20003734 	.word	0x20003734
 80145e0:	20003730 	.word	0x20003730
 80145e4:	057619f1 	.word	0x057619f1

080145e8 <sys_clock_set_timeout>:
{
 80145e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
 80145ea:	b111      	cbz	r1, 80145f2 <sys_clock_set_timeout+0xa>
 80145ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80145f0:	d039      	beq.n	8014666 <sys_clock_set_timeout+0x7e>
	uint32_t last_load_ = last_load;
 80145f2:	4b37      	ldr	r3, [pc, #220]	; (80146d0 <sys_clock_set_timeout+0xe8>)
 80145f4:	681d      	ldr	r5, [r3, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 80145f6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80145fa:	d03e      	beq.n	801467a <sys_clock_set_timeout+0x92>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 80145fc:	2801      	cmp	r0, #1
 80145fe:	dd3f      	ble.n	8014680 <sys_clock_set_timeout+0x98>
 8014600:	f240 5375 	movw	r3, #1397	; 0x575
 8014604:	4298      	cmp	r0, r3
 8014606:	dc3d      	bgt.n	8014684 <sys_clock_set_timeout+0x9c>
 8014608:	1e44      	subs	r4, r0, #1
	__asm__ volatile(
 801460a:	f04f 0304 	mov.w	r3, #4
 801460e:	f3ef 8611 	mrs	r6, BASEPRI
 8014612:	f383 8812 	msr	BASEPRI_MAX, r3
 8014616:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 801461a:	f7ff ff87 	bl	801452c <elapsed>
	val1 = SysTick->VAL;
 801461e:	4b2d      	ldr	r3, [pc, #180]	; (80146d4 <sys_clock_set_timeout+0xec>)
 8014620:	6899      	ldr	r1, [r3, #8]
	cycle_count += pending;
 8014622:	4b2d      	ldr	r3, [pc, #180]	; (80146d8 <sys_clock_set_timeout+0xf0>)
 8014624:	681a      	ldr	r2, [r3, #0]
 8014626:	4410      	add	r0, r2
 8014628:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 801462a:	4b2c      	ldr	r3, [pc, #176]	; (80146dc <sys_clock_set_timeout+0xf4>)
 801462c:	2200      	movs	r2, #0
 801462e:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8014630:	4b2b      	ldr	r3, [pc, #172]	; (80146e0 <sys_clock_set_timeout+0xf8>)
 8014632:	681a      	ldr	r2, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8014634:	1a83      	subs	r3, r0, r2
 8014636:	d428      	bmi.n	801468a <sys_clock_set_timeout+0xa2>
		delay = ticks * CYC_PER_TICK;
 8014638:	f642 67e0 	movw	r7, #12000	; 0x2ee0
		delay += unannounced;
 801463c:	fb07 3304 	mla	r3, r7, r4, r3
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8014640:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8014644:	331f      	adds	r3, #31
 8014646:	4c27      	ldr	r4, [pc, #156]	; (80146e4 <sys_clock_set_timeout+0xfc>)
 8014648:	fba4 4303 	umull	r4, r3, r4, r3
 801464c:	0a1b      	lsrs	r3, r3, #8
		delay -= unannounced;
 801464e:	1a12      	subs	r2, r2, r0
 8014650:	fb07 2303 	mla	r3, r7, r3, r2
		delay = MAX(delay, MIN_DELAY);
 8014654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014658:	d91c      	bls.n	8014694 <sys_clock_set_timeout+0xac>
		if (delay > MAX_CYCLES) {
 801465a:	4a23      	ldr	r2, [pc, #140]	; (80146e8 <sys_clock_set_timeout+0x100>)
 801465c:	4293      	cmp	r3, r2
 801465e:	d91b      	bls.n	8014698 <sys_clock_set_timeout+0xb0>
			last_load = MAX_CYCLES;
 8014660:	4b1b      	ldr	r3, [pc, #108]	; (80146d0 <sys_clock_set_timeout+0xe8>)
 8014662:	601a      	str	r2, [r3, #0]
 8014664:	e01a      	b.n	801469c <sys_clock_set_timeout+0xb4>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8014666:	4a1b      	ldr	r2, [pc, #108]	; (80146d4 <sys_clock_set_timeout+0xec>)
 8014668:	6813      	ldr	r3, [r2, #0]
 801466a:	f023 0301 	bic.w	r3, r3, #1
 801466e:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 8014670:	4b17      	ldr	r3, [pc, #92]	; (80146d0 <sys_clock_set_timeout+0xe8>)
 8014672:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8014676:	601a      	str	r2, [r3, #0]
		return;
 8014678:	e023      	b.n	80146c2 <sys_clock_set_timeout+0xda>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 801467a:	f240 5075 	movw	r0, #1397	; 0x575
 801467e:	e7bf      	b.n	8014600 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
 8014680:	2400      	movs	r4, #0
 8014682:	e7c2      	b.n	801460a <sys_clock_set_timeout+0x22>
 8014684:	f240 5475 	movw	r4, #1397	; 0x575
 8014688:	e7bf      	b.n	801460a <sys_clock_set_timeout+0x22>
		last_load = MIN_DELAY;
 801468a:	4b11      	ldr	r3, [pc, #68]	; (80146d0 <sys_clock_set_timeout+0xe8>)
 801468c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014690:	601a      	str	r2, [r3, #0]
 8014692:	e003      	b.n	801469c <sys_clock_set_timeout+0xb4>
		delay = MAX(delay, MIN_DELAY);
 8014694:	f44f 6380 	mov.w	r3, #1024	; 0x400
			last_load = delay;
 8014698:	4a0d      	ldr	r2, [pc, #52]	; (80146d0 <sys_clock_set_timeout+0xe8>)
 801469a:	6013      	str	r3, [r2, #0]
	val2 = SysTick->VAL;
 801469c:	4b0d      	ldr	r3, [pc, #52]	; (80146d4 <sys_clock_set_timeout+0xec>)
 801469e:	689c      	ldr	r4, [r3, #8]
	SysTick->LOAD = last_load - 1;
 80146a0:	4a0b      	ldr	r2, [pc, #44]	; (80146d0 <sys_clock_set_timeout+0xe8>)
 80146a2:	6812      	ldr	r2, [r2, #0]
 80146a4:	3a01      	subs	r2, #1
 80146a6:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 80146a8:	2200      	movs	r2, #0
 80146aa:	609a      	str	r2, [r3, #8]
	if (val1 < val2) {
 80146ac:	42a1      	cmp	r1, r4
 80146ae:	d209      	bcs.n	80146c4 <sys_clock_set_timeout+0xdc>
		cycle_count += (val1 + (last_load_ - val2));
 80146b0:	1b2d      	subs	r5, r5, r4
 80146b2:	440d      	add	r5, r1
 80146b4:	4428      	add	r0, r5
 80146b6:	4b08      	ldr	r3, [pc, #32]	; (80146d8 <sys_clock_set_timeout+0xf0>)
 80146b8:	6018      	str	r0, [r3, #0]
	__asm__ volatile(
 80146ba:	f386 8811 	msr	BASEPRI, r6
 80146be:	f3bf 8f6f 	isb	sy
}
 80146c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cycle_count += (val1 - val2);
 80146c4:	1b0d      	subs	r5, r1, r4
 80146c6:	4428      	add	r0, r5
 80146c8:	4b03      	ldr	r3, [pc, #12]	; (80146d8 <sys_clock_set_timeout+0xf0>)
 80146ca:	6018      	str	r0, [r3, #0]
 80146cc:	e7f5      	b.n	80146ba <sys_clock_set_timeout+0xd2>
 80146ce:	bf00      	nop
 80146d0:	20003738 	.word	0x20003738
 80146d4:	e000e010 	.word	0xe000e010
 80146d8:	20003734 	.word	0x20003734
 80146dc:	2000373c 	.word	0x2000373c
 80146e0:	20003730 	.word	0x20003730
 80146e4:	057619f1 	.word	0x057619f1
 80146e8:	00ffcc60 	.word	0x00ffcc60

080146ec <sys_clock_elapsed>:
{
 80146ec:	b510      	push	{r4, lr}
	__asm__ volatile(
 80146ee:	f04f 0304 	mov.w	r3, #4
 80146f2:	f3ef 8411 	mrs	r4, BASEPRI
 80146f6:	f383 8812 	msr	BASEPRI_MAX, r3
 80146fa:	f3bf 8f6f 	isb	sy
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 80146fe:	f7ff ff15 	bl	801452c <elapsed>
 8014702:	4b07      	ldr	r3, [pc, #28]	; (8014720 <sys_clock_elapsed+0x34>)
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	4418      	add	r0, r3
 8014708:	4b06      	ldr	r3, [pc, #24]	; (8014724 <sys_clock_elapsed+0x38>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	1ac0      	subs	r0, r0, r3
	__asm__ volatile(
 801470e:	f384 8811 	msr	BASEPRI, r4
 8014712:	f3bf 8f6f 	isb	sy
	return cyc / CYC_PER_TICK;
 8014716:	4b04      	ldr	r3, [pc, #16]	; (8014728 <sys_clock_elapsed+0x3c>)
 8014718:	fba3 3000 	umull	r3, r0, r3, r0
}
 801471c:	0a00      	lsrs	r0, r0, #8
 801471e:	bd10      	pop	{r4, pc}
 8014720:	20003734 	.word	0x20003734
 8014724:	20003730 	.word	0x20003730
 8014728:	057619f1 	.word	0x057619f1

0801472c <sys_clock_cycle_get_32>:
{
 801472c:	b510      	push	{r4, lr}
	__asm__ volatile(
 801472e:	f04f 0304 	mov.w	r3, #4
 8014732:	f3ef 8411 	mrs	r4, BASEPRI
 8014736:	f383 8812 	msr	BASEPRI_MAX, r3
 801473a:	f3bf 8f6f 	isb	sy
	uint32_t ret = elapsed() + cycle_count;
 801473e:	f7ff fef5 	bl	801452c <elapsed>
 8014742:	4b04      	ldr	r3, [pc, #16]	; (8014754 <sys_clock_cycle_get_32+0x28>)
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	4418      	add	r0, r3
	__asm__ volatile(
 8014748:	f384 8811 	msr	BASEPRI, r4
 801474c:	f3bf 8f6f 	isb	sy
}
 8014750:	bd10      	pop	{r4, pc}
 8014752:	bf00      	nop
 8014754:	20003734 	.word	0x20003734

08014758 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8014758:	4b11      	ldr	r3, [pc, #68]	; (80147a0 <_DoInit+0x48>)
 801475a:	2203      	movs	r2, #3
 801475c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 801475e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8014760:	4910      	ldr	r1, [pc, #64]	; (80147a4 <_DoInit+0x4c>)
 8014762:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8014764:	4a10      	ldr	r2, [pc, #64]	; (80147a8 <_DoInit+0x50>)
 8014766:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8014768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801476c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 801476e:	2200      	movs	r2, #0
 8014770:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8014772:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8014774:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8014776:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8014778:	490c      	ldr	r1, [pc, #48]	; (80147ac <_DoInit+0x54>)
 801477a:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 801477c:	2110      	movs	r1, #16
 801477e:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8014780:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8014782:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8014784:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8014786:	4a0a      	ldr	r2, [pc, #40]	; (80147b0 <_DoInit+0x58>)
 8014788:	6810      	ldr	r0, [r2, #0]
 801478a:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
 801478e:	4a09      	ldr	r2, [pc, #36]	; (80147b4 <_DoInit+0x5c>)
 8014790:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014794:	6018      	str	r0, [r3, #0]
 8014796:	8099      	strh	r1, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
 8014798:	2220      	movs	r2, #32
 801479a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
 801479c:	4770      	bx	lr
 801479e:	bf00      	nop
 80147a0:	20003740 	.word	0x20003740
 80147a4:	0801e880 	.word	0x0801e880
 80147a8:	200037f8 	.word	0x200037f8
 80147ac:	200037e8 	.word	0x200037e8
 80147b0:	0801e88c 	.word	0x0801e88c
 80147b4:	0801e890 	.word	0x0801e890

080147b8 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80147b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147bc:	4604      	mov	r4, r0
 80147be:	460e      	mov	r6, r1
 80147c0:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
 80147c2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80147c6:	4a2d      	ldr	r2, [pc, #180]	; (801487c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
 80147c8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80147cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
 80147ce:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 80147d0:	42bb      	cmp	r3, r7
 80147d2:	d84b      	bhi.n	801486c <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80147d4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80147d8:	4928      	ldr	r1, [pc, #160]	; (801487c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
 80147da:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80147de:	f8d2 8020 	ldr.w	r8, [r2, #32]
 80147e2:	eba8 0907 	sub.w	r9, r8, r7
 80147e6:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
 80147ea:	4295      	cmp	r5, r2
 80147ec:	d904      	bls.n	80147f8 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
 80147ee:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
 80147f0:	429d      	cmp	r5, r3
 80147f2:	d917      	bls.n	8014824 <SEGGER_RTT_WriteSkipNoLock+0x6c>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
 80147f4:	2000      	movs	r0, #0
 80147f6:	e03e      	b.n	8014876 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80147f8:	f8df 8080 	ldr.w	r8, [pc, #128]	; 801487c <SEGGER_RTT_WriteSkipNoLock+0xc4>
 80147fc:	1c63      	adds	r3, r4, #1
 80147fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014802:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8014806:	6858      	ldr	r0, [r3, #4]
 8014808:	462a      	mov	r2, r5
 801480a:	4631      	mov	r1, r6
 801480c:	4438      	add	r0, r7
 801480e:	f008 f813 	bl	801c838 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8014812:	443d      	add	r5, r7
 8014814:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014818:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
 801481c:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
      return 1;
 8014820:	2001      	movs	r0, #1
 8014822:	e028      	b.n	8014876 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8014824:	1c43      	adds	r3, r0, #1
 8014826:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801482a:	4a14      	ldr	r2, [pc, #80]	; (801487c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
 801482c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014830:	6858      	ldr	r0, [r3, #4]
 8014832:	464a      	mov	r2, r9
 8014834:	4631      	mov	r1, r6
 8014836:	4438      	add	r0, r7
 8014838:	f007 fffe 	bl	801c838 <memcpy>
      NumBytes -= Rem;
 801483c:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
 8014840:	197f      	adds	r7, r7, r5
 8014842:	d00b      	beq.n	801485c <SEGGER_RTT_WriteSkipNoLock+0xa4>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8014844:	1c63      	adds	r3, r4, #1
 8014846:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801484a:	4a0c      	ldr	r2, [pc, #48]	; (801487c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
 801484c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014850:	463a      	mov	r2, r7
 8014852:	eb06 0109 	add.w	r1, r6, r9
 8014856:	6858      	ldr	r0, [r3, #4]
 8014858:	f007 ffee 	bl	801c838 <memcpy>
      pRing->WrOff = NumBytes;
 801485c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014860:	4b06      	ldr	r3, [pc, #24]	; (801487c <SEGGER_RTT_WriteSkipNoLock+0xc4>)
 8014862:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8014866:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
 8014868:	2001      	movs	r0, #1
 801486a:	e004      	b.n	8014876 <SEGGER_RTT_WriteSkipNoLock+0xbe>
    Avail = RdOff - WrOff - 1u;
 801486c:	1bdb      	subs	r3, r3, r7
 801486e:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
 8014870:	42ab      	cmp	r3, r5
 8014872:	d2c1      	bcs.n	80147f8 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
 8014874:	2000      	movs	r0, #0
}
 8014876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801487a:	bf00      	nop
 801487c:	20003740 	.word	0x20003740

08014880 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8014880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014882:	460f      	mov	r7, r1
 8014884:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8014886:	4b18      	ldr	r3, [pc, #96]	; (80148e8 <SEGGER_RTT_WriteNoLock+0x68>)
 8014888:	1c45      	adds	r5, r0, #1
 801488a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801488e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8014892:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014896:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801489a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 801489c:	2c01      	cmp	r4, #1
 801489e:	d011      	beq.n	80148c4 <SEGGER_RTT_WriteNoLock+0x44>
 80148a0:	2c02      	cmp	r4, #2
 80148a2:	d01c      	beq.n	80148de <SEGGER_RTT_WriteNoLock+0x5e>
 80148a4:	b114      	cbz	r4, 80148ac <SEGGER_RTT_WriteNoLock+0x2c>
 80148a6:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
 80148a8:	4620      	mov	r0, r4
 80148aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
 80148ac:	4628      	mov	r0, r5
 80148ae:	f006 ffec 	bl	801b88a <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
 80148b2:	4286      	cmp	r6, r0
 80148b4:	d8f8      	bhi.n	80148a8 <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
 80148b6:	4632      	mov	r2, r6
 80148b8:	4639      	mov	r1, r7
 80148ba:	4628      	mov	r0, r5
 80148bc:	f006 fff1 	bl	801b8a2 <_WriteNoCheck>
      Status = NumBytes;
 80148c0:	4634      	mov	r4, r6
 80148c2:	e7f1      	b.n	80148a8 <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
 80148c4:	4628      	mov	r0, r5
 80148c6:	f006 ffe0 	bl	801b88a <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
 80148ca:	4634      	mov	r4, r6
 80148cc:	4286      	cmp	r6, r0
 80148ce:	bf28      	it	cs
 80148d0:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
 80148d2:	4622      	mov	r2, r4
 80148d4:	4639      	mov	r1, r7
 80148d6:	4628      	mov	r0, r5
 80148d8:	f006 ffe3 	bl	801b8a2 <_WriteNoCheck>
    break;
 80148dc:	e7e4      	b.n	80148a8 <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80148de:	4628      	mov	r0, r5
 80148e0:	f007 f801 	bl	801b8e6 <_WriteBlocking>
 80148e4:	4604      	mov	r4, r0
    break;
 80148e6:	e7df      	b.n	80148a8 <SEGGER_RTT_WriteNoLock+0x28>
 80148e8:	20003740 	.word	0x20003740

080148ec <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
 80148ec:	4b06      	ldr	r3, [pc, #24]	; (8014908 <SEGGER_RTT_HasDataUp+0x1c>)
 80148ee:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80148f2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80148f6:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
 80148f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80148fc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8014900:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8014902:	1a80      	subs	r0, r0, r2
 8014904:	4770      	bx	lr
 8014906:	bf00      	nop
 8014908:	20003740 	.word	0x20003740

0801490c <tmux1208_set_active_channel>:
};

static int tmux1208_set_active_channel(const struct device *dev, int channel)
{
	// Use channel 1 to 8 syntax to correspond to the datasheet
	if (channel < 1 || channel > 8)
 801490c:	1e4b      	subs	r3, r1, #1
 801490e:	2b07      	cmp	r3, #7
 8014910:	d801      	bhi.n	8014916 <tmux1208_set_active_channel+0xa>

	// err |= gpio_pin_set(a0->port, a0->pin, ((channel - 1) >> 0) & 1);
	// err |= gpio_pin_set(a1->port, a1->pin, ((channel - 1) >> 1) & 1);
	// err |= gpio_pin_set(a2->port, a2->pin, ((channel - 1) >> 2) & 1);

	return err;
 8014912:	2000      	movs	r0, #0
}
 8014914:	4770      	bx	lr
{
 8014916:	b500      	push	{lr}
 8014918:	b089      	sub	sp, #36	; 0x24
		LOG_ERR("Channel %d is invalid - range from 1 to 8.", channel);
 801491a:	4b14      	ldr	r3, [pc, #80]	; (801496c <tmux1208_set_active_channel+0x60>)
 801491c:	9306      	str	r3, [sp, #24]
 801491e:	9107      	str	r1, [sp, #28]
 8014920:	2300      	movs	r3, #0
 8014922:	f8ad 3005 	strh.w	r3, [sp, #5]
 8014926:	f88d 3007 	strb.w	r3, [sp, #7]
 801492a:	2203      	movs	r2, #3
 801492c:	f88d 2004 	strb.w	r2, [sp, #4]
 8014930:	f88d 3006 	strb.w	r3, [sp, #6]
 8014934:	9a01      	ldr	r2, [sp, #4]
 8014936:	9205      	str	r2, [sp, #20]
 8014938:	461a      	mov	r2, r3
 801493a:	f363 0200 	bfi	r2, r3, #0, #1
 801493e:	f363 0241 	bfi	r2, r3, #1, #1
 8014942:	f363 0282 	bfi	r2, r3, #2, #1
 8014946:	f363 02c5 	bfi	r2, r3, #3, #3
 801494a:	2101      	movs	r1, #1
 801494c:	f361 1288 	bfi	r2, r1, #6, #3
 8014950:	210c      	movs	r1, #12
 8014952:	f361 2252 	bfi	r2, r1, #9, #10
 8014956:	f3c2 0212 	ubfx	r2, r2, #0, #19
 801495a:	4905      	ldr	r1, [pc, #20]	; (8014970 <tmux1208_set_active_channel+0x64>)
 801495c:	a802      	add	r0, sp, #8
 801495e:	f003 f9f8 	bl	8017d52 <z_log_msg2_finalize>
		return -EIO;
 8014962:	f06f 0004 	mvn.w	r0, #4
}
 8014966:	b009      	add	sp, #36	; 0x24
 8014968:	f85d fb04 	ldr.w	pc, [sp], #4
 801496c:	0801e898 	.word	0x0801e898
 8014970:	0801d7e8 	.word	0x0801d7e8

08014974 <tmux1208_initialize>:
#endif
	return 0;
}

static int tmux1208_initialize(const struct device *dev)
{
 8014974:	b570      	push	{r4, r5, r6, lr}
 8014976:	b088      	sub	sp, #32
	const struct tmux1208_config *config = dev->config;
 8014978:	6846      	ldr	r6, [r0, #4]
		}
		gpio_pin_set(config->en->port, config->en->pin, 0);
	}
#endif

	for (size_t i = 0; (i < 3) && !err; i++)
 801497a:	2500      	movs	r5, #0
 801497c:	e028      	b.n	80149d0 <tmux1208_initialize+0x5c>
	{
		int addr = config->addr[i];
 801497e:	6833      	ldr	r3, [r6, #0]
 8014980:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
		LOG_INF("Address is: %d", addr);
 8014984:	4a15      	ldr	r2, [pc, #84]	; (80149dc <tmux1208_initialize+0x68>)
 8014986:	9206      	str	r2, [sp, #24]
 8014988:	9307      	str	r3, [sp, #28]
 801498a:	2300      	movs	r3, #0
 801498c:	f8ad 3005 	strh.w	r3, [sp, #5]
 8014990:	f88d 3007 	strb.w	r3, [sp, #7]
 8014994:	2203      	movs	r2, #3
 8014996:	f88d 2004 	strb.w	r2, [sp, #4]
 801499a:	f88d 3006 	strb.w	r3, [sp, #6]
 801499e:	9901      	ldr	r1, [sp, #4]
 80149a0:	9105      	str	r1, [sp, #20]
 80149a2:	f363 0400 	bfi	r4, r3, #0, #1
 80149a6:	f363 0441 	bfi	r4, r3, #1, #1
 80149aa:	f363 0482 	bfi	r4, r3, #2, #1
 80149ae:	f363 04c5 	bfi	r4, r3, #3, #3
 80149b2:	f362 1488 	bfi	r4, r2, #6, #3
 80149b6:	220c      	movs	r2, #12
 80149b8:	f362 2452 	bfi	r4, r2, #9, #10
 80149bc:	f363 44de 	bfi	r4, r3, #19, #12
 80149c0:	f363 74df 	bfi	r4, r3, #31, #1
 80149c4:	4622      	mov	r2, r4
 80149c6:	4906      	ldr	r1, [pc, #24]	; (80149e0 <tmux1208_initialize+0x6c>)
 80149c8:	a802      	add	r0, sp, #8
 80149ca:	f003 f9c2 	bl	8017d52 <z_log_msg2_finalize>
	for (size_t i = 0; (i < 3) && !err; i++)
 80149ce:	3501      	adds	r5, #1
 80149d0:	2d02      	cmp	r5, #2
 80149d2:	d9d4      	bls.n	801497e <tmux1208_initialize+0xa>
		// 	err = -ENODEV;
		// }
	}

	return err;
}
 80149d4:	2000      	movs	r0, #0
 80149d6:	b008      	add	sp, #32
 80149d8:	bd70      	pop	{r4, r5, r6, pc}
 80149da:	bf00      	nop
 80149dc:	0801e8c4 	.word	0x0801e8c4
 80149e0:	0801d7e8 	.word	0x0801d7e8

080149e4 <ERU1_0_IRQHandler>:
}



void ERU1_0_IRQHandler(const void* ptr)
{
 80149e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80149e8:	b08f      	sub	sp, #60	; 0x3c
 80149ea:	4606      	mov	r6, r0
	LOG_ERR("%s: Entered.", __func__);
 80149ec:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8014aec <ERU1_0_IRQHandler+0x108>
 80149f0:	4b37      	ldr	r3, [pc, #220]	; (8014ad0 <ERU1_0_IRQHandler+0xec>)
 80149f2:	9302      	str	r3, [sp, #8]
 80149f4:	4b37      	ldr	r3, [pc, #220]	; (8014ad4 <ERU1_0_IRQHandler+0xf0>)
 80149f6:	9301      	str	r3, [sp, #4]
 80149f8:	2400      	movs	r4, #0
 80149fa:	9400      	str	r4, [sp, #0]
 80149fc:	4623      	mov	r3, r4
 80149fe:	2201      	movs	r2, #1
 8014a00:	4641      	mov	r1, r8
 8014a02:	4620      	mov	r0, r4
 8014a04:	f006 ffb2 	bl	801b96c <z_log_msg2_runtime_create>
	return port->data;
 8014a08:	6935      	ldr	r5, [r6, #16]

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8014a0a:	4b33      	ldr	r3, [pc, #204]	; (8014ad8 <ERU1_0_IRQHandler+0xf4>)
 8014a0c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8014a10:	605a      	str	r2, [r3, #4]
	const struct device *port = (struct device *)ptr;
	struct gpio_xmc_data *data = get_port_data(port);
    // LED toggle
    XMC_GPIO_ToggleOutput(XMC_GPIO_PORT1,0);
	LOG_ERR ("bool:%d", sys_slist_is_empty (&(data->callbacks)));
 8014a12:	4b32      	ldr	r3, [pc, #200]	; (8014adc <ERU1_0_IRQHandler+0xf8>)
 8014a14:	930c      	str	r3, [sp, #48]	; 0x30
	return list->head;
 8014a16:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_IS_EMPTY(slist)
 8014a18:	fab3 f383 	clz	r3, r3
 8014a1c:	095b      	lsrs	r3, r3, #5
 8014a1e:	930d      	str	r3, [sp, #52]	; 0x34
 8014a20:	f8ad 401d 	strh.w	r4, [sp, #29]
 8014a24:	f88d 401f 	strb.w	r4, [sp, #31]
 8014a28:	2303      	movs	r3, #3
 8014a2a:	f88d 301c 	strb.w	r3, [sp, #28]
 8014a2e:	f88d 401e 	strb.w	r4, [sp, #30]
 8014a32:	9b07      	ldr	r3, [sp, #28]
 8014a34:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a36:	4622      	mov	r2, r4
 8014a38:	f364 0200 	bfi	r2, r4, #0, #1
 8014a3c:	f364 0241 	bfi	r2, r4, #1, #1
 8014a40:	f364 0282 	bfi	r2, r4, #2, #1
 8014a44:	f364 02c5 	bfi	r2, r4, #3, #3
 8014a48:	f04f 0901 	mov.w	r9, #1
 8014a4c:	f369 1288 	bfi	r2, r9, #6, #3
 8014a50:	230c      	movs	r3, #12
 8014a52:	f363 2252 	bfi	r2, r3, #9, #10
 8014a56:	4623      	mov	r3, r4
 8014a58:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8014a5c:	4641      	mov	r1, r8
 8014a5e:	a808      	add	r0, sp, #32
 8014a60:	f003 f977 	bl	8017d52 <z_log_msg2_finalize>
	gpio_fire_callbacks(&(data->callbacks), port, data->pin_int_en);
 8014a64:	68ef      	ldr	r7, [r5, #12]
	LOG_ERR("Entered %s", __func__);
 8014a66:	4b1e      	ldr	r3, [pc, #120]	; (8014ae0 <ERU1_0_IRQHandler+0xfc>)
 8014a68:	9302      	str	r3, [sp, #8]
 8014a6a:	4b1e      	ldr	r3, [pc, #120]	; (8014ae4 <ERU1_0_IRQHandler+0x100>)
 8014a6c:	9301      	str	r3, [sp, #4]
 8014a6e:	9400      	str	r4, [sp, #0]
 8014a70:	4623      	mov	r3, r4
 8014a72:	464a      	mov	r2, r9
 8014a74:	4641      	mov	r1, r8
 8014a76:	4620      	mov	r0, r4
 8014a78:	f006 ff78 	bl	801b96c <z_log_msg2_runtime_create>
	return list->head;
 8014a7c:	686c      	ldr	r4, [r5, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8014a7e:	b11c      	cbz	r4, 8014a88 <ERU1_0_IRQHandler+0xa4>
 8014a80:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 8014a82:	b14c      	cbz	r4, 8014a98 <ERU1_0_IRQHandler+0xb4>
	return node->next;
 8014a84:	6825      	ldr	r5, [r4, #0]
 8014a86:	e007      	b.n	8014a98 <ERU1_0_IRQHandler+0xb4>
 8014a88:	4625      	mov	r5, r4
 8014a8a:	e005      	b.n	8014a98 <ERU1_0_IRQHandler+0xb4>
 8014a8c:	b1dd      	cbz	r5, 8014ac6 <ERU1_0_IRQHandler+0xe2>
 8014a8e:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
 8014a90:	b105      	cbz	r5, 8014a94 <ERU1_0_IRQHandler+0xb0>
	return node->next;
 8014a92:	682b      	ldr	r3, [r5, #0]
 8014a94:	462c      	mov	r4, r5
 8014a96:	461d      	mov	r5, r3
 8014a98:	b1bc      	cbz	r4, 8014aca <ERU1_0_IRQHandler+0xe6>
		LOG_ERR ("%s:cb->pin_mask:%d pins:%d", __func__, cb->pin_mask, pins);
 8014a9a:	9704      	str	r7, [sp, #16]
 8014a9c:	68a3      	ldr	r3, [r4, #8]
 8014a9e:	9303      	str	r3, [sp, #12]
 8014aa0:	4b0f      	ldr	r3, [pc, #60]	; (8014ae0 <ERU1_0_IRQHandler+0xfc>)
 8014aa2:	9302      	str	r3, [sp, #8]
 8014aa4:	4b10      	ldr	r3, [pc, #64]	; (8014ae8 <ERU1_0_IRQHandler+0x104>)
 8014aa6:	9301      	str	r3, [sp, #4]
 8014aa8:	2000      	movs	r0, #0
 8014aaa:	9000      	str	r0, [sp, #0]
 8014aac:	4603      	mov	r3, r0
 8014aae:	2201      	movs	r2, #1
 8014ab0:	490e      	ldr	r1, [pc, #56]	; (8014aec <ERU1_0_IRQHandler+0x108>)
 8014ab2:	f006 ff5b 	bl	801b96c <z_log_msg2_runtime_create>
		if (cb->pin_mask & pins) {
 8014ab6:	68a2      	ldr	r2, [r4, #8]
 8014ab8:	403a      	ands	r2, r7
 8014aba:	d0e7      	beq.n	8014a8c <ERU1_0_IRQHandler+0xa8>
			cb->handler(port, cb, cb->pin_mask & pins);
 8014abc:	6863      	ldr	r3, [r4, #4]
 8014abe:	4621      	mov	r1, r4
 8014ac0:	4630      	mov	r0, r6
 8014ac2:	4798      	blx	r3
 8014ac4:	e7e2      	b.n	8014a8c <ERU1_0_IRQHandler+0xa8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8014ac6:	462b      	mov	r3, r5
 8014ac8:	e7e4      	b.n	8014a94 <ERU1_0_IRQHandler+0xb0>
}
 8014aca:	b00f      	add	sp, #60	; 0x3c
 8014acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ad0:	0801ea34 	.word	0x0801ea34
 8014ad4:	0801e918 	.word	0x0801e918
 8014ad8:	48028100 	.word	0x48028100
 8014adc:	0801e928 	.word	0x0801e928
 8014ae0:	0801e99c 	.word	0x0801e99c
 8014ae4:	0801e930 	.word	0x0801e930
 8014ae8:	0801e93c 	.word	0x0801e93c
 8014aec:	0801d700 	.word	0x0801d700

08014af0 <gpio_xmc_manage_callback>:


static int gpio_xmc_manage_callback(const struct device *port,
			       struct gpio_callback *cb,
			       bool set)
{
 8014af0:	b570      	push	{r4, r5, r6, lr}
 8014af2:	b084      	sub	sp, #16
 8014af4:	4606      	mov	r6, r0
 8014af6:	460c      	mov	r4, r1
 8014af8:	4615      	mov	r5, r2
	LOG_ERR("%s: Entered.", __func__);
 8014afa:	4b1e      	ldr	r3, [pc, #120]	; (8014b74 <gpio_xmc_manage_callback+0x84>)
 8014afc:	9302      	str	r3, [sp, #8]
 8014afe:	4b1e      	ldr	r3, [pc, #120]	; (8014b78 <gpio_xmc_manage_callback+0x88>)
 8014b00:	9301      	str	r3, [sp, #4]
 8014b02:	2000      	movs	r0, #0
 8014b04:	9000      	str	r0, [sp, #0]
 8014b06:	4603      	mov	r3, r0
 8014b08:	2201      	movs	r2, #1
 8014b0a:	491c      	ldr	r1, [pc, #112]	; (8014b7c <gpio_xmc_manage_callback+0x8c>)
 8014b0c:	f006 ff2e 	bl	801b96c <z_log_msg2_runtime_create>
	return port->data;
 8014b10:	6932      	ldr	r2, [r6, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
 8014b12:	1d10      	adds	r0, r2, #4
	return list->head;
 8014b14:	6853      	ldr	r3, [r2, #4]
	if (!sys_slist_is_empty(callbacks)) {
 8014b16:	b1db      	cbz	r3, 8014b50 <gpio_xmc_manage_callback+0x60>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
 8014b18:	4626      	mov	r6, r4
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8014b1a:	2100      	movs	r1, #0
 8014b1c:	e00a      	b.n	8014b34 <gpio_xmc_manage_callback+0x44>
	return node->next;
 8014b1e:	6823      	ldr	r3, [r4, #0]
	list->head = node;
 8014b20:	6053      	str	r3, [r2, #4]
	return list->tail;
 8014b22:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
 8014b24:	428c      	cmp	r4, r1
 8014b26:	d10f      	bne.n	8014b48 <gpio_xmc_manage_callback+0x58>
	list->tail = node;
 8014b28:	6043      	str	r3, [r0, #4]
}
 8014b2a:	e00d      	b.n	8014b48 <gpio_xmc_manage_callback+0x58>
	list->tail = node;
 8014b2c:	6041      	str	r1, [r0, #4]
}
 8014b2e:	e00b      	b.n	8014b48 <gpio_xmc_manage_callback+0x58>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8014b30:	4619      	mov	r1, r3
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	b15b      	cbz	r3, 8014b4e <gpio_xmc_manage_callback+0x5e>
 8014b36:	429e      	cmp	r6, r3
 8014b38:	d1fa      	bne.n	8014b30 <gpio_xmc_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
 8014b3a:	2900      	cmp	r1, #0
 8014b3c:	d0ef      	beq.n	8014b1e <gpio_xmc_manage_callback+0x2e>
	return node->next;
 8014b3e:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
 8014b40:	600b      	str	r3, [r1, #0]
	return list->tail;
 8014b42:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
 8014b44:	429c      	cmp	r4, r3
 8014b46:	d0f1      	beq.n	8014b2c <gpio_xmc_manage_callback+0x3c>
	parent->next = child;
 8014b48:	2300      	movs	r3, #0
 8014b4a:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8014b4c:	e000      	b.n	8014b50 <gpio_xmc_manage_callback+0x60>
			if (!set) {
 8014b4e:	b155      	cbz	r5, 8014b66 <gpio_xmc_manage_callback+0x76>
	if (set) {
 8014b50:	b165      	cbz	r5, 8014b6c <gpio_xmc_manage_callback+0x7c>
	return list->head;
 8014b52:	6853      	ldr	r3, [r2, #4]
	parent->next = child;
 8014b54:	6023      	str	r3, [r4, #0]
	list->head = node;
 8014b56:	6054      	str	r4, [r2, #4]
	return list->tail;
 8014b58:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
 8014b5a:	b10b      	cbz	r3, 8014b60 <gpio_xmc_manage_callback+0x70>
	return 0;
 8014b5c:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
 8014b5e:	e006      	b.n	8014b6e <gpio_xmc_manage_callback+0x7e>
	list->tail = node;
 8014b60:	6044      	str	r4, [r0, #4]
	return 0;
 8014b62:	2000      	movs	r0, #0
}
 8014b64:	e003      	b.n	8014b6e <gpio_xmc_manage_callback+0x7e>
				return -EINVAL;
 8014b66:	f06f 0015 	mvn.w	r0, #21
 8014b6a:	e000      	b.n	8014b6e <gpio_xmc_manage_callback+0x7e>
	return 0;
 8014b6c:	2000      	movs	r0, #0
				     cb, set);
}
 8014b6e:	b004      	add	sp, #16
 8014b70:	bd70      	pop	{r4, r5, r6, pc}
 8014b72:	bf00      	nop
 8014b74:	0801ea6c 	.word	0x0801ea6c
 8014b78:	0801e918 	.word	0x0801e918
 8014b7c:	0801d700 	.word	0x0801d700

08014b80 <gpio_xmc_port_clear_bits_raw>:
{
 8014b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b84:	b084      	sub	sp, #16
 8014b86:	4606      	mov	r6, r0
 8014b88:	460d      	mov	r5, r1
	LOG_ERR("%s: Entered.", __func__);
 8014b8a:	4f13      	ldr	r7, [pc, #76]	; (8014bd8 <gpio_xmc_port_clear_bits_raw+0x58>)
 8014b8c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8014be4 <gpio_xmc_port_clear_bits_raw+0x64>
 8014b90:	f8cd 8008 	str.w	r8, [sp, #8]
 8014b94:	4b11      	ldr	r3, [pc, #68]	; (8014bdc <gpio_xmc_port_clear_bits_raw+0x5c>)
 8014b96:	9301      	str	r3, [sp, #4]
 8014b98:	2400      	movs	r4, #0
 8014b9a:	9400      	str	r4, [sp, #0]
 8014b9c:	4623      	mov	r3, r4
 8014b9e:	2201      	movs	r2, #1
 8014ba0:	4639      	mov	r1, r7
 8014ba2:	4620      	mov	r0, r4
 8014ba4:	f006 fee2 	bl	801b96c <z_log_msg2_runtime_create>
	return port->config;
 8014ba8:	6873      	ldr	r3, [r6, #4]
	XMC_GPIO_PORT_t *reg = get_port_cfg(port)->port;
 8014baa:	685b      	ldr	r3, [r3, #4]
  port->OMR = 0x10000U << pin;
 8014bac:	b2ed      	uxtb	r5, r5
 8014bae:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8014bb2:	fa01 f505 	lsl.w	r5, r1, r5
 8014bb6:	605d      	str	r5, [r3, #4]
	LOG_ERR("%s:Toggled GPIO.", __func__);
 8014bb8:	f8cd 8008 	str.w	r8, [sp, #8]
 8014bbc:	4b08      	ldr	r3, [pc, #32]	; (8014be0 <gpio_xmc_port_clear_bits_raw+0x60>)
 8014bbe:	9301      	str	r3, [sp, #4]
 8014bc0:	9400      	str	r4, [sp, #0]
 8014bc2:	4623      	mov	r3, r4
 8014bc4:	2201      	movs	r2, #1
 8014bc6:	4639      	mov	r1, r7
 8014bc8:	4620      	mov	r0, r4
 8014bca:	f006 fecf 	bl	801b96c <z_log_msg2_runtime_create>
}
 8014bce:	4620      	mov	r0, r4
 8014bd0:	b004      	add	sp, #16
 8014bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bd6:	bf00      	nop
 8014bd8:	0801d700 	.word	0x0801d700
 8014bdc:	0801e918 	.word	0x0801e918
 8014be0:	0801e958 	.word	0x0801e958
 8014be4:	0801e9dc 	.word	0x0801e9dc

08014be8 <gpio_xmc_port_set_bits_raw>:
{
 8014be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bec:	b084      	sub	sp, #16
 8014bee:	4606      	mov	r6, r0
 8014bf0:	460d      	mov	r5, r1
	LOG_ERR("%s: Entered.", __func__);
 8014bf2:	4f12      	ldr	r7, [pc, #72]	; (8014c3c <gpio_xmc_port_set_bits_raw+0x54>)
 8014bf4:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8014c48 <gpio_xmc_port_set_bits_raw+0x60>
 8014bf8:	f8cd 8008 	str.w	r8, [sp, #8]
 8014bfc:	4b10      	ldr	r3, [pc, #64]	; (8014c40 <gpio_xmc_port_set_bits_raw+0x58>)
 8014bfe:	9301      	str	r3, [sp, #4]
 8014c00:	2400      	movs	r4, #0
 8014c02:	9400      	str	r4, [sp, #0]
 8014c04:	4623      	mov	r3, r4
 8014c06:	2201      	movs	r2, #1
 8014c08:	4639      	mov	r1, r7
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	f006 feae 	bl	801b96c <z_log_msg2_runtime_create>
	return port->config;
 8014c10:	6873      	ldr	r3, [r6, #4]
	XMC_GPIO_PORT_t *reg = get_port_cfg(port)->port;
 8014c12:	685b      	ldr	r3, [r3, #4]
  port->OMR = (uint32_t)0x1U << pin;
 8014c14:	b2ed      	uxtb	r5, r5
 8014c16:	2201      	movs	r2, #1
 8014c18:	fa02 f505 	lsl.w	r5, r2, r5
 8014c1c:	605d      	str	r5, [r3, #4]
	LOG_ERR("%s:Toggled GPIO.", __func__);
 8014c1e:	f8cd 8008 	str.w	r8, [sp, #8]
 8014c22:	4b08      	ldr	r3, [pc, #32]	; (8014c44 <gpio_xmc_port_set_bits_raw+0x5c>)
 8014c24:	9301      	str	r3, [sp, #4]
 8014c26:	9400      	str	r4, [sp, #0]
 8014c28:	4623      	mov	r3, r4
 8014c2a:	4639      	mov	r1, r7
 8014c2c:	4620      	mov	r0, r4
 8014c2e:	f006 fe9d 	bl	801b96c <z_log_msg2_runtime_create>
}
 8014c32:	4620      	mov	r0, r4
 8014c34:	b004      	add	sp, #16
 8014c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c3a:	bf00      	nop
 8014c3c:	0801d700 	.word	0x0801d700
 8014c40:	0801e918 	.word	0x0801e918
 8014c44:	0801e958 	.word	0x0801e958
 8014c48:	0801e9c0 	.word	0x0801e9c0

08014c4c <gpio_xmc_port_set_masked_raw>:
{
 8014c4c:	b510      	push	{r4, lr}
 8014c4e:	b084      	sub	sp, #16
	LOG_ERR("%s: Entered.", __func__);
 8014c50:	4b07      	ldr	r3, [pc, #28]	; (8014c70 <gpio_xmc_port_set_masked_raw+0x24>)
 8014c52:	9302      	str	r3, [sp, #8]
 8014c54:	4b07      	ldr	r3, [pc, #28]	; (8014c74 <gpio_xmc_port_set_masked_raw+0x28>)
 8014c56:	9301      	str	r3, [sp, #4]
 8014c58:	2400      	movs	r4, #0
 8014c5a:	9400      	str	r4, [sp, #0]
 8014c5c:	4623      	mov	r3, r4
 8014c5e:	2201      	movs	r2, #1
 8014c60:	4905      	ldr	r1, [pc, #20]	; (8014c78 <gpio_xmc_port_set_masked_raw+0x2c>)
 8014c62:	4620      	mov	r0, r4
 8014c64:	f006 fe82 	bl	801b96c <z_log_msg2_runtime_create>
}
 8014c68:	4620      	mov	r0, r4
 8014c6a:	b004      	add	sp, #16
 8014c6c:	bd10      	pop	{r4, pc}
 8014c6e:	bf00      	nop
 8014c70:	0801ea14 	.word	0x0801ea14
 8014c74:	0801e918 	.word	0x0801e918
 8014c78:	0801d700 	.word	0x0801d700

08014c7c <gpio_xmc_port_get_raw>:
{
 8014c7c:	b510      	push	{r4, lr}
 8014c7e:	b084      	sub	sp, #16
	LOG_ERR("%s: Entered.", __func__);
 8014c80:	4b07      	ldr	r3, [pc, #28]	; (8014ca0 <gpio_xmc_port_get_raw+0x24>)
 8014c82:	9302      	str	r3, [sp, #8]
 8014c84:	4b07      	ldr	r3, [pc, #28]	; (8014ca4 <gpio_xmc_port_get_raw+0x28>)
 8014c86:	9301      	str	r3, [sp, #4]
 8014c88:	2400      	movs	r4, #0
 8014c8a:	9400      	str	r4, [sp, #0]
 8014c8c:	4623      	mov	r3, r4
 8014c8e:	2201      	movs	r2, #1
 8014c90:	4905      	ldr	r1, [pc, #20]	; (8014ca8 <gpio_xmc_port_get_raw+0x2c>)
 8014c92:	4620      	mov	r0, r4
 8014c94:	f006 fe6a 	bl	801b96c <z_log_msg2_runtime_create>
}
 8014c98:	4620      	mov	r0, r4
 8014c9a:	b004      	add	sp, #16
 8014c9c:	bd10      	pop	{r4, pc}
 8014c9e:	bf00      	nop
 8014ca0:	0801e9fc 	.word	0x0801e9fc
 8014ca4:	0801e918 	.word	0x0801e918
 8014ca8:	0801d700 	.word	0x0801d700

08014cac <gpio_xmc_pin_interrupt_configure>:
{
 8014cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014cb0:	b089      	sub	sp, #36	; 0x24
 8014cb2:	4605      	mov	r5, r0
 8014cb4:	460e      	mov	r6, r1
 8014cb6:	4690      	mov	r8, r2
 8014cb8:	461f      	mov	r7, r3
	LOG_ERR("%s: Entered.", __func__);
 8014cba:	4b3b      	ldr	r3, [pc, #236]	; (8014da8 <gpio_xmc_pin_interrupt_configure+0xfc>)
 8014cbc:	9302      	str	r3, [sp, #8]
 8014cbe:	4b3b      	ldr	r3, [pc, #236]	; (8014dac <gpio_xmc_pin_interrupt_configure+0x100>)
 8014cc0:	9301      	str	r3, [sp, #4]
 8014cc2:	2400      	movs	r4, #0
 8014cc4:	9400      	str	r4, [sp, #0]
 8014cc6:	4623      	mov	r3, r4
 8014cc8:	2201      	movs	r2, #1
 8014cca:	4939      	ldr	r1, [pc, #228]	; (8014db0 <gpio_xmc_pin_interrupt_configure+0x104>)
 8014ccc:	4620      	mov	r0, r4
 8014cce:	f006 fe4d 	bl	801b96c <z_log_msg2_runtime_create>
	return port->data;
 8014cd2:	692d      	ldr	r5, [r5, #16]
    XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_PERIPHERAL_RESET_ERU1);
 8014cd4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8014cd8:	f7f1 f864 	bl	8005da4 <XMC_SCU_INTERRUPT_ClearEventStatus>
    memset(&eruInit, 0, sizeof(XMC_ERU_ETL_CONFIG_t));
 8014cdc:	9406      	str	r4, [sp, #24]
 8014cde:	9407      	str	r4, [sp, #28]
    eruInit.input_a = ERU1_ETL1_INPUTA_P1_15;
 8014ce0:	f04f 0300 	mov.w	r3, #0
 8014ce4:	f364 0301 	bfi	r3, r4, #0, #2
 8014ce8:	f88d 3018 	strb.w	r3, [sp, #24]
    eruInit.output_trigger_channel = XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL0;
 8014cec:	f04f 0309 	mov.w	r3, #9
 8014cf0:	f364 1306 	bfi	r3, r4, #4, #3
 8014cf4:	f88d 301c 	strb.w	r3, [sp, #28]
    memset(&oguInit, 0, sizeof(XMC_ERU_OGU_CONFIG_t));
 8014cf8:	9405      	str	r4, [sp, #20]
    oguInit.service_request = true;
 8014cfa:	f04f 0300 	mov.w	r3, #0
 8014cfe:	2101      	movs	r1, #1
 8014d00:	f361 1305 	bfi	r3, r1, #4, #2
 8014d04:	f88d 3014 	strb.w	r3, [sp, #20]
    XMC_ERU_ETL_Init(ERU1_ETL1, &eruInit);
 8014d08:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8014db8 <gpio_xmc_pin_interrupt_configure+0x10c>
 8014d0c:	aa06      	add	r2, sp, #24
 8014d0e:	4648      	mov	r0, r9
 8014d10:	f003 f8d0 	bl	8017eb4 <XMC_ERU_ETL_Init>
    XMC_ERU_OGU_Init(ERU1_OGU0, &oguInit);
 8014d14:	aa05      	add	r2, sp, #20
 8014d16:	4621      	mov	r1, r4
 8014d18:	4648      	mov	r0, r9
 8014d1a:	f003 f8e0 	bl	8017ede <XMC_ERU_OGU_Init>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014d1e:	4b25      	ldr	r3, [pc, #148]	; (8014db4 <gpio_xmc_pin_interrupt_configure+0x108>)
 8014d20:	223c      	movs	r2, #60	; 0x3c
 8014d22:	f883 2305 	strb.w	r2, [r3, #773]	; 0x305
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014d26:	2220      	movs	r2, #32
 8014d28:	601a      	str	r2, [r3, #0]
	WRITE_BIT(data->pin_int_en, pin, imode != GPIO_INT_MODE_DISABLED);
 8014d2a:	f5b8 5f00 	cmp.w	r8, #8192	; 0x2000
 8014d2e:	d024      	beq.n	8014d7a <gpio_xmc_pin_interrupt_configure+0xce>
 8014d30:	68eb      	ldr	r3, [r5, #12]
 8014d32:	2201      	movs	r2, #1
 8014d34:	40b2      	lsls	r2, r6
 8014d36:	4313      	orrs	r3, r2
 8014d38:	60eb      	str	r3, [r5, #12]
	WRITE_BIT(data->trig_edge, pin, imode == GPIO_INT_MODE_EDGE);
 8014d3a:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
 8014d3e:	d022      	beq.n	8014d86 <gpio_xmc_pin_interrupt_configure+0xda>
 8014d40:	696b      	ldr	r3, [r5, #20]
 8014d42:	2201      	movs	r2, #1
 8014d44:	40b2      	lsls	r2, r6
 8014d46:	ea23 0302 	bic.w	r3, r3, r2
 8014d4a:	616b      	str	r3, [r5, #20]
	WRITE_BIT(data->double_edge, pin, itrig == GPIO_INT_TRIG_BOTH);
 8014d4c:	f5b7 2fc0 	cmp.w	r7, #393216	; 0x60000
 8014d50:	d01e      	beq.n	8014d90 <gpio_xmc_pin_interrupt_configure+0xe4>
 8014d52:	69ab      	ldr	r3, [r5, #24]
 8014d54:	2201      	movs	r2, #1
 8014d56:	40b2      	lsls	r2, r6
 8014d58:	ea23 0302 	bic.w	r3, r3, r2
 8014d5c:	61ab      	str	r3, [r5, #24]
	WRITE_BIT(data->int_active_level, pin, itrig == GPIO_INT_TRIG_HIGH);
 8014d5e:	f5b7 2f80 	cmp.w	r7, #262144	; 0x40000
 8014d62:	d01a      	beq.n	8014d9a <gpio_xmc_pin_interrupt_configure+0xee>
 8014d64:	692b      	ldr	r3, [r5, #16]
 8014d66:	2101      	movs	r1, #1
 8014d68:	fa01 f606 	lsl.w	r6, r1, r6
 8014d6c:	ea23 0606 	bic.w	r6, r3, r6
 8014d70:	612e      	str	r6, [r5, #16]
}
 8014d72:	2000      	movs	r0, #0
 8014d74:	b009      	add	sp, #36	; 0x24
 8014d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, imode != GPIO_INT_MODE_DISABLED);
 8014d7a:	68eb      	ldr	r3, [r5, #12]
 8014d7c:	2201      	movs	r2, #1
 8014d7e:	40b2      	lsls	r2, r6
 8014d80:	ea23 0302 	bic.w	r3, r3, r2
 8014d84:	e7d8      	b.n	8014d38 <gpio_xmc_pin_interrupt_configure+0x8c>
	WRITE_BIT(data->trig_edge, pin, imode == GPIO_INT_MODE_EDGE);
 8014d86:	696b      	ldr	r3, [r5, #20]
 8014d88:	2201      	movs	r2, #1
 8014d8a:	40b2      	lsls	r2, r6
 8014d8c:	4313      	orrs	r3, r2
 8014d8e:	e7dc      	b.n	8014d4a <gpio_xmc_pin_interrupt_configure+0x9e>
	WRITE_BIT(data->double_edge, pin, itrig == GPIO_INT_TRIG_BOTH);
 8014d90:	69ab      	ldr	r3, [r5, #24]
 8014d92:	2201      	movs	r2, #1
 8014d94:	40b2      	lsls	r2, r6
 8014d96:	4313      	orrs	r3, r2
 8014d98:	e7e0      	b.n	8014d5c <gpio_xmc_pin_interrupt_configure+0xb0>
	WRITE_BIT(data->int_active_level, pin, itrig == GPIO_INT_TRIG_HIGH);
 8014d9a:	692b      	ldr	r3, [r5, #16]
 8014d9c:	2101      	movs	r1, #1
 8014d9e:	fa01 f606 	lsl.w	r6, r1, r6
 8014da2:	431e      	orrs	r6, r3
 8014da4:	e7e4      	b.n	8014d70 <gpio_xmc_pin_interrupt_configure+0xc4>
 8014da6:	bf00      	nop
 8014da8:	0801ea48 	.word	0x0801ea48
 8014dac:	0801e918 	.word	0x0801e918
 8014db0:	0801d700 	.word	0x0801d700
 8014db4:	e000e100 	.word	0xe000e100
 8014db8:	40044000 	.word	0x40044000

08014dbc <gpio_xmc_config>:
{
 8014dbc:	b570      	push	{r4, r5, r6, lr}
 8014dbe:	b084      	sub	sp, #16
 8014dc0:	4605      	mov	r5, r0
 8014dc2:	460e      	mov	r6, r1
 8014dc4:	4614      	mov	r4, r2
	LOG_ERR("%s: Entered.", __func__);
 8014dc6:	4b20      	ldr	r3, [pc, #128]	; (8014e48 <gpio_xmc_config+0x8c>)
 8014dc8:	9302      	str	r3, [sp, #8]
 8014dca:	4b20      	ldr	r3, [pc, #128]	; (8014e4c <gpio_xmc_config+0x90>)
 8014dcc:	9301      	str	r3, [sp, #4]
 8014dce:	2000      	movs	r0, #0
 8014dd0:	9000      	str	r0, [sp, #0]
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	2201      	movs	r2, #1
 8014dd6:	491e      	ldr	r1, [pc, #120]	; (8014e50 <gpio_xmc_config+0x94>)
 8014dd8:	f006 fdc8 	bl	801b96c <z_log_msg2_runtime_create>
	return port->config;
 8014ddc:	686b      	ldr	r3, [r5, #4]
	XMC_GPIO_PORT_t *reg = get_port_cfg(port)->port;
 8014dde:	685d      	ldr	r5, [r3, #4]
	if (flags & GPIO_INPUT) {
 8014de0:	f414 7f80 	tst.w	r4, #256	; 0x100
 8014de4:	d111      	bne.n	8014e0a <gpio_xmc_config+0x4e>
	else if (flags & GPIO_OUTPUT) {
 8014de6:	f414 7f00 	tst.w	r4, #512	; 0x200
 8014dea:	d114      	bne.n	8014e16 <gpio_xmc_config+0x5a>
	LOG_ERR("%s: Config done success.", __func__);
 8014dec:	4b16      	ldr	r3, [pc, #88]	; (8014e48 <gpio_xmc_config+0x8c>)
 8014dee:	9302      	str	r3, [sp, #8]
 8014df0:	4b18      	ldr	r3, [pc, #96]	; (8014e54 <gpio_xmc_config+0x98>)
 8014df2:	9301      	str	r3, [sp, #4]
 8014df4:	2400      	movs	r4, #0
 8014df6:	9400      	str	r4, [sp, #0]
 8014df8:	4623      	mov	r3, r4
 8014dfa:	2201      	movs	r2, #1
 8014dfc:	4914      	ldr	r1, [pc, #80]	; (8014e50 <gpio_xmc_config+0x94>)
 8014dfe:	4620      	mov	r0, r4
 8014e00:	f006 fdb4 	bl	801b96c <z_log_msg2_runtime_create>
}
 8014e04:	4620      	mov	r0, r4
 8014e06:	b004      	add	sp, #16
 8014e08:	bd70      	pop	{r4, r5, r6, pc}
    	XMC_GPIO_SetMode(reg, pin, XMC_GPIO_MODE_INPUT_INVERTED_TRISTATE);
 8014e0a:	2220      	movs	r2, #32
 8014e0c:	4631      	mov	r1, r6
 8014e0e:	4628      	mov	r0, r5
 8014e10:	f003 f812 	bl	8017e38 <XMC_GPIO_SetMode>
 8014e14:	e7ea      	b.n	8014dec <gpio_xmc_config+0x30>
		XMC_GPIO_SetMode (reg, pin, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 8014e16:	2280      	movs	r2, #128	; 0x80
 8014e18:	4631      	mov	r1, r6
 8014e1a:	4628      	mov	r0, r5
 8014e1c:	f003 f80c 	bl	8017e38 <XMC_GPIO_SetMode>
		XMC_GPIO_SetOutputStrength (reg, pin, XMC_GPIO_OUTPUT_STRENGTH_STRONG_MEDIUM_EDGE);
 8014e20:	2201      	movs	r2, #1
 8014e22:	4631      	mov	r1, r6
 8014e24:	4628      	mov	r0, r5
 8014e26:	f003 f82e 	bl	8017e86 <XMC_GPIO_SetOutputStrength>
		if (flags&GPIO_OUTPUT_INACTIVE)
 8014e2a:	f414 5fb0 	tst.w	r4, #5632	; 0x1600
 8014e2e:	d004      	beq.n	8014e3a <gpio_xmc_config+0x7e>
  port->OMR = 0x10000U << pin;
 8014e30:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8014e34:	40b1      	lsls	r1, r6
 8014e36:	6069      	str	r1, [r5, #4]
}
 8014e38:	e7d8      	b.n	8014dec <gpio_xmc_config+0x30>
		else if (flags& GPIO_OUTPUT_ACTIVE)
 8014e3a:	f414 5fd0 	tst.w	r4, #6656	; 0x1a00
 8014e3e:	d0d5      	beq.n	8014dec <gpio_xmc_config+0x30>
  port->OMR = (uint32_t)0x1U << pin;
 8014e40:	2101      	movs	r1, #1
 8014e42:	40b1      	lsls	r1, r6
 8014e44:	6069      	str	r1, [r5, #4]
}
 8014e46:	e7d1      	b.n	8014dec <gpio_xmc_config+0x30>
 8014e48:	0801e9b0 	.word	0x0801e9b0
 8014e4c:	0801e918 	.word	0x0801e918
 8014e50:	0801d700 	.word	0x0801d700
 8014e54:	0801e96c 	.word	0x0801e96c

08014e58 <gpio_xmc_0_init>:
									\
		irq_enable(ERU1_0_IRQn);		\
		return 0;						\
	}

DT_INST_FOREACH_STATUS_OKAY(GPIO_XMC_DEVICE)
 8014e58:	b510      	push	{r4, lr}
 8014e5a:	b084      	sub	sp, #16
 8014e5c:	4b0b      	ldr	r3, [pc, #44]	; (8014e8c <gpio_xmc_0_init+0x34>)
 8014e5e:	9302      	str	r3, [sp, #8]
 8014e60:	4b0b      	ldr	r3, [pc, #44]	; (8014e90 <gpio_xmc_0_init+0x38>)
 8014e62:	9301      	str	r3, [sp, #4]
 8014e64:	2400      	movs	r4, #0
 8014e66:	9400      	str	r4, [sp, #0]
 8014e68:	4623      	mov	r3, r4
 8014e6a:	2201      	movs	r2, #1
 8014e6c:	4909      	ldr	r1, [pc, #36]	; (8014e94 <gpio_xmc_0_init+0x3c>)
 8014e6e:	4620      	mov	r0, r4
 8014e70:	f006 fd7c 	bl	801b96c <z_log_msg2_runtime_create>
 8014e74:	4622      	mov	r2, r4
 8014e76:	210f      	movs	r1, #15
 8014e78:	2005      	movs	r0, #5
 8014e7a:	f7f1 fb73 	bl	8006564 <z_arm_irq_priority_set>
 8014e7e:	2005      	movs	r0, #5
 8014e80:	f7f1 fb60 	bl	8006544 <arch_irq_enable>
 8014e84:	4620      	mov	r0, r4
 8014e86:	b004      	add	sp, #16
 8014e88:	bd10      	pop	{r4, pc}
 8014e8a:	bf00      	nop
 8014e8c:	0801ea88 	.word	0x0801ea88
 8014e90:	0801e918 	.word	0x0801e918
 8014e94:	0801d700 	.word	0x0801d700

08014e98 <xmc_clock_control_on>:
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8014e98:	4b02      	ldr	r3, [pc, #8]	; (8014ea4 <xmc_clock_control_on+0xc>)
 8014e9a:	2201      	movs	r2, #1
 8014e9c:	60da      	str	r2, [r3, #12]
{
	/* Get the slice out of idle mode */
	XMC_CCU4_EnableClock(MODULE_PTR, SLICE_NUMBER);

	return 0;
}
 8014e9e:	2000      	movs	r0, #0
 8014ea0:	4770      	bx	lr
 8014ea2:	bf00      	nop
 8014ea4:	4000c000 	.word	0x4000c000

08014ea8 <xmc_clock_control_off>:
__STATIC_INLINE void XMC_CCU4_DisableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
  XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLS = ((uint32_t) 1) << slice_number;
 8014ea8:	4b02      	ldr	r3, [pc, #8]	; (8014eb4 <xmc_clock_control_off+0xc>)
 8014eaa:	2201      	movs	r2, #1
 8014eac:	609a      	str	r2, [r3, #8]
static int xmc_clock_control_off(const struct device *dev,
			clock_control_subsys_t sub_system)
{
	XMC_CCU4_DisableClock(MODULE_PTR, SLICE_NUMBER);
	return 0;
}
 8014eae:	2000      	movs	r0, #0
 8014eb0:	4770      	bx	lr
 8014eb2:	bf00      	nop
 8014eb4:	4000c000 	.word	0x4000c000

08014eb8 <xmc_clock_control_get_rate>:
 8014eb8:	4b02      	ldr	r3, [pc, #8]	; (8014ec4 <xmc_clock_control_get_rate+0xc>)
 8014eba:	681b      	ldr	r3, [r3, #0]

static int xmc_clock_control_get_rate(const struct device *dev,
				    clock_control_subsys_t sub_system,
				    uint32_t *rate)
{
	*rate = XMC_SCU_CLOCK_GetCpuClockFrequency (); // 12MHz from SystemCoreClock
 8014ebc:	6013      	str	r3, [r2, #0]
	return 0;
}
 8014ebe:	2000      	movs	r0, #0
 8014ec0:	4770      	bx	lr
 8014ec2:	bf00      	nop
 8014ec4:	2000e220 	.word	0x2000e220

08014ec8 <xmc_clock_init>:
	//.async_on =  xmc_clock_control_async_on,
};


static int xmc_clock_init(const struct device *dev)
{	
 8014ec8:	b510      	push	{r4, lr}
	//XMC_SCU_CLOCK_Init(&clock_config); -- Since SystemCoreClockSetup() is already done (with 12MHz?) in SystemInit() (system_XMC4500.c), cant Init SCU clock again
	/* Ensure fCCU reaches CCU40 */
	XMC_CCU4_SetModuleClock(MODULE_PTR, XMC_CCU4_CLOCK_SCU);
 8014eca:	4c07      	ldr	r4, [pc, #28]	; (8014ee8 <xmc_clock_init+0x20>)
 8014ecc:	2100      	movs	r1, #0
 8014ece:	4620      	mov	r0, r4
 8014ed0:	f003 f81f 	bl	8017f12 <XMC_CCU4_SetModuleClock>
	XMC_CCU4_Init(MODULE_PTR, XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR);
 8014ed4:	2100      	movs	r1, #0
 8014ed6:	4620      	mov	r0, r4
 8014ed8:	f003 f80c 	bl	8017ef4 <XMC_CCU4_Init>
 * XMC_SCU_CLOCK_Init() \n\n\n
 *
 */
__STATIC_INLINE void XMC_SCU_CLOCK_SetSleepConfig(int32_t config)
{
  SCU_CLK->SLEEPCR = config;
 8014edc:	4b03      	ldr	r3, [pc, #12]	; (8014eec <xmc_clock_init+0x24>)
 8014ede:	4a04      	ldr	r2, [pc, #16]	; (8014ef0 <xmc_clock_init+0x28>)
 8014ee0:	631a      	str	r2, [r3, #48]	; 0x30
	XMC_SCU_CLOCK_SetSleepConfig (XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FPLL |
									XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_CCU);
	return 0;
}
 8014ee2:	2000      	movs	r0, #0
 8014ee4:	bd10      	pop	{r4, pc}
 8014ee6:	bf00      	nop
 8014ee8:	4000c000 	.word	0x4000c000
 8014eec:	50004600 	.word	0x50004600
 8014ef0:	00100001 	.word	0x00100001

08014ef4 <eth_is_ptp_pkt>:
	return pkt->frags->data;
 8014ef4:	688b      	ldr	r3, [r1, #8]
 8014ef6:	689b      	ldr	r3, [r3, #8]
		if (ntohs(NET_ETH_HDR(pkt)->type) != NET_ETH_PTYPE_PTP)
 8014ef8:	899a      	ldrh	r2, [r3, #12]
 8014efa:	0213      	lsls	r3, r2, #8
 8014efc:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 8014f00:	b21b      	sxth	r3, r3
 8014f02:	4a07      	ldr	r2, [pc, #28]	; (8014f20 <eth_is_ptp_pkt+0x2c>)
 8014f04:	4293      	cmp	r3, r2
 8014f06:	d006      	beq.n	8014f16 <eth_is_ptp_pkt+0x22>
			switch (ntohs(NET_ETH_HDR(pkt)->type))
 8014f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014f0c:	d001      	beq.n	8014f12 <eth_is_ptp_pkt+0x1e>
			return false;
 8014f0e:	2000      	movs	r0, #0
}
 8014f10:	4770      	bx	lr
				return true;
 8014f12:	2001      	movs	r0, #1
 8014f14:	4770      	bx	lr
	pkt->priority = priority;
 8014f16:	2303      	movs	r3, #3
 8014f18:	f881 3052 	strb.w	r3, [r1, #82]	; 0x52
	return true;
 8014f1c:	2001      	movs	r0, #1
 8014f1e:	4770      	bx	lr
 8014f20:	ffff88f7 	.word	0xffff88f7

08014f24 <xmc_eth_isr>:
static void xmc_eth_isr(const struct device *dev) {
 8014f24:	b510      	push	{r4, lr}
 8014f26:	b084      	sub	sp, #16
	struct eth_context *context = dev->data;
 8014f28:	6904      	ldr	r4, [r0, #16]
	XMC_ETH_MAC_TIME_t t = {0};
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	9302      	str	r3, [sp, #8]
 8014f2e:	9303      	str	r3, [sp, #12]
	XMC_ETH_MAC_GetPTPTime(eth_mac, &t);
 8014f30:	a902      	add	r1, sp, #8
 8014f32:	4620      	mov	r0, r4
 8014f34:	f003 f90a 	bl	801814c <XMC_ETH_MAC_GetPTPTime>
	uint32_t status = XMC_ETH_MAC_GetEventStatus(eth_mac);
 8014f38:	4620      	mov	r0, r4
 8014f3a:	f003 f8bb 	bl	80180b4 <XMC_ETH_MAC_GetEventStatus>
	if (status & XMC_ETH_MAC_EVENT_TIMESTAMP) {
 8014f3e:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8014f42:	d104      	bne.n	8014f4e <xmc_eth_isr+0x2a>
	else if (status & XMC_ETH_MAC_EVENT_RECEIVE) {
 8014f44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014f48:	d123      	bne.n	8014f92 <xmc_eth_isr+0x6e>
}
 8014f4a:	b004      	add	sp, #16
 8014f4c:	bd10      	pop	{r4, pc}
		XMC_ETH_MAC_ClearEventStatus(eth_mac, XMC_ETH_MAC_EVENT_TIMESTAMP);
 8014f4e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8014f52:	4620      	mov	r0, r4
 8014f54:	f003 f897 	bl	8018086 <XMC_ETH_MAC_ClearEventStatus>
		context->eth_mac.regs->TIMESTAMP_STATUS;  // clear TIMESTAMP interrupt
 8014f58:	6823      	ldr	r3, [r4, #0]
 8014f5a:	f8d3 3728 	ldr.w	r3, [r3, #1832]	; 0x728
  port->OMR = 0x10001U << pin;
 8014f5e:	4b13      	ldr	r3, [pc, #76]	; (8014fac <xmc_eth_isr+0x88>)
 8014f60:	f04f 1240 	mov.w	r2, #4194368	; 0x400040
 8014f64:	605a      	str	r2, [r3, #4]
 8014f66:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8014f6a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8014f6e:	605a      	str	r2, [r3, #4]
			.seconds = t.seconds+1, // Generate interrupt after next 10 seconds
 8014f70:	9b02      	ldr	r3, [sp, #8]
 8014f72:	3301      	adds	r3, #1
		XMC_ETH_MAC_TIME_t alarm_time = {
 8014f74:	9300      	str	r3, [sp, #0]
 8014f76:	2300      	movs	r3, #0
 8014f78:	9301      	str	r3, [sp, #4]
		XMC_ETH_MAC_SetPTPAlarm (eth_mac, &alarm_time);
 8014f7a:	4669      	mov	r1, sp
 8014f7c:	4620      	mov	r0, r4
 8014f7e:	f003 f909 	bl	8018194 <XMC_ETH_MAC_SetPTPAlarm>
  eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSTRIG_Msk;
 8014f82:	6822      	ldr	r2, [r4, #0]
 8014f84:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
 8014f88:	f043 0310 	orr.w	r3, r3, #16
 8014f8c:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
 8014f90:	e7db      	b.n	8014f4a <xmc_eth_isr+0x26>
		k_sem_give(&context->rx_thread_sem);
 8014f92:	f204 70dc 	addw	r0, r4, #2012	; 0x7dc
	z_impl_k_sem_give(sem);
 8014f96:	f000 fdcd 	bl	8015b34 <z_impl_k_sem_give>
		XMC_ETH_MAC_ClearEventStatus(eth_mac, XMC_ETH_MAC_EVENT_RECEIVE);
 8014f9a:	2140      	movs	r1, #64	; 0x40
 8014f9c:	4620      	mov	r0, r4
 8014f9e:	f003 f872 	bl	8018086 <XMC_ETH_MAC_ClearEventStatus>
		XMC_ETH_MAC_DisableEvent((XMC_ETH_MAC_t *const)&context->eth_mac, (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE);
 8014fa2:	2140      	movs	r1, #64	; 0x40
 8014fa4:	4620      	mov	r0, r4
 8014fa6:	f003 f85f 	bl	8018068 <XMC_ETH_MAC_DisableEvent>
}
 8014faa:	e7ce      	b.n	8014f4a <xmc_eth_isr+0x26>
 8014fac:	48028200 	.word	0x48028200

08014fb0 <xmc_eth_tx>:
{
 8014fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fb4:	b082      	sub	sp, #8
	__asm__ volatile(
 8014fb6:	f04f 0304 	mov.w	r3, #4
 8014fba:	f3ef 8611 	mrs	r6, BASEPRI
 8014fbe:	f383 8812 	msr	BASEPRI_MAX, r3
 8014fc2:	f3bf 8f6f 	isb	sy
	if (initialised)
 8014fc6:	4b38      	ldr	r3, [pc, #224]	; (80150a8 <xmc_eth_tx+0xf8>)
 8014fc8:	781b      	ldrb	r3, [r3, #0]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d04e      	beq.n	801506c <xmc_eth_tx+0xbc>
 8014fce:	460d      	mov	r5, r1
		struct eth_context *context = dev->data;
 8014fd0:	6904      	ldr	r4, [r0, #16]
	return net_buf_frags_len(pkt->frags);
 8014fd2:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
 8014fd4:	2200      	movs	r2, #0
	while (buf) {
 8014fd6:	b11b      	cbz	r3, 8014fe0 <xmc_eth_tx+0x30>
		bytes += buf->len;
 8014fd8:	8999      	ldrh	r1, [r3, #12]
 8014fda:	440a      	add	r2, r1
		buf = buf->frags;
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	e7fa      	b.n	8014fd6 <xmc_eth_tx+0x26>
		uint16_t total_len = net_pkt_get_len(pkt);
 8014fe0:	b291      	uxth	r1, r2
		if (total_len > (uint16_t)XMC_ETH_MAC_BUF_SIZE)
 8014fe2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8014fe6:	4299      	cmp	r1, r3
 8014fe8:	d858      	bhi.n	801509c <xmc_eth_tx+0xec>
  return ((eth_mac->tx_desc[eth_mac->tx_index].status & ETH_MAC_DMA_TDES0_OWN) != 0U);
 8014fea:	6960      	ldr	r0, [r4, #20]
 8014fec:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8014ff0:	0159      	lsls	r1, r3, #5
 8014ff2:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8014ff6:	5841      	ldr	r1, [r0, r1]
		while (XMC_ETH_MAC_IsTxDescriptorOwnedByDma((XMC_ETH_MAC_t *const)&context->eth_mac))
 8014ff8:	2900      	cmp	r1, #0
 8014ffa:	dbf6      	blt.n	8014fea <xmc_eth_tx+0x3a>
  return (uint8_t *)(eth_mac->tx_desc[eth_mac->tx_index].buffer1);
 8014ffc:	f8d3 8008 	ldr.w	r8, [r3, #8]
		if (net_pkt_read(pkt, (void *)buffer, total_len))
 8015000:	b297      	uxth	r7, r2
 8015002:	463a      	mov	r2, r7
 8015004:	4641      	mov	r1, r8
 8015006:	4628      	mov	r0, r5
 8015008:	f005 fab5 	bl	801a576 <net_pkt_read>
 801500c:	2800      	cmp	r0, #0
 801500e:	d148      	bne.n	80150a2 <xmc_eth_tx+0xf2>
		print_buffer (buffer, total_len);
 8015010:	4639      	mov	r1, r7
 8015012:	4640      	mov	r0, r8
 8015014:	f006 fcb7 	bl	801b986 <print_buffer>
  eth_mac->tx_desc[eth_mac->tx_index].length = size;
 8015018:	6963      	ldr	r3, [r4, #20]
 801501a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 801501e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8015022:	605f      	str	r7, [r3, #4]
		context->eth_mac.tx_desc[context->eth_mac.tx_index].status &= ~ETH_MAC_DMA_TDES0_TTSE;
 8015024:	6961      	ldr	r1, [r4, #20]
 8015026:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801502a:	015b      	lsls	r3, r3, #5
 801502c:	58ca      	ldr	r2, [r1, r3]
 801502e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8015032:	50ca      	str	r2, [r1, r3]
	timestamped_frame = eth_is_ptp_pkt(net_pkt_iface(pkt), pkt);
 8015034:	4629      	mov	r1, r5
 8015036:	69a8      	ldr	r0, [r5, #24]
 8015038:	f7ff ff5c 	bl	8014ef4 <eth_is_ptp_pkt>
	if (timestamped_frame) {
 801503c:	4602      	mov	r2, r0
 801503e:	b138      	cbz	r0, 8015050 <xmc_eth_tx+0xa0>
		context->eth_mac.tx_desc[context->eth_mac.tx_index].status |= ETH_MAC_DMA_TDES0_TTSE;
 8015040:	6960      	ldr	r0, [r4, #20]
 8015042:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8015046:	015b      	lsls	r3, r3, #5
 8015048:	58c1      	ldr	r1, [r0, r3]
 801504a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 801504e:	50c1      	str	r1, [r0, r3]
		if (timestamped_frame)
 8015050:	b9a2      	cbnz	r2, 801507c <xmc_eth_tx+0xcc>
		XMC_ETH_MAC_ReturnTxDescriptor((XMC_ETH_MAC_t *const)&context->eth_mac);
 8015052:	4620      	mov	r0, r4
 8015054:	f003 f851 	bl	80180fa <XMC_ETH_MAC_ReturnTxDescriptor>
  eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_TPS_Msk;
 8015058:	6822      	ldr	r2, [r4, #0]
 801505a:	f241 0314 	movw	r3, #4116	; 0x1014
 801505e:	2102      	movs	r1, #2
 8015060:	50d1      	str	r1, [r2, r3]
  eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
 8015062:	6822      	ldr	r2, [r4, #0]
 8015064:	f241 0304 	movw	r3, #4100	; 0x1004
 8015068:	2100      	movs	r1, #0
 801506a:	50d1      	str	r1, [r2, r3]
	__asm__ volatile(
 801506c:	f386 8811 	msr	BASEPRI, r6
 8015070:	f3bf 8f6f 	isb	sy
	return 0;
 8015074:	2000      	movs	r0, #0
}
 8015076:	b002      	add	sp, #8
 8015078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xmc_time.seconds = 0;
 801507c:	2700      	movs	r7, #0
 801507e:	9700      	str	r7, [sp, #0]
			xmc_time.nanoseconds = 0;
 8015080:	9701      	str	r7, [sp, #4]
			xmc_status = XMC_ETH_MAC_GetTxTimeStamp((XMC_ETH_MAC_t *const)&context->eth_mac, &xmc_time);
 8015082:	4669      	mov	r1, sp
 8015084:	4620      	mov	r0, r4
 8015086:	f7f1 f89b 	bl	80061c0 <XMC_ETH_MAC_GetTxTimeStamp>
			pkt->timestamp.second = xmc_time.seconds;
 801508a:	9b00      	ldr	r3, [sp, #0]
 801508c:	622b      	str	r3, [r5, #32]
 801508e:	626f      	str	r7, [r5, #36]	; 0x24
			pkt->timestamp.nanosecond = xmc_time.nanoseconds;
 8015090:	9b01      	ldr	r3, [sp, #4]
 8015092:	62ab      	str	r3, [r5, #40]	; 0x28
			net_if_add_tx_timestamp(pkt);
 8015094:	4628      	mov	r0, r5
 8015096:	f7fa f929 	bl	800f2ec <net_if_add_tx_timestamp>
			LOG_ERR ("Tx timestamps: seconds: %lu nanoseconds:%d", (unsigned long)xmc_time.seconds, xmc_time.nanoseconds);
 801509a:	e7da      	b.n	8015052 <xmc_eth_tx+0xa2>
			return -ENOBUFS;
 801509c:	f06f 0068 	mvn.w	r0, #104	; 0x68
 80150a0:	e7e9      	b.n	8015076 <xmc_eth_tx+0xc6>
			return -EIO;
 80150a2:	f06f 0004 	mvn.w	r0, #4
 80150a6:	e7e6      	b.n	8015076 <xmc_eth_tx+0xc6>
 80150a8:	20003c7a 	.word	0x20003c7a

080150ac <ptp_clock_xmc_adjust>:
	struct ptp_context *ptp_context = dev->data;
 80150ac:	6903      	ldr	r3, [r0, #16]
	struct eth_context *context = ptp_context->eth_context;
 80150ae:	6818      	ldr	r0, [r3, #0]
	if ((increment <= (int32_t)(-NSEC_PER_SEC)) ||
 80150b0:	4b0f      	ldr	r3, [pc, #60]	; (80150f0 <ptp_clock_xmc_adjust+0x44>)
 80150b2:	440b      	add	r3, r1
 80150b4:	4a0f      	ldr	r2, [pc, #60]	; (80150f4 <ptp_clock_xmc_adjust+0x48>)
 80150b6:	4293      	cmp	r3, r2
 80150b8:	d216      	bcs.n	80150e8 <ptp_clock_xmc_adjust+0x3c>
{
 80150ba:	b530      	push	{r4, r5, lr}
 80150bc:	b083      	sub	sp, #12
	__asm__ volatile(
 80150be:	f04f 0304 	mov.w	r3, #4
 80150c2:	f3ef 8511 	mrs	r5, BASEPRI
 80150c6:	f383 8812 	msr	BASEPRI_MAX, r3
 80150ca:	f3bf 8f6f 	isb	sy
		xmc_time.seconds = 0;
 80150ce:	2400      	movs	r4, #0
 80150d0:	9400      	str	r4, [sp, #0]
		xmc_time.nanoseconds = increment;
 80150d2:	9101      	str	r1, [sp, #4]
		XMC_ETH_MAC_UpdatePTPTime ((XMC_ETH_MAC_t *const)&context->eth_mac, &xmc_time);
 80150d4:	4669      	mov	r1, sp
 80150d6:	f003 f842 	bl	801815e <XMC_ETH_MAC_UpdatePTPTime>
	__asm__ volatile(
 80150da:	f385 8811 	msr	BASEPRI, r5
 80150de:	f3bf 8f6f 	isb	sy
		ret = 0;
 80150e2:	4620      	mov	r0, r4
}
 80150e4:	b003      	add	sp, #12
 80150e6:	bd30      	pop	{r4, r5, pc}
		ret = -EINVAL;
 80150e8:	f06f 0015 	mvn.w	r0, #21
}
 80150ec:	4770      	bx	lr
 80150ee:	bf00      	nop
 80150f0:	3b9ac9ff 	.word	0x3b9ac9ff
 80150f4:	773593ff 	.word	0x773593ff

080150f8 <xmc_eth_iface_init>:
{
 80150f8:	b570      	push	{r4, r5, r6, lr}
	return iface->if_dev->dev;
 80150fa:	6803      	ldr	r3, [r0, #0]
 80150fc:	681b      	ldr	r3, [r3, #0]
	struct eth_context *context = dev->data;
 80150fe:	691d      	ldr	r5, [r3, #16]
	if (initialised)
 8015100:	4b2d      	ldr	r3, [pc, #180]	; (80151b8 <xmc_eth_iface_init+0xc0>)
 8015102:	781b      	ldrb	r3, [r3, #0]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d053      	beq.n	80151b0 <xmc_eth_iface_init+0xb8>
 8015108:	4606      	mov	r6, r0
		if (init_done)
 801510a:	4b2c      	ldr	r3, [pc, #176]	; (80151bc <xmc_eth_iface_init+0xc4>)
 801510c:	781b      	ldrb	r3, [r3, #0]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d14e      	bne.n	80151b0 <xmc_eth_iface_init+0xb8>
		if (context->eth_phy_config.enable_auto_negotiate)
 8015112:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
 8015116:	b163      	cbz	r3, 8015132 <xmc_eth_iface_init+0x3a>
  	uint32_t retries = 0U;
 8015118:	2400      	movs	r4, #0
				phy_autoneg_state = XMC_ETH_PHY_IsAutonegotiationCompleted((XMC_ETH_MAC_t *const)&context->eth_mac, ETH_LWIP_0_PHY_ADDR);
 801511a:	2100      	movs	r1, #0
 801511c:	4628      	mov	r0, r5
 801511e:	f003 f905 	bl	801832c <XMC_ETH_PHY_IsAutonegotiationCompleted>
				retries++;
 8015122:	3401      	adds	r4, #1
			} while ((phy_autoneg_state == false) && (retries < ETH_LWIP_PHY_MAX_RETRIES));
 8015124:	4602      	mov	r2, r0
 8015126:	b910      	cbnz	r0, 801512e <xmc_eth_iface_init+0x36>
 8015128:	4b25      	ldr	r3, [pc, #148]	; (80151c0 <xmc_eth_iface_init+0xc8>)
 801512a:	429c      	cmp	r4, r3
 801512c:	d9f5      	bls.n	801511a <xmc_eth_iface_init+0x22>
			if (phy_autoneg_state == false)
 801512e:	2a00      	cmp	r2, #0
 8015130:	d03f      	beq.n	80151b2 <xmc_eth_iface_init+0xba>
		speed = XMC_ETH_PHY_GetLinkSpeed((XMC_ETH_MAC_t *const)&context->eth_mac, ETH_LWIP_0_PHY_ADDR);
 8015132:	2100      	movs	r1, #0
 8015134:	4628      	mov	r0, r5
 8015136:	f003 f8d6 	bl	80182e6 <XMC_ETH_PHY_GetLinkSpeed>
 801513a:	4604      	mov	r4, r0
		duplex = XMC_ETH_PHY_GetLinkDuplex((XMC_ETH_MAC_t *const)&context->eth_mac, ETH_LWIP_0_PHY_ADDR);
 801513c:	2100      	movs	r1, #0
 801513e:	4628      	mov	r0, r5
 8015140:	f003 f8e5 	bl	801830e <XMC_ETH_PHY_GetLinkDuplex>
  eth_mac->regs->MAC_CONFIGURATION = (eth_mac->regs->MAC_CONFIGURATION &
 8015144:	682a      	ldr	r2, [r5, #0]
 8015146:	6813      	ldr	r3, [r2, #0]
 8015148:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
                                      (uint32_t)~(ETH_MAC_CONFIGURATION_DM_Msk | ETH_MAC_CONFIGURATION_FES_Msk)) |
 801514c:	4323      	orrs	r3, r4
                                     (uint32_t)speed | (uint32_t)duplex;
 801514e:	4303      	orrs	r3, r0
  eth_mac->regs->MAC_CONFIGURATION = (eth_mac->regs->MAC_CONFIGURATION &
 8015150:	6013      	str	r3, [r2, #0]
		XMC_ETH_MAC_EnableEvent((XMC_ETH_MAC_t *const)&context->eth_mac, (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE);
 8015152:	2140      	movs	r1, #64	; 0x40
 8015154:	4628      	mov	r0, r5
 8015156:	f002 ff6d 	bl	8018034 <XMC_ETH_MAC_EnableEvent>
		XMC_ETH_MAC_EnableEvent((XMC_ETH_MAC_t *const)&context->eth_mac, (uint32_t)XMC_ETH_MAC_EVENT_TIMESTAMP);
 801515a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 801515e:	4628      	mov	r0, r5
 8015160:	f002 ff68 	bl	8018034 <XMC_ETH_MAC_EnableEvent>
	return net_if_set_link_addr_locked(iface, addr, len, type);
 8015164:	2303      	movs	r3, #3
 8015166:	2206      	movs	r2, #6
 8015168:	f105 0148 	add.w	r1, r5, #72	; 0x48
 801516c:	4630      	mov	r0, r6
 801516e:	f7f8 f955 	bl	800d41c <net_if_set_link_addr_locked>
		context->iface = iface;
 8015172:	63ee      	str	r6, [r5, #60]	; 0x3c
		ethernet_init(iface);
 8015174:	4630      	mov	r0, r6
 8015176:	f7f2 fc23 	bl	80079c0 <ethernet_init>
		context->config_func();
 801517a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801517c:	4798      	blx	r3
  eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_ST_Msk;
 801517e:	6829      	ldr	r1, [r5, #0]
 8015180:	f241 0318 	movw	r3, #4120	; 0x1018
 8015184:	58ca      	ldr	r2, [r1, r3]
 8015186:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801518a:	50ca      	str	r2, [r1, r3]
  eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_TE_Msk;
 801518c:	6829      	ldr	r1, [r5, #0]
 801518e:	680a      	ldr	r2, [r1, #0]
 8015190:	f042 0208 	orr.w	r2, r2, #8
 8015194:	600a      	str	r2, [r1, #0]
  eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_SR_Msk;
 8015196:	6829      	ldr	r1, [r5, #0]
 8015198:	58ca      	ldr	r2, [r1, r3]
 801519a:	f042 0202 	orr.w	r2, r2, #2
 801519e:	50ca      	str	r2, [r1, r3]
  eth_mac->regs->MAC_CONFIGURATION |= (uint32_t)ETH_MAC_CONFIGURATION_RE_Msk;
 80151a0:	682a      	ldr	r2, [r5, #0]
 80151a2:	6813      	ldr	r3, [r2, #0]
 80151a4:	f043 0304 	orr.w	r3, r3, #4
 80151a8:	6013      	str	r3, [r2, #0]
		init_done = true;
 80151aa:	4b04      	ldr	r3, [pc, #16]	; (80151bc <xmc_eth_iface_init+0xc4>)
 80151ac:	2201      	movs	r2, #1
 80151ae:	701a      	strb	r2, [r3, #0]
}
 80151b0:	bd70      	pop	{r4, r5, r6, pc}
				ETH_LWIP_Error(ETH_LWIP_ERROR_PHY_TIMEOUT);
 80151b2:	2004      	movs	r0, #4
 80151b4:	f006 fd0c 	bl	801bbd0 <ETH_LWIP_Error>
 80151b8:	20003c7a 	.word	0x20003c7a
 80151bc:	20003c79 	.word	0x20003c79
 80151c0:	000ffffe 	.word	0x000ffffe

080151c4 <low_level_init>:
{
 80151c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151c6:	b085      	sub	sp, #20
 80151c8:	4604      	mov	r4, r0
  gpio_config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 80151ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80151ce:	9302      	str	r3, [sp, #8]
  gpio_config.mode = XMC_GPIO_MODE_INPUT_TRISTATE;
 80151d0:	2500      	movs	r5, #0
 80151d2:	f88d 5004 	strb.w	r5, [sp, #4]
  XMC_GPIO_Init(ETH_LWIP_0_CRS_DV, &gpio_config);
 80151d6:	4f45      	ldr	r7, [pc, #276]	; (80152ec <low_level_init+0x128>)
 80151d8:	aa01      	add	r2, sp, #4
 80151da:	2109      	movs	r1, #9
 80151dc:	4638      	mov	r0, r7
 80151de:	f7f0 fe15 	bl	8005e0c <XMC_GPIO_Init>
  XMC_GPIO_Init(ETH_LWIP_0_RXER, &gpio_config);
 80151e2:	4e43      	ldr	r6, [pc, #268]	; (80152f0 <low_level_init+0x12c>)
 80151e4:	aa01      	add	r2, sp, #4
 80151e6:	2104      	movs	r1, #4
 80151e8:	4630      	mov	r0, r6
 80151ea:	f7f0 fe0f 	bl	8005e0c <XMC_GPIO_Init>
  XMC_GPIO_Init(ETH_LWIP_0_RXD0, &gpio_config);
 80151ee:	aa01      	add	r2, sp, #4
 80151f0:	2102      	movs	r1, #2
 80151f2:	4630      	mov	r0, r6
 80151f4:	f7f0 fe0a 	bl	8005e0c <XMC_GPIO_Init>
  XMC_GPIO_Init(ETH_LWIP_0_RXD1, &gpio_config);
 80151f8:	aa01      	add	r2, sp, #4
 80151fa:	2103      	movs	r1, #3
 80151fc:	4630      	mov	r0, r6
 80151fe:	f7f0 fe05 	bl	8005e0c <XMC_GPIO_Init>
  XMC_GPIO_Init(ETH_LWIP_0_RMII_CLK, &gpio_config);
 8015202:	aa01      	add	r2, sp, #4
 8015204:	2108      	movs	r1, #8
 8015206:	4638      	mov	r0, r7
 8015208:	f7f0 fe00 	bl	8005e0c <XMC_GPIO_Init>
  XMC_GPIO_Init(ETH_LWIP_0_MDIO, &gpio_config);
 801520c:	aa01      	add	r2, sp, #4
 801520e:	4629      	mov	r1, r5
 8015210:	4630      	mov	r0, r6
 8015212:	f7f0 fdfb 	bl	8005e0c <XMC_GPIO_Init>
  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_MEDIUM_EDGE;
 8015216:	2701      	movs	r7, #1
 8015218:	f88d 700c 	strb.w	r7, [sp, #12]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 801521c:	2388      	movs	r3, #136	; 0x88
 801521e:	f88d 3004 	strb.w	r3, [sp, #4]
  XMC_GPIO_Init(ETH_LWIP_0_MDC, &gpio_config);
 8015222:	aa01      	add	r2, sp, #4
 8015224:	2107      	movs	r1, #7
 8015226:	4630      	mov	r0, r6
 8015228:	f7f0 fdf0 	bl	8005e0c <XMC_GPIO_Init>
  XMC_GPIO_SetHardwareControl(ETH_LWIP_0_MDIO, XMC_GPIO_HWCTRL_PERIPHERAL1);
 801522c:	463a      	mov	r2, r7
 801522e:	4629      	mov	r1, r5
 8015230:	4630      	mov	r0, r6
 8015232:	f002 fe18 	bl	8017e66 <XMC_GPIO_SetHardwareControl>
  port_control.mode = XMC_ETH_MAC_PORT_CTRL_MODE_RMII;
 8015236:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  port_control.rxd0 = (XMC_ETH_MAC_PORT_CTRL_RXD0_t)0U;
 801523a:	f365 0301 	bfi	r3, r5, #0, #2
  port_control.rxd1 = (XMC_ETH_MAC_PORT_CTRL_RXD1_t)0U;
 801523e:	f365 0383 	bfi	r3, r5, #2, #2
  port_control.clk_rmii = (XMC_ETH_MAC_PORT_CTRL_CLK_RMII_t)2U;
 8015242:	2202      	movs	r2, #2
 8015244:	f362 2309 	bfi	r3, r2, #8, #2
  port_control.crs_dv = (XMC_ETH_MAC_PORT_CTRL_CRS_DV_t)2U;
 8015248:	f362 238b 	bfi	r3, r2, #10, #2
  port_control.rxer = (XMC_ETH_MAC_PORT_CTRL_RXER_t)0U;
 801524c:	f365 338f 	bfi	r3, r5, #14, #2
  port_control.mdio = (XMC_ETH_MAC_PORT_CTRL_MDIO_t)1U;
 8015250:	f367 5397 	bfi	r3, r7, #22, #2
  ETH0_CON->CON = (uint32_t)port_ctrl.raw;
 8015254:	4a27      	ldr	r2, [pc, #156]	; (80152f4 <low_level_init+0x130>)
 8015256:	6013      	str	r3, [r2, #0]
  XMC_ETH_MAC_Enable((XMC_ETH_MAC_t * const)&context->eth_mac);
 8015258:	4620      	mov	r0, r4
 801525a:	f7f0 ff1d 	bl	8006098 <XMC_ETH_MAC_Enable>
  XMC_ETH_MAC_SetManagmentClockDivider((XMC_ETH_MAC_t * const)&context->eth_mac);
 801525e:	4620      	mov	r0, r4
 8015260:	f7f0 fed2 	bl	8006008 <XMC_ETH_MAC_SetManagmentClockDivider>
  if((status = XMC_ETH_PHY_Init((XMC_ETH_MAC_t * const)&context->eth_mac, ETH_LWIP_0_PHY_ADDR, &context->eth_phy_config)) != XMC_ETH_PHY_STATUS_OK)
 8015264:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8015268:	4629      	mov	r1, r5
 801526a:	4620      	mov	r0, r4
 801526c:	f003 f805 	bl	801827a <XMC_ETH_PHY_Init>
 8015270:	2800      	cmp	r0, #0
 8015272:	d138      	bne.n	80152e6 <low_level_init+0x122>
  XMC_ETH_MAC_InitEx((XMC_ETH_MAC_t * const)&context->eth_mac);
 8015274:	4620      	mov	r0, r4
 8015276:	f7f0 fe83 	bl	8005f80 <XMC_ETH_MAC_InitEx>
  XMC_ETH_MAC_SetAddress((XMC_ETH_MAC_t * const)&context->eth_mac, context->eth_mac.address);
 801527a:	68a2      	ldr	r2, [r4, #8]
 801527c:	68e1      	ldr	r1, [r4, #12]
  eth_mac->regs->MAC_ADDRESS0_HIGH = (uint32_t)(addr >> 32);
 801527e:	6823      	ldr	r3, [r4, #0]
 8015280:	6419      	str	r1, [r3, #64]	; 0x40
  eth_mac->regs->MAC_ADDRESS0_LOW = (uint32_t)addr;
 8015282:	6823      	ldr	r3, [r4, #0]
 8015284:	645a      	str	r2, [r3, #68]	; 0x44
  eth_mac->regs->MAC_CONFIGURATION &= (uint32_t)~ETH_MAC_CONFIGURATION_JE_Msk;
 8015286:	6822      	ldr	r2, [r4, #0]
 8015288:	6813      	ldr	r3, [r2, #0]
 801528a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801528e:	6013      	str	r3, [r2, #0]
  eth_mac->regs->MAC_FRAME_FILTER |= (uint32_t)ETH_MAC_FRAME_FILTER_PR_Msk;
 8015290:	6822      	ldr	r2, [r4, #0]
 8015292:	6853      	ldr	r3, [r2, #4]
 8015294:	f043 0301 	orr.w	r3, r3, #1
 8015298:	6053      	str	r3, [r2, #4]
  eth_mac->regs->MAC_FRAME_FILTER &= (uint32_t)~ETH_MAC_FRAME_FILTER_DBF_Msk;
 801529a:	6822      	ldr	r2, [r4, #0]
 801529c:	6853      	ldr	r3, [r2, #4]
 801529e:	f023 0320 	bic.w	r3, r3, #32
 80152a2:	6053      	str	r3, [r2, #4]
  eth_mac->regs->MAC_FRAME_FILTER |= (uint32_t)ETH_MAC_FRAME_FILTER_PM_Msk;
 80152a4:	6822      	ldr	r2, [r4, #0]
 80152a6:	6853      	ldr	r3, [r2, #4]
 80152a8:	f043 0310 	orr.w	r3, r3, #16
 80152ac:	6053      	str	r3, [r2, #4]
  gpio_config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_STRONG_MEDIUM_EDGE;
 80152ae:	2301      	movs	r3, #1
 80152b0:	f88d 300c 	strb.w	r3, [sp, #12]
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 80152b4:	2588      	movs	r5, #136	; 0x88
 80152b6:	f88d 5004 	strb.w	r5, [sp, #4]
  XMC_GPIO_Init(ETH_LWIP_0_TXEN, &gpio_config);
 80152ba:	4c0d      	ldr	r4, [pc, #52]	; (80152f0 <low_level_init+0x12c>)
 80152bc:	aa01      	add	r2, sp, #4
 80152be:	2105      	movs	r1, #5
 80152c0:	4620      	mov	r0, r4
 80152c2:	f7f0 fda3 	bl	8005e0c <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 80152c6:	f88d 5004 	strb.w	r5, [sp, #4]
  XMC_GPIO_Init(ETH_LWIP_0_TXD0, &gpio_config);
 80152ca:	aa01      	add	r2, sp, #4
 80152cc:	2108      	movs	r1, #8
 80152ce:	4620      	mov	r0, r4
 80152d0:	f7f0 fd9c 	bl	8005e0c <XMC_GPIO_Init>
  gpio_config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL_ALT1;
 80152d4:	f88d 5004 	strb.w	r5, [sp, #4]
  XMC_GPIO_Init(ETH_LWIP_0_TXD1, &gpio_config);
 80152d8:	aa01      	add	r2, sp, #4
 80152da:	2109      	movs	r1, #9
 80152dc:	4620      	mov	r0, r4
 80152de:	f7f0 fd95 	bl	8005e0c <XMC_GPIO_Init>
}
 80152e2:	b005      	add	sp, #20
 80152e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ETH_LWIP_Error((ETH_LWIP_ERROR_t)status);
 80152e6:	b2c0      	uxtb	r0, r0
 80152e8:	f006 fc72 	bl	801bbd0 <ETH_LWIP_Error>
 80152ec:	48028f00 	.word	0x48028f00
 80152f0:	48028200 	.word	0x48028200
 80152f4:	50004040 	.word	0x50004040

080152f8 <xmc_eth_init>:
{
 80152f8:	b570      	push	{r4, r5, r6, lr}
 80152fa:	b088      	sub	sp, #32
	struct eth_context *context = dev->data;
 80152fc:	6904      	ldr	r4, [r0, #16]
	low_level_init (context);
 80152fe:	4620      	mov	r0, r4
 8015300:	f7ff ff60 	bl	80151c4 <low_level_init>
	initialised = true;
 8015304:	2201      	movs	r2, #1
 8015306:	4b18      	ldr	r3, [pc, #96]	; (8015368 <xmc_eth_init+0x70>)
 8015308:	701a      	strb	r2, [r3, #0]
	SCU_CLK->SLEEPCR |= (XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_ETH | XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_CCU);
 801530a:	4b18      	ldr	r3, [pc, #96]	; (801536c <xmc_eth_init+0x74>)
 801530c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801530e:	f441 11a0 	orr.w	r1, r1, #1310720	; 0x140000
 8015312:	6319      	str	r1, [r3, #48]	; 0x30
	SCU_CLK->DSLEEPCR |= (XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_ETH | XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_CCU);
 8015314:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8015316:	f441 11a0 	orr.w	r1, r1, #1310720	; 0x140000
 801531a:	6359      	str	r1, [r3, #52]	; 0x34
	k_sem_init(&context->rx_thread_sem, 0, 1);
 801531c:	f204 70dc 	addw	r0, r4, #2012	; 0x7dc
	return z_impl_k_sem_init(sem, initial_count, limit);
 8015320:	2100      	movs	r1, #0
 8015322:	f006 fe39 	bl	801bf98 <z_impl_k_sem_init>
	k_mutex_init(&context->rx_frame_buf_mutex);
 8015326:	f504 60f9 	add.w	r0, r4, #1992	; 0x7c8
	return z_impl_k_mutex_init(mutex);
 801532a:	f006 fd87 	bl	801be3c <z_impl_k_mutex_init>
	k_thread_create(&context->rx_thread, context->rx_thread_stack,
 801532e:	f504 66dc 	add.w	r6, r4, #1760	; 0x6e0
 8015332:	f104 0180 	add.w	r1, r4, #128	; 0x80
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8015336:	2200      	movs	r2, #0
 8015338:	2300      	movs	r3, #0
 801533a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801533e:	2500      	movs	r5, #0
 8015340:	9504      	str	r5, [sp, #16]
 8015342:	f06f 030d 	mvn.w	r3, #13
 8015346:	9303      	str	r3, [sp, #12]
 8015348:	9502      	str	r5, [sp, #8]
 801534a:	9501      	str	r5, [sp, #4]
 801534c:	9400      	str	r4, [sp, #0]
 801534e:	4b08      	ldr	r3, [pc, #32]	; (8015370 <xmc_eth_init+0x78>)
 8015350:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8015354:	4630      	mov	r0, r6
 8015356:	f006 fd35 	bl	801bdc4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
 801535a:	4906      	ldr	r1, [pc, #24]	; (8015374 <xmc_eth_init+0x7c>)
 801535c:	4630      	mov	r0, r6
 801535e:	f000 fa31 	bl	80157c4 <z_impl_k_thread_name_set>
}
 8015362:	4628      	mov	r0, r5
 8015364:	b008      	add	sp, #32
 8015366:	bd70      	pop	{r4, r5, r6, pc}
 8015368:	20003c7a 	.word	0x20003c7a
 801536c:	50004600 	.word	0x50004600
 8015370:	0801bb43 	.word	0x0801bb43
 8015374:	0801eae8 	.word	0x0801eae8

08015378 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
 8015378:	4b01      	ldr	r3, [pc, #4]	; (8015380 <z_impl_z_errno+0x8>)
 801537a:	6898      	ldr	r0, [r3, #8]
}
 801537c:	3084      	adds	r0, #132	; 0x84
 801537e:	4770      	bx	lr
 8015380:	20003c14 	.word	0x20003c14

08015384 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
 8015384:	2804      	cmp	r0, #4
 8015386:	d80c      	bhi.n	80153a2 <reason_to_str+0x1e>
 8015388:	e8df f000 	tbb	[pc, r0]
 801538c:	07050d03 	.word	0x07050d03
 8015390:	09          	.byte	0x09
 8015391:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
 8015392:	4806      	ldr	r0, [pc, #24]	; (80153ac <reason_to_str+0x28>)
 8015394:	4770      	bx	lr
		return "Stack overflow";
 8015396:	4806      	ldr	r0, [pc, #24]	; (80153b0 <reason_to_str+0x2c>)
 8015398:	4770      	bx	lr
		return "Kernel oops";
 801539a:	4806      	ldr	r0, [pc, #24]	; (80153b4 <reason_to_str+0x30>)
 801539c:	4770      	bx	lr
		return "Kernel panic";
 801539e:	4806      	ldr	r0, [pc, #24]	; (80153b8 <reason_to_str+0x34>)
 80153a0:	4770      	bx	lr
	default:
		return "Unknown error";
 80153a2:	4806      	ldr	r0, [pc, #24]	; (80153bc <reason_to_str+0x38>)
 80153a4:	4770      	bx	lr
		return "Unhandled interrupt";
 80153a6:	4806      	ldr	r0, [pc, #24]	; (80153c0 <reason_to_str+0x3c>)
	}
}
 80153a8:	4770      	bx	lr
 80153aa:	bf00      	nop
 80153ac:	0801eb98 	.word	0x0801eb98
 80153b0:	0801eb6c 	.word	0x0801eb6c
 80153b4:	0801eb7c 	.word	0x0801eb7c
 80153b8:	0801eb88 	.word	0x0801eb88
 80153bc:	0801eb48 	.word	0x0801eb48
 80153c0:	0801eb58 	.word	0x0801eb58

080153c4 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 80153c4:	b130      	cbz	r0, 80153d4 <thread_name_get+0x10>
{
 80153c6:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
 80153c8:	f006 fcea 	bl	801bda0 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
 80153cc:	b120      	cbz	r0, 80153d8 <thread_name_get+0x14>
 80153ce:	7803      	ldrb	r3, [r0, #0]
 80153d0:	b123      	cbz	r3, 80153dc <thread_name_get+0x18>
}
 80153d2:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
 80153d4:	4802      	ldr	r0, [pc, #8]	; (80153e0 <thread_name_get+0x1c>)
}
 80153d6:	4770      	bx	lr
		thread_name = "unknown";
 80153d8:	4801      	ldr	r0, [pc, #4]	; (80153e0 <thread_name_get+0x1c>)
 80153da:	e7fa      	b.n	80153d2 <thread_name_get+0xe>
 80153dc:	4800      	ldr	r0, [pc, #0]	; (80153e0 <thread_name_get+0x1c>)
	return thread_name;
 80153de:	e7f8      	b.n	80153d2 <thread_name_get+0xe>
 80153e0:	0801eba8 	.word	0x0801eba8

080153e4 <k_sys_fatal_error_handler>:
{
 80153e4:	b510      	push	{r4, lr}
 80153e6:	b088      	sub	sp, #32
 80153e8:	4604      	mov	r4, r0
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
 80153ea:	f7ef ffef 	bl	80053cc <z_impl_log_panic>
	LOG_ERR("Halting system");
 80153ee:	4b13      	ldr	r3, [pc, #76]	; (801543c <k_sys_fatal_error_handler+0x58>)
 80153f0:	9306      	str	r3, [sp, #24]
 80153f2:	2300      	movs	r3, #0
 80153f4:	f8ad 3005 	strh.w	r3, [sp, #5]
 80153f8:	f88d 3007 	strb.w	r3, [sp, #7]
 80153fc:	2202      	movs	r2, #2
 80153fe:	f88d 2004 	strb.w	r2, [sp, #4]
 8015402:	f88d 3006 	strb.w	r3, [sp, #6]
 8015406:	9a01      	ldr	r2, [sp, #4]
 8015408:	9205      	str	r2, [sp, #20]
 801540a:	461a      	mov	r2, r3
 801540c:	f363 0200 	bfi	r2, r3, #0, #1
 8015410:	f363 0241 	bfi	r2, r3, #1, #1
 8015414:	f363 0282 	bfi	r2, r3, #2, #1
 8015418:	f363 02c5 	bfi	r2, r3, #3, #3
 801541c:	2101      	movs	r1, #1
 801541e:	f361 1288 	bfi	r2, r1, #6, #3
 8015422:	2108      	movs	r1, #8
 8015424:	f361 2252 	bfi	r2, r1, #9, #10
 8015428:	f3c2 0212 	ubfx	r2, r2, #0, #19
 801542c:	4904      	ldr	r1, [pc, #16]	; (8015440 <k_sys_fatal_error_handler+0x5c>)
 801542e:	a802      	add	r0, sp, #8
 8015430:	f002 fc8f 	bl	8017d52 <z_log_msg2_finalize>
	arch_system_halt(reason);
 8015434:	4620      	mov	r0, r4
 8015436:	f006 fbd9 	bl	801bbec <arch_system_halt>
 801543a:	bf00      	nop
 801543c:	0801ebb0 	.word	0x0801ebb0
 8015440:	0801d7e0 	.word	0x0801d7e0

08015444 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8015444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015446:	b08f      	sub	sp, #60	; 0x3c
 8015448:	4605      	mov	r5, r0
 801544a:	460e      	mov	r6, r1
	__asm__ volatile(
 801544c:	f04f 0304 	mov.w	r3, #4
 8015450:	f3ef 8711 	mrs	r7, BASEPRI
 8015454:	f383 8812 	msr	BASEPRI_MAX, r3
 8015458:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
 801545c:	f001 f8fa 	bl	8016654 <z_impl_z_current_get>
 8015460:	4604      	mov	r4, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
 8015462:	4628      	mov	r0, r5
 8015464:	f7ff ff8e 	bl	8015384 <reason_to_str>
 8015468:	2300      	movs	r3, #0
 801546a:	9304      	str	r3, [sp, #16]
 801546c:	9003      	str	r0, [sp, #12]
 801546e:	9502      	str	r5, [sp, #8]
 8015470:	4a25      	ldr	r2, [pc, #148]	; (8015508 <z_fatal_error+0xc4>)
 8015472:	9201      	str	r2, [sp, #4]
 8015474:	9300      	str	r3, [sp, #0]
 8015476:	2201      	movs	r2, #1
 8015478:	4924      	ldr	r1, [pc, #144]	; (801550c <z_fatal_error+0xc8>)
 801547a:	4618      	mov	r0, r3
 801547c:	f006 fba9 	bl	801bbd2 <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
 8015480:	b11e      	cbz	r6, 801548a <z_fatal_error+0x46>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
 8015482:	69f3      	ldr	r3, [r6, #28]
 8015484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015488:	b9d3      	cbnz	r3, 80154c0 <z_fatal_error+0x7c>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
 801548a:	4620      	mov	r0, r4
 801548c:	f7ff ff9a 	bl	80153c4 <thread_name_get>
 8015490:	9003      	str	r0, [sp, #12]
 8015492:	9402      	str	r4, [sp, #8]
 8015494:	4b1e      	ldr	r3, [pc, #120]	; (8015510 <z_fatal_error+0xcc>)
 8015496:	9301      	str	r3, [sp, #4]
 8015498:	2000      	movs	r0, #0
 801549a:	9000      	str	r0, [sp, #0]
 801549c:	4603      	mov	r3, r0
 801549e:	2201      	movs	r2, #1
 80154a0:	491a      	ldr	r1, [pc, #104]	; (801550c <z_fatal_error+0xc8>)
 80154a2:	f006 fb96 	bl	801bbd2 <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
 80154a6:	4631      	mov	r1, r6
 80154a8:	4628      	mov	r0, r5
 80154aa:	f7ff ff9b 	bl	80153e4 <k_sys_fatal_error_handler>
	__asm__ volatile(
 80154ae:	f387 8811 	msr	BASEPRI, r7
 80154b2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 80154b6:	4620      	mov	r0, r4
 80154b8:	f7f2 f838 	bl	800752c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
 80154bc:	b00f      	add	sp, #60	; 0x3c
 80154be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
 80154c0:	4b14      	ldr	r3, [pc, #80]	; (8015514 <z_fatal_error+0xd0>)
 80154c2:	930c      	str	r3, [sp, #48]	; 0x30
 80154c4:	2300      	movs	r3, #0
 80154c6:	f8ad 301d 	strh.w	r3, [sp, #29]
 80154ca:	f88d 301f 	strb.w	r3, [sp, #31]
 80154ce:	2202      	movs	r2, #2
 80154d0:	f88d 201c 	strb.w	r2, [sp, #28]
 80154d4:	f88d 301e 	strb.w	r3, [sp, #30]
 80154d8:	9a07      	ldr	r2, [sp, #28]
 80154da:	920b      	str	r2, [sp, #44]	; 0x2c
 80154dc:	461a      	mov	r2, r3
 80154de:	f363 0200 	bfi	r2, r3, #0, #1
 80154e2:	f363 0241 	bfi	r2, r3, #1, #1
 80154e6:	f363 0282 	bfi	r2, r3, #2, #1
 80154ea:	f363 02c5 	bfi	r2, r3, #3, #3
 80154ee:	2101      	movs	r1, #1
 80154f0:	f361 1288 	bfi	r2, r1, #6, #3
 80154f4:	2108      	movs	r1, #8
 80154f6:	f361 2252 	bfi	r2, r1, #9, #10
 80154fa:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80154fe:	4903      	ldr	r1, [pc, #12]	; (801550c <z_fatal_error+0xc8>)
 8015500:	a808      	add	r0, sp, #32
 8015502:	f002 fc26 	bl	8017d52 <z_log_msg2_finalize>
 8015506:	e7c0      	b.n	801548a <z_fatal_error+0x46>
 8015508:	0801ebc0 	.word	0x0801ebc0
 801550c:	0801d7e0 	.word	0x0801d7e0
 8015510:	0801ec0c 	.word	0x0801ec0c
 8015514:	0801ebe8 	.word	0x0801ebe8

08015518 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
 8015518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801551c:	b088      	sub	sp, #32
 801551e:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
 8015520:	4b16      	ldr	r3, [pc, #88]	; (801557c <init_idle_thread+0x64>)
 8015522:	25e8      	movs	r5, #232	; 0xe8
 8015524:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
 8015528:	0047      	lsls	r7, r0, #1
 801552a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801552e:	4e14      	ldr	r6, [pc, #80]	; (8015580 <init_idle_thread+0x68>)
 8015530:	eb06 16c3 	add.w	r6, r6, r3, lsl #7

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
 8015534:	f10d 0818 	add.w	r8, sp, #24
 8015538:	4603      	mov	r3, r0
 801553a:	4a12      	ldr	r2, [pc, #72]	; (8015584 <init_idle_thread+0x6c>)
 801553c:	2108      	movs	r1, #8
 801553e:	4640      	mov	r0, r8
 8015540:	f002 f919 	bl	8017776 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
 8015544:	4427      	add	r7, r4
 8015546:	4c10      	ldr	r4, [pc, #64]	; (8015588 <init_idle_thread+0x70>)
 8015548:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
	z_setup_new_thread(thread, stack,
 801554c:	f8cd 8014 	str.w	r8, [sp, #20]
 8015550:	2301      	movs	r3, #1
 8015552:	9304      	str	r3, [sp, #16]
 8015554:	230f      	movs	r3, #15
 8015556:	9303      	str	r3, [sp, #12]
 8015558:	2300      	movs	r3, #0
 801555a:	9302      	str	r3, [sp, #8]
 801555c:	9301      	str	r3, [sp, #4]
 801555e:	9400      	str	r4, [sp, #0]
 8015560:	4b0a      	ldr	r3, [pc, #40]	; (801558c <init_idle_thread+0x74>)
 8015562:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8015566:	4631      	mov	r1, r6
 8015568:	4628      	mov	r0, r5
 801556a:	f000 f94f 	bl	801580c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 801556e:	7b6b      	ldrb	r3, [r5, #13]
 8015570:	f023 0304 	bic.w	r3, r3, #4
 8015574:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
 8015576:	b008      	add	sp, #32
 8015578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801557c:	20002dc8 	.word	0x20002dc8
 8015580:	20009800 	.word	0x20009800
 8015584:	0801ec24 	.word	0x0801ec24
 8015588:	20003c14 	.word	0x20003c14
 801558c:	0801be09 	.word	0x0801be09

08015590 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
 8015590:	b570      	push	{r4, r5, r6, lr}
 8015592:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
 8015594:	f000 ffa6 	bl	80164e4 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
 8015598:	4d1b      	ldr	r5, [pc, #108]	; (8015608 <prepare_multithreading+0x78>)
 801559a:	4b1c      	ldr	r3, [pc, #112]	; (801560c <prepare_multithreading+0x7c>)
 801559c:	619d      	str	r5, [r3, #24]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 801559e:	4b1c      	ldr	r3, [pc, #112]	; (8015610 <prepare_multithreading+0x80>)
 80155a0:	9305      	str	r3, [sp, #20]
 80155a2:	2301      	movs	r3, #1
 80155a4:	9304      	str	r3, [sp, #16]
 80155a6:	2400      	movs	r4, #0
 80155a8:	9403      	str	r4, [sp, #12]
 80155aa:	9402      	str	r4, [sp, #8]
 80155ac:	9401      	str	r4, [sp, #4]
 80155ae:	9400      	str	r4, [sp, #0]
 80155b0:	4b18      	ldr	r3, [pc, #96]	; (8015614 <prepare_multithreading+0x84>)
 80155b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80155b6:	4918      	ldr	r1, [pc, #96]	; (8015618 <prepare_multithreading+0x88>)
 80155b8:	4628      	mov	r0, r5
 80155ba:	f000 f927 	bl	801580c <z_setup_new_thread>
 80155be:	4606      	mov	r6, r0
 80155c0:	7b6b      	ldrb	r3, [r5, #13]
 80155c2:	f023 0304 	bic.w	r3, r3, #4
 80155c6:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
 80155c8:	4628      	mov	r0, r5
 80155ca:	f006 fe4b 	bl	801c264 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 80155ce:	2c00      	cmp	r4, #0
 80155d0:	dd02      	ble.n	80155d8 <prepare_multithreading+0x48>
			CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
	}

	return stack_ptr;
}
 80155d2:	4630      	mov	r0, r6
 80155d4:	b006      	add	sp, #24
 80155d6:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
 80155d8:	4620      	mov	r0, r4
 80155da:	f7ff ff9d 	bl	8015518 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 80155de:	4b0f      	ldr	r3, [pc, #60]	; (801561c <prepare_multithreading+0x8c>)
 80155e0:	22e8      	movs	r2, #232	; 0xe8
 80155e2:	fb02 3204 	mla	r2, r2, r4, r3
 80155e6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80155ea:	4b08      	ldr	r3, [pc, #32]	; (801560c <prepare_multithreading+0x7c>)
 80155ec:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80155f0:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
 80155f2:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
 80155f4:	eb04 1104 	add.w	r1, r4, r4, lsl #4
 80155f8:	4a09      	ldr	r2, [pc, #36]	; (8015620 <prepare_multithreading+0x90>)
 80155fa:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 80155fe:	f502 6208 	add.w	r2, r2, #2176	; 0x880
		_kernel.cpus[i].irq_stack =
 8015602:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
 8015604:	3401      	adds	r4, #1
 8015606:	e7e2      	b.n	80155ce <prepare_multithreading+0x3e>
 8015608:	20002eb0 	.word	0x20002eb0
 801560c:	20003c14 	.word	0x20003c14
 8015610:	0801d960 	.word	0x0801d960
 8015614:	08015625 	.word	0x08015625
 8015618:	20008780 	.word	0x20008780
 801561c:	20002dc8 	.word	0x20002dc8
 8015620:	20009980 	.word	0x20009980

08015624 <bg_thread_main>:
{
 8015624:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
 8015626:	4b0b      	ldr	r3, [pc, #44]	; (8015654 <bg_thread_main+0x30>)
 8015628:	2201      	movs	r2, #1
 801562a:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 801562c:	2002      	movs	r0, #2
 801562e:	f001 faf3 	bl	8016c18 <z_sys_init_run_level>
	boot_banner();
 8015632:	f001 fad7 	bl	8016be4 <boot_banner>
	z_cpp_init_static();
 8015636:	f002 fbec 	bl	8017e12 <z_cpp_init_static>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 801563a:	2003      	movs	r0, #3
 801563c:	f001 faec 	bl	8016c18 <z_sys_init_run_level>
	z_init_static_threads();
 8015640:	f000 f92a 	bl	8015898 <z_init_static_threads>
	main();
 8015644:	f7ee f962 	bl	800390c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8015648:	4a03      	ldr	r2, [pc, #12]	; (8015658 <bg_thread_main+0x34>)
 801564a:	7b13      	ldrb	r3, [r2, #12]
 801564c:	f023 0301 	bic.w	r3, r3, #1
 8015650:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8015652:	bd08      	pop	{r3, pc}
 8015654:	20003c7b 	.word	0x20003c7b
 8015658:	20002eb0 	.word	0x20002eb0

0801565c <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
 801565c:	b508      	push	{r3, lr}
 801565e:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8015660:	4a01      	ldr	r2, [pc, #4]	; (8015668 <switch_to_main_thread+0xc>)
 8015662:	4802      	ldr	r0, [pc, #8]	; (801566c <switch_to_main_thread+0x10>)
 8015664:	f7f1 f8f8 	bl	8006858 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8015668:	08015625 	.word	0x08015625
 801566c:	20002eb0 	.word	0x20002eb0

08015670 <z_bss_zero>:
{
 8015670:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8015672:	4803      	ldr	r0, [pc, #12]	; (8015680 <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
 8015674:	4a03      	ldr	r2, [pc, #12]	; (8015684 <z_bss_zero+0x14>)
 8015676:	1a12      	subs	r2, r2, r0
 8015678:	2100      	movs	r1, #0
 801567a:	f007 f8fe 	bl	801c87a <memset>
}
 801567e:	bd08      	pop	{r3, pc}
 8015680:	20001410 	.word	0x20001410
 8015684:	20003c80 	.word	0x20003c80

08015688 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
 8015688:	b500      	push	{lr}
 801568a:	b0bb      	sub	sp, #236	; 0xec
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 801568c:	4b1d      	ldr	r3, [pc, #116]	; (8015704 <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 801568e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8015692:	4c1d      	ldr	r4, [pc, #116]	; (8015708 <z_cstart+0x80>)
 8015694:	6963      	ldr	r3, [r4, #20]
 8015696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801569a:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801569c:	23fc      	movs	r3, #252	; 0xfc
 801569e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 80156a2:	2500      	movs	r5, #0
 80156a4:	77e5      	strb	r5, [r4, #31]
 80156a6:	7625      	strb	r5, [r4, #24]
 80156a8:	7665      	strb	r5, [r4, #25]
 80156aa:	76a5      	strb	r5, [r4, #26]
 80156ac:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 80156b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80156b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80156b6:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 80156b8:	f7f1 feee 	bl	8007498 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 80156bc:	f7f0 fd9c 	bl	80061f8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 80156c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80156c4:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 80156c6:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
 80156c8:	f7f2 f836 	bl	8007738 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 80156cc:	f7f1 ff44 	bl	8007558 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
 80156d0:	f7ef fe6a 	bl	80053a8 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
 80156d4:	2401      	movs	r4, #1
 80156d6:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
 80156da:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
 80156de:	9522      	str	r5, [sp, #136]	; 0x88
	dummy_thread->stack_info.size = 0U;
 80156e0:	9523      	str	r5, [sp, #140]	; 0x8c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
 80156e2:	9525      	str	r5, [sp, #148]	; 0x94
#endif

	_current_cpu->current = dummy_thread;
 80156e4:	4b09      	ldr	r3, [pc, #36]	; (801570c <z_cstart+0x84>)
 80156e6:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
 80156ea:	f001 fa89 	bl	8016c00 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 80156ee:	4628      	mov	r0, r5
 80156f0:	f001 fa92 	bl	8016c18 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 80156f4:	4620      	mov	r0, r4
 80156f6:	f001 fa8f 	bl	8016c18 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
 80156fa:	f7ff ff49 	bl	8015590 <prepare_multithreading>
 80156fe:	f7ff ffad 	bl	801565c <switch_to_main_thread>
 8015702:	bf00      	nop
 8015704:	2000a200 	.word	0x2000a200
 8015708:	e000ed00 	.word	0xe000ed00
 801570c:	20003c14 	.word	0x20003c14

08015710 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
 8015710:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8015712:	4c06      	ldr	r4, [pc, #24]	; (801572c <statics_init+0x1c>)
 8015714:	4b06      	ldr	r3, [pc, #24]	; (8015730 <statics_init+0x20>)
 8015716:	429c      	cmp	r4, r3
 8015718:	d206      	bcs.n	8015728 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 801571a:	68a2      	ldr	r2, [r4, #8]
 801571c:	6861      	ldr	r1, [r4, #4]
 801571e:	4620      	mov	r0, r4
 8015720:	f006 fa6d 	bl	801bbfe <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
 8015724:	3418      	adds	r4, #24
 8015726:	e7f5      	b.n	8015714 <statics_init+0x4>
		}
	}
	return 0;
}
 8015728:	2000      	movs	r0, #0
 801572a:	bd10      	pop	{r4, pc}
 801572c:	20001080 	.word	0x20001080
 8015730:	20001080 	.word	0x20001080

08015734 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
 8015734:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 8015736:	4c06      	ldr	r4, [pc, #24]	; (8015750 <init_mem_slab_module+0x1c>)
	int rc = 0;
 8015738:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 801573a:	4b06      	ldr	r3, [pc, #24]	; (8015754 <init_mem_slab_module+0x20>)
 801573c:	429c      	cmp	r4, r3
 801573e:	d206      	bcs.n	801574e <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
 8015740:	4620      	mov	r0, r4
 8015742:	f006 facc 	bl	801bcde <create_free_list>
		if (rc < 0) {
 8015746:	2800      	cmp	r0, #0
 8015748:	db01      	blt.n	801574e <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
 801574a:	3420      	adds	r4, #32
 801574c:	e7f5      	b.n	801573a <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
 801574e:	bd10      	pop	{r4, pc}
 8015750:	20001040 	.word	0x20001040
 8015754:	20001080 	.word	0x20001080

08015758 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
 8015758:	b5f0      	push	{r4, r5, r6, r7, lr}
 801575a:	b083      	sub	sp, #12
 801575c:	460c      	mov	r4, r1
 801575e:	461f      	mov	r7, r3
	__asm__ volatile(
 8015760:	f04f 0304 	mov.w	r3, #4
 8015764:	f3ef 8111 	mrs	r1, BASEPRI
 8015768:	f383 8812 	msr	BASEPRI_MAX, r3
 801576c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
 8015770:	6983      	ldr	r3, [r0, #24]
 8015772:	b16b      	cbz	r3, 8015790 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
 8015774:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
 8015776:	6983      	ldr	r3, [r0, #24]
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	6183      	str	r3, [r0, #24]
		slab->num_used++;
 801577c:	69c3      	ldr	r3, [r0, #28]
 801577e:	3301      	adds	r3, #1
 8015780:	61c3      	str	r3, [r0, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
 8015782:	2000      	movs	r0, #0
	__asm__ volatile(
 8015784:	f381 8811 	msr	BASEPRI, r1
 8015788:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
 801578c:	b003      	add	sp, #12
 801578e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015790:	4616      	mov	r6, r2
 8015792:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
 8015796:	ea56 0307 	orrs.w	r3, r6, r7
 801579a:	d104      	bne.n	80157a6 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
 801579c:	2300      	movs	r3, #0
 801579e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
 80157a0:	f06f 000b 	mvn.w	r0, #11
 80157a4:	e7ee      	b.n	8015784 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
 80157a6:	e9cd 6700 	strd	r6, r7, [sp]
 80157aa:	4602      	mov	r2, r0
 80157ac:	4628      	mov	r0, r5
 80157ae:	f000 fd71 	bl	8016294 <z_pend_curr>
		if (result == 0) {
 80157b2:	2800      	cmp	r0, #0
 80157b4:	d1ea      	bne.n	801578c <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
 80157b6:	4b02      	ldr	r3, [pc, #8]	; (80157c0 <k_mem_slab_alloc+0x68>)
 80157b8:	689b      	ldr	r3, [r3, #8]
 80157ba:	695b      	ldr	r3, [r3, #20]
 80157bc:	6023      	str	r3, [r4, #0]
		return result;
 80157be:	e7e5      	b.n	801578c <k_mem_slab_alloc+0x34>
 80157c0:	20003c14 	.word	0x20003c14

080157c4 <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
 80157c4:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
 80157c6:	4604      	mov	r4, r0
 80157c8:	b140      	cbz	r0, 80157dc <z_impl_k_thread_name_set+0x18>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
 80157ca:	2220      	movs	r2, #32
 80157cc:	f104 0062 	add.w	r0, r4, #98	; 0x62
 80157d0:	f007 f984 	bl	801cadc <strncpy>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
 80157d4:	2000      	movs	r0, #0
 80157d6:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
 80157da:	bd10      	pop	{r4, pc}
		thread = _current;
 80157dc:	4b01      	ldr	r3, [pc, #4]	; (80157e4 <z_impl_k_thread_name_set+0x20>)
 80157de:	689c      	ldr	r4, [r3, #8]
 80157e0:	e7f3      	b.n	80157ca <z_impl_k_thread_name_set+0x6>
 80157e2:	bf00      	nop
 80157e4:	20003c14 	.word	0x20003c14

080157e8 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
 80157e8:	b538      	push	{r3, r4, r5, lr}
 80157ea:	4614      	mov	r4, r2
 80157ec:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 80157ee:	ea54 0305 	orrs.w	r3, r4, r5
 80157f2:	d102      	bne.n	80157fa <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
 80157f4:	f006 fad6 	bl	801bda4 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
 80157f8:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80157fa:	462b      	mov	r3, r5
 80157fc:	4902      	ldr	r1, [pc, #8]	; (8015808 <schedule_new_thread+0x20>)
 80157fe:	3018      	adds	r0, #24
 8015800:	f000 ffda 	bl	80167b8 <z_add_timeout>
 8015804:	e7f8      	b.n	80157f8 <schedule_new_thread+0x10>
 8015806:	bf00      	nop
 8015808:	0801c29d 	.word	0x0801c29d

0801580c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 801580c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015810:	b084      	sub	sp, #16
 8015812:	4604      	mov	r4, r0
 8015814:	460e      	mov	r6, r1
 8015816:	4615      	mov	r5, r2
 8015818:	461f      	mov	r7, r3
 801581a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 801581e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8015822:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
 8015824:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
 8015826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015828:	2204      	movs	r2, #4
 801582a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801582c:	f006 fabe 	bl	801bdac <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
 8015830:	462a      	mov	r2, r5
 8015832:	4631      	mov	r1, r6
 8015834:	4620      	mov	r0, r4
 8015836:	f006 fa95 	bl	801bd64 <setup_thread_stack>
 801583a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 801583c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801583e:	9302      	str	r3, [sp, #8]
 8015840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015842:	9301      	str	r3, [sp, #4]
 8015844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015846:	9300      	str	r3, [sp, #0]
 8015848:	463b      	mov	r3, r7
 801584a:	4602      	mov	r2, r0
 801584c:	4631      	mov	r1, r6
 801584e:	4620      	mov	r0, r4
 8015850:	f7f0 ff46 	bl	80066e0 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
 8015854:	2300      	movs	r3, #0
 8015856:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->next_thread = _kernel.threads;
	_kernel.threads = new_thread;
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
 8015858:	f1b8 0f00 	cmp.w	r8, #0
 801585c:	d013      	beq.n	8015886 <z_setup_new_thread+0x7a>
 801585e:	221f      	movs	r2, #31
 8015860:	4641      	mov	r1, r8
 8015862:	f104 0062 	add.w	r0, r4, #98	; 0x62
 8015866:	f007 f939 	bl	801cadc <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
 801586a:	2300      	movs	r3, #0
 801586c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 8015870:	4b08      	ldr	r3, [pc, #32]	; (8015894 <z_setup_new_thread+0x88>)
 8015872:	689b      	ldr	r3, [r3, #8]
 8015874:	b15b      	cbz	r3, 801588e <z_setup_new_thread+0x82>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 8015876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801587a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
 801587e:	4628      	mov	r0, r5
 8015880:	b004      	add	sp, #16
 8015882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		new_thread->name[0] = '\0';
 8015886:	2300      	movs	r3, #0
 8015888:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801588c:	e7f0      	b.n	8015870 <z_setup_new_thread+0x64>
		new_thread->resource_pool = NULL;
 801588e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		return stack_ptr;
 8015892:	e7f4      	b.n	801587e <z_setup_new_thread+0x72>
 8015894:	20003c14 	.word	0x20003c14

08015898 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 8015898:	b5d0      	push	{r4, r6, r7, lr}
 801589a:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
 801589c:	4c1d      	ldr	r4, [pc, #116]	; (8015914 <z_init_static_threads+0x7c>)
 801589e:	4b1e      	ldr	r3, [pc, #120]	; (8015918 <z_init_static_threads+0x80>)
 80158a0:	429c      	cmp	r4, r3
 80158a2:	d215      	bcs.n	80158d0 <z_init_static_threads+0x38>
		z_setup_new_thread(
 80158a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80158a6:	9305      	str	r3, [sp, #20]
 80158a8:	6a23      	ldr	r3, [r4, #32]
 80158aa:	9304      	str	r3, [sp, #16]
 80158ac:	69e3      	ldr	r3, [r4, #28]
 80158ae:	9303      	str	r3, [sp, #12]
 80158b0:	69a3      	ldr	r3, [r4, #24]
 80158b2:	9302      	str	r3, [sp, #8]
 80158b4:	6963      	ldr	r3, [r4, #20]
 80158b6:	9301      	str	r3, [sp, #4]
 80158b8:	6923      	ldr	r3, [r4, #16]
 80158ba:	9300      	str	r3, [sp, #0]
 80158bc:	68e3      	ldr	r3, [r4, #12]
 80158be:	68a2      	ldr	r2, [r4, #8]
 80158c0:	6861      	ldr	r1, [r4, #4]
 80158c2:	6820      	ldr	r0, [r4, #0]
 80158c4:	f7ff ffa2 	bl	801580c <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
 80158c8:	6823      	ldr	r3, [r4, #0]
 80158ca:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
 80158cc:	3430      	adds	r4, #48	; 0x30
 80158ce:	e7e6      	b.n	801589e <z_init_static_threads+0x6>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 80158d0:	f000 fb98 	bl	8016004 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80158d4:	4c0f      	ldr	r4, [pc, #60]	; (8015914 <z_init_static_threads+0x7c>)
 80158d6:	e010      	b.n	80158fa <z_init_static_threads+0x62>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
					    K_MSEC(thread_data->init_delay));
 80158d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80158dc:	17df      	asrs	r7, r3, #31
 80158de:	00ba      	lsls	r2, r7, #2
 80158e0:	0099      	lsls	r1, r3, #2
 80158e2:	ea42 7093 	orr.w	r0, r2, r3, lsr #30
 80158e6:	18c9      	adds	r1, r1, r3
 80158e8:	eb47 0000 	adc.w	r0, r7, r0
 80158ec:	184a      	adds	r2, r1, r1
 80158ee:	eb40 0300 	adc.w	r3, r0, r0
			schedule_new_thread(thread_data->init_thread,
 80158f2:	6820      	ldr	r0, [r4, #0]
 80158f4:	f7ff ff78 	bl	80157e8 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
 80158f8:	3430      	adds	r4, #48	; 0x30
 80158fa:	4b07      	ldr	r3, [pc, #28]	; (8015918 <z_init_static_threads+0x80>)
 80158fc:	429c      	cmp	r4, r3
 80158fe:	d204      	bcs.n	801590a <z_init_static_threads+0x72>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 8015900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015906:	d0f7      	beq.n	80158f8 <z_init_static_threads+0x60>
 8015908:	e7e6      	b.n	80158d8 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
 801590a:	f000 fd79 	bl	8016400 <k_sched_unlock>
}
 801590e:	b006      	add	sp, #24
 8015910:	bdd0      	pop	{r4, r6, r7, pc}
 8015912:	bf00      	nop
 8015914:	20001040 	.word	0x20001040
 8015918:	20001040 	.word	0x20001040

0801591c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
 801591c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015920:	b083      	sub	sp, #12
 8015922:	4604      	mov	r4, r0
 8015924:	461d      	mov	r5, r3
	__asm__ volatile(
 8015926:	f04f 0304 	mov.w	r3, #4
 801592a:	f3ef 8711 	mrs	r7, BASEPRI
 801592e:	f383 8812 	msr	BASEPRI_MAX, r3
 8015932:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8015936:	68c1      	ldr	r1, [r0, #12]
 8015938:	b999      	cbnz	r1, 8015962 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
 801593a:	2900      	cmp	r1, #0
 801593c:	d14f      	bne.n	80159de <z_impl_k_mutex_lock+0xc2>
 801593e:	4b3a      	ldr	r3, [pc, #232]	; (8015a28 <z_impl_k_mutex_lock+0x10c>)
 8015940:	689b      	ldr	r3, [r3, #8]
 8015942:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
 8015946:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
 8015948:	3101      	adds	r1, #1
 801594a:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
 801594c:	4b36      	ldr	r3, [pc, #216]	; (8015a28 <z_impl_k_mutex_lock+0x10c>)
 801594e:	689b      	ldr	r3, [r3, #8]
 8015950:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 8015952:	f387 8811 	msr	BASEPRI, r7
 8015956:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
 801595a:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
 801595c:	b003      	add	sp, #12
 801595e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015962:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
 8015964:	6882      	ldr	r2, [r0, #8]
 8015966:	4b30      	ldr	r3, [pc, #192]	; (8015a28 <z_impl_k_mutex_lock+0x10c>)
 8015968:	689b      	ldr	r3, [r3, #8]
 801596a:	429a      	cmp	r2, r3
 801596c:	d0e5      	beq.n	801593a <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
 801596e:	ea55 0106 	orrs.w	r1, r5, r6
 8015972:	bf0c      	ite	eq
 8015974:	f04f 0801 	moveq.w	r8, #1
 8015978:	f04f 0800 	movne.w	r8, #0
 801597c:	d031      	beq.n	80159e2 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
 801597e:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
 8015982:	4649      	mov	r1, r9
 8015984:	f993 000e 	ldrsb.w	r0, [r3, #14]
 8015988:	f006 fa42 	bl	801be10 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
 801598c:	4581      	cmp	r9, r0
 801598e:	dc2f      	bgt.n	80159f0 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
 8015990:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
 8015994:	9600      	str	r6, [sp, #0]
 8015996:	9501      	str	r5, [sp, #4]
 8015998:	4622      	mov	r2, r4
 801599a:	4639      	mov	r1, r7
 801599c:	4823      	ldr	r0, [pc, #140]	; (8015a2c <z_impl_k_mutex_lock+0x110>)
 801599e:	f000 fc79 	bl	8016294 <z_pend_curr>
	if (got_mutex == 0) {
 80159a2:	2800      	cmp	r0, #0
 80159a4:	d0da      	beq.n	801595c <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
 80159a6:	f04f 0304 	mov.w	r3, #4
 80159aa:	f3ef 8511 	mrs	r5, BASEPRI
 80159ae:	f383 8812 	msr	BASEPRI_MAX, r3
 80159b2:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
 80159b6:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80159b8:	429c      	cmp	r4, r3
 80159ba:	d01f      	beq.n	80159fc <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 80159bc:	b1f3      	cbz	r3, 80159fc <z_impl_k_mutex_lock+0xe0>
 80159be:	6921      	ldr	r1, [r4, #16]
 80159c0:	f993 000e 	ldrsb.w	r0, [r3, #14]
 80159c4:	f006 fa24 	bl	801be10 <new_prio_for_inheritance>
 80159c8:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 80159ca:	4620      	mov	r0, r4
 80159cc:	f006 fa2b 	bl	801be26 <adjust_owner_prio>
 80159d0:	b9b0      	cbnz	r0, 8015a00 <z_impl_k_mutex_lock+0xe4>
 80159d2:	f1b9 0f00 	cmp.w	r9, #0
 80159d6:	d015      	beq.n	8015a04 <z_impl_k_mutex_lock+0xe8>
 80159d8:	f04f 0801 	mov.w	r8, #1
 80159dc:	e012      	b.n	8015a04 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
 80159de:	6923      	ldr	r3, [r4, #16]
 80159e0:	e7b1      	b.n	8015946 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
 80159e2:	f387 8811 	msr	BASEPRI, r7
 80159e6:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 80159ea:	f06f 000f 	mvn.w	r0, #15
 80159ee:	e7b5      	b.n	801595c <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
 80159f0:	4601      	mov	r1, r0
 80159f2:	4620      	mov	r0, r4
 80159f4:	f006 fa17 	bl	801be26 <adjust_owner_prio>
 80159f8:	4681      	mov	r9, r0
 80159fa:	e7cb      	b.n	8015994 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
 80159fc:	6921      	ldr	r1, [r4, #16]
 80159fe:	e7e4      	b.n	80159ca <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
 8015a00:	f04f 0801 	mov.w	r8, #1
	if (resched) {
 8015a04:	f1b8 0f00 	cmp.w	r8, #0
 8015a08:	d106      	bne.n	8015a18 <z_impl_k_mutex_lock+0xfc>
 8015a0a:	f385 8811 	msr	BASEPRI, r5
 8015a0e:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
 8015a12:	f06f 000a 	mvn.w	r0, #10
 8015a16:	e7a1      	b.n	801595c <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
 8015a18:	4629      	mov	r1, r5
 8015a1a:	4804      	ldr	r0, [pc, #16]	; (8015a2c <z_impl_k_mutex_lock+0x110>)
 8015a1c:	f000 fad6 	bl	8015fcc <z_reschedule>
	return -EAGAIN;
 8015a20:	f06f 000a 	mvn.w	r0, #10
 8015a24:	e79a      	b.n	801595c <z_impl_k_mutex_lock+0x40>
 8015a26:	bf00      	nop
 8015a28:	20003c14 	.word	0x20003c14
 8015a2c:	20003c3c 	.word	0x20003c3c

08015a30 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
 8015a30:	6882      	ldr	r2, [r0, #8]
 8015a32:	2a00      	cmp	r2, #0
 8015a34:	d035      	beq.n	8015aa2 <z_impl_k_mutex_unlock+0x72>
{
 8015a36:	b538      	push	{r3, r4, r5, lr}
 8015a38:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
 8015a3a:	4b1d      	ldr	r3, [pc, #116]	; (8015ab0 <z_impl_k_mutex_unlock+0x80>)
 8015a3c:	689b      	ldr	r3, [r3, #8]
 8015a3e:	429a      	cmp	r2, r3
 8015a40:	d132      	bne.n	8015aa8 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
 8015a42:	7bda      	ldrb	r2, [r3, #15]
 8015a44:	3a01      	subs	r2, #1
 8015a46:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
 8015a48:	68c3      	ldr	r3, [r0, #12]
 8015a4a:	2b01      	cmp	r3, #1
 8015a4c:	d905      	bls.n	8015a5a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
 8015a4e:	3b01      	subs	r3, #1
 8015a50:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
 8015a52:	f000 fcd5 	bl	8016400 <k_sched_unlock>

	return 0;
 8015a56:	2000      	movs	r0, #0
}
 8015a58:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 8015a5a:	f04f 0304 	mov.w	r3, #4
 8015a5e:	f3ef 8511 	mrs	r5, BASEPRI
 8015a62:	f383 8812 	msr	BASEPRI_MAX, r3
 8015a66:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
 8015a6a:	6901      	ldr	r1, [r0, #16]
 8015a6c:	f006 f9db 	bl	801be26 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
 8015a70:	4620      	mov	r0, r4
 8015a72:	f006 fcb9 	bl	801c3e8 <z_unpend_first_thread>
	mutex->owner = new_owner;
 8015a76:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
 8015a78:	b160      	cbz	r0, 8015a94 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
 8015a7a:	f990 300e 	ldrsb.w	r3, [r0, #14]
 8015a7e:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8015a80:	2300      	movs	r3, #0
 8015a82:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
		z_ready_thread(new_owner);
 8015a86:	f006 fbed 	bl	801c264 <z_ready_thread>
		z_reschedule(&lock, key);
 8015a8a:	4629      	mov	r1, r5
 8015a8c:	4809      	ldr	r0, [pc, #36]	; (8015ab4 <z_impl_k_mutex_unlock+0x84>)
 8015a8e:	f000 fa9d 	bl	8015fcc <z_reschedule>
 8015a92:	e7de      	b.n	8015a52 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
 8015a94:	2300      	movs	r3, #0
 8015a96:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
 8015a98:	f385 8811 	msr	BASEPRI, r5
 8015a9c:	f3bf 8f6f 	isb	sy
 8015aa0:	e7d7      	b.n	8015a52 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
 8015aa2:	f06f 0015 	mvn.w	r0, #21
}
 8015aa6:	4770      	bx	lr
		return -EPERM;
 8015aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015aac:	e7d4      	b.n	8015a58 <z_impl_k_mutex_unlock+0x28>
 8015aae:	bf00      	nop
 8015ab0:	20003c14 	.word	0x20003c14
 8015ab4:	20003c3c 	.word	0x20003c3c

08015ab8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
 8015ab8:	b5d0      	push	{r4, r6, r7, lr}
 8015aba:	b082      	sub	sp, #8
 8015abc:	4601      	mov	r1, r0
 8015abe:	4616      	mov	r6, r2
 8015ac0:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 8015ac2:	4603      	mov	r3, r0
	__asm__ volatile(
 8015ac4:	f04f 0204 	mov.w	r2, #4
 8015ac8:	f3ef 8411 	mrs	r4, BASEPRI
 8015acc:	f382 8812 	msr	BASEPRI_MAX, r2
 8015ad0:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
 8015ad4:	f853 0b08 	ldr.w	r0, [r3], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
 8015ad8:	b188      	cbz	r0, 8015afe <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 8015ada:	6803      	ldr	r3, [r0, #0]
 8015adc:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
 8015ae0:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
 8015ae2:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
 8015ae4:	4290      	cmp	r0, r2
 8015ae6:	d008      	beq.n	8015afa <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
 8015ae8:	2101      	movs	r1, #1
 8015aea:	f006 fa22 	bl	801bf32 <z_queue_node_peek>
	__asm__ volatile(
 8015aee:	f384 8811 	msr	BASEPRI, r4
 8015af2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
 8015af6:	b002      	add	sp, #8
 8015af8:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
 8015afa:	604b      	str	r3, [r1, #4]
}
 8015afc:	e7f4      	b.n	8015ae8 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8015afe:	ea56 0207 	orrs.w	r2, r6, r7
 8015b02:	d00c      	beq.n	8015b1e <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
 8015b04:	e9cd 6700 	strd	r6, r7, [sp]
 8015b08:	f101 020c 	add.w	r2, r1, #12
 8015b0c:	4621      	mov	r1, r4
 8015b0e:	4618      	mov	r0, r3
 8015b10:	f000 fbc0 	bl	8016294 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
 8015b14:	b948      	cbnz	r0, 8015b2a <z_impl_k_queue_get+0x72>
 8015b16:	4b06      	ldr	r3, [pc, #24]	; (8015b30 <z_impl_k_queue_get+0x78>)
 8015b18:	689b      	ldr	r3, [r3, #8]
 8015b1a:	6958      	ldr	r0, [r3, #20]
 8015b1c:	e7eb      	b.n	8015af6 <z_impl_k_queue_get+0x3e>
 8015b1e:	f384 8811 	msr	BASEPRI, r4
 8015b22:	f3bf 8f6f 	isb	sy
		return NULL;
 8015b26:	2000      	movs	r0, #0
 8015b28:	e7e5      	b.n	8015af6 <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
 8015b2a:	2000      	movs	r0, #0
 8015b2c:	e7e3      	b.n	8015af6 <z_impl_k_queue_get+0x3e>
 8015b2e:	bf00      	nop
 8015b30:	20003c14 	.word	0x20003c14

08015b34 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8015b34:	b538      	push	{r3, r4, r5, lr}
 8015b36:	4604      	mov	r4, r0
	__asm__ volatile(
 8015b38:	f04f 0304 	mov.w	r3, #4
 8015b3c:	f3ef 8511 	mrs	r5, BASEPRI
 8015b40:	f383 8812 	msr	BASEPRI_MAX, r3
 8015b44:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
 8015b48:	f006 fc4e 	bl	801c3e8 <z_unpend_first_thread>

	if (thread != NULL) {
 8015b4c:	b148      	cbz	r0, 8015b62 <z_impl_k_sem_give+0x2e>
 8015b4e:	2200      	movs	r2, #0
 8015b50:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
 8015b54:	f006 fb86 	bl	801c264 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
 8015b58:	4629      	mov	r1, r5
 8015b5a:	4809      	ldr	r0, [pc, #36]	; (8015b80 <z_impl_k_sem_give+0x4c>)
 8015b5c:	f000 fa36 	bl	8015fcc <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
 8015b60:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8015b62:	68a3      	ldr	r3, [r4, #8]
 8015b64:	68e2      	ldr	r2, [r4, #12]
 8015b66:	4293      	cmp	r3, r2
 8015b68:	d008      	beq.n	8015b7c <z_impl_k_sem_give+0x48>
 8015b6a:	2201      	movs	r2, #1
 8015b6c:	4413      	add	r3, r2
 8015b6e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 8015b70:	2102      	movs	r1, #2
 8015b72:	f104 0010 	add.w	r0, r4, #16
 8015b76:	f006 fe14 	bl	801c7a2 <z_handle_obj_poll_events>
}
 8015b7a:	e7ed      	b.n	8015b58 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8015b7c:	2200      	movs	r2, #0
 8015b7e:	e7f5      	b.n	8015b6c <z_impl_k_sem_give+0x38>
 8015b80:	20003c40 	.word	0x20003c40

08015b84 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
 8015b84:	b530      	push	{r4, r5, lr}
 8015b86:	b083      	sub	sp, #12
 8015b88:	461d      	mov	r5, r3
 8015b8a:	f04f 0304 	mov.w	r3, #4
 8015b8e:	f3ef 8111 	mrs	r1, BASEPRI
 8015b92:	f383 8812 	msr	BASEPRI_MAX, r3
 8015b96:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
 8015b9a:	6883      	ldr	r3, [r0, #8]
 8015b9c:	b143      	cbz	r3, 8015bb0 <z_impl_k_sem_take+0x2c>
		sem->count--;
 8015b9e:	3b01      	subs	r3, #1
 8015ba0:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
 8015ba2:	f381 8811 	msr	BASEPRI, r1
 8015ba6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
 8015baa:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
 8015bac:	b003      	add	sp, #12
 8015bae:	bd30      	pop	{r4, r5, pc}
 8015bb0:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 8015bb2:	ea54 0305 	orrs.w	r3, r4, r5
 8015bb6:	d006      	beq.n	8015bc6 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 8015bb8:	e9cd 4500 	strd	r4, r5, [sp]
 8015bbc:	4602      	mov	r2, r0
 8015bbe:	4805      	ldr	r0, [pc, #20]	; (8015bd4 <z_impl_k_sem_take+0x50>)
 8015bc0:	f000 fb68 	bl	8016294 <z_pend_curr>
	return ret;
 8015bc4:	e7f2      	b.n	8015bac <z_impl_k_sem_take+0x28>
 8015bc6:	f381 8811 	msr	BASEPRI, r1
 8015bca:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
 8015bce:	f06f 000f 	mvn.w	r0, #15
 8015bd2:	e7eb      	b.n	8015bac <z_impl_k_sem_take+0x28>
 8015bd4:	20003c40 	.word	0x20003c40

08015bd8 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
 8015bd8:	b538      	push	{r3, r4, r5, lr}
 8015bda:	4604      	mov	r4, r0
	__asm__ volatile(
 8015bdc:	f04f 0304 	mov.w	r3, #4
 8015be0:	f3ef 8511 	mrs	r5, BASEPRI
 8015be4:	f383 8812 	msr	BASEPRI_MAX, r3
 8015be8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
 8015bec:	4620      	mov	r0, r4
 8015bee:	f006 fbfb 	bl	801c3e8 <z_unpend_first_thread>
		if (thread == NULL) {
 8015bf2:	b130      	cbz	r0, 8015c02 <z_impl_k_sem_reset+0x2a>
 8015bf4:	f06f 020a 	mvn.w	r2, #10
 8015bf8:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
 8015bfc:	f006 fb32 	bl	801c264 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
 8015c00:	e7f4      	b.n	8015bec <z_impl_k_sem_reset+0x14>
	}
	sem->count = 0;
 8015c02:	2300      	movs	r3, #0
 8015c04:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
 8015c06:	2102      	movs	r1, #2
 8015c08:	f104 0010 	add.w	r0, r4, #16
 8015c0c:	f006 fdc9 	bl	801c7a2 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
 8015c10:	4629      	mov	r1, r5
 8015c12:	4802      	ldr	r0, [pc, #8]	; (8015c1c <z_impl_k_sem_reset+0x44>)
 8015c14:	f000 f9da 	bl	8015fcc <z_reschedule>
}
 8015c18:	bd38      	pop	{r3, r4, r5, pc}
 8015c1a:	bf00      	nop
 8015c1c:	20003c40 	.word	0x20003c40

08015c20 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
 8015c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c22:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
 8015c24:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8015c26:	f013 0f02 	tst.w	r3, #2
 8015c2a:	d15b      	bne.n	8015ce4 <submit_to_queue_locked+0xc4>
 8015c2c:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
 8015c2e:	f013 0f04 	tst.w	r3, #4
 8015c32:	d15c      	bne.n	8015cee <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
 8015c34:	680b      	ldr	r3, [r1, #0]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d037      	beq.n	8015caa <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
 8015c3a:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
 8015c3c:	f013 0f01 	tst.w	r3, #1
 8015c40:	d036      	beq.n	8015cb0 <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
 8015c42:	68a3      	ldr	r3, [r4, #8]
 8015c44:	602b      	str	r3, [r5, #0]
			ret = 2;
 8015c46:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
 8015c48:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
 8015c4a:	2e00      	cmp	r6, #0
 8015c4c:	d03e      	beq.n	8015ccc <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8015c4e:	4b29      	ldr	r3, [pc, #164]	; (8015cf4 <submit_to_queue_locked+0xd4>)
 8015c50:	689b      	ldr	r3, [r3, #8]
 8015c52:	42b3      	cmp	r3, r6
 8015c54:	d02e      	beq.n	8015cb4 <submit_to_queue_locked+0x94>
 8015c56:	2300      	movs	r3, #0
 8015c58:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
 8015c5a:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
 8015c5e:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8015c62:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
 8015c66:	f013 0f01 	tst.w	r3, #1
 8015c6a:	d032      	beq.n	8015cd2 <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
 8015c6c:	b101      	cbz	r1, 8015c70 <submit_to_queue_locked+0x50>
 8015c6e:	b39a      	cbz	r2, 8015cd8 <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
 8015c70:	b100      	cbz	r0, 8015c74 <submit_to_queue_locked+0x54>
 8015c72:	b3a1      	cbz	r1, 8015cde <submit_to_queue_locked+0xbe>
	parent->next = child;
 8015c74:	2300      	movs	r3, #0
 8015c76:	6023      	str	r3, [r4, #0]
	return list->tail;
 8015c78:	f8d6 30ec 	ldr.w	r3, [r6, #236]	; 0xec
Z_GENLIST_APPEND(slist, snode)
 8015c7c:	b30b      	cbz	r3, 8015cc2 <submit_to_queue_locked+0xa2>
	parent->next = child;
 8015c7e:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8015c80:	f8c6 40ec 	str.w	r4, [r6, #236]	; 0xec
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
 8015c84:	2200      	movs	r2, #0
 8015c86:	4611      	mov	r1, r2
 8015c88:	f106 00f0 	add.w	r0, r6, #240	; 0xf0
 8015c8c:	f006 fbec 	bl	801c468 <z_sched_wake>
		ret = 1;
 8015c90:	2001      	movs	r0, #1

		if (rc < 0) {
 8015c92:	2800      	cmp	r0, #0
 8015c94:	db06      	blt.n	8015ca4 <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
 8015c96:	68e3      	ldr	r3, [r4, #12]
 8015c98:	f043 0304 	orr.w	r3, r3, #4
 8015c9c:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
 8015c9e:	682b      	ldr	r3, [r5, #0]
 8015ca0:	60a3      	str	r3, [r4, #8]
 8015ca2:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
 8015ca4:	2800      	cmp	r0, #0
 8015ca6:	dc21      	bgt.n	8015cec <submit_to_queue_locked+0xcc>
 8015ca8:	e01e      	b.n	8015ce8 <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
 8015caa:	6883      	ldr	r3, [r0, #8]
 8015cac:	600b      	str	r3, [r1, #0]
 8015cae:	e7c4      	b.n	8015c3a <submit_to_queue_locked+0x1a>
		ret = 1;
 8015cb0:	2701      	movs	r7, #1
 8015cb2:	e7c9      	b.n	8015c48 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
 8015cb4:	f006 f86e 	bl	801bd94 <k_is_in_isr>
 8015cb8:	b908      	cbnz	r0, 8015cbe <submit_to_queue_locked+0x9e>
 8015cba:	2301      	movs	r3, #1
 8015cbc:	e7cc      	b.n	8015c58 <submit_to_queue_locked+0x38>
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	e7ca      	b.n	8015c58 <submit_to_queue_locked+0x38>
 8015cc2:	f8c6 40ec 	str.w	r4, [r6, #236]	; 0xec
	list->head = node;
 8015cc6:	f8c6 40e8 	str.w	r4, [r6, #232]	; 0xe8
}
 8015cca:	e7db      	b.n	8015c84 <submit_to_queue_locked+0x64>
		return -EINVAL;
 8015ccc:	f06f 0015 	mvn.w	r0, #21
 8015cd0:	e7df      	b.n	8015c92 <submit_to_queue_locked+0x72>
		ret = -ENODEV;
 8015cd2:	f06f 0012 	mvn.w	r0, #18
 8015cd6:	e7dc      	b.n	8015c92 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
 8015cd8:	f06f 000f 	mvn.w	r0, #15
 8015cdc:	e7d9      	b.n	8015c92 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
 8015cde:	f06f 000f 	mvn.w	r0, #15
 8015ce2:	e7d6      	b.n	8015c92 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
 8015ce4:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
 8015ce8:	2300      	movs	r3, #0
 8015cea:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
 8015cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
 8015cee:	2000      	movs	r0, #0
 8015cf0:	e7fa      	b.n	8015ce8 <submit_to_queue_locked+0xc8>
 8015cf2:	bf00      	nop
 8015cf4:	20003c14 	.word	0x20003c14

08015cf8 <finalize_cancel_locked>:
{
 8015cf8:	b570      	push	{r4, r5, r6, lr}
 8015cfa:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
 8015cfc:	68c3      	ldr	r3, [r0, #12]
 8015cfe:	f023 0302 	bic.w	r3, r3, #2
 8015d02:	60c3      	str	r3, [r0, #12]
	return list->head;
 8015d04:	4b19      	ldr	r3, [pc, #100]	; (8015d6c <finalize_cancel_locked+0x74>)
 8015d06:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8015d08:	b1e8      	cbz	r0, 8015d46 <finalize_cancel_locked+0x4e>
 8015d0a:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
 8015d0c:	b100      	cbz	r0, 8015d10 <finalize_cancel_locked+0x18>
	return node->next;
 8015d0e:	6804      	ldr	r4, [r0, #0]
 8015d10:	2600      	movs	r6, #0
 8015d12:	e01d      	b.n	8015d50 <finalize_cancel_locked+0x58>
Z_GENLIST_REMOVE(slist, snode)
 8015d14:	b15e      	cbz	r6, 8015d2e <finalize_cancel_locked+0x36>
	return node->next;
 8015d16:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
 8015d18:	6033      	str	r3, [r6, #0]
	return list->tail;
 8015d1a:	4b14      	ldr	r3, [pc, #80]	; (8015d6c <finalize_cancel_locked+0x74>)
 8015d1c:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8015d1e:	4298      	cmp	r0, r3
 8015d20:	d00e      	beq.n	8015d40 <finalize_cancel_locked+0x48>
	parent->next = child;
 8015d22:	2300      	movs	r3, #0
 8015d24:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
 8015d28:	f7ff ff04 	bl	8015b34 <z_impl_k_sem_give>
}
 8015d2c:	e015      	b.n	8015d5a <finalize_cancel_locked+0x62>
	return node->next;
 8015d2e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
 8015d30:	4b0e      	ldr	r3, [pc, #56]	; (8015d6c <finalize_cancel_locked+0x74>)
 8015d32:	601a      	str	r2, [r3, #0]
	return list->tail;
 8015d34:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8015d36:	4298      	cmp	r0, r3
 8015d38:	d1f3      	bne.n	8015d22 <finalize_cancel_locked+0x2a>
	list->tail = node;
 8015d3a:	4b0c      	ldr	r3, [pc, #48]	; (8015d6c <finalize_cancel_locked+0x74>)
 8015d3c:	605a      	str	r2, [r3, #4]
}
 8015d3e:	e7f0      	b.n	8015d22 <finalize_cancel_locked+0x2a>
	list->tail = node;
 8015d40:	4b0a      	ldr	r3, [pc, #40]	; (8015d6c <finalize_cancel_locked+0x74>)
 8015d42:	605e      	str	r6, [r3, #4]
}
 8015d44:	e7ed      	b.n	8015d22 <finalize_cancel_locked+0x2a>
 8015d46:	4604      	mov	r4, r0
 8015d48:	e7e2      	b.n	8015d10 <finalize_cancel_locked+0x18>
 8015d4a:	4623      	mov	r3, r4
 8015d4c:	4620      	mov	r0, r4
 8015d4e:	461c      	mov	r4, r3
 8015d50:	b150      	cbz	r0, 8015d68 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
 8015d52:	6843      	ldr	r3, [r0, #4]
 8015d54:	42ab      	cmp	r3, r5
 8015d56:	d0dd      	beq.n	8015d14 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
 8015d58:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
 8015d5a:	2c00      	cmp	r4, #0
 8015d5c:	d0f5      	beq.n	8015d4a <finalize_cancel_locked+0x52>
 8015d5e:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
 8015d60:	2c00      	cmp	r4, #0
 8015d62:	d0f3      	beq.n	8015d4c <finalize_cancel_locked+0x54>
	return node->next;
 8015d64:	6823      	ldr	r3, [r4, #0]
 8015d66:	e7f1      	b.n	8015d4c <finalize_cancel_locked+0x54>
}
 8015d68:	bd70      	pop	{r4, r5, r6, pc}
 8015d6a:	bf00      	nop
 8015d6c:	20003c48 	.word	0x20003c48

08015d70 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
 8015d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d72:	b085      	sub	sp, #20
 8015d74:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
 8015d76:	e016      	b.n	8015da6 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
 8015d78:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
	*flagp &= ~BIT(bit);
 8015d7c:	f023 0204 	bic.w	r2, r3, #4
 8015d80:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
 8015d84:	f013 0f04 	tst.w	r3, #4
 8015d88:	d158      	bne.n	8015e3c <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	9302      	str	r3, [sp, #8]
 8015d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d96:	e9cd 2300 	strd	r2, r3, [sp]
 8015d9a:	f105 02f0 	add.w	r2, r5, #240	; 0xf0
 8015d9e:	4631      	mov	r1, r6
 8015da0:	482e      	ldr	r0, [pc, #184]	; (8015e5c <work_queue_main+0xec>)
 8015da2:	f000 fc95 	bl	80166d0 <z_sched_wait>
 8015da6:	f04f 0304 	mov.w	r3, #4
 8015daa:	f3ef 8611 	mrs	r6, BASEPRI
 8015dae:	f383 8812 	msr	BASEPRI_MAX, r3
 8015db2:	f3bf 8f6f 	isb	sy
	return list->head;
 8015db6:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
Z_GENLIST_GET(slist, snode)
 8015dba:	2c00      	cmp	r4, #0
 8015dbc:	d0dc      	beq.n	8015d78 <work_queue_main+0x8>
	return node->next;
 8015dbe:	6823      	ldr	r3, [r4, #0]
	list->head = node;
 8015dc0:	f8c5 30e8 	str.w	r3, [r5, #232]	; 0xe8
	return list->tail;
 8015dc4:	f8d5 20ec 	ldr.w	r2, [r5, #236]	; 0xec
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
 8015dc8:	4294      	cmp	r4, r2
 8015dca:	d034      	beq.n	8015e36 <work_queue_main+0xc6>
	*flagp |= BIT(bit);
 8015dcc:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8015dd0:	f043 0302 	orr.w	r3, r3, #2
 8015dd4:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8015dd8:	68e3      	ldr	r3, [r4, #12]
 8015dda:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
 8015dde:	f023 0304 	bic.w	r3, r3, #4
 8015de2:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
 8015de4:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
 8015de6:	2c00      	cmp	r4, #0
 8015de8:	d0cf      	beq.n	8015d8a <work_queue_main+0x1a>
	__asm__ volatile(
 8015dea:	f386 8811 	msr	BASEPRI, r6
 8015dee:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
 8015df2:	4620      	mov	r0, r4
 8015df4:	4798      	blx	r3
	__asm__ volatile(
 8015df6:	f04f 0304 	mov.w	r3, #4
 8015dfa:	f3ef 8611 	mrs	r6, BASEPRI
 8015dfe:	f383 8812 	msr	BASEPRI_MAX, r3
 8015e02:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
 8015e06:	68e3      	ldr	r3, [r4, #12]
 8015e08:	f023 0301 	bic.w	r3, r3, #1
 8015e0c:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 8015e0e:	f013 0f02 	tst.w	r3, #2
 8015e12:	d11e      	bne.n	8015e52 <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
 8015e14:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8015e18:	f023 0302 	bic.w	r3, r3, #2
 8015e1c:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	return (*flagp & BIT(bit)) != 0U;
 8015e20:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
 8015e24:	f386 8811 	msr	BASEPRI, r6
 8015e28:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d1ba      	bne.n	8015da6 <work_queue_main+0x36>
	z_impl_k_yield();
 8015e30:	f000 fb64 	bl	80164fc <z_impl_k_yield>
}
 8015e34:	e7b7      	b.n	8015da6 <work_queue_main+0x36>
	list->tail = node;
 8015e36:	f8c5 30ec 	str.w	r3, [r5, #236]	; 0xec
}
 8015e3a:	e7c7      	b.n	8015dcc <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
 8015e3c:	f105 07f8 	add.w	r7, r5, #248	; 0xf8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
 8015e40:	2200      	movs	r2, #0
 8015e42:	2101      	movs	r1, #1
 8015e44:	4638      	mov	r0, r7
 8015e46:	f006 fb0f 	bl	801c468 <z_sched_wake>
 8015e4a:	2800      	cmp	r0, #0
 8015e4c:	d1f8      	bne.n	8015e40 <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
 8015e4e:	2300      	movs	r3, #0
 8015e50:	e7c9      	b.n	8015de6 <work_queue_main+0x76>
			finalize_cancel_locked(work);
 8015e52:	4620      	mov	r0, r4
 8015e54:	f7ff ff50 	bl	8015cf8 <finalize_cancel_locked>
 8015e58:	e7dc      	b.n	8015e14 <work_queue_main+0xa4>
 8015e5a:	bf00      	nop
 8015e5c:	20003c44 	.word	0x20003c44

08015e60 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 8015e60:	b570      	push	{r4, r5, r6, lr}
 8015e62:	4606      	mov	r6, r0
 8015e64:	4608      	mov	r0, r1
 8015e66:	4614      	mov	r4, r2
 8015e68:	461d      	mov	r5, r3
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8015e6a:	ea54 0305 	orrs.w	r3, r4, r5
 8015e6e:	d00c      	beq.n	8015e8a <schedule_for_queue_locked+0x2a>
	*flagp |= BIT(bit);
 8015e70:	68cb      	ldr	r3, [r1, #12]
 8015e72:	f043 0308 	orr.w	r3, r3, #8
 8015e76:	60cb      	str	r3, [r1, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
 8015e78:	6833      	ldr	r3, [r6, #0]
 8015e7a:	628b      	str	r3, [r1, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
 8015e7c:	462b      	mov	r3, r5
 8015e7e:	4905      	ldr	r1, [pc, #20]	; (8015e94 <schedule_for_queue_locked+0x34>)
 8015e80:	3010      	adds	r0, #16
 8015e82:	f000 fc99 	bl	80167b8 <z_add_timeout>

	return ret;
 8015e86:	2001      	movs	r0, #1
}
 8015e88:	bd70      	pop	{r4, r5, r6, pc}
		return submit_to_queue_locked(work, queuep);
 8015e8a:	4631      	mov	r1, r6
 8015e8c:	f7ff fec8 	bl	8015c20 <submit_to_queue_locked>
 8015e90:	e7fa      	b.n	8015e88 <schedule_for_queue_locked+0x28>
 8015e92:	bf00      	nop
 8015e94:	0801c045 	.word	0x0801c045

08015e98 <k_work_queue_start>:
{
 8015e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e9a:	b089      	sub	sp, #36	; 0x24
 8015e9c:	4604      	mov	r4, r0
 8015e9e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
 8015ea0:	2000      	movs	r0, #0
 8015ea2:	f8c4 00e8 	str.w	r0, [r4, #232]	; 0xe8
	list->tail = NULL;
 8015ea6:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
 8015eaa:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
	list->head = (sys_dnode_t *)list;
 8015eae:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
	list->tail = (sys_dnode_t *)list;
 8015eb2:	f8c4 00f4 	str.w	r0, [r4, #244]	; 0xf4
 8015eb6:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
	list->head = (sys_dnode_t *)list;
 8015eba:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
	list->tail = (sys_dnode_t *)list;
 8015ebe:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
	if ((cfg != NULL) && cfg->no_yield) {
 8015ec2:	b1fd      	cbz	r5, 8015f04 <k_work_queue_start+0x6c>
 8015ec4:	7928      	ldrb	r0, [r5, #4]
 8015ec6:	b9f8      	cbnz	r0, 8015f08 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
 8015ec8:	2001      	movs	r0, #1
	*flagp = flags;
 8015eca:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
 8015ece:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8015ed2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015ed6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015eda:	2000      	movs	r0, #0
 8015edc:	9004      	str	r0, [sp, #16]
 8015ede:	9303      	str	r3, [sp, #12]
 8015ee0:	9002      	str	r0, [sp, #8]
 8015ee2:	9001      	str	r0, [sp, #4]
 8015ee4:	9400      	str	r4, [sp, #0]
 8015ee6:	4b0a      	ldr	r3, [pc, #40]	; (8015f10 <k_work_queue_start+0x78>)
 8015ee8:	4620      	mov	r0, r4
 8015eea:	f005 ff6b 	bl	801bdc4 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
 8015eee:	b125      	cbz	r5, 8015efa <k_work_queue_start+0x62>
 8015ef0:	6829      	ldr	r1, [r5, #0]
 8015ef2:	b111      	cbz	r1, 8015efa <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
 8015ef4:	4620      	mov	r0, r4
 8015ef6:	f7ff fc65 	bl	80157c4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
 8015efa:	4620      	mov	r0, r4
 8015efc:	f005 ff52 	bl	801bda4 <z_impl_k_thread_start>
}
 8015f00:	b009      	add	sp, #36	; 0x24
 8015f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
 8015f04:	2001      	movs	r0, #1
 8015f06:	e7e0      	b.n	8015eca <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
 8015f08:	f240 1001 	movw	r0, #257	; 0x101
 8015f0c:	e7dd      	b.n	8015eca <k_work_queue_start+0x32>
 8015f0e:	bf00      	nop
 8015f10:	08015d71 	.word	0x08015d71

08015f14 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
 8015f14:	b508      	push	{r3, lr}
 8015f16:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
 8015f18:	4801      	ldr	r0, [pc, #4]	; (8015f20 <k_work_reschedule+0xc>)
 8015f1a:	f006 f8f9 	bl	801c110 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
 8015f1e:	bd08      	pop	{r3, pc}
 8015f20:	20002fa0 	.word	0x20002fa0

08015f24 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
 8015f24:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8015f26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015f2a:	bf08      	it	eq
 8015f2c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8015f30:	d100      	bne.n	8015f34 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
 8015f32:	bd38      	pop	{r3, r4, r5, pc}
 8015f34:	4902      	ldr	r1, [pc, #8]	; (8015f40 <add_thread_timeout+0x1c>)
 8015f36:	3018      	adds	r0, #24
 8015f38:	f000 fc3e 	bl	80167b8 <z_add_timeout>
 8015f3c:	e7f9      	b.n	8015f32 <add_thread_timeout+0xe>
 8015f3e:	bf00      	nop
 8015f40:	0801c29d 	.word	0x0801c29d

08015f44 <z_reset_time_slice>:
{
 8015f44:	b508      	push	{r3, lr}
	if (slice_time != 0) {
 8015f46:	4b08      	ldr	r3, [pc, #32]	; (8015f68 <z_reset_time_slice+0x24>)
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	b903      	cbnz	r3, 8015f4e <z_reset_time_slice+0xa>
}
 8015f4c:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
 8015f4e:	f7fe fbcd 	bl	80146ec <sys_clock_elapsed>
 8015f52:	4603      	mov	r3, r0
 8015f54:	4a04      	ldr	r2, [pc, #16]	; (8015f68 <z_reset_time_slice+0x24>)
 8015f56:	6810      	ldr	r0, [r2, #0]
 8015f58:	4403      	add	r3, r0
 8015f5a:	4a04      	ldr	r2, [pc, #16]	; (8015f6c <z_reset_time_slice+0x28>)
 8015f5c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 8015f5e:	2100      	movs	r1, #0
 8015f60:	f006 fb23 	bl	801c5aa <z_set_timeout_expiry>
}
 8015f64:	e7f2      	b.n	8015f4c <z_reset_time_slice+0x8>
 8015f66:	bf00      	nop
 8015f68:	20003c5c 	.word	0x20003c5c
 8015f6c:	20003c14 	.word	0x20003c14

08015f70 <k_sched_time_slice_set>:
{
 8015f70:	b570      	push	{r4, r5, r6, lr}
 8015f72:	4604      	mov	r4, r0
 8015f74:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
 8015f76:	2300      	movs	r3, #0
	__asm__ volatile(
 8015f78:	f04f 0204 	mov.w	r2, #4
 8015f7c:	f3ef 8511 	mrs	r5, BASEPRI
 8015f80:	f382 8812 	msr	BASEPRI_MAX, r2
 8015f84:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8015f88:	e008      	b.n	8015f9c <k_sched_time_slice_set+0x2c>
		slice_max_prio = prio;
 8015f8a:	4b0d      	ldr	r3, [pc, #52]	; (8015fc0 <k_sched_time_slice_set+0x50>)
 8015f8c:	601e      	str	r6, [r3, #0]
		z_reset_time_slice();
 8015f8e:	f7ff ffd9 	bl	8015f44 <z_reset_time_slice>
	__asm__ volatile(
 8015f92:	f385 8811 	msr	BASEPRI, r5
 8015f96:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 8015f9a:	2301      	movs	r3, #1
 8015f9c:	b973      	cbnz	r3, 8015fbc <k_sched_time_slice_set+0x4c>
		_current_cpu->slice_ticks = 0;
 8015f9e:	4b09      	ldr	r3, [pc, #36]	; (8015fc4 <k_sched_time_slice_set+0x54>)
 8015fa0:	2200      	movs	r2, #0
 8015fa2:	611a      	str	r2, [r3, #16]
			return ((uint32_t)t) * (to_hz / from_hz);
 8015fa4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8015fa8:	005b      	lsls	r3, r3, #1
		slice_time = k_ms_to_ticks_ceil32(slice);
 8015faa:	4a07      	ldr	r2, [pc, #28]	; (8015fc8 <k_sched_time_slice_set+0x58>)
 8015fac:	6013      	str	r3, [r2, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
 8015fae:	2c00      	cmp	r4, #0
 8015fb0:	ddeb      	ble.n	8015f8a <k_sched_time_slice_set+0x1a>
			slice_time = MAX(2, slice_time);
 8015fb2:	2b02      	cmp	r3, #2
 8015fb4:	bfb8      	it	lt
 8015fb6:	2302      	movlt	r3, #2
 8015fb8:	6013      	str	r3, [r2, #0]
 8015fba:	e7e6      	b.n	8015f8a <k_sched_time_slice_set+0x1a>
}
 8015fbc:	bd70      	pop	{r4, r5, r6, pc}
 8015fbe:	bf00      	nop
 8015fc0:	20003c58 	.word	0x20003c58
 8015fc4:	20003c14 	.word	0x20003c14
 8015fc8:	20003c5c 	.word	0x20003c5c

08015fcc <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
 8015fcc:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
 8015fce:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8015fd0:	b921      	cbnz	r1, 8015fdc <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015fd2:	f3ef 8305 	mrs	r3, IPSR
 8015fd6:	b913      	cbnz	r3, 8015fde <z_reschedule+0x12>
 8015fd8:	2101      	movs	r1, #1
 8015fda:	e000      	b.n	8015fde <z_reschedule+0x12>
 8015fdc:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
 8015fde:	f011 0f01 	tst.w	r1, #1
 8015fe2:	d007      	beq.n	8015ff4 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
 8015fe4:	4b06      	ldr	r3, [pc, #24]	; (8016000 <z_reschedule+0x34>)
 8015fe6:	699a      	ldr	r2, [r3, #24]
	return new_thread != _current;
 8015fe8:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
 8015fea:	429a      	cmp	r2, r3
 8015fec:	d002      	beq.n	8015ff4 <z_reschedule+0x28>
	ret = arch_swap(key);
 8015fee:	f7f0 fb01 	bl	80065f4 <arch_swap>
		z_swap(lock, key);
 8015ff2:	e003      	b.n	8015ffc <z_reschedule+0x30>
 8015ff4:	f380 8811 	msr	BASEPRI, r0
 8015ff8:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
 8015ffc:	bd08      	pop	{r3, pc}
 8015ffe:	bf00      	nop
 8016000:	20003c14 	.word	0x20003c14

08016004 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
 8016004:	2300      	movs	r3, #0
	__asm__ volatile(
 8016006:	f04f 0204 	mov.w	r2, #4
 801600a:	f3ef 8111 	mrs	r1, BASEPRI
 801600e:	f382 8812 	msr	BASEPRI_MAX, r2
 8016012:	f3bf 8f6f 	isb	sy
 8016016:	b953      	cbnz	r3, 801602e <k_sched_lock+0x2a>
	--_current->base.sched_locked;
 8016018:	4b05      	ldr	r3, [pc, #20]	; (8016030 <k_sched_lock+0x2c>)
 801601a:	689a      	ldr	r2, [r3, #8]
 801601c:	7bd3      	ldrb	r3, [r2, #15]
 801601e:	3b01      	subs	r3, #1
 8016020:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8016022:	f381 8811 	msr	BASEPRI, r1
 8016026:	f3bf 8f6f 	isb	sy
 801602a:	2301      	movs	r3, #1
 801602c:	e7f3      	b.n	8016016 <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
 801602e:	4770      	bx	lr
 8016030:	20003c14 	.word	0x20003c14

08016034 <update_cache>:
{
 8016034:	b538      	push	{r3, r4, r5, lr}
 8016036:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
 8016038:	480f      	ldr	r0, [pc, #60]	; (8016078 <update_cache+0x44>)
 801603a:	f006 f90c 	bl	801c256 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 801603e:	4605      	mov	r5, r0
 8016040:	b170      	cbz	r0, 8016060 <update_cache+0x2c>
	if (preempt_ok != 0) {
 8016042:	b984      	cbnz	r4, 8016066 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
 8016044:	4b0d      	ldr	r3, [pc, #52]	; (801607c <update_cache+0x48>)
 8016046:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
 8016048:	7b5a      	ldrb	r2, [r3, #13]
 801604a:	f012 0f1f 	tst.w	r2, #31
 801604e:	d10a      	bne.n	8016066 <update_cache+0x32>
	return node->next != NULL;
 8016050:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8016052:	b942      	cbnz	r2, 8016066 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8016054:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
 8016056:	2a7f      	cmp	r2, #127	; 0x7f
 8016058:	d905      	bls.n	8016066 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
 801605a:	4a08      	ldr	r2, [pc, #32]	; (801607c <update_cache+0x48>)
 801605c:	6193      	str	r3, [r2, #24]
 801605e:	e00a      	b.n	8016076 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
 8016060:	4b06      	ldr	r3, [pc, #24]	; (801607c <update_cache+0x48>)
 8016062:	68dd      	ldr	r5, [r3, #12]
 8016064:	e7ed      	b.n	8016042 <update_cache+0xe>
		if (thread != _current) {
 8016066:	4b05      	ldr	r3, [pc, #20]	; (801607c <update_cache+0x48>)
 8016068:	689b      	ldr	r3, [r3, #8]
 801606a:	42ab      	cmp	r3, r5
 801606c:	d001      	beq.n	8016072 <update_cache+0x3e>
			z_reset_time_slice();
 801606e:	f7ff ff69 	bl	8015f44 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8016072:	4b02      	ldr	r3, [pc, #8]	; (801607c <update_cache+0x48>)
 8016074:	619d      	str	r5, [r3, #24]
}
 8016076:	bd38      	pop	{r3, r4, r5, pc}
 8016078:	20003c30 	.word	0x20003c30
 801607c:	20003c14 	.word	0x20003c14

08016080 <move_thread_to_end_of_prio_q>:
{
 8016080:	b538      	push	{r3, r4, r5, lr}
 8016082:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
 8016084:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 8016086:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801608a:	2b00      	cmp	r3, #0
 801608c:	db28      	blt.n	80160e0 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
 801608e:	7b6b      	ldrb	r3, [r5, #13]
 8016090:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016094:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 8016096:	4b1a      	ldr	r3, [pc, #104]	; (8016100 <move_thread_to_end_of_prio_q+0x80>)
 8016098:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801609c:	429c      	cmp	r4, r3
 801609e:	d02d      	beq.n	80160fc <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80160a0:	b16c      	cbz	r4, 80160be <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80160a2:	4621      	mov	r1, r4
 80160a4:	4628      	mov	r0, r5
 80160a6:	f006 f86d 	bl	801c184 <z_sched_prio_cmp>
 80160aa:	2800      	cmp	r0, #0
 80160ac:	dc20      	bgt.n	80160f0 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80160ae:	b134      	cbz	r4, 80160be <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
 80160b0:	4b13      	ldr	r3, [pc, #76]	; (8016100 <move_thread_to_end_of_prio_q+0x80>)
 80160b2:	6a1b      	ldr	r3, [r3, #32]
 80160b4:	429c      	cmp	r4, r3
 80160b6:	d002      	beq.n	80160be <move_thread_to_end_of_prio_q+0x3e>
 80160b8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80160ba:	2c00      	cmp	r4, #0
 80160bc:	d1f0      	bne.n	80160a0 <move_thread_to_end_of_prio_q+0x20>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
 80160be:	4b10      	ldr	r3, [pc, #64]	; (8016100 <move_thread_to_end_of_prio_q+0x80>)
 80160c0:	6a1a      	ldr	r2, [r3, #32]

	node->next = list;
 80160c2:	f103 011c 	add.w	r1, r3, #28
 80160c6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 80160c8:	606a      	str	r2, [r5, #4]

	tail->next = node;
 80160ca:	6015      	str	r5, [r2, #0]
	list->tail = node;
 80160cc:	621d      	str	r5, [r3, #32]
	update_cache(thread == _current);
 80160ce:	4b0c      	ldr	r3, [pc, #48]	; (8016100 <move_thread_to_end_of_prio_q+0x80>)
 80160d0:	6898      	ldr	r0, [r3, #8]
 80160d2:	42a8      	cmp	r0, r5
 80160d4:	bf14      	ite	ne
 80160d6:	2000      	movne	r0, #0
 80160d8:	2001      	moveq	r0, #1
 80160da:	f7ff ffab 	bl	8016034 <update_cache>
}
 80160de:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80160e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80160e4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 80160e6:	4601      	mov	r1, r0
 80160e8:	4806      	ldr	r0, [pc, #24]	; (8016104 <move_thread_to_end_of_prio_q+0x84>)
 80160ea:	f006 f889 	bl	801c200 <z_priq_dumb_remove>
}
 80160ee:	e7ce      	b.n	801608e <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
 80160f0:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
 80160f2:	606b      	str	r3, [r5, #4]
	node->next = successor;
 80160f4:	602c      	str	r4, [r5, #0]
	prev->next = node;
 80160f6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 80160f8:	6065      	str	r5, [r4, #4]
}
 80160fa:	e7e8      	b.n	80160ce <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80160fc:	2400      	movs	r4, #0
 80160fe:	e7cf      	b.n	80160a0 <move_thread_to_end_of_prio_q+0x20>
 8016100:	20003c14 	.word	0x20003c14
 8016104:	20003c30 	.word	0x20003c30

08016108 <z_time_slice>:
{
 8016108:	b510      	push	{r4, lr}
	__asm__ volatile(
 801610a:	f04f 0304 	mov.w	r3, #4
 801610e:	f3ef 8411 	mrs	r4, BASEPRI
 8016112:	f383 8812 	msr	BASEPRI_MAX, r3
 8016116:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
 801611a:	4b1c      	ldr	r3, [pc, #112]	; (801618c <z_time_slice+0x84>)
 801611c:	689b      	ldr	r3, [r3, #8]
 801611e:	4a1c      	ldr	r2, [pc, #112]	; (8016190 <z_time_slice+0x88>)
 8016120:	6812      	ldr	r2, [r2, #0]
 8016122:	4293      	cmp	r3, r2
 8016124:	d01d      	beq.n	8016162 <z_time_slice+0x5a>
	pending_current = NULL;
 8016126:	4a1a      	ldr	r2, [pc, #104]	; (8016190 <z_time_slice+0x88>)
 8016128:	2100      	movs	r1, #0
 801612a:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
 801612c:	4a19      	ldr	r2, [pc, #100]	; (8016194 <z_time_slice+0x8c>)
 801612e:	6812      	ldr	r2, [r2, #0]
 8016130:	b322      	cbz	r2, 801617c <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 8016132:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
 8016134:	2a7f      	cmp	r2, #127	; 0x7f
 8016136:	d821      	bhi.n	801617c <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
 8016138:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
 801613a:	f012 0f1f 	tst.w	r2, #31
 801613e:	d11d      	bne.n	801617c <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8016140:	f993 100e 	ldrsb.w	r1, [r3, #14]
 8016144:	4a14      	ldr	r2, [pc, #80]	; (8016198 <z_time_slice+0x90>)
 8016146:	6812      	ldr	r2, [r2, #0]
 8016148:	4291      	cmp	r1, r2
 801614a:	db17      	blt.n	801617c <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
 801614c:	4a13      	ldr	r2, [pc, #76]	; (801619c <z_time_slice+0x94>)
 801614e:	4293      	cmp	r3, r2
 8016150:	d014      	beq.n	801617c <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
 8016152:	4a0e      	ldr	r2, [pc, #56]	; (801618c <z_time_slice+0x84>)
 8016154:	6912      	ldr	r2, [r2, #16]
 8016156:	4282      	cmp	r2, r0
 8016158:	dd0a      	ble.n	8016170 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
 801615a:	1a10      	subs	r0, r2, r0
 801615c:	4b0b      	ldr	r3, [pc, #44]	; (801618c <z_time_slice+0x84>)
 801615e:	6118      	str	r0, [r3, #16]
 8016160:	e00f      	b.n	8016182 <z_time_slice+0x7a>
		z_reset_time_slice();
 8016162:	f7ff feef 	bl	8015f44 <z_reset_time_slice>
	__asm__ volatile(
 8016166:	f384 8811 	msr	BASEPRI, r4
 801616a:	f3bf 8f6f 	isb	sy
		return;
 801616e:	e00c      	b.n	801618a <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
 8016170:	4618      	mov	r0, r3
 8016172:	f7ff ff85 	bl	8016080 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
 8016176:	f7ff fee5 	bl	8015f44 <z_reset_time_slice>
 801617a:	e002      	b.n	8016182 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
 801617c:	4b03      	ldr	r3, [pc, #12]	; (801618c <z_time_slice+0x84>)
 801617e:	2200      	movs	r2, #0
 8016180:	611a      	str	r2, [r3, #16]
 8016182:	f384 8811 	msr	BASEPRI, r4
 8016186:	f3bf 8f6f 	isb	sy
}
 801618a:	bd10      	pop	{r4, pc}
 801618c:	20003c14 	.word	0x20003c14
 8016190:	20003c50 	.word	0x20003c50
 8016194:	20003c5c 	.word	0x20003c5c
 8016198:	20003c58 	.word	0x20003c58
 801619c:	20002dc8 	.word	0x20002dc8

080161a0 <ready_thread>:
{
 80161a0:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
 80161a2:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
 80161a4:	f990 200d 	ldrsb.w	r2, [r0, #13]
 80161a8:	2a00      	cmp	r2, #0
 80161aa:	db2d      	blt.n	8016208 <ready_thread+0x68>
 80161ac:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 80161ae:	f013 0f1f 	tst.w	r3, #31
 80161b2:	d105      	bne.n	80161c0 <ready_thread+0x20>
	return node->next != NULL;
 80161b4:	6982      	ldr	r2, [r0, #24]
 80161b6:	b10a      	cbz	r2, 80161bc <ready_thread+0x1c>
 80161b8:	2200      	movs	r2, #0
 80161ba:	e002      	b.n	80161c2 <ready_thread+0x22>
 80161bc:	2201      	movs	r2, #1
 80161be:	e000      	b.n	80161c2 <ready_thread+0x22>
 80161c0:	2200      	movs	r2, #0
 80161c2:	b30a      	cbz	r2, 8016208 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
 80161c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80161c8:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 80161ca:	4b14      	ldr	r3, [pc, #80]	; (801621c <ready_thread+0x7c>)
 80161cc:	f853 5f1c 	ldr.w	r5, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80161d0:	429d      	cmp	r5, r3
 80161d2:	d020      	beq.n	8016216 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80161d4:	b16d      	cbz	r5, 80161f2 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
 80161d6:	4629      	mov	r1, r5
 80161d8:	4620      	mov	r0, r4
 80161da:	f005 ffd3 	bl	801c184 <z_sched_prio_cmp>
 80161de:	2800      	cmp	r0, #0
 80161e0:	dc13      	bgt.n	801620a <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80161e2:	b135      	cbz	r5, 80161f2 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
 80161e4:	4b0d      	ldr	r3, [pc, #52]	; (801621c <ready_thread+0x7c>)
 80161e6:	6a1b      	ldr	r3, [r3, #32]
 80161e8:	429d      	cmp	r5, r3
 80161ea:	d002      	beq.n	80161f2 <ready_thread+0x52>
 80161ec:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80161ee:	2d00      	cmp	r5, #0
 80161f0:	d1f0      	bne.n	80161d4 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
 80161f2:	4b0a      	ldr	r3, [pc, #40]	; (801621c <ready_thread+0x7c>)
 80161f4:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 80161f6:	f103 011c 	add.w	r1, r3, #28
 80161fa:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 80161fc:	6062      	str	r2, [r4, #4]
	tail->next = node;
 80161fe:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8016200:	621c      	str	r4, [r3, #32]
		update_cache(0);
 8016202:	2000      	movs	r0, #0
 8016204:	f7ff ff16 	bl	8016034 <update_cache>
}
 8016208:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
 801620a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 801620c:	6063      	str	r3, [r4, #4]
	node->next = successor;
 801620e:	6025      	str	r5, [r4, #0]
	prev->next = node;
 8016210:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8016212:	606c      	str	r4, [r5, #4]
}
 8016214:	e7f5      	b.n	8016202 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8016216:	2500      	movs	r5, #0
 8016218:	e7dc      	b.n	80161d4 <ready_thread+0x34>
 801621a:	bf00      	nop
 801621c:	20003c14 	.word	0x20003c14

08016220 <z_sched_start>:
{
 8016220:	b510      	push	{r4, lr}
	__asm__ volatile(
 8016222:	f04f 0304 	mov.w	r3, #4
 8016226:	f3ef 8411 	mrs	r4, BASEPRI
 801622a:	f383 8812 	msr	BASEPRI_MAX, r3
 801622e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
 8016232:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
 8016234:	f013 0f04 	tst.w	r3, #4
 8016238:	d104      	bne.n	8016244 <z_sched_start+0x24>
	__asm__ volatile(
 801623a:	f384 8811 	msr	BASEPRI, r4
 801623e:	f3bf 8f6f 	isb	sy
}
 8016242:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8016244:	f023 0304 	bic.w	r3, r3, #4
 8016248:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
 801624a:	f7ff ffa9 	bl	80161a0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
 801624e:	4621      	mov	r1, r4
 8016250:	4801      	ldr	r0, [pc, #4]	; (8016258 <z_sched_start+0x38>)
 8016252:	f7ff febb 	bl	8015fcc <z_reschedule>
 8016256:	e7f4      	b.n	8016242 <z_sched_start+0x22>
 8016258:	20003c54 	.word	0x20003c54

0801625c <unready_thread>:
{
 801625c:	b510      	push	{r4, lr}
 801625e:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
 8016260:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
 8016262:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8016266:	2b00      	cmp	r3, #0
 8016268:	db08      	blt.n	801627c <unready_thread+0x20>
	update_cache(thread == _current);
 801626a:	4b08      	ldr	r3, [pc, #32]	; (801628c <unready_thread+0x30>)
 801626c:	6898      	ldr	r0, [r3, #8]
 801626e:	42a0      	cmp	r0, r4
 8016270:	bf14      	ite	ne
 8016272:	2000      	movne	r0, #0
 8016274:	2001      	moveq	r0, #1
 8016276:	f7ff fedd 	bl	8016034 <update_cache>
}
 801627a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
 801627c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8016280:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 8016282:	4601      	mov	r1, r0
 8016284:	4802      	ldr	r0, [pc, #8]	; (8016290 <unready_thread+0x34>)
 8016286:	f005 ffbb 	bl	801c200 <z_priq_dumb_remove>
}
 801628a:	e7ee      	b.n	801626a <unready_thread+0xe>
 801628c:	20003c14 	.word	0x20003c14
 8016290:	20003c30 	.word	0x20003c30

08016294 <z_pend_curr>:
{
 8016294:	b510      	push	{r4, lr}
 8016296:	460c      	mov	r4, r1
 8016298:	4611      	mov	r1, r2
	pending_current = _current;
 801629a:	4b06      	ldr	r3, [pc, #24]	; (80162b4 <z_pend_curr+0x20>)
 801629c:	6898      	ldr	r0, [r3, #8]
 801629e:	4b06      	ldr	r3, [pc, #24]	; (80162b8 <z_pend_curr+0x24>)
 80162a0:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
 80162a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80162a6:	f006 f857 	bl	801c358 <pend>
 80162aa:	4620      	mov	r0, r4
 80162ac:	f7f0 f9a2 	bl	80065f4 <arch_swap>
}
 80162b0:	bd10      	pop	{r4, pc}
 80162b2:	bf00      	nop
 80162b4:	20003c14 	.word	0x20003c14
 80162b8:	20003c50 	.word	0x20003c50

080162bc <z_set_prio>:
{
 80162bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162c0:	4604      	mov	r4, r0
 80162c2:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
 80162c4:	2300      	movs	r3, #0
	__asm__ volatile(
 80162c6:	f04f 0204 	mov.w	r2, #4
 80162ca:	f3ef 8611 	mrs	r6, BASEPRI
 80162ce:	f382 8812 	msr	BASEPRI_MAX, r2
 80162d2:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
 80162d6:	4698      	mov	r8, r3
 80162d8:	e008      	b.n	80162ec <z_set_prio+0x30>
		if (need_sched) {
 80162da:	f012 0801 	ands.w	r8, r2, #1
 80162de:	d111      	bne.n	8016304 <z_set_prio+0x48>
			thread->base.prio = prio;
 80162e0:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
 80162e2:	f386 8811 	msr	BASEPRI, r6
 80162e6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80162ea:	2301      	movs	r3, #1
 80162ec:	461a      	mov	r2, r3
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d13d      	bne.n	801636e <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
 80162f2:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 80162f4:	f013 0f1f 	tst.w	r3, #31
 80162f8:	d1ef      	bne.n	80162da <z_set_prio+0x1e>
	return node->next != NULL;
 80162fa:	69a1      	ldr	r1, [r4, #24]
 80162fc:	2900      	cmp	r1, #0
 80162fe:	d1ec      	bne.n	80162da <z_set_prio+0x1e>
 8016300:	2201      	movs	r2, #1
 8016302:	e7ea      	b.n	80162da <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8016304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016308:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 801630a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8016378 <z_set_prio+0xbc>
 801630e:	4621      	mov	r1, r4
 8016310:	4648      	mov	r0, r9
 8016312:	f005 ff75 	bl	801c200 <z_priq_dumb_remove>
				thread->base.prio = prio;
 8016316:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
 8016318:	7b63      	ldrb	r3, [r4, #13]
 801631a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801631e:	7363      	strb	r3, [r4, #13]
	return list->head == list;
 8016320:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8016324:	454d      	cmp	r5, r9
 8016326:	d020      	beq.n	801636a <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8016328:	b16d      	cbz	r5, 8016346 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
 801632a:	4629      	mov	r1, r5
 801632c:	4620      	mov	r0, r4
 801632e:	f005 ff29 	bl	801c184 <z_sched_prio_cmp>
 8016332:	2800      	cmp	r0, #0
 8016334:	dc13      	bgt.n	801635e <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8016336:	b135      	cbz	r5, 8016346 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
 8016338:	4b0e      	ldr	r3, [pc, #56]	; (8016374 <z_set_prio+0xb8>)
 801633a:	6a1b      	ldr	r3, [r3, #32]
 801633c:	429d      	cmp	r5, r3
 801633e:	d002      	beq.n	8016346 <z_set_prio+0x8a>
 8016340:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8016342:	2d00      	cmp	r5, #0
 8016344:	d1f0      	bne.n	8016328 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
 8016346:	4b0b      	ldr	r3, [pc, #44]	; (8016374 <z_set_prio+0xb8>)
 8016348:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 801634a:	f103 011c 	add.w	r1, r3, #28
 801634e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
 8016350:	6062      	str	r2, [r4, #4]
	tail->next = node;
 8016352:	6014      	str	r4, [r2, #0]
	list->tail = node;
 8016354:	621c      	str	r4, [r3, #32]
			update_cache(1);
 8016356:	2001      	movs	r0, #1
 8016358:	f7ff fe6c 	bl	8016034 <update_cache>
 801635c:	e7c1      	b.n	80162e2 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
 801635e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
 8016360:	6063      	str	r3, [r4, #4]
	node->next = successor;
 8016362:	6025      	str	r5, [r4, #0]
	prev->next = node;
 8016364:	601c      	str	r4, [r3, #0]
	successor->prev = node;
 8016366:	606c      	str	r4, [r5, #4]
}
 8016368:	e7f5      	b.n	8016356 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801636a:	2500      	movs	r5, #0
 801636c:	e7dc      	b.n	8016328 <z_set_prio+0x6c>
}
 801636e:	4640      	mov	r0, r8
 8016370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016374:	20003c14 	.word	0x20003c14
 8016378:	20003c30 	.word	0x20003c30

0801637c <z_impl_k_thread_suspend>:
{
 801637c:	b538      	push	{r3, r4, r5, lr}
 801637e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8016380:	3018      	adds	r0, #24
 8016382:	f006 f8dc 	bl	801c53e <z_abort_timeout>
	LOCKED(&sched_spinlock) {
 8016386:	2300      	movs	r3, #0
	__asm__ volatile(
 8016388:	f04f 0204 	mov.w	r2, #4
 801638c:	f3ef 8511 	mrs	r5, BASEPRI
 8016390:	f382 8812 	msr	BASEPRI_MAX, r2
 8016394:	f3bf 8f6f 	isb	sy
 8016398:	e010      	b.n	80163bc <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 801639a:	7b63      	ldrb	r3, [r4, #13]
 801639c:	f043 0310 	orr.w	r3, r3, #16
 80163a0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 80163a2:	4b15      	ldr	r3, [pc, #84]	; (80163f8 <z_impl_k_thread_suspend+0x7c>)
 80163a4:	6898      	ldr	r0, [r3, #8]
 80163a6:	42a0      	cmp	r0, r4
 80163a8:	bf14      	ite	ne
 80163aa:	2000      	movne	r0, #0
 80163ac:	2001      	moveq	r0, #1
 80163ae:	f7ff fe41 	bl	8016034 <update_cache>
	__asm__ volatile(
 80163b2:	f385 8811 	msr	BASEPRI, r5
 80163b6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 80163ba:	2301      	movs	r3, #1
 80163bc:	b963      	cbnz	r3, 80163d8 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
 80163be:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
 80163c0:	f994 300d 	ldrsb.w	r3, [r4, #13]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	dae8      	bge.n	801639a <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 80163c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80163cc:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
 80163ce:	4621      	mov	r1, r4
 80163d0:	480a      	ldr	r0, [pc, #40]	; (80163fc <z_impl_k_thread_suspend+0x80>)
 80163d2:	f005 ff15 	bl	801c200 <z_priq_dumb_remove>
}
 80163d6:	e7e0      	b.n	801639a <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
 80163d8:	4b07      	ldr	r3, [pc, #28]	; (80163f8 <z_impl_k_thread_suspend+0x7c>)
 80163da:	689b      	ldr	r3, [r3, #8]
 80163dc:	42a3      	cmp	r3, r4
 80163de:	d000      	beq.n	80163e2 <z_impl_k_thread_suspend+0x66>
}
 80163e0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
 80163e2:	f04f 0304 	mov.w	r3, #4
 80163e6:	f3ef 8011 	mrs	r0, BASEPRI
 80163ea:	f383 8812 	msr	BASEPRI_MAX, r3
 80163ee:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 80163f2:	f005 fef0 	bl	801c1d6 <z_reschedule_irqlock>
 80163f6:	e7f3      	b.n	80163e0 <z_impl_k_thread_suspend+0x64>
 80163f8:	20003c14 	.word	0x20003c14
 80163fc:	20003c30 	.word	0x20003c30

08016400 <k_sched_unlock>:

void k_sched_unlock(void)
{
 8016400:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
 8016402:	2300      	movs	r3, #0
 8016404:	f04f 0204 	mov.w	r2, #4
 8016408:	f3ef 8411 	mrs	r4, BASEPRI
 801640c:	f382 8812 	msr	BASEPRI_MAX, r2
 8016410:	f3bf 8f6f 	isb	sy
 8016414:	b96b      	cbnz	r3, 8016432 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
 8016416:	4b0c      	ldr	r3, [pc, #48]	; (8016448 <k_sched_unlock+0x48>)
 8016418:	689a      	ldr	r2, [r3, #8]
 801641a:	7bd3      	ldrb	r3, [r2, #15]
 801641c:	3301      	adds	r3, #1
 801641e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8016420:	2000      	movs	r0, #0
 8016422:	f7ff fe07 	bl	8016034 <update_cache>
	__asm__ volatile(
 8016426:	f384 8811 	msr	BASEPRI, r4
 801642a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801642e:	2301      	movs	r3, #1
 8016430:	e7f0      	b.n	8016414 <k_sched_unlock+0x14>
	__asm__ volatile(
 8016432:	f04f 0304 	mov.w	r3, #4
 8016436:	f3ef 8011 	mrs	r0, BASEPRI
 801643a:	f383 8812 	msr	BASEPRI_MAX, r3
 801643e:	f3bf 8f6f 	isb	sy
 8016442:	f005 fec8 	bl	801c1d6 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
 8016446:	bd10      	pop	{r4, pc}
 8016448:	20003c14 	.word	0x20003c14

0801644c <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
 801644c:	7b43      	ldrb	r3, [r0, #13]
 801644e:	f013 0f08 	tst.w	r3, #8
 8016452:	d143      	bne.n	80164dc <end_thread+0x90>
{
 8016454:	b570      	push	{r4, r5, r6, lr}
 8016456:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
 8016458:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
 801645c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016460:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
 8016462:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016466:	d113      	bne.n	8016490 <end_thread+0x44>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
 8016468:	68ab      	ldr	r3, [r5, #8]
 801646a:	b15b      	cbz	r3, 8016484 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 801646c:	4628      	mov	r0, r5
 801646e:	f005 fe87 	bl	801c180 <pended_on_thread>
 8016472:	4629      	mov	r1, r5
 8016474:	f005 fec4 	bl	801c200 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8016478:	7b6b      	ldrb	r3, [r5, #13]
 801647a:	f023 0302 	bic.w	r3, r3, #2
 801647e:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 8016480:	2300      	movs	r3, #0
 8016482:	60ab      	str	r3, [r5, #8]
 8016484:	f105 0018 	add.w	r0, r5, #24
 8016488:	f006 f859 	bl	801c53e <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
 801648c:	3558      	adds	r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 801648e:	e01c      	b.n	80164ca <end_thread+0x7e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8016490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016494:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
 8016496:	4601      	mov	r1, r0
 8016498:	4811      	ldr	r0, [pc, #68]	; (80164e0 <end_thread+0x94>)
 801649a:	f005 feb1 	bl	801c200 <z_priq_dumb_remove>
}
 801649e:	e7e3      	b.n	8016468 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 80164a0:	4620      	mov	r0, r4
 80164a2:	f005 fe6d 	bl	801c180 <pended_on_thread>
 80164a6:	4621      	mov	r1, r4
 80164a8:	f005 feaa 	bl	801c200 <z_priq_dumb_remove>
 80164ac:	7b63      	ldrb	r3, [r4, #13]
 80164ae:	f023 0302 	bic.w	r3, r3, #2
 80164b2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 80164b4:	2600      	movs	r6, #0
 80164b6:	60a6      	str	r6, [r4, #8]
 80164b8:	f104 0018 	add.w	r0, r4, #24
 80164bc:	f006 f83f 	bl	801c53e <z_abort_timeout>
 80164c0:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
		ready_thread(thread);
 80164c4:	4620      	mov	r0, r4
 80164c6:	f7ff fe6b 	bl	80161a0 <ready_thread>
	return list->head == list;
 80164ca:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80164cc:	42ac      	cmp	r4, r5
 80164ce:	d001      	beq.n	80164d4 <end_thread+0x88>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 80164d0:	2c00      	cmp	r4, #0
 80164d2:	d1e5      	bne.n	80164a0 <end_thread+0x54>
		update_cache(1);
 80164d4:	2001      	movs	r0, #1
 80164d6:	f7ff fdad 	bl	8016034 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
 80164da:	bd70      	pop	{r4, r5, r6, pc}
 80164dc:	4770      	bx	lr
 80164de:	bf00      	nop
 80164e0:	20003c30 	.word	0x20003c30

080164e4 <z_sched_init>:
{
 80164e4:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
 80164e6:	4804      	ldr	r0, [pc, #16]	; (80164f8 <z_sched_init+0x14>)
 80164e8:	f005 ffba 	bl	801c460 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 80164ec:	2100      	movs	r1, #0
 80164ee:	4608      	mov	r0, r1
 80164f0:	f7ff fd3e 	bl	8015f70 <k_sched_time_slice_set>
}
 80164f4:	bd08      	pop	{r3, pc}
 80164f6:	bf00      	nop
 80164f8:	20003c2c 	.word	0x20003c2c

080164fc <z_impl_k_yield>:
{
 80164fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164fe:	f04f 0304 	mov.w	r3, #4
 8016502:	f3ef 8611 	mrs	r6, BASEPRI
 8016506:	f383 8812 	msr	BASEPRI_MAX, r3
 801650a:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
 801650e:	4c1c      	ldr	r4, [pc, #112]	; (8016580 <z_impl_k_yield+0x84>)
 8016510:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
 8016512:	7b4b      	ldrb	r3, [r1, #13]
 8016514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016518:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
 801651a:	f104 071c 	add.w	r7, r4, #28
 801651e:	4638      	mov	r0, r7
 8016520:	f005 fe6e 	bl	801c200 <z_priq_dumb_remove>
	queue_thread(_current);
 8016524:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
 8016526:	7b6b      	ldrb	r3, [r5, #13]
 8016528:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801652c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
 801652e:	69e4      	ldr	r4, [r4, #28]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8016530:	42bc      	cmp	r4, r7
 8016532:	d023      	beq.n	801657c <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8016534:	b16c      	cbz	r4, 8016552 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
 8016536:	4621      	mov	r1, r4
 8016538:	4628      	mov	r0, r5
 801653a:	f005 fe23 	bl	801c184 <z_sched_prio_cmp>
 801653e:	2800      	cmp	r0, #0
 8016540:	dc16      	bgt.n	8016570 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8016542:	b134      	cbz	r4, 8016552 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
 8016544:	4b0e      	ldr	r3, [pc, #56]	; (8016580 <z_impl_k_yield+0x84>)
 8016546:	6a1b      	ldr	r3, [r3, #32]
 8016548:	429c      	cmp	r4, r3
 801654a:	d002      	beq.n	8016552 <z_impl_k_yield+0x56>
 801654c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801654e:	2c00      	cmp	r4, #0
 8016550:	d1f0      	bne.n	8016534 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
 8016552:	4b0b      	ldr	r3, [pc, #44]	; (8016580 <z_impl_k_yield+0x84>)
 8016554:	6a1a      	ldr	r2, [r3, #32]
	node->next = list;
 8016556:	f103 011c 	add.w	r1, r3, #28
 801655a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
 801655c:	606a      	str	r2, [r5, #4]
	tail->next = node;
 801655e:	6015      	str	r5, [r2, #0]
	list->tail = node;
 8016560:	621d      	str	r5, [r3, #32]
	update_cache(1);
 8016562:	2001      	movs	r0, #1
 8016564:	f7ff fd66 	bl	8016034 <update_cache>
 8016568:	4630      	mov	r0, r6
 801656a:	f7f0 f843 	bl	80065f4 <arch_swap>
}
 801656e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
 8016570:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 8016572:	606b      	str	r3, [r5, #4]
	node->next = successor;
 8016574:	602c      	str	r4, [r5, #0]
	prev->next = node;
 8016576:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 8016578:	6065      	str	r5, [r4, #4]
}
 801657a:	e7f2      	b.n	8016562 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801657c:	2400      	movs	r4, #0
 801657e:	e7d9      	b.n	8016534 <z_impl_k_yield+0x38>
 8016580:	20003c14 	.word	0x20003c14

08016584 <z_tick_sleep>:
{
 8016584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016588:	4604      	mov	r4, r0
 801658a:	460d      	mov	r5, r1
	if (ticks == 0) {
 801658c:	ea54 0105 	orrs.w	r1, r4, r5
 8016590:	d037      	beq.n	8016602 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
 8016592:	f06f 0101 	mvn.w	r1, #1
 8016596:	1a0a      	subs	r2, r1, r0
 8016598:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801659c:	eb61 0305 	sbc.w	r3, r1, r5
 80165a0:	2a01      	cmp	r2, #1
 80165a2:	f173 0300 	sbcs.w	r3, r3, #0
 80165a6:	db30      	blt.n	801660a <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
 80165a8:	f06f 0601 	mvn.w	r6, #1
 80165ac:	1a36      	subs	r6, r6, r0
 80165ae:	f04f 0304 	mov.w	r3, #4
 80165b2:	f3ef 8811 	mrs	r8, BASEPRI
 80165b6:	f383 8812 	msr	BASEPRI_MAX, r3
 80165ba:	f3bf 8f6f 	isb	sy
	pending_current = _current;
 80165be:	4f16      	ldr	r7, [pc, #88]	; (8016618 <z_tick_sleep+0x94>)
 80165c0:	68b8      	ldr	r0, [r7, #8]
 80165c2:	4b16      	ldr	r3, [pc, #88]	; (801661c <z_tick_sleep+0x98>)
 80165c4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
 80165c6:	f7ff fe49 	bl	801625c <unready_thread>
	z_add_thread_timeout(_current, timeout);
 80165ca:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
 80165cc:	4622      	mov	r2, r4
 80165ce:	462b      	mov	r3, r5
 80165d0:	4913      	ldr	r1, [pc, #76]	; (8016620 <z_tick_sleep+0x9c>)
 80165d2:	3018      	adds	r0, #24
 80165d4:	f000 f8f0 	bl	80167b8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 80165d8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 80165da:	7b53      	ldrb	r3, [r2, #13]
 80165dc:	f043 0310 	orr.w	r3, r3, #16
 80165e0:	7353      	strb	r3, [r2, #13]
 80165e2:	4640      	mov	r0, r8
 80165e4:	f7f0 f806 	bl	80065f4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
 80165e8:	2500      	movs	r5, #0
 80165ea:	f006 f809 	bl	801c600 <sys_clock_tick_get_32>
 80165ee:	1a34      	subs	r4, r6, r0
 80165f0:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
 80165f4:	2c01      	cmp	r4, #1
 80165f6:	f175 0300 	sbcs.w	r3, r5, #0
 80165fa:	da0a      	bge.n	8016612 <z_tick_sleep+0x8e>
	return 0;
 80165fc:	2000      	movs	r0, #0
}
 80165fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
 8016602:	f7ff ff7b 	bl	80164fc <z_impl_k_yield>
		return 0;
 8016606:	2000      	movs	r0, #0
 8016608:	e7f9      	b.n	80165fe <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
 801660a:	f005 fff9 	bl	801c600 <sys_clock_tick_get_32>
 801660e:	1906      	adds	r6, r0, r4
 8016610:	e7cd      	b.n	80165ae <z_tick_sleep+0x2a>
		return ticks;
 8016612:	4620      	mov	r0, r4
 8016614:	e7f3      	b.n	80165fe <z_tick_sleep+0x7a>
 8016616:	bf00      	nop
 8016618:	20003c14 	.word	0x20003c14
 801661c:	20003c50 	.word	0x20003c50
 8016620:	0801c29d 	.word	0x0801c29d

08016624 <z_impl_k_sleep>:
{
 8016624:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8016626:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 801662a:	bf08      	it	eq
 801662c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 8016630:	d007      	beq.n	8016642 <z_impl_k_sleep+0x1e>
	ticks = z_tick_sleep(ticks);
 8016632:	f7ff ffa7 	bl	8016584 <z_tick_sleep>
			return t / ((uint64_t)from_hz / to_hz);
 8016636:	220a      	movs	r2, #10
 8016638:	2300      	movs	r3, #0
 801663a:	17c1      	asrs	r1, r0, #31
 801663c:	f7ea fa7e 	bl	8000b3c <__aeabi_uldivmod>
}
 8016640:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
 8016642:	4b03      	ldr	r3, [pc, #12]	; (8016650 <z_impl_k_sleep+0x2c>)
 8016644:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
 8016646:	f7ff fe99 	bl	801637c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 801664a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801664e:	e7f7      	b.n	8016640 <z_impl_k_sleep+0x1c>
 8016650:	20003c14 	.word	0x20003c14

08016654 <z_impl_z_current_get>:
}
 8016654:	4b01      	ldr	r3, [pc, #4]	; (801665c <z_impl_z_current_get+0x8>)
 8016656:	6898      	ldr	r0, [r3, #8]
 8016658:	4770      	bx	lr
 801665a:	bf00      	nop
 801665c:	20003c14 	.word	0x20003c14

08016660 <z_impl_k_is_preempt_thread>:
 8016660:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
 8016664:	b933      	cbnz	r3, 8016674 <z_impl_k_is_preempt_thread+0x14>
 8016666:	4b05      	ldr	r3, [pc, #20]	; (801667c <z_impl_k_is_preempt_thread+0x1c>)
 8016668:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
 801666a:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
 801666c:	2b7f      	cmp	r3, #127	; 0x7f
 801666e:	d803      	bhi.n	8016678 <z_impl_k_is_preempt_thread+0x18>
 8016670:	2001      	movs	r0, #1
 8016672:	4770      	bx	lr
 8016674:	2000      	movs	r0, #0
 8016676:	4770      	bx	lr
 8016678:	2000      	movs	r0, #0
}
 801667a:	4770      	bx	lr
 801667c:	20003c14 	.word	0x20003c14

08016680 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
 8016680:	b538      	push	{r3, r4, r5, lr}
 8016682:	f04f 0304 	mov.w	r3, #4
 8016686:	f3ef 8511 	mrs	r5, BASEPRI
 801668a:	f383 8812 	msr	BASEPRI_MAX, r3
 801668e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
 8016692:	7b43      	ldrb	r3, [r0, #13]
 8016694:	f013 0f08 	tst.w	r3, #8
 8016698:	d004      	beq.n	80166a4 <z_thread_abort+0x24>
	__asm__ volatile(
 801669a:	f385 8811 	msr	BASEPRI, r5
 801669e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
 80166a2:	bd38      	pop	{r3, r4, r5, pc}
 80166a4:	4604      	mov	r4, r0
	end_thread(thread);
 80166a6:	f7ff fed1 	bl	801644c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
 80166aa:	4b08      	ldr	r3, [pc, #32]	; (80166cc <z_thread_abort+0x4c>)
 80166ac:	689b      	ldr	r3, [r3, #8]
 80166ae:	42a3      	cmp	r3, r4
 80166b0:	d004      	beq.n	80166bc <z_thread_abort+0x3c>
 80166b2:	f385 8811 	msr	BASEPRI, r5
 80166b6:	f3bf 8f6f 	isb	sy
 80166ba:	e7f2      	b.n	80166a2 <z_thread_abort+0x22>
 80166bc:	f3ef 8305 	mrs	r3, IPSR
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d1f6      	bne.n	80166b2 <z_thread_abort+0x32>
 80166c4:	4628      	mov	r0, r5
 80166c6:	f7ef ff95 	bl	80065f4 <arch_swap>
	return ret;
 80166ca:	e7f2      	b.n	80166b2 <z_thread_abort+0x32>
 80166cc:	20003c14 	.word	0x20003c14

080166d0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
 80166d0:	b5d0      	push	{r4, r6, r7, lr}
 80166d2:	b082      	sub	sp, #8
 80166d4:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
 80166d6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 80166da:	e9cd 6700 	strd	r6, r7, [sp]
 80166de:	f7ff fdd9 	bl	8016294 <z_pend_curr>

	if (data != NULL) {
 80166e2:	b11c      	cbz	r4, 80166ec <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
 80166e4:	4b02      	ldr	r3, [pc, #8]	; (80166f0 <z_sched_wait+0x20>)
 80166e6:	689b      	ldr	r3, [r3, #8]
 80166e8:	695b      	ldr	r3, [r3, #20]
 80166ea:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
 80166ec:	b002      	add	sp, #8
 80166ee:	bdd0      	pop	{r4, r6, r7, pc}
 80166f0:	20003c14 	.word	0x20003c14

080166f4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
 80166f4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
 80166f6:	4806      	ldr	r0, [pc, #24]	; (8016710 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 80166f8:	4a06      	ldr	r2, [pc, #24]	; (8016714 <z_data_copy+0x20>)
 80166fa:	1a12      	subs	r2, r2, r0
 80166fc:	4906      	ldr	r1, [pc, #24]	; (8016718 <z_data_copy+0x24>)
 80166fe:	f006 f89b 	bl	801c838 <memcpy>
 8016702:	4a06      	ldr	r2, [pc, #24]	; (801671c <z_data_copy+0x28>)
 8016704:	4906      	ldr	r1, [pc, #24]	; (8016720 <z_data_copy+0x2c>)
 8016706:	4807      	ldr	r0, [pc, #28]	; (8016724 <z_data_copy+0x30>)
 8016708:	f006 f896 	bl	801c838 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 801670c:	bd08      	pop	{r3, pc}
 801670e:	bf00      	nop
 8016710:	20000000 	.word	0x20000000
 8016714:	2000140c 	.word	0x2000140c
 8016718:	0801edd4 	.word	0x0801edd4
 801671c:	00000000 	.word	0x00000000
 8016720:	0801edd4 	.word	0x0801edd4
 8016724:	20000000 	.word	0x20000000

08016728 <first>:
	return list->head == list;
 8016728:	4b03      	ldr	r3, [pc, #12]	; (8016738 <first+0x10>)
 801672a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801672c:	4298      	cmp	r0, r3
 801672e:	d000      	beq.n	8016732 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
 8016730:	4770      	bx	lr
 8016732:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
 8016734:	e7fc      	b.n	8016730 <first+0x8>
 8016736:	bf00      	nop
 8016738:	20000e44 	.word	0x20000e44

0801673c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 801673c:	b130      	cbz	r0, 801674c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
 801673e:	4a04      	ldr	r2, [pc, #16]	; (8016750 <next+0x14>)
 8016740:	6852      	ldr	r2, [r2, #4]
 8016742:	4290      	cmp	r0, r2
 8016744:	d001      	beq.n	801674a <next+0xe>
 8016746:	6800      	ldr	r0, [r0, #0]
 8016748:	4770      	bx	lr
 801674a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
 801674c:	4770      	bx	lr
 801674e:	bf00      	nop
 8016750:	20000e44 	.word	0x20000e44

08016754 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
 8016754:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8016756:	4b04      	ldr	r3, [pc, #16]	; (8016768 <elapsed+0x14>)
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	b10b      	cbz	r3, 8016760 <elapsed+0xc>
 801675c:	2000      	movs	r0, #0
}
 801675e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
 8016760:	f7fd ffc4 	bl	80146ec <sys_clock_elapsed>
 8016764:	e7fb      	b.n	801675e <elapsed+0xa>
 8016766:	bf00      	nop
 8016768:	20003c60 	.word	0x20003c60

0801676c <next_timeout>:

static int32_t next_timeout(void)
{
 801676c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
 801676e:	f7ff ffdb 	bl	8016728 <first>
 8016772:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
 8016774:	f7ff ffee 	bl	8016754 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
 8016778:	b18c      	cbz	r4, 801679e <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 801677a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801677e:	1a12      	subs	r2, r2, r0
 8016780:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
 8016784:	2a01      	cmp	r2, #1
 8016786:	f173 0100 	sbcs.w	r1, r3, #0
 801678a:	db11      	blt.n	80167b0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
 801678c:	4610      	mov	r0, r2
 801678e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8016792:	f173 0300 	sbcs.w	r3, r3, #0
 8016796:	db04      	blt.n	80167a2 <next_timeout+0x36>
 8016798:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801679c:	e001      	b.n	80167a2 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
 801679e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 80167a2:	4b04      	ldr	r3, [pc, #16]	; (80167b4 <next_timeout+0x48>)
 80167a4:	691b      	ldr	r3, [r3, #16]
 80167a6:	b113      	cbz	r3, 80167ae <next_timeout+0x42>
 80167a8:	4283      	cmp	r3, r0
 80167aa:	da00      	bge.n	80167ae <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
 80167ac:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
 80167ae:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
 80167b0:	2000      	movs	r0, #0
 80167b2:	e7f6      	b.n	80167a2 <next_timeout+0x36>
 80167b4:	20003c14 	.word	0x20003c14

080167b8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
 80167b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167bc:	b087      	sub	sp, #28
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80167be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80167c2:	bf08      	it	eq
 80167c4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 80167c8:	f000 80a1 	beq.w	801690e <z_add_timeout+0x156>
 80167cc:	4614      	mov	r4, r2
 80167ce:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 80167d0:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
 80167d2:	2300      	movs	r3, #0
	__asm__ volatile(
 80167d4:	f04f 0204 	mov.w	r2, #4
 80167d8:	f3ef 8b11 	mrs	fp, BASEPRI
 80167dc:	f382 8812 	msr	BASEPRI_MAX, r2
 80167e0:	f3bf 8f6f 	isb	sy
 80167e4:	46da      	mov	sl, fp
 80167e6:	4683      	mov	fp, r0
 80167e8:	e038      	b.n	801685c <z_add_timeout+0xa4>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
 80167ea:	2201      	movs	r2, #1
 80167ec:	2300      	movs	r3, #0
 80167ee:	e055      	b.n	801689c <z_add_timeout+0xe4>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
 80167f0:	1c63      	adds	r3, r4, #1
 80167f2:	9304      	str	r3, [sp, #16]
 80167f4:	f145 0300 	adc.w	r3, r5, #0
 80167f8:	9305      	str	r3, [sp, #20]
 80167fa:	f7ff ffab 	bl	8016754 <elapsed>
 80167fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016802:	1812      	adds	r2, r2, r0
 8016804:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8016808:	e9cb 2304 	strd	r2, r3, [fp, #16]
 801680c:	e04a      	b.n	80168a4 <z_add_timeout+0xec>
 801680e:	46ac      	mov	ip, r5
 8016810:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
 8016814:	e9cd 2300 	strd	r2, r3, [sp]
 8016818:	1a82      	subs	r2, r0, r2
 801681a:	9b01      	ldr	r3, [sp, #4]
 801681c:	eb61 0303 	sbc.w	r3, r1, r3
 8016820:	f8cc 2010 	str.w	r2, [ip, #16]
 8016824:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
 8016828:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
 801682c:	f8cb 3004 	str.w	r3, [fp, #4]
	node->next = successor;
 8016830:	f8cb c000 	str.w	ip, [fp]
	prev->next = node;
 8016834:	f8c3 b000 	str.w	fp, [r3]
	successor->prev = node;
 8016838:	f8cc b004 	str.w	fp, [ip, #4]
}
 801683c:	e002      	b.n	8016844 <z_add_timeout+0x8c>
 801683e:	46ac      	mov	ip, r5
 8016840:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
 8016844:	f1bc 0f00 	cmp.w	ip, #0
 8016848:	d049      	beq.n	80168de <z_add_timeout+0x126>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 801684a:	f7ff ff6d 	bl	8016728 <first>
 801684e:	4583      	cmp	fp, r0
 8016850:	d050      	beq.n	80168f4 <z_add_timeout+0x13c>
	__asm__ volatile(
 8016852:	f38a 8811 	msr	BASEPRI, sl
 8016856:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 801685a:	2301      	movs	r3, #1
 801685c:	2b00      	cmp	r3, #0
 801685e:	d156      	bne.n	801690e <z_add_timeout+0x156>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
 8016860:	f06f 0301 	mvn.w	r3, #1
 8016864:	1b1e      	subs	r6, r3, r4
 8016866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801686a:	eb60 0705 	sbc.w	r7, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
 801686e:	2e00      	cmp	r6, #0
 8016870:	f177 0300 	sbcs.w	r3, r7, #0
 8016874:	dbbc      	blt.n	80167f0 <z_add_timeout+0x38>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
 8016876:	4a27      	ldr	r2, [pc, #156]	; (8016914 <z_add_timeout+0x15c>)
 8016878:	6813      	ldr	r3, [r2, #0]
 801687a:	6852      	ldr	r2, [r2, #4]
 801687c:	18e3      	adds	r3, r4, r3
 801687e:	eb45 0202 	adc.w	r2, r5, r2
 8016882:	f06f 0101 	mvn.w	r1, #1
 8016886:	ebb1 0803 	subs.w	r8, r1, r3
 801688a:	eb60 0902 	sbc.w	r9, r0, r2
			to->dticks = MAX(1, ticks);
 801688e:	4642      	mov	r2, r8
 8016890:	464b      	mov	r3, r9
 8016892:	f1b8 0f01 	cmp.w	r8, #1
 8016896:	f179 0100 	sbcs.w	r1, r9, #0
 801689a:	dba6      	blt.n	80167ea <z_add_timeout+0x32>
 801689c:	f8cb 2010 	str.w	r2, [fp, #16]
 80168a0:	f8cb 3014 	str.w	r3, [fp, #20]
		for (t = first(); t != NULL; t = next(t)) {
 80168a4:	f7ff ff40 	bl	8016728 <first>
 80168a8:	e9cd 6700 	strd	r6, r7, [sp]
 80168ac:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80168b0:	4605      	mov	r5, r0
 80168b2:	2d00      	cmp	r5, #0
 80168b4:	d0c3      	beq.n	801683e <z_add_timeout+0x86>
			if (t->dticks > to->dticks) {
 80168b6:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80168ba:	e9db 2304 	ldrd	r2, r3, [fp, #16]
 80168be:	4282      	cmp	r2, r0
 80168c0:	eb73 0401 	sbcs.w	r4, r3, r1
 80168c4:	dba3      	blt.n	801680e <z_add_timeout+0x56>
			to->dticks -= t->dticks;
 80168c6:	1a17      	subs	r7, r2, r0
 80168c8:	eb63 0301 	sbc.w	r3, r3, r1
 80168cc:	f8cb 7010 	str.w	r7, [fp, #16]
 80168d0:	f8cb 3014 	str.w	r3, [fp, #20]
		for (t = first(); t != NULL; t = next(t)) {
 80168d4:	4628      	mov	r0, r5
 80168d6:	f7ff ff31 	bl	801673c <next>
 80168da:	4605      	mov	r5, r0
 80168dc:	e7e9      	b.n	80168b2 <z_add_timeout+0xfa>
	sys_dnode_t *const tail = list->tail;
 80168de:	4b0e      	ldr	r3, [pc, #56]	; (8016918 <z_add_timeout+0x160>)
 80168e0:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 80168e2:	f8cb 3000 	str.w	r3, [fp]
	node->prev = tail;
 80168e6:	f8cb 2004 	str.w	r2, [fp, #4]
	tail->next = node;
 80168ea:	f8c2 b000 	str.w	fp, [r2]
	list->tail = node;
 80168ee:	f8c3 b004 	str.w	fp, [r3, #4]
}
 80168f2:	e7aa      	b.n	801684a <z_add_timeout+0x92>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
 80168f4:	f7ff ff3a 	bl	801676c <next_timeout>

			if (next_time == 0 ||
 80168f8:	4603      	mov	r3, r0
 80168fa:	b118      	cbz	r0, 8016904 <z_add_timeout+0x14c>
			    _current_cpu->slice_ticks != next_time) {
 80168fc:	4a07      	ldr	r2, [pc, #28]	; (801691c <z_add_timeout+0x164>)
 80168fe:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
 8016900:	4282      	cmp	r2, r0
 8016902:	d0a6      	beq.n	8016852 <z_add_timeout+0x9a>
				sys_clock_set_timeout(next_time, false);
 8016904:	2100      	movs	r1, #0
 8016906:	4618      	mov	r0, r3
 8016908:	f7fd fe6e 	bl	80145e8 <sys_clock_set_timeout>
 801690c:	e7a1      	b.n	8016852 <z_add_timeout+0x9a>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
 801690e:	b007      	add	sp, #28
 8016910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016914:	20002f98 	.word	0x20002f98
 8016918:	20000e44 	.word	0x20000e44
 801691c:	20003c14 	.word	0x20003c14

08016920 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
 8016920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016922:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 8016924:	f7ff fbf0 	bl	8016108 <z_time_slice>
	__asm__ volatile(
 8016928:	f04f 0304 	mov.w	r3, #4
 801692c:	f3ef 8511 	mrs	r5, BASEPRI
 8016930:	f383 8812 	msr	BASEPRI_MAX, r3
 8016934:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8016938:	4b28      	ldr	r3, [pc, #160]	; (80169dc <sys_clock_announce+0xbc>)
 801693a:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 801693c:	f7ff fef4 	bl	8016728 <first>
 8016940:	4604      	mov	r4, r0
 8016942:	b350      	cbz	r0, 801699a <sys_clock_announce+0x7a>
 8016944:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
 8016948:	4b24      	ldr	r3, [pc, #144]	; (80169dc <sys_clock_announce+0xbc>)
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	17d9      	asrs	r1, r3, #31
 801694e:	42b3      	cmp	r3, r6
 8016950:	eb71 0207 	sbcs.w	r2, r1, r7
 8016954:	db21      	blt.n	801699a <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
 8016956:	4a22      	ldr	r2, [pc, #136]	; (80169e0 <sys_clock_announce+0xc0>)
 8016958:	e9d2 0100 	ldrd	r0, r1, [r2]
 801695c:	1980      	adds	r0, r0, r6
 801695e:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
 8016962:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
 8016966:	1b9b      	subs	r3, r3, r6
 8016968:	4a1c      	ldr	r2, [pc, #112]	; (80169dc <sys_clock_announce+0xbc>)
 801696a:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
 801696c:	2200      	movs	r2, #0
 801696e:	2300      	movs	r3, #0
 8016970:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
 8016974:	4620      	mov	r0, r4
 8016976:	f005 fdae 	bl	801c4d6 <remove_timeout>
	__asm__ volatile(
 801697a:	f385 8811 	msr	BASEPRI, r5
 801697e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
 8016982:	68a3      	ldr	r3, [r4, #8]
 8016984:	4620      	mov	r0, r4
 8016986:	4798      	blx	r3
	__asm__ volatile(
 8016988:	f04f 0304 	mov.w	r3, #4
 801698c:	f3ef 8511 	mrs	r5, BASEPRI
 8016990:	f383 8812 	msr	BASEPRI_MAX, r3
 8016994:	f3bf 8f6f 	isb	sy
 8016998:	e7d0      	b.n	801693c <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
 801699a:	b144      	cbz	r4, 80169ae <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
 801699c:	4b0f      	ldr	r3, [pc, #60]	; (80169dc <sys_clock_announce+0xbc>)
 801699e:	6819      	ldr	r1, [r3, #0]
 80169a0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80169a4:	1a52      	subs	r2, r2, r1
 80169a6:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 80169aa:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
 80169ae:	480c      	ldr	r0, [pc, #48]	; (80169e0 <sys_clock_announce+0xc0>)
 80169b0:	490a      	ldr	r1, [pc, #40]	; (80169dc <sys_clock_announce+0xbc>)
 80169b2:	680c      	ldr	r4, [r1, #0]
 80169b4:	e9d0 2300 	ldrd	r2, r3, [r0]
 80169b8:	1912      	adds	r2, r2, r4
 80169ba:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
 80169be:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
 80169c2:	2400      	movs	r4, #0
 80169c4:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
 80169c6:	f7ff fed1 	bl	801676c <next_timeout>
 80169ca:	4621      	mov	r1, r4
 80169cc:	f7fd fe0c 	bl	80145e8 <sys_clock_set_timeout>
	__asm__ volatile(
 80169d0:	f385 8811 	msr	BASEPRI, r5
 80169d4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 80169d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169da:	bf00      	nop
 80169dc:	20003c60 	.word	0x20003c60
 80169e0:	20002f98 	.word	0x20002f98

080169e4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
 80169e4:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
 80169e6:	2100      	movs	r1, #0
	__asm__ volatile(
 80169e8:	f04f 0304 	mov.w	r3, #4
 80169ec:	f3ef 8411 	mrs	r4, BASEPRI
 80169f0:	f383 8812 	msr	BASEPRI_MAX, r3
 80169f4:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
 80169f8:	2200      	movs	r2, #0
 80169fa:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
 80169fc:	b969      	cbnz	r1, 8016a1a <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
 80169fe:	f7fd fe75 	bl	80146ec <sys_clock_elapsed>
 8016a02:	4b07      	ldr	r3, [pc, #28]	; (8016a20 <sys_clock_tick_get+0x3c>)
 8016a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a08:	1812      	adds	r2, r2, r0
 8016a0a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
 8016a0e:	f384 8811 	msr	BASEPRI, r4
 8016a12:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 8016a16:	2101      	movs	r1, #1
 8016a18:	e7f0      	b.n	80169fc <sys_clock_tick_get+0x18>
	}
	return t;
}
 8016a1a:	4610      	mov	r0, r2
 8016a1c:	4619      	mov	r1, r3
 8016a1e:	bd10      	pop	{r4, pc}
 8016a20:	20002f98 	.word	0x20002f98

08016a24 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
 8016a24:	b900      	cbnz	r0, 8016a28 <z_impl_k_busy_wait+0x4>
 8016a26:	4770      	bx	lr
{
 8016a28:	b538      	push	{r3, r4, r5, lr}
 8016a2a:	4604      	mov	r4, r0
 8016a2c:	f7fd fe7e 	bl	801472c <sys_clock_cycle_get_32>
 8016a30:	4605      	mov	r5, r0
	uint32_t start_cycles = k_cycle_get_32();

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
		(uint64_t)sys_clock_hw_cycles_per_sec() /
 8016a32:	4a07      	ldr	r2, [pc, #28]	; (8016a50 <z_impl_k_busy_wait+0x2c>)
 8016a34:	2300      	movs	r3, #0
 8016a36:	4807      	ldr	r0, [pc, #28]	; (8016a54 <z_impl_k_busy_wait+0x30>)
 8016a38:	fba4 0100 	umull	r0, r1, r4, r0
 8016a3c:	f7ea f87e 	bl	8000b3c <__aeabi_uldivmod>
	uint32_t cycles_to_wait = (uint32_t)(
 8016a40:	4604      	mov	r4, r0
 8016a42:	f7fd fe73 	bl	801472c <sys_clock_cycle_get_32>

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
 8016a46:	1b40      	subs	r0, r0, r5
 8016a48:	42a0      	cmp	r0, r4
 8016a4a:	d3fa      	bcc.n	8016a42 <z_impl_k_busy_wait+0x1e>
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
 8016a4c:	bd38      	pop	{r3, r4, r5, pc}
 8016a4e:	bf00      	nop
 8016a50:	000f4240 	.word	0x000f4240
 8016a54:	07270e00 	.word	0x07270e00

08016a58 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
 8016a58:	b570      	push	{r4, r5, r6, lr}
 8016a5a:	4604      	mov	r4, r0
	__asm__ volatile(
 8016a5c:	f04f 0304 	mov.w	r3, #4
 8016a60:	f3ef 8611 	mrs	r6, BASEPRI
 8016a64:	f383 8812 	msr	BASEPRI_MAX, r3
 8016a68:	f3bf 8f6f 	isb	sy
 8016a6c:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
 8016a6e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 8016a72:	ea52 0103 	orrs.w	r1, r2, r3
 8016a76:	d005      	beq.n	8016a84 <z_timer_expiration_handler+0x2c>
 8016a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016a7c:	bf08      	it	eq
 8016a7e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8016a82:	d127      	bne.n	8016ad4 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
 8016a84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016a86:	3301      	adds	r3, #1
 8016a88:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
 8016a8a:	6a23      	ldr	r3, [r4, #32]
 8016a8c:	b173      	cbz	r3, 8016aac <z_timer_expiration_handler+0x54>
	__asm__ volatile(
 8016a8e:	f386 8811 	msr	BASEPRI, r6
 8016a92:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
 8016a96:	6a23      	ldr	r3, [r4, #32]
 8016a98:	4620      	mov	r0, r4
 8016a9a:	4798      	blx	r3
	__asm__ volatile(
 8016a9c:	f04f 0304 	mov.w	r3, #4
 8016aa0:	f3ef 8511 	mrs	r5, BASEPRI
 8016aa4:	f383 8812 	msr	BASEPRI_MAX, r3
 8016aa8:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8016aac:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
 8016ab0:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8016ab2:	42a3      	cmp	r3, r4
 8016ab4:	d012      	beq.n	8016adc <z_timer_expiration_handler+0x84>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
 8016ab6:	b18c      	cbz	r4, 8016adc <z_timer_expiration_handler+0x84>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
 8016ab8:	4620      	mov	r0, r4
 8016aba:	f005 fb6d 	bl	801c198 <z_unpend_thread_no_timeout>
 8016abe:	2300      	movs	r3, #0
 8016ac0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	__asm__ volatile(
 8016ac4:	f385 8811 	msr	BASEPRI, r5
 8016ac8:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
 8016acc:	4620      	mov	r0, r4
 8016ace:	f005 fbc9 	bl	801c264 <z_ready_thread>
}
 8016ad2:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8016ad4:	4904      	ldr	r1, [pc, #16]	; (8016ae8 <z_timer_expiration_handler+0x90>)
 8016ad6:	f7ff fe6f 	bl	80167b8 <z_add_timeout>
 8016ada:	e7d3      	b.n	8016a84 <z_timer_expiration_handler+0x2c>
 8016adc:	f385 8811 	msr	BASEPRI, r5
 8016ae0:	f3bf 8f6f 	isb	sy
		return;
 8016ae4:	e7f5      	b.n	8016ad2 <z_timer_expiration_handler+0x7a>
 8016ae6:	bf00      	nop
 8016ae8:	08016a59 	.word	0x08016a59

08016aec <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
 8016aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016af0:	b085      	sub	sp, #20
 8016af2:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
 8016af6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016afa:	bf08      	it	eq
 8016afc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8016b00:	d038      	beq.n	8016b74 <z_impl_k_timer_start+0x88>
 8016b02:	4606      	mov	r6, r0
 8016b04:	4614      	mov	r4, r2
 8016b06:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8016b08:	e9cd 8900 	strd	r8, r9, [sp]
 8016b0c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8016b10:	bf08      	it	eq
 8016b12:	f1b8 3fff 	cmpeq.w	r8, #4294967295	; 0xffffffff
 8016b16:	d013      	beq.n	8016b40 <z_impl_k_timer_start+0x54>
 8016b18:	ea58 0109 	orrs.w	r1, r8, r9
 8016b1c:	d010      	beq.n	8016b40 <z_impl_k_timer_start+0x54>
	    Z_TICK_ABS(period.ticks) < 0) {
 8016b1e:	f06f 0701 	mvn.w	r7, #1
 8016b22:	9900      	ldr	r1, [sp, #0]
 8016b24:	1a7f      	subs	r7, r7, r1
 8016b26:	9702      	str	r7, [sp, #8]
 8016b28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016b2c:	9801      	ldr	r0, [sp, #4]
 8016b2e:	eb61 0700 	sbc.w	r7, r1, r0
 8016b32:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
 8016b34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016b38:	2800      	cmp	r0, #0
 8016b3a:	f171 0100 	sbcs.w	r1, r1, #0
 8016b3e:	db1c      	blt.n	8016b7a <z_impl_k_timer_start+0x8e>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
 8016b40:	f06f 0101 	mvn.w	r1, #1
 8016b44:	ebb1 0a02 	subs.w	sl, r1, r2
 8016b48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8016b4c:	eb61 0b03 	sbc.w	fp, r1, r3
 8016b50:	f1ba 0f00 	cmp.w	sl, #0
 8016b54:	f17b 0100 	sbcs.w	r1, fp, #0
 8016b58:	db20      	blt.n	8016b9c <z_impl_k_timer_start+0xb0>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
 8016b5a:	4630      	mov	r0, r6
 8016b5c:	f005 fcef 	bl	801c53e <z_abort_timeout>
	timer->period = period;
 8016b60:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
 8016b64:	2300      	movs	r3, #0
 8016b66:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
 8016b68:	4622      	mov	r2, r4
 8016b6a:	462b      	mov	r3, r5
 8016b6c:	4912      	ldr	r1, [pc, #72]	; (8016bb8 <z_impl_k_timer_start+0xcc>)
 8016b6e:	4630      	mov	r0, r6
 8016b70:	f7ff fe22 	bl	80167b8 <z_add_timeout>
		     duration);
}
 8016b74:	b005      	add	sp, #20
 8016b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
 8016b7a:	4640      	mov	r0, r8
 8016b7c:	4649      	mov	r1, r9
 8016b7e:	4647      	mov	r7, r8
 8016b80:	46cc      	mov	ip, r9
 8016b82:	2802      	cmp	r0, #2
 8016b84:	f171 0100 	sbcs.w	r1, r1, #0
 8016b88:	db04      	blt.n	8016b94 <z_impl_k_timer_start+0xa8>
 8016b8a:	f117 38ff 	adds.w	r8, r7, #4294967295	; 0xffffffff
 8016b8e:	f14c 39ff 	adc.w	r9, ip, #4294967295	; 0xffffffff
 8016b92:	e7d5      	b.n	8016b40 <z_impl_k_timer_start+0x54>
 8016b94:	2702      	movs	r7, #2
 8016b96:	f04f 0c00 	mov.w	ip, #0
 8016b9a:	e7f6      	b.n	8016b8a <z_impl_k_timer_start+0x9e>
		duration.ticks = MAX(duration.ticks - 1, 0);
 8016b9c:	4611      	mov	r1, r2
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	2a01      	cmp	r2, #1
 8016ba2:	f173 0300 	sbcs.w	r3, r3, #0
 8016ba6:	db04      	blt.n	8016bb2 <z_impl_k_timer_start+0xc6>
 8016ba8:	f111 34ff 	adds.w	r4, r1, #4294967295	; 0xffffffff
 8016bac:	f140 35ff 	adc.w	r5, r0, #4294967295	; 0xffffffff
 8016bb0:	e7d3      	b.n	8016b5a <z_impl_k_timer_start+0x6e>
 8016bb2:	2101      	movs	r1, #1
 8016bb4:	2000      	movs	r0, #0
 8016bb6:	e7f7      	b.n	8016ba8 <z_impl_k_timer_start+0xbc>
 8016bb8:	08016a59 	.word	0x08016a59

08016bbc <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
 8016bbc:	b538      	push	{r3, r4, r5, lr}
 8016bbe:	4604      	mov	r4, r0
 8016bc0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
 8016bc2:	f005 f8e7 	bl	801bd94 <k_is_in_isr>
 8016bc6:	b948      	cbnz	r0, 8016bdc <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
 8016bc8:	4b05      	ldr	r3, [pc, #20]	; (8016be0 <z_thread_aligned_alloc+0x24>)
 8016bca:	689b      	ldr	r3, [r3, #8]
 8016bcc:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
	}

	if (heap != NULL) {
 8016bd0:	b118      	cbz	r0, 8016bda <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
 8016bd2:	462a      	mov	r2, r5
 8016bd4:	4621      	mov	r1, r4
 8016bd6:	f005 fdf4 	bl	801c7c2 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
 8016bda:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
 8016bdc:	2000      	movs	r0, #0
	return ret;
 8016bde:	e7fc      	b.n	8016bda <z_thread_aligned_alloc+0x1e>
 8016be0:	20003c14 	.word	0x20003c14

08016be4 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
 8016be4:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8016be6:	4a03      	ldr	r2, [pc, #12]	; (8016bf4 <boot_banner+0x10>)
 8016be8:	4903      	ldr	r1, [pc, #12]	; (8016bf8 <boot_banner+0x14>)
 8016bea:	4804      	ldr	r0, [pc, #16]	; (8016bfc <boot_banner+0x18>)
 8016bec:	f000 fdb5 	bl	801775a <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
 8016bf0:	bd08      	pop	{r3, pc}
 8016bf2:	bf00      	nop
 8016bf4:	0801ec08 	.word	0x0801ec08
 8016bf8:	0801ec34 	.word	0x0801ec34
 8016bfc:	0801ec50 	.word	0x0801ec50

08016c00 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
 8016c00:	4b03      	ldr	r3, [pc, #12]	; (8016c10 <z_device_state_init+0x10>)

	while (dev < __device_end) {
 8016c02:	4a04      	ldr	r2, [pc, #16]	; (8016c14 <z_device_state_init+0x14>)
 8016c04:	4293      	cmp	r3, r2
 8016c06:	d201      	bcs.n	8016c0c <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
 8016c08:	3318      	adds	r3, #24
 8016c0a:	e7fa      	b.n	8016c02 <z_device_state_init+0x2>
	}
}
 8016c0c:	4770      	bx	lr
 8016c0e:	bf00      	nop
 8016c10:	0801d2b8 	.word	0x0801d2b8
 8016c14:	0801d378 	.word	0x0801d378

08016c18 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 8016c18:	b570      	push	{r4, r5, r6, lr}
 8016c1a:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8016c1c:	4b11      	ldr	r3, [pc, #68]	; (8016c64 <z_sys_init_run_level+0x4c>)
 8016c1e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8016c22:	e009      	b.n	8016c38 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
 8016c24:	4240      	negs	r0, r0
 8016c26:	e017      	b.n	8016c58 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
 8016c28:	68eb      	ldr	r3, [r5, #12]
 8016c2a:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
 8016c2c:	68ea      	ldr	r2, [r5, #12]
 8016c2e:	7853      	ldrb	r3, [r2, #1]
 8016c30:	f043 0301 	orr.w	r3, r3, #1
 8016c34:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8016c36:	3408      	adds	r4, #8
 8016c38:	1c73      	adds	r3, r6, #1
 8016c3a:	4a0a      	ldr	r2, [pc, #40]	; (8016c64 <z_sys_init_run_level+0x4c>)
 8016c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016c40:	42a3      	cmp	r3, r4
 8016c42:	d90d      	bls.n	8016c60 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
 8016c44:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
 8016c46:	6823      	ldr	r3, [r4, #0]
 8016c48:	4628      	mov	r0, r5
 8016c4a:	4798      	blx	r3
		if (dev != NULL) {
 8016c4c:	2d00      	cmp	r5, #0
 8016c4e:	d0f2      	beq.n	8016c36 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
 8016c50:	2800      	cmp	r0, #0
 8016c52:	d0eb      	beq.n	8016c2c <z_sys_init_run_level+0x14>
				if (rc < 0) {
 8016c54:	2800      	cmp	r0, #0
 8016c56:	dbe5      	blt.n	8016c24 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
 8016c58:	28ff      	cmp	r0, #255	; 0xff
 8016c5a:	dde5      	ble.n	8016c28 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
 8016c5c:	20ff      	movs	r0, #255	; 0xff
 8016c5e:	e7e3      	b.n	8016c28 <z_sys_init_run_level+0x10>
		}
	}
}
 8016c60:	bd70      	pop	{r4, r5, r6, pc}
 8016c62:	bf00      	nop
 8016c64:	0801ec78 	.word	0x0801ec78

08016c68 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
 8016c68:	b510      	push	{r4, lr}
 8016c6a:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
 8016c6c:	4b08      	ldr	r3, [pc, #32]	; (8016c90 <k_sys_work_q_init+0x28>)
 8016c6e:	9302      	str	r3, [sp, #8]
 8016c70:	2400      	movs	r4, #0
 8016c72:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
 8016c76:	ab02      	add	r3, sp, #8
 8016c78:	9300      	str	r3, [sp, #0]
 8016c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016c82:	4904      	ldr	r1, [pc, #16]	; (8016c94 <k_sys_work_q_init+0x2c>)
 8016c84:	4804      	ldr	r0, [pc, #16]	; (8016c98 <k_sys_work_q_init+0x30>)
 8016c86:	f7ff f907 	bl	8015e98 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
 8016c8a:	4620      	mov	r0, r4
 8016c8c:	b004      	add	sp, #16
 8016c8e:	bd10      	pop	{r4, pc}
 8016c90:	0801ec8c 	.word	0x0801ec8c
 8016c94:	2000a200 	.word	0x2000a200
 8016c98:	20002fa0 	.word	0x20002fa0

08016c9c <fabs>:
 8016c9c:	ec51 0b10 	vmov	r0, r1, d0
 8016ca0:	ee10 2a10 	vmov	r2, s0
 8016ca4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016ca8:	ec43 2b10 	vmov	d0, r2, r3
 8016cac:	4770      	bx	lr
 8016cae:	bf00      	nop

08016cb0 <__ieee754_sqrt>:
 8016cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cb4:	4a5f      	ldr	r2, [pc, #380]	; (8016e34 <__ieee754_sqrt+0x184>)
 8016cb6:	ec57 6b10 	vmov	r6, r7, d0
 8016cba:	43ba      	bics	r2, r7
 8016cbc:	f000 8098 	beq.w	8016df0 <__ieee754_sqrt+0x140>
 8016cc0:	2f00      	cmp	r7, #0
 8016cc2:	ee10 4a10 	vmov	r4, s0
 8016cc6:	463b      	mov	r3, r7
 8016cc8:	dd4e      	ble.n	8016d68 <__ieee754_sqrt+0xb8>
 8016cca:	1539      	asrs	r1, r7, #20
 8016ccc:	d05b      	beq.n	8016d86 <__ieee754_sqrt+0xd6>
 8016cce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016cd2:	07ca      	lsls	r2, r1, #31
 8016cd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016cd8:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
 8016cdc:	d403      	bmi.n	8016ce6 <__ieee754_sqrt+0x36>
 8016cde:	005b      	lsls	r3, r3, #1
 8016ce0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8016ce4:	0064      	lsls	r4, r4, #1
 8016ce6:	0fe2      	lsrs	r2, r4, #31
 8016ce8:	f04f 0c00 	mov.w	ip, #0
 8016cec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8016cf0:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 8016cf4:	0064      	lsls	r4, r4, #1
 8016cf6:	4666      	mov	r6, ip
 8016cf8:	2516      	movs	r5, #22
 8016cfa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8016cfe:	18b1      	adds	r1, r6, r2
 8016d00:	4299      	cmp	r1, r3
 8016d02:	dc02      	bgt.n	8016d0a <__ieee754_sqrt+0x5a>
 8016d04:	1a5b      	subs	r3, r3, r1
 8016d06:	188e      	adds	r6, r1, r2
 8016d08:	4494      	add	ip, r2
 8016d0a:	005b      	lsls	r3, r3, #1
 8016d0c:	3d01      	subs	r5, #1
 8016d0e:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8016d12:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8016d16:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8016d1a:	d1f0      	bne.n	8016cfe <__ieee754_sqrt+0x4e>
 8016d1c:	462f      	mov	r7, r5
 8016d1e:	2020      	movs	r0, #32
 8016d20:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016d24:	e009      	b.n	8016d3a <__ieee754_sqrt+0x8a>
 8016d26:	d03e      	beq.n	8016da6 <__ieee754_sqrt+0xf6>
 8016d28:	0fe1      	lsrs	r1, r4, #31
 8016d2a:	3801      	subs	r0, #1
 8016d2c:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8016d30:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8016d34:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8016d38:	d03e      	beq.n	8016db8 <__ieee754_sqrt+0x108>
 8016d3a:	42b3      	cmp	r3, r6
 8016d3c:	eb02 0105 	add.w	r1, r2, r5
 8016d40:	ddf1      	ble.n	8016d26 <__ieee754_sqrt+0x76>
 8016d42:	2900      	cmp	r1, #0
 8016d44:	eb01 0502 	add.w	r5, r1, r2
 8016d48:	db09      	blt.n	8016d5e <__ieee754_sqrt+0xae>
 8016d4a:	46b0      	mov	r8, r6
 8016d4c:	1b9b      	subs	r3, r3, r6
 8016d4e:	42a1      	cmp	r1, r4
 8016d50:	bf88      	it	hi
 8016d52:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8016d56:	1a64      	subs	r4, r4, r1
 8016d58:	4417      	add	r7, r2
 8016d5a:	4646      	mov	r6, r8
 8016d5c:	e7e4      	b.n	8016d28 <__ieee754_sqrt+0x78>
 8016d5e:	2d00      	cmp	r5, #0
 8016d60:	dbf3      	blt.n	8016d4a <__ieee754_sqrt+0x9a>
 8016d62:	f106 0801 	add.w	r8, r6, #1
 8016d66:	e7f1      	b.n	8016d4c <__ieee754_sqrt+0x9c>
 8016d68:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8016d6c:	4332      	orrs	r2, r6
 8016d6e:	d036      	beq.n	8016dde <__ieee754_sqrt+0x12e>
 8016d70:	2f00      	cmp	r7, #0
 8016d72:	d14d      	bne.n	8016e10 <__ieee754_sqrt+0x160>
 8016d74:	4639      	mov	r1, r7
 8016d76:	0ae2      	lsrs	r2, r4, #11
 8016d78:	3915      	subs	r1, #21
 8016d7a:	0564      	lsls	r4, r4, #21
 8016d7c:	4613      	mov	r3, r2
 8016d7e:	2a00      	cmp	r2, #0
 8016d80:	d0f9      	beq.n	8016d76 <__ieee754_sqrt+0xc6>
 8016d82:	02d7      	lsls	r7, r2, #11
 8016d84:	d451      	bmi.n	8016e2a <__ieee754_sqrt+0x17a>
 8016d86:	2000      	movs	r0, #0
 8016d88:	005b      	lsls	r3, r3, #1
 8016d8a:	02de      	lsls	r6, r3, #11
 8016d8c:	4605      	mov	r5, r0
 8016d8e:	f100 0001 	add.w	r0, r0, #1
 8016d92:	d5f9      	bpl.n	8016d88 <__ieee754_sqrt+0xd8>
 8016d94:	461a      	mov	r2, r3
 8016d96:	4623      	mov	r3, r4
 8016d98:	4084      	lsls	r4, r0
 8016d9a:	f1c0 0020 	rsb	r0, r0, #32
 8016d9e:	40c3      	lsrs	r3, r0
 8016da0:	4313      	orrs	r3, r2
 8016da2:	1b49      	subs	r1, r1, r5
 8016da4:	e793      	b.n	8016cce <__ieee754_sqrt+0x1e>
 8016da6:	42a1      	cmp	r1, r4
 8016da8:	d8be      	bhi.n	8016d28 <__ieee754_sqrt+0x78>
 8016daa:	2900      	cmp	r1, #0
 8016dac:	eb01 0502 	add.w	r5, r1, r2
 8016db0:	dbd5      	blt.n	8016d5e <__ieee754_sqrt+0xae>
 8016db2:	4698      	mov	r8, r3
 8016db4:	2300      	movs	r3, #0
 8016db6:	e7ce      	b.n	8016d56 <__ieee754_sqrt+0xa6>
 8016db8:	4323      	orrs	r3, r4
 8016dba:	d112      	bne.n	8016de2 <__ieee754_sqrt+0x132>
 8016dbc:	0878      	lsrs	r0, r7, #1
 8016dbe:	ea4f 016c 	mov.w	r1, ip, asr #1
 8016dc2:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
 8016dc6:	f01c 0f01 	tst.w	ip, #1
 8016dca:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8016dce:	bf18      	it	ne
 8016dd0:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
 8016dd4:	eb01 530e 	add.w	r3, r1, lr, lsl #20
 8016dd8:	4602      	mov	r2, r0
 8016dda:	ec43 2b10 	vmov	d0, r2, r3
 8016dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016de2:	1c7b      	adds	r3, r7, #1
 8016de4:	bf16      	itet	ne
 8016de6:	1c78      	addne	r0, r7, #1
 8016de8:	f10c 0c01 	addeq.w	ip, ip, #1
 8016dec:	0840      	lsrne	r0, r0, #1
 8016dee:	e7e6      	b.n	8016dbe <__ieee754_sqrt+0x10e>
 8016df0:	ee10 2a10 	vmov	r2, s0
 8016df4:	ee10 0a10 	vmov	r0, s0
 8016df8:	463b      	mov	r3, r7
 8016dfa:	4639      	mov	r1, r7
 8016dfc:	f7e9 fbbc 	bl	8000578 <__aeabi_dmul>
 8016e00:	4632      	mov	r2, r6
 8016e02:	463b      	mov	r3, r7
 8016e04:	f7e9 fa02 	bl	800020c <__adddf3>
 8016e08:	ec41 0b10 	vmov	d0, r0, r1
 8016e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e10:	ee10 2a10 	vmov	r2, s0
 8016e14:	4630      	mov	r0, r6
 8016e16:	4639      	mov	r1, r7
 8016e18:	f7e9 f9f6 	bl	8000208 <__aeabi_dsub>
 8016e1c:	4602      	mov	r2, r0
 8016e1e:	460b      	mov	r3, r1
 8016e20:	f7e9 fcd4 	bl	80007cc <__aeabi_ddiv>
 8016e24:	ec41 0b10 	vmov	d0, r0, r1
 8016e28:	e7d9      	b.n	8016dde <__ieee754_sqrt+0x12e>
 8016e2a:	4623      	mov	r3, r4
 8016e2c:	2020      	movs	r0, #32
 8016e2e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016e32:	e7b4      	b.n	8016d9e <__ieee754_sqrt+0xee>
 8016e34:	7ff00000 	.word	0x7ff00000

08016e38 <finite>:
 8016e38:	b082      	sub	sp, #8
 8016e3a:	ed8d 0b00 	vstr	d0, [sp]
 8016e3e:	9801      	ldr	r0, [sp, #4]
 8016e40:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8016e44:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016e48:	0fc0      	lsrs	r0, r0, #31
 8016e4a:	b002      	add	sp, #8
 8016e4c:	4770      	bx	lr
 8016e4e:	bf00      	nop

08016e50 <matherr>:
 8016e50:	2000      	movs	r0, #0
 8016e52:	4770      	bx	lr

08016e54 <rint>:
 8016e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e56:	ec53 2b10 	vmov	r2, r3, d0
 8016e5a:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8016e5e:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
 8016e62:	2813      	cmp	r0, #19
 8016e64:	ee10 5a10 	vmov	r5, s0
 8016e68:	b083      	sub	sp, #12
 8016e6a:	4619      	mov	r1, r3
 8016e6c:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8016e70:	dc31      	bgt.n	8016ed6 <rint+0x82>
 8016e72:	2800      	cmp	r0, #0
 8016e74:	db4c      	blt.n	8016f10 <rint+0xbc>
 8016e76:	4e3e      	ldr	r6, [pc, #248]	; (8016f70 <rint+0x11c>)
 8016e78:	4106      	asrs	r6, r0
 8016e7a:	ea03 0706 	and.w	r7, r3, r6
 8016e7e:	4317      	orrs	r7, r2
 8016e80:	d02e      	beq.n	8016ee0 <rint+0x8c>
 8016e82:	ea03 0356 	and.w	r3, r3, r6, lsr #1
 8016e86:	431d      	orrs	r5, r3
 8016e88:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8016e8c:	d00c      	beq.n	8016ea8 <rint+0x54>
 8016e8e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016e92:	2813      	cmp	r0, #19
 8016e94:	ea21 0606 	bic.w	r6, r1, r6
 8016e98:	fa43 f100 	asr.w	r1, r3, r0
 8016e9c:	ea41 0106 	orr.w	r1, r1, r6
 8016ea0:	bf0c      	ite	eq
 8016ea2:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8016ea6:	2500      	movne	r5, #0
 8016ea8:	4832      	ldr	r0, [pc, #200]	; (8016f74 <rint+0x120>)
 8016eaa:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8016eae:	462a      	mov	r2, r5
 8016eb0:	e9d4 4500 	ldrd	r4, r5, [r4]
 8016eb4:	460b      	mov	r3, r1
 8016eb6:	4620      	mov	r0, r4
 8016eb8:	4629      	mov	r1, r5
 8016eba:	f7e9 f9a7 	bl	800020c <__adddf3>
 8016ebe:	e9cd 0100 	strd	r0, r1, [sp]
 8016ec2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ec6:	4622      	mov	r2, r4
 8016ec8:	462b      	mov	r3, r5
 8016eca:	f7e9 f99d 	bl	8000208 <__aeabi_dsub>
 8016ece:	ec41 0b10 	vmov	d0, r0, r1
 8016ed2:	b003      	add	sp, #12
 8016ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ed6:	2833      	cmp	r0, #51	; 0x33
 8016ed8:	dd06      	ble.n	8016ee8 <rint+0x94>
 8016eda:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016ede:	d040      	beq.n	8016f62 <rint+0x10e>
 8016ee0:	ec43 2b10 	vmov	d0, r2, r3
 8016ee4:	b003      	add	sp, #12
 8016ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ee8:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
 8016eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ef0:	40f0      	lsrs	r0, r6
 8016ef2:	4202      	tst	r2, r0
 8016ef4:	d0f4      	beq.n	8016ee0 <rint+0x8c>
 8016ef6:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
 8016efa:	ea4f 0350 	mov.w	r3, r0, lsr #1
 8016efe:	d0d3      	beq.n	8016ea8 <rint+0x54>
 8016f00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016f04:	ea25 0503 	bic.w	r5, r5, r3
 8016f08:	fa42 f606 	asr.w	r6, r2, r6
 8016f0c:	4335      	orrs	r5, r6
 8016f0e:	e7cb      	b.n	8016ea8 <rint+0x54>
 8016f10:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8016f14:	4310      	orrs	r0, r2
 8016f16:	d0e3      	beq.n	8016ee0 <rint+0x8c>
 8016f18:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8016f1c:	4310      	orrs	r0, r2
 8016f1e:	4245      	negs	r5, r0
 8016f20:	4305      	orrs	r5, r0
 8016f22:	4814      	ldr	r0, [pc, #80]	; (8016f74 <rint+0x120>)
 8016f24:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8016f28:	e9d0 6700 	ldrd	r6, r7, [r0]
 8016f2c:	0c59      	lsrs	r1, r3, #17
 8016f2e:	0b2d      	lsrs	r5, r5, #12
 8016f30:	0449      	lsls	r1, r1, #17
 8016f32:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8016f36:	ea45 0301 	orr.w	r3, r5, r1
 8016f3a:	4630      	mov	r0, r6
 8016f3c:	4639      	mov	r1, r7
 8016f3e:	f7e9 f965 	bl	800020c <__adddf3>
 8016f42:	e9cd 0100 	strd	r0, r1, [sp]
 8016f46:	463b      	mov	r3, r7
 8016f48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f4c:	4632      	mov	r2, r6
 8016f4e:	f7e9 f95b 	bl	8000208 <__aeabi_dsub>
 8016f52:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016f56:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 8016f5a:	ec41 0b10 	vmov	d0, r0, r1
 8016f5e:	b003      	add	sp, #12
 8016f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f62:	ee10 0a10 	vmov	r0, s0
 8016f66:	f7e9 f951 	bl	800020c <__adddf3>
 8016f6a:	ec41 0b10 	vmov	d0, r0, r1
 8016f6e:	e7b9      	b.n	8016ee4 <rint+0x90>
 8016f70:	000fffff 	.word	0x000fffff
 8016f74:	0801d840 	.word	0x0801d840

08016f78 <malloc>:
 8016f78:	4b02      	ldr	r3, [pc, #8]	; (8016f84 <malloc+0xc>)
 8016f7a:	4601      	mov	r1, r0
 8016f7c:	6818      	ldr	r0, [r3, #0]
 8016f7e:	f000 b803 	b.w	8016f88 <_malloc_r>
 8016f82:	bf00      	nop
 8016f84:	20000e4c 	.word	0x20000e4c

08016f88 <_malloc_r>:
 8016f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f8a:	1ccd      	adds	r5, r1, #3
 8016f8c:	f025 0503 	bic.w	r5, r5, #3
 8016f90:	3508      	adds	r5, #8
 8016f92:	2d0c      	cmp	r5, #12
 8016f94:	bf38      	it	cc
 8016f96:	250c      	movcc	r5, #12
 8016f98:	2d00      	cmp	r5, #0
 8016f9a:	4606      	mov	r6, r0
 8016f9c:	db01      	blt.n	8016fa2 <_malloc_r+0x1a>
 8016f9e:	42a9      	cmp	r1, r5
 8016fa0:	d903      	bls.n	8016faa <_malloc_r+0x22>
 8016fa2:	230c      	movs	r3, #12
 8016fa4:	6033      	str	r3, [r6, #0]
 8016fa6:	2000      	movs	r0, #0
 8016fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016faa:	f000 fb15 	bl	80175d8 <__malloc_lock>
 8016fae:	4921      	ldr	r1, [pc, #132]	; (8017034 <_malloc_r+0xac>)
 8016fb0:	680a      	ldr	r2, [r1, #0]
 8016fb2:	4614      	mov	r4, r2
 8016fb4:	b99c      	cbnz	r4, 8016fde <_malloc_r+0x56>
 8016fb6:	4f20      	ldr	r7, [pc, #128]	; (8017038 <_malloc_r+0xb0>)
 8016fb8:	683b      	ldr	r3, [r7, #0]
 8016fba:	b923      	cbnz	r3, 8016fc6 <_malloc_r+0x3e>
 8016fbc:	4621      	mov	r1, r4
 8016fbe:	4630      	mov	r0, r6
 8016fc0:	f000 fa72 	bl	80174a8 <_sbrk_r>
 8016fc4:	6038      	str	r0, [r7, #0]
 8016fc6:	4629      	mov	r1, r5
 8016fc8:	4630      	mov	r0, r6
 8016fca:	f000 fa6d 	bl	80174a8 <_sbrk_r>
 8016fce:	1c43      	adds	r3, r0, #1
 8016fd0:	d123      	bne.n	801701a <_malloc_r+0x92>
 8016fd2:	230c      	movs	r3, #12
 8016fd4:	6033      	str	r3, [r6, #0]
 8016fd6:	4630      	mov	r0, r6
 8016fd8:	f000 fb04 	bl	80175e4 <__malloc_unlock>
 8016fdc:	e7e3      	b.n	8016fa6 <_malloc_r+0x1e>
 8016fde:	6823      	ldr	r3, [r4, #0]
 8016fe0:	1b5b      	subs	r3, r3, r5
 8016fe2:	d417      	bmi.n	8017014 <_malloc_r+0x8c>
 8016fe4:	2b0b      	cmp	r3, #11
 8016fe6:	d903      	bls.n	8016ff0 <_malloc_r+0x68>
 8016fe8:	6023      	str	r3, [r4, #0]
 8016fea:	441c      	add	r4, r3
 8016fec:	6025      	str	r5, [r4, #0]
 8016fee:	e004      	b.n	8016ffa <_malloc_r+0x72>
 8016ff0:	6863      	ldr	r3, [r4, #4]
 8016ff2:	42a2      	cmp	r2, r4
 8016ff4:	bf0c      	ite	eq
 8016ff6:	600b      	streq	r3, [r1, #0]
 8016ff8:	6053      	strne	r3, [r2, #4]
 8016ffa:	4630      	mov	r0, r6
 8016ffc:	f000 faf2 	bl	80175e4 <__malloc_unlock>
 8017000:	f104 000b 	add.w	r0, r4, #11
 8017004:	1d23      	adds	r3, r4, #4
 8017006:	f020 0007 	bic.w	r0, r0, #7
 801700a:	1ac2      	subs	r2, r0, r3
 801700c:	d0cc      	beq.n	8016fa8 <_malloc_r+0x20>
 801700e:	1a1b      	subs	r3, r3, r0
 8017010:	50a3      	str	r3, [r4, r2]
 8017012:	e7c9      	b.n	8016fa8 <_malloc_r+0x20>
 8017014:	4622      	mov	r2, r4
 8017016:	6864      	ldr	r4, [r4, #4]
 8017018:	e7cc      	b.n	8016fb4 <_malloc_r+0x2c>
 801701a:	1cc4      	adds	r4, r0, #3
 801701c:	f024 0403 	bic.w	r4, r4, #3
 8017020:	42a0      	cmp	r0, r4
 8017022:	d0e3      	beq.n	8016fec <_malloc_r+0x64>
 8017024:	1a21      	subs	r1, r4, r0
 8017026:	4630      	mov	r0, r6
 8017028:	f000 fa3e 	bl	80174a8 <_sbrk_r>
 801702c:	3001      	adds	r0, #1
 801702e:	d1dd      	bne.n	8016fec <_malloc_r+0x64>
 8017030:	e7cf      	b.n	8016fd2 <_malloc_r+0x4a>
 8017032:	bf00      	nop
 8017034:	20003c64 	.word	0x20003c64
 8017038:	20003c68 	.word	0x20003c68

0801703c <_printf_float>:
 801703c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017040:	ed2d 8b02 	vpush	{d8}
 8017044:	b08d      	sub	sp, #52	; 0x34
 8017046:	460c      	mov	r4, r1
 8017048:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801704c:	4616      	mov	r6, r2
 801704e:	461f      	mov	r7, r3
 8017050:	4605      	mov	r5, r0
 8017052:	f000 fabd 	bl	80175d0 <_localeconv_r>
 8017056:	f8d0 a000 	ldr.w	sl, [r0]
 801705a:	4650      	mov	r0, sl
 801705c:	f7e9 ff36 	bl	8000ecc <strlen>
 8017060:	2300      	movs	r3, #0
 8017062:	930a      	str	r3, [sp, #40]	; 0x28
 8017064:	6823      	ldr	r3, [r4, #0]
 8017066:	9305      	str	r3, [sp, #20]
 8017068:	f8d8 3000 	ldr.w	r3, [r8]
 801706c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017070:	3307      	adds	r3, #7
 8017072:	f023 0307 	bic.w	r3, r3, #7
 8017076:	f103 0208 	add.w	r2, r3, #8
 801707a:	f8c8 2000 	str.w	r2, [r8]
 801707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017082:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017086:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801708a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801708e:	9307      	str	r3, [sp, #28]
 8017090:	f8cd 8018 	str.w	r8, [sp, #24]
 8017094:	ee08 0a10 	vmov	s16, r0
 8017098:	4b9f      	ldr	r3, [pc, #636]	; (8017318 <_printf_float+0x2dc>)
 801709a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801709e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80170a2:	f7e9 fefd 	bl	8000ea0 <__aeabi_dcmpun>
 80170a6:	bb88      	cbnz	r0, 801710c <_printf_float+0xd0>
 80170a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80170ac:	4b9a      	ldr	r3, [pc, #616]	; (8017318 <_printf_float+0x2dc>)
 80170ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80170b2:	f7e9 fcdd 	bl	8000a70 <__aeabi_dcmple>
 80170b6:	bb48      	cbnz	r0, 801710c <_printf_float+0xd0>
 80170b8:	2200      	movs	r2, #0
 80170ba:	2300      	movs	r3, #0
 80170bc:	4640      	mov	r0, r8
 80170be:	4649      	mov	r1, r9
 80170c0:	f7e9 fccc 	bl	8000a5c <__aeabi_dcmplt>
 80170c4:	b110      	cbz	r0, 80170cc <_printf_float+0x90>
 80170c6:	232d      	movs	r3, #45	; 0x2d
 80170c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80170cc:	4b93      	ldr	r3, [pc, #588]	; (801731c <_printf_float+0x2e0>)
 80170ce:	4894      	ldr	r0, [pc, #592]	; (8017320 <_printf_float+0x2e4>)
 80170d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80170d4:	bf94      	ite	ls
 80170d6:	4698      	movls	r8, r3
 80170d8:	4680      	movhi	r8, r0
 80170da:	2303      	movs	r3, #3
 80170dc:	6123      	str	r3, [r4, #16]
 80170de:	9b05      	ldr	r3, [sp, #20]
 80170e0:	f023 0204 	bic.w	r2, r3, #4
 80170e4:	6022      	str	r2, [r4, #0]
 80170e6:	f04f 0900 	mov.w	r9, #0
 80170ea:	9700      	str	r7, [sp, #0]
 80170ec:	4633      	mov	r3, r6
 80170ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80170f0:	4621      	mov	r1, r4
 80170f2:	4628      	mov	r0, r5
 80170f4:	f005 fc78 	bl	801c9e8 <_printf_common>
 80170f8:	3001      	adds	r0, #1
 80170fa:	f040 8090 	bne.w	801721e <_printf_float+0x1e2>
 80170fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017102:	b00d      	add	sp, #52	; 0x34
 8017104:	ecbd 8b02 	vpop	{d8}
 8017108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801710c:	4642      	mov	r2, r8
 801710e:	464b      	mov	r3, r9
 8017110:	4640      	mov	r0, r8
 8017112:	4649      	mov	r1, r9
 8017114:	f7e9 fec4 	bl	8000ea0 <__aeabi_dcmpun>
 8017118:	b140      	cbz	r0, 801712c <_printf_float+0xf0>
 801711a:	464b      	mov	r3, r9
 801711c:	2b00      	cmp	r3, #0
 801711e:	bfbc      	itt	lt
 8017120:	232d      	movlt	r3, #45	; 0x2d
 8017122:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017126:	487f      	ldr	r0, [pc, #508]	; (8017324 <_printf_float+0x2e8>)
 8017128:	4b7f      	ldr	r3, [pc, #508]	; (8017328 <_printf_float+0x2ec>)
 801712a:	e7d1      	b.n	80170d0 <_printf_float+0x94>
 801712c:	6863      	ldr	r3, [r4, #4]
 801712e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017132:	9206      	str	r2, [sp, #24]
 8017134:	1c5a      	adds	r2, r3, #1
 8017136:	d13f      	bne.n	80171b8 <_printf_float+0x17c>
 8017138:	2306      	movs	r3, #6
 801713a:	6063      	str	r3, [r4, #4]
 801713c:	9b05      	ldr	r3, [sp, #20]
 801713e:	6861      	ldr	r1, [r4, #4]
 8017140:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017144:	2300      	movs	r3, #0
 8017146:	9303      	str	r3, [sp, #12]
 8017148:	ab0a      	add	r3, sp, #40	; 0x28
 801714a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801714e:	ab09      	add	r3, sp, #36	; 0x24
 8017150:	ec49 8b10 	vmov	d0, r8, r9
 8017154:	9300      	str	r3, [sp, #0]
 8017156:	6022      	str	r2, [r4, #0]
 8017158:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801715c:	4628      	mov	r0, r5
 801715e:	f005 fba3 	bl	801c8a8 <__cvt>
 8017162:	9b06      	ldr	r3, [sp, #24]
 8017164:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017166:	2b47      	cmp	r3, #71	; 0x47
 8017168:	4680      	mov	r8, r0
 801716a:	d108      	bne.n	801717e <_printf_float+0x142>
 801716c:	1cc8      	adds	r0, r1, #3
 801716e:	db02      	blt.n	8017176 <_printf_float+0x13a>
 8017170:	6863      	ldr	r3, [r4, #4]
 8017172:	4299      	cmp	r1, r3
 8017174:	dd41      	ble.n	80171fa <_printf_float+0x1be>
 8017176:	f1ab 0b02 	sub.w	fp, fp, #2
 801717a:	fa5f fb8b 	uxtb.w	fp, fp
 801717e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017182:	d820      	bhi.n	80171c6 <_printf_float+0x18a>
 8017184:	3901      	subs	r1, #1
 8017186:	465a      	mov	r2, fp
 8017188:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801718c:	9109      	str	r1, [sp, #36]	; 0x24
 801718e:	f005 fbed 	bl	801c96c <__exponent>
 8017192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017194:	1813      	adds	r3, r2, r0
 8017196:	2a01      	cmp	r2, #1
 8017198:	4681      	mov	r9, r0
 801719a:	6123      	str	r3, [r4, #16]
 801719c:	dc02      	bgt.n	80171a4 <_printf_float+0x168>
 801719e:	6822      	ldr	r2, [r4, #0]
 80171a0:	07d2      	lsls	r2, r2, #31
 80171a2:	d501      	bpl.n	80171a8 <_printf_float+0x16c>
 80171a4:	3301      	adds	r3, #1
 80171a6:	6123      	str	r3, [r4, #16]
 80171a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d09c      	beq.n	80170ea <_printf_float+0xae>
 80171b0:	232d      	movs	r3, #45	; 0x2d
 80171b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80171b6:	e798      	b.n	80170ea <_printf_float+0xae>
 80171b8:	9a06      	ldr	r2, [sp, #24]
 80171ba:	2a47      	cmp	r2, #71	; 0x47
 80171bc:	d1be      	bne.n	801713c <_printf_float+0x100>
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d1bc      	bne.n	801713c <_printf_float+0x100>
 80171c2:	2301      	movs	r3, #1
 80171c4:	e7b9      	b.n	801713a <_printf_float+0xfe>
 80171c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80171ca:	d118      	bne.n	80171fe <_printf_float+0x1c2>
 80171cc:	2900      	cmp	r1, #0
 80171ce:	6863      	ldr	r3, [r4, #4]
 80171d0:	dd0b      	ble.n	80171ea <_printf_float+0x1ae>
 80171d2:	6121      	str	r1, [r4, #16]
 80171d4:	b913      	cbnz	r3, 80171dc <_printf_float+0x1a0>
 80171d6:	6822      	ldr	r2, [r4, #0]
 80171d8:	07d0      	lsls	r0, r2, #31
 80171da:	d502      	bpl.n	80171e2 <_printf_float+0x1a6>
 80171dc:	3301      	adds	r3, #1
 80171de:	440b      	add	r3, r1
 80171e0:	6123      	str	r3, [r4, #16]
 80171e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80171e4:	f04f 0900 	mov.w	r9, #0
 80171e8:	e7de      	b.n	80171a8 <_printf_float+0x16c>
 80171ea:	b913      	cbnz	r3, 80171f2 <_printf_float+0x1b6>
 80171ec:	6822      	ldr	r2, [r4, #0]
 80171ee:	07d2      	lsls	r2, r2, #31
 80171f0:	d501      	bpl.n	80171f6 <_printf_float+0x1ba>
 80171f2:	3302      	adds	r3, #2
 80171f4:	e7f4      	b.n	80171e0 <_printf_float+0x1a4>
 80171f6:	2301      	movs	r3, #1
 80171f8:	e7f2      	b.n	80171e0 <_printf_float+0x1a4>
 80171fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80171fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017200:	4299      	cmp	r1, r3
 8017202:	db05      	blt.n	8017210 <_printf_float+0x1d4>
 8017204:	6823      	ldr	r3, [r4, #0]
 8017206:	6121      	str	r1, [r4, #16]
 8017208:	07d8      	lsls	r0, r3, #31
 801720a:	d5ea      	bpl.n	80171e2 <_printf_float+0x1a6>
 801720c:	1c4b      	adds	r3, r1, #1
 801720e:	e7e7      	b.n	80171e0 <_printf_float+0x1a4>
 8017210:	2900      	cmp	r1, #0
 8017212:	bfd4      	ite	le
 8017214:	f1c1 0202 	rsble	r2, r1, #2
 8017218:	2201      	movgt	r2, #1
 801721a:	4413      	add	r3, r2
 801721c:	e7e0      	b.n	80171e0 <_printf_float+0x1a4>
 801721e:	6823      	ldr	r3, [r4, #0]
 8017220:	055a      	lsls	r2, r3, #21
 8017222:	d407      	bmi.n	8017234 <_printf_float+0x1f8>
 8017224:	6923      	ldr	r3, [r4, #16]
 8017226:	4642      	mov	r2, r8
 8017228:	4631      	mov	r1, r6
 801722a:	4628      	mov	r0, r5
 801722c:	47b8      	blx	r7
 801722e:	3001      	adds	r0, #1
 8017230:	d12c      	bne.n	801728c <_printf_float+0x250>
 8017232:	e764      	b.n	80170fe <_printf_float+0xc2>
 8017234:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017238:	f240 80e0 	bls.w	80173fc <_printf_float+0x3c0>
 801723c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017240:	2200      	movs	r2, #0
 8017242:	2300      	movs	r3, #0
 8017244:	f7e9 fc00 	bl	8000a48 <__aeabi_dcmpeq>
 8017248:	2800      	cmp	r0, #0
 801724a:	d034      	beq.n	80172b6 <_printf_float+0x27a>
 801724c:	4a37      	ldr	r2, [pc, #220]	; (801732c <_printf_float+0x2f0>)
 801724e:	2301      	movs	r3, #1
 8017250:	4631      	mov	r1, r6
 8017252:	4628      	mov	r0, r5
 8017254:	47b8      	blx	r7
 8017256:	3001      	adds	r0, #1
 8017258:	f43f af51 	beq.w	80170fe <_printf_float+0xc2>
 801725c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017260:	429a      	cmp	r2, r3
 8017262:	db02      	blt.n	801726a <_printf_float+0x22e>
 8017264:	6823      	ldr	r3, [r4, #0]
 8017266:	07d8      	lsls	r0, r3, #31
 8017268:	d510      	bpl.n	801728c <_printf_float+0x250>
 801726a:	ee18 3a10 	vmov	r3, s16
 801726e:	4652      	mov	r2, sl
 8017270:	4631      	mov	r1, r6
 8017272:	4628      	mov	r0, r5
 8017274:	47b8      	blx	r7
 8017276:	3001      	adds	r0, #1
 8017278:	f43f af41 	beq.w	80170fe <_printf_float+0xc2>
 801727c:	f04f 0800 	mov.w	r8, #0
 8017280:	f104 091a 	add.w	r9, r4, #26
 8017284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017286:	3b01      	subs	r3, #1
 8017288:	4543      	cmp	r3, r8
 801728a:	dc09      	bgt.n	80172a0 <_printf_float+0x264>
 801728c:	6823      	ldr	r3, [r4, #0]
 801728e:	079b      	lsls	r3, r3, #30
 8017290:	f100 8105 	bmi.w	801749e <_printf_float+0x462>
 8017294:	68e0      	ldr	r0, [r4, #12]
 8017296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017298:	4298      	cmp	r0, r3
 801729a:	bfb8      	it	lt
 801729c:	4618      	movlt	r0, r3
 801729e:	e730      	b.n	8017102 <_printf_float+0xc6>
 80172a0:	2301      	movs	r3, #1
 80172a2:	464a      	mov	r2, r9
 80172a4:	4631      	mov	r1, r6
 80172a6:	4628      	mov	r0, r5
 80172a8:	47b8      	blx	r7
 80172aa:	3001      	adds	r0, #1
 80172ac:	f43f af27 	beq.w	80170fe <_printf_float+0xc2>
 80172b0:	f108 0801 	add.w	r8, r8, #1
 80172b4:	e7e6      	b.n	8017284 <_printf_float+0x248>
 80172b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	dc39      	bgt.n	8017330 <_printf_float+0x2f4>
 80172bc:	4a1b      	ldr	r2, [pc, #108]	; (801732c <_printf_float+0x2f0>)
 80172be:	2301      	movs	r3, #1
 80172c0:	4631      	mov	r1, r6
 80172c2:	4628      	mov	r0, r5
 80172c4:	47b8      	blx	r7
 80172c6:	3001      	adds	r0, #1
 80172c8:	f43f af19 	beq.w	80170fe <_printf_float+0xc2>
 80172cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80172d0:	4313      	orrs	r3, r2
 80172d2:	d102      	bne.n	80172da <_printf_float+0x29e>
 80172d4:	6823      	ldr	r3, [r4, #0]
 80172d6:	07d9      	lsls	r1, r3, #31
 80172d8:	d5d8      	bpl.n	801728c <_printf_float+0x250>
 80172da:	ee18 3a10 	vmov	r3, s16
 80172de:	4652      	mov	r2, sl
 80172e0:	4631      	mov	r1, r6
 80172e2:	4628      	mov	r0, r5
 80172e4:	47b8      	blx	r7
 80172e6:	3001      	adds	r0, #1
 80172e8:	f43f af09 	beq.w	80170fe <_printf_float+0xc2>
 80172ec:	f04f 0900 	mov.w	r9, #0
 80172f0:	f104 0a1a 	add.w	sl, r4, #26
 80172f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172f6:	425b      	negs	r3, r3
 80172f8:	454b      	cmp	r3, r9
 80172fa:	dc01      	bgt.n	8017300 <_printf_float+0x2c4>
 80172fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172fe:	e792      	b.n	8017226 <_printf_float+0x1ea>
 8017300:	2301      	movs	r3, #1
 8017302:	4652      	mov	r2, sl
 8017304:	4631      	mov	r1, r6
 8017306:	4628      	mov	r0, r5
 8017308:	47b8      	blx	r7
 801730a:	3001      	adds	r0, #1
 801730c:	f43f aef7 	beq.w	80170fe <_printf_float+0xc2>
 8017310:	f109 0901 	add.w	r9, r9, #1
 8017314:	e7ee      	b.n	80172f4 <_printf_float+0x2b8>
 8017316:	bf00      	nop
 8017318:	7fefffff 	.word	0x7fefffff
 801731c:	0801eda9 	.word	0x0801eda9
 8017320:	0801edad 	.word	0x0801edad
 8017324:	0801edb5 	.word	0x0801edb5
 8017328:	0801edb1 	.word	0x0801edb1
 801732c:	0801edb9 	.word	0x0801edb9
 8017330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017332:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017334:	429a      	cmp	r2, r3
 8017336:	bfa8      	it	ge
 8017338:	461a      	movge	r2, r3
 801733a:	2a00      	cmp	r2, #0
 801733c:	4691      	mov	r9, r2
 801733e:	dc37      	bgt.n	80173b0 <_printf_float+0x374>
 8017340:	f04f 0b00 	mov.w	fp, #0
 8017344:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017348:	f104 021a 	add.w	r2, r4, #26
 801734c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801734e:	9305      	str	r3, [sp, #20]
 8017350:	eba3 0309 	sub.w	r3, r3, r9
 8017354:	455b      	cmp	r3, fp
 8017356:	dc33      	bgt.n	80173c0 <_printf_float+0x384>
 8017358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801735c:	429a      	cmp	r2, r3
 801735e:	db3b      	blt.n	80173d8 <_printf_float+0x39c>
 8017360:	6823      	ldr	r3, [r4, #0]
 8017362:	07da      	lsls	r2, r3, #31
 8017364:	d438      	bmi.n	80173d8 <_printf_float+0x39c>
 8017366:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017368:	9b05      	ldr	r3, [sp, #20]
 801736a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801736c:	1ad3      	subs	r3, r2, r3
 801736e:	eba2 0901 	sub.w	r9, r2, r1
 8017372:	4599      	cmp	r9, r3
 8017374:	bfa8      	it	ge
 8017376:	4699      	movge	r9, r3
 8017378:	f1b9 0f00 	cmp.w	r9, #0
 801737c:	dc35      	bgt.n	80173ea <_printf_float+0x3ae>
 801737e:	f04f 0800 	mov.w	r8, #0
 8017382:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017386:	f104 0a1a 	add.w	sl, r4, #26
 801738a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801738e:	1a9b      	subs	r3, r3, r2
 8017390:	eba3 0309 	sub.w	r3, r3, r9
 8017394:	4543      	cmp	r3, r8
 8017396:	f77f af79 	ble.w	801728c <_printf_float+0x250>
 801739a:	2301      	movs	r3, #1
 801739c:	4652      	mov	r2, sl
 801739e:	4631      	mov	r1, r6
 80173a0:	4628      	mov	r0, r5
 80173a2:	47b8      	blx	r7
 80173a4:	3001      	adds	r0, #1
 80173a6:	f43f aeaa 	beq.w	80170fe <_printf_float+0xc2>
 80173aa:	f108 0801 	add.w	r8, r8, #1
 80173ae:	e7ec      	b.n	801738a <_printf_float+0x34e>
 80173b0:	4613      	mov	r3, r2
 80173b2:	4631      	mov	r1, r6
 80173b4:	4642      	mov	r2, r8
 80173b6:	4628      	mov	r0, r5
 80173b8:	47b8      	blx	r7
 80173ba:	3001      	adds	r0, #1
 80173bc:	d1c0      	bne.n	8017340 <_printf_float+0x304>
 80173be:	e69e      	b.n	80170fe <_printf_float+0xc2>
 80173c0:	2301      	movs	r3, #1
 80173c2:	4631      	mov	r1, r6
 80173c4:	4628      	mov	r0, r5
 80173c6:	9205      	str	r2, [sp, #20]
 80173c8:	47b8      	blx	r7
 80173ca:	3001      	adds	r0, #1
 80173cc:	f43f ae97 	beq.w	80170fe <_printf_float+0xc2>
 80173d0:	9a05      	ldr	r2, [sp, #20]
 80173d2:	f10b 0b01 	add.w	fp, fp, #1
 80173d6:	e7b9      	b.n	801734c <_printf_float+0x310>
 80173d8:	ee18 3a10 	vmov	r3, s16
 80173dc:	4652      	mov	r2, sl
 80173de:	4631      	mov	r1, r6
 80173e0:	4628      	mov	r0, r5
 80173e2:	47b8      	blx	r7
 80173e4:	3001      	adds	r0, #1
 80173e6:	d1be      	bne.n	8017366 <_printf_float+0x32a>
 80173e8:	e689      	b.n	80170fe <_printf_float+0xc2>
 80173ea:	9a05      	ldr	r2, [sp, #20]
 80173ec:	464b      	mov	r3, r9
 80173ee:	4442      	add	r2, r8
 80173f0:	4631      	mov	r1, r6
 80173f2:	4628      	mov	r0, r5
 80173f4:	47b8      	blx	r7
 80173f6:	3001      	adds	r0, #1
 80173f8:	d1c1      	bne.n	801737e <_printf_float+0x342>
 80173fa:	e680      	b.n	80170fe <_printf_float+0xc2>
 80173fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80173fe:	2a01      	cmp	r2, #1
 8017400:	dc01      	bgt.n	8017406 <_printf_float+0x3ca>
 8017402:	07db      	lsls	r3, r3, #31
 8017404:	d538      	bpl.n	8017478 <_printf_float+0x43c>
 8017406:	2301      	movs	r3, #1
 8017408:	4642      	mov	r2, r8
 801740a:	4631      	mov	r1, r6
 801740c:	4628      	mov	r0, r5
 801740e:	47b8      	blx	r7
 8017410:	3001      	adds	r0, #1
 8017412:	f43f ae74 	beq.w	80170fe <_printf_float+0xc2>
 8017416:	ee18 3a10 	vmov	r3, s16
 801741a:	4652      	mov	r2, sl
 801741c:	4631      	mov	r1, r6
 801741e:	4628      	mov	r0, r5
 8017420:	47b8      	blx	r7
 8017422:	3001      	adds	r0, #1
 8017424:	f43f ae6b 	beq.w	80170fe <_printf_float+0xc2>
 8017428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801742c:	2200      	movs	r2, #0
 801742e:	2300      	movs	r3, #0
 8017430:	f7e9 fb0a 	bl	8000a48 <__aeabi_dcmpeq>
 8017434:	b9d8      	cbnz	r0, 801746e <_printf_float+0x432>
 8017436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017438:	f108 0201 	add.w	r2, r8, #1
 801743c:	3b01      	subs	r3, #1
 801743e:	4631      	mov	r1, r6
 8017440:	4628      	mov	r0, r5
 8017442:	47b8      	blx	r7
 8017444:	3001      	adds	r0, #1
 8017446:	d10e      	bne.n	8017466 <_printf_float+0x42a>
 8017448:	e659      	b.n	80170fe <_printf_float+0xc2>
 801744a:	2301      	movs	r3, #1
 801744c:	4652      	mov	r2, sl
 801744e:	4631      	mov	r1, r6
 8017450:	4628      	mov	r0, r5
 8017452:	47b8      	blx	r7
 8017454:	3001      	adds	r0, #1
 8017456:	f43f ae52 	beq.w	80170fe <_printf_float+0xc2>
 801745a:	f108 0801 	add.w	r8, r8, #1
 801745e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017460:	3b01      	subs	r3, #1
 8017462:	4543      	cmp	r3, r8
 8017464:	dcf1      	bgt.n	801744a <_printf_float+0x40e>
 8017466:	464b      	mov	r3, r9
 8017468:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801746c:	e6dc      	b.n	8017228 <_printf_float+0x1ec>
 801746e:	f04f 0800 	mov.w	r8, #0
 8017472:	f104 0a1a 	add.w	sl, r4, #26
 8017476:	e7f2      	b.n	801745e <_printf_float+0x422>
 8017478:	2301      	movs	r3, #1
 801747a:	4642      	mov	r2, r8
 801747c:	e7df      	b.n	801743e <_printf_float+0x402>
 801747e:	2301      	movs	r3, #1
 8017480:	464a      	mov	r2, r9
 8017482:	4631      	mov	r1, r6
 8017484:	4628      	mov	r0, r5
 8017486:	47b8      	blx	r7
 8017488:	3001      	adds	r0, #1
 801748a:	f43f ae38 	beq.w	80170fe <_printf_float+0xc2>
 801748e:	f108 0801 	add.w	r8, r8, #1
 8017492:	68e3      	ldr	r3, [r4, #12]
 8017494:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017496:	1a5b      	subs	r3, r3, r1
 8017498:	4543      	cmp	r3, r8
 801749a:	dcf0      	bgt.n	801747e <_printf_float+0x442>
 801749c:	e6fa      	b.n	8017294 <_printf_float+0x258>
 801749e:	f04f 0800 	mov.w	r8, #0
 80174a2:	f104 0919 	add.w	r9, r4, #25
 80174a6:	e7f4      	b.n	8017492 <_printf_float+0x456>

080174a8 <_sbrk_r>:
 80174a8:	b538      	push	{r3, r4, r5, lr}
 80174aa:	4d06      	ldr	r5, [pc, #24]	; (80174c4 <_sbrk_r+0x1c>)
 80174ac:	2300      	movs	r3, #0
 80174ae:	4604      	mov	r4, r0
 80174b0:	4608      	mov	r0, r1
 80174b2:	602b      	str	r3, [r5, #0]
 80174b4:	f7f0 f982 	bl	80077bc <_sbrk>
 80174b8:	1c43      	adds	r3, r0, #1
 80174ba:	d102      	bne.n	80174c2 <_sbrk_r+0x1a>
 80174bc:	682b      	ldr	r3, [r5, #0]
 80174be:	b103      	cbz	r3, 80174c2 <_sbrk_r+0x1a>
 80174c0:	6023      	str	r3, [r4, #0]
 80174c2:	bd38      	pop	{r3, r4, r5, pc}
 80174c4:	20003c7c 	.word	0x20003c7c

080174c8 <_strtol_l.isra.0>:
 80174c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80174cc:	4e3a      	ldr	r6, [pc, #232]	; (80175b8 <_strtol_l.isra.0+0xf0>)
 80174ce:	4686      	mov	lr, r0
 80174d0:	468c      	mov	ip, r1
 80174d2:	4660      	mov	r0, ip
 80174d4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80174d8:	5da5      	ldrb	r5, [r4, r6]
 80174da:	f015 0508 	ands.w	r5, r5, #8
 80174de:	d1f8      	bne.n	80174d2 <_strtol_l.isra.0+0xa>
 80174e0:	2c2d      	cmp	r4, #45	; 0x2d
 80174e2:	d133      	bne.n	801754c <_strtol_l.isra.0+0x84>
 80174e4:	f89c 4000 	ldrb.w	r4, [ip]
 80174e8:	f04f 0801 	mov.w	r8, #1
 80174ec:	f100 0c02 	add.w	ip, r0, #2
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d05c      	beq.n	80175ae <_strtol_l.isra.0+0xe6>
 80174f4:	2b10      	cmp	r3, #16
 80174f6:	d10c      	bne.n	8017512 <_strtol_l.isra.0+0x4a>
 80174f8:	2c30      	cmp	r4, #48	; 0x30
 80174fa:	d10a      	bne.n	8017512 <_strtol_l.isra.0+0x4a>
 80174fc:	f89c 0000 	ldrb.w	r0, [ip]
 8017500:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017504:	2858      	cmp	r0, #88	; 0x58
 8017506:	d14d      	bne.n	80175a4 <_strtol_l.isra.0+0xdc>
 8017508:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801750c:	2310      	movs	r3, #16
 801750e:	f10c 0c02 	add.w	ip, ip, #2
 8017512:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8017516:	3f01      	subs	r7, #1
 8017518:	2600      	movs	r6, #0
 801751a:	fbb7 f9f3 	udiv	r9, r7, r3
 801751e:	4630      	mov	r0, r6
 8017520:	fb03 7a19 	mls	sl, r3, r9, r7
 8017524:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 8017528:	2d09      	cmp	r5, #9
 801752a:	d818      	bhi.n	801755e <_strtol_l.isra.0+0x96>
 801752c:	462c      	mov	r4, r5
 801752e:	42a3      	cmp	r3, r4
 8017530:	dd24      	ble.n	801757c <_strtol_l.isra.0+0xb4>
 8017532:	1c75      	adds	r5, r6, #1
 8017534:	d007      	beq.n	8017546 <_strtol_l.isra.0+0x7e>
 8017536:	4581      	cmp	r9, r0
 8017538:	d31d      	bcc.n	8017576 <_strtol_l.isra.0+0xae>
 801753a:	d101      	bne.n	8017540 <_strtol_l.isra.0+0x78>
 801753c:	45a2      	cmp	sl, r4
 801753e:	db1a      	blt.n	8017576 <_strtol_l.isra.0+0xae>
 8017540:	fb00 4003 	mla	r0, r0, r3, r4
 8017544:	2601      	movs	r6, #1
 8017546:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801754a:	e7eb      	b.n	8017524 <_strtol_l.isra.0+0x5c>
 801754c:	2c2b      	cmp	r4, #43	; 0x2b
 801754e:	bf08      	it	eq
 8017550:	f89c 4000 	ldrbeq.w	r4, [ip]
 8017554:	46a8      	mov	r8, r5
 8017556:	bf08      	it	eq
 8017558:	f100 0c02 	addeq.w	ip, r0, #2
 801755c:	e7c8      	b.n	80174f0 <_strtol_l.isra.0+0x28>
 801755e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 8017562:	2d19      	cmp	r5, #25
 8017564:	d801      	bhi.n	801756a <_strtol_l.isra.0+0xa2>
 8017566:	3c37      	subs	r4, #55	; 0x37
 8017568:	e7e1      	b.n	801752e <_strtol_l.isra.0+0x66>
 801756a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 801756e:	2d19      	cmp	r5, #25
 8017570:	d804      	bhi.n	801757c <_strtol_l.isra.0+0xb4>
 8017572:	3c57      	subs	r4, #87	; 0x57
 8017574:	e7db      	b.n	801752e <_strtol_l.isra.0+0x66>
 8017576:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801757a:	e7e4      	b.n	8017546 <_strtol_l.isra.0+0x7e>
 801757c:	1c73      	adds	r3, r6, #1
 801757e:	d106      	bne.n	801758e <_strtol_l.isra.0+0xc6>
 8017580:	2322      	movs	r3, #34	; 0x22
 8017582:	f8ce 3000 	str.w	r3, [lr]
 8017586:	4638      	mov	r0, r7
 8017588:	b942      	cbnz	r2, 801759c <_strtol_l.isra.0+0xd4>
 801758a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801758e:	f1b8 0f00 	cmp.w	r8, #0
 8017592:	d000      	beq.n	8017596 <_strtol_l.isra.0+0xce>
 8017594:	4240      	negs	r0, r0
 8017596:	2a00      	cmp	r2, #0
 8017598:	d0f7      	beq.n	801758a <_strtol_l.isra.0+0xc2>
 801759a:	b10e      	cbz	r6, 80175a0 <_strtol_l.isra.0+0xd8>
 801759c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80175a0:	6011      	str	r1, [r2, #0]
 80175a2:	e7f2      	b.n	801758a <_strtol_l.isra.0+0xc2>
 80175a4:	2430      	movs	r4, #48	; 0x30
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d1b3      	bne.n	8017512 <_strtol_l.isra.0+0x4a>
 80175aa:	2308      	movs	r3, #8
 80175ac:	e7b1      	b.n	8017512 <_strtol_l.isra.0+0x4a>
 80175ae:	2c30      	cmp	r4, #48	; 0x30
 80175b0:	d0a4      	beq.n	80174fc <_strtol_l.isra.0+0x34>
 80175b2:	230a      	movs	r3, #10
 80175b4:	e7ad      	b.n	8017512 <_strtol_l.isra.0+0x4a>
 80175b6:	bf00      	nop
 80175b8:	0801eca9 	.word	0x0801eca9

080175bc <strtol>:
 80175bc:	4613      	mov	r3, r2
 80175be:	460a      	mov	r2, r1
 80175c0:	4601      	mov	r1, r0
 80175c2:	4802      	ldr	r0, [pc, #8]	; (80175cc <strtol+0x10>)
 80175c4:	6800      	ldr	r0, [r0, #0]
 80175c6:	f7ff bf7f 	b.w	80174c8 <_strtol_l.isra.0>
 80175ca:	bf00      	nop
 80175cc:	20000e4c 	.word	0x20000e4c

080175d0 <_localeconv_r>:
 80175d0:	4800      	ldr	r0, [pc, #0]	; (80175d4 <_localeconv_r+0x4>)
 80175d2:	4770      	bx	lr
 80175d4:	20000fa0 	.word	0x20000fa0

080175d8 <__malloc_lock>:
 80175d8:	4801      	ldr	r0, [pc, #4]	; (80175e0 <__malloc_lock+0x8>)
 80175da:	f000 bfb6 	b.w	801854a <__retarget_lock_acquire_recursive>
 80175de:	bf00      	nop
 80175e0:	20001080 	.word	0x20001080

080175e4 <__malloc_unlock>:
 80175e4:	4801      	ldr	r0, [pc, #4]	; (80175ec <__malloc_unlock+0x8>)
 80175e6:	f000 bfb8 	b.w	801855a <__retarget_lock_release_recursive>
 80175ea:	bf00      	nop
 80175ec:	20001080 	.word	0x20001080

080175f0 <__pow5mult>:
 80175f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80175f4:	4615      	mov	r5, r2
 80175f6:	f012 0203 	ands.w	r2, r2, #3
 80175fa:	4606      	mov	r6, r0
 80175fc:	460f      	mov	r7, r1
 80175fe:	d007      	beq.n	8017610 <__pow5mult+0x20>
 8017600:	4c21      	ldr	r4, [pc, #132]	; (8017688 <__pow5mult+0x98>)
 8017602:	3a01      	subs	r2, #1
 8017604:	2300      	movs	r3, #0
 8017606:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801760a:	f005 fb71 	bl	801ccf0 <__multadd>
 801760e:	4607      	mov	r7, r0
 8017610:	10ad      	asrs	r5, r5, #2
 8017612:	d035      	beq.n	8017680 <__pow5mult+0x90>
 8017614:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017616:	b93c      	cbnz	r4, 8017628 <__pow5mult+0x38>
 8017618:	2010      	movs	r0, #16
 801761a:	f7ff fcad 	bl	8016f78 <malloc>
 801761e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017622:	6270      	str	r0, [r6, #36]	; 0x24
 8017624:	6004      	str	r4, [r0, #0]
 8017626:	60c4      	str	r4, [r0, #12]
 8017628:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801762c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017630:	b94c      	cbnz	r4, 8017646 <__pow5mult+0x56>
 8017632:	f240 2171 	movw	r1, #625	; 0x271
 8017636:	4630      	mov	r0, r6
 8017638:	f005 fbe8 	bl	801ce0c <__i2b>
 801763c:	2300      	movs	r3, #0
 801763e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017642:	4604      	mov	r4, r0
 8017644:	6003      	str	r3, [r0, #0]
 8017646:	f04f 0900 	mov.w	r9, #0
 801764a:	07eb      	lsls	r3, r5, #31
 801764c:	d50a      	bpl.n	8017664 <__pow5mult+0x74>
 801764e:	4639      	mov	r1, r7
 8017650:	4622      	mov	r2, r4
 8017652:	4630      	mov	r0, r6
 8017654:	f005 fbe3 	bl	801ce1e <__multiply>
 8017658:	4639      	mov	r1, r7
 801765a:	4680      	mov	r8, r0
 801765c:	4630      	mov	r0, r6
 801765e:	f005 fb30 	bl	801ccc2 <_Bfree>
 8017662:	4647      	mov	r7, r8
 8017664:	106d      	asrs	r5, r5, #1
 8017666:	d00b      	beq.n	8017680 <__pow5mult+0x90>
 8017668:	6820      	ldr	r0, [r4, #0]
 801766a:	b938      	cbnz	r0, 801767c <__pow5mult+0x8c>
 801766c:	4622      	mov	r2, r4
 801766e:	4621      	mov	r1, r4
 8017670:	4630      	mov	r0, r6
 8017672:	f005 fbd4 	bl	801ce1e <__multiply>
 8017676:	6020      	str	r0, [r4, #0]
 8017678:	f8c0 9000 	str.w	r9, [r0]
 801767c:	4604      	mov	r4, r0
 801767e:	e7e4      	b.n	801764a <__pow5mult+0x5a>
 8017680:	4638      	mov	r0, r7
 8017682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017686:	bf00      	nop
 8017688:	0801ec9c 	.word	0x0801ec9c

0801768c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
 801768c:	4770      	bx	lr

0801768e <z_log_msg2_runtime_create>:
{
 801768e:	b510      	push	{r4, lr}
 8017690:	b086      	sub	sp, #24
	va_start(ap, fmt);
 8017692:	ac0a      	add	r4, sp, #40	; 0x28
 8017694:	9405      	str	r4, [sp, #20]
		arch_syscall_invoke6(*(uintptr_t *)&domain_id, *(uintptr_t *)&source, *(uintptr_t *)&level, *(uintptr_t *)&data, *(uintptr_t *)&dlen, (uintptr_t) &more, K_SYSCALL_Z_LOG_MSG2_RUNTIME_VCREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
 8017696:	9402      	str	r4, [sp, #8]
 8017698:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801769a:	9401      	str	r4, [sp, #4]
 801769c:	9c08      	ldr	r4, [sp, #32]
 801769e:	9400      	str	r4, [sp, #0]
 80176a0:	f000 fb70 	bl	8017d84 <z_impl_z_log_msg2_runtime_vcreate>
}
 80176a4:	b006      	add	sp, #24
 80176a6:	bd10      	pop	{r4, pc}

080176a8 <start_gptp_sample_app>:

void start_gptp_sample_app (void)
{
 80176a8:	b508      	push	{r3, lr}
	init_app();
 80176aa:	f7ec fa99 	bl	8003be0 <init_app>

	init_testing();
 80176ae:	f7ec fad3 	bl	8003c58 <init_testing>
}
 80176b2:	bd08      	pop	{r3, pc}

080176b4 <cbprintf_via_va_list>:
{
 80176b4:	b510      	push	{r4, lr}
 80176b6:	460c      	mov	r4, r1
 80176b8:	4611      	mov	r1, r2
 80176ba:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
 80176bc:	9b02      	ldr	r3, [sp, #8]
 80176be:	47a0      	blx	r4
}
 80176c0:	bd10      	pop	{r4, pc}

080176c2 <cbpprintf_external>:
{
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, s_idx;

	if (buf == NULL) {
 80176c2:	b343      	cbz	r3, 8017716 <cbpprintf_external+0x54>
{
 80176c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176c8:	b082      	sub	sp, #8
 80176ca:	4607      	mov	r7, r0
 80176cc:	4688      	mov	r8, r1
 80176ce:	4691      	mov	r9, r2
 80176d0:	461d      	mov	r5, r3
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
 80176d2:	781b      	ldrb	r3, [r3, #0]
	s_nbr     = buf[1];
 80176d4:	786e      	ldrb	r6, [r5, #1]
	ros_nbr   = buf[2];
 80176d6:	78ac      	ldrb	r4, [r5, #2]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr);
 80176d8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80176dc:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
 80176de:	f04f 0a00 	mov.w	sl, #0
 80176e2:	45b2      	cmp	sl, r6
 80176e4:	d20b      	bcs.n	80176fe <cbpprintf_external+0x3c>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
 80176e6:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
 80176ea:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
 80176ee:	4620      	mov	r0, r4
 80176f0:	f7e9 fbec 	bl	8000ecc <strlen>
 80176f4:	3001      	adds	r0, #1
 80176f6:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
 80176f8:	f10a 0a01 	add.w	sl, sl, #1
 80176fc:	e7f1      	b.n	80176e2 <cbpprintf_external+0x20>

	/* Retrieve format string */
	fmt = ((char **)buf)[1];

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
 80176fe:	f105 0308 	add.w	r3, r5, #8

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
 8017702:	9300      	str	r3, [sp, #0]
 8017704:	686b      	ldr	r3, [r5, #4]
 8017706:	464a      	mov	r2, r9
 8017708:	4641      	mov	r1, r8
 801770a:	4638      	mov	r0, r7
 801770c:	f7ff ffd2 	bl	80176b4 <cbprintf_via_va_list>
}
 8017710:	b002      	add	sp, #8
 8017712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
 8017716:	f06f 0015 	mvn.w	r0, #21
}
 801771a:	4770      	bx	lr

0801771c <arch_printk_char_out>:
}
 801771c:	2000      	movs	r0, #0
 801771e:	4770      	bx	lr

08017720 <str_out>:
{
 8017720:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
 8017722:	680c      	ldr	r4, [r1, #0]
 8017724:	b154      	cbz	r4, 801773c <str_out+0x1c>
 8017726:	688a      	ldr	r2, [r1, #8]
 8017728:	684b      	ldr	r3, [r1, #4]
 801772a:	429a      	cmp	r2, r3
 801772c:	da06      	bge.n	801773c <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
 801772e:	3b01      	subs	r3, #1
 8017730:	429a      	cmp	r2, r3
 8017732:	d009      	beq.n	8017748 <str_out+0x28>
		ctx->str[ctx->count++] = c;
 8017734:	1c53      	adds	r3, r2, #1
 8017736:	608b      	str	r3, [r1, #8]
 8017738:	54a0      	strb	r0, [r4, r2]
 801773a:	e002      	b.n	8017742 <str_out+0x22>
		ctx->count++;
 801773c:	688b      	ldr	r3, [r1, #8]
 801773e:	3301      	adds	r3, #1
 8017740:	608b      	str	r3, [r1, #8]
}
 8017742:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017746:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
 8017748:	1c53      	adds	r3, r2, #1
 801774a:	608b      	str	r3, [r1, #8]
 801774c:	2300      	movs	r3, #0
 801774e:	54a3      	strb	r3, [r4, r2]
 8017750:	e7f7      	b.n	8017742 <str_out+0x22>

08017752 <vprintk>:
{
 8017752:	b508      	push	{r3, lr}
		z_log_vprintk(fmt, ap);
 8017754:	f000 fa7e 	bl	8017c54 <z_log_vprintk>
}
 8017758:	bd08      	pop	{r3, pc}

0801775a <printk>:
{
 801775a:	b40f      	push	{r0, r1, r2, r3}
 801775c:	b500      	push	{lr}
 801775e:	b083      	sub	sp, #12
 8017760:	a904      	add	r1, sp, #16
 8017762:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8017766:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
 8017768:	f7ff fff3 	bl	8017752 <vprintk>
}
 801776c:	b003      	add	sp, #12
 801776e:	f85d eb04 	ldr.w	lr, [sp], #4
 8017772:	b004      	add	sp, #16
 8017774:	4770      	bx	lr

08017776 <snprintk>:
{
 8017776:	b40c      	push	{r2, r3}
 8017778:	b500      	push	{lr}
 801777a:	b083      	sub	sp, #12
 801777c:	ab04      	add	r3, sp, #16
 801777e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
 8017782:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
 8017784:	f7ec fd28 	bl	80041d8 <vsnprintk>
}
 8017788:	b003      	add	sp, #12
 801778a:	f85d eb04 	ldr.w	lr, [sp], #4
 801778e:	b002      	add	sp, #8
 8017790:	4770      	bx	lr

08017792 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8017792:	b508      	push	{r3, lr}
 8017794:	4604      	mov	r4, r0
 8017796:	4608      	mov	r0, r1
 8017798:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
 801779a:	461a      	mov	r2, r3
 801779c:	47a0      	blx	r4
	return z_impl_z_current_get();
 801779e:	f7fe ff59 	bl	8016654 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
 80177a2:	f7ef fec3 	bl	800752c <z_impl_k_thread_abort>

080177a6 <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
 80177a6:	00c9      	lsls	r1, r1, #3
 80177a8:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
 80177aa:	4408      	add	r0, r1
 80177ac:	4770      	bx	lr

080177ae <free_list_remove_bidx>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
 80177ae:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 80177b2:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
 80177b4:	4299      	cmp	r1, r3
 80177b6:	d00f      	beq.n	80177d8 <free_list_remove_bidx+0x2a>
{
 80177b8:	b410      	push	{r4}
 80177ba:	00cc      	lsls	r4, r1, #3
 80177bc:	4404      	add	r4, r0
 80177be:	88a1      	ldrh	r1, [r4, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
 80177c0:	3204      	adds	r2, #4
 80177c2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 80177c6:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 80177c8:	3206      	adds	r2, #6
 80177ca:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
 80177cc:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
 80177ce:	3304      	adds	r3, #4
 80177d0:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
 80177d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80177d6:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
 80177d8:	2301      	movs	r3, #1
 80177da:	fa03 f102 	lsl.w	r1, r3, r2
 80177de:	68c3      	ldr	r3, [r0, #12]
 80177e0:	ea23 0301 	bic.w	r3, r3, r1
 80177e4:	60c3      	str	r3, [r0, #12]
		b->next = 0;
 80177e6:	3204      	adds	r2, #4
 80177e8:	2300      	movs	r3, #0
 80177ea:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80177ee:	4770      	bx	lr

080177f0 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
 80177f0:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
 80177f2:	1d13      	adds	r3, r2, #4
 80177f4:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80177f8:	b984      	cbnz	r4, 801781c <free_list_add_bidx+0x2c>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
 80177fa:	2301      	movs	r3, #1
 80177fc:	fa03 f402 	lsl.w	r4, r3, r2
 8017800:	68c3      	ldr	r3, [r0, #12]
 8017802:	4323      	orrs	r3, r4
 8017804:	60c3      	str	r3, [r0, #12]
		b->next = c;
 8017806:	3204      	adds	r2, #4
 8017808:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
 801780c:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
 801780e:	1d1a      	adds	r2, r3, #4
 8017810:	b289      	uxth	r1, r1
 8017812:	5281      	strh	r1, [r0, r2]
 8017814:	3306      	adds	r3, #6
 8017816:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
 8017818:	bc70      	pop	{r4, r5, r6}
 801781a:	4770      	bx	lr
	void *cmem = &buf[c];
 801781c:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
 801781e:	3204      	adds	r2, #4
 8017820:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
 8017822:	00cd      	lsls	r5, r1, #3
		((uint16_t *)cmem)[f] = val;
 8017824:	1d2e      	adds	r6, r5, #4
 8017826:	5383      	strh	r3, [r0, r6]
 8017828:	3506      	adds	r5, #6
 801782a:	5344      	strh	r4, [r0, r5]
	void *cmem = &buf[c];
 801782c:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
 801782e:	3306      	adds	r3, #6
 8017830:	b289      	uxth	r1, r1
 8017832:	52c1      	strh	r1, [r0, r3]
 8017834:	5281      	strh	r1, [r0, r2]
 8017836:	e7ef      	b.n	8017818 <free_list_add_bidx+0x28>

08017838 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
 8017838:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
 801783a:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
 801783c:	3302      	adds	r3, #2
 801783e:	5ac4      	ldrh	r4, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
 8017840:	1a55      	subs	r5, r2, r1
	chunksz_t rsz = sz0 - lsz;
 8017842:	1a89      	subs	r1, r1, r2
 8017844:	eb01 0154 	add.w	r1, r1, r4, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8017848:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
 801784a:	52c4      	strh	r4, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 801784c:	004b      	lsls	r3, r1, #1
	void *cmem = &buf[c];
 801784e:	00d4      	lsls	r4, r2, #3
		((uint16_t *)cmem)[f] = val;
 8017850:	3402      	adds	r4, #2
 8017852:	5303      	strh	r3, [r0, r4]
 8017854:	f820 5032 	strh.w	r5, [r0, r2, lsl #3]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8017858:	f3c3 034e 	ubfx	r3, r3, #1, #15
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
 801785c:	441a      	add	r2, r3
		((uint16_t *)cmem)[f] = val;
 801785e:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
 8017862:	bc30      	pop	{r4, r5}
 8017864:	4770      	bx	lr

08017866 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
 8017866:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
 8017868:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
 801786a:	3102      	adds	r1, #2
 801786c:	5a45      	ldrh	r5, [r0, r1]
	void *cmem = &buf[c];
 801786e:	00d4      	lsls	r4, r2, #3
		return ((uint16_t *)cmem)[f];
 8017870:	3402      	adds	r4, #2
 8017872:	5b03      	ldrh	r3, [r0, r4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8017874:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
 8017876:	eb03 0355 	add.w	r3, r3, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 801787a:	005d      	lsls	r5, r3, #1
		((uint16_t *)cmem)[f] = val;
 801787c:	5245      	strh	r5, [r0, r1]
		return ((uint16_t *)cmem)[f];
 801787e:	5b01      	ldrh	r1, [r0, r4]
	return c + chunk_size(h, c);
 8017880:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
 8017884:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
 8017888:	bc30      	pop	{r4, r5}
 801788a:	4770      	bx	lr

0801788c <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
 801788c:	3904      	subs	r1, #4
 801788e:	1a08      	subs	r0, r1, r0
}
 8017890:	08c0      	lsrs	r0, r0, #3
 8017892:	4770      	bx	lr

08017894 <free_list_remove>:
{
 8017894:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
 8017896:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 801789a:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 801789c:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
 801789e:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
 80178a2:	f1c2 021f 	rsb	r2, r2, #31
 80178a6:	f7ff ff82 	bl	80177ae <free_list_remove_bidx>
}
 80178aa:	bd08      	pop	{r3, pc}

080178ac <free_list_add>:
{
 80178ac:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
 80178ae:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 80178b2:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 80178b4:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
 80178b6:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
 80178ba:	f1c2 021f 	rsb	r2, r2, #31
 80178be:	f7ff ff97 	bl	80177f0 <free_list_add_bidx>
}
 80178c2:	bd08      	pop	{r3, pc}

080178c4 <free_chunk>:
{
 80178c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178c6:	4604      	mov	r4, r0
 80178c8:	460d      	mov	r5, r1
	void *cmem = &buf[c];
 80178ca:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
 80178cc:	1cb7      	adds	r7, r6, #2
 80178ce:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
 80178d0:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
 80178d4:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 80178d8:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
 80178da:	f013 0f01 	tst.w	r3, #1
 80178de:	d00c      	beq.n	80178fa <free_chunk+0x36>
 80178e0:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
 80178e2:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
 80178e4:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80178e8:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
 80178ea:	f013 0f01 	tst.w	r3, #1
 80178ee:	d00e      	beq.n	801790e <free_chunk+0x4a>
	free_list_add(h, c);
 80178f0:	4629      	mov	r1, r5
 80178f2:	4620      	mov	r0, r4
 80178f4:	f7ff ffda 	bl	80178ac <free_list_add>
}
 80178f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
 80178fa:	f7ff ffcb 	bl	8017894 <free_list_remove>
 80178fe:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
 8017900:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 8017904:	4629      	mov	r1, r5
 8017906:	4620      	mov	r0, r4
 8017908:	f7ff ffad 	bl	8017866 <merge_chunks>
 801790c:	e7e8      	b.n	80178e0 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
 801790e:	4620      	mov	r0, r4
 8017910:	f7ff ffc0 	bl	8017894 <free_list_remove>
 8017914:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
 8017916:	462a      	mov	r2, r5
 8017918:	1a69      	subs	r1, r5, r1
 801791a:	4620      	mov	r0, r4
 801791c:	f7ff ffa3 	bl	8017866 <merge_chunks>
 8017920:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
 8017922:	1aed      	subs	r5, r5, r3
 8017924:	e7e4      	b.n	80178f0 <free_chunk+0x2c>

08017926 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
 8017926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return 31 - __builtin_clz(usable_sz);
 8017928:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
 801792c:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
 8017930:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8017934:	b1b7      	cbz	r7, 8017964 <alloc_chunk+0x3e>
 8017936:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
 801793a:	2603      	movs	r6, #3
		do {
			chunkid_t c = b->next;
 801793c:	1d14      	adds	r4, r2, #4
 801793e:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
 8017942:	00e5      	lsls	r5, r4, #3
		return ((uint16_t *)cmem)[f];
 8017944:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 8017948:	f8bc c002 	ldrh.w	ip, [ip, #2]
			if (chunk_size(h, c) >= sz) {
 801794c:	ebb1 0f5c 	cmp.w	r1, ip, lsr #1
 8017950:	d912      	bls.n	8017978 <alloc_chunk+0x52>
 8017952:	4405      	add	r5, r0
 8017954:	88ec      	ldrh	r4, [r5, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
 8017956:	1d15      	adds	r5, r2, #4
 8017958:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
 801795c:	3e01      	subs	r6, #1
 801795e:	d001      	beq.n	8017964 <alloc_chunk+0x3e>
 8017960:	42a7      	cmp	r7, r4
 8017962:	d1eb      	bne.n	801793c <alloc_chunk+0x16>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
 8017964:	68c4      	ldr	r4, [r0, #12]
 8017966:	f1c3 0220 	rsb	r2, r3, #32
 801796a:	2301      	movs	r3, #1
 801796c:	4093      	lsls	r3, r2
 801796e:	425b      	negs	r3, r3

	if (bmask != 0U) {
 8017970:	401c      	ands	r4, r3
 8017972:	d105      	bne.n	8017980 <alloc_chunk+0x5a>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
 8017974:	4620      	mov	r0, r4
 8017976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				free_list_remove_bidx(h, c, bi);
 8017978:	4621      	mov	r1, r4
 801797a:	f7ff ff18 	bl	80177ae <free_list_remove_bidx>
				return c;
 801797e:	e7f9      	b.n	8017974 <alloc_chunk+0x4e>
		int minbucket = __builtin_ctz(bmask);
 8017980:	fa94 f2a4 	rbit	r2, r4
 8017984:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
 8017988:	1d13      	adds	r3, r2, #4
 801798a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
 801798e:	4621      	mov	r1, r4
 8017990:	f7ff ff0d 	bl	80177ae <free_list_remove_bidx>
		return c;
 8017994:	e7ee      	b.n	8017974 <alloc_chunk+0x4e>

08017996 <sys_heap_free>:
	if (mem == NULL) {
 8017996:	b179      	cbz	r1, 80179b8 <sys_heap_free+0x22>
{
 8017998:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
 801799a:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
 801799c:	4620      	mov	r0, r4
 801799e:	f7ff ff75 	bl	801788c <mem_to_chunkid>
 80179a2:	4601      	mov	r1, r0
	void *cmem = &buf[c];
 80179a4:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
 80179a8:	8853      	ldrh	r3, [r2, #2]
 80179aa:	f023 0301 	bic.w	r3, r3, #1
 80179ae:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
 80179b0:	4620      	mov	r0, r4
 80179b2:	f7ff ff87 	bl	80178c4 <free_chunk>
}
 80179b6:	bd10      	pop	{r4, pc}
 80179b8:	4770      	bx	lr

080179ba <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
 80179ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
 80179bc:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
 80179be:	b341      	cbz	r1, 8017a12 <sys_heap_alloc+0x58>
 80179c0:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
 80179c2:	68aa      	ldr	r2, [r5, #8]
 80179c4:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
 80179c8:	d925      	bls.n	8017a16 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 80179ca:	330b      	adds	r3, #11
 80179cc:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
 80179ce:	4621      	mov	r1, r4
 80179d0:	4628      	mov	r0, r5
 80179d2:	f7ff ffa8 	bl	8017926 <alloc_chunk>
	if (c == 0U) {
 80179d6:	4607      	mov	r7, r0
 80179d8:	b1f8      	cbz	r0, 8017a1a <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
 80179da:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
 80179dc:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
 80179e0:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
 80179e2:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
 80179e6:	d309      	bcc.n	80179fc <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
 80179e8:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 80179ea:	885a      	ldrh	r2, [r3, #2]
 80179ec:	f042 0201 	orr.w	r2, r2, #1
 80179f0:	805a      	strh	r2, [r3, #2]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
 80179f2:	4639      	mov	r1, r7
 80179f4:	4628      	mov	r0, r5
 80179f6:	f7ff fed6 	bl	80177a6 <chunk_mem>
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
 80179fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
 80179fc:	4404      	add	r4, r0
 80179fe:	4622      	mov	r2, r4
 8017a00:	4601      	mov	r1, r0
 8017a02:	4628      	mov	r0, r5
 8017a04:	f7ff ff18 	bl	8017838 <split_chunks>
		free_list_add(h, c + chunk_sz);
 8017a08:	4621      	mov	r1, r4
 8017a0a:	4628      	mov	r0, r5
 8017a0c:	f7ff ff4e 	bl	80178ac <free_list_add>
 8017a10:	e7ea      	b.n	80179e8 <sys_heap_alloc+0x2e>
		return NULL;
 8017a12:	2000      	movs	r0, #0
 8017a14:	e7f1      	b.n	80179fa <sys_heap_alloc+0x40>
 8017a16:	2000      	movs	r0, #0
 8017a18:	e7ef      	b.n	80179fa <sys_heap_alloc+0x40>
		return NULL;
 8017a1a:	2000      	movs	r0, #0
 8017a1c:	e7ed      	b.n	80179fa <sys_heap_alloc+0x40>

08017a1e <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
 8017a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a22:	460d      	mov	r5, r1
 8017a24:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
 8017a26:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
 8017a28:	424b      	negs	r3, r1
 8017a2a:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
 8017a2e:	ea31 0303 	bics.w	r3, r1, r3
 8017a32:	d03e      	beq.n	8017ab2 <sys_heap_aligned_alloc+0x94>
		align -= rew;
 8017a34:	eba1 0508 	sub.w	r5, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
 8017a38:	f1b8 0f03 	cmp.w	r8, #3
 8017a3c:	d844      	bhi.n	8017ac8 <sys_heap_aligned_alloc+0xaa>
 8017a3e:	4642      	mov	r2, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
 8017a40:	2c00      	cmp	r4, #0
 8017a42:	d057      	beq.n	8017af4 <sys_heap_aligned_alloc+0xd6>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
 8017a44:	68b3      	ldr	r3, [r6, #8]
 8017a46:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
 8017a4a:	d955      	bls.n	8017af8 <sys_heap_aligned_alloc+0xda>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
 8017a4c:	1929      	adds	r1, r5, r4
 8017a4e:	1a89      	subs	r1, r1, r2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8017a50:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
 8017a52:	08c9      	lsrs	r1, r1, #3
 8017a54:	4630      	mov	r0, r6
 8017a56:	f7ff ff66 	bl	8017926 <alloc_chunk>

	if (c0 == 0) {
 8017a5a:	4607      	mov	r7, r0
 8017a5c:	2800      	cmp	r0, #0
 8017a5e:	d04d      	beq.n	8017afc <sys_heap_aligned_alloc+0xde>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
 8017a60:	4601      	mov	r1, r0
 8017a62:	4630      	mov	r0, r6
 8017a64:	f7ff fe9f 	bl	80177a6 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
 8017a68:	4440      	add	r0, r8
 8017a6a:	4428      	add	r0, r5
 8017a6c:	3801      	subs	r0, #1
 8017a6e:	426d      	negs	r5, r5
 8017a70:	4005      	ands	r5, r0
 8017a72:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
 8017a76:	442c      	add	r4, r5
 8017a78:	3407      	adds	r4, #7
 8017a7a:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
 8017a7e:	4629      	mov	r1, r5
 8017a80:	4630      	mov	r0, r6
 8017a82:	f7ff ff03 	bl	801788c <mem_to_chunkid>
 8017a86:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
 8017a88:	1ba4      	subs	r4, r4, r6
 8017a8a:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
 8017a8c:	4287      	cmp	r7, r0
 8017a8e:	d31d      	bcc.n	8017acc <sys_heap_aligned_alloc+0xae>
	void *cmem = &buf[c];
 8017a90:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
 8017a94:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
 8017a98:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
 8017a9a:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
 8017a9e:	429c      	cmp	r4, r3
 8017aa0:	d31e      	bcc.n	8017ae0 <sys_heap_aligned_alloc+0xc2>
	void *cmem = &buf[c];
 8017aa2:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8017aa4:	8873      	ldrh	r3, [r6, #2]
 8017aa6:	f043 0301 	orr.w	r3, r3, #1
 8017aaa:	8073      	strh	r3, [r6, #2]
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
 8017aac:	4628      	mov	r0, r5
 8017aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (align <= chunk_header_bytes(h)) {
 8017ab2:	2904      	cmp	r1, #4
 8017ab4:	d903      	bls.n	8017abe <sys_heap_aligned_alloc+0xa0>
		rew = 0;
 8017ab6:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
 8017aba:	2204      	movs	r2, #4
 8017abc:	e7c0      	b.n	8017a40 <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
 8017abe:	4611      	mov	r1, r2
 8017ac0:	f7ff ff7b 	bl	80179ba <sys_heap_alloc>
 8017ac4:	4605      	mov	r5, r0
 8017ac6:	e7f1      	b.n	8017aac <sys_heap_aligned_alloc+0x8e>
		gap = MIN(rew, chunk_header_bytes(h));
 8017ac8:	2204      	movs	r2, #4
 8017aca:	e7b9      	b.n	8017a40 <sys_heap_aligned_alloc+0x22>
		split_chunks(h, c0, c);
 8017acc:	4602      	mov	r2, r0
 8017ace:	4639      	mov	r1, r7
 8017ad0:	4630      	mov	r0, r6
 8017ad2:	f7ff feb1 	bl	8017838 <split_chunks>
		free_list_add(h, c0);
 8017ad6:	4639      	mov	r1, r7
 8017ad8:	4630      	mov	r0, r6
 8017ada:	f7ff fee7 	bl	80178ac <free_list_add>
 8017ade:	e7d7      	b.n	8017a90 <sys_heap_aligned_alloc+0x72>
		split_chunks(h, c, c_end);
 8017ae0:	4622      	mov	r2, r4
 8017ae2:	4641      	mov	r1, r8
 8017ae4:	4630      	mov	r0, r6
 8017ae6:	f7ff fea7 	bl	8017838 <split_chunks>
		free_list_add(h, c_end);
 8017aea:	4621      	mov	r1, r4
 8017aec:	4630      	mov	r0, r6
 8017aee:	f7ff fedd 	bl	80178ac <free_list_add>
 8017af2:	e7d6      	b.n	8017aa2 <sys_heap_aligned_alloc+0x84>
		return NULL;
 8017af4:	2500      	movs	r5, #0
 8017af6:	e7d9      	b.n	8017aac <sys_heap_aligned_alloc+0x8e>
 8017af8:	2500      	movs	r5, #0
 8017afa:	e7d7      	b.n	8017aac <sys_heap_aligned_alloc+0x8e>
		return NULL;
 8017afc:	2500      	movs	r5, #0
 8017afe:	e7d5      	b.n	8017aac <sys_heap_aligned_alloc+0x8e>

08017b00 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 8017b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b02:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 8017b04:	1f15      	subs	r5, r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8017b06:	1dc8      	adds	r0, r1, #7
 8017b08:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8017b0c:	440d      	add	r5, r1
 8017b0e:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
 8017b12:	1a2d      	subs	r5, r5, r0
 8017b14:	ea4f 0ed5 	mov.w	lr, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
 8017b18:	4607      	mov	r7, r0
	heap->heap = h;
 8017b1a:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
 8017b1c:	f8c0 e008 	str.w	lr, [r0, #8]
	h->avail_buckets = 0;
 8017b20:	2300      	movs	r3, #0
 8017b22:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
 8017b24:	fabe f28e 	clz	r2, lr
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
 8017b28:	f1c2 0620 	rsb	r6, r2, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
 8017b2c:	f1c2 0224 	rsb	r2, r2, #36	; 0x24
 8017b30:	0092      	lsls	r2, r2, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
 8017b32:	f102 0c07 	add.w	ip, r2, #7
 8017b36:	ea4f 01dc 	mov.w	r1, ip, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8017b3a:	42b3      	cmp	r3, r6
 8017b3c:	da05      	bge.n	8017b4a <sys_heap_init+0x4a>
		h->buckets[i].next = 0;
 8017b3e:	1d1a      	adds	r2, r3, #4
 8017b40:	2400      	movs	r4, #0
 8017b42:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
 8017b46:	3301      	adds	r3, #1
 8017b48:	e7f7      	b.n	8017b3a <sys_heap_init+0x3a>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8017b4a:	004b      	lsls	r3, r1, #1
		((uint16_t *)cmem)[f] = val;
 8017b4c:	b29b      	uxth	r3, r3
 8017b4e:	2200      	movs	r2, #0
 8017b50:	8002      	strh	r2, [r0, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8017b52:	f043 0301 	orr.w	r3, r3, #1
 8017b56:	8043      	strh	r3, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
 8017b58:	ebae 0301 	sub.w	r3, lr, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 8017b5c:	005e      	lsls	r6, r3, #1
	void *cmem = &buf[c];
 8017b5e:	f02c 0207 	bic.w	r2, ip, #7
		((uint16_t *)cmem)[f] = val;
 8017b62:	1c94      	adds	r4, r2, #2
 8017b64:	5306      	strh	r6, [r0, r4]
 8017b66:	5281      	strh	r1, [r0, r2]
	void *cmem = &buf[c];
 8017b68:	f025 0207 	bic.w	r2, r5, #7
		((uint16_t *)cmem)[f] = val;
 8017b6c:	4405      	add	r5, r0
 8017b6e:	5283      	strh	r3, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
 8017b70:	2301      	movs	r3, #1
 8017b72:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
 8017b74:	f7ff fe9a 	bl	80178ac <free_list_add>
}
 8017b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017b7a <_ldiv5>:
{
 8017b7a:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t v_lo = *v;
 8017b7c:	6806      	ldr	r6, [r0, #0]
 8017b7e:	6845      	ldr	r5, [r0, #4]
	uint32_t v_hi = *v >> 32;
 8017b80:	f04f 0c00 	mov.w	ip, #0
	__asm__ ("" : "+r" (m));
 8017b84:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
	result = ((uint64_t)m << 32) | m;
 8017b88:	4611      	mov	r1, r2
	result += (uint64_t)v_lo * m;
 8017b8a:	fba6 6702 	umull	r6, r7, r6, r2
 8017b8e:	1871      	adds	r1, r6, r1
 8017b90:	eb47 0102 	adc.w	r1, r7, r2
	result >>= 32;
 8017b94:	4664      	mov	r4, ip
	result += (uint64_t)v_lo * m;
 8017b96:	1871      	adds	r1, r6, r1
 8017b98:	eb47 0404 	adc.w	r4, r7, r4
	result += (uint64_t)v_hi * m;
 8017b9c:	fba5 2302 	umull	r2, r3, r5, r2
 8017ba0:	1851      	adds	r1, r2, r1
 8017ba2:	eb43 0404 	adc.w	r4, r3, r4
	result >>= 32;
 8017ba6:	4665      	mov	r5, ip
	result += (uint64_t)v_hi * m;
 8017ba8:	1911      	adds	r1, r2, r4
 8017baa:	eb43 0505 	adc.w	r5, r3, r5
	*v = result;
 8017bae:	6001      	str	r1, [r0, #0]
 8017bb0:	6045      	str	r5, [r0, #4]
}
 8017bb2:	bcf0      	pop	{r4, r5, r6, r7}
 8017bb4:	4770      	bx	lr

08017bb6 <_ldiv10>:
{
 8017bb6:	b508      	push	{r3, lr}
	*v >>= 1;
 8017bb8:	6802      	ldr	r2, [r0, #0]
 8017bba:	6841      	ldr	r1, [r0, #4]
 8017bbc:	0852      	lsrs	r2, r2, #1
 8017bbe:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8017bc2:	0849      	lsrs	r1, r1, #1
 8017bc4:	6002      	str	r2, [r0, #0]
 8017bc6:	6041      	str	r1, [r0, #4]
	_ldiv5(v);
 8017bc8:	f7ff ffd7 	bl	8017b7a <_ldiv5>
}
 8017bcc:	bd08      	pop	{r3, pc}

08017bce <_get_digit>:
	if (*digit_count > 0) {
 8017bce:	680b      	ldr	r3, [r1, #0]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	dd16      	ble.n	8017c02 <_get_digit+0x34>
{
 8017bd4:	b430      	push	{r4, r5}
 8017bd6:	4604      	mov	r4, r0
		--*digit_count;
 8017bd8:	3b01      	subs	r3, #1
 8017bda:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
 8017bdc:	6801      	ldr	r1, [r0, #0]
 8017bde:	6840      	ldr	r0, [r0, #4]
 8017be0:	0085      	lsls	r5, r0, #2
 8017be2:	008b      	lsls	r3, r1, #2
 8017be4:	ea45 7291 	orr.w	r2, r5, r1, lsr #30
 8017be8:	185b      	adds	r3, r3, r1
 8017bea:	eb40 0202 	adc.w	r2, r0, r2
 8017bee:	18db      	adds	r3, r3, r3
 8017bf0:	4152      	adcs	r2, r2
		rval = ((*fr >> 60) & 0xF) + '0';
 8017bf2:	0f10      	lsrs	r0, r2, #28
 8017bf4:	3030      	adds	r0, #48	; 0x30
		*fr &= (BIT64(60) - 1U);
 8017bf6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8017bfa:	6023      	str	r3, [r4, #0]
 8017bfc:	6062      	str	r2, [r4, #4]
}
 8017bfe:	bc30      	pop	{r4, r5}
 8017c00:	4770      	bx	lr
		rval = '0';
 8017c02:	2030      	movs	r0, #48	; 0x30
}
 8017c04:	4770      	bx	lr

08017c06 <outs>:
{
 8017c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c0a:	4607      	mov	r7, r0
 8017c0c:	460e      	mov	r6, r1
 8017c0e:	4614      	mov	r4, r2
 8017c10:	4698      	mov	r8, r3
	size_t count = 0;
 8017c12:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8017c14:	e006      	b.n	8017c24 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
 8017c16:	4631      	mov	r1, r6
 8017c18:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017c1c:	47b8      	blx	r7
		if (rc < 0) {
 8017c1e:	2800      	cmp	r0, #0
 8017c20:	db09      	blt.n	8017c36 <outs+0x30>
		++count;
 8017c22:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
 8017c24:	4544      	cmp	r4, r8
 8017c26:	d3f6      	bcc.n	8017c16 <outs+0x10>
 8017c28:	f1b8 0f00 	cmp.w	r8, #0
 8017c2c:	d102      	bne.n	8017c34 <outs+0x2e>
 8017c2e:	7823      	ldrb	r3, [r4, #0]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d1f0      	bne.n	8017c16 <outs+0x10>
	return (int)count;
 8017c34:	4628      	mov	r0, r5
}
 8017c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017c3a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8017c3a:	4770      	bx	lr

08017c3c <dummy_timestamp>:
}
 8017c3c:	2000      	movs	r0, #0
 8017c3e:	4770      	bx	lr

08017c40 <msg_filter_check>:
}
 8017c40:	2001      	movs	r0, #1
 8017c42:	4770      	bx	lr

08017c44 <default_lf_get_timestamp>:
{
 8017c44:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
 8017c46:	f004 fcdf 	bl	801c608 <z_impl_k_uptime_ticks>
 8017c4a:	220a      	movs	r2, #10
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	f7e8 ff75 	bl	8000b3c <__aeabi_uldivmod>
}
 8017c52:	bd08      	pop	{r3, pc}

08017c54 <z_log_vprintk>:
{
 8017c54:	b500      	push	{lr}
 8017c56:	b085      	sub	sp, #20
 8017c58:	9102      	str	r1, [sp, #8]
 8017c5a:	9001      	str	r0, [sp, #4]
 8017c5c:	2000      	movs	r0, #0
 8017c5e:	9000      	str	r0, [sp, #0]
 8017c60:	4603      	mov	r3, r0
 8017c62:	4602      	mov	r2, r0
 8017c64:	4601      	mov	r1, r0
 8017c66:	f000 f88d 	bl	8017d84 <z_impl_z_log_msg2_runtime_vcreate>
}
 8017c6a:	b005      	add	sp, #20
 8017c6c:	f85d fb04 	ldr.w	pc, [sp], #4

08017c70 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
 8017c70:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
 8017c72:	f7ed fb53 	bl	800531c <log_init>
	}

	return 0;
}
 8017c76:	2000      	movs	r0, #0
 8017c78:	bd08      	pop	{r3, pc}

08017c7a <z_log_get_tag>:
}
 8017c7a:	2000      	movs	r0, #0
 8017c7c:	4770      	bx	lr

08017c7e <out_func>:
{
 8017c7e:	b500      	push	{lr}
 8017c80:	b083      	sub	sp, #12
		char x = (char)c;
 8017c82:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
 8017c86:	680b      	ldr	r3, [r1, #0]
 8017c88:	684a      	ldr	r2, [r1, #4]
 8017c8a:	6852      	ldr	r2, [r2, #4]
 8017c8c:	2101      	movs	r1, #1
 8017c8e:	f10d 0007 	add.w	r0, sp, #7
 8017c92:	4798      	blx	r3
}
 8017c94:	2000      	movs	r0, #0
 8017c96:	b003      	add	sp, #12
 8017c98:	f85d fb04 	ldr.w	pc, [sp], #4

08017c9c <cr_out_func>:
{
 8017c9c:	b538      	push	{r3, r4, r5, lr}
 8017c9e:	4604      	mov	r4, r0
 8017ca0:	460d      	mov	r5, r1
	out_func(c, ctx);
 8017ca2:	f7ff ffec 	bl	8017c7e <out_func>
	if (c == '\n') {
 8017ca6:	2c0a      	cmp	r4, #10
 8017ca8:	d001      	beq.n	8017cae <cr_out_func+0x12>
}
 8017caa:	2000      	movs	r0, #0
 8017cac:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
 8017cae:	4629      	mov	r1, r5
 8017cb0:	200d      	movs	r0, #13
 8017cb2:	f7ff ffe4 	bl	8017c7e <out_func>
 8017cb6:	e7f8      	b.n	8017caa <cr_out_func+0xe>

08017cb8 <buffer_write>:
{
 8017cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cba:	4607      	mov	r7, r0
 8017cbc:	460d      	mov	r5, r1
 8017cbe:	4614      	mov	r4, r2
 8017cc0:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
 8017cc2:	4632      	mov	r2, r6
 8017cc4:	4621      	mov	r1, r4
 8017cc6:	4628      	mov	r0, r5
 8017cc8:	47b8      	blx	r7
		buf += processed;
 8017cca:	4405      	add	r5, r0
	} while (len != 0);
 8017ccc:	1a24      	subs	r4, r4, r0
 8017cce:	d1f8      	bne.n	8017cc2 <buffer_write+0xa>
}
 8017cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017cd2 <color_prefix>:
{
 8017cd2:	b508      	push	{r3, lr}
 8017cd4:	4613      	mov	r3, r2
	color_print(output, color, true, level);
 8017cd6:	2201      	movs	r2, #1
 8017cd8:	f7ed fc4e 	bl	8005578 <color_print>
}
 8017cdc:	bd08      	pop	{r3, pc}

08017cde <color_postfix>:
{
 8017cde:	b508      	push	{r3, lr}
 8017ce0:	4613      	mov	r3, r2
	color_print(output, color, false, level);
 8017ce2:	2200      	movs	r2, #0
 8017ce4:	f7ed fc48 	bl	8005578 <color_print>
}
 8017ce8:	bd08      	pop	{r3, pc}

08017cea <postfix_print>:
{
 8017cea:	b538      	push	{r3, r4, r5, lr}
 8017cec:	4605      	mov	r5, r0
 8017cee:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
 8017cf0:	f001 0101 	and.w	r1, r1, #1
 8017cf4:	f7ff fff3 	bl	8017cde <color_postfix>
	newline_print(output, flags);
 8017cf8:	4621      	mov	r1, r4
 8017cfa:	4628      	mov	r0, r5
 8017cfc:	f7ed fc52 	bl	80055a4 <newline_print>
}
 8017d00:	bd38      	pop	{r3, r4, r5, pc}

08017d02 <log_msg2_hexdump>:
{
 8017d02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d06:	b083      	sub	sp, #12
 8017d08:	4680      	mov	r8, r0
 8017d0a:	460e      	mov	r6, r1
 8017d0c:	4615      	mov	r5, r2
 8017d0e:	461f      	mov	r7, r3
 8017d10:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
 8017d14:	462c      	mov	r4, r5
 8017d16:	2d10      	cmp	r5, #16
 8017d18:	bf28      	it	cs
 8017d1a:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
 8017d1c:	f8cd 9000 	str.w	r9, [sp]
 8017d20:	463b      	mov	r3, r7
 8017d22:	4622      	mov	r2, r4
 8017d24:	4631      	mov	r1, r6
 8017d26:	4640      	mov	r0, r8
 8017d28:	f7ed fc50 	bl	80055cc <hexdump_line_print>
		data += length;
 8017d2c:	4426      	add	r6, r4
	} while (len);
 8017d2e:	1b2d      	subs	r5, r5, r4
 8017d30:	d1f0      	bne.n	8017d14 <log_msg2_hexdump+0x12>
}
 8017d32:	b003      	add	sp, #12
 8017d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08017d38 <log_output_flush>:
{
 8017d38:	b510      	push	{r4, lr}
 8017d3a:	4604      	mov	r4, r0
		     output->control_block->offset,
 8017d3c:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
 8017d3e:	6853      	ldr	r3, [r2, #4]
 8017d40:	6812      	ldr	r2, [r2, #0]
 8017d42:	6881      	ldr	r1, [r0, #8]
 8017d44:	6800      	ldr	r0, [r0, #0]
 8017d46:	f7ff ffb7 	bl	8017cb8 <buffer_write>
	output->control_block->offset = 0;
 8017d4a:	6863      	ldr	r3, [r4, #4]
 8017d4c:	2200      	movs	r2, #0
 8017d4e:	601a      	str	r2, [r3, #0]
}
 8017d50:	bd10      	pop	{r4, pc}

08017d52 <z_log_msg2_finalize>:
#include <logging/log_internal.h>
#include <logging/log_ctrl.h>

void z_log_msg2_finalize(struct log_msg2 *msg, const void *source,
			 const struct log_msg2_desc desc, const void *data)
{
 8017d52:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
 8017d54:	b198      	cbz	r0, 8017d7e <z_log_msg2_finalize+0x2c>
 8017d56:	460e      	mov	r6, r1
 8017d58:	4614      	mov	r4, r2
 8017d5a:	4619      	mov	r1, r3
 8017d5c:	4605      	mov	r5, r0
		z_log_dropped(false);

		return;
	}

	if (data) {
 8017d5e:	b143      	cbz	r3, 8017d72 <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
 8017d60:	f100 030c 	add.w	r3, r0, #12
 8017d64:	f3c2 2049 	ubfx	r0, r2, #9, #10
 8017d68:	f3c2 42cb 	ubfx	r2, r2, #19, #12
 8017d6c:	4418      	add	r0, r3
 8017d6e:	f004 fd63 	bl	801c838 <memcpy>

		memcpy(d, data, desc.data_len);
	}

	msg->hdr.desc = desc;
 8017d72:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
 8017d74:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
 8017d76:	4628      	mov	r0, r5
 8017d78:	f7ed fb76 	bl	8005468 <z_log_msg2_commit>
}
 8017d7c:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
 8017d7e:	f7ed fb53 	bl	8005428 <z_log_dropped>
		return;
 8017d82:	e7fb      	b.n	8017d7c <z_log_msg2_finalize+0x2a>

08017d84 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				const char *fmt, va_list ap)
{
 8017d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d88:	b085      	sub	sp, #20
 8017d8a:	af02      	add	r7, sp, #8
 8017d8c:	4682      	mov	sl, r0
 8017d8e:	460e      	mov	r6, r1
 8017d90:	4691      	mov	r9, r2
 8017d92:	4698      	mov	r8, r3
 8017d94:	f8d7 b030 	ldr.w	fp, [r7, #48]	; 0x30
 8017d98:	6b7d      	ldr	r5, [r7, #52]	; 0x34
	int plen;

	if (fmt) {
 8017d9a:	b3c5      	cbz	r5, 8017e0e <z_impl_z_log_msg2_runtime_vcreate+0x8a>
		va_list ap2;

		va_copy(ap2, ap);
 8017d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d9e:	607b      	str	r3, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
 8017da0:	9300      	str	r3, [sp, #0]
 8017da2:	462b      	mov	r3, r5
 8017da4:	2200      	movs	r2, #0
 8017da6:	210c      	movs	r1, #12
 8017da8:	4610      	mov	r0, r2
 8017daa:	f7eb ffbb 	bl	8003d24 <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
 8017dae:	4601      	mov	r1, r0
 8017db0:	eb00 030b 	add.w	r3, r0, fp
 8017db4:	3313      	adds	r3, #19
	struct log_msg2 *msg;
	struct log_msg2_desc desc =
 8017db6:	2400      	movs	r4, #0
 8017db8:	f36f 0400 	bfc	r4, #0, #1
 8017dbc:	f36f 0441 	bfc	r4, #1, #1
 8017dc0:	f36f 0482 	bfc	r4, #2, #1
 8017dc4:	f36a 04c5 	bfi	r4, sl, #3, #3
 8017dc8:	f369 1488 	bfi	r4, r9, #6, #3
 8017dcc:	f360 2452 	bfi	r4, r0, #9, #10
 8017dd0:	f36b 44de 	bfi	r4, fp, #19, #12
 8017dd4:	f36f 74df 	bfc	r4, #31, #1
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		msg = alloca(msg_wlen * sizeof(int));
 8017dd8:	f023 0307 	bic.w	r3, r3, #7
 8017ddc:	ebad 0d03 	sub.w	sp, sp, r3
	} else {
		msg = z_log_msg2_alloc(msg_wlen);
	}

	if (msg && fmt) {
 8017de0:	466b      	mov	r3, sp
 8017de2:	f113 0908 	adds.w	r9, r3, #8
 8017de6:	d008      	beq.n	8017dfa <z_impl_z_log_msg2_runtime_vcreate+0x76>
 8017de8:	b13d      	cbz	r5, 8017dfa <z_impl_z_log_msg2_runtime_vcreate+0x76>
		plen = cbvprintf_package(msg->data, (size_t)plen, 0, fmt, ap);
 8017dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dec:	9300      	str	r3, [sp, #0]
 8017dee:	462b      	mov	r3, r5
 8017df0:	2200      	movs	r2, #0
 8017df2:	f109 000c 	add.w	r0, r9, #12
 8017df6:	f7eb ff95 	bl	8003d24 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
	}

	z_log_msg2_finalize(msg, source, desc, data);
 8017dfa:	4643      	mov	r3, r8
 8017dfc:	4622      	mov	r2, r4
 8017dfe:	4631      	mov	r1, r6
 8017e00:	4648      	mov	r0, r9
 8017e02:	f7ff ffa6 	bl	8017d52 <z_log_msg2_finalize>
}
 8017e06:	370c      	adds	r7, #12
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
 8017e0e:	2000      	movs	r0, #0
 8017e10:	e7cd      	b.n	8017dae <z_impl_z_log_msg2_runtime_vcreate+0x2a>

08017e12 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
 8017e12:	b508      	push	{r3, lr}
	__do_global_ctors_aux();
 8017e14:	f7ed fd98 	bl	8005948 <__do_global_ctors_aux>
	__do_init_array_aux();
 8017e18:	f7ed fd88 	bl	800592c <__do_init_array_aux>
}
 8017e1c:	bd08      	pop	{r3, pc}

08017e1e <delay>:
{
 8017e1e:	b082      	sub	sp, #8
  for(i = 0UL; i < cycles ;++i)
 8017e20:	2300      	movs	r3, #0
 8017e22:	9301      	str	r3, [sp, #4]
 8017e24:	9b01      	ldr	r3, [sp, #4]
 8017e26:	4283      	cmp	r3, r0
 8017e28:	d204      	bcs.n	8017e34 <delay+0x16>
    __NOP();
 8017e2a:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 8017e2c:	9b01      	ldr	r3, [sp, #4]
 8017e2e:	3301      	adds	r3, #1
 8017e30:	9301      	str	r3, [sp, #4]
 8017e32:	e7f7      	b.n	8017e24 <delay+0x6>
}
 8017e34:	b002      	add	sp, #8
 8017e36:	4770      	bx	lr

08017e38 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8017e38:	b430      	push	{r4, r5}
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8017e3a:	088b      	lsrs	r3, r1, #2
 8017e3c:	3304      	adds	r3, #4
 8017e3e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8017e42:	f001 0103 	and.w	r1, r1, #3
 8017e46:	00c9      	lsls	r1, r1, #3
 8017e48:	25f8      	movs	r5, #248	; 0xf8
 8017e4a:	408d      	lsls	r5, r1
 8017e4c:	ea24 0405 	bic.w	r4, r4, r5
 8017e50:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8017e54:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8017e58:	fa02 f101 	lsl.w	r1, r2, r1
 8017e5c:	430c      	orrs	r4, r1
 8017e5e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
 8017e62:	bc30      	pop	{r4, r5}
 8017e64:	4770      	bx	lr

08017e66 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8017e66:	b410      	push	{r4}
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8017e68:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8017e6a:	0049      	lsls	r1, r1, #1
 8017e6c:	2403      	movs	r4, #3
 8017e6e:	408c      	lsls	r4, r1
 8017e70:	ea23 0304 	bic.w	r3, r3, r4
 8017e74:	6743      	str	r3, [r0, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8017e76:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8017e78:	fa02 f101 	lsl.w	r1, r2, r1
 8017e7c:	430b      	orrs	r3, r1
 8017e7e:	6743      	str	r3, [r0, #116]	; 0x74
}
 8017e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e84:	4770      	bx	lr

08017e86 <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 8017e86:	b430      	push	{r4, r5}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8017e88:	08cb      	lsrs	r3, r1, #3
 8017e8a:	3310      	adds	r3, #16
 8017e8c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8017e90:	f001 0107 	and.w	r1, r1, #7
 8017e94:	0089      	lsls	r1, r1, #2
 8017e96:	2507      	movs	r5, #7
 8017e98:	408d      	lsls	r5, r1
 8017e9a:	ea24 0405 	bic.w	r4, r4, r5
 8017e9e:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8017ea2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8017ea6:	fa02 f101 	lsl.w	r1, r2, r1
 8017eaa:	430c      	orrs	r4, r1
 8017eac:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
}
 8017eb0:	bc30      	pop	{r4, r5}
 8017eb2:	4770      	bx	lr

08017eb4 <XMC_ERU_ETL_Init>:
 ********************************************************************************************************************/
/* Initializes the selected ERU_ETLx channel with the config structure.  */
void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_ETL_CONFIG_t *const config)
{
 8017eb4:	b570      	push	{r4, r5, r6, lr}
 8017eb6:	4605      	mov	r5, r0
 8017eb8:	460c      	mov	r4, r1
 8017eba:	4616      	mov	r6, r2
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 8017ebc:	f7ed fff4 	bl	8005ea8 <XMC_ERU_Enable>

  eru->EXISEL = (eru->EXISEL &
 8017ec0:	682b      	ldr	r3, [r5, #0]
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8017ec2:	00a0      	lsls	r0, r4, #2
 8017ec4:	210f      	movs	r1, #15
 8017ec6:	4081      	lsls	r1, r0
  eru->EXISEL = (eru->EXISEL &
 8017ec8:	ea23 0301 	bic.w	r3, r3, r1
                (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
 8017ecc:	6832      	ldr	r2, [r6, #0]
 8017ece:	4082      	lsls	r2, r0
                 ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL_BITSIZE))) |
 8017ed0:	4313      	orrs	r3, r2
  eru->EXISEL = (eru->EXISEL &
 8017ed2:	602b      	str	r3, [r5, #0]

  eru->EXICON[channel] = config->raw;
 8017ed4:	6873      	ldr	r3, [r6, #4]
 8017ed6:	3404      	adds	r4, #4
 8017ed8:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
 8017edc:	bd70      	pop	{r4, r5, r6, pc}

08017ede <XMC_ERU_OGU_Init>:

/* Initializes the selected ERU_OGUy channel with the config structure.  */
void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
                      const uint8_t channel,
                      const XMC_ERU_OGU_CONFIG_t *const config)
{
 8017ede:	b570      	push	{r4, r5, r6, lr}
 8017ee0:	4605      	mov	r5, r0
 8017ee2:	460c      	mov	r4, r1
 8017ee4:	4616      	mov	r6, r2
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
  XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));

  XMC_ERU_Enable(eru);
 8017ee6:	f7ed ffdf 	bl	8005ea8 <XMC_ERU_Enable>

  eru->EXOCON[channel] = config->raw;
 8017eea:	6833      	ldr	r3, [r6, #0]
 8017eec:	3408      	adds	r4, #8
 8017eee:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
}
 8017ef2:	bd70      	pop	{r4, r5, r6, pc}

08017ef4 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8017ef4:	b538      	push	{r3, r4, r5, lr}
 8017ef6:	4604      	mov	r4, r0
 8017ef8:	460d      	mov	r5, r1

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8017efa:	f7ed ffe1 	bl	8005ec0 <XMC_CCU4_EnableModule>
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8017efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017f02:	60e3      	str	r3, [r4, #12]
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);

  gctrl = module->GCTRL;
 8017f04:	6823      	ldr	r3, [r4, #0]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8017f06:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8017f0a:	ea43 3385 	orr.w	r3, r3, r5, lsl #14

  module->GCTRL = gctrl;
 8017f0e:	6023      	str	r3, [r4, #0]
}
 8017f10:	bd38      	pop	{r3, r4, r5, pc}

08017f12 <XMC_CCU4_SetModuleClock>:
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_SetModuleClock:Invalid Module Clock", XMC_CCU4_SLICE_CHECK_CLOCK(clock));

  gctrl = module->GCTRL;
 8017f12:	6803      	ldr	r3, [r0, #0]
  gctrl &= ~((uint32_t) CCU4_GCTRL_PCIS_Msk);
 8017f14:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  gctrl |= ((uint32_t) clock) << CCU4_GCTRL_PCIS_Pos;
 8017f18:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  module->GCTRL = gctrl;
 8017f1c:	6003      	str	r3, [r0, #0]
}
 8017f1e:	4770      	bx	lr

08017f20 <XMC_ETH_MAC_InitRxDescriptors>:
{
 8017f20:	b410      	push	{r4}
  for (i = 0U; i < eth_mac->num_rx_buf; ++i)
 8017f22:	2300      	movs	r3, #0
 8017f24:	e00a      	b.n	8017f3c <XMC_ETH_MAC_InitRxDescriptors+0x1c>
      eth_mac->rx_desc[i].buffer1 = 0;
 8017f26:	6902      	ldr	r2, [r0, #16]
 8017f28:	440a      	add	r2, r1
 8017f2a:	2400      	movs	r4, #0
 8017f2c:	6094      	str	r4, [r2, #8]
 8017f2e:	e01d      	b.n	8017f6c <XMC_ETH_MAC_InitRxDescriptors+0x4c>
      next = 0U;
 8017f30:	2400      	movs	r4, #0
    eth_mac->rx_desc[i].buffer2 = (uint32_t) & (eth_mac->rx_desc[next]);
 8017f32:	6902      	ldr	r2, [r0, #16]
 8017f34:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8017f38:	440a      	add	r2, r1
 8017f3a:	60d4      	str	r4, [r2, #12]
  for (i = 0U; i < eth_mac->num_rx_buf; ++i)
 8017f3c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8017f40:	429a      	cmp	r2, r3
 8017f42:	d91a      	bls.n	8017f7a <XMC_ETH_MAC_InitRxDescriptors+0x5a>
    eth_mac->rx_desc[i].status = (uint32_t)ETH_MAC_DMA_RDES0_OWN;
 8017f44:	6902      	ldr	r2, [r0, #16]
 8017f46:	0159      	lsls	r1, r3, #5
 8017f48:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8017f4c:	5054      	str	r4, [r2, r1]
    eth_mac->rx_desc[i].length = (uint32_t)ETH_MAC_DMA_RDES1_RCH | (uint32_t)XMC_ETH_MAC_BUF_SIZE;
 8017f4e:	6902      	ldr	r2, [r0, #16]
 8017f50:	440a      	add	r2, r1
 8017f52:	f244 54f4 	movw	r4, #17908	; 0x45f4
 8017f56:	6054      	str	r4, [r2, #4]
    if (eth_mac->rx_buf != NULL)
 8017f58:	6982      	ldr	r2, [r0, #24]
 8017f5a:	2a00      	cmp	r2, #0
 8017f5c:	d0e3      	beq.n	8017f26 <XMC_ETH_MAC_InitRxDescriptors+0x6>
      eth_mac->rx_desc[i].buffer1 = (uint32_t) & (eth_mac->rx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 8017f5e:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8017f62:	fb04 2403 	mla	r4, r4, r3, r2
 8017f66:	6902      	ldr	r2, [r0, #16]
 8017f68:	440a      	add	r2, r1
 8017f6a:	6094      	str	r4, [r2, #8]
    next = i + 1U;
 8017f6c:	3301      	adds	r3, #1
    if (next == eth_mac->num_rx_buf)
 8017f6e:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8017f72:	429a      	cmp	r2, r3
 8017f74:	d0dc      	beq.n	8017f30 <XMC_ETH_MAC_InitRxDescriptors+0x10>
    next = i + 1U;
 8017f76:	461c      	mov	r4, r3
 8017f78:	e7db      	b.n	8017f32 <XMC_ETH_MAC_InitRxDescriptors+0x12>
  eth_mac->regs->RECEIVE_DESCRIPTOR_LIST_ADDRESS = (uint32_t) & (eth_mac->rx_desc[0]);
 8017f7a:	6901      	ldr	r1, [r0, #16]
 8017f7c:	6802      	ldr	r2, [r0, #0]
 8017f7e:	f241 030c 	movw	r3, #4108	; 0x100c
 8017f82:	50d1      	str	r1, [r2, r3]
  eth_mac->rx_index = 0U;
 8017f84:	2300      	movs	r3, #0
 8017f86:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
}
 8017f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f8e:	4770      	bx	lr

08017f90 <XMC_ETH_MAC_GetRxFrameSize>:
  status = eth_mac->rx_desc[eth_mac->rx_index].status;
 8017f90:	6902      	ldr	r2, [r0, #16]
 8017f92:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 8017f96:	015b      	lsls	r3, r3, #5
 8017f98:	58d0      	ldr	r0, [r2, r3]
  if (status & ETH_MAC_DMA_RDES0_OWN)
 8017f9a:	2800      	cmp	r0, #0
 8017f9c:	db0b      	blt.n	8017fb6 <XMC_ETH_MAC_GetRxFrameSize+0x26>
           ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 8017f9e:	f400 4303 	and.w	r3, r0, #33536	; 0x8300
  else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
 8017fa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8017fa6:	d002      	beq.n	8017fae <XMC_ETH_MAC_GetRxFrameSize+0x1e>
    len = 0xFFFFFFFFU;
 8017fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8017fac:	4770      	bx	lr
    len = ((status & ETH_MAC_DMA_RDES0_FL) >> 16U) - 4U;
 8017fae:	f3c0 400d 	ubfx	r0, r0, #16, #14
 8017fb2:	3804      	subs	r0, #4
 8017fb4:	4770      	bx	lr
    len = 0U;
 8017fb6:	2000      	movs	r0, #0
 8017fb8:	4770      	bx	lr

08017fba <XMC_ETH_MAC_ReadPhy>:
{
 8017fba:	b430      	push	{r4, r5}
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8017fbc:	6805      	ldr	r5, [r0, #0]
 8017fbe:	692c      	ldr	r4, [r5, #16]
 8017fc0:	f004 043c 	and.w	r4, r4, #60	; 0x3c
                                (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 8017fc4:	ea44 24c1 	orr.w	r4, r4, r1, lsl #11
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8017fc8:	ea44 1482 	orr.w	r4, r4, r2, lsl #6
 8017fcc:	f044 0401 	orr.w	r4, r4, #1
 8017fd0:	612c      	str	r4, [r5, #16]
  retries = 0U;
 8017fd2:	2200      	movs	r2, #0
    if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 8017fd4:	6801      	ldr	r1, [r0, #0]
 8017fd6:	690c      	ldr	r4, [r1, #16]
 8017fd8:	f014 0f01 	tst.w	r4, #1
 8017fdc:	d006      	beq.n	8017fec <XMC_ETH_MAC_ReadPhy+0x32>
    ++retries;
 8017fde:	3201      	adds	r2, #1
  while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 8017fe0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8017fe4:	428a      	cmp	r2, r1
 8017fe6:	d9f5      	bls.n	8017fd4 <XMC_ETH_MAC_ReadPhy+0x1a>
  return XMC_ETH_MAC_STATUS_ERROR;
 8017fe8:	2002      	movs	r0, #2
 8017fea:	e002      	b.n	8017ff2 <XMC_ETH_MAC_ReadPhy+0x38>
      *data = (uint16_t)(eth_mac->regs->GMII_DATA & ETH_GMII_DATA_MD_Msk);
 8017fec:	694a      	ldr	r2, [r1, #20]
 8017fee:	801a      	strh	r2, [r3, #0]
      return XMC_ETH_MAC_STATUS_OK;
 8017ff0:	2000      	movs	r0, #0
}
 8017ff2:	bc30      	pop	{r4, r5}
 8017ff4:	4770      	bx	lr

08017ff6 <XMC_ETH_MAC_WritePhy>:
{
 8017ff6:	b410      	push	{r4}
  eth_mac->regs->GMII_DATA  = data;
 8017ff8:	6804      	ldr	r4, [r0, #0]
 8017ffa:	6163      	str	r3, [r4, #20]
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8017ffc:	6804      	ldr	r4, [r0, #0]
 8017ffe:	6923      	ldr	r3, [r4, #16]
 8018000:	f003 033c 	and.w	r3, r3, #60	; 0x3c
                                (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
 8018004:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
  eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRESS_CR_Msk) |
 8018008:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 801800c:	f043 0303 	orr.w	r3, r3, #3
 8018010:	6123      	str	r3, [r4, #16]
  retries = 0U;
 8018012:	2300      	movs	r3, #0
    if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 8018014:	6802      	ldr	r2, [r0, #0]
 8018016:	6912      	ldr	r2, [r2, #16]
 8018018:	f012 0f01 	tst.w	r2, #1
 801801c:	d006      	beq.n	801802c <XMC_ETH_MAC_WritePhy+0x36>
    ++retries;
 801801e:	3301      	adds	r3, #1
  while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 8018020:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018024:	4293      	cmp	r3, r2
 8018026:	d9f5      	bls.n	8018014 <XMC_ETH_MAC_WritePhy+0x1e>
  return XMC_ETH_MAC_STATUS_ERROR;
 8018028:	2002      	movs	r0, #2
 801802a:	e000      	b.n	801802e <XMC_ETH_MAC_WritePhy+0x38>
      return XMC_ETH_MAC_STATUS_OK;
 801802c:	2000      	movs	r0, #0
}
 801802e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018032:	4770      	bx	lr

08018034 <XMC_ETH_MAC_EnableEvent>:
  eth_mac->regs->INTERRUPT_MASK &= ~(event >> 16U);
 8018034:	6802      	ldr	r2, [r0, #0]
 8018036:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8018038:	ea23 4311 	bic.w	r3, r3, r1, lsr #16
 801803c:	63d3      	str	r3, [r2, #60]	; 0x3c
  event &= (uint16_t)0x7fffU;
 801803e:	f3c1 030e 	ubfx	r3, r1, #0, #15
  if (XCM_ETH_MAC_IsNormalEvent(event))
 8018042:	f244 0245 	movw	r2, #16453	; 0x4045
 8018046:	4211      	tst	r1, r2
 8018048:	d001      	beq.n	801804e <XMC_ETH_MAC_EnableEvent+0x1a>
    event |= (uint32_t)ETH_INTERRUPT_ENABLE_NIE_Msk;
 801804a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  if (XCM_ETH_MAC_IsAbnormalEvent(event))
 801804e:	f242 72ba 	movw	r2, #10170	; 0x27ba
 8018052:	4213      	tst	r3, r2
 8018054:	d001      	beq.n	801805a <XMC_ETH_MAC_EnableEvent+0x26>
    event |= (uint32_t)ETH_INTERRUPT_ENABLE_AIE_Msk;
 8018056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  eth_mac->regs->INTERRUPT_ENABLE |= event;
 801805a:	6800      	ldr	r0, [r0, #0]
 801805c:	f241 011c 	movw	r1, #4124	; 0x101c
 8018060:	5842      	ldr	r2, [r0, r1]
 8018062:	4313      	orrs	r3, r2
 8018064:	5043      	str	r3, [r0, r1]
}
 8018066:	4770      	bx	lr

08018068 <XMC_ETH_MAC_DisableEvent>:
  eth_mac->regs->INTERRUPT_MASK |= event >> 16U;
 8018068:	6802      	ldr	r2, [r0, #0]
 801806a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 801806c:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8018070:	63d3      	str	r3, [r2, #60]	; 0x3c
  event &= 0x7fffU;
 8018072:	f3c1 010e 	ubfx	r1, r1, #0, #15
  eth_mac->regs->INTERRUPT_ENABLE &= ~event;
 8018076:	6800      	ldr	r0, [r0, #0]
 8018078:	f241 021c 	movw	r2, #4124	; 0x101c
 801807c:	5883      	ldr	r3, [r0, r2]
 801807e:	ea23 0101 	bic.w	r1, r3, r1
 8018082:	5081      	str	r1, [r0, r2]
}
 8018084:	4770      	bx	lr

08018086 <XMC_ETH_MAC_ClearEventStatus>:
  if ((eth_mac->regs->STATUS & ETH_STATUS_NIS_Msk) != 0U)
 8018086:	6803      	ldr	r3, [r0, #0]
 8018088:	f241 0214 	movw	r2, #4116	; 0x1014
 801808c:	589a      	ldr	r2, [r3, r2]
 801808e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8018092:	d001      	beq.n	8018098 <XMC_ETH_MAC_ClearEventStatus+0x12>
    event |= (uint32_t)ETH_STATUS_NIS_Msk;
 8018094:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
  if ((eth_mac->regs->STATUS & ETH_STATUS_AIS_Msk) != 0U)
 8018098:	f241 0214 	movw	r2, #4116	; 0x1014
 801809c:	589a      	ldr	r2, [r3, r2]
 801809e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80180a2:	d001      	beq.n	80180a8 <XMC_ETH_MAC_ClearEventStatus+0x22>
    event |= (uint32_t)ETH_STATUS_AIS_Msk;
 80180a4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
  eth_mac->regs->STATUS = event & 0x0001FFFFU;
 80180a8:	f3c1 0110 	ubfx	r1, r1, #0, #17
 80180ac:	f241 0214 	movw	r2, #4116	; 0x1014
 80180b0:	5099      	str	r1, [r3, r2]
}
 80180b2:	4770      	bx	lr

080180b4 <XMC_ETH_MAC_GetEventStatus>:
  temp_status =  (eth_mac->regs->STATUS & (uint32_t)0x7ffUL);
 80180b4:	6803      	ldr	r3, [r0, #0]
 80180b6:	f241 0214 	movw	r2, #4116	; 0x1014
 80180ba:	5898      	ldr	r0, [r3, r2]
 80180bc:	f3c0 000a 	ubfx	r0, r0, #0, #11
  return ((uint32_t)((eth_mac->regs->INTERRUPT_STATUS & (ETH_INTERRUPT_MASK_PMTIM_Msk | ETH_INTERRUPT_MASK_TSIM_Msk)) << 16U) |
 80180c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80180c2:	041b      	lsls	r3, r3, #16
 80180c4:	f003 7302 	and.w	r3, r3, #34078720	; 0x2080000
}
 80180c8:	4318      	orrs	r0, r3
 80180ca:	4770      	bx	lr

080180cc <XMC_ETH_MAC_ReturnRxDescriptor>:
  eth_mac->rx_desc[eth_mac->rx_index].status |= ETH_MAC_DMA_RDES0_OWN;
 80180cc:	6901      	ldr	r1, [r0, #16]
 80180ce:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 80180d2:	015b      	lsls	r3, r3, #5
 80180d4:	58ca      	ldr	r2, [r1, r3]
 80180d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80180da:	50ca      	str	r2, [r1, r3]
  eth_mac->rx_index++;
 80180dc:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 80180e0:	3301      	adds	r3, #1
 80180e2:	b2db      	uxtb	r3, r3
 80180e4:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
  if (eth_mac->rx_index == eth_mac->num_rx_buf)
 80180e8:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80180ec:	4293      	cmp	r3, r2
 80180ee:	d000      	beq.n	80180f2 <XMC_ETH_MAC_ReturnRxDescriptor+0x26>
}
 80180f0:	4770      	bx	lr
    eth_mac->rx_index = 0U;
 80180f2:	2300      	movs	r3, #0
 80180f4:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
}
 80180f8:	e7fa      	b.n	80180f0 <XMC_ETH_MAC_ReturnRxDescriptor+0x24>

080180fa <XMC_ETH_MAC_ReturnTxDescriptor>:
  eth_mac->tx_ts_index = eth_mac->tx_index;
 80180fa:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 80180fe:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  eth_mac->tx_desc[eth_mac->tx_index].status |= ETH_MAC_DMA_TDES0_CIC | ETH_MAC_DMA_TDES0_OWN;
 8018102:	6941      	ldr	r1, [r0, #20]
 8018104:	015b      	lsls	r3, r3, #5
 8018106:	58ca      	ldr	r2, [r1, r3]
 8018108:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801810c:	f442 0240 	orr.w	r2, r2, #12582912	; 0xc00000
 8018110:	50ca      	str	r2, [r1, r3]
  eth_mac->tx_index++;
 8018112:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8018116:	3301      	adds	r3, #1
 8018118:	b2db      	uxtb	r3, r3
 801811a:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
  if (eth_mac->tx_index == eth_mac->num_tx_buf)
 801811e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8018122:	4293      	cmp	r3, r2
 8018124:	d002      	beq.n	801812c <XMC_ETH_MAC_ReturnTxDescriptor+0x32>
  eth_mac->frame_end = NULL;
 8018126:	2300      	movs	r3, #0
 8018128:	6203      	str	r3, [r0, #32]
}
 801812a:	4770      	bx	lr
    eth_mac->tx_index = 0U;
 801812c:	2300      	movs	r3, #0
 801812e:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
 8018132:	e7f8      	b.n	8018126 <XMC_ETH_MAC_ReturnTxDescriptor+0x2c>

08018134 <XMC_ETH_MAC_InitPTPEx>:
{
 8018134:	b538      	push	{r3, r4, r5, lr}
  eth_mac->regs->SYSTEM_TIME_NANOSECONDS_UPDATE = time->nanoseconds;
 8018136:	6804      	ldr	r4, [r0, #0]
 8018138:	6855      	ldr	r5, [r2, #4]
 801813a:	f8c4 5714 	str.w	r5, [r4, #1812]	; 0x714
  eth_mac->regs->SYSTEM_TIME_SECONDS_UPDATE = time->seconds;
 801813e:	6803      	ldr	r3, [r0, #0]
 8018140:	6812      	ldr	r2, [r2, #0]
 8018142:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
  XMC_ETH_MAC_InitPTP(eth_mac, config);
 8018146:	f7ed ffb1 	bl	80060ac <XMC_ETH_MAC_InitPTP>
}
 801814a:	bd38      	pop	{r3, r4, r5, pc}

0801814c <XMC_ETH_MAC_GetPTPTime>:
  time->nanoseconds = (uint32_t)(eth_mac->regs->SYSTEM_TIME_NANOSECONDS); /* accuracy of 1 ns */
 801814c:	6803      	ldr	r3, [r0, #0]
 801814e:	f8d3 370c 	ldr.w	r3, [r3, #1804]	; 0x70c
 8018152:	604b      	str	r3, [r1, #4]
  time->seconds = eth_mac->regs->SYSTEM_TIME_SECONDS;
 8018154:	6803      	ldr	r3, [r0, #0]
 8018156:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
 801815a:	600b      	str	r3, [r1, #0]
}
 801815c:	4770      	bx	lr

0801815e <XMC_ETH_MAC_UpdatePTPTime>:
{
 801815e:	b538      	push	{r3, r4, r5, lr}
 8018160:	4604      	mov	r4, r0
 8018162:	460d      	mov	r5, r1
  temp = (uint32_t)(abs(time->nanoseconds));
 8018164:	6848      	ldr	r0, [r1, #4]
 8018166:	f004 fb49 	bl	801c7fc <abs>
  if (time->nanoseconds < 0)
 801816a:	686b      	ldr	r3, [r5, #4]
 801816c:	2b00      	cmp	r3, #0
 801816e:	db0e      	blt.n	801818e <XMC_ETH_MAC_UpdatePTPTime+0x30>
  eth_mac->regs->SYSTEM_TIME_NANOSECONDS_UPDATE = temp;
 8018170:	6823      	ldr	r3, [r4, #0]
 8018172:	f8c3 0714 	str.w	r0, [r3, #1812]	; 0x714
  eth_mac->regs->SYSTEM_TIME_SECONDS_UPDATE = time->seconds;
 8018176:	6823      	ldr	r3, [r4, #0]
 8018178:	682a      	ldr	r2, [r5, #0]
 801817a:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
  eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSUPDT_Msk;
 801817e:	6822      	ldr	r2, [r4, #0]
 8018180:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
 8018184:	f043 0308 	orr.w	r3, r3, #8
 8018188:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
}
 801818c:	bd38      	pop	{r3, r4, r5, pc}
    temp |= (uint32_t)ETH_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB_Msk;
 801818e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8018192:	e7ed      	b.n	8018170 <XMC_ETH_MAC_UpdatePTPTime+0x12>

08018194 <XMC_ETH_MAC_SetPTPAlarm>:
  eth_mac->regs->TARGET_TIME_NANOSECONDS = time->nanoseconds;
 8018194:	6803      	ldr	r3, [r0, #0]
 8018196:	684a      	ldr	r2, [r1, #4]
 8018198:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
  eth_mac->regs->TARGET_TIME_SECONDS = time->seconds;
 801819c:	6803      	ldr	r3, [r0, #0]
 801819e:	680a      	ldr	r2, [r1, #0]
 80181a0:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
}
 80181a4:	4770      	bx	lr

080181a6 <XMC_ETH_MAC_UpdateAddend>:
  eth_mac->regs->TIMESTAMP_ADDEND = addend;
 80181a6:	6803      	ldr	r3, [r0, #0]
 80181a8:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
  eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSADDREG_Msk;
 80181ac:	6802      	ldr	r2, [r0, #0]
 80181ae:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
 80181b2:	f043 0320 	orr.w	r3, r3, #32
 80181b6:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
  while (eth_mac->regs->TIMESTAMP_CONTROL & ETH_TIMESTAMP_CONTROL_TSADDREG_Msk);
 80181ba:	6803      	ldr	r3, [r0, #0]
 80181bc:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 80181c0:	f013 0f20 	tst.w	r3, #32
 80181c4:	d1f9      	bne.n	80181ba <XMC_ETH_MAC_UpdateAddend+0x14>
}
 80181c6:	4770      	bx	lr

080181c8 <XMC_ETH_MAC_GetRxTimeStamp>:
{
 80181c8:	b410      	push	{r4}
  rx_desc = &eth_mac->rx_desc[eth_mac->rx_index];
 80181ca:	6902      	ldr	r2, [r0, #16]
 80181cc:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 80181d0:	0158      	lsls	r0, r3, #5
 80181d2:	eb02 1343 	add.w	r3, r2, r3, lsl #5
  if (rx_desc->status & ETH_MAC_DMA_RDES0_OWN)
 80181d6:	5814      	ldr	r4, [r2, r0]
 80181d8:	2c00      	cmp	r4, #0
 80181da:	db0d      	blt.n	80181f8 <XMC_ETH_MAC_GetRxTimeStamp+0x30>
    if ((rx_desc->status & (ETH_MAC_DMA_RDES0_TSA | ETH_MAC_DMA_RDES0_LS)) == (ETH_MAC_DMA_RDES0_TSA | ETH_MAC_DMA_RDES0_LS))
 80181dc:	5812      	ldr	r2, [r2, r0]
 80181de:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 80181e2:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
 80181e6:	d001      	beq.n	80181ec <XMC_ETH_MAC_GetRxTimeStamp+0x24>
      status = XMC_ETH_MAC_STATUS_ERROR;
 80181e8:	2002      	movs	r0, #2
 80181ea:	e006      	b.n	80181fa <XMC_ETH_MAC_GetRxTimeStamp+0x32>
      time->nanoseconds = (int32_t)(rx_desc->time_stamp_nanoseconds);
 80181ec:	699a      	ldr	r2, [r3, #24]
 80181ee:	604a      	str	r2, [r1, #4]
      time->seconds = rx_desc->time_stamp_seconds;
 80181f0:	69db      	ldr	r3, [r3, #28]
 80181f2:	600b      	str	r3, [r1, #0]
      status = XMC_ETH_MAC_STATUS_OK;
 80181f4:	2000      	movs	r0, #0
 80181f6:	e000      	b.n	80181fa <XMC_ETH_MAC_GetRxTimeStamp+0x32>
    status = XMC_ETH_MAC_STATUS_BUSY;
 80181f8:	2001      	movs	r0, #1
}
 80181fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80181fe:	4770      	bx	lr

08018200 <XMC_ETH_PHY_IsDeviceIdValid>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* Check if the device identifier is valid */
static int32_t XMC_ETH_PHY_IsDeviceIdValid(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 8018200:	b530      	push	{r4, r5, lr}
 8018202:	b083      	sub	sp, #12
 8018204:	4604      	mov	r4, r0
 8018206:	460d      	mov	r5, r1
  uint16_t phy_id1;
  uint16_t phy_id2;
  XMC_ETH_PHY_STATUS_t status;

  /* Check Device Identification. */
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
 8018208:	f10d 0306 	add.w	r3, sp, #6
 801820c:	2202      	movs	r2, #2
 801820e:	f7ff fed4 	bl	8017fba <XMC_ETH_MAC_ReadPhy>
 8018212:	b110      	cbz	r0, 801821a <XMC_ETH_PHY_IsDeviceIdValid+0x1a>
      status = XMC_ETH_PHY_STATUS_ERROR_DEVICE_ID;
    }
  }
  else
  {
    status = XMC_ETH_PHY_STATUS_ERROR_TIMEOUT;
 8018214:	2004      	movs	r0, #4
  }

  return (int32_t)status;
}
 8018216:	b003      	add	sp, #12
 8018218:	bd30      	pop	{r4, r5, pc}
      (XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR2, &phy_id2) == XMC_ETH_MAC_STATUS_OK))
 801821a:	ab01      	add	r3, sp, #4
 801821c:	2203      	movs	r2, #3
 801821e:	4629      	mov	r1, r5
 8018220:	4620      	mov	r0, r4
 8018222:	f7ff feca 	bl	8017fba <XMC_ETH_MAC_ReadPhy>
  if ((XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYIDR1, &phy_id1) == XMC_ETH_MAC_STATUS_OK) &&
 8018226:	b978      	cbnz	r0, 8018248 <XMC_ETH_PHY_IsDeviceIdValid+0x48>
    if ((phy_id1 == PHY_ID1) && ((phy_id2 & (uint16_t)0xfff0) == PHY_ID2))
 8018228:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801822c:	2b22      	cmp	r3, #34	; 0x22
 801822e:	d001      	beq.n	8018234 <XMC_ETH_PHY_IsDeviceIdValid+0x34>
      status = XMC_ETH_PHY_STATUS_ERROR_DEVICE_ID;
 8018230:	2003      	movs	r0, #3
 8018232:	e7f0      	b.n	8018216 <XMC_ETH_PHY_IsDeviceIdValid+0x16>
    if ((phy_id1 == PHY_ID1) && ((phy_id2 & (uint16_t)0xfff0) == PHY_ID2))
 8018234:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018238:	f023 030f 	bic.w	r3, r3, #15
 801823c:	b29b      	uxth	r3, r3
 801823e:	f5b3 5fab 	cmp.w	r3, #5472	; 0x1560
 8018242:	d0e8      	beq.n	8018216 <XMC_ETH_PHY_IsDeviceIdValid+0x16>
      status = XMC_ETH_PHY_STATUS_ERROR_DEVICE_ID;
 8018244:	2003      	movs	r0, #3
 8018246:	e7e6      	b.n	8018216 <XMC_ETH_PHY_IsDeviceIdValid+0x16>
    status = XMC_ETH_PHY_STATUS_ERROR_TIMEOUT;
 8018248:	2004      	movs	r0, #4
 801824a:	e7e4      	b.n	8018216 <XMC_ETH_PHY_IsDeviceIdValid+0x16>

0801824c <XMC_ETH_PHY_Reset>:
  return status;
}

/* Reset */
int32_t XMC_ETH_PHY_Reset(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 801824c:	b530      	push	{r4, r5, lr}
 801824e:	b083      	sub	sp, #12
 8018250:	4605      	mov	r5, r0
 8018252:	460c      	mov	r4, r1
  int32_t status;
  uint16_t reg_bmcr;

  /* Reset PHY*/
  status = (int32_t)XMC_ETH_MAC_WritePhy(eth_mac, phy_addr, REG_BMCR, BMCR_RESET);
 8018254:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018258:	2200      	movs	r2, #0
 801825a:	f7ff fecc 	bl	8017ff6 <XMC_ETH_MAC_WritePhy>
  if (status == (int32_t)XMC_ETH_PHY_STATUS_OK)
 801825e:	b950      	cbnz	r0, 8018276 <XMC_ETH_PHY_Reset+0x2a>
  {
    /* Wait for the reset to complete */
    do
    {
      status = XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_BMCR, &reg_bmcr);
 8018260:	f10d 0306 	add.w	r3, sp, #6
 8018264:	2200      	movs	r2, #0
 8018266:	4621      	mov	r1, r4
 8018268:	4628      	mov	r0, r5
 801826a:	f7ff fea6 	bl	8017fba <XMC_ETH_MAC_ReadPhy>
    }
    while ((reg_bmcr & BMCR_RESET) != 0);
 801826e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8018272:	2b00      	cmp	r3, #0
 8018274:	dbf4      	blt.n	8018260 <XMC_ETH_PHY_Reset+0x14>
  }

  return status;
}
 8018276:	b003      	add	sp, #12
 8018278:	bd30      	pop	{r4, r5, pc}

0801827a <XMC_ETH_PHY_Init>:
{
 801827a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801827c:	4605      	mov	r5, r0
 801827e:	460e      	mov	r6, r1
 8018280:	4617      	mov	r7, r2
  uint32_t retries = 0xffffffffUL;
 8018282:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  while (((status = XMC_ETH_PHY_IsDeviceIdValid(eth_mac, phy_addr)) != XMC_ETH_PHY_STATUS_OK) && --retries);
 8018286:	4631      	mov	r1, r6
 8018288:	4628      	mov	r0, r5
 801828a:	f7ff ffb9 	bl	8018200 <XMC_ETH_PHY_IsDeviceIdValid>
 801828e:	4603      	mov	r3, r0
 8018290:	b108      	cbz	r0, 8018296 <XMC_ETH_PHY_Init+0x1c>
 8018292:	3c01      	subs	r4, #1
 8018294:	d1f7      	bne.n	8018286 <XMC_ETH_PHY_Init+0xc>
  if (status == (int32_t)XMC_ETH_PHY_STATUS_OK)
 8018296:	b10b      	cbz	r3, 801829c <XMC_ETH_PHY_Init+0x22>
}
 8018298:	4618      	mov	r0, r3
 801829a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = XMC_ETH_PHY_Reset(eth_mac, phy_addr);
 801829c:	4631      	mov	r1, r6
 801829e:	4628      	mov	r0, r5
 80182a0:	f7ff ffd4 	bl	801824c <XMC_ETH_PHY_Reset>
    if (status == (int32_t)XMC_ETH_PHY_STATUS_OK)
 80182a4:	4603      	mov	r3, r0
 80182a6:	2800      	cmp	r0, #0
 80182a8:	d1f6      	bne.n	8018298 <XMC_ETH_PHY_Init+0x1e>
      if (config->speed == XMC_ETH_LINK_SPEED_100M)
 80182aa:	887b      	ldrh	r3, [r7, #2]
 80182ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80182b0:	d013      	beq.n	80182da <XMC_ETH_PHY_Init+0x60>
      reg_bmcr = 0U;
 80182b2:	2300      	movs	r3, #0
      if (config->duplex == XMC_ETH_LINK_DUPLEX_FULL)
 80182b4:	88ba      	ldrh	r2, [r7, #4]
 80182b6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80182ba:	d011      	beq.n	80182e0 <XMC_ETH_PHY_Init+0x66>
      if (config->enable_auto_negotiate == true)
 80182bc:	79ba      	ldrb	r2, [r7, #6]
 80182be:	b10a      	cbz	r2, 80182c4 <XMC_ETH_PHY_Init+0x4a>
        reg_bmcr |= BMCR_ANEG_EN;
 80182c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
      if (config->enable_loop_back == true)
 80182c4:	79fa      	ldrb	r2, [r7, #7]
 80182c6:	b10a      	cbz	r2, 80182cc <XMC_ETH_PHY_Init+0x52>
        reg_bmcr |= BMCR_LOOPBACK;
 80182c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
      status = (int32_t)XMC_ETH_MAC_WritePhy(eth_mac, phy_addr, REG_BMCR, reg_bmcr);
 80182cc:	2200      	movs	r2, #0
 80182ce:	4631      	mov	r1, r6
 80182d0:	4628      	mov	r0, r5
 80182d2:	f7ff fe90 	bl	8017ff6 <XMC_ETH_MAC_WritePhy>
 80182d6:	4603      	mov	r3, r0
  return status;
 80182d8:	e7de      	b.n	8018298 <XMC_ETH_PHY_Init+0x1e>
        reg_bmcr |= BMCR_SPEED_SEL;
 80182da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80182de:	e7e9      	b.n	80182b4 <XMC_ETH_PHY_Init+0x3a>
        reg_bmcr |= BMCR_DUPLEX;
 80182e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80182e4:	e7ea      	b.n	80182bc <XMC_ETH_PHY_Init+0x42>

080182e6 <XMC_ETH_PHY_GetLinkSpeed>:
  return (XMC_ETH_LINK_STATUS_t)((val & BMSR_LINK_STAT) ? XMC_ETH_LINK_STATUS_UP : XMC_ETH_LINK_STATUS_DOWN);
}

/* Get link speed */
XMC_ETH_LINK_SPEED_t XMC_ETH_PHY_GetLinkSpeed(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 80182e6:	b500      	push	{lr}
 80182e8:	b083      	sub	sp, #12
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYCTRL1, &val);
 80182ea:	f10d 0306 	add.w	r3, sp, #6
 80182ee:	221e      	movs	r2, #30
 80182f0:	f7ff fe63 	bl	8017fba <XMC_ETH_MAC_ReadPhy>

  return (XMC_ETH_LINK_SPEED_t)(((val & PHYCTRL1_OPMODE_SPEED) - 1U) ? XMC_ETH_LINK_SPEED_100M : XMC_ETH_LINK_SPEED_10M);
 80182f4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80182f8:	f003 0303 	and.w	r3, r3, #3
 80182fc:	2b01      	cmp	r3, #1
 80182fe:	d004      	beq.n	801830a <XMC_ETH_PHY_GetLinkSpeed+0x24>
 8018300:	f44f 4080 	mov.w	r0, #16384	; 0x4000
}
 8018304:	b003      	add	sp, #12
 8018306:	f85d fb04 	ldr.w	pc, [sp], #4
  return (XMC_ETH_LINK_SPEED_t)(((val & PHYCTRL1_OPMODE_SPEED) - 1U) ? XMC_ETH_LINK_SPEED_100M : XMC_ETH_LINK_SPEED_10M);
 801830a:	2000      	movs	r0, #0
 801830c:	e7fa      	b.n	8018304 <XMC_ETH_PHY_GetLinkSpeed+0x1e>

0801830e <XMC_ETH_PHY_GetLinkDuplex>:

/* Get link duplex settings */
XMC_ETH_LINK_DUPLEX_t XMC_ETH_PHY_GetLinkDuplex(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 801830e:	b500      	push	{lr}
 8018310:	b083      	sub	sp, #12
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_PHYCTRL1, &val);
 8018312:	f10d 0306 	add.w	r3, sp, #6
 8018316:	221e      	movs	r2, #30
 8018318:	f7ff fe4f 	bl	8017fba <XMC_ETH_MAC_ReadPhy>

  return (XMC_ETH_LINK_DUPLEX_t)((val & PHYCTRL1_OPMODE_DUPLEX) ? XMC_ETH_LINK_DUPLEX_FULL : XMC_ETH_LINK_DUPLEX_HALF);
 801831c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018320:	0240      	lsls	r0, r0, #9
}
 8018322:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8018326:	b003      	add	sp, #12
 8018328:	f85d fb04 	ldr.w	pc, [sp], #4

0801832c <XMC_ETH_PHY_IsAutonegotiationCompleted>:

bool XMC_ETH_PHY_IsAutonegotiationCompleted(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr)
{
 801832c:	b500      	push	{lr}
 801832e:	b083      	sub	sp, #12
  uint16_t val;

  XMC_ETH_MAC_ReadPhy(eth_mac, phy_addr, REG_BMSR, &val);
 8018330:	f10d 0306 	add.w	r3, sp, #6
 8018334:	2201      	movs	r2, #1
 8018336:	f7ff fe40 	bl	8017fba <XMC_ETH_MAC_ReadPhy>
  return ((val & BMSR_ANEG_COMPL) == BMSR_ANEG_COMPL);
 801833a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 801833e:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8018342:	b003      	add	sp, #12
 8018344:	f85d fb04 	ldr.w	pc, [sp], #4

08018348 <XMC_UART_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_InitEx(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config, bool init_brg)
{
 8018348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801834a:	4605      	mov	r5, r0
 801834c:	460e      	mov	r6, r1
 801834e:	4617      	mov	r7, r2
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8018350:	f7ed fcee 	bl	8005d30 <XMC_USIC_CH_Enable>

  if (config->oversampling != 0U)
 8018354:	7a34      	ldrb	r4, [r6, #8]
 8018356:	b904      	cbnz	r4, 801835a <XMC_UART_CH_InitEx+0x12>
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8018358:	2410      	movs	r4, #16
  {
    oversampling = (uint32_t)config->oversampling;
  }

  if (init_brg)
 801835a:	b137      	cbz	r7, 801836a <XMC_UART_CH_InitEx+0x22>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 801835c:	7933      	ldrb	r3, [r6, #4]
 801835e:	b333      	cbz	r3, 80183ae <XMC_UART_CH_InitEx+0x66>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 8018360:	4622      	mov	r2, r4
 8018362:	6831      	ldr	r1, [r6, #0]
 8018364:	4628      	mov	r0, r5
 8018366:	f7ed fc67 	bl	8005c38 <XMC_USIC_CH_SetBaudrateEx>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 801836a:	79f3      	ldrb	r3, [r6, #7]
 801836c:	1e5a      	subs	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 801836e:	0863      	lsrs	r3, r4, #1
 8018370:	3301      	adds	r3, #1
 8018372:	021b      	lsls	r3, r3, #8
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8018374:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                                    USIC_CH_PCR_ASCMode_SMD_Msk |
                                    USIC_CH_PCR_ASCMode_RSTEN_Msk | USIC_CH_PCR_ASCMode_TSTEN_Msk);
 8018378:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 801837c:	f043 0301 	orr.w	r3, r3, #1
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8018380:	63eb      	str	r3, [r5, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8018382:	7973      	ldrb	r3, [r6, #5]
 8018384:	3b01      	subs	r3, #1
 8018386:	061b      	lsls	r3, r3, #24
 8018388:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 801838c:	636b      	str	r3, [r5, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 801838e:	79b3      	ldrb	r3, [r6, #6]
 8018390:	b19b      	cbz	r3, 80183ba <XMC_UART_CH_InitEx+0x72>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8018392:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8018394:	3b01      	subs	r3, #1
 8018396:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 801839a:	636b      	str	r3, [r5, #52]	; 0x34
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 801839c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80183a0:	63ab      	str	r3, [r5, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80183a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80183a6:	64eb      	str	r3, [r5, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80183a8:	8973      	ldrh	r3, [r6, #10]
 80183aa:	642b      	str	r3, [r5, #64]	; 0x40
}
 80183ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 80183ae:	4622      	mov	r2, r4
 80183b0:	6831      	ldr	r1, [r6, #0]
 80183b2:	4628      	mov	r0, r5
 80183b4:	f7ed fbf8 	bl	8005ba8 <XMC_USIC_CH_SetBaudrate>
 80183b8:	e7d7      	b.n	801836a <XMC_UART_CH_InitEx+0x22>
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80183ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80183bc:	7972      	ldrb	r2, [r6, #5]
 80183be:	3a01      	subs	r2, #1
 80183c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80183c4:	636b      	str	r3, [r5, #52]	; 0x34
 80183c6:	e7e9      	b.n	801839c <XMC_UART_CH_InitEx+0x54>

080183c8 <XMC_UART_CH_Transmit>:
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 80183c8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80183cc:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 80183d0:	d109      	bne.n	80183e6 <XMC_UART_CH_Transmit+0x1e>
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80183d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80183d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80183d8:	d1fb      	bne.n	80183d2 <XMC_UART_CH_Transmit+0xa>
  channel->PSCR = flag;
 80183da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80183de:	64c3      	str	r3, [r0, #76]	; 0x4c

    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);

    /*Transmit data */
    channel->TBUF[0U] = data;
 80183e0:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 80183e4:	4770      	bx	lr
  }
  else
  {
    channel->IN[0U] = data;
 80183e6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
  }
}
 80183ea:	4770      	bx	lr

080183ec <XMC_UART_CH_GetReceivedData>:
uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80183ec:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80183f0:	f013 6fe0 	tst.w	r3, #117440512	; 0x7000000
 80183f4:	d102      	bne.n	80183fc <XMC_UART_CH_GetReceivedData+0x10>
  {
    retval = (uint16_t)channel->RBUF;
 80183f6:	6d40      	ldr	r0, [r0, #84]	; 0x54
 80183f8:	b280      	uxth	r0, r0
 80183fa:	4770      	bx	lr
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 80183fc:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
 8018400:	b280      	uxth	r0, r0
  }

  return retval;
}
 8018402:	4770      	bx	lr

08018404 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8018404:	b538      	push	{r3, r4, r5, lr}
 8018406:	4604      	mov	r4, r0

	if (esf != NULL) {
 8018408:	460d      	mov	r5, r1
 801840a:	b111      	cbz	r1, 8018412 <z_arm_fatal_error+0xe>
		esf_dump(esf);
 801840c:	4608      	mov	r0, r1
 801840e:	f7ed fef7 	bl	8006200 <esf_dump>
	}
	z_fatal_error(reason, esf);
 8018412:	4629      	mov	r1, r5
 8018414:	4620      	mov	r0, r4
 8018416:	f7fd f815 	bl	8015444 <z_fatal_error>
}
 801841a:	bd38      	pop	{r3, r4, r5, pc}

0801841c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 801841c:	b508      	push	{r3, lr}
 801841e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
 8018420:	6800      	ldr	r0, [r0, #0]
 8018422:	f7ff ffef 	bl	8018404 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
 8018426:	bd08      	pop	{r3, pc}

08018428 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
 8018428:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 801842a:	2100      	movs	r1, #0
 801842c:	2001      	movs	r0, #1
 801842e:	f7ff ffe9 	bl	8018404 <z_arm_fatal_error>
}
 8018432:	bd08      	pop	{r3, pc}

08018434 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
 8018434:	b508      	push	{r3, lr}
	handler();
 8018436:	f7ee f8ab 	bl	8006590 <z_SysNmiOnReset>
	z_arm_int_exit();
 801843a:	f7ee fa3b 	bl	80068b4 <z_arm_exc_exit>
}
 801843e:	bd08      	pop	{r3, pc}

08018440 <z_arm_prepare_switch_to_main>:
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 8018440:	2300      	movs	r3, #0
 8018442:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8018446:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 801844a:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 801844e:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
 8018452:	f3bf 8f6f 	isb	sy
 8018456:	f3bf 8f6f 	isb	sy
}
 801845a:	4770      	bx	lr

0801845c <memory_fault_recoverable>:
}
 801845c:	2000      	movs	r0, #0
 801845e:	4770      	bx	lr

08018460 <z_log_msg2_runtime_create>:
{
 8018460:	b510      	push	{r4, lr}
 8018462:	b086      	sub	sp, #24
	va_start(ap, fmt);
 8018464:	ac0a      	add	r4, sp, #40	; 0x28
 8018466:	9405      	str	r4, [sp, #20]
 8018468:	9402      	str	r4, [sp, #8]
 801846a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801846c:	9401      	str	r4, [sp, #4]
 801846e:	9c08      	ldr	r4, [sp, #32]
 8018470:	9400      	str	r4, [sp, #0]
 8018472:	f7ff fc87 	bl	8017d84 <z_impl_z_log_msg2_runtime_vcreate>
}
 8018476:	b006      	add	sp, #24
 8018478:	bd10      	pop	{r4, pc}

0801847a <fault_handle>:
{
 801847a:	b508      	push	{r3, lr}
	*recoverable = false;
 801847c:	2300      	movs	r3, #0
 801847e:	7013      	strb	r3, [r2, #0]
	switch (fault) {
 8018480:	1ecb      	subs	r3, r1, #3
 8018482:	2b09      	cmp	r3, #9
 8018484:	d81a      	bhi.n	80184bc <fault_handle+0x42>
 8018486:	e8df f003 	tbb	[pc, r3]
 801848a:	0905      	.short	0x0905
 801848c:	1919110d 	.word	0x1919110d
 8018490:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
 8018494:	4611      	mov	r1, r2
 8018496:	f7ee fe87 	bl	80071a8 <hard_fault>
}
 801849a:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
 801849c:	2100      	movs	r1, #0
 801849e:	f7ee fd15 	bl	8006ecc <mem_manage_fault>
		break;
 80184a2:	e7fa      	b.n	801849a <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
 80184a4:	2100      	movs	r1, #0
 80184a6:	f7ee fa13 	bl	80068d0 <bus_fault>
		break;
 80184aa:	e7f6      	b.n	801849a <fault_handle+0x20>
		reason = usage_fault(esf);
 80184ac:	f7ee fb86 	bl	8006bbc <usage_fault>
		break;
 80184b0:	e7f3      	b.n	801849a <fault_handle+0x20>
		debug_monitor(esf, recoverable);
 80184b2:	4611      	mov	r1, r2
 80184b4:	f7ee fcbe 	bl	8006e34 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80184b8:	2000      	movs	r0, #0
		break;
 80184ba:	e7ee      	b.n	801849a <fault_handle+0x20>
		reserved_exception(esf, fault);
 80184bc:	f7ee fce8 	bl	8006e90 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 80184c0:	2000      	movs	r0, #0
	return reason;
 80184c2:	e7ea      	b.n	801849a <fault_handle+0x20>

080184c4 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
 80184c4:	6843      	ldr	r3, [r0, #4]
 80184c6:	1e5a      	subs	r2, r3, #1
		&&
 80184c8:	4213      	tst	r3, r2
 80184ca:	d106      	bne.n	80184da <mpu_partition_is_valid+0x16>
		&&
 80184cc:	2b1f      	cmp	r3, #31
 80184ce:	d906      	bls.n	80184de <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
 80184d0:	6803      	ldr	r3, [r0, #0]
		&&
 80184d2:	421a      	tst	r2, r3
 80184d4:	d005      	beq.n	80184e2 <mpu_partition_is_valid+0x1e>
 80184d6:	2000      	movs	r0, #0
 80184d8:	4770      	bx	lr
 80184da:	2000      	movs	r0, #0
 80184dc:	4770      	bx	lr
 80184de:	2000      	movs	r0, #0
 80184e0:	4770      	bx	lr
 80184e2:	2001      	movs	r0, #1
}
 80184e4:	4770      	bx	lr

080184e6 <mpu_configure_region>:
{
 80184e6:	b500      	push	{lr}
 80184e8:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
 80184ea:	680b      	ldr	r3, [r1, #0]
 80184ec:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
 80184ee:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 80184f0:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
 80184f2:	2b20      	cmp	r3, #32
 80184f4:	d912      	bls.n	801851c <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
 80184f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80184fa:	d811      	bhi.n	8018520 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 80184fc:	3b01      	subs	r3, #1
 80184fe:	fab3 f383 	clz	r3, r3
 8018502:	f1c3 031f 	rsb	r3, r3, #31
 8018506:	005b      	lsls	r3, r3, #1
 8018508:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 801850c:	4313      	orrs	r3, r2
 801850e:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
 8018510:	a901      	add	r1, sp, #4
 8018512:	f7ef f855 	bl	80075c0 <region_allocate_and_init>
}
 8018516:	b005      	add	sp, #20
 8018518:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
 801851c:	2308      	movs	r3, #8
 801851e:	e7f5      	b.n	801850c <mpu_configure_region+0x26>
		return REGION_4G;
 8018520:	233e      	movs	r3, #62	; 0x3e
 8018522:	e7f3      	b.n	801850c <mpu_configure_region+0x26>

08018524 <arm_core_mpu_configure_static_mpu_regions>:
{
 8018524:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
 8018526:	f7ef f8d3 	bl	80076d0 <mpu_configure_static_mpu_regions>
}
 801852a:	bd08      	pop	{r3, pc}

0801852c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 801852c:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
 801852e:	f7ef f8d9 	bl	80076e4 <mpu_configure_dynamic_mpu_regions>
}
 8018532:	bd08      	pop	{r3, pc}

08018534 <malloc_prepare>:
}
 8018534:	2000      	movs	r0, #0
 8018536:	4770      	bx	lr

08018538 <_stdout_hook_default>:
}
 8018538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801853c:	4770      	bx	lr

0801853e <_write>:
{
 801853e:	b508      	push	{r3, lr}
 8018540:	4608      	mov	r0, r1
 8018542:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
 8018544:	f7ef f920 	bl	8007788 <z_impl_zephyr_write_stdout>
}
 8018548:	bd08      	pop	{r3, pc}

0801854a <__retarget_lock_acquire_recursive>:
{
 801854a:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
 801854c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018550:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018554:	f7fd f9e2 	bl	801591c <z_impl_k_mutex_lock>
}
 8018558:	bd08      	pop	{r3, pc}

0801855a <__retarget_lock_release_recursive>:
{
 801855a:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
 801855c:	f7fd fa68 	bl	8015a30 <z_impl_k_mutex_unlock>
}
 8018560:	bd08      	pop	{r3, pc}

08018562 <__errno>:
{
 8018562:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
 8018564:	f7fc ff08 	bl	8015378 <z_impl_z_errno>
}
 8018568:	bd08      	pop	{r3, pc}

0801856a <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
 801856a:	4770      	bx	lr

0801856c <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
 801856c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018570:	4604      	mov	r4, r0
 8018572:	460d      	mov	r5, r1
 8018574:	4617      	mov	r7, r2
 8018576:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 8018578:	7980      	ldrb	r0, [r0, #6]
 801857a:	f7ef f94f 	bl	800781c <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
 801857e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	f8d3 8000 	ldr.w	r8, [r3]
 8018586:	463a      	mov	r2, r7
 8018588:	4633      	mov	r3, r6
 801858a:	4629      	mov	r1, r5
 801858c:	4620      	mov	r0, r4
 801858e:	47c0      	blx	r8
}
 8018590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018594 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
 8018594:	b538      	push	{r3, r4, r5, lr}
 8018596:	4604      	mov	r4, r0
 8018598:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 801859a:	7980      	ldrb	r0, [r0, #6]
 801859c:	f7ef f93e 	bl	800781c <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
 80185a0:	7963      	ldrb	r3, [r4, #5]
 80185a2:	f013 0f02 	tst.w	r3, #2
 80185a6:	d105      	bne.n	80185b4 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
 80185a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	689b      	ldr	r3, [r3, #8]
 80185ae:	4629      	mov	r1, r5
 80185b0:	4620      	mov	r0, r4
 80185b2:	4798      	blx	r3
}
 80185b4:	bd38      	pop	{r3, r4, r5, pc}

080185b6 <net_buf_id>:
{
 80185b6:	b510      	push	{r4, lr}
 80185b8:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 80185ba:	7980      	ldrb	r0, [r0, #6]
 80185bc:	f7ef f92e 	bl	800781c <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
 80185c0:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80185c4:	3317      	adds	r3, #23
 80185c6:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
 80185ca:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80185cc:	1a20      	subs	r0, r4, r0
}
 80185ce:	fbb0 f0f3 	udiv	r0, r0, r3
 80185d2:	bd10      	pop	{r4, pc}

080185d4 <fixed_data_alloc>:
{
 80185d4:	b570      	push	{r4, r5, r6, lr}
 80185d6:	4604      	mov	r4, r0
 80185d8:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 80185da:	7980      	ldrb	r0, [r0, #6]
 80185dc:	f7ef f91e 	bl	800781c <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 80185e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80185e2:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
 80185e4:	682a      	ldr	r2, [r5, #0]
 80185e6:	6819      	ldr	r1, [r3, #0]
 80185e8:	428a      	cmp	r2, r1
 80185ea:	bf28      	it	cs
 80185ec:	460a      	movcs	r2, r1
 80185ee:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
 80185f0:	685d      	ldr	r5, [r3, #4]
 80185f2:	681e      	ldr	r6, [r3, #0]
 80185f4:	4620      	mov	r0, r4
 80185f6:	f7ff ffde 	bl	80185b6 <net_buf_id>
}
 80185fa:	fb00 5006 	mla	r0, r0, r6, r5
 80185fe:	bd70      	pop	{r4, r5, r6, pc}

08018600 <net_buf_reset>:
	buf->len  = 0U;
 8018600:	2300      	movs	r3, #0
 8018602:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
 8018604:	6903      	ldr	r3, [r0, #16]
 8018606:	6083      	str	r3, [r0, #8]
}
 8018608:	4770      	bx	lr

0801860a <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
 801860a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801860e:	b083      	sub	sp, #12
 8018610:	4605      	mov	r5, r0
 8018612:	9101      	str	r1, [sp, #4]
 8018614:	4616      	mov	r6, r2
 8018616:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 8018618:	4610      	mov	r0, r2
 801861a:	4619      	mov	r1, r3
 801861c:	f003 fff8 	bl	801c610 <sys_clock_timeout_end_calc>
 8018620:	4682      	mov	sl, r0
 8018622:	9100      	str	r1, [sp, #0]
	__asm__ volatile(
 8018624:	f04f 0304 	mov.w	r3, #4
 8018628:	f3ef 8211 	mrs	r2, BASEPRI
 801862c:	f383 8812 	msr	BASEPRI_MAX, r3
 8018630:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
 8018634:	8c2b      	ldrh	r3, [r5, #32]
 8018636:	2b00      	cmp	r3, #0
 8018638:	d044      	beq.n	80186c4 <net_buf_alloc_len+0xba>
 801863a:	4693      	mov	fp, r2

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
 801863c:	8bea      	ldrh	r2, [r5, #30]
 801863e:	4293      	cmp	r3, r2
 8018640:	d20b      	bcs.n	801865a <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
 8018642:	2200      	movs	r2, #0
 8018644:	2300      	movs	r3, #0
 8018646:	4628      	mov	r0, r5
 8018648:	f7fd fa36 	bl	8015ab8 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
 801864c:	4604      	mov	r4, r0
 801864e:	b120      	cbz	r0, 801865a <net_buf_alloc_len+0x50>
	__asm__ volatile(
 8018650:	f38b 8811 	msr	BASEPRI, fp
 8018654:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
 8018658:	e017      	b.n	801868a <net_buf_alloc_len+0x80>
			}
		}

		uninit_count = pool->uninit_count--;
 801865a:	8c2a      	ldrh	r2, [r5, #32]
 801865c:	1e53      	subs	r3, r2, #1
 801865e:	842b      	strh	r3, [r5, #32]
 8018660:	f38b 8811 	msr	BASEPRI, fp
 8018664:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
 8018668:	f895 4022 	ldrb.w	r4, [r5, #34]	; 0x22
 801866c:	3417      	adds	r4, #23
 801866e:	f024 0403 	bic.w	r4, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
 8018672:	8beb      	ldrh	r3, [r5, #30]
 8018674:	1a9b      	subs	r3, r3, r2
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
 8018676:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8018678:	fb03 2404 	mla	r4, r3, r4, r2
	buf->pool_id = pool_id(pool);
 801867c:	4628      	mov	r0, r5
 801867e:	f7ef f8c1 	bl	8007804 <pool_id>
 8018682:	71a0      	strb	r0, [r4, #6]
	buf->user_data_size = pool->user_data_size;
 8018684:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8018688:	71e3      	strb	r3, [r4, #7]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
 801868a:	9b01      	ldr	r3, [sp, #4]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d038      	beq.n	8018702 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 8018690:	ea56 0307 	orrs.w	r3, r6, r7
 8018694:	d005      	beq.n	80186a2 <net_buf_alloc_len+0x98>
 8018696:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801869a:	bf08      	it	eq
 801869c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 80186a0:	d11d      	bne.n	80186de <net_buf_alloc_len+0xd4>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
 80186a2:	4632      	mov	r2, r6
 80186a4:	463b      	mov	r3, r7
 80186a6:	a901      	add	r1, sp, #4
 80186a8:	4620      	mov	r0, r4
 80186aa:	f7ff ff5f 	bl	801856c <data_alloc>
 80186ae:	4605      	mov	r5, r0
 80186b0:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
 80186b2:	bb40      	cbnz	r0, 8018706 <net_buf_alloc_len+0xfc>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 80186b4:	79a0      	ldrb	r0, [r4, #6]
 80186b6:	f7ef f8b1 	bl	800781c <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
 80186ba:	4621      	mov	r1, r4
 80186bc:	f003 fc61 	bl	801bf82 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
 80186c0:	462c      	mov	r4, r5
}
 80186c2:	e02a      	b.n	801871a <net_buf_alloc_len+0x110>
 80186c4:	f382 8811 	msr	BASEPRI, r2
 80186c8:	f3bf 8f6f 	isb	sy
 80186cc:	4632      	mov	r2, r6
 80186ce:	463b      	mov	r3, r7
 80186d0:	4628      	mov	r0, r5
 80186d2:	f7fd f9f1 	bl	8015ab8 <z_impl_k_queue_get>
	if (!buf) {
 80186d6:	4604      	mov	r4, r0
 80186d8:	2800      	cmp	r0, #0
 80186da:	d1d6      	bne.n	801868a <net_buf_alloc_len+0x80>
 80186dc:	e01d      	b.n	801871a <net_buf_alloc_len+0x110>
			int64_t remaining = end - sys_clock_tick_get();
 80186de:	f7fe f981 	bl	80169e4 <sys_clock_tick_get>
 80186e2:	ebba 0800 	subs.w	r8, sl, r0
 80186e6:	9b00      	ldr	r3, [sp, #0]
 80186e8:	eb63 0901 	sbc.w	r9, r3, r1
			if (remaining <= 0) {
 80186ec:	f1b8 0f01 	cmp.w	r8, #1
 80186f0:	f179 0300 	sbcs.w	r3, r9, #0
 80186f4:	db02      	blt.n	80186fc <net_buf_alloc_len+0xf2>
				timeout = Z_TIMEOUT_TICKS(remaining);
 80186f6:	4646      	mov	r6, r8
 80186f8:	464f      	mov	r7, r9
 80186fa:	e7d2      	b.n	80186a2 <net_buf_alloc_len+0x98>
				timeout = K_NO_WAIT;
 80186fc:	2600      	movs	r6, #0
 80186fe:	2700      	movs	r7, #0
 8018700:	e7cf      	b.n	80186a2 <net_buf_alloc_len+0x98>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
 8018702:	2300      	movs	r3, #0
 8018704:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
 8018706:	2301      	movs	r3, #1
 8018708:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
 801870a:	2300      	movs	r3, #0
 801870c:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
 801870e:	6023      	str	r3, [r4, #0]
	buf->size  = size;
 8018710:	9b01      	ldr	r3, [sp, #4]
 8018712:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
 8018714:	4620      	mov	r0, r4
 8018716:	f7ff ff73 	bl	8018600 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
 801871a:	4620      	mov	r0, r4
 801871c:	b003      	add	sp, #12
 801871e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018722 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
 8018722:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
 8018724:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8018726:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
 8018728:	6809      	ldr	r1, [r1, #0]
 801872a:	f7ff ff6e 	bl	801860a <net_buf_alloc_len>
}
 801872e:	bd08      	pop	{r3, pc}

08018730 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
 8018730:	b538      	push	{r3, r4, r5, lr}
 8018732:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
 8018734:	e00f      	b.n	8018756 <net_buf_unref+0x26>
		if (--buf->ref > 0) {
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
 8018736:	4620      	mov	r0, r4
 8018738:	f7ff ff2c 	bl	8018594 <data_unref>
			buf->__buf = NULL;
 801873c:	2300      	movs	r3, #0
 801873e:	6123      	str	r3, [r4, #16]
		}

		buf->data = NULL;
 8018740:	2300      	movs	r3, #0
 8018742:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
 8018744:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
 8018746:	79a0      	ldrb	r0, [r4, #6]
 8018748:	f7ef f868 	bl	800781c <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
 801874c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801874e:	b16b      	cbz	r3, 801876c <net_buf_unref+0x3c>
			pool->destroy(buf);
 8018750:	4620      	mov	r0, r4
 8018752:	4798      	blx	r3
{
 8018754:	462c      	mov	r4, r5
	while (buf) {
 8018756:	b184      	cbz	r4, 801877a <net_buf_unref+0x4a>
		struct net_buf *frags = buf->frags;
 8018758:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
 801875a:	7923      	ldrb	r3, [r4, #4]
 801875c:	3b01      	subs	r3, #1
 801875e:	b2db      	uxtb	r3, r3
 8018760:	7123      	strb	r3, [r4, #4]
 8018762:	b953      	cbnz	r3, 801877a <net_buf_unref+0x4a>
		if (buf->__buf) {
 8018764:	6921      	ldr	r1, [r4, #16]
 8018766:	2900      	cmp	r1, #0
 8018768:	d1e5      	bne.n	8018736 <net_buf_unref+0x6>
 801876a:	e7e9      	b.n	8018740 <net_buf_unref+0x10>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
 801876c:	79a0      	ldrb	r0, [r4, #6]
 801876e:	f7ef f855 	bl	800781c <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
 8018772:	4621      	mov	r1, r4
 8018774:	f003 fc05 	bl	801bf82 <k_queue_prepend>
}
 8018778:	e7ec      	b.n	8018754 <net_buf_unref+0x24>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
 801877a:	bd38      	pop	{r3, r4, r5, pc}

0801877c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
 801877c:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
 801877e:	4618      	mov	r0, r3
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d1fb      	bne.n	801877e <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
 8018786:	4770      	bx	lr

08018788 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
 8018788:	b570      	push	{r4, r5, r6, lr}
 801878a:	4604      	mov	r4, r0
 801878c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
 801878e:	6806      	ldr	r6, [r0, #0]
 8018790:	b11e      	cbz	r6, 801879a <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
 8018792:	4608      	mov	r0, r1
 8018794:	f7ff fff2 	bl	801877c <net_buf_frag_last>
 8018798:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
 801879a:	6025      	str	r5, [r4, #0]
}
 801879c:	bd70      	pop	{r4, r5, r6, pc}

0801879e <net_buf_simple_add>:
	return buf->data + buf->len;
 801879e:	6802      	ldr	r2, [r0, #0]
 80187a0:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
 80187a2:	4419      	add	r1, r3
 80187a4:	8081      	strh	r1, [r0, #4]
	return tail;
}
 80187a6:	18d0      	adds	r0, r2, r3
 80187a8:	4770      	bx	lr

080187aa <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
 80187aa:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
 80187ac:	8882      	ldrh	r2, [r0, #4]
 80187ae:	1a52      	subs	r2, r2, r1
 80187b0:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
 80187b2:	6800      	ldr	r0, [r0, #0]
 80187b4:	4408      	add	r0, r1
 80187b6:	6018      	str	r0, [r3, #0]
}
 80187b8:	4770      	bx	lr

080187ba <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
 80187ba:	4603      	mov	r3, r0
	void *data = buf->data;
 80187bc:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
 80187be:	889a      	ldrh	r2, [r3, #4]
 80187c0:	1a52      	subs	r2, r2, r1
 80187c2:	809a      	strh	r2, [r3, #4]
	buf->data += len;
 80187c4:	4401      	add	r1, r0
 80187c6:	6019      	str	r1, [r3, #0]

	return data;
}
 80187c8:	4770      	bx	lr

080187ca <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
 80187ca:	6802      	ldr	r2, [r0, #0]
 80187cc:	6880      	ldr	r0, [r0, #8]
}
 80187ce:	1a10      	subs	r0, r2, r0
 80187d0:	4770      	bx	lr

080187d2 <net_buf_simple_max_len>:
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
}

uint16_t net_buf_simple_max_len(struct net_buf_simple *buf)
{
 80187d2:	b510      	push	{r4, lr}
	return buf->size - net_buf_simple_headroom(buf);
 80187d4:	88c4      	ldrh	r4, [r0, #6]
 80187d6:	f7ff fff8 	bl	80187ca <net_buf_simple_headroom>
 80187da:	1a20      	subs	r0, r4, r0
}
 80187dc:	b280      	uxth	r0, r0
 80187de:	bd10      	pop	{r4, pc}

080187e0 <ethernet_update_rx_stats>:
{
 80187e0:	b570      	push	{r4, r5, r6, lr}
 80187e2:	4604      	mov	r4, r0
	return pkt->frags->data;
 80187e4:	688b      	ldr	r3, [r1, #8]
 80187e6:	689e      	ldr	r6, [r3, #8]
	return iface->if_dev->dev;
 80187e8:	6803      	ldr	r3, [r0, #0]
 80187ea:	6818      	ldr	r0, [r3, #0]
	const struct ethernet_api *api = (const struct ethernet_api *)
 80187ec:	6883      	ldr	r3, [r0, #8]
	if (!api->get_stats) {
 80187ee:	685b      	ldr	r3, [r3, #4]
 80187f0:	b12b      	cbz	r3, 80187fe <ethernet_update_rx_stats+0x1e>
 80187f2:	4615      	mov	r5, r2
	stats = api->get_stats(net_if_get_device(iface));
 80187f4:	4798      	blx	r3
	if (!stats) {
 80187f6:	b110      	cbz	r0, 80187fe <ethernet_update_rx_stats+0x1e>
	stats->bytes.received += bytes;
 80187f8:	6842      	ldr	r2, [r0, #4]
 80187fa:	442a      	add	r2, r5
 80187fc:	6042      	str	r2, [r0, #4]
 80187fe:	6823      	ldr	r3, [r4, #0]
 8018800:	6818      	ldr	r0, [r3, #0]
	const struct ethernet_api *api = (const struct ethernet_api *)
 8018802:	6883      	ldr	r3, [r0, #8]
	if (!api->get_stats) {
 8018804:	685b      	ldr	r3, [r3, #4]
 8018806:	b123      	cbz	r3, 8018812 <ethernet_update_rx_stats+0x32>
	stats = api->get_stats(net_if_get_device(iface));
 8018808:	4798      	blx	r3
	if (!stats) {
 801880a:	b110      	cbz	r0, 8018812 <ethernet_update_rx_stats+0x32>
	stats->pkts.rx++;
 801880c:	68c3      	ldr	r3, [r0, #12]
 801880e:	3301      	adds	r3, #1
 8018810:	60c3      	str	r3, [r0, #12]
	if (addr->addr[0] == 0xff &&
 8018812:	7833      	ldrb	r3, [r6, #0]
 8018814:	2bff      	cmp	r3, #255	; 0xff
 8018816:	d004      	beq.n	8018822 <ethernet_update_rx_stats+0x42>
	if (addr->addr[0] == 0x33 &&
 8018818:	2b33      	cmp	r3, #51	; 0x33
 801881a:	d01e      	beq.n	801885a <ethernet_update_rx_stats+0x7a>
	if (addr->addr[0] == 0x01 &&
 801881c:	2b01      	cmp	r3, #1
 801881e:	d02c      	beq.n	801887a <ethernet_update_rx_stats+0x9a>
}
 8018820:	bd70      	pop	{r4, r5, r6, pc}
	    addr->addr[1] == 0xff &&
 8018822:	7872      	ldrb	r2, [r6, #1]
	if (addr->addr[0] == 0xff &&
 8018824:	2aff      	cmp	r2, #255	; 0xff
 8018826:	d1f7      	bne.n	8018818 <ethernet_update_rx_stats+0x38>
	    addr->addr[2] == 0xff &&
 8018828:	78b2      	ldrb	r2, [r6, #2]
	    addr->addr[1] == 0xff &&
 801882a:	2aff      	cmp	r2, #255	; 0xff
 801882c:	d1f4      	bne.n	8018818 <ethernet_update_rx_stats+0x38>
	    addr->addr[3] == 0xff &&
 801882e:	78f2      	ldrb	r2, [r6, #3]
	    addr->addr[2] == 0xff &&
 8018830:	2aff      	cmp	r2, #255	; 0xff
 8018832:	d1f1      	bne.n	8018818 <ethernet_update_rx_stats+0x38>
	    addr->addr[4] == 0xff &&
 8018834:	7932      	ldrb	r2, [r6, #4]
	    addr->addr[3] == 0xff &&
 8018836:	2aff      	cmp	r2, #255	; 0xff
 8018838:	d1ee      	bne.n	8018818 <ethernet_update_rx_stats+0x38>
	    addr->addr[5] == 0xff) {
 801883a:	7972      	ldrb	r2, [r6, #5]
	    addr->addr[4] == 0xff &&
 801883c:	2aff      	cmp	r2, #255	; 0xff
 801883e:	d1eb      	bne.n	8018818 <ethernet_update_rx_stats+0x38>
 8018840:	6823      	ldr	r3, [r4, #0]
 8018842:	6818      	ldr	r0, [r3, #0]
	const struct ethernet_api *api = (const struct ethernet_api *)
 8018844:	6883      	ldr	r3, [r0, #8]
	if (!api->get_stats) {
 8018846:	685b      	ldr	r3, [r3, #4]
 8018848:	2b00      	cmp	r3, #0
 801884a:	d0e9      	beq.n	8018820 <ethernet_update_rx_stats+0x40>
	stats = api->get_stats(net_if_get_device(iface));
 801884c:	4798      	blx	r3
	if (!stats) {
 801884e:	2800      	cmp	r0, #0
 8018850:	d0e6      	beq.n	8018820 <ethernet_update_rx_stats+0x40>
	stats->broadcast.rx++;
 8018852:	6943      	ldr	r3, [r0, #20]
 8018854:	3301      	adds	r3, #1
 8018856:	6143      	str	r3, [r0, #20]
 8018858:	e7e2      	b.n	8018820 <ethernet_update_rx_stats+0x40>
	    addr->addr[1] == 0x33) {
 801885a:	7872      	ldrb	r2, [r6, #1]
	if (addr->addr[0] == 0x33 &&
 801885c:	2a33      	cmp	r2, #51	; 0x33
 801885e:	d1dd      	bne.n	801881c <ethernet_update_rx_stats+0x3c>
 8018860:	6823      	ldr	r3, [r4, #0]
 8018862:	6818      	ldr	r0, [r3, #0]
	const struct ethernet_api *api = (const struct ethernet_api *)
 8018864:	6883      	ldr	r3, [r0, #8]
	if (!api->get_stats) {
 8018866:	685b      	ldr	r3, [r3, #4]
 8018868:	2b00      	cmp	r3, #0
 801886a:	d0d9      	beq.n	8018820 <ethernet_update_rx_stats+0x40>
	stats = api->get_stats(net_if_get_device(iface));
 801886c:	4798      	blx	r3
	if (!stats) {
 801886e:	2800      	cmp	r0, #0
 8018870:	d0d6      	beq.n	8018820 <ethernet_update_rx_stats+0x40>
	stats->multicast.rx++;
 8018872:	69c3      	ldr	r3, [r0, #28]
 8018874:	3301      	adds	r3, #1
 8018876:	61c3      	str	r3, [r0, #28]
 8018878:	e7d2      	b.n	8018820 <ethernet_update_rx_stats+0x40>
	    addr->addr[1] == 0x00 &&
 801887a:	7873      	ldrb	r3, [r6, #1]
	if (addr->addr[0] == 0x01 &&
 801887c:	2b00      	cmp	r3, #0
 801887e:	d1cf      	bne.n	8018820 <ethernet_update_rx_stats+0x40>
	    addr->addr[2] == 0x5e) {
 8018880:	78b3      	ldrb	r3, [r6, #2]
	    addr->addr[1] == 0x00 &&
 8018882:	2b5e      	cmp	r3, #94	; 0x5e
 8018884:	d1cc      	bne.n	8018820 <ethernet_update_rx_stats+0x40>
 8018886:	e7eb      	b.n	8018860 <ethernet_update_rx_stats+0x80>

08018888 <ethernet_update_tx_stats>:
{
 8018888:	b570      	push	{r4, r5, r6, lr}
 801888a:	4605      	mov	r5, r0
 801888c:	688b      	ldr	r3, [r1, #8]
 801888e:	689e      	ldr	r6, [r3, #8]
	size_t bytes = 0;
 8018890:	2400      	movs	r4, #0
	while (buf) {
 8018892:	b11b      	cbz	r3, 801889c <ethernet_update_tx_stats+0x14>
		bytes += buf->len;
 8018894:	899a      	ldrh	r2, [r3, #12]
 8018896:	4414      	add	r4, r2
		buf = buf->frags;
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	e7fa      	b.n	8018892 <ethernet_update_tx_stats+0xa>
 801889c:	682b      	ldr	r3, [r5, #0]
 801889e:	6818      	ldr	r0, [r3, #0]
	const struct ethernet_api *api = (const struct ethernet_api *)
 80188a0:	6883      	ldr	r3, [r0, #8]
	if (!api->get_stats) {
 80188a2:	685b      	ldr	r3, [r3, #4]
 80188a4:	b123      	cbz	r3, 80188b0 <ethernet_update_tx_stats+0x28>
	stats = api->get_stats(net_if_get_device(iface));
 80188a6:	4798      	blx	r3
	if (!stats) {
 80188a8:	b110      	cbz	r0, 80188b0 <ethernet_update_tx_stats+0x28>
	stats->bytes.sent += bytes;
 80188aa:	6803      	ldr	r3, [r0, #0]
 80188ac:	441c      	add	r4, r3
 80188ae:	6004      	str	r4, [r0, #0]
 80188b0:	682b      	ldr	r3, [r5, #0]
 80188b2:	6818      	ldr	r0, [r3, #0]
	const struct ethernet_api *api = (const struct ethernet_api *)
 80188b4:	6883      	ldr	r3, [r0, #8]
	if (!api->get_stats) {
 80188b6:	685b      	ldr	r3, [r3, #4]
 80188b8:	b123      	cbz	r3, 80188c4 <ethernet_update_tx_stats+0x3c>
	stats = api->get_stats(net_if_get_device(iface));
 80188ba:	4798      	blx	r3
	if (!stats) {
 80188bc:	b110      	cbz	r0, 80188c4 <ethernet_update_tx_stats+0x3c>
	stats->pkts.tx++;
 80188be:	6883      	ldr	r3, [r0, #8]
 80188c0:	3301      	adds	r3, #1
 80188c2:	6083      	str	r3, [r0, #8]
	if (addr->addr[0] == 0x33 &&
 80188c4:	7833      	ldrb	r3, [r6, #0]
 80188c6:	2b33      	cmp	r3, #51	; 0x33
 80188c8:	d004      	beq.n	80188d4 <ethernet_update_tx_stats+0x4c>
	if (addr->addr[0] == 0x01 &&
 80188ca:	2b01      	cmp	r3, #1
 80188cc:	d012      	beq.n	80188f4 <ethernet_update_tx_stats+0x6c>
	if (addr->addr[0] == 0xff &&
 80188ce:	2bff      	cmp	r3, #255	; 0xff
 80188d0:	d017      	beq.n	8018902 <ethernet_update_tx_stats+0x7a>
}
 80188d2:	bd70      	pop	{r4, r5, r6, pc}
	    addr->addr[1] == 0x33) {
 80188d4:	7872      	ldrb	r2, [r6, #1]
	if (addr->addr[0] == 0x33 &&
 80188d6:	2a33      	cmp	r2, #51	; 0x33
 80188d8:	d1f7      	bne.n	80188ca <ethernet_update_tx_stats+0x42>
 80188da:	682b      	ldr	r3, [r5, #0]
 80188dc:	6818      	ldr	r0, [r3, #0]
	const struct ethernet_api *api = (const struct ethernet_api *)
 80188de:	6883      	ldr	r3, [r0, #8]
	if (!api->get_stats) {
 80188e0:	685b      	ldr	r3, [r3, #4]
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d0f5      	beq.n	80188d2 <ethernet_update_tx_stats+0x4a>
	stats = api->get_stats(net_if_get_device(iface));
 80188e6:	4798      	blx	r3
	if (!stats) {
 80188e8:	2800      	cmp	r0, #0
 80188ea:	d0f2      	beq.n	80188d2 <ethernet_update_tx_stats+0x4a>
	stats->multicast.tx++;
 80188ec:	6983      	ldr	r3, [r0, #24]
 80188ee:	3301      	adds	r3, #1
 80188f0:	6183      	str	r3, [r0, #24]
 80188f2:	e7ee      	b.n	80188d2 <ethernet_update_tx_stats+0x4a>
	    addr->addr[1] == 0x00 &&
 80188f4:	7872      	ldrb	r2, [r6, #1]
	if (addr->addr[0] == 0x01 &&
 80188f6:	2a00      	cmp	r2, #0
 80188f8:	d1e9      	bne.n	80188ce <ethernet_update_tx_stats+0x46>
	    addr->addr[2] == 0x5e) {
 80188fa:	78b2      	ldrb	r2, [r6, #2]
	    addr->addr[1] == 0x00 &&
 80188fc:	2a5e      	cmp	r2, #94	; 0x5e
 80188fe:	d1e6      	bne.n	80188ce <ethernet_update_tx_stats+0x46>
 8018900:	e7eb      	b.n	80188da <ethernet_update_tx_stats+0x52>
	    addr->addr[1] == 0xff &&
 8018902:	7873      	ldrb	r3, [r6, #1]
	if (addr->addr[0] == 0xff &&
 8018904:	2bff      	cmp	r3, #255	; 0xff
 8018906:	d1e4      	bne.n	80188d2 <ethernet_update_tx_stats+0x4a>
	    addr->addr[2] == 0xff &&
 8018908:	78b3      	ldrb	r3, [r6, #2]
	    addr->addr[1] == 0xff &&
 801890a:	2bff      	cmp	r3, #255	; 0xff
 801890c:	d1e1      	bne.n	80188d2 <ethernet_update_tx_stats+0x4a>
	    addr->addr[3] == 0xff &&
 801890e:	78f3      	ldrb	r3, [r6, #3]
	    addr->addr[2] == 0xff &&
 8018910:	2bff      	cmp	r3, #255	; 0xff
 8018912:	d1de      	bne.n	80188d2 <ethernet_update_tx_stats+0x4a>
	    addr->addr[4] == 0xff &&
 8018914:	7933      	ldrb	r3, [r6, #4]
	    addr->addr[3] == 0xff &&
 8018916:	2bff      	cmp	r3, #255	; 0xff
 8018918:	d1db      	bne.n	80188d2 <ethernet_update_tx_stats+0x4a>
	    addr->addr[5] == 0xff) {
 801891a:	7973      	ldrb	r3, [r6, #5]
	    addr->addr[4] == 0xff &&
 801891c:	2bff      	cmp	r3, #255	; 0xff
 801891e:	d1d8      	bne.n	80188d2 <ethernet_update_tx_stats+0x4a>
 8018920:	682b      	ldr	r3, [r5, #0]
 8018922:	6818      	ldr	r0, [r3, #0]
	const struct ethernet_api *api = (const struct ethernet_api *)
 8018924:	6883      	ldr	r3, [r0, #8]
	if (!api->get_stats) {
 8018926:	685b      	ldr	r3, [r3, #4]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d0d2      	beq.n	80188d2 <ethernet_update_tx_stats+0x4a>
	stats = api->get_stats(net_if_get_device(iface));
 801892c:	4798      	blx	r3
	if (!stats) {
 801892e:	2800      	cmp	r0, #0
 8018930:	d0cf      	beq.n	80188d2 <ethernet_update_tx_stats+0x4a>
	stats->broadcast.tx++;
 8018932:	6903      	ldr	r3, [r0, #16]
 8018934:	3301      	adds	r3, #1
 8018936:	6103      	str	r3, [r0, #16]
 8018938:	e7cb      	b.n	80188d2 <ethernet_update_tx_stats+0x4a>

0801893a <ethernet_flags>:
	return iface->if_dev->l2_data;
 801893a:	6803      	ldr	r3, [r0, #0]
 801893c:	689b      	ldr	r3, [r3, #8]
}
 801893e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8018942:	4770      	bx	lr

08018944 <ethernet_enable>:
{
 8018944:	b538      	push	{r3, r4, r5, lr}
 8018946:	4604      	mov	r4, r0
	return iface->if_dev->dev;
 8018948:	6803      	ldr	r3, [r0, #0]
 801894a:	6818      	ldr	r0, [r3, #0]
	const struct ethernet_api *eth =
 801894c:	6885      	ldr	r5, [r0, #8]
	if (!eth) {
 801894e:	b17d      	cbz	r5, 8018970 <ethernet_enable+0x2c>
	if (!state) {
 8018950:	b121      	cbz	r1, 801895c <ethernet_enable+0x18>
		if (eth->start) {
 8018952:	68ab      	ldr	r3, [r5, #8]
 8018954:	b18b      	cbz	r3, 801897a <ethernet_enable+0x36>
			eth->start(net_if_get_device(iface));
 8018956:	4798      	blx	r3
	return 0;
 8018958:	2000      	movs	r0, #0
}
 801895a:	bd38      	pop	{r3, r4, r5, pc}
		net_arp_clear_cache(iface);
 801895c:	4620      	mov	r0, r4
 801895e:	f7ef fb05 	bl	8007f6c <net_arp_clear_cache>
		if (eth->stop) {
 8018962:	68eb      	ldr	r3, [r5, #12]
 8018964:	b13b      	cbz	r3, 8018976 <ethernet_enable+0x32>
 8018966:	6822      	ldr	r2, [r4, #0]
			eth->stop(net_if_get_device(iface));
 8018968:	6810      	ldr	r0, [r2, #0]
 801896a:	4798      	blx	r3
	return 0;
 801896c:	2000      	movs	r0, #0
 801896e:	e7f4      	b.n	801895a <ethernet_enable+0x16>
		return -ENOENT;
 8018970:	f06f 0001 	mvn.w	r0, #1
 8018974:	e7f1      	b.n	801895a <ethernet_enable+0x16>
	return 0;
 8018976:	2000      	movs	r0, #0
 8018978:	e7ef      	b.n	801895a <ethernet_enable+0x16>
 801897a:	2000      	movs	r0, #0
 801897c:	e7ed      	b.n	801895a <ethernet_enable+0x16>

0801897e <ethernet_remove_l2_header>:
{
 801897e:	b508      	push	{r3, lr}
 8018980:	4603      	mov	r3, r0
	buf = pkt->buffer;
 8018982:	6880      	ldr	r0, [r0, #8]
	pkt->buffer = buf->frags;
 8018984:	6802      	ldr	r2, [r0, #0]
 8018986:	609a      	str	r2, [r3, #8]
	buf->frags = NULL;
 8018988:	2300      	movs	r3, #0
 801898a:	6003      	str	r3, [r0, #0]
	net_pkt_frag_unref(buf);
 801898c:	f001 fcfe 	bl	801a38c <net_pkt_frag_unref>
}
 8018990:	bd08      	pop	{r3, pc}

08018992 <ethernet_recv>:
{
 8018992:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018996:	4606      	mov	r6, r0
 8018998:	6888      	ldr	r0, [r1, #8]
 801899a:	6887      	ldr	r7, [r0, #8]
	if (hdr == NULL || pkt->buffer->len < hdr_len) {
 801899c:	2f00      	cmp	r7, #0
 801899e:	f000 80ac 	beq.w	8018afa <ethernet_recv+0x168>
 80189a2:	460c      	mov	r4, r1
 80189a4:	8983      	ldrh	r3, [r0, #12]
 80189a6:	2b0d      	cmp	r3, #13
 80189a8:	f240 80a7 	bls.w	8018afa <ethernet_recv+0x168>
	type = ntohs(hdr->type);
 80189ac:	89bb      	ldrh	r3, [r7, #12]
 80189ae:	0a1d      	lsrs	r5, r3, #8
 80189b0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 80189b4:	b2ad      	uxth	r5, r5
	switch (type) {
 80189b6:	f648 03cc 	movw	r3, #35020	; 0x88cc
 80189ba:	429d      	cmp	r5, r3
 80189bc:	d057      	beq.n	8018a6e <ethernet_recv+0xdc>
 80189be:	d816      	bhi.n	80189ee <ethernet_recv+0x5c>
 80189c0:	f248 63dd 	movw	r3, #34525	; 0x86dd
 80189c4:	429d      	cmp	r5, r3
 80189c6:	d049      	beq.n	8018a5c <ethernet_recv+0xca>
 80189c8:	f200 8097 	bhi.w	8018afa <ethernet_recv+0x168>
 80189cc:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80189d0:	d004      	beq.n	80189dc <ethernet_recv+0x4a>
 80189d2:	f640 0306 	movw	r3, #2054	; 0x806
 80189d6:	429d      	cmp	r5, r3
 80189d8:	f040 808f 	bne.w	8018afa <ethernet_recv+0x168>
	pkt->family = family;
 80189dc:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 80189e0:	f04f 0801 	mov.w	r8, #1
 80189e4:	f368 0343 	bfi	r3, r8, #1, #3
 80189e8:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		break;
 80189ec:	e006      	b.n	80189fc <ethernet_recv+0x6a>
	switch (type) {
 80189ee:	f648 03f7 	movw	r3, #35063	; 0x88f7
 80189f2:	429d      	cmp	r5, r3
 80189f4:	f040 8081 	bne.w	8018afa <ethernet_recv+0x168>
 80189f8:	f04f 0800 	mov.w	r8, #0
	lladdr->addr = hdr->src.addr;
 80189fc:	1dbb      	adds	r3, r7, #6
 80189fe:	6363      	str	r3, [r4, #52]	; 0x34
	lladdr->len = sizeof(struct net_eth_addr);
 8018a00:	2206      	movs	r2, #6
 8018a02:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	lladdr->type = NET_LINK_ETHERNET;
 8018a06:	2303      	movs	r3, #3
 8018a08:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	return &pkt->lladdr_dst;
 8018a0c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
	lladdr->addr = hdr->dst.addr;
 8018a10:	63e7      	str	r7, [r4, #60]	; 0x3c
	lladdr->len = sizeof(struct net_eth_addr);
 8018a12:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
	lladdr->type = NET_LINK_ETHERNET;
 8018a16:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
	if (addr->addr[0] == 0xff &&
 8018a1a:	783b      	ldrb	r3, [r7, #0]
 8018a1c:	2bff      	cmp	r3, #255	; 0xff
 8018a1e:	d02f      	beq.n	8018a80 <ethernet_recv+0xee>
	if (addr->addr[0] == 0x33 &&
 8018a20:	2b33      	cmp	r3, #51	; 0x33
 8018a22:	d03d      	beq.n	8018aa0 <ethernet_recv+0x10e>
	if (addr->addr[0] == 0x01 &&
 8018a24:	2b01      	cmp	r3, #1
 8018a26:	d03f      	beq.n	8018aa8 <ethernet_recv+0x116>
	if (addr->addr[0] == 0x01 &&
 8018a28:	2b01      	cmp	r3, #1
 8018a2a:	d044      	beq.n	8018ab6 <ethernet_recv+0x124>
	return &iface->if_dev->link_addr;
 8018a2c:	6833      	ldr	r3, [r6, #0]
	if (!lladdr1 || !lladdr2) {
 8018a2e:	f113 0210 	adds.w	r2, r3, #16
 8018a32:	d058      	beq.n	8018ae6 <ethernet_recv+0x154>
 8018a34:	2900      	cmp	r1, #0
 8018a36:	d058      	beq.n	8018aea <ethernet_recv+0x158>
	if (lladdr1->len != lladdr2->len) {
 8018a38:	7912      	ldrb	r2, [r2, #4]
 8018a3a:	7909      	ldrb	r1, [r1, #4]
 8018a3c:	428a      	cmp	r2, r1
 8018a3e:	d04a      	beq.n	8018ad6 <ethernet_recv+0x144>
		return false;
 8018a40:	2000      	movs	r0, #0
		    (struct net_eth_addr *)lladdr->addr) &&
 8018a42:	2800      	cmp	r0, #0
 8018a44:	d059      	beq.n	8018afa <ethernet_recv+0x168>
	net_buf_pull(pkt->frags, hdr_len);
 8018a46:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_pull(&buf->b, len);
 8018a48:	210e      	movs	r1, #14
 8018a4a:	3008      	adds	r0, #8
 8018a4c:	f7ff fead 	bl	80187aa <net_buf_simple_pull>
	if (IS_ENABLED(CONFIG_NET_IPV4) && type == NET_ETH_PTYPE_IP &&
 8018a50:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8018a54:	d04b      	beq.n	8018aee <ethernet_recv+0x15c>
	return net_buf_frags_len(pkt->frags);
 8018a56:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
 8018a58:	2200      	movs	r2, #0
	while (buf) {
 8018a5a:	e0a2      	b.n	8018ba2 <ethernet_recv+0x210>
	pkt->family = family;
 8018a5c:	f891 304b 	ldrb.w	r3, [r1, #75]	; 0x4b
 8018a60:	f04f 0802 	mov.w	r8, #2
 8018a64:	f368 0343 	bfi	r3, r8, #1, #3
 8018a68:	f881 304b 	strb.w	r3, [r1, #75]	; 0x4b
		break;
 8018a6c:	e7c6      	b.n	80189fc <ethernet_recv+0x6a>
	return net_buf_simple_pull(&buf->b, len);
 8018a6e:	210e      	movs	r1, #14
 8018a70:	3008      	adds	r0, #8
 8018a72:	f7ff fe9a 	bl	80187aa <net_buf_simple_pull>
		return net_lldp_recv(iface, pkt);
 8018a76:	4621      	mov	r1, r4
 8018a78:	4630      	mov	r0, r6
 8018a7a:	f000 fd0d 	bl	8019498 <net_lldp_recv>
 8018a7e:	e048      	b.n	8018b12 <ethernet_recv+0x180>
	    addr->addr[1] == 0xff &&
 8018a80:	787a      	ldrb	r2, [r7, #1]
	if (addr->addr[0] == 0xff &&
 8018a82:	2aff      	cmp	r2, #255	; 0xff
 8018a84:	d1cc      	bne.n	8018a20 <ethernet_recv+0x8e>
	    addr->addr[2] == 0xff &&
 8018a86:	78ba      	ldrb	r2, [r7, #2]
	    addr->addr[1] == 0xff &&
 8018a88:	2aff      	cmp	r2, #255	; 0xff
 8018a8a:	d1c9      	bne.n	8018a20 <ethernet_recv+0x8e>
	    addr->addr[3] == 0xff &&
 8018a8c:	78fa      	ldrb	r2, [r7, #3]
	    addr->addr[2] == 0xff &&
 8018a8e:	2aff      	cmp	r2, #255	; 0xff
 8018a90:	d1c6      	bne.n	8018a20 <ethernet_recv+0x8e>
	    addr->addr[4] == 0xff &&
 8018a92:	793a      	ldrb	r2, [r7, #4]
	    addr->addr[3] == 0xff &&
 8018a94:	2aff      	cmp	r2, #255	; 0xff
 8018a96:	d1c3      	bne.n	8018a20 <ethernet_recv+0x8e>
	    addr->addr[5] == 0xff) {
 8018a98:	797a      	ldrb	r2, [r7, #5]
	    addr->addr[4] == 0xff &&
 8018a9a:	2aff      	cmp	r2, #255	; 0xff
 8018a9c:	d1c0      	bne.n	8018a20 <ethernet_recv+0x8e>
 8018a9e:	e7d2      	b.n	8018a46 <ethernet_recv+0xb4>
	    addr->addr[1] == 0x33) {
 8018aa0:	787a      	ldrb	r2, [r7, #1]
	if (addr->addr[0] == 0x33 &&
 8018aa2:	2a33      	cmp	r2, #51	; 0x33
 8018aa4:	d1be      	bne.n	8018a24 <ethernet_recv+0x92>
 8018aa6:	e7ce      	b.n	8018a46 <ethernet_recv+0xb4>
	    addr->addr[1] == 0x00 &&
 8018aa8:	787a      	ldrb	r2, [r7, #1]
	if (addr->addr[0] == 0x01 &&
 8018aaa:	2a00      	cmp	r2, #0
 8018aac:	d1bc      	bne.n	8018a28 <ethernet_recv+0x96>
	    addr->addr[2] == 0x5e) {
 8018aae:	78ba      	ldrb	r2, [r7, #2]
	    addr->addr[1] == 0x00 &&
 8018ab0:	2a5e      	cmp	r2, #94	; 0x5e
 8018ab2:	d1b9      	bne.n	8018a28 <ethernet_recv+0x96>
 8018ab4:	e7c7      	b.n	8018a46 <ethernet_recv+0xb4>
	    addr->addr[1] == 0x80 &&
 8018ab6:	787b      	ldrb	r3, [r7, #1]
	if (addr->addr[0] == 0x01 &&
 8018ab8:	2b80      	cmp	r3, #128	; 0x80
 8018aba:	d1b7      	bne.n	8018a2c <ethernet_recv+0x9a>
	    addr->addr[2] == 0xc2 &&
 8018abc:	78bb      	ldrb	r3, [r7, #2]
	    addr->addr[1] == 0x80 &&
 8018abe:	2bc2      	cmp	r3, #194	; 0xc2
 8018ac0:	d1b4      	bne.n	8018a2c <ethernet_recv+0x9a>
	    addr->addr[3] == 0x00 &&
 8018ac2:	78fb      	ldrb	r3, [r7, #3]
	    addr->addr[2] == 0xc2 &&
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d1b1      	bne.n	8018a2c <ethernet_recv+0x9a>
	    addr->addr[4] == 0x00 &&
 8018ac8:	793b      	ldrb	r3, [r7, #4]
	    addr->addr[3] == 0x00 &&
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d1ae      	bne.n	8018a2c <ethernet_recv+0x9a>
	    addr->addr[5] == 0x0e) {
 8018ace:	797b      	ldrb	r3, [r7, #5]
	    addr->addr[4] == 0x00 &&
 8018ad0:	2b0e      	cmp	r3, #14
 8018ad2:	d1ab      	bne.n	8018a2c <ethernet_recv+0x9a>
 8018ad4:	e7b7      	b.n	8018a46 <ethernet_recv+0xb4>
	return !memcmp(lladdr1->addr, lladdr2->addr, lladdr1->len);
 8018ad6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8018ad8:	6918      	ldr	r0, [r3, #16]
 8018ada:	f003 fe9f 	bl	801c81c <memcmp>
 8018ade:	fab0 f080 	clz	r0, r0
 8018ae2:	0940      	lsrs	r0, r0, #5
 8018ae4:	e7ad      	b.n	8018a42 <ethernet_recv+0xb0>
		return false;
 8018ae6:	2000      	movs	r0, #0
 8018ae8:	e7ab      	b.n	8018a42 <ethernet_recv+0xb0>
 8018aea:	2000      	movs	r0, #0
 8018aec:	e7a9      	b.n	8018a42 <ethernet_recv+0xb0>
	if (addr->addr[0] == 0xff &&
 8018aee:	783b      	ldrb	r3, [r7, #0]
 8018af0:	2bff      	cmp	r3, #255	; 0xff
 8018af2:	d010      	beq.n	8018b16 <ethernet_recv+0x184>
	return NET_OK;
 8018af4:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_NET_IPV4) && type == NET_ETH_PTYPE_IP &&
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d0ad      	beq.n	8018a56 <ethernet_recv+0xc4>
	if (!iface) {
 8018afa:	b14e      	cbz	r6, 8018b10 <ethernet_recv+0x17e>
	return iface->if_dev->dev;
 8018afc:	6833      	ldr	r3, [r6, #0]
 8018afe:	6818      	ldr	r0, [r3, #0]
	api = ((const struct ethernet_api *)
 8018b00:	6883      	ldr	r3, [r0, #8]
	if (!api->get_stats) {
 8018b02:	685b      	ldr	r3, [r3, #4]
 8018b04:	b123      	cbz	r3, 8018b10 <ethernet_recv+0x17e>
	stats = api->get_stats(net_if_get_device(iface));
 8018b06:	4798      	blx	r3
	if (!stats) {
 8018b08:	b110      	cbz	r0, 8018b10 <ethernet_recv+0x17e>
	stats->errors.rx++;
 8018b0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018b0c:	3301      	adds	r3, #1
 8018b0e:	6243      	str	r3, [r0, #36]	; 0x24
	return NET_DROP;
 8018b10:	2002      	movs	r0, #2
}
 8018b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    addr->addr[1] == 0xff &&
 8018b16:	787b      	ldrb	r3, [r7, #1]
	if (addr->addr[0] == 0xff &&
 8018b18:	2bff      	cmp	r3, #255	; 0xff
 8018b1a:	d001      	beq.n	8018b20 <ethernet_recv+0x18e>
	return NET_OK;
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	e7ea      	b.n	8018af6 <ethernet_recv+0x164>
	    addr->addr[2] == 0xff &&
 8018b20:	78bb      	ldrb	r3, [r7, #2]
	    addr->addr[1] == 0xff &&
 8018b22:	2bff      	cmp	r3, #255	; 0xff
 8018b24:	d001      	beq.n	8018b2a <ethernet_recv+0x198>
 8018b26:	2300      	movs	r3, #0
 8018b28:	e7e5      	b.n	8018af6 <ethernet_recv+0x164>
	    addr->addr[3] == 0xff &&
 8018b2a:	78fb      	ldrb	r3, [r7, #3]
	    addr->addr[2] == 0xff &&
 8018b2c:	2bff      	cmp	r3, #255	; 0xff
 8018b2e:	d001      	beq.n	8018b34 <ethernet_recv+0x1a2>
 8018b30:	2300      	movs	r3, #0
 8018b32:	e7e0      	b.n	8018af6 <ethernet_recv+0x164>
	    addr->addr[4] == 0xff &&
 8018b34:	793b      	ldrb	r3, [r7, #4]
	    addr->addr[3] == 0xff &&
 8018b36:	2bff      	cmp	r3, #255	; 0xff
 8018b38:	d001      	beq.n	8018b3e <ethernet_recv+0x1ac>
 8018b3a:	2300      	movs	r3, #0
 8018b3c:	e7db      	b.n	8018af6 <ethernet_recv+0x164>
	    addr->addr[5] == 0xff) {
 8018b3e:	797b      	ldrb	r3, [r7, #5]
	    addr->addr[4] == 0xff &&
 8018b40:	2bff      	cmp	r3, #255	; 0xff
 8018b42:	d001      	beq.n	8018b48 <ethernet_recv+0x1b6>
 8018b44:	2300      	movs	r3, #0
 8018b46:	e7d6      	b.n	8018af6 <ethernet_recv+0x164>
	return pkt->frags->data;
 8018b48:	68a3      	ldr	r3, [r4, #8]
 8018b4a:	6899      	ldr	r1, [r3, #8]
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
 8018b4c:	690a      	ldr	r2, [r1, #16]
 8018b4e:	0a13      	lsrs	r3, r2, #8
 8018b50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018b54:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8018b58:	0210      	lsls	r0, r2, #8
 8018b5a:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
 8018b5e:	4303      	orrs	r3, r0
 8018b60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8018b64:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
	if (net_eth_is_addr_broadcast(&hdr->dst) &&
 8018b68:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8018b6c:	d101      	bne.n	8018b72 <ethernet_recv+0x1e0>
	return NET_OK;
 8018b6e:	2300      	movs	r3, #0
 8018b70:	e7c1      	b.n	8018af6 <ethernet_recv+0x164>
	return pkt->iface;
 8018b72:	f8d4 a018 	ldr.w	sl, [r4, #24]
				     (struct in_addr *)NET_IPV4_HDR(pkt)->dst))) {
 8018b76:	4689      	mov	r9, r1
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8018b78:	f7f6 fd14 	bl	800f5a4 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8018b7c:	f859 2f10 	ldr.w	r2, [r9, #16]!
 8018b80:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8018b82:	429a      	cmp	r2, r3
 8018b84:	d006      	beq.n	8018b94 <ethernet_recv+0x202>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 8018b86:	4649      	mov	r1, r9
 8018b88:	4650      	mov	r0, sl
 8018b8a:	f7f5 ff59 	bl	800ea40 <net_if_ipv4_is_addr_bcast>
	    !(net_ipv4_is_addr_mcast((struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
 8018b8e:	b118      	cbz	r0, 8018b98 <ethernet_recv+0x206>
	return NET_OK;
 8018b90:	2300      	movs	r3, #0
 8018b92:	e7b0      	b.n	8018af6 <ethernet_recv+0x164>
		return true;
 8018b94:	2001      	movs	r0, #1
 8018b96:	e7fa      	b.n	8018b8e <ethernet_recv+0x1fc>
		return NET_DROP;
 8018b98:	2302      	movs	r3, #2
 8018b9a:	e7ac      	b.n	8018af6 <ethernet_recv+0x164>
		bytes += buf->len;
 8018b9c:	8999      	ldrh	r1, [r3, #12]
 8018b9e:	440a      	add	r2, r1
		buf = buf->frags;
 8018ba0:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d1fa      	bne.n	8018b9c <ethernet_recv+0x20a>
	ethernet_update_rx_stats(iface, pkt, net_pkt_get_len(pkt) + hdr_len);
 8018ba6:	320e      	adds	r2, #14
 8018ba8:	4621      	mov	r1, r4
 8018baa:	4630      	mov	r0, r6
 8018bac:	f7ff fe18 	bl	80187e0 <ethernet_update_rx_stats>
	if (IS_ENABLED(CONFIG_NET_ARP) &&
 8018bb0:	f1b8 0f01 	cmp.w	r8, #1
 8018bb4:	d016      	beq.n	8018be4 <ethernet_recv+0x252>
	if (IS_ENABLED(CONFIG_NET_GPTP) && type == NET_ETH_PTYPE_PTP) {
 8018bb6:	f648 03f7 	movw	r3, #35063	; 0x88f7
 8018bba:	429d      	cmp	r5, r3
 8018bbc:	d01b      	beq.n	8018bf6 <ethernet_recv+0x264>
	return pkt->family;
 8018bbe:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8018bc2:	f3c3 0342 	ubfx	r3, r3, #1, #3
	if (net_pkt_family(pkt) == AF_INET) {
 8018bc6:	2b01      	cmp	r3, #1
 8018bc8:	d01a      	beq.n	8018c00 <ethernet_recv+0x26e>
	return pkt->frags->data;
 8018bca:	68a3      	ldr	r3, [r4, #8]
 8018bcc:	689b      	ldr	r3, [r3, #8]
		len = ntohs(NET_IPV6_HDR(pkt)->len) + NET_IPV6H_LEN;
 8018bce:	889a      	ldrh	r2, [r3, #4]
 8018bd0:	0213      	lsls	r3, r2, #8
 8018bd2:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 8018bd6:	b29b      	uxth	r3, r3
 8018bd8:	3328      	adds	r3, #40	; 0x28
 8018bda:	b29b      	uxth	r3, r3
	if (len < NET_ETH_MINIMAL_FRAME_SIZE - sizeof(struct net_eth_hdr)) {
 8018bdc:	2b2d      	cmp	r3, #45	; 0x2d
 8018bde:	d821      	bhi.n	8018c24 <ethernet_recv+0x292>
		for (frag = pkt->frags; frag; frag = frag->frags) {
 8018be0:	68a2      	ldr	r2, [r4, #8]
 8018be2:	e018      	b.n	8018c16 <ethernet_recv+0x284>
	    family == AF_INET && type == NET_ETH_PTYPE_ARP) {
 8018be4:	f640 0306 	movw	r3, #2054	; 0x806
 8018be8:	429d      	cmp	r5, r3
 8018bea:	d1e4      	bne.n	8018bb6 <ethernet_recv+0x224>
		return net_arp_input(pkt, hdr);
 8018bec:	4639      	mov	r1, r7
 8018bee:	4620      	mov	r0, r4
 8018bf0:	f000 f932 	bl	8018e58 <net_arp_input>
 8018bf4:	e78d      	b.n	8018b12 <ethernet_recv+0x180>
		return net_gptp_recv(iface, pkt);
 8018bf6:	4621      	mov	r1, r4
 8018bf8:	4630      	mov	r0, r6
 8018bfa:	f7ef fd05 	bl	8008608 <net_gptp_recv>
 8018bfe:	e788      	b.n	8018b12 <ethernet_recv+0x180>
 8018c00:	68a3      	ldr	r3, [r4, #8]
 8018c02:	689b      	ldr	r3, [r3, #8]
		len = ntohs(NET_IPV4_HDR(pkt)->len);
 8018c04:	885a      	ldrh	r2, [r3, #2]
 8018c06:	0213      	lsls	r3, r2, #8
 8018c08:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 8018c0c:	b29b      	uxth	r3, r3
 8018c0e:	e7e5      	b.n	8018bdc <ethernet_recv+0x24a>
				frag->len = len;
 8018c10:	8193      	strh	r3, [r2, #12]
				len = 0U;
 8018c12:	2300      	movs	r3, #0
		for (frag = pkt->frags; frag; frag = frag->frags) {
 8018c14:	6812      	ldr	r2, [r2, #0]
 8018c16:	b12a      	cbz	r2, 8018c24 <ethernet_recv+0x292>
			if (frag->len < len) {
 8018c18:	8991      	ldrh	r1, [r2, #12]
 8018c1a:	4299      	cmp	r1, r3
 8018c1c:	d2f8      	bcs.n	8018c10 <ethernet_recv+0x27e>
				len -= frag->len;
 8018c1e:	1a5b      	subs	r3, r3, r1
 8018c20:	b29b      	uxth	r3, r3
 8018c22:	e7f7      	b.n	8018c14 <ethernet_recv+0x282>
	return NET_CONTINUE;
 8018c24:	2001      	movs	r0, #1
}
 8018c26:	e774      	b.n	8018b12 <ethernet_recv+0x180>

08018c28 <carrier_on_off>:
{
 8018c28:	b508      	push	{r3, lr}
	if (ctx->iface == NULL) {
 8018c2a:	6903      	ldr	r3, [r0, #16]
 8018c2c:	b1bb      	cbz	r3, 8018c5e <carrier_on_off+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 8018c2e:	f3bf 8f5b 	dmb	ish
 8018c32:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018c36:	f3bf 8f5b 	dmb	ish
 8018c3a:	f003 0101 	and.w	r1, r3, #1
	if (eth_carrier_up == ctx->is_net_carrier_up) {
 8018c3e:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
 8018c42:	f002 0201 	and.w	r2, r2, #1
 8018c46:	428a      	cmp	r2, r1
 8018c48:	d009      	beq.n	8018c5e <carrier_on_off+0x36>
	ctx->is_net_carrier_up = eth_carrier_up;
 8018c4a:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
 8018c4e:	f361 0200 	bfi	r2, r1, #0, #1
 8018c52:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
	if (eth_carrier_up) {
 8018c56:	b119      	cbz	r1, 8018c60 <carrier_on_off+0x38>
		net_if_up(ctx->iface);
 8018c58:	6900      	ldr	r0, [r0, #16]
 8018c5a:	f7f6 fa1d 	bl	800f098 <net_if_up>
}
 8018c5e:	bd08      	pop	{r3, pc}
		net_if_carrier_down(ctx->iface);
 8018c60:	6900      	ldr	r0, [r0, #16]
 8018c62:	f7f6 fa6b 	bl	800f13c <net_if_carrier_down>
 8018c66:	e7fa      	b.n	8018c5e <carrier_on_off+0x36>

08018c68 <ethernet_ll_prepare_on_ipv4>:
{
 8018c68:	b570      	push	{r4, r5, r6, lr}
 8018c6a:	460c      	mov	r4, r1
	return pkt->iface;
 8018c6c:	698e      	ldr	r6, [r1, #24]
	return pkt->frags->data;
 8018c6e:	688b      	ldr	r3, [r1, #8]
				   (struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
 8018c70:	689d      	ldr	r5, [r3, #8]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8018c72:	f7f6 fc97 	bl	800f5a4 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8018c76:	f855 2f10 	ldr.w	r2, [r5, #16]!
 8018c7a:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 8018c7c:	429a      	cmp	r2, r3
 8018c7e:	d01a      	beq.n	8018cb6 <ethernet_ll_prepare_on_ipv4+0x4e>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 8018c80:	4629      	mov	r1, r5
 8018c82:	4630      	mov	r0, r6
 8018c84:	f7f5 fedc 	bl	800ea40 <net_if_ipv4_is_addr_bcast>
	if (net_ipv4_is_addr_bcast(net_pkt_iface(pkt),
 8018c88:	b9b8      	cbnz	r0, 8018cba <ethernet_ll_prepare_on_ipv4+0x52>
 8018c8a:	68a3      	ldr	r3, [r4, #8]
 8018c8c:	689b      	ldr	r3, [r3, #8]
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
 8018c8e:	691a      	ldr	r2, [r3, #16]
 8018c90:	0a13      	lsrs	r3, r2, #8
 8018c92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018c96:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8018c9a:	0211      	lsls	r1, r2, #8
 8018c9c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8018ca0:	430b      	orrs	r3, r1
 8018ca2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8018ca6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
				   (struct in_addr *)NET_IPV4_HDR(pkt)->dst) ||
 8018caa:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8018cae:	d006      	beq.n	8018cbe <ethernet_ll_prepare_on_ipv4+0x56>
	if (ethernet_ipv4_dst_is_broadcast_or_mcast(pkt)) {
 8018cb0:	b138      	cbz	r0, 8018cc2 <ethernet_ll_prepare_on_ipv4+0x5a>
}
 8018cb2:	4620      	mov	r0, r4
 8018cb4:	bd70      	pop	{r4, r5, r6, pc}
		return true;
 8018cb6:	2001      	movs	r0, #1
 8018cb8:	e7e6      	b.n	8018c88 <ethernet_ll_prepare_on_ipv4+0x20>
		return true;
 8018cba:	2001      	movs	r0, #1
 8018cbc:	e7f8      	b.n	8018cb0 <ethernet_ll_prepare_on_ipv4+0x48>
 8018cbe:	2001      	movs	r0, #1
 8018cc0:	e7f6      	b.n	8018cb0 <ethernet_ll_prepare_on_ipv4+0x48>
 8018cc2:	68a3      	ldr	r3, [r4, #8]
 8018cc4:	6899      	ldr	r1, [r3, #8]
		arp_pkt = net_arp_prepare(pkt, (struct in_addr *)NET_IPV4_HDR(pkt)->dst, NULL);
 8018cc6:	2200      	movs	r2, #0
 8018cc8:	3110      	adds	r1, #16
 8018cca:	4620      	mov	r0, r4
 8018ccc:	f7ef f806 	bl	8007cdc <net_arp_prepare>
		if (!arp_pkt) {
 8018cd0:	4605      	mov	r5, r0
 8018cd2:	b130      	cbz	r0, 8018ce2 <ethernet_ll_prepare_on_ipv4+0x7a>
		if (pkt != arp_pkt) {
 8018cd4:	4284      	cmp	r4, r0
 8018cd6:	d0ec      	beq.n	8018cb2 <ethernet_ll_prepare_on_ipv4+0x4a>
			net_pkt_unref(pkt);
 8018cd8:	4620      	mov	r0, r4
 8018cda:	f001 fb5d 	bl	801a398 <net_pkt_unref>
			return arp_pkt;
 8018cde:	462c      	mov	r4, r5
 8018ce0:	e7e7      	b.n	8018cb2 <ethernet_ll_prepare_on_ipv4+0x4a>
			return NULL;
 8018ce2:	4604      	mov	r4, r0
 8018ce4:	e7e5      	b.n	8018cb2 <ethernet_ll_prepare_on_ipv4+0x4a>

08018ce6 <net_eth_ipv4_mcast_to_mac_addr>:
	mac_addr->addr[0] = 0x01;
 8018ce6:	2301      	movs	r3, #1
 8018ce8:	700b      	strb	r3, [r1, #0]
	mac_addr->addr[1] = 0x00;
 8018cea:	2300      	movs	r3, #0
 8018cec:	704b      	strb	r3, [r1, #1]
	mac_addr->addr[2] = 0x5e;
 8018cee:	235e      	movs	r3, #94	; 0x5e
 8018cf0:	708b      	strb	r3, [r1, #2]
	mac_addr->addr[3] = ipv4_addr->s4_addr[1];
 8018cf2:	7843      	ldrb	r3, [r0, #1]
 8018cf4:	70cb      	strb	r3, [r1, #3]
	mac_addr->addr[4] = ipv4_addr->s4_addr[2];
 8018cf6:	7882      	ldrb	r2, [r0, #2]
 8018cf8:	710a      	strb	r2, [r1, #4]
	mac_addr->addr[5] = ipv4_addr->s4_addr[3];
 8018cfa:	78c2      	ldrb	r2, [r0, #3]
 8018cfc:	714a      	strb	r2, [r1, #5]
	mac_addr->addr[3] &= 0x7f;
 8018cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018d02:	70cb      	strb	r3, [r1, #3]
}
 8018d04:	4770      	bx	lr

08018d06 <ethernet_fill_in_dst_on_ipv4_mcast>:
	return pkt->family;
 8018d06:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8018d0a:	f3c3 0342 	ubfx	r3, r3, #1, #3
	if (net_pkt_family(pkt) == AF_INET &&
 8018d0e:	2b01      	cmp	r3, #1
 8018d10:	d001      	beq.n	8018d16 <ethernet_fill_in_dst_on_ipv4_mcast+0x10>
	return false;
 8018d12:	2000      	movs	r0, #0
}
 8018d14:	4770      	bx	lr
{
 8018d16:	b510      	push	{r4, lr}
	return pkt->frags->data;
 8018d18:	6883      	ldr	r3, [r0, #8]
 8018d1a:	6898      	ldr	r0, [r3, #8]
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
 8018d1c:	6902      	ldr	r2, [r0, #16]
 8018d1e:	0a13      	lsrs	r3, r2, #8
 8018d20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018d24:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8018d28:	0214      	lsls	r4, r2, #8
 8018d2a:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8018d2e:	4323      	orrs	r3, r4
 8018d30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8018d34:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
	if (net_pkt_family(pkt) == AF_INET &&
 8018d38:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8018d3c:	d001      	beq.n	8018d42 <ethernet_fill_in_dst_on_ipv4_mcast+0x3c>
	return false;
 8018d3e:	2000      	movs	r0, #0
}
 8018d40:	bd10      	pop	{r4, pc}
		net_eth_ipv4_mcast_to_mac_addr(
 8018d42:	3010      	adds	r0, #16
 8018d44:	f7ff ffcf 	bl	8018ce6 <net_eth_ipv4_mcast_to_mac_addr>
		return true;
 8018d48:	2001      	movs	r0, #1
 8018d4a:	e7f9      	b.n	8018d40 <ethernet_fill_in_dst_on_ipv4_mcast+0x3a>

08018d4c <ethernet_fill_header>:
{
 8018d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d4e:	460c      	mov	r4, r1
 8018d50:	4616      	mov	r6, r2
	hdr_frag = net_pkt_get_frag(pkt, NET_BUF_TIMEOUT);
 8018d52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018d56:	2300      	movs	r3, #0
 8018d58:	4608      	mov	r0, r1
 8018d5a:	f7f6 fe33 	bl	800f9c4 <net_pkt_get_frag>
	if (!hdr_frag) {
 8018d5e:	4607      	mov	r7, r0
 8018d60:	b1c0      	cbz	r0, 8018d94 <ethernet_fill_header+0x48>
		hdr = (struct net_eth_hdr *)(hdr_frag->data);
 8018d62:	6885      	ldr	r5, [r0, #8]
		if (ptype == htons(NET_ETH_PTYPE_ARP) ||
 8018d64:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8018d68:	d116      	bne.n	8018d98 <ethernet_fill_header+0x4c>
			memcpy(&hdr->dst, net_pkt_lladdr_dst(pkt)->addr,
 8018d6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018d6c:	681a      	ldr	r2, [r3, #0]
 8018d6e:	602a      	str	r2, [r5, #0]
 8018d70:	889b      	ldrh	r3, [r3, #4]
 8018d72:	80ab      	strh	r3, [r5, #4]
		memcpy(&hdr->src, net_pkt_lladdr_src(pkt)->addr,
 8018d74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018d76:	681a      	ldr	r2, [r3, #0]
 8018d78:	f8c5 2006 	str.w	r2, [r5, #6]
 8018d7c:	889b      	ldrh	r3, [r3, #4]
 8018d7e:	816b      	strh	r3, [r5, #10]
		hdr->type = ptype;
 8018d80:	81ae      	strh	r6, [r5, #12]
	return net_buf_simple_add(&buf->b, len);
 8018d82:	210e      	movs	r1, #14
 8018d84:	f107 0008 	add.w	r0, r7, #8
 8018d88:	f7ff fd09 	bl	801879e <net_buf_simple_add>
	net_pkt_frag_insert(pkt, hdr_frag);
 8018d8c:	4639      	mov	r1, r7
 8018d8e:	4620      	mov	r0, r4
 8018d90:	f001 fb2d 	bl	801a3ee <net_pkt_frag_insert>
}
 8018d94:	4638      	mov	r0, r7
 8018d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    (!ethernet_fill_in_dst_on_ipv4_mcast(pkt, &hdr->dst) &&
 8018d98:	4629      	mov	r1, r5
 8018d9a:	4620      	mov	r0, r4
 8018d9c:	f7ff ffb3 	bl	8018d06 <ethernet_fill_in_dst_on_ipv4_mcast>
		if (ptype == htons(NET_ETH_PTYPE_ARP) ||
 8018da0:	2800      	cmp	r0, #0
 8018da2:	d1e7      	bne.n	8018d74 <ethernet_fill_header+0x28>
		     !ethernet_fill_in_dst_on_ipv6_mcast(pkt, &hdr->dst))) {
 8018da4:	4629      	mov	r1, r5
 8018da6:	4620      	mov	r0, r4
 8018da8:	f7ee fd40 	bl	800782c <ethernet_fill_in_dst_on_ipv6_mcast>
		    (!ethernet_fill_in_dst_on_ipv4_mcast(pkt, &hdr->dst) &&
 8018dac:	2800      	cmp	r0, #0
 8018dae:	d1e1      	bne.n	8018d74 <ethernet_fill_header+0x28>
 8018db0:	e7db      	b.n	8018d6a <ethernet_fill_header+0x1e>

08018db2 <net_eth_get_ptp_port>:
	return iface->if_dev->l2_data;
 8018db2:	6803      	ldr	r3, [r0, #0]
 8018db4:	689b      	ldr	r3, [r3, #8]
}
 8018db6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8018db8:	4770      	bx	lr

08018dba <net_eth_set_ptp_port>:
 8018dba:	6803      	ldr	r3, [r0, #0]
 8018dbc:	689b      	ldr	r3, [r3, #8]
	ctx->port = port;
 8018dbe:	6459      	str	r1, [r3, #68]	; 0x44
}
 8018dc0:	4770      	bx	lr

08018dc2 <arp_entry_find>:
	return list->head;
 8018dc2:	6800      	ldr	r0, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(list, entry, node) {
 8018dc4:	b1a0      	cbz	r0, 8018df0 <arp_entry_find+0x2e>
{
 8018dc6:	b430      	push	{r4, r5}
 8018dc8:	e00b      	b.n	8018de2 <arp_entry_find+0x20>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8018dca:	68c5      	ldr	r5, [r0, #12]
 8018dcc:	6814      	ldr	r4, [r2, #0]
		if (entry->iface == iface &&
 8018dce:	42a5      	cmp	r5, r4
 8018dd0:	d10a      	bne.n	8018de8 <arp_entry_find+0x26>
}
 8018dd2:	bc30      	pop	{r4, r5}
 8018dd4:	4770      	bx	lr
Z_GENLIST_PEEK_NEXT(slist, snode)
 8018dd6:	b110      	cbz	r0, 8018dde <arp_entry_find+0x1c>
	return node->next;
 8018dd8:	6800      	ldr	r0, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(list, entry, node) {
 8018dda:	2800      	cmp	r0, #0
 8018ddc:	d0f9      	beq.n	8018dd2 <arp_entry_find+0x10>
 8018dde:	2800      	cmp	r0, #0
 8018de0:	d0f7      	beq.n	8018dd2 <arp_entry_find+0x10>
		if (entry->iface == iface &&
 8018de2:	6884      	ldr	r4, [r0, #8]
 8018de4:	42a1      	cmp	r1, r4
 8018de6:	d0f0      	beq.n	8018dca <arp_entry_find+0x8>
		if (previous) {
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d0f4      	beq.n	8018dd6 <arp_entry_find+0x14>
			*previous = &entry->node;
 8018dec:	6018      	str	r0, [r3, #0]
 8018dee:	e7f2      	b.n	8018dd6 <arp_entry_find+0x14>
 8018df0:	4770      	bx	lr

08018df2 <arp_hdr_check>:
	if (ntohs(arp_hdr->hwtype) != NET_ARP_HTYPE_ETH ||
 8018df2:	8802      	ldrh	r2, [r0, #0]
 8018df4:	0a13      	lsrs	r3, r2, #8
 8018df6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018dfa:	b21b      	sxth	r3, r3
 8018dfc:	2b01      	cmp	r3, #1
 8018dfe:	d112      	bne.n	8018e26 <arp_hdr_check+0x34>
	    ntohs(arp_hdr->protocol) != NET_ETH_PTYPE_IP ||
 8018e00:	8842      	ldrh	r2, [r0, #2]
 8018e02:	0a13      	lsrs	r3, r2, #8
 8018e04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018e08:	b21b      	sxth	r3, r3
	if (ntohs(arp_hdr->hwtype) != NET_ARP_HTYPE_ETH ||
 8018e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018e0e:	d10c      	bne.n	8018e2a <arp_hdr_check+0x38>
	    arp_hdr->hwlen != sizeof(struct net_eth_addr) ||
 8018e10:	7903      	ldrb	r3, [r0, #4]
	    ntohs(arp_hdr->protocol) != NET_ETH_PTYPE_IP ||
 8018e12:	2b06      	cmp	r3, #6
 8018e14:	d10b      	bne.n	8018e2e <arp_hdr_check+0x3c>
	    arp_hdr->protolen != NET_ARP_IPV4_PTYPE_SIZE ||
 8018e16:	7943      	ldrb	r3, [r0, #5]
	    arp_hdr->hwlen != sizeof(struct net_eth_addr) ||
 8018e18:	2b04      	cmp	r3, #4
 8018e1a:	d10a      	bne.n	8018e32 <arp_hdr_check+0x40>
	return addr->s4_addr[0] == 127U;
 8018e1c:	7b83      	ldrb	r3, [r0, #14]
	    arp_hdr->protolen != NET_ARP_IPV4_PTYPE_SIZE ||
 8018e1e:	2b7f      	cmp	r3, #127	; 0x7f
 8018e20:	d009      	beq.n	8018e36 <arp_hdr_check+0x44>
	return true;
 8018e22:	2001      	movs	r0, #1
 8018e24:	4770      	bx	lr
		return false;
 8018e26:	2000      	movs	r0, #0
 8018e28:	4770      	bx	lr
 8018e2a:	2000      	movs	r0, #0
 8018e2c:	4770      	bx	lr
 8018e2e:	2000      	movs	r0, #0
 8018e30:	4770      	bx	lr
 8018e32:	2000      	movs	r0, #0
 8018e34:	4770      	bx	lr
 8018e36:	2000      	movs	r0, #0
}
 8018e38:	4770      	bx	lr

08018e3a <arp_entry_cleanup>:
{
 8018e3a:	b510      	push	{r4, lr}
 8018e3c:	4604      	mov	r4, r0
	if (pending) {
 8018e3e:	b929      	cbnz	r1, 8018e4c <arp_entry_cleanup+0x12>
	entry->iface = NULL;
 8018e40:	2300      	movs	r3, #0
 8018e42:	60a3      	str	r3, [r4, #8]
__ssp_bos_icheck3(memset, void *, int)
 8018e44:	60e3      	str	r3, [r4, #12]
 8018e46:	6123      	str	r3, [r4, #16]
 8018e48:	82a3      	strh	r3, [r4, #20]
}
 8018e4a:	bd10      	pop	{r4, pc}
		net_pkt_unref(entry->pending);
 8018e4c:	6900      	ldr	r0, [r0, #16]
 8018e4e:	f001 faa3 	bl	801a398 <net_pkt_unref>
		entry->pending = NULL;
 8018e52:	2300      	movs	r3, #0
 8018e54:	6123      	str	r3, [r4, #16]
 8018e56:	e7f3      	b.n	8018e40 <arp_entry_cleanup+0x6>

08018e58 <net_arp_input>:
{
 8018e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e5c:	b083      	sub	sp, #12
 8018e5e:	4605      	mov	r5, r0
 8018e60:	460f      	mov	r7, r1
	return net_buf_frags_len(pkt->frags);
 8018e62:	6881      	ldr	r1, [r0, #8]
	while (buf) {
 8018e64:	460c      	mov	r4, r1
	size_t bytes = 0;
 8018e66:	2300      	movs	r3, #0
	while (buf) {
 8018e68:	b11c      	cbz	r4, 8018e72 <net_arp_input+0x1a>
		bytes += buf->len;
 8018e6a:	89a2      	ldrh	r2, [r4, #12]
 8018e6c:	4413      	add	r3, r2
		buf = buf->frags;
 8018e6e:	6824      	ldr	r4, [r4, #0]
 8018e70:	e7fa      	b.n	8018e68 <net_arp_input+0x10>
	return pkt->frags->data;
 8018e72:	688e      	ldr	r6, [r1, #8]
				    (net_pkt_ip_data(pkt) - (uint8_t *)eth_hdr))) {
 8018e74:	1bf2      	subs	r2, r6, r7
	if (net_pkt_get_len(pkt) < (sizeof(struct net_arp_hdr) -
 8018e76:	f1c2 021c 	rsb	r2, r2, #28
 8018e7a:	429a      	cmp	r2, r3
 8018e7c:	f200 812b 	bhi.w	80190d6 <net_arp_input+0x27e>
	if (!arp_hdr_check(arp_hdr)) {
 8018e80:	4630      	mov	r0, r6
 8018e82:	f7ff ffb6 	bl	8018df2 <arp_hdr_check>
 8018e86:	4680      	mov	r8, r0
 8018e88:	2800      	cmp	r0, #0
 8018e8a:	f000 8126 	beq.w	80190da <net_arp_input+0x282>
	switch (ntohs(arp_hdr->opcode)) {
 8018e8e:	88f2      	ldrh	r2, [r6, #6]
 8018e90:	0a13      	lsrs	r3, r2, #8
 8018e92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8018e96:	b21b      	sxth	r3, r3
 8018e98:	2b01      	cmp	r3, #1
 8018e9a:	d009      	beq.n	8018eb0 <net_arp_input+0x58>
 8018e9c:	2b02      	cmp	r3, #2
 8018e9e:	f000 80f5 	beq.w	801908c <net_arp_input+0x234>
	net_pkt_unref(pkt);
 8018ea2:	4628      	mov	r0, r5
 8018ea4:	f001 fa78 	bl	801a398 <net_pkt_unref>
	return NET_OK;
 8018ea8:	2000      	movs	r0, #0
}
 8018eaa:	b003      	add	sp, #12
 8018eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (memcmp(&arp_hdr->src_hwaddr,
 8018eb0:	f106 0808 	add.w	r8, r6, #8
	return pkt->iface;
 8018eb4:	69ab      	ldr	r3, [r5, #24]
	return &iface->if_dev->link_addr;
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	2206      	movs	r2, #6
 8018eba:	6919      	ldr	r1, [r3, #16]
 8018ebc:	4640      	mov	r0, r8
 8018ebe:	f003 fcad 	bl	801c81c <memcmp>
 8018ec2:	2800      	cmp	r0, #0
 8018ec4:	f000 810b 	beq.w	80190de <net_arp_input+0x286>
				   net_eth_broadcast_addr(),
 8018ec8:	f7ee fccc 	bl	8007864 <net_eth_broadcast_addr>
 8018ecc:	4601      	mov	r1, r0
			if (memcmp(&eth_hdr->dst,
 8018ece:	2206      	movs	r2, #6
 8018ed0:	4638      	mov	r0, r7
 8018ed2:	f003 fca3 	bl	801c81c <memcmp>
 8018ed6:	b958      	cbnz	r0, 8018ef0 <net_arp_input+0x98>
			    memcmp(&arp_hdr->dst_hwaddr,
 8018ed8:	f106 0912 	add.w	r9, r6, #18
				   net_eth_broadcast_addr(),
 8018edc:	f7ee fcc2 	bl	8007864 <net_eth_broadcast_addr>
 8018ee0:	4601      	mov	r1, r0
			    memcmp(&arp_hdr->dst_hwaddr,
 8018ee2:	2206      	movs	r2, #6
 8018ee4:	4648      	mov	r0, r9
 8018ee6:	f003 fc99 	bl	801c81c <memcmp>
				   sizeof(struct net_eth_addr)) == 0 &&
 8018eea:	2800      	cmp	r0, #0
 8018eec:	f000 8082 	beq.w	8018ff4 <net_arp_input+0x19c>
		if (memcmp(&eth_hdr->dst, net_eth_broadcast_addr(),
 8018ef0:	f7ee fcb8 	bl	8007864 <net_eth_broadcast_addr>
 8018ef4:	4601      	mov	r1, r0
 8018ef6:	2206      	movs	r2, #6
 8018ef8:	4638      	mov	r0, r7
 8018efa:	f003 fc8f 	bl	801c81c <memcmp>
 8018efe:	b990      	cbnz	r0, 8018f26 <net_arp_input+0xce>
	return (ntohl(UNALIGNED_GET(&addr->s_addr)) & 0xF0000000) == 0xE0000000;
 8018f00:	f8d6 100e 	ldr.w	r1, [r6, #14]
 8018f04:	0a0b      	lsrs	r3, r1, #8
 8018f06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018f0a:	ea43 6211 	orr.w	r2, r3, r1, lsr #24
 8018f0e:	020b      	lsls	r3, r1, #8
 8018f10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8018f14:	4313      	orrs	r3, r2
 8018f16:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8018f1a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
			   sizeof(struct net_eth_addr)) == 0 &&
 8018f1e:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8018f22:	f000 80de 	beq.w	80190e2 <net_arp_input+0x28a>
 8018f26:	69a8      	ldr	r0, [r5, #24]
				   (struct in_addr *)arp_hdr->dst_ipaddr);
 8018f28:	f106 0c18 	add.w	ip, r6, #24
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
 8018f2c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
	if (!ipv4) {
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d173      	bne.n	801901c <net_arp_input+0x1c4>
		if (!addr) {
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	f000 80d6 	beq.w	80190e6 <net_arp_input+0x28e>
	if (addr->addr[0] == 0x00 &&
 8018f3a:	7cb3      	ldrb	r3, [r6, #18]
 8018f3c:	b95b      	cbnz	r3, 8018f56 <net_arp_input+0xfe>
	    addr->addr[1] == 0x00 &&
 8018f3e:	7cf3      	ldrb	r3, [r6, #19]
	if (addr->addr[0] == 0x00 &&
 8018f40:	b94b      	cbnz	r3, 8018f56 <net_arp_input+0xfe>
	    addr->addr[2] == 0x00 &&
 8018f42:	7d33      	ldrb	r3, [r6, #20]
	    addr->addr[1] == 0x00 &&
 8018f44:	b93b      	cbnz	r3, 8018f56 <net_arp_input+0xfe>
	    addr->addr[3] == 0x00 &&
 8018f46:	7d73      	ldrb	r3, [r6, #21]
	    addr->addr[2] == 0x00 &&
 8018f48:	b92b      	cbnz	r3, 8018f56 <net_arp_input+0xfe>
	    addr->addr[4] == 0x00 &&
 8018f4a:	7db3      	ldrb	r3, [r6, #22]
	    addr->addr[3] == 0x00 &&
 8018f4c:	b91b      	cbnz	r3, 8018f56 <net_arp_input+0xfe>
	    addr->addr[5] == 0x00) {
 8018f4e:	7df3      	ldrb	r3, [r6, #23]
	    addr->addr[4] == 0x00 &&
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	f000 8092 	beq.w	801907a <net_arp_input+0x222>
			dst_hw_addr = &eth_hdr->src;
 8018f56:	f107 0806 	add.w	r8, r7, #6
 8018f5a:	69ae      	ldr	r6, [r5, #24]
					AF_UNSPEC, 0, NET_BUF_TIMEOUT);
 8018f5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018f60:	2300      	movs	r3, #0
	pkt = net_pkt_alloc_with_buffer(iface, sizeof(struct net_arp_hdr),
 8018f62:	e9cd 2300 	strd	r2, r3, [sp]
 8018f66:	2300      	movs	r3, #0
 8018f68:	461a      	mov	r2, r3
 8018f6a:	211c      	movs	r1, #28
 8018f6c:	4630      	mov	r0, r6
 8018f6e:	f7f6 fe09 	bl	800fb84 <net_pkt_alloc_with_buffer>
	if (!pkt) {
 8018f72:	4604      	mov	r4, r0
 8018f74:	2800      	cmp	r0, #0
 8018f76:	d035      	beq.n	8018fe4 <net_arp_input+0x18c>
	net_buf_add(pkt->buffer, sizeof(struct net_arp_hdr));
 8018f78:	6880      	ldr	r0, [r0, #8]
	return net_buf_simple_add(&buf->b, len);
 8018f7a:	211c      	movs	r1, #28
 8018f7c:	3008      	adds	r0, #8
 8018f7e:	f7ff fc0e 	bl	801879e <net_buf_simple_add>
	return pkt->frags->data;
 8018f82:	68a3      	ldr	r3, [r4, #8]
 8018f84:	689b      	ldr	r3, [r3, #8]
 8018f86:	68aa      	ldr	r2, [r5, #8]
 8018f88:	6890      	ldr	r0, [r2, #8]
	hdr->hwtype = htons(NET_ARP_HTYPE_ETH);
 8018f8a:	2100      	movs	r1, #0
 8018f8c:	7019      	strb	r1, [r3, #0]
 8018f8e:	2201      	movs	r2, #1
 8018f90:	705a      	strb	r2, [r3, #1]
	hdr->protocol = htons(NET_ETH_PTYPE_IP);
 8018f92:	2208      	movs	r2, #8
 8018f94:	709a      	strb	r2, [r3, #2]
 8018f96:	70d9      	strb	r1, [r3, #3]
	hdr->hwlen = sizeof(struct net_eth_addr);
 8018f98:	2206      	movs	r2, #6
 8018f9a:	711a      	strb	r2, [r3, #4]
	hdr->protolen = sizeof(struct in_addr);
 8018f9c:	2704      	movs	r7, #4
 8018f9e:	715f      	strb	r7, [r3, #5]
	hdr->opcode = htons(NET_ARP_REPLY);
 8018fa0:	7199      	strb	r1, [r3, #6]
 8018fa2:	2102      	movs	r1, #2
 8018fa4:	71d9      	strb	r1, [r3, #7]
	memcpy(&hdr->dst_hwaddr.addr, &dst_addr->addr,
 8018fa6:	f103 0712 	add.w	r7, r3, #18
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8018faa:	f8d8 1000 	ldr.w	r1, [r8]
 8018fae:	f8c3 1012 	str.w	r1, [r3, #18]
 8018fb2:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8018fb6:	82d9      	strh	r1, [r3, #22]
 8018fb8:	6831      	ldr	r1, [r6, #0]
	memcpy(&hdr->src_hwaddr.addr, net_if_get_link_addr(iface)->addr,
 8018fba:	6909      	ldr	r1, [r1, #16]
 8018fbc:	f8d1 c000 	ldr.w	ip, [r1]
 8018fc0:	f8c3 c008 	str.w	ip, [r3, #8]
 8018fc4:	8889      	ldrh	r1, [r1, #4]
 8018fc6:	8199      	strh	r1, [r3, #12]
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
 8018fc8:	f8d0 100e 	ldr.w	r1, [r0, #14]
 8018fcc:	6199      	str	r1, [r3, #24]
 8018fce:	6981      	ldr	r1, [r0, #24]
 8018fd0:	f8c3 100e 	str.w	r1, [r3, #14]
 8018fd4:	6833      	ldr	r3, [r6, #0]
	net_pkt_lladdr_src(pkt)->addr = net_if_get_link_addr(iface)->addr;
 8018fd6:	691b      	ldr	r3, [r3, #16]
 8018fd8:	6363      	str	r3, [r4, #52]	; 0x34
	net_pkt_lladdr_src(pkt)->len = sizeof(struct net_eth_addr);
 8018fda:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	net_pkt_lladdr_dst(pkt)->addr = (uint8_t *)&hdr->dst_hwaddr.addr;
 8018fde:	63e7      	str	r7, [r4, #60]	; 0x3c
	net_pkt_lladdr_dst(pkt)->len = sizeof(struct net_eth_addr);
 8018fe0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
		if (reply) {
 8018fe4:	2c00      	cmp	r4, #0
 8018fe6:	f43f af5c 	beq.w	8018ea2 <net_arp_input+0x4a>
			net_if_queue_tx(net_pkt_iface(reply), reply);
 8018fea:	4621      	mov	r1, r4
 8018fec:	69a0      	ldr	r0, [r4, #24]
 8018fee:	f7f4 f9e1 	bl	800d3b4 <net_if_queue_tx>
 8018ff2:	e756      	b.n	8018ea2 <net_arp_input+0x4a>
			    memcmp(&arp_hdr->dst_ipaddr, &arp_hdr->src_ipaddr,
 8018ff4:	f106 090e 	add.w	r9, r6, #14
 8018ff8:	2204      	movs	r2, #4
 8018ffa:	4649      	mov	r1, r9
 8018ffc:	f106 0018 	add.w	r0, r6, #24
 8019000:	f003 fc0c 	bl	801c81c <memcmp>
				   sizeof(struct net_eth_addr)) == 0 &&
 8019004:	2800      	cmp	r0, #0
 8019006:	f47f af73 	bne.w	8018ef0 <net_arp_input+0x98>
				arp_update(net_pkt_iface(pkt),
 801900a:	2300      	movs	r3, #0
 801900c:	9300      	str	r3, [sp, #0]
 801900e:	2301      	movs	r3, #1
 8019010:	4642      	mov	r2, r8
 8019012:	4649      	mov	r1, r9
 8019014:	69a8      	ldr	r0, [r5, #24]
 8019016:	f7ee fdf7 	bl	8007c08 <arp_update>
				break;
 801901a:	e742      	b.n	8018ea2 <net_arp_input+0x4a>
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
 801901c:	2200      	movs	r2, #0
 801901e:	2a00      	cmp	r2, #0
 8019020:	dd01      	ble.n	8019026 <net_arp_input+0x1ce>
	return NULL;
 8019022:	4623      	mov	r3, r4
 8019024:	e786      	b.n	8018f34 <net_arp_input+0xdc>
		if (ipv4->unicast[i].is_used &&
 8019026:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801902a:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 801902e:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
 8019032:	f011 0f02 	tst.w	r1, #2
 8019036:	d005      	beq.n	8019044 <net_arp_input+0x1ec>
		    ipv4->unicast[i].address.family == AF_INET &&
 8019038:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801903c:	0109      	lsls	r1, r1, #4
 801903e:	5a59      	ldrh	r1, [r3, r1]
		if (ipv4->unicast[i].is_used &&
 8019040:	2901      	cmp	r1, #1
 8019042:	d001      	beq.n	8019048 <net_arp_input+0x1f0>
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
 8019044:	3201      	adds	r2, #1
 8019046:	e7ea      	b.n	801901e <net_arp_input+0x1c6>
		    ipv4->unicast[i].addr_state == NET_ADDR_PREFERRED &&
 8019048:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801904c:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8019050:	f991 102d 	ldrsb.w	r1, [r1, #45]	; 0x2d
		    ipv4->unicast[i].address.family == AF_INET &&
 8019054:	2901      	cmp	r1, #1
 8019056:	d1f5      	bne.n	8019044 <net_arp_input+0x1ec>
		    ipv4->unicast[i].addr_state == NET_ADDR_PREFERRED &&
 8019058:	f1bc 0f00 	cmp.w	ip, #0
 801905c:	d008      	beq.n	8019070 <net_arp_input+0x218>
				       &ipv4->unicast[i].address.in_addr))) {
 801905e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8019062:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 8019066:	f8dc e000 	ldr.w	lr, [ip]
 801906a:	6849      	ldr	r1, [r1, #4]
		    (!addr ||
 801906c:	458e      	cmp	lr, r1
 801906e:	d1e9      	bne.n	8019044 <net_arp_input+0x1ec>
			return &ipv4->unicast[i].address.in_addr;
 8019070:	2130      	movs	r1, #48	; 0x30
 8019072:	fb01 3302 	mla	r3, r1, r2, r3
 8019076:	3304      	adds	r3, #4
 8019078:	e75c      	b.n	8018f34 <net_arp_input+0xdc>
			arp_update(net_pkt_iface(pkt),
 801907a:	2301      	movs	r3, #1
 801907c:	9300      	str	r3, [sp, #0]
 801907e:	2300      	movs	r3, #0
 8019080:	4642      	mov	r2, r8
 8019082:	f106 010e 	add.w	r1, r6, #14
 8019086:	f7ee fdbf 	bl	8007c08 <arp_update>
			dst_hw_addr = &arp_hdr->src_hwaddr;
 801908a:	e766      	b.n	8018f5a <net_arp_input+0x102>
		if (net_ipv4_is_my_addr((struct in_addr *)arp_hdr->dst_ipaddr)) {
 801908c:	f106 0418 	add.w	r4, r6, #24
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
 8019090:	2100      	movs	r1, #0
 8019092:	4620      	mov	r0, r4
 8019094:	f7f5 fd6c 	bl	800eb70 <net_if_ipv4_addr_lookup>
 8019098:	2800      	cmp	r0, #0
 801909a:	bf14      	ite	ne
 801909c:	2001      	movne	r0, #1
 801909e:	2000      	moveq	r0, #0
	if (!ret) {
 80190a0:	d00c      	beq.n	80190bc <net_arp_input+0x264>
 80190a2:	2800      	cmp	r0, #0
 80190a4:	f43f aefd 	beq.w	8018ea2 <net_arp_input+0x4a>
			arp_update(net_pkt_iface(pkt),
 80190a8:	2300      	movs	r3, #0
 80190aa:	9300      	str	r3, [sp, #0]
 80190ac:	f106 0208 	add.w	r2, r6, #8
 80190b0:	f106 010e 	add.w	r1, r6, #14
 80190b4:	69a8      	ldr	r0, [r5, #24]
 80190b6:	f7ee fda7 	bl	8007c08 <arp_update>
 80190ba:	e6f2      	b.n	8018ea2 <net_arp_input+0x4a>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 80190bc:	f7f6 fa72 	bl	800f5a4 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 80190c0:	69b2      	ldr	r2, [r6, #24]
 80190c2:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 80190c4:	429a      	cmp	r2, r3
 80190c6:	d004      	beq.n	80190d2 <net_arp_input+0x27a>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 80190c8:	4621      	mov	r1, r4
 80190ca:	2000      	movs	r0, #0
 80190cc:	f7f5 fcb8 	bl	800ea40 <net_if_ipv4_is_addr_bcast>
 80190d0:	e7e7      	b.n	80190a2 <net_arp_input+0x24a>
		return true;
 80190d2:	4640      	mov	r0, r8
 80190d4:	e7e5      	b.n	80190a2 <net_arp_input+0x24a>
		return NET_DROP;
 80190d6:	2002      	movs	r0, #2
 80190d8:	e6e7      	b.n	8018eaa <net_arp_input+0x52>
		return NET_DROP;
 80190da:	2002      	movs	r0, #2
 80190dc:	e6e5      	b.n	8018eaa <net_arp_input+0x52>
			return NET_DROP;
 80190de:	2002      	movs	r0, #2
 80190e0:	e6e3      	b.n	8018eaa <net_arp_input+0x52>
			return NET_DROP;
 80190e2:	2002      	movs	r0, #2
 80190e4:	e6e1      	b.n	8018eaa <net_arp_input+0x52>
			return NET_DROP;
 80190e6:	2002      	movs	r0, #2
 80190e8:	e6df      	b.n	8018eaa <net_arp_input+0x52>

080190ea <gptp_init_state_machine>:
{
 80190ea:	b508      	push	{r3, lr}
	gptp_md_init_state_machine();
 80190ec:	f7f0 fe80 	bl	8009df0 <gptp_md_init_state_machine>
	gptp_mi_init_state_machine();
 80190f0:	f000 f931 	bl	8019356 <gptp_mi_init_state_machine>
}
 80190f4:	bd08      	pop	{r3, pc}

080190f6 <update_itv>:
{
 80190f6:	b510      	push	{r4, lr}
 80190f8:	4604      	mov	r4, r0
	switch (new_log_itv) {
 80190fa:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80190fe:	d007      	beq.n	8019110 <update_itv+0x1a>
 8019100:	2b7e      	cmp	r3, #126	; 0x7e
 8019102:	d109      	bne.n	8019118 <update_itv+0x22>
		*cur_log_itv = *ini_log_itv;
 8019104:	f992 2000 	ldrsb.w	r2, [r2]
 8019108:	700a      	strb	r2, [r1, #0]
		gptp_set_time_itv(itv, 1, *ini_log_itv);
 801910a:	2101      	movs	r1, #1
 801910c:	f7ef fa9c 	bl	8008648 <gptp_set_time_itv>
	return gptp_uscaled_ns_to_timer_ms(itv);
 8019110:	4620      	mov	r0, r4
 8019112:	f7ef fb6d 	bl	80087f0 <gptp_uscaled_ns_to_timer_ms>
}
 8019116:	bd10      	pop	{r4, pc}
		*cur_log_itv = new_log_itv + correction_log_itv;
 8019118:	f99d 2008 	ldrsb.w	r2, [sp, #8]
 801911c:	4413      	add	r3, r2
 801911e:	b25a      	sxtb	r2, r3
 8019120:	700a      	strb	r2, [r1, #0]
		gptp_set_time_itv(itv, 1, *cur_log_itv);
 8019122:	2101      	movs	r1, #1
 8019124:	f7ef fa90 	bl	8008648 <gptp_set_time_itv>
		break;
 8019128:	e7f2      	b.n	8019110 <update_itv+0x1a>

0801912a <gptp_sprint_clock_id>:
	irq_unlock(key);
	return -EAGAIN;
}

char *gptp_sprint_clock_id(const uint8_t *clk_id, char *output, size_t output_len)
{
 801912a:	b508      	push	{r3, lr}
 801912c:	4613      	mov	r3, r2
	return net_sprint_ll_addr_buf(clk_id, 8, output, output_len);
 801912e:	460a      	mov	r2, r1
 8019130:	2108      	movs	r1, #8
 8019132:	f7f6 f9e9 	bl	800f508 <net_sprint_ll_addr_buf>
}
 8019136:	bd08      	pop	{r3, pc}

08019138 <gptp_md_sync_prepare>:
{
 8019138:	b538      	push	{r3, r4, r5, lr}
 801913a:	460c      	mov	r4, r1
 801913c:	4615      	mov	r5, r2
	hdr = GPTP_HDR(pkt);
 801913e:	f000 f81e 	bl	801917e <gptp_get_hdr>
	memcpy(&hdr->port_id.clk_id, &sync_send->src_port_id.clk_id,
 8019142:	4623      	mov	r3, r4
 8019144:	f853 2f40 	ldr.w	r2, [r3, #64]!
 8019148:	685b      	ldr	r3, [r3, #4]
 801914a:	6142      	str	r2, [r0, #20]
 801914c:	6183      	str	r3, [r0, #24]
	hdr->port_id.port_number = htons(port_number);
 801914e:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8019152:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 8019156:	8385      	strh	r5, [r0, #28]
	hdr->log_msg_interval = sync_send->log_msg_interval;
 8019158:	f994 304c 	ldrsb.w	r3, [r4, #76]	; 0x4c
 801915c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
}
 8019160:	bd38      	pop	{r3, r4, r5, pc}

08019162 <gptp_md_state_machines>:

void gptp_md_state_machines(int port)
{
 8019162:	b510      	push	{r4, lr}
 8019164:	4604      	mov	r4, r0
	gptp_md_pdelay_req_state_machine(port);
 8019166:	f7f0 f8d9 	bl	800931c <gptp_md_pdelay_req_state_machine>
	gptp_md_pdelay_resp_state_machine(port);
 801916a:	4620      	mov	r0, r4
 801916c:	f7ef fdfc 	bl	8008d68 <gptp_md_pdelay_resp_state_machine>
	gptp_md_sync_receive_state_machine(port);
 8019170:	4620      	mov	r0, r4
 8019172:	f7f0 fb95 	bl	80098a0 <gptp_md_sync_receive_state_machine>
	gptp_md_sync_send_state_machine(port);
 8019176:	4620      	mov	r0, r4
 8019178:	f7f0 fda0 	bl	8009cbc <gptp_md_sync_send_state_machine>
}
 801917c:	bd10      	pop	{r4, pc}

0801917e <gptp_get_hdr>:
	struct net_buf *buf = pkt->frags;
 801917e:	6883      	ldr	r3, [r0, #8]
	if (sizeof(struct gptp_hdr) <= buf->len) {
 8019180:	899a      	ldrh	r2, [r3, #12]
 8019182:	2a21      	cmp	r2, #33	; 0x21
 8019184:	d803      	bhi.n	801918e <gptp_get_hdr+0x10>
	buf = buf->frags;
 8019186:	681a      	ldr	r2, [r3, #0]
	if (!buf) {
 8019188:	b11a      	cbz	r2, 8019192 <gptp_get_hdr+0x14>
	return (struct gptp_hdr *)buf->data;
 801918a:	6890      	ldr	r0, [r2, #8]
}
 801918c:	4770      	bx	lr
		return (struct gptp_hdr *)buf->data;
 801918e:	6898      	ldr	r0, [r3, #8]
 8019190:	4770      	bx	lr
		return (struct gptp_hdr *)pkt->frags->data;
 8019192:	6898      	ldr	r0, [r3, #8]
 8019194:	4770      	bx	lr

08019196 <gptp_send_follow_up>:
{
 8019196:	b508      	push	{r3, lr}
	net_if_queue_tx(net_pkt_iface(pkt), pkt);
 8019198:	6988      	ldr	r0, [r1, #24]
 801919a:	f7f4 f90b 	bl	800d3b4 <net_if_queue_tx>
}
 801919e:	bd08      	pop	{r3, pc}

080191a0 <gptp_send_announce>:
{
 80191a0:	b508      	push	{r3, lr}
	net_if_queue_tx(net_pkt_iface(pkt), pkt);
 80191a2:	6988      	ldr	r0, [r1, #24]
 80191a4:	f7f4 f906 	bl	800d3b4 <net_if_queue_tx>
}
 80191a8:	bd08      	pop	{r3, pc}

080191aa <gptp_send_pdelay_resp>:

void gptp_send_pdelay_resp(int port, struct net_pkt *pkt,
			   struct net_ptp_time *treq)
{
 80191aa:	b538      	push	{r3, r4, r5, lr}
 80191ac:	460c      	mov	r4, r1
 80191ae:	4615      	mov	r5, r2
	struct gptp_pdelay_resp *resp;
	struct gptp_hdr *hdr;

	hdr = GPTP_HDR(pkt);
 80191b0:	4608      	mov	r0, r1
 80191b2:	f7ff ffe4 	bl	801917e <gptp_get_hdr>

	/* No Fractional nsec .*/
	hdr->correction_field = 0;
 80191b6:	2300      	movs	r3, #0
 80191b8:	7203      	strb	r3, [r0, #8]
 80191ba:	7243      	strb	r3, [r0, #9]
 80191bc:	7283      	strb	r3, [r0, #10]
 80191be:	72c3      	strb	r3, [r0, #11]
 80191c0:	7303      	strb	r3, [r0, #12]
 80191c2:	7343      	strb	r3, [r0, #13]
 80191c4:	7383      	strb	r3, [r0, #14]
 80191c6:	73c3      	strb	r3, [r0, #15]
 80191c8:	4620      	mov	r0, r4
 80191ca:	f7ff ffd8 	bl	801917e <gptp_get_hdr>

	resp = GPTP_PDELAY_RESP(pkt);
	resp->req_receipt_ts_secs_high = htons(treq->_sec.high);
 80191ce:	88aa      	ldrh	r2, [r5, #4]
 80191d0:	0a13      	lsrs	r3, r2, #8
 80191d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80191d6:	8443      	strh	r3, [r0, #34]	; 0x22
	resp->req_receipt_ts_secs_low = htonl(treq->_sec.low);
 80191d8:	682a      	ldr	r2, [r5, #0]
 80191da:	0a13      	lsrs	r3, r2, #8
 80191dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80191e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80191e4:	0211      	lsls	r1, r2, #8
 80191e6:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 80191ea:	430b      	orrs	r3, r1
 80191ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80191f0:	6243      	str	r3, [r0, #36]	; 0x24
	resp->req_receipt_ts_nsecs = htonl(treq->nanosecond);
 80191f2:	68aa      	ldr	r2, [r5, #8]
 80191f4:	0a13      	lsrs	r3, r2, #8
 80191f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80191fa:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80191fe:	0211      	lsls	r1, r2, #8
 8019200:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8019204:	430b      	orrs	r3, r1
 8019206:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801920a:	6283      	str	r3, [r0, #40]	; 0x28

	GPTP_STATS_INC(port, tx_pdelay_resp_count);

	NET_GPTP_INFO("PDELAY_RESP", pkt);

	net_if_queue_tx(net_pkt_iface(pkt), pkt);
 801920c:	4621      	mov	r1, r4
 801920e:	69a0      	ldr	r0, [r4, #24]
 8019210:	f7f4 f8d0 	bl	800d3b4 <net_if_queue_tx>
}
 8019214:	bd38      	pop	{r3, r4, r5, pc}

08019216 <gptp_send_pdelay_follow_up>:

void gptp_send_pdelay_follow_up(int port, struct net_pkt *pkt,
				struct net_ptp_time *tresp)
{
 8019216:	b538      	push	{r3, r4, r5, lr}
 8019218:	460c      	mov	r4, r1
 801921a:	4615      	mov	r5, r2
	struct gptp_pdelay_resp_follow_up *follow_up;
	struct gptp_hdr *hdr;

	hdr = GPTP_HDR(pkt);
 801921c:	4608      	mov	r0, r1
 801921e:	f7ff ffae 	bl	801917e <gptp_get_hdr>

	/* No Fractional nsec .*/
	hdr->correction_field = 0;
 8019222:	2300      	movs	r3, #0
 8019224:	7203      	strb	r3, [r0, #8]
 8019226:	7243      	strb	r3, [r0, #9]
 8019228:	7283      	strb	r3, [r0, #10]
 801922a:	72c3      	strb	r3, [r0, #11]
 801922c:	7303      	strb	r3, [r0, #12]
 801922e:	7343      	strb	r3, [r0, #13]
 8019230:	7383      	strb	r3, [r0, #14]
 8019232:	73c3      	strb	r3, [r0, #15]
 8019234:	4620      	mov	r0, r4
 8019236:	f7ff ffa2 	bl	801917e <gptp_get_hdr>

	follow_up = GPTP_PDELAY_RESP_FOLLOWUP(pkt);
	follow_up->resp_orig_ts_secs_high = htons(tresp->_sec.high);
 801923a:	88aa      	ldrh	r2, [r5, #4]
 801923c:	0a13      	lsrs	r3, r2, #8
 801923e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8019242:	8443      	strh	r3, [r0, #34]	; 0x22
	follow_up->resp_orig_ts_secs_low = htonl(tresp->_sec.low);
 8019244:	682a      	ldr	r2, [r5, #0]
 8019246:	0a13      	lsrs	r3, r2, #8
 8019248:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801924c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8019250:	0211      	lsls	r1, r2, #8
 8019252:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8019256:	430b      	orrs	r3, r1
 8019258:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801925c:	6243      	str	r3, [r0, #36]	; 0x24
	follow_up->resp_orig_ts_nsecs = htonl(tresp->nanosecond);
 801925e:	68aa      	ldr	r2, [r5, #8]
 8019260:	0a13      	lsrs	r3, r2, #8
 8019262:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019266:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 801926a:	0211      	lsls	r1, r2, #8
 801926c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
 8019270:	430b      	orrs	r3, r1
 8019272:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8019276:	6283      	str	r3, [r0, #40]	; 0x28

	GPTP_STATS_INC(port, tx_pdelay_resp_fup_count);

	NET_GPTP_INFO("PDELAY_FOLLOWUP", pkt);

	net_if_queue_tx(net_pkt_iface(pkt), pkt);
 8019278:	4621      	mov	r1, r4
 801927a:	69a0      	ldr	r0, [r4, #24]
 801927c:	f7f4 f89a 	bl	800d3b4 <net_if_queue_tx>
}
 8019280:	bd38      	pop	{r3, r4, r5, pc}

08019282 <copy_priority_vector>:
{
 8019282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019284:	4604      	mov	r4, r0
 8019286:	460f      	mov	r7, r1
 8019288:	4616      	mov	r6, r2
	hdr = GPTP_HDR(pkt);
 801928a:	4608      	mov	r0, r1
 801928c:	f7ff ff77 	bl	801917e <gptp_get_hdr>
 8019290:	4605      	mov	r5, r0
 8019292:	4638      	mov	r0, r7
 8019294:	f7ff ff73 	bl	801917e <gptp_get_hdr>
 8019298:	f850 7f2f 	ldr.w	r7, [r0, #47]!
 801929c:	6841      	ldr	r1, [r0, #4]
 801929e:	6882      	ldr	r2, [r0, #8]
 80192a0:	68c3      	ldr	r3, [r0, #12]
 80192a2:	6027      	str	r7, [r4, #0]
 80192a4:	6061      	str	r1, [r4, #4]
 80192a6:	60a2      	str	r2, [r4, #8]
 80192a8:	60e3      	str	r3, [r4, #12]
	memcpy(&vector->src_port_id, &hdr->port_id,
 80192aa:	4628      	mov	r0, r5
 80192ac:	f850 2f14 	ldr.w	r2, [r0, #20]!
 80192b0:	6843      	ldr	r3, [r0, #4]
 80192b2:	6122      	str	r2, [r4, #16]
 80192b4:	6163      	str	r3, [r4, #20]
 80192b6:	8903      	ldrh	r3, [r0, #8]
 80192b8:	8323      	strh	r3, [r4, #24]
	vector->port_number = htons(port);
 80192ba:	f3c6 2207 	ubfx	r2, r6, #8, #8
 80192be:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80192c2:	8366      	strh	r6, [r4, #26]
}
 80192c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080192c6 <compare_priority_vectors>:
{
 80192c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192c8:	4604      	mov	r4, r0
 80192ca:	460d      	mov	r5, r1
 80192cc:	4616      	mov	r6, r2
	hdr = GPTP_HDR(pkt);
 80192ce:	4608      	mov	r0, r1
 80192d0:	f7ff ff55 	bl	801917e <gptp_get_hdr>
 80192d4:	4607      	mov	r7, r0
 80192d6:	4628      	mov	r0, r5
 80192d8:	f7ff ff51 	bl	801917e <gptp_get_hdr>
	rsi_cmp = memcmp(&announce->root_system_id,
 80192dc:	2210      	movs	r2, #16
 80192de:	4621      	mov	r1, r4
 80192e0:	302f      	adds	r0, #47	; 0x2f
 80192e2:	f003 fa9b 	bl	801c81c <memcmp>
	if (rsi_cmp < 0) {
 80192e6:	1e05      	subs	r5, r0, #0
 80192e8:	db18      	blt.n	801931c <compare_priority_vectors+0x56>
	spi_cmp = memcmp(&hdr->port_id, &vector->src_port_id,
 80192ea:	220a      	movs	r2, #10
 80192ec:	f104 0110 	add.w	r1, r4, #16
 80192f0:	f107 0014 	add.w	r0, r7, #20
 80192f4:	f003 fa92 	bl	801c81c <memcmp>
	port_cmp = (int)port - ntohs(vector->port_number);
 80192f8:	8b63      	ldrh	r3, [r4, #26]
 80192fa:	0a1a      	lsrs	r2, r3, #8
 80192fc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8019300:	b292      	uxth	r2, r2
 8019302:	1ab2      	subs	r2, r6, r2
	if (spi_cmp == 0) {
 8019304:	b928      	cbnz	r0, 8019312 <compare_priority_vectors+0x4c>
		if (rsi_cmp == 0) {
 8019306:	b95d      	cbnz	r5, 8019320 <compare_priority_vectors+0x5a>
			if (port_cmp == 0) {
 8019308:	b162      	cbz	r2, 8019324 <compare_priority_vectors+0x5e>
			} else if (port_cmp < 0) {
 801930a:	2a00      	cmp	r2, #0
 801930c:	db0c      	blt.n	8019328 <compare_priority_vectors+0x62>
	return GPTP_RCVD_INFO_INFERIOR_MASTER_INFO;
 801930e:	2002      	movs	r0, #2
 8019310:	e005      	b.n	801931e <compare_priority_vectors+0x58>
	} else if ((spi_cmp < 0) && (rsi_cmp == 0)) {
 8019312:	2800      	cmp	r0, #0
 8019314:	da0a      	bge.n	801932c <compare_priority_vectors+0x66>
 8019316:	b15d      	cbz	r5, 8019330 <compare_priority_vectors+0x6a>
	return GPTP_RCVD_INFO_INFERIOR_MASTER_INFO;
 8019318:	2002      	movs	r0, #2
 801931a:	e000      	b.n	801931e <compare_priority_vectors+0x58>
		return GPTP_RCVD_INFO_SUPERIOR_MASTER_INFO;
 801931c:	2000      	movs	r0, #0
}
 801931e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return GPTP_RCVD_INFO_SUPERIOR_MASTER_INFO;
 8019320:	2000      	movs	r0, #0
 8019322:	e7fc      	b.n	801931e <compare_priority_vectors+0x58>
				return GPTP_RCVD_INFO_REPEATED_MASTER_INFO;
 8019324:	2001      	movs	r0, #1
 8019326:	e7fa      	b.n	801931e <compare_priority_vectors+0x58>
				return GPTP_RCVD_INFO_SUPERIOR_MASTER_INFO;
 8019328:	2000      	movs	r0, #0
 801932a:	e7f8      	b.n	801931e <compare_priority_vectors+0x58>
	return GPTP_RCVD_INFO_INFERIOR_MASTER_INFO;
 801932c:	2002      	movs	r0, #2
 801932e:	e7f6      	b.n	801931e <compare_priority_vectors+0x58>
		return GPTP_RCVD_INFO_SUPERIOR_MASTER_INFO;
 8019330:	2000      	movs	r0, #0
 8019332:	e7f4      	b.n	801931e <compare_priority_vectors+0x58>

08019334 <tx_announce>:
{
 8019334:	b510      	push	{r4, lr}
 8019336:	4604      	mov	r4, r0
	pkt = gptp_prepare_announce(port);
 8019338:	f7f0 ffce 	bl	800a2d8 <gptp_prepare_announce>
	if (pkt) {
 801933c:	b118      	cbz	r0, 8019346 <tx_announce+0x12>
 801933e:	4601      	mov	r1, r0
		gptp_send_announce(port, pkt);
 8019340:	4620      	mov	r0, r4
 8019342:	f7ff ff2d 	bl	80191a0 <gptp_send_announce>
}
 8019346:	bd10      	pop	{r4, pc}

08019348 <gptp_change_pa_info_state>:
	if (pa_info_state->state == state) {
 8019348:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 801934c:	4293      	cmp	r3, r2
 801934e:	d001      	beq.n	8019354 <gptp_change_pa_info_state+0xc>
	pa_info_state->state = state;
 8019350:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
}
 8019354:	4770      	bx	lr

08019356 <gptp_mi_init_state_machine>:
{
 8019356:	b510      	push	{r4, lr}
	for (port = GPTP_PORT_START;
 8019358:	2401      	movs	r4, #1
 801935a:	2c01      	cmp	r4, #1
 801935c:	dd08      	ble.n	8019370 <gptp_mi_init_state_machine+0x1a>
	gptp_mi_init_site_sync_sync_sm();
 801935e:	f7f1 fff5 	bl	800b34c <gptp_mi_init_site_sync_sync_sm>
	gptp_mi_init_clock_slave_sync_sm();
 8019362:	f7f2 f801 	bl	800b368 <gptp_mi_init_clock_slave_sync_sm>
	gptp_mi_init_port_role_selection_sm();
 8019366:	f7f1 fad5 	bl	800a914 <gptp_mi_init_port_role_selection_sm>
	gptp_mi_init_clock_master_sync_rcv_sm();
 801936a:	f7f2 f805 	bl	800b378 <gptp_mi_init_clock_master_sync_rcv_sm>
}
 801936e:	bd10      	pop	{r4, pc}
		gptp_mi_init_port_sync_sync_rcv_sm(port);
 8019370:	4620      	mov	r0, r4
 8019372:	f7f1 fb11 	bl	800a998 <gptp_mi_init_port_sync_sync_rcv_sm>
		gptp_mi_init_port_sync_sync_send_sm(port);
 8019376:	4620      	mov	r0, r4
 8019378:	f7f1 fb2c 	bl	800a9d4 <gptp_mi_init_port_sync_sync_send_sm>
		gptp_mi_init_port_announce_rcv_sm(port);
 801937c:	4620      	mov	r0, r4
 801937e:	f7f1 faf9 	bl	800a974 <gptp_mi_init_port_announce_rcv_sm>
		gptp_mi_init_port_announce_info_sm(port);
 8019382:	4620      	mov	r0, r4
 8019384:	f7f2 fb58 	bl	800ba38 <gptp_mi_init_port_announce_info_sm>
		gptp_mi_init_port_announce_transmit_sm(port);
 8019388:	4620      	mov	r0, r4
 801938a:	f7f1 fb4b 	bl	800aa24 <gptp_mi_init_port_announce_transmit_sm>
		gptp_mi_init_bmca_data(port);
 801938e:	4620      	mov	r0, r4
 8019390:	f7f1 fb96 	bl	800aac0 <gptp_mi_init_bmca_data>
	     port < (GPTP_PORT_START + CONFIG_NET_GPTP_NUM_PORTS); port++) {
 8019394:	3401      	adds	r4, #1
 8019396:	e7e0      	b.n	801935a <gptp_mi_init_state_machine+0x4>

08019398 <gptp_mi_port_sync_state_machines>:


void gptp_mi_port_sync_state_machines(int port)
{
 8019398:	b510      	push	{r4, lr}
 801939a:	4604      	mov	r4, r0
	gptp_mi_pss_rcv_state_machine(port);
 801939c:	f7f2 fdc0 	bl	800bf20 <gptp_mi_pss_rcv_state_machine>
	gptp_mi_pss_send_state_machine(port);
 80193a0:	4620      	mov	r0, r4
 80193a2:	f7f1 fc6f 	bl	800ac84 <gptp_mi_pss_send_state_machine>
}
 80193a6:	bd10      	pop	{r4, pc}

080193a8 <gptp_mi_port_bmca_state_machines>:

void gptp_mi_port_bmca_state_machines(int port)
{
 80193a8:	b510      	push	{r4, lr}
 80193aa:	4604      	mov	r4, r0
	gptp_mi_port_announce_receive_state_machine(port);
 80193ac:	f7f1 fe40 	bl	800b030 <gptp_mi_port_announce_receive_state_machine>
	gptp_mi_port_announce_information_state_machine(port);
 80193b0:	4620      	mov	r0, r4
 80193b2:	f7f2 fb5f 	bl	800ba74 <gptp_mi_port_announce_information_state_machine>
	gptp_mi_port_announce_transmit_state_machine(port);
 80193b6:	4620      	mov	r0, r4
 80193b8:	f7f1 fed6 	bl	800b168 <gptp_mi_port_announce_transmit_state_machine>
}
 80193bc:	bd10      	pop	{r4, pc}

080193be <gptp_mi_state_machines>:

void gptp_mi_state_machines(void)
{
 80193be:	b508      	push	{r3, lr}
	gptp_mi_site_sync_sync_state_machine();
 80193c0:	f7f2 f924 	bl	800b60c <gptp_mi_site_sync_sync_state_machine>
	gptp_mi_clk_slave_sync_state_machine();
 80193c4:	f7f1 ffa0 	bl	800b308 <gptp_mi_clk_slave_sync_state_machine>
	gptp_mi_port_role_selection_state_machine();
 80193c8:	f7f2 fb16 	bl	800b9f8 <gptp_mi_port_role_selection_state_machine>
	gptp_mi_clk_master_sync_offset_state_machine();
 80193cc:	f7f1 ffe2 	bl	800b394 <gptp_mi_clk_master_sync_offset_state_machine>
#if defined(CONFIG_NET_GPTP_GM_CAPABLE)
	gptp_mi_clk_master_sync_snd_state_machine();
#endif
	gptp_mi_clk_master_sync_rcv_state_machine();
 80193d0:	f7f2 fe3a 	bl	800c048 <gptp_mi_clk_master_sync_rcv_state_machine>
}
 80193d4:	bd08      	pop	{r3, pc}

080193d6 <lldp_find>:
{
 80193d6:	4602      	mov	r2, r0
	int i, found = -1;
 80193d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	for (i = 0; i < ARRAY_SIZE(ctx->lldp); i++) {
 80193dc:	2300      	movs	r3, #0
 80193de:	2b00      	cmp	r3, #0
 80193e0:	dd12      	ble.n	8019408 <lldp_find+0x32>
	if (found >= 0) {
 80193e2:	2800      	cmp	r0, #0
 80193e4:	db0d      	blt.n	8019402 <lldp_find+0x2c>
		ctx->lldp[found].iface = iface;
 80193e6:	1c43      	adds	r3, r0, #1
 80193e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80193ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		return found;
 80193f0:	4770      	bx	lr
		if (found < 0 && ctx->lldp[i].iface == NULL) {
 80193f2:	b99c      	cbnz	r4, 801941c <lldp_find+0x46>
			found = i;
 80193f4:	4618      	mov	r0, r3
 80193f6:	e011      	b.n	801941c <lldp_find+0x46>
			return i;
 80193f8:	4618      	mov	r0, r3
 80193fa:	e019      	b.n	8019430 <lldp_find+0x5a>
	return -ENOENT;
 80193fc:	f06f 0001 	mvn.w	r0, #1
 8019400:	e016      	b.n	8019430 <lldp_find+0x5a>
 8019402:	f06f 0001 	mvn.w	r0, #1
}
 8019406:	4770      	bx	lr
{
 8019408:	b410      	push	{r4}
		if (ctx->lldp[i].iface == iface) {
 801940a:	1c5c      	adds	r4, r3, #1
 801940c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8019410:	f852 4034 	ldr.w	r4, [r2, r4, lsl #3]
 8019414:	428c      	cmp	r4, r1
 8019416:	d0ef      	beq.n	80193f8 <lldp_find+0x22>
		if (found < 0 && ctx->lldp[i].iface == NULL) {
 8019418:	2800      	cmp	r0, #0
 801941a:	dbea      	blt.n	80193f2 <lldp_find+0x1c>
	for (i = 0; i < ARRAY_SIZE(ctx->lldp); i++) {
 801941c:	3301      	adds	r3, #1
 801941e:	2b00      	cmp	r3, #0
 8019420:	ddf3      	ble.n	801940a <lldp_find+0x34>
	if (found >= 0) {
 8019422:	2800      	cmp	r0, #0
 8019424:	dbea      	blt.n	80193fc <lldp_find+0x26>
		ctx->lldp[found].iface = iface;
 8019426:	1c43      	adds	r3, r0, #1
 8019428:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801942c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
}
 8019430:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019434:	4770      	bx	lr

08019436 <iface_event_handler>:
{
 8019436:	b508      	push	{r3, lr}
	lldp_start(iface, mgmt_event);
 8019438:	4610      	mov	r0, r2
 801943a:	f7f2 feb9 	bl	800c1b0 <lldp_start>
}
 801943e:	bd08      	pop	{r3, pc}

08019440 <lldp_check_timeout>:
{
 8019440:	b508      	push	{r3, lr}
	start = llabs(start);
 8019442:	1880      	adds	r0, r0, r2
 8019444:	f141 0100 	adc.w	r1, r1, #0
 8019448:	f003 f9dc 	bl	801c804 <llabs>
	if (start > timeout) {
 801944c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019450:	4282      	cmp	r2, r0
 8019452:	418b      	sbcs	r3, r1
 8019454:	db01      	blt.n	801945a <lldp_check_timeout+0x1a>
	return true;
 8019456:	2001      	movs	r0, #1
}
 8019458:	bd08      	pop	{r3, pc}
		return false;
 801945a:	2000      	movs	r0, #0
 801945c:	e7fc      	b.n	8019458 <lldp_check_timeout+0x18>

0801945e <lldp_timedout>:
{
 801945e:	b500      	push	{lr}
 8019460:	b083      	sub	sp, #12
	return lldp_check_timeout(lldp->tx_timer_start,
 8019462:	e9cd 2300 	strd	r2, r3, [sp]
 8019466:	6a02      	ldr	r2, [r0, #32]
 8019468:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
 801946c:	f7ff ffe8 	bl	8019440 <lldp_check_timeout>
}
 8019470:	b003      	add	sp, #12
 8019472:	f85d fb04 	ldr.w	pc, [sp], #4

08019476 <lldp_manage_timeouts>:
{
 8019476:	b538      	push	{r3, r4, r5, lr}
 8019478:	4604      	mov	r4, r0
 801947a:	4615      	mov	r5, r2
	if (lldp_timedout(lldp, timeout)) {
 801947c:	f7ff ffef 	bl	801945e <lldp_timedout>
 8019480:	b930      	cbnz	r0, 8019490 <lldp_manage_timeouts+0x1a>
	next_timeout = timeout - (lldp->tx_timer_start +
 8019482:	69a3      	ldr	r3, [r4, #24]
				  lldp->tx_timer_timeout);
 8019484:	6a20      	ldr	r0, [r4, #32]
	next_timeout = timeout - (lldp->tx_timer_start +
 8019486:	4418      	add	r0, r3
	return abs(next_timeout);
 8019488:	1a28      	subs	r0, r5, r0
 801948a:	f003 f9b7 	bl	801c7fc <abs>
}
 801948e:	bd38      	pop	{r3, r4, r5, pc}
		lldp_send(lldp);
 8019490:	4620      	mov	r0, r4
 8019492:	f7f2 ff01 	bl	800c298 <lldp_send>
 8019496:	e7f4      	b.n	8019482 <lldp_manage_timeouts+0xc>

08019498 <net_lldp_recv>:
{
 8019498:	b570      	push	{r4, r5, r6, lr}
 801949a:	4604      	mov	r4, r0
 801949c:	460e      	mov	r6, r1
	ret = lldp_check_iface(iface);
 801949e:	f7f2 fe21 	bl	800c0e4 <lldp_check_iface>
	if (ret < 0) {
 80194a2:	2800      	cmp	r0, #0
 80194a4:	db11      	blt.n	80194ca <net_lldp_recv+0x32>
	return iface->if_dev->l2_data;
 80194a6:	6823      	ldr	r3, [r4, #0]
 80194a8:	689d      	ldr	r5, [r3, #8]
	ret = lldp_find(ctx, iface);
 80194aa:	4621      	mov	r1, r4
 80194ac:	4628      	mov	r0, r5
 80194ae:	f7ff ff92 	bl	80193d6 <lldp_find>
	if (ret < 0) {
 80194b2:	1e03      	subs	r3, r0, #0
 80194b4:	db0b      	blt.n	80194ce <net_lldp_recv+0x36>
	cb = ctx->lldp[ret].cb;
 80194b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80194ba:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80194be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if (cb) {
 80194c0:	b13b      	cbz	r3, 80194d2 <net_lldp_recv+0x3a>
		return cb(iface, pkt);
 80194c2:	4631      	mov	r1, r6
 80194c4:	4620      	mov	r0, r4
 80194c6:	4798      	blx	r3
}
 80194c8:	bd70      	pop	{r4, r5, r6, pc}
		return NET_DROP;
 80194ca:	2002      	movs	r0, #2
 80194cc:	e7fc      	b.n	80194c8 <net_lldp_recv+0x30>
		return NET_DROP;
 80194ce:	2002      	movs	r0, #2
 80194d0:	e7fa      	b.n	80194c8 <net_lldp_recv+0x30>
	return NET_DROP;
 80194d2:	2002      	movs	r0, #2
 80194d4:	e7f8      	b.n	80194c8 <net_lldp_recv+0x30>

080194d6 <net_post_init>:
{
 80194d6:	b508      	push	{r3, lr}
	net_lldp_init();
 80194d8:	f7f2 ff8c 	bl	800c3f4 <net_lldp_init>
	net_gptp_init();
 80194dc:	f7ef fb26 	bl	8008b2c <net_gptp_init>
}
 80194e0:	bd08      	pop	{r3, pc}

080194e2 <init_rx_queues>:
{
 80194e2:	b508      	push	{r3, lr}
	net_if_init();
 80194e4:	f7f5 ff0a 	bl	800f2fc <net_if_init>
	net_tc_rx_init();
 80194e8:	f7f6 fc98 	bl	800fe1c <net_tc_rx_init>
	net_if_post_init();
 80194ec:	f7f5 ffc6 	bl	800f47c <net_if_post_init>
	net_post_init();
 80194f0:	f7ff fff1 	bl	80194d6 <net_post_init>
}
 80194f4:	bd08      	pop	{r3, pc}

080194f6 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
 80194f6:	b508      	push	{r3, lr}
	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
 80194f8:	f001 f983 	bl	801a802 <net_pkt_init>

	net_context_init();
 80194fc:	f7f6 fa14 	bl	800f928 <net_context_init>
	net_icmpv4_init();
 8019500:	f7f6 fede 	bl	80102c0 <net_icmpv4_init>
	net_icmpv6_init();
 8019504:	f7f7 fab0 	bl	8010a68 <net_icmpv6_init>
	net_ipv6_init();
 8019508:	f001 fe61 	bl	801b1ce <net_ipv6_init>
		net_conn_init();
 801950c:	f7fa fc62 	bl	8013dd4 <net_conn_init>
	net_tcp_init();
 8019510:	f7fa fcaa 	bl	8013e68 <net_tcp_init>
	net_route_init();
 8019514:	f7fa fab0 	bl	8013a78 <net_route_init>

	l3_init();

	net_mgmt_event_init();
 8019518:	f7f6 f9d0 	bl	800f8bc <net_mgmt_event_init>

	init_rx_queues();
 801951c:	f7ff ffe1 	bl	80194e2 <init_rx_queues>

	return services_init();
}
 8019520:	2000      	movs	r0, #0
 8019522:	bd08      	pop	{r3, pc}

08019524 <net_process_rx_packet>:
{
 8019524:	b508      	push	{r3, lr}
 8019526:	4601      	mov	r1, r0
	net_rx(net_pkt_iface(pkt), pkt);
 8019528:	6980      	ldr	r0, [r0, #24]
 801952a:	f7f2 ffd5 	bl	800c4d8 <net_rx>
}
 801952e:	bd08      	pop	{r3, pc}

08019530 <net_recv_data>:
	if (!pkt || !iface) {
 8019530:	b391      	cbz	r1, 8019598 <net_recv_data+0x68>
{
 8019532:	b538      	push	{r3, r4, r5, lr}
 8019534:	4604      	mov	r4, r0
 8019536:	460d      	mov	r5, r1
	if (!pkt || !iface) {
 8019538:	b388      	cbz	r0, 801959e <net_recv_data+0x6e>
	return !pkt->buffer || !net_pkt_data(pkt) || pkt->buffer->len == 0;
 801953a:	688b      	ldr	r3, [r1, #8]
 801953c:	b12b      	cbz	r3, 801954a <net_recv_data+0x1a>
	return pkt->frags->data;
 801953e:	689a      	ldr	r2, [r3, #8]
	return !pkt->buffer || !net_pkt_data(pkt) || pkt->buffer->len == 0;
 8019540:	b332      	cbz	r2, 8019590 <net_recv_data+0x60>
 8019542:	899b      	ldrh	r3, [r3, #12]
 8019544:	b333      	cbz	r3, 8019594 <net_recv_data+0x64>
 8019546:	2300      	movs	r3, #0
 8019548:	e000      	b.n	801954c <net_recv_data+0x1c>
 801954a:	2301      	movs	r3, #1
	if (net_pkt_is_empty(pkt)) {
 801954c:	bb53      	cbnz	r3, 80195a4 <net_recv_data+0x74>
	return atomic_test_bit(iface->if_dev->flags, value);
 801954e:	6823      	ldr	r3, [r4, #0]
 8019550:	f3bf 8f5b 	dmb	ish
 8019554:	68db      	ldr	r3, [r3, #12]
 8019556:	f3bf 8f5b 	dmb	ish
	if (!net_if_flag_is_set(iface, NET_IF_UP)) {
 801955a:	f013 0f01 	tst.w	r3, #1
 801955e:	d024      	beq.n	80195aa <net_recv_data+0x7a>
	pkt->overwrite = overwrite;
 8019560:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
 8019564:	f043 0301 	orr.w	r3, r3, #1
 8019568:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
	net_pkt_cursor_init(pkt);
 801956c:	4628      	mov	r0, r5
 801956e:	f000 ff74 	bl	801a45a <net_pkt_cursor_init>
	pkt->iface = iface;
 8019572:	61ac      	str	r4, [r5, #24]
	return &iface->if_dev->link_addr;
 8019574:	6823      	ldr	r3, [r4, #0]
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
 8019576:	7d5b      	ldrb	r3, [r3, #21]
 8019578:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 801957c:	6823      	ldr	r3, [r4, #0]
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
 801957e:	7d5b      	ldrb	r3, [r3, #21]
 8019580:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
		net_queue_rx(iface, pkt);
 8019584:	4629      	mov	r1, r5
 8019586:	4620      	mov	r0, r4
 8019588:	f7f2 ffbe 	bl	800c508 <net_queue_rx>
	return 0;
 801958c:	2000      	movs	r0, #0
}
 801958e:	bd38      	pop	{r3, r4, r5, pc}
	return !pkt->buffer || !net_pkt_data(pkt) || pkt->buffer->len == 0;
 8019590:	2301      	movs	r3, #1
 8019592:	e7db      	b.n	801954c <net_recv_data+0x1c>
 8019594:	2301      	movs	r3, #1
 8019596:	e7d9      	b.n	801954c <net_recv_data+0x1c>
		return -EINVAL;
 8019598:	f06f 0015 	mvn.w	r0, #21
}
 801959c:	4770      	bx	lr
		return -EINVAL;
 801959e:	f06f 0015 	mvn.w	r0, #21
 80195a2:	e7f4      	b.n	801958e <net_recv_data+0x5e>
		return -ENODATA;
 80195a4:	f06f 003c 	mvn.w	r0, #60	; 0x3c
 80195a8:	e7f1      	b.n	801958e <net_recv_data+0x5e>
		return -ENETDOWN;
 80195aa:	f06f 0072 	mvn.w	r0, #114	; 0x72
 80195ae:	e7ee      	b.n	801958e <net_recv_data+0x5e>

080195b0 <l2_flags_get>:
	if (!iface || !iface->if_dev) {
 80195b0:	b140      	cbz	r0, 80195c4 <l2_flags_get+0x14>
{
 80195b2:	b508      	push	{r3, lr}
 80195b4:	6803      	ldr	r3, [r0, #0]
 80195b6:	b13b      	cbz	r3, 80195c8 <l2_flags_get+0x18>
	return iface->if_dev->l2;
 80195b8:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
 80195ba:	b13b      	cbz	r3, 80195cc <l2_flags_get+0x1c>
 80195bc:	68db      	ldr	r3, [r3, #12]
 80195be:	b13b      	cbz	r3, 80195d0 <l2_flags_get+0x20>
		flags = net_if_l2(iface)->get_flags(iface);
 80195c0:	4798      	blx	r3
}
 80195c2:	bd08      	pop	{r3, pc}
	enum net_l2_flags flags = 0;
 80195c4:	2000      	movs	r0, #0
}
 80195c6:	4770      	bx	lr
	enum net_l2_flags flags = 0;
 80195c8:	2000      	movs	r0, #0
 80195ca:	e7fa      	b.n	80195c2 <l2_flags_get+0x12>
 80195cc:	2000      	movs	r0, #0
 80195ce:	e7f8      	b.n	80195c2 <l2_flags_get+0x12>
 80195d0:	2000      	movs	r0, #0
 80195d2:	e7f6      	b.n	80195c2 <l2_flags_get+0x12>

080195d4 <get_ipaddr_diff>:
{
 80195d4:	b470      	push	{r4, r5, r6}
 80195d6:	4606      	mov	r6, r0
	uint8_t len = 0U;
 80195d8:	2000      	movs	r0, #0
	for (j = 0U; j < addr_len; j++) {
 80195da:	4603      	mov	r3, r0
 80195dc:	4293      	cmp	r3, r2
 80195de:	da16      	bge.n	801960e <get_ipaddr_diff+0x3a>
		if (src[j] == dst[j]) {
 80195e0:	5cf4      	ldrb	r4, [r6, r3]
 80195e2:	5ccd      	ldrb	r5, [r1, r3]
 80195e4:	42ac      	cmp	r4, r5
 80195e6:	d104      	bne.n	80195f2 <get_ipaddr_diff+0x1e>
			len += 8U;
 80195e8:	3008      	adds	r0, #8
 80195ea:	b2c0      	uxtb	r0, r0
	for (j = 0U; j < addr_len; j++) {
 80195ec:	3301      	adds	r3, #1
 80195ee:	b2db      	uxtb	r3, r3
 80195f0:	e7f4      	b.n	80195dc <get_ipaddr_diff+0x8>
			xor = src[j] ^ dst[j];
 80195f2:	406c      	eors	r4, r5
			for (k = 0U; k < 8; k++) {
 80195f4:	2300      	movs	r3, #0
 80195f6:	2b07      	cmp	r3, #7
 80195f8:	d809      	bhi.n	801960e <get_ipaddr_diff+0x3a>
				if (!(xor & 0x80)) {
 80195fa:	f014 0f80 	tst.w	r4, #128	; 0x80
 80195fe:	d106      	bne.n	801960e <get_ipaddr_diff+0x3a>
					len++;
 8019600:	3001      	adds	r0, #1
 8019602:	b2c0      	uxtb	r0, r0
					xor <<= 1;
 8019604:	0064      	lsls	r4, r4, #1
 8019606:	b2e4      	uxtb	r4, r4
			for (k = 0U; k < 8; k++) {
 8019608:	3301      	adds	r3, #1
 801960a:	b2db      	uxtb	r3, r3
 801960c:	e7f3      	b.n	80195f6 <get_ipaddr_diff+0x22>
}
 801960e:	bc70      	pop	{r4, r5, r6}
 8019610:	4770      	bx	lr

08019612 <net_if_ipv6_prefix_init>:
{
 8019612:	b470      	push	{r4, r5, r6}
 8019614:	b085      	sub	sp, #20
 8019616:	460c      	mov	r4, r1
 8019618:	4616      	mov	r6, r2
	ifprefix->is_used = true;
 801961a:	f891 2025 	ldrb.w	r2, [r1, #37]	; 0x25
 801961e:	f042 0202 	orr.w	r2, r2, #2
 8019622:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
	ifprefix->len = len;
 8019626:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
	ifprefix->iface = iface;
 801962a:	6208      	str	r0, [r1, #32]
	net_ipaddr_copy(&ifprefix->prefix, addr);
 801962c:	466d      	mov	r5, sp
 801962e:	6830      	ldr	r0, [r6, #0]
 8019630:	6871      	ldr	r1, [r6, #4]
 8019632:	68b2      	ldr	r2, [r6, #8]
 8019634:	68f3      	ldr	r3, [r6, #12]
 8019636:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019638:	466d      	mov	r5, sp
 801963a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801963c:	6120      	str	r0, [r4, #16]
 801963e:	6161      	str	r1, [r4, #20]
 8019640:	61a2      	str	r2, [r4, #24]
 8019642:	61e3      	str	r3, [r4, #28]
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
 8019644:	9b08      	ldr	r3, [sp, #32]
 8019646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801964a:	d008      	beq.n	801965e <net_if_ipv6_prefix_init+0x4c>
		ifprefix->is_infinite = false;
 801964c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8019650:	f36f 0300 	bfc	r3, #0, #1
 8019654:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
 8019658:	b005      	add	sp, #20
 801965a:	bc70      	pop	{r4, r5, r6}
 801965c:	4770      	bx	lr
		ifprefix->is_infinite = true;
 801965e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8019662:	f043 0301 	orr.w	r3, r3, #1
 8019666:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 801966a:	e7f5      	b.n	8019658 <net_if_ipv6_prefix_init+0x46>

0801966c <get_diff_ipv6>:
{
 801966c:	b508      	push	{r3, lr}
	return get_ipaddr_diff((const uint8_t *)src, (const uint8_t *)dst, 16);
 801966e:	2210      	movs	r2, #16
 8019670:	f7ff ffb0 	bl	80195d4 <get_ipaddr_diff>
}
 8019674:	bd08      	pop	{r3, pc}

08019676 <get_diff_ipv4>:
{
 8019676:	b508      	push	{r3, lr}
	return get_ipaddr_diff((const uint8_t *)src, (const uint8_t *)dst, 4);
 8019678:	2204      	movs	r2, #4
 801967a:	f7ff ffab 	bl	80195d4 <get_ipaddr_diff>
}
 801967e:	bd08      	pop	{r3, pc}

08019680 <ipv4_addr_find>:
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
 8019680:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
 8019684:	2300      	movs	r3, #0
 8019686:	2b00      	cmp	r3, #0
 8019688:	dd06      	ble.n	8019698 <ipv4_addr_find+0x18>
	return NULL;
 801968a:	2000      	movs	r0, #0
}
 801968c:	4770      	bx	lr
			return &ipv4->unicast[i];
 801968e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019692:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8019696:	e015      	b.n	80196c4 <ipv4_addr_find+0x44>
{
 8019698:	b410      	push	{r4}
		if (!ipv4->unicast[i].is_used) {
 801969a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801969e:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 80196a2:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 80196a6:	f012 0f02 	tst.w	r2, #2
 80196aa:	d007      	beq.n	80196bc <ipv4_addr_find+0x3c>
				      &ipv4->unicast[i].address.in_addr)) {
 80196ac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80196b0:	eb00 1202 	add.w	r2, r0, r2, lsl #4
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 80196b4:	680c      	ldr	r4, [r1, #0]
 80196b6:	6852      	ldr	r2, [r2, #4]
		if (net_ipv4_addr_cmp(addr,
 80196b8:	4294      	cmp	r4, r2
 80196ba:	d0e8      	beq.n	801968e <ipv4_addr_find+0xe>
	for (i = 0; i < NET_IF_MAX_IPV4_ADDR; i++) {
 80196bc:	3301      	adds	r3, #1
 80196be:	2b00      	cmp	r3, #0
 80196c0:	ddeb      	ble.n	801969a <ipv4_addr_find+0x1a>
	return NULL;
 80196c2:	2000      	movs	r0, #0
}
 80196c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80196c8:	4770      	bx	lr

080196ca <z_log_msg2_runtime_create>:
{
 80196ca:	b510      	push	{r4, lr}
 80196cc:	b086      	sub	sp, #24
	va_start(ap, fmt);
 80196ce:	ac0a      	add	r4, sp, #40	; 0x28
 80196d0:	9405      	str	r4, [sp, #20]
 80196d2:	9402      	str	r4, [sp, #8]
 80196d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80196d6:	9401      	str	r4, [sp, #4]
 80196d8:	9c08      	ldr	r4, [sp, #32]
 80196da:	9400      	str	r4, [sp, #0]
 80196dc:	f7fe fb52 	bl	8017d84 <z_impl_z_log_msg2_runtime_vcreate>
}
 80196e0:	b006      	add	sp, #24
 80196e2:	bd10      	pop	{r4, pc}

080196e4 <ipv6_addr_find>:
{
 80196e4:	b570      	push	{r4, r5, r6, lr}
 80196e6:	460e      	mov	r6, r1
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 80196e8:	f8d0 5210 	ldr.w	r5, [r0, #528]	; 0x210
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 80196ec:	2400      	movs	r4, #0
 80196ee:	e000      	b.n	80196f2 <ipv6_addr_find+0xe>
 80196f0:	3401      	adds	r4, #1
 80196f2:	2c01      	cmp	r4, #1
 80196f4:	dc18      	bgt.n	8019728 <ipv6_addr_find+0x44>
		if (!ipv6->unicast[i].is_used) {
 80196f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80196fa:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80196fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8019702:	f013 0f02 	tst.w	r3, #2
 8019706:	d0f3      	beq.n	80196f0 <ipv6_addr_find+0xc>
			    addr, &ipv6->unicast[i].address.in6_addr)) {
 8019708:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801970c:	eb05 1101 	add.w	r1, r5, r1, lsl #4
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 8019710:	2210      	movs	r2, #16
 8019712:	3104      	adds	r1, #4
 8019714:	4630      	mov	r0, r6
 8019716:	f003 f881 	bl	801c81c <memcmp>
		if (net_ipv6_addr_cmp(
 801971a:	2800      	cmp	r0, #0
 801971c:	d1e8      	bne.n	80196f0 <ipv6_addr_find+0xc>
			return &ipv6->unicast[i];
 801971e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019722:	eb05 1004 	add.w	r0, r5, r4, lsl #4
 8019726:	e000      	b.n	801972a <ipv6_addr_find+0x46>
	return NULL;
 8019728:	2000      	movs	r0, #0
}
 801972a:	bd70      	pop	{r4, r5, r6, pc}

0801972c <ipv6_prefix_find>:
{
 801972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 801972e:	f8d0 5210 	ldr.w	r5, [r0, #528]	; 0x210
	if (!ipv6) {
 8019732:	b34d      	cbz	r5, 8019788 <ipv6_prefix_find+0x5c>
 8019734:	460e      	mov	r6, r1
 8019736:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
 8019738:	2400      	movs	r4, #0
 801973a:	e000      	b.n	801973e <ipv6_prefix_find+0x12>
 801973c:	3401      	adds	r4, #1
 801973e:	2c01      	cmp	r4, #1
 8019740:	dc21      	bgt.n	8019786 <ipv6_prefix_find+0x5a>
		if (!ipv6->prefix[i].is_used) {
 8019742:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8019746:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 801974a:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 801974e:	f013 0f02 	tst.w	r3, #2
 8019752:	d0f3      	beq.n	801973c <ipv6_prefix_find+0x10>
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
 8019754:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8019758:	00db      	lsls	r3, r3, #3
 801975a:	33b8      	adds	r3, #184	; 0xb8
 801975c:	2210      	movs	r2, #16
 801975e:	18e9      	adds	r1, r5, r3
 8019760:	4630      	mov	r0, r6
 8019762:	f003 f85b 	bl	801c81c <memcmp>
 8019766:	2800      	cmp	r0, #0
 8019768:	d1e8      	bne.n	801973c <ipv6_prefix_find+0x10>
		    prefix_len == ipv6->prefix[i].len) {
 801976a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801976e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8019772:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
		if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
 8019776:	42bb      	cmp	r3, r7
 8019778:	d1e0      	bne.n	801973c <ipv6_prefix_find+0x10>
			return &ipv6->prefix[i];
 801977a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801977e:	00db      	lsls	r3, r3, #3
 8019780:	33a8      	adds	r3, #168	; 0xa8
 8019782:	441d      	add	r5, r3
 8019784:	e000      	b.n	8019788 <ipv6_prefix_find+0x5c>
	return NULL;
 8019786:	2500      	movs	r5, #0
}
 8019788:	4628      	mov	r0, r5
 801978a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801978c <join_mcast_nodes>:
{
 801978c:	b570      	push	{r4, r5, r6, lr}
 801978e:	4605      	mov	r5, r0
 8019790:	460e      	mov	r6, r1
	flags = l2_flags_get(iface);
 8019792:	f7ff ff0d 	bl	80195b0 <l2_flags_get>
	if (flags & NET_L2_MULTICAST) {
 8019796:	f010 0f01 	tst.w	r0, #1
 801979a:	d100      	bne.n	801979e <join_mcast_nodes+0x12>
}
 801979c:	bd70      	pop	{r4, r5, r6, pc}
 801979e:	4604      	mov	r4, r0
		join_mcast_allnodes(iface);
 80197a0:	4628      	mov	r0, r5
 80197a2:	f7f3 fb6f 	bl	800ce84 <join_mcast_allnodes>
		if (!(flags & NET_L2_MULTICAST_SKIP_JOIN_SOLICIT_NODE)) {
 80197a6:	f014 0f02 	tst.w	r4, #2
 80197aa:	d1f7      	bne.n	801979c <join_mcast_nodes+0x10>
			join_mcast_solicit_node(iface, addr);
 80197ac:	4631      	mov	r1, r6
 80197ae:	4628      	mov	r0, r5
 80197b0:	f7f3 fb9e 	bl	800cef0 <join_mcast_solicit_node>
}
 80197b4:	e7f2      	b.n	801979c <join_mcast_nodes+0x10>

080197b6 <iface_ipv6_start>:
{
 80197b6:	b510      	push	{r4, lr}
 80197b8:	4604      	mov	r4, r0
		net_if_start_dad(iface);
 80197ba:	f7f4 f9cf 	bl	800db5c <net_if_start_dad>
	net_if_start_rs(iface);
 80197be:	4620      	mov	r0, r4
 80197c0:	f7f3 fee8 	bl	800d594 <net_if_start_rs>
}
 80197c4:	bd10      	pop	{r4, pc}

080197c6 <remove_prefix_addresses>:
{
 80197c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197ca:	b083      	sub	sp, #12
 80197cc:	9001      	str	r0, [sp, #4]
 80197ce:	460d      	mov	r5, r1
 80197d0:	4617      	mov	r7, r2
 80197d2:	461e      	mov	r6, r3
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 80197d4:	2400      	movs	r4, #0
 80197d6:	e021      	b.n	801981c <remove_prefix_addresses+0x56>
	if (memcmp(addr1, addr2, bytes)) {
 80197d8:	465a      	mov	r2, fp
 80197da:	4649      	mov	r1, r9
 80197dc:	4638      	mov	r0, r7
 80197de:	f003 f81d 	bl	801c81c <memcmp>
 80197e2:	2800      	cmp	r0, #0
 80197e4:	d146      	bne.n	8019874 <remove_prefix_addresses+0xae>
	if (!remain) {
 80197e6:	f1ba 0f00 	cmp.w	sl, #0
 80197ea:	d013      	beq.n	8019814 <remove_prefix_addresses+0x4e>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
 80197ec:	f1ca 0208 	rsb	r2, sl, #8
 80197f0:	23ff      	movs	r3, #255	; 0xff
 80197f2:	4093      	lsls	r3, r2
 80197f4:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80197f8:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
 80197fc:	f817 300b 	ldrb.w	r3, [r7, fp]
 8019800:	f819 200b 	ldrb.w	r2, [r9, fp]
 8019804:	4053      	eors	r3, r2
 8019806:	ea1a 0f03 	tst.w	sl, r3
 801980a:	bf0c      	ite	eq
 801980c:	f04f 0801 	moveq.w	r8, #1
 8019810:	f04f 0800 	movne.w	r8, #0
		if (net_ipv6_is_prefix(
 8019814:	f1b8 0f00 	cmp.w	r8, #0
 8019818:	d12f      	bne.n	801987a <remove_prefix_addresses+0xb4>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
 801981a:	3401      	adds	r4, #1
 801981c:	2c01      	cmp	r4, #1
 801981e:	dc35      	bgt.n	801988c <remove_prefix_addresses+0xc6>
		if (!ipv6->unicast[i].is_used ||
 8019820:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8019824:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8019828:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801982c:	f3c3 0840 	ubfx	r8, r3, #1, #1
 8019830:	f013 0f02 	tst.w	r3, #2
 8019834:	d0f1      	beq.n	801981a <remove_prefix_addresses+0x54>
		    ipv6->unicast[i].address.family != AF_INET6 ||
 8019836:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801983a:	011b      	lsls	r3, r3, #4
 801983c:	5aeb      	ldrh	r3, [r5, r3]
		if (!ipv6->unicast[i].is_used ||
 801983e:	2b02      	cmp	r3, #2
 8019840:	d1eb      	bne.n	801981a <remove_prefix_addresses+0x54>
		    ipv6->unicast[i].addr_type != NET_ADDR_AUTOCONF) {
 8019842:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8019846:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 801984a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
		    ipv6->unicast[i].address.family != AF_INET6 ||
 801984e:	2b01      	cmp	r3, #1
 8019850:	d1e3      	bne.n	801981a <remove_prefix_addresses+0x54>
				ipv6->unicast[i].address.in6_addr.s6_addr,
 8019852:	eb04 0944 	add.w	r9, r4, r4, lsl #1
 8019856:	eb05 1909 	add.w	r9, r5, r9, lsl #4
 801985a:	f109 0904 	add.w	r9, r9, #4
	uint8_t bytes = length / 8U;
 801985e:	ea4f 0bd6 	mov.w	fp, r6, lsr #3
	uint8_t remain = bits % 8;
 8019862:	f1c6 0a00 	rsb	sl, r6, #0
 8019866:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
 801986a:	2e80      	cmp	r6, #128	; 0x80
 801986c:	d9b4      	bls.n	80197d8 <remove_prefix_addresses+0x12>
		return false;
 801986e:	f04f 0800 	mov.w	r8, #0
 8019872:	e7cf      	b.n	8019814 <remove_prefix_addresses+0x4e>
		return false;
 8019874:	f04f 0800 	mov.w	r8, #0
 8019878:	e7cc      	b.n	8019814 <remove_prefix_addresses+0x4e>
					    &ipv6->unicast[i].address.in6_addr);
 801987a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801987e:	eb05 1101 	add.w	r1, r5, r1, lsl #4
			net_if_ipv6_addr_rm(iface,
 8019882:	3104      	adds	r1, #4
 8019884:	9801      	ldr	r0, [sp, #4]
 8019886:	f7f4 faa7 	bl	800ddd8 <net_if_ipv6_addr_rm>
 801988a:	e7c6      	b.n	801981a <remove_prefix_addresses+0x54>
}
 801988c:	b003      	add	sp, #12
 801988e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019892 <net_if_ipv6_prefix_set_timer>:
	if (lifetime == 0xffffffff) {
 8019892:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8019896:	d003      	beq.n	80198a0 <net_if_ipv6_prefix_set_timer+0xe>
{
 8019898:	b508      	push	{r3, lr}
	prefix_start_timer(prefix, lifetime);
 801989a:	f7f3 fa43 	bl	800cd24 <prefix_start_timer>
}
 801989e:	bd08      	pop	{r3, pc}
 80198a0:	4770      	bx	lr

080198a2 <net_if_ipv6_prefix_unset_timer>:
{
 80198a2:	b508      	push	{r3, lr}
	if (!prefix->is_used) {
 80198a4:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80198a8:	f013 0f02 	tst.w	r3, #2
 80198ac:	d100      	bne.n	80198b0 <net_if_ipv6_prefix_unset_timer+0xe>
}
 80198ae:	bd08      	pop	{r3, pc}
	prefix_timer_remove(prefix);
 80198b0:	f7f3 fa86 	bl	800cdc0 <prefix_timer_remove>
 80198b4:	e7fb      	b.n	80198ae <net_if_ipv6_prefix_unset_timer+0xc>

080198b6 <net_if_ipv6_router_lookup>:
{
 80198b6:	b508      	push	{r3, lr}
 80198b8:	460a      	mov	r2, r1
	return iface_router_lookup(iface, AF_INET6, addr);
 80198ba:	2102      	movs	r1, #2
 80198bc:	f7f3 f958 	bl	800cb70 <iface_router_lookup>
}
 80198c0:	bd08      	pop	{r3, pc}

080198c2 <net_if_ipv6_router_find_default>:
{
 80198c2:	b508      	push	{r3, lr}
 80198c4:	460a      	mov	r2, r1
	return iface_router_find_default(iface, AF_INET6, addr);
 80198c6:	2102      	movs	r1, #2
 80198c8:	f7f3 f8bc 	bl	800ca44 <iface_router_find_default>
}
 80198cc:	bd08      	pop	{r3, pc}

080198ce <net_if_ipv6_router_update_lifetime>:
{
 80198ce:	b538      	push	{r3, r4, r5, lr}
 80198d0:	4604      	mov	r4, r0
 80198d2:	460d      	mov	r5, r1
	return z_impl_k_uptime_ticks();
 80198d4:	f002 fe98 	bl	801c608 <z_impl_k_uptime_ticks>
 80198d8:	220a      	movs	r2, #10
 80198da:	2300      	movs	r3, #0
 80198dc:	f7e7 f92e 	bl	8000b3c <__aeabi_uldivmod>
	router->life_start = k_uptime_get_32();
 80198e0:	61e0      	str	r0, [r4, #28]
	router->lifetime = lifetime;
 80198e2:	8425      	strh	r5, [r4, #32]
	iface_router_update_timer(router->life_start);
 80198e4:	f7f3 fb40 	bl	800cf68 <iface_router_update_timer>
}
 80198e8:	bd38      	pop	{r3, r4, r5, pc}

080198ea <net_if_ipv6_router_add>:
{
 80198ea:	b500      	push	{lr}
 80198ec:	b083      	sub	sp, #12
	return iface_router_add(iface, AF_INET6, addr, false, lifetime);
 80198ee:	9200      	str	r2, [sp, #0]
 80198f0:	2300      	movs	r3, #0
 80198f2:	460a      	mov	r2, r1
 80198f4:	2102      	movs	r1, #2
 80198f6:	f7f3 fb7f 	bl	800cff8 <iface_router_add>
}
 80198fa:	b003      	add	sp, #12
 80198fc:	f85d fb04 	ldr.w	pc, [sp], #4

08019900 <net_if_ipv6_router_rm>:
{
 8019900:	b508      	push	{r3, lr}
	return iface_router_rm(router);
 8019902:	f7f3 fc2f 	bl	800d164 <iface_router_rm>
}
 8019906:	bd08      	pop	{r3, pc}

08019908 <ipv4_is_broadcast_address>:
{
 8019908:	b538      	push	{r3, r4, r5, lr}
	struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
 801990a:	f8d0 5214 	ldr.w	r5, [r0, #532]	; 0x214
	if (!ipv4) {
 801990e:	b165      	cbz	r5, 801992a <ipv4_is_broadcast_address+0x22>
 8019910:	460c      	mov	r4, r1
	if (!net_if_ipv4_addr_mask_cmp(iface, addr)) {
 8019912:	f7f5 f85b 	bl	800e9cc <net_if_ipv4_addr_mask_cmp>
 8019916:	b138      	cbz	r0, 8019928 <ipv4_is_broadcast_address+0x20>
	if ((UNALIGNED_GET(&addr->s_addr) & ~ipv4->netmask.s_addr) ==
 8019918:	6823      	ldr	r3, [r4, #0]
 801991a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 801991c:	43d1      	mvns	r1, r2
 801991e:	ea23 0302 	bic.w	r3, r3, r2
 8019922:	4299      	cmp	r1, r3
 8019924:	d000      	beq.n	8019928 <ipv4_is_broadcast_address+0x20>
	return false;
 8019926:	2000      	movs	r0, #0
}
 8019928:	bd38      	pop	{r3, r4, r5, pc}
		return false;
 801992a:	2000      	movs	r0, #0
 801992c:	e7fc      	b.n	8019928 <ipv4_is_broadcast_address+0x20>

0801992e <net_if_ipv4_get_ll>:
{
 801992e:	b508      	push	{r3, lr}
	return if_ipv4_get_addr(iface, addr_state, true);
 8019930:	2201      	movs	r2, #1
 8019932:	f7f3 f8c9 	bl	800cac8 <if_ipv4_get_addr>
}
 8019936:	bd08      	pop	{r3, pc}

08019938 <net_if_ipv4_get_global_addr>:
{
 8019938:	b508      	push	{r3, lr}
	return if_ipv4_get_addr(iface, addr_state, false);
 801993a:	2200      	movs	r2, #0
 801993c:	f7f3 f8c4 	bl	800cac8 <if_ipv4_get_addr>
}
 8019940:	bd08      	pop	{r3, pc}

08019942 <net_if_recv_data>:
{
 8019942:	b508      	push	{r3, lr}
	if (!iface || !iface->if_dev) {
 8019944:	b128      	cbz	r0, 8019952 <net_if_recv_data+0x10>
 8019946:	6803      	ldr	r3, [r0, #0]
 8019948:	b103      	cbz	r3, 801994c <net_if_recv_data+0xa>
	return iface->if_dev->l2;
 801994a:	685b      	ldr	r3, [r3, #4]
	return net_if_l2(iface)->recv(iface, pkt);
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	4798      	blx	r3
}
 8019950:	bd08      	pop	{r3, pc}
		return NULL;
 8019952:	4603      	mov	r3, r0
 8019954:	e7fa      	b.n	801994c <net_if_recv_data+0xa>

08019956 <net_process_tx_packet>:
{
 8019956:	b508      	push	{r3, lr}
 8019958:	4601      	mov	r1, r0
	net_if_tx(iface, pkt);
 801995a:	6980      	ldr	r0, [r0, #24]
 801995c:	f7f5 f9fe 	bl	800ed5c <net_if_tx>
}
 8019960:	bd08      	pop	{r3, pc}

08019962 <net_if_need_calc_tx_checksum>:
{
 8019962:	b508      	push	{r3, lr}
	return need_calc_checksum(iface, ETHERNET_HW_TX_CHKSUM_OFFLOAD);
 8019964:	2101      	movs	r1, #1
 8019966:	f7f2 ffd3 	bl	800c910 <need_calc_checksum>
}
 801996a:	bd08      	pop	{r3, pc}

0801996c <net_if_need_calc_rx_checksum>:
{
 801996c:	b508      	push	{r3, lr}
	return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
 801996e:	2102      	movs	r1, #2
 8019970:	f7f2 ffce 	bl	800c910 <need_calc_checksum>
}
 8019974:	bd08      	pop	{r3, pc}

08019976 <net_timeout_set>:
#include <sys_clock.h>

void net_timeout_set(struct net_timeout *timeout,
		     uint32_t lifetime,
		     uint32_t now)
{
 8019976:	b570      	push	{r4, r5, r6, lr}
 8019978:	4606      	mov	r6, r0
	uint64_t expire_timeout;

	timeout->timer_start = now;
 801997a:	6042      	str	r2, [r0, #4]

	/* Highly unlikely, but a zero timeout isn't correctly handled by the
	 * standard calculation.
	 */
	if (lifetime == 0U) {
 801997c:	b319      	cbz	r1, 80199c6 <net_timeout_set+0x50>
 801997e:	460b      	mov	r3, r1
		timeout->wrap_counter = 0;
		timeout->timer_timeout = 0;
		return;
	}

	expire_timeout = (uint64_t)MSEC_PER_SEC * (uint64_t)lifetime;
 8019980:	014c      	lsls	r4, r1, #5
 8019982:	0ecd      	lsrs	r5, r1, #27
 8019984:	1a64      	subs	r4, r4, r1
 8019986:	f165 0500 	sbc.w	r5, r5, #0
 801998a:	00aa      	lsls	r2, r5, #2
 801998c:	ea42 7294 	orr.w	r2, r2, r4, lsr #30
 8019990:	00a1      	lsls	r1, r4, #2
 8019992:	18cc      	adds	r4, r1, r3
 8019994:	f142 0500 	adc.w	r5, r2, #0
 8019998:	00e9      	lsls	r1, r5, #3
 801999a:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 801999e:	00e3      	lsls	r3, r4, #3
 80199a0:	461c      	mov	r4, r3
	timeout->wrap_counter = expire_timeout /
 80199a2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80199a6:	2300      	movs	r3, #0
 80199a8:	4620      	mov	r0, r4
 80199aa:	f7e7 f8c7 	bl	8000b3c <__aeabi_uldivmod>
 80199ae:	60f0      	str	r0, [r6, #12]
		(uint64_t)NET_TIMEOUT_MAX_VALUE;
	timeout->timer_timeout = expire_timeout -
		(uint64_t)NET_TIMEOUT_MAX_VALUE *
 80199b0:	ebc0 73c0 	rsb	r3, r0, r0, lsl #31
	timeout->timer_timeout = expire_timeout -
 80199b4:	1ae4      	subs	r4, r4, r3
 80199b6:	60b4      	str	r4, [r6, #8]

	/* The implementation requires that the fractional timeout be zero
	 * only when the timeout has completed, so if the residual is zero
	 * copy over one timeout from the wrap.
	 */
	if (timeout->timer_timeout == 0U) {
 80199b8:	b944      	cbnz	r4, 80199cc <net_timeout_set+0x56>
		timeout->timer_timeout = NET_TIMEOUT_MAX_VALUE;
 80199ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80199be:	60b3      	str	r3, [r6, #8]
		timeout->wrap_counter -= 1;
 80199c0:	3801      	subs	r0, #1
 80199c2:	60f0      	str	r0, [r6, #12]
 80199c4:	e002      	b.n	80199cc <net_timeout_set+0x56>
		timeout->wrap_counter = 0;
 80199c6:	2300      	movs	r3, #0
 80199c8:	60c3      	str	r3, [r0, #12]
		timeout->timer_timeout = 0;
 80199ca:	6083      	str	r3, [r0, #8]
	}
}
 80199cc:	bd70      	pop	{r4, r5, r6, pc}

080199ce <net_timeout_remaining>:
	return (int64_t)deadline;
}

uint32_t net_timeout_remaining(const struct net_timeout *timeout,
			       uint32_t now)
{
 80199ce:	b538      	push	{r3, r4, r5, lr}
	int64_t ret = timeout->timer_timeout;
 80199d0:	6885      	ldr	r5, [r0, #8]

	ret += timeout->wrap_counter * (uint64_t)NET_TIMEOUT_MAX_VALUE;
 80199d2:	68c4      	ldr	r4, [r0, #12]
 80199d4:	07e2      	lsls	r2, r4, #31
 80199d6:	0863      	lsrs	r3, r4, #1
 80199d8:	1b12      	subs	r2, r2, r4
 80199da:	f163 0300 	sbc.w	r3, r3, #0
 80199de:	1952      	adds	r2, r2, r5
 80199e0:	f143 0300 	adc.w	r3, r3, #0
	ret -= (int64_t)(int32_t)(now - timeout->timer_start);
 80199e4:	6844      	ldr	r4, [r0, #4]
 80199e6:	1b0c      	subs	r4, r1, r4
 80199e8:	1b10      	subs	r0, r2, r4
 80199ea:	eb63 71e4 	sbc.w	r1, r3, r4, asr #31
	if (ret <= 0) {
 80199ee:	2801      	cmp	r0, #1
 80199f0:	f171 0300 	sbcs.w	r3, r1, #0
 80199f4:	db05      	blt.n	8019a02 <net_timeout_remaining+0x34>
		return 0;
	}

	return (uint32_t)((uint64_t)ret / MSEC_PER_SEC);
 80199f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80199fa:	2300      	movs	r3, #0
 80199fc:	f7e7 f89e 	bl	8000b3c <__aeabi_uldivmod>
}
 8019a00:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
 8019a02:	2000      	movs	r0, #0
 8019a04:	e7fc      	b.n	8019a00 <net_timeout_remaining+0x32>

08019a06 <net_timeout_evaluate>:

uint32_t net_timeout_evaluate(struct net_timeout *timeout,
			      uint32_t now)
{
 8019a06:	b430      	push	{r4, r5}
 8019a08:	4602      	mov	r2, r0
	uint32_t last_delay;
	int32_t remains;
	bool wraps;

	/* Time since last evaluation or set. */
	elapsed = now - timeout->timer_start;
 8019a0a:	6843      	ldr	r3, [r0, #4]
 8019a0c:	1acd      	subs	r5, r1, r3

	/* The delay used the last time this was evaluated. */
	wraps = (timeout->wrap_counter > 0U);
 8019a0e:	68c4      	ldr	r4, [r0, #12]
	last_delay = wraps
		? NET_TIMEOUT_MAX_VALUE
		: timeout->timer_timeout;
 8019a10:	b90c      	cbnz	r4, 8019a16 <net_timeout_evaluate+0x10>
 8019a12:	6880      	ldr	r0, [r0, #8]
 8019a14:	e001      	b.n	8019a1a <net_timeout_evaluate+0x14>
 8019a16:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

	/* Time remaining until completion of the last delay. */
	remains = (int32_t)(last_delay - elapsed);
 8019a1a:	1a5b      	subs	r3, r3, r1
 8019a1c:	4418      	add	r0, r3

	/* If the deadline for the next event hasn't been reached yet just
	 * return the remaining time.
	 */
	if (remains > 0) {
 8019a1e:	2800      	cmp	r0, #0
 8019a20:	dc0e      	bgt.n	8019a40 <net_timeout_evaluate+0x3a>

	/* Deadline has been reached.  If we're not wrapping we've completed
	 * the last portion of the full timeout, so return zero to indicate
	 * the timeout has completed.
	 */
	if (!wraps) {
 8019a22:	b1bc      	cbz	r4, 8019a54 <net_timeout_evaluate+0x4e>
	/* There's more to do.  We need to update timer_start to correspond to
	 * now, then reduce the remaining time by the elapsed time.  We know
	 * that's at least NET_TIMEOUT_MAX_VALUE, and can apply the
	 * reduction by decrementing the wrap count.
	 */
	timeout->timer_start = now;
 8019a24:	6051      	str	r1, [r2, #4]
	elapsed -= NET_TIMEOUT_MAX_VALUE;
 8019a26:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8019a2a:	3301      	adds	r3, #1
	timeout->wrap_counter -= 1;
 8019a2c:	3c01      	subs	r4, #1
 8019a2e:	60d4      	str	r4, [r2, #12]
	 * NET_TIMEOUT_MAX_VALUE.  But if subtracting would reduce the
	 * counter to zero or go negative we need to reduce the the wrap
	 * counter once more and add the residual to the counter, so the
	 * counter remains positive.
	 */
	if (timeout->timer_timeout > elapsed) {
 8019a30:	6891      	ldr	r1, [r2, #8]
 8019a32:	4299      	cmp	r1, r3
 8019a34:	d906      	bls.n	8019a44 <net_timeout_evaluate+0x3e>
		timeout->timer_timeout -= elapsed;
 8019a36:	1acb      	subs	r3, r1, r3
 8019a38:	6093      	str	r3, [r2, #8]
	} else {
		timeout->timer_timeout += NET_TIMEOUT_MAX_VALUE - elapsed;
		timeout->wrap_counter -= 1U;
	}

	return (timeout->wrap_counter == 0U)
 8019a3a:	68d3      	ldr	r3, [r2, #12]
		? timeout->timer_timeout
		: NET_TIMEOUT_MAX_VALUE;
 8019a3c:	b963      	cbnz	r3, 8019a58 <net_timeout_evaluate+0x52>
 8019a3e:	6890      	ldr	r0, [r2, #8]
}
 8019a40:	bc30      	pop	{r4, r5}
 8019a42:	4770      	bx	lr
		timeout->timer_timeout += NET_TIMEOUT_MAX_VALUE - elapsed;
 8019a44:	1acb      	subs	r3, r1, r3
 8019a46:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019a4a:	3b01      	subs	r3, #1
 8019a4c:	6093      	str	r3, [r2, #8]
		timeout->wrap_counter -= 1U;
 8019a4e:	3c01      	subs	r4, #1
 8019a50:	60d4      	str	r4, [r2, #12]
 8019a52:	e7f2      	b.n	8019a3a <net_timeout_evaluate+0x34>
		return 0U;
 8019a54:	4620      	mov	r0, r4
 8019a56:	e7f3      	b.n	8019a40 <net_timeout_evaluate+0x3a>
		: NET_TIMEOUT_MAX_VALUE;
 8019a58:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8019a5c:	e7f0      	b.n	8019a40 <net_timeout_evaluate+0x3a>

08019a5e <calc_chksum>:
{
 8019a5e:	b410      	push	{r4}
	end = data + len - 1;
 8019a60:	1e54      	subs	r4, r2, #1
 8019a62:	440c      	add	r4, r1
	while (data < end) {
 8019a64:	e000      	b.n	8019a68 <calc_chksum+0xa>
		data += 2;
 8019a66:	3102      	adds	r1, #2
	while (data < end) {
 8019a68:	42a1      	cmp	r1, r4
 8019a6a:	d20b      	bcs.n	8019a84 <calc_chksum+0x26>
		tmp = (data[0] << 8) + data[1];
 8019a6c:	780a      	ldrb	r2, [r1, #0]
 8019a6e:	784b      	ldrb	r3, [r1, #1]
 8019a70:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019a74:	b29b      	uxth	r3, r3
		sum += tmp;
 8019a76:	4418      	add	r0, r3
 8019a78:	b280      	uxth	r0, r0
		if (sum < tmp) {
 8019a7a:	4283      	cmp	r3, r0
 8019a7c:	d9f3      	bls.n	8019a66 <calc_chksum+0x8>
			sum++;
 8019a7e:	3001      	adds	r0, #1
 8019a80:	b280      	uxth	r0, r0
 8019a82:	e7f0      	b.n	8019a66 <calc_chksum+0x8>
	if (data == end) {
 8019a84:	d002      	beq.n	8019a8c <calc_chksum+0x2e>
}
 8019a86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a8a:	4770      	bx	lr
		tmp = data[0] << 8;
 8019a8c:	780b      	ldrb	r3, [r1, #0]
		sum += tmp;
 8019a8e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8019a92:	b280      	uxth	r0, r0
		if (sum < tmp) {
 8019a94:	ebb0 2f03 	cmp.w	r0, r3, lsl #8
 8019a98:	d2f5      	bcs.n	8019a86 <calc_chksum+0x28>
			sum++;
 8019a9a:	3001      	adds	r0, #1
 8019a9c:	b280      	uxth	r0, r0
 8019a9e:	e7f2      	b.n	8019a86 <calc_chksum+0x28>

08019aa0 <net_byte_to_hex>:
{
 8019aa0:	b430      	push	{r4, r5}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
 8019aa2:	090c      	lsrs	r4, r1, #4
 8019aa4:	2500      	movs	r5, #0
 8019aa6:	e00a      	b.n	8019abe <net_byte_to_hex+0x1e>
		if (i == 0 && !pad && !val) {
 8019aa8:	b96b      	cbnz	r3, 8019ac6 <net_byte_to_hex+0x26>
 8019aaa:	b964      	cbnz	r4, 8019ac6 <net_byte_to_hex+0x26>
 8019aac:	e004      	b.n	8019ab8 <net_byte_to_hex+0x18>
			*ptr++ = (char) (val - 10 + base);
 8019aae:	4414      	add	r4, r2
 8019ab0:	b2e4      	uxtb	r4, r4
 8019ab2:	3c0a      	subs	r4, #10
 8019ab4:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
 8019ab8:	3501      	adds	r5, #1
 8019aba:	f001 040f 	and.w	r4, r1, #15
 8019abe:	2d01      	cmp	r5, #1
 8019ac0:	dc07      	bgt.n	8019ad2 <net_byte_to_hex+0x32>
		if (i == 0 && !pad && !val) {
 8019ac2:	2d00      	cmp	r5, #0
 8019ac4:	d0f0      	beq.n	8019aa8 <net_byte_to_hex+0x8>
		if (val < 10) {
 8019ac6:	2c09      	cmp	r4, #9
 8019ac8:	dcf1      	bgt.n	8019aae <net_byte_to_hex+0xe>
			*ptr++ = (char) (val + '0');
 8019aca:	3430      	adds	r4, #48	; 0x30
 8019acc:	f800 4b01 	strb.w	r4, [r0], #1
 8019ad0:	e7f2      	b.n	8019ab8 <net_byte_to_hex+0x18>
	*ptr = '\0';
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	7003      	strb	r3, [r0, #0]
}
 8019ad6:	bc30      	pop	{r4, r5}
 8019ad8:	4770      	bx	lr

08019ada <z_impl_net_addr_ntop>:
{
 8019ada:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ade:	b087      	sub	sp, #28
 8019ae0:	9003      	str	r0, [sp, #12]
 8019ae2:	9101      	str	r1, [sp, #4]
 8019ae4:	9202      	str	r2, [sp, #8]
	unsigned char zeros[8] = { 0 };
 8019ae6:	2300      	movs	r3, #0
 8019ae8:	9304      	str	r3, [sp, #16]
 8019aea:	9305      	str	r3, [sp, #20]
	if (family == AF_INET6) {
 8019aec:	2802      	cmp	r0, #2
 8019aee:	d00f      	beq.n	8019b10 <z_impl_net_addr_ntop+0x36>
	} else if (family == AF_INET) {
 8019af0:	9b03      	ldr	r3, [sp, #12]
 8019af2:	2b01      	cmp	r3, #1
 8019af4:	f040 80d5 	bne.w	8019ca2 <z_impl_net_addr_ntop+0x1c8>
		len = 4;
 8019af8:	2704      	movs	r7, #4
		delim = '.';
 8019afa:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
	int8_t pos = -1;
 8019afe:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	uint8_t i, bl, bh, longest = 1U;
 8019b02:	f04f 0a01 	mov.w	sl, #1
	char *ptr = dst;
 8019b06:	9d02      	ldr	r5, [sp, #8]
	bool needcolon = false;
 8019b08:	f04f 0800 	mov.w	r8, #0
	for (i = 0U; i < len; i++) {
 8019b0c:	4644      	mov	r4, r8
 8019b0e:	e076      	b.n	8019bfe <z_impl_net_addr_ntop+0x124>
		w = (uint16_t *)addr6->s6_addr16;
 8019b10:	460e      	mov	r6, r1
		for (i = 0U; i < 8; i++) {
 8019b12:	2000      	movs	r0, #0
 8019b14:	e001      	b.n	8019b1a <z_impl_net_addr_ntop+0x40>
 8019b16:	3001      	adds	r0, #1
 8019b18:	b2c0      	uxtb	r0, r0
 8019b1a:	2807      	cmp	r0, #7
 8019b1c:	d810      	bhi.n	8019b40 <z_impl_net_addr_ntop+0x66>
			for (j = i; j < 8; j++) {
 8019b1e:	4603      	mov	r3, r0
 8019b20:	2b07      	cmp	r3, #7
 8019b22:	d8f8      	bhi.n	8019b16 <z_impl_net_addr_ntop+0x3c>
				if (UNALIGNED_GET(&w[j]) != 0) {
 8019b24:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
 8019b28:	2a00      	cmp	r2, #0
 8019b2a:	d1f4      	bne.n	8019b16 <z_impl_net_addr_ntop+0x3c>
				zeros[i]++;
 8019b2c:	aa06      	add	r2, sp, #24
 8019b2e:	1811      	adds	r1, r2, r0
 8019b30:	f811 2c08 	ldrb.w	r2, [r1, #-8]
 8019b34:	3201      	adds	r2, #1
 8019b36:	f801 2c08 	strb.w	r2, [r1, #-8]
			for (j = i; j < 8; j++) {
 8019b3a:	3301      	adds	r3, #1
 8019b3c:	b2db      	uxtb	r3, r3
 8019b3e:	e7ef      	b.n	8019b20 <z_impl_net_addr_ntop+0x46>
	int8_t pos = -1;
 8019b40:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	uint8_t i, bl, bh, longest = 1U;
 8019b44:	f04f 0a01 	mov.w	sl, #1
		for (i = 0U; i < 8; i++) {
 8019b48:	2300      	movs	r3, #0
 8019b4a:	e001      	b.n	8019b50 <z_impl_net_addr_ntop+0x76>
 8019b4c:	3301      	adds	r3, #1
 8019b4e:	b2db      	uxtb	r3, r3
 8019b50:	2b07      	cmp	r3, #7
 8019b52:	d809      	bhi.n	8019b68 <z_impl_net_addr_ntop+0x8e>
			if (zeros[i] > longest) {
 8019b54:	aa06      	add	r2, sp, #24
 8019b56:	441a      	add	r2, r3
 8019b58:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8019b5c:	4552      	cmp	r2, sl
 8019b5e:	d9f5      	bls.n	8019b4c <z_impl_net_addr_ntop+0x72>
				pos = i;
 8019b60:	fa4f f983 	sxtb.w	r9, r3
				longest = zeros[i];
 8019b64:	4692      	mov	sl, r2
 8019b66:	e7f1      	b.n	8019b4c <z_impl_net_addr_ntop+0x72>
		if (longest == 1U) {
 8019b68:	f1ba 0f01 	cmp.w	sl, #1
 8019b6c:	d003      	beq.n	8019b76 <z_impl_net_addr_ntop+0x9c>
		len = 8;
 8019b6e:	2708      	movs	r7, #8
	char delim = ':';
 8019b70:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
 8019b74:	e7c7      	b.n	8019b06 <z_impl_net_addr_ntop+0x2c>
		len = 8;
 8019b76:	2708      	movs	r7, #8
	char delim = ':';
 8019b78:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
			pos = -1;
 8019b7c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8019b80:	e7c1      	b.n	8019b06 <z_impl_net_addr_ntop+0x2c>
			value = (uint32_t)addr->s4_addr[i];
 8019b82:	9a01      	ldr	r2, [sp, #4]
 8019b84:	5cd1      	ldrb	r1, [r2, r3]
 8019b86:	b28b      	uxth	r3, r1
			if (value == 0U) {
 8019b88:	b93b      	cbnz	r3, 8019b9a <z_impl_net_addr_ntop+0xc0>
				*ptr++ = '0';
 8019b8a:	462b      	mov	r3, r5
 8019b8c:	2230      	movs	r2, #48	; 0x30
 8019b8e:	f803 2b02 	strb.w	r2, [r3], #2
				*ptr++ = delim;
 8019b92:	f885 b001 	strb.w	fp, [r5, #1]
 8019b96:	461d      	mov	r5, r3
				continue;
 8019b98:	e02f      	b.n	8019bfa <z_impl_net_addr_ntop+0x120>
			l = net_value_to_udec(ptr, value, 0);
 8019b9a:	2200      	movs	r2, #0
 8019b9c:	4628      	mov	r0, r5
 8019b9e:	f7f5 fc8b 	bl	800f4b8 <net_value_to_udec>
			*ptr++ = delim;
 8019ba2:	fa55 f580 	uxtab	r5, r5, r0
 8019ba6:	f805 bb01 	strb.w	fp, [r5], #1
			continue;
 8019baa:	e026      	b.n	8019bfa <z_impl_net_addr_ntop+0x120>
			if (needcolon || i == 0U) {
 8019bac:	f1b8 0f00 	cmp.w	r8, #0
 8019bb0:	d100      	bne.n	8019bb4 <z_impl_net_addr_ntop+0xda>
 8019bb2:	b974      	cbnz	r4, 8019bd2 <z_impl_net_addr_ntop+0xf8>
				*ptr++ = ':';
 8019bb4:	4628      	mov	r0, r5
 8019bb6:	233a      	movs	r3, #58	; 0x3a
 8019bb8:	f800 3b01 	strb.w	r3, [r0], #1
			*ptr++ = ':';
 8019bbc:	4605      	mov	r5, r0
 8019bbe:	233a      	movs	r3, #58	; 0x3a
 8019bc0:	f805 3b01 	strb.w	r3, [r5], #1
			i += longest - 1U;
 8019bc4:	4454      	add	r4, sl
 8019bc6:	b2e4      	uxtb	r4, r4
 8019bc8:	3c01      	subs	r4, #1
 8019bca:	b2e4      	uxtb	r4, r4
			needcolon = false;
 8019bcc:	f04f 0800 	mov.w	r8, #0
			continue;
 8019bd0:	e013      	b.n	8019bfa <z_impl_net_addr_ntop+0x120>
 8019bd2:	4628      	mov	r0, r5
 8019bd4:	e7f2      	b.n	8019bbc <z_impl_net_addr_ntop+0xe2>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
 8019bd6:	2300      	movs	r3, #0
 8019bd8:	2261      	movs	r2, #97	; 0x61
 8019bda:	4628      	mov	r0, r5
 8019bdc:	f7ff ff60 	bl	8019aa0 <net_byte_to_hex>
 8019be0:	e003      	b.n	8019bea <z_impl_net_addr_ntop+0x110>
					*ptr++ = (char) (bh - 10 + 'a');
 8019be2:	4628      	mov	r0, r5
 8019be4:	3157      	adds	r1, #87	; 0x57
 8019be6:	f800 1b01 	strb.w	r1, [r0], #1
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
 8019bea:	2301      	movs	r3, #1
 8019bec:	2261      	movs	r2, #97	; 0x61
 8019bee:	4641      	mov	r1, r8
 8019bf0:	f7ff ff56 	bl	8019aa0 <net_byte_to_hex>
 8019bf4:	4605      	mov	r5, r0
		needcolon = true;
 8019bf6:	f04f 0801 	mov.w	r8, #1
	for (i = 0U; i < len; i++) {
 8019bfa:	3401      	adds	r4, #1
 8019bfc:	b2e4      	uxtb	r4, r4
 8019bfe:	4623      	mov	r3, r4
 8019c00:	42bc      	cmp	r4, r7
 8019c02:	da3d      	bge.n	8019c80 <z_impl_net_addr_ntop+0x1a6>
		if (len == 4) {
 8019c04:	2f04      	cmp	r7, #4
 8019c06:	d0bc      	beq.n	8019b82 <z_impl_net_addr_ntop+0xa8>
		if (i == pos) {
 8019c08:	4599      	cmp	r9, r3
 8019c0a:	d0cf      	beq.n	8019bac <z_impl_net_addr_ntop+0xd2>
		if (needcolon) {
 8019c0c:	f1b8 0f00 	cmp.w	r8, #0
 8019c10:	d004      	beq.n	8019c1c <z_impl_net_addr_ntop+0x142>
			*ptr++ = ':';
 8019c12:	4628      	mov	r0, r5
 8019c14:	233a      	movs	r3, #58	; 0x3a
 8019c16:	f800 3b01 	strb.w	r3, [r0], #1
 8019c1a:	4605      	mov	r5, r0
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
 8019c1c:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
		bl = value & 0xff;
 8019c20:	ea4f 2811 	mov.w	r8, r1, lsr #8
		if (bh) {
 8019c24:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8019c28:	d008      	beq.n	8019c3c <z_impl_net_addr_ntop+0x162>
			if (bh > 0x0f) {
 8019c2a:	290f      	cmp	r1, #15
 8019c2c:	d8d3      	bhi.n	8019bd6 <z_impl_net_addr_ntop+0xfc>
				if (bh < 10) {
 8019c2e:	2909      	cmp	r1, #9
 8019c30:	d8d7      	bhi.n	8019be2 <z_impl_net_addr_ntop+0x108>
					*ptr++ = (char)(bh + '0');
 8019c32:	4628      	mov	r0, r5
 8019c34:	3130      	adds	r1, #48	; 0x30
 8019c36:	f800 1b01 	strb.w	r1, [r0], #1
 8019c3a:	e7d6      	b.n	8019bea <z_impl_net_addr_ntop+0x110>
		} else if (bl > 0x0f) {
 8019c3c:	f1b8 0f0f 	cmp.w	r8, #15
 8019c40:	d80b      	bhi.n	8019c5a <z_impl_net_addr_ntop+0x180>
			if (bl < 10) {
 8019c42:	f1b8 0f09 	cmp.w	r8, #9
 8019c46:	d812      	bhi.n	8019c6e <z_impl_net_addr_ntop+0x194>
				*ptr++ = (char)(bl + '0');
 8019c48:	4628      	mov	r0, r5
 8019c4a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8019c4e:	f800 8b01 	strb.w	r8, [r0], #1
 8019c52:	4605      	mov	r5, r0
		needcolon = true;
 8019c54:	f04f 0801 	mov.w	r8, #1
 8019c58:	e7cf      	b.n	8019bfa <z_impl_net_addr_ntop+0x120>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
 8019c5a:	2300      	movs	r3, #0
 8019c5c:	2261      	movs	r2, #97	; 0x61
 8019c5e:	4641      	mov	r1, r8
 8019c60:	4628      	mov	r0, r5
 8019c62:	f7ff ff1d 	bl	8019aa0 <net_byte_to_hex>
 8019c66:	4605      	mov	r5, r0
		needcolon = true;
 8019c68:	f04f 0801 	mov.w	r8, #1
 8019c6c:	e7c5      	b.n	8019bfa <z_impl_net_addr_ntop+0x120>
				*ptr++ = (char) (bl - 10 + 'a');
 8019c6e:	4628      	mov	r0, r5
 8019c70:	f108 0857 	add.w	r8, r8, #87	; 0x57
 8019c74:	f800 8b01 	strb.w	r8, [r0], #1
 8019c78:	4605      	mov	r5, r0
		needcolon = true;
 8019c7a:	f04f 0801 	mov.w	r8, #1
 8019c7e:	e7bc      	b.n	8019bfa <z_impl_net_addr_ntop+0x120>
	if (!(ptr - dst)) {
 8019c80:	9b02      	ldr	r3, [sp, #8]
 8019c82:	429d      	cmp	r5, r3
 8019c84:	d00f      	beq.n	8019ca6 <z_impl_net_addr_ntop+0x1cc>
	if (family == AF_INET) {
 8019c86:	9b03      	ldr	r3, [sp, #12]
 8019c88:	2b01      	cmp	r3, #1
 8019c8a:	d005      	beq.n	8019c98 <z_impl_net_addr_ntop+0x1be>
		*ptr = '\0';
 8019c8c:	2300      	movs	r3, #0
 8019c8e:	702b      	strb	r3, [r5, #0]
	return dst;
 8019c90:	9802      	ldr	r0, [sp, #8]
}
 8019c92:	b007      	add	sp, #28
 8019c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*(ptr - 1) = '\0';
 8019c98:	2300      	movs	r3, #0
 8019c9a:	f805 3c01 	strb.w	r3, [r5, #-1]
	return dst;
 8019c9e:	9802      	ldr	r0, [sp, #8]
 8019ca0:	e7f7      	b.n	8019c92 <z_impl_net_addr_ntop+0x1b8>
		return NULL;
 8019ca2:	2000      	movs	r0, #0
 8019ca4:	e7f5      	b.n	8019c92 <z_impl_net_addr_ntop+0x1b8>
		return NULL;
 8019ca6:	2000      	movs	r0, #0
 8019ca8:	e7f3      	b.n	8019c92 <z_impl_net_addr_ntop+0x1b8>

08019caa <z_impl_net_addr_pton>:
{
 8019caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cae:	b082      	sub	sp, #8
 8019cb0:	460d      	mov	r5, r1
 8019cb2:	4616      	mov	r6, r2
	if (family == AF_INET) {
 8019cb4:	2801      	cmp	r0, #1
 8019cb6:	d010      	beq.n	8019cda <z_impl_net_addr_pton+0x30>
	} else if (family == AF_INET6) {
 8019cb8:	2802      	cmp	r0, #2
 8019cba:	f040 80c3 	bne.w	8019e44 <z_impl_net_addr_pton+0x19a>
		int expected_groups = strchr(src, '.') ? 6 : 8;
 8019cbe:	212e      	movs	r1, #46	; 0x2e
 8019cc0:	4628      	mov	r0, r5
 8019cc2:	f002 fefe 	bl	801cac2 <strchr>
 8019cc6:	b358      	cbz	r0, 8019d20 <z_impl_net_addr_pton+0x76>
 8019cc8:	2706      	movs	r7, #6
		if (*src == ':') {
 8019cca:	782b      	ldrb	r3, [r5, #0]
 8019ccc:	2b3a      	cmp	r3, #58	; 0x3a
 8019cce:	d029      	beq.n	8019d24 <z_impl_net_addr_pton+0x7a>
		len = strlen(src);
 8019cd0:	4628      	mov	r0, r5
 8019cd2:	f7e7 f8fb 	bl	8000ecc <strlen>
		for (i = 0; i < len; i++) {
 8019cd6:	2300      	movs	r3, #0
 8019cd8:	e027      	b.n	8019d2a <z_impl_net_addr_pton+0x80>
		len = strlen(src);
 8019cda:	4608      	mov	r0, r1
 8019cdc:	f7e7 f8f6 	bl	8000ecc <strlen>
		for (i = 0; i < len; i++) {
 8019ce0:	2300      	movs	r3, #0
 8019ce2:	e000      	b.n	8019ce6 <z_impl_net_addr_pton+0x3c>
 8019ce4:	3301      	adds	r3, #1
 8019ce6:	4283      	cmp	r3, r0
 8019ce8:	d20a      	bcs.n	8019d00 <z_impl_net_addr_pton+0x56>
			if (!(src[i] >= '0' && src[i] <= '9') &&
 8019cea:	5ce9      	ldrb	r1, [r5, r3]
 8019cec:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8019cf0:	b2d2      	uxtb	r2, r2
 8019cf2:	2a09      	cmp	r2, #9
 8019cf4:	d9f6      	bls.n	8019ce4 <z_impl_net_addr_pton+0x3a>
 8019cf6:	292e      	cmp	r1, #46	; 0x2e
 8019cf8:	d0f4      	beq.n	8019ce4 <z_impl_net_addr_pton+0x3a>
				return -EINVAL;
 8019cfa:	f06f 0015 	mvn.w	r0, #21
 8019cfe:	e0af      	b.n	8019e60 <z_impl_net_addr_pton+0x1b6>
__ssp_bos_icheck3(memset, void *, int)
 8019d00:	2400      	movs	r4, #0
 8019d02:	6034      	str	r4, [r6, #0]
 8019d04:	e008      	b.n	8019d18 <z_impl_net_addr_pton+0x6e>
			addr->s4_addr[i] = strtol(src, &endptr, 10);
 8019d06:	220a      	movs	r2, #10
 8019d08:	a901      	add	r1, sp, #4
 8019d0a:	4628      	mov	r0, r5
 8019d0c:	f7fd fc56 	bl	80175bc <strtol>
 8019d10:	5530      	strb	r0, [r6, r4]
			src = ++endptr;
 8019d12:	9d01      	ldr	r5, [sp, #4]
 8019d14:	3501      	adds	r5, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
 8019d16:	3401      	adds	r4, #1
 8019d18:	2c03      	cmp	r4, #3
 8019d1a:	d9f4      	bls.n	8019d06 <z_impl_net_addr_pton+0x5c>
	return 0;
 8019d1c:	2000      	movs	r0, #0
 8019d1e:	e09f      	b.n	8019e60 <z_impl_net_addr_pton+0x1b6>
		int expected_groups = strchr(src, '.') ? 6 : 8;
 8019d20:	2708      	movs	r7, #8
 8019d22:	e7d2      	b.n	8019cca <z_impl_net_addr_pton+0x20>
			src++;
 8019d24:	3501      	adds	r5, #1
 8019d26:	e7d3      	b.n	8019cd0 <z_impl_net_addr_pton+0x26>
		for (i = 0; i < len; i++) {
 8019d28:	3301      	adds	r3, #1
 8019d2a:	4283      	cmp	r3, r0
 8019d2c:	da16      	bge.n	8019d5c <z_impl_net_addr_pton+0xb2>
			if (!(src[i] >= '0' && src[i] <= '9') &&
 8019d2e:	5cea      	ldrb	r2, [r5, r3]
 8019d30:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8019d34:	b2c9      	uxtb	r1, r1
 8019d36:	2909      	cmp	r1, #9
 8019d38:	d9f6      	bls.n	8019d28 <z_impl_net_addr_pton+0x7e>
			    !(src[i] >= 'A' && src[i] <= 'F') &&
 8019d3a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8019d3e:	b2c9      	uxtb	r1, r1
			if (!(src[i] >= '0' && src[i] <= '9') &&
 8019d40:	2905      	cmp	r1, #5
 8019d42:	d9f1      	bls.n	8019d28 <z_impl_net_addr_pton+0x7e>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
 8019d44:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8019d48:	b2c9      	uxtb	r1, r1
			    !(src[i] >= 'A' && src[i] <= 'F') &&
 8019d4a:	2905      	cmp	r1, #5
 8019d4c:	d9ec      	bls.n	8019d28 <z_impl_net_addr_pton+0x7e>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
 8019d4e:	2a2e      	cmp	r2, #46	; 0x2e
 8019d50:	d0ea      	beq.n	8019d28 <z_impl_net_addr_pton+0x7e>
			    src[i] != '.' && src[i] != ':') {
 8019d52:	2a3a      	cmp	r2, #58	; 0x3a
 8019d54:	d0e8      	beq.n	8019d28 <z_impl_net_addr_pton+0x7e>
				return -EINVAL;
 8019d56:	f06f 0015 	mvn.w	r0, #21
 8019d5a:	e081      	b.n	8019e60 <z_impl_net_addr_pton+0x1b6>
		for (i = 0; i < expected_groups; i++) {
 8019d5c:	2400      	movs	r4, #0
 8019d5e:	e003      	b.n	8019d68 <z_impl_net_addr_pton+0xbe>
					if (i < expected_groups - 1) {
 8019d60:	1e7b      	subs	r3, r7, #1
 8019d62:	42a3      	cmp	r3, r4
 8019d64:	dc77      	bgt.n	8019e56 <z_impl_net_addr_pton+0x1ac>
		for (i = 0; i < expected_groups; i++) {
 8019d66:	3401      	adds	r4, #1
 8019d68:	42bc      	cmp	r4, r7
 8019d6a:	da39      	bge.n	8019de0 <z_impl_net_addr_pton+0x136>
			if (!src || *src == '\0') {
 8019d6c:	2d00      	cmp	r5, #0
 8019d6e:	d06c      	beq.n	8019e4a <z_impl_net_addr_pton+0x1a0>
 8019d70:	782b      	ldrb	r3, [r5, #0]
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d06c      	beq.n	8019e50 <z_impl_net_addr_pton+0x1a6>
			if (*src != ':') {
 8019d76:	2b3a      	cmp	r3, #58	; 0x3a
 8019d78:	d018      	beq.n	8019dac <z_impl_net_addr_pton+0x102>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
 8019d7a:	2210      	movs	r2, #16
 8019d7c:	2100      	movs	r1, #0
 8019d7e:	4628      	mov	r0, r5
 8019d80:	f7fd fc1c 	bl	80175bc <strtol>
 8019d84:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8019d88:	2210      	movs	r2, #16
 8019d8a:	2100      	movs	r1, #0
 8019d8c:	4628      	mov	r0, r5
 8019d8e:	f7fd fc15 	bl	80175bc <strtol>
 8019d92:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
 8019d96:	f826 8014 	strh.w	r8, [r6, r4, lsl #1]
				src = strchr(src, ':');
 8019d9a:	213a      	movs	r1, #58	; 0x3a
 8019d9c:	4628      	mov	r0, r5
 8019d9e:	f002 fe90 	bl	801cac2 <strchr>
				if (src) {
 8019da2:	4605      	mov	r5, r0
 8019da4:	2800      	cmp	r0, #0
 8019da6:	d0db      	beq.n	8019d60 <z_impl_net_addr_pton+0xb6>
					src++;
 8019da8:	3501      	adds	r5, #1
 8019daa:	e7dc      	b.n	8019d66 <z_impl_net_addr_pton+0xbc>
			for (; i < expected_groups; i++) {
 8019dac:	42bc      	cmp	r4, r7
 8019dae:	da07      	bge.n	8019dc0 <z_impl_net_addr_pton+0x116>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
 8019db0:	eb06 0244 	add.w	r2, r6, r4, lsl #1
 8019db4:	2300      	movs	r3, #0
 8019db6:	f806 3014 	strb.w	r3, [r6, r4, lsl #1]
 8019dba:	7053      	strb	r3, [r2, #1]
			for (; i < expected_groups; i++) {
 8019dbc:	3401      	adds	r4, #1
 8019dbe:	e7f5      	b.n	8019dac <z_impl_net_addr_pton+0x102>
			tmp = strrchr(src, ':');
 8019dc0:	213a      	movs	r1, #58	; 0x3a
 8019dc2:	4628      	mov	r0, r5
 8019dc4:	f002 feaa 	bl	801cb1c <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
 8019dc8:	4285      	cmp	r5, r0
 8019dca:	d003      	beq.n	8019dd4 <z_impl_net_addr_pton+0x12a>
			if (expected_groups == 6) {
 8019dcc:	2f06      	cmp	r7, #6
 8019dce:	d00b      	beq.n	8019de8 <z_impl_net_addr_pton+0x13e>
			i = expected_groups - 1;
 8019dd0:	1e7c      	subs	r4, r7, #1
 8019dd2:	e011      	b.n	8019df8 <z_impl_net_addr_pton+0x14e>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
 8019dd4:	2f06      	cmp	r7, #6
 8019dd6:	d002      	beq.n	8019dde <z_impl_net_addr_pton+0x134>
 8019dd8:	786b      	ldrb	r3, [r5, #1]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d1f6      	bne.n	8019dcc <z_impl_net_addr_pton+0x122>
				src++;
 8019dde:	3501      	adds	r5, #1
		if (expected_groups == 6) {
 8019de0:	2f06      	cmp	r7, #6
 8019de2:	d015      	beq.n	8019e10 <z_impl_net_addr_pton+0x166>
	return 0;
 8019de4:	2000      	movs	r0, #0
 8019de6:	e03b      	b.n	8019e60 <z_impl_net_addr_pton+0x1b6>
				tmp--;
 8019de8:	3801      	subs	r0, #1
 8019dea:	e7f1      	b.n	8019dd0 <z_impl_net_addr_pton+0x126>
				if (i < 0) {
 8019dec:	2c00      	cmp	r4, #0
 8019dee:	db35      	blt.n	8019e5c <z_impl_net_addr_pton+0x1b2>
			} while (tmp-- != src);
 8019df0:	1e43      	subs	r3, r0, #1
 8019df2:	4285      	cmp	r5, r0
 8019df4:	d005      	beq.n	8019e02 <z_impl_net_addr_pton+0x158>
 8019df6:	4618      	mov	r0, r3
				if (*tmp == ':') {
 8019df8:	7803      	ldrb	r3, [r0, #0]
 8019dfa:	2b3a      	cmp	r3, #58	; 0x3a
 8019dfc:	d1f6      	bne.n	8019dec <z_impl_net_addr_pton+0x142>
					i--;
 8019dfe:	3c01      	subs	r4, #1
 8019e00:	e7f4      	b.n	8019dec <z_impl_net_addr_pton+0x142>
			src++;
 8019e02:	3501      	adds	r5, #1
 8019e04:	e7af      	b.n	8019d66 <z_impl_net_addr_pton+0xbc>
					if (i < 3) {
 8019e06:	2c02      	cmp	r4, #2
 8019e08:	dc18      	bgt.n	8019e3c <z_impl_net_addr_pton+0x192>
						return -EINVAL;
 8019e0a:	f06f 0015 	mvn.w	r0, #21
 8019e0e:	e027      	b.n	8019e60 <z_impl_net_addr_pton+0x1b6>
			for (i = 0; i < 4; i++) {
 8019e10:	2400      	movs	r4, #0
 8019e12:	2c03      	cmp	r4, #3
 8019e14:	dc14      	bgt.n	8019e40 <z_impl_net_addr_pton+0x196>
				if (!src || !*src) {
 8019e16:	b335      	cbz	r5, 8019e66 <z_impl_net_addr_pton+0x1bc>
 8019e18:	782b      	ldrb	r3, [r5, #0]
 8019e1a:	b33b      	cbz	r3, 8019e6c <z_impl_net_addr_pton+0x1c2>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
 8019e1c:	220a      	movs	r2, #10
 8019e1e:	2100      	movs	r1, #0
 8019e20:	4628      	mov	r0, r5
 8019e22:	f7fd fbcb 	bl	80175bc <strtol>
 8019e26:	f104 030c 	add.w	r3, r4, #12
 8019e2a:	54f0      	strb	r0, [r6, r3]
				src = strchr(src, '.');
 8019e2c:	212e      	movs	r1, #46	; 0x2e
 8019e2e:	4628      	mov	r0, r5
 8019e30:	f002 fe47 	bl	801cac2 <strchr>
				if (src) {
 8019e34:	4605      	mov	r5, r0
 8019e36:	2800      	cmp	r0, #0
 8019e38:	d0e5      	beq.n	8019e06 <z_impl_net_addr_pton+0x15c>
					src++;
 8019e3a:	3501      	adds	r5, #1
			for (i = 0; i < 4; i++) {
 8019e3c:	3401      	adds	r4, #1
 8019e3e:	e7e8      	b.n	8019e12 <z_impl_net_addr_pton+0x168>
	return 0;
 8019e40:	2000      	movs	r0, #0
 8019e42:	e00d      	b.n	8019e60 <z_impl_net_addr_pton+0x1b6>
		return -EINVAL;
 8019e44:	f06f 0015 	mvn.w	r0, #21
 8019e48:	e00a      	b.n	8019e60 <z_impl_net_addr_pton+0x1b6>
				return -EINVAL;
 8019e4a:	f06f 0015 	mvn.w	r0, #21
 8019e4e:	e007      	b.n	8019e60 <z_impl_net_addr_pton+0x1b6>
 8019e50:	f06f 0015 	mvn.w	r0, #21
 8019e54:	e004      	b.n	8019e60 <z_impl_net_addr_pton+0x1b6>
						return -EINVAL;
 8019e56:	f06f 0015 	mvn.w	r0, #21
 8019e5a:	e001      	b.n	8019e60 <z_impl_net_addr_pton+0x1b6>
					return -EINVAL;
 8019e5c:	f06f 0015 	mvn.w	r0, #21
}
 8019e60:	b002      	add	sp, #8
 8019e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					return -EINVAL;
 8019e66:	f06f 0015 	mvn.w	r0, #21
 8019e6a:	e7f9      	b.n	8019e60 <z_impl_net_addr_pton+0x1b6>
 8019e6c:	f06f 0015 	mvn.w	r0, #21
 8019e70:	e7f6      	b.n	8019e60 <z_impl_net_addr_pton+0x1b6>

08019e72 <net_calc_chksum>:
{
 8019e72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e76:	4604      	mov	r4, r0
	return pkt->family;
 8019e78:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 8019e7c:	f3c3 0342 	ubfx	r3, r3, #1, #3
	if (IS_ENABLED(CONFIG_NET_IPV4) &&
 8019e80:	2b01      	cmp	r3, #1
 8019e82:	d009      	beq.n	8019e98 <net_calc_chksum+0x26>
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
 8019e84:	2b02      	cmp	r3, #2
 8019e86:	f040 808f 	bne.w	8019fa8 <net_calc_chksum+0x136>
	return net_buf_frags_len(pkt->frags);
 8019e8a:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
 8019e8c:	2200      	movs	r2, #0
	while (buf) {
 8019e8e:	b1cb      	cbz	r3, 8019ec4 <net_calc_chksum+0x52>
		bytes += buf->len;
 8019e90:	899e      	ldrh	r6, [r3, #12]
 8019e92:	4432      	add	r2, r6
		buf = buf->frags;
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	e7fa      	b.n	8019e8e <net_calc_chksum+0x1c>
		if (proto != IPPROTO_ICMP) {
 8019e98:	2901      	cmp	r1, #1
 8019e9a:	d048      	beq.n	8019f2e <net_calc_chksum+0xbc>
 8019e9c:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
 8019e9e:	2200      	movs	r2, #0
	while (buf) {
 8019ea0:	e002      	b.n	8019ea8 <net_calc_chksum+0x36>
		bytes += buf->len;
 8019ea2:	8998      	ldrh	r0, [r3, #12]
 8019ea4:	4402      	add	r2, r0
		buf = buf->frags;
 8019ea6:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d1fa      	bne.n	8019ea2 <net_calc_chksum+0x30>
				net_pkt_ip_hdr_len(pkt) -
 8019eac:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
			sum = net_pkt_get_len(pkt) -
 8019eb0:	1a12      	subs	r2, r2, r0
 8019eb2:	b292      	uxth	r2, r2
				net_pkt_ipv4_opts_len(pkt) + proto;
 8019eb4:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
				net_pkt_ip_hdr_len(pkt) -
 8019eb8:	1a12      	subs	r2, r2, r0
			sum = net_pkt_get_len(pkt) -
 8019eba:	fa11 f082 	uxtah	r0, r1, r2
 8019ebe:	b285      	uxth	r5, r0
			len = 2 * sizeof(struct in_addr);
 8019ec0:	2608      	movs	r6, #8
 8019ec2:	e00a      	b.n	8019eda <net_calc_chksum+0x68>
			net_pkt_ip_hdr_len(pkt) -
 8019ec4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
		sum =  net_pkt_get_len(pkt) -
 8019ec8:	1a12      	subs	r2, r2, r0
 8019eca:	b292      	uxth	r2, r2
	return pkt->ipv6_ext_len;
 8019ecc:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
			net_pkt_ip_hdr_len(pkt) -
 8019ed0:	1a12      	subs	r2, r2, r0
		sum =  net_pkt_get_len(pkt) -
 8019ed2:	fa11 f082 	uxtah	r0, r1, r2
 8019ed6:	b285      	uxth	r5, r0
		len = 2 * sizeof(struct in6_addr);
 8019ed8:	2620      	movs	r6, #32
	backup->buf = pkt->cursor.buf;
 8019eda:	f8d4 900c 	ldr.w	r9, [r4, #12]
	backup->pos = pkt->cursor.pos;
 8019ede:	f8d4 8010 	ldr.w	r8, [r4, #16]
	net_pkt_cursor_init(pkt);
 8019ee2:	4620      	mov	r0, r4
 8019ee4:	f000 fab9 	bl	801a45a <net_pkt_cursor_init>
	return pkt->overwrite;
 8019ee8:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8019eec:	f003 0701 	and.w	r7, r3, #1
	pkt->overwrite = overwrite;
 8019ef0:	f043 0301 	orr.w	r3, r3, #1
 8019ef4:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	return pkt->ip_hdr_len;
 8019ef8:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
	net_pkt_skip(pkt, net_pkt_ip_hdr_len(pkt) - len);
 8019efc:	1b89      	subs	r1, r1, r6
 8019efe:	4620      	mov	r0, r4
 8019f00:	f000 fb21 	bl	801a546 <net_pkt_skip>
	sum = calc_chksum(sum, pkt->cursor.pos, len);
 8019f04:	4632      	mov	r2, r6
 8019f06:	6921      	ldr	r1, [r4, #16]
 8019f08:	4628      	mov	r0, r5
 8019f0a:	f7ff fda8 	bl	8019a5e <calc_chksum>
 8019f0e:	4605      	mov	r5, r0
	return pkt->ipv6_ext_len;
 8019f10:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
	net_pkt_skip(pkt, len + net_pkt_ip_opts_len(pkt));
 8019f14:	4431      	add	r1, r6
 8019f16:	4620      	mov	r0, r4
 8019f18:	f000 fb15 	bl	801a546 <net_pkt_skip>
	if (!cur->buf || !cur->pos) {
 8019f1c:	68e2      	ldr	r2, [r4, #12]
 8019f1e:	b36a      	cbz	r2, 8019f7c <net_calc_chksum+0x10a>
 8019f20:	6923      	ldr	r3, [r4, #16]
 8019f22:	b35b      	cbz	r3, 8019f7c <net_calc_chksum+0x10a>
	len = cur->buf->len - (cur->pos - cur->buf->data);
 8019f24:	8996      	ldrh	r6, [r2, #12]
 8019f26:	6892      	ldr	r2, [r2, #8]
 8019f28:	1a9b      	subs	r3, r3, r2
 8019f2a:	1af6      	subs	r6, r6, r3
	while (cur->buf) {
 8019f2c:	e006      	b.n	8019f3c <net_calc_chksum+0xca>
	uint16_t sum = 0U;
 8019f2e:	2500      	movs	r5, #0
	size_t len = 0U;
 8019f30:	462e      	mov	r6, r5
 8019f32:	e7d2      	b.n	8019eda <net_calc_chksum+0x68>
			cur->pos++;
 8019f34:	3201      	adds	r2, #1
 8019f36:	6122      	str	r2, [r4, #16]
			len = cur->buf->len - 1;
 8019f38:	899e      	ldrh	r6, [r3, #12]
 8019f3a:	3e01      	subs	r6, #1
	while (cur->buf) {
 8019f3c:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8019f40:	f1ba 0f00 	cmp.w	sl, #0
 8019f44:	d01a      	beq.n	8019f7c <net_calc_chksum+0x10a>
		sum = calc_chksum(sum, cur->pos, len);
 8019f46:	4632      	mov	r2, r6
 8019f48:	6921      	ldr	r1, [r4, #16]
 8019f4a:	4628      	mov	r0, r5
 8019f4c:	f7ff fd87 	bl	8019a5e <calc_chksum>
 8019f50:	4605      	mov	r5, r0
		cur->buf = cur->buf->frags;
 8019f52:	f8da 3000 	ldr.w	r3, [sl]
 8019f56:	60e3      	str	r3, [r4, #12]
		if (!cur->buf || !cur->buf->len) {
 8019f58:	b183      	cbz	r3, 8019f7c <net_calc_chksum+0x10a>
 8019f5a:	899a      	ldrh	r2, [r3, #12]
 8019f5c:	b172      	cbz	r2, 8019f7c <net_calc_chksum+0x10a>
		cur->pos = cur->buf->data;
 8019f5e:	689a      	ldr	r2, [r3, #8]
 8019f60:	6122      	str	r2, [r4, #16]
		if (len % 2) {
 8019f62:	f016 0f01 	tst.w	r6, #1
 8019f66:	d007      	beq.n	8019f78 <net_calc_chksum+0x106>
			sum += *cur->pos;
 8019f68:	7811      	ldrb	r1, [r2, #0]
 8019f6a:	440d      	add	r5, r1
 8019f6c:	b2ad      	uxth	r5, r5
			if (sum < *cur->pos) {
 8019f6e:	42a9      	cmp	r1, r5
 8019f70:	d9e0      	bls.n	8019f34 <net_calc_chksum+0xc2>
				sum++;
 8019f72:	3501      	adds	r5, #1
 8019f74:	b2ad      	uxth	r5, r5
 8019f76:	e7dd      	b.n	8019f34 <net_calc_chksum+0xc2>
			len = cur->buf->len;
 8019f78:	899e      	ldrh	r6, [r3, #12]
 8019f7a:	e7df      	b.n	8019f3c <net_calc_chksum+0xca>
	sum = (sum == 0U) ? 0xffff : htons(sum);
 8019f7c:	b18d      	cbz	r5, 8019fa2 <net_calc_chksum+0x130>
 8019f7e:	0a28      	lsrs	r0, r5, #8
 8019f80:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8019f84:	b280      	uxth	r0, r0
	pkt->cursor.buf = backup->buf;
 8019f86:	f8c4 900c 	str.w	r9, [r4, #12]
	pkt->cursor.pos = backup->pos;
 8019f8a:	f8c4 8010 	str.w	r8, [r4, #16]
	pkt->overwrite = overwrite;
 8019f8e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8019f92:	f367 0300 	bfi	r3, r7, #0, #1
 8019f96:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	return ~sum;
 8019f9a:	43c0      	mvns	r0, r0
 8019f9c:	b280      	uxth	r0, r0
}
 8019f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	sum = (sum == 0U) ? 0xffff : htons(sum);
 8019fa2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019fa6:	e7ee      	b.n	8019f86 <net_calc_chksum+0x114>
		return 0;
 8019fa8:	2000      	movs	r0, #0
 8019faa:	e7f8      	b.n	8019f9e <net_calc_chksum+0x12c>

08019fac <net_calc_chksum_ipv4>:
{
 8019fac:	b508      	push	{r3, lr}
	sum = calc_chksum(0, pkt->buffer->data,
 8019fae:	6883      	ldr	r3, [r0, #8]
	return pkt->ip_hdr_len;
 8019fb0:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
	return pkt->ipv4_opts_len;
 8019fb4:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 8019fb8:	440a      	add	r2, r1
 8019fba:	6899      	ldr	r1, [r3, #8]
 8019fbc:	2000      	movs	r0, #0
 8019fbe:	f7ff fd4e 	bl	8019a5e <calc_chksum>
	sum = (sum == 0U) ? 0xffff : htons(sum);
 8019fc2:	b138      	cbz	r0, 8019fd4 <net_calc_chksum_ipv4+0x28>
 8019fc4:	4603      	mov	r3, r0
 8019fc6:	0a00      	lsrs	r0, r0, #8
 8019fc8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8019fcc:	b280      	uxth	r0, r0
	return ~sum;
 8019fce:	43c0      	mvns	r0, r0
}
 8019fd0:	b280      	uxth	r0, r0
 8019fd2:	bd08      	pop	{r3, pc}
	sum = (sum == 0U) ? 0xffff : htons(sum);
 8019fd4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019fd8:	e7f9      	b.n	8019fce <net_calc_chksum_ipv4+0x22>

08019fda <net_calc_chksum_igmp>:
{
 8019fda:	b508      	push	{r3, lr}
 8019fdc:	460a      	mov	r2, r1
	sum = calc_chksum(0, data, len);
 8019fde:	4601      	mov	r1, r0
 8019fe0:	2000      	movs	r0, #0
 8019fe2:	f7ff fd3c 	bl	8019a5e <calc_chksum>
	sum = (sum == 0U) ? 0xffff : htons(sum);
 8019fe6:	b138      	cbz	r0, 8019ff8 <net_calc_chksum_igmp+0x1e>
 8019fe8:	4603      	mov	r3, r0
 8019fea:	0a00      	lsrs	r0, r0, #8
 8019fec:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8019ff0:	b280      	uxth	r0, r0
	return ~sum;
 8019ff2:	43c0      	mvns	r0, r0
}
 8019ff4:	b280      	uxth	r0, r0
 8019ff6:	bd08      	pop	{r3, pc}
	sum = (sum == 0U) ? 0xffff : htons(sum);
 8019ff8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019ffc:	e7f9      	b.n	8019ff2 <net_calc_chksum_igmp+0x18>

08019ffe <pkt_estimate_headers_length>:
	if (family == AF_UNSPEC) {
 8019ffe:	b1b1      	cbz	r1, 801a02e <pkt_estimate_headers_length+0x30>
	if (IS_ENABLED(CONFIG_NET_IPV6) && family == AF_INET6) {
 801a000:	2902      	cmp	r1, #2
 801a002:	d00c      	beq.n	801a01e <pkt_estimate_headers_length+0x20>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) && family == AF_INET) {
 801a004:	2901      	cmp	r1, #1
 801a006:	d00c      	beq.n	801a022 <pkt_estimate_headers_length+0x24>
	size_t hdr_len = 0;
 801a008:	2000      	movs	r0, #0
	if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
 801a00a:	2a06      	cmp	r2, #6
 801a00c:	d00b      	beq.n	801a026 <pkt_estimate_headers_length+0x28>
	} else if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
 801a00e:	2a11      	cmp	r2, #17
 801a010:	d00b      	beq.n	801a02a <pkt_estimate_headers_length+0x2c>
	} else if (proto == IPPROTO_ICMP || proto == IPPROTO_ICMPV6) {
 801a012:	2a01      	cmp	r2, #1
 801a014:	d001      	beq.n	801a01a <pkt_estimate_headers_length+0x1c>
 801a016:	2a3a      	cmp	r2, #58	; 0x3a
 801a018:	d10a      	bne.n	801a030 <pkt_estimate_headers_length+0x32>
		hdr_len += NET_ICMPH_LEN;
 801a01a:	3004      	adds	r0, #4
 801a01c:	4770      	bx	lr
		hdr_len += NET_IPV6H_LEN;
 801a01e:	2028      	movs	r0, #40	; 0x28
 801a020:	e7f3      	b.n	801a00a <pkt_estimate_headers_length+0xc>
		hdr_len += NET_IPV4H_LEN;
 801a022:	2014      	movs	r0, #20
 801a024:	e7f1      	b.n	801a00a <pkt_estimate_headers_length+0xc>
		hdr_len += NET_TCPH_LEN + NET_TCP_MAX_OPT_SIZE;
 801a026:	301c      	adds	r0, #28
 801a028:	4770      	bx	lr
		hdr_len += NET_UDPH_LEN;
 801a02a:	3008      	adds	r0, #8
 801a02c:	4770      	bx	lr
		return  0;
 801a02e:	2000      	movs	r0, #0
}
 801a030:	4770      	bx	lr

0801a032 <clone_pkt_attributes>:
	return pkt->family;
 801a032:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 801a036:	f3c3 0342 	ubfx	r3, r3, #1, #3
	pkt->family = family;
 801a03a:	f891 204b 	ldrb.w	r2, [r1, #75]	; 0x4b
 801a03e:	f363 0243 	bfi	r2, r3, #1, #3
 801a042:	f881 204b 	strb.w	r2, [r1, #75]	; 0x4b
	return pkt->context;
 801a046:	6943      	ldr	r3, [r0, #20]
	pkt->context = ctx;
 801a048:	614b      	str	r3, [r1, #20]
	return pkt->ip_hdr_len;
 801a04a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
	pkt->ip_hdr_len = len;
 801a04e:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
	pkt->timestamp.second = timestamp->second;
 801a052:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
 801a056:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pkt->timestamp.nanosecond = timestamp->nanosecond;
 801a05a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a05c:	628b      	str	r3, [r1, #40]	; 0x28
	return pkt->priority;
 801a05e:	f890 3052 	ldrb.w	r3, [r0, #82]	; 0x52
	pkt->priority = priority;
 801a062:	f881 3052 	strb.w	r3, [r1, #82]	; 0x52
	return !!(pkt->captured);
 801a066:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 801a06a:	f3c3 0340 	ubfx	r3, r3, #1, #1
	pkt->captured = is_captured;
 801a06e:	f891 204d 	ldrb.w	r2, [r1, #77]	; 0x4d
 801a072:	f363 0241 	bfi	r2, r3, #1, #1
 801a076:	f881 204d 	strb.w	r2, [r1, #77]	; 0x4d
	return pkt->family;
 801a07a:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 801a07e:	f3c3 0342 	ubfx	r3, r3, #1, #3
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
 801a082:	2b01      	cmp	r3, #1
 801a084:	d002      	beq.n	801a08c <clone_pkt_attributes+0x5a>
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
 801a086:	2b02      	cmp	r3, #2
 801a088:	d009      	beq.n	801a09e <clone_pkt_attributes+0x6c>
}
 801a08a:	4770      	bx	lr
	return pkt->ipv4_ttl;
 801a08c:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	pkt->ipv4_ttl = ttl;
 801a090:	f881 304e 	strb.w	r3, [r1, #78]	; 0x4e
	return pkt->ipv4_opts_len;
 801a094:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
	pkt->ipv4_opts_len = opts_len;
 801a098:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
}
 801a09c:	4770      	bx	lr
	return pkt->ipv6_hop_limit;
 801a09e:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	pkt->ipv6_hop_limit = hop_limit;
 801a0a2:	f881 304e 	strb.w	r3, [r1, #78]	; 0x4e
	return pkt->ipv6_ext_len;
 801a0a6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
	pkt->ipv6_ext_len = len;
 801a0aa:	f8a1 3050 	strh.w	r3, [r1, #80]	; 0x50
	return pkt->ipv6_ext_opt_len;
 801a0ae:	f890 3056 	ldrb.w	r3, [r0, #86]	; 0x56
	pkt->ipv6_ext_opt_len = len;
 801a0b2:	f881 3056 	strb.w	r3, [r1, #86]	; 0x56
	return pkt->ipv6_prev_hdr_start;
 801a0b6:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
	pkt->ipv6_prev_hdr_start = offset;
 801a0ba:	f8a1 3054 	strh.w	r3, [r1, #84]	; 0x54
	return pkt->ipv6_next_hdr;
 801a0be:	f890 3057 	ldrb.w	r3, [r0, #87]	; 0x57
	pkt->ipv6_next_hdr = next_hdr;
 801a0c2:	f881 3057 	strb.w	r3, [r1, #87]	; 0x57
 801a0c6:	e7e0      	b.n	801a08a <clone_pkt_attributes+0x58>

0801a0c8 <pkt_get_max_len>:
{
 801a0c8:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf = pkt->buffer;
 801a0ca:	6884      	ldr	r4, [r0, #8]
	size_t size = 0;
 801a0cc:	2500      	movs	r5, #0
	while (buf) {
 801a0ce:	b134      	cbz	r4, 801a0de <pkt_get_max_len+0x16>
	return net_buf_simple_max_len(&buf->b);
 801a0d0:	f104 0008 	add.w	r0, r4, #8
 801a0d4:	f7fe fb7d 	bl	80187d2 <net_buf_simple_max_len>
		size += net_buf_max_len(buf);
 801a0d8:	4405      	add	r5, r0
		buf = buf->frags;
 801a0da:	6824      	ldr	r4, [r4, #0]
 801a0dc:	e7f7      	b.n	801a0ce <pkt_get_max_len+0x6>
}
 801a0de:	4628      	mov	r0, r5
 801a0e0:	bd38      	pop	{r3, r4, r5, pc}

0801a0e2 <pkt_cursor_jump>:
{
 801a0e2:	b538      	push	{r3, r4, r5, lr}
 801a0e4:	4604      	mov	r4, r0
 801a0e6:	460d      	mov	r5, r1
	cursor->buf = cursor->buf->frags;
 801a0e8:	68c3      	ldr	r3, [r0, #12]
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	60c3      	str	r3, [r0, #12]
	while (cursor->buf) {
 801a0ee:	e006      	b.n	801a0fe <pkt_cursor_jump+0x1c>
 801a0f0:	3008      	adds	r0, #8
 801a0f2:	f7fe fb6e 	bl	80187d2 <net_buf_simple_max_len>
		if (!len) {
 801a0f6:	b940      	cbnz	r0, 801a10a <pkt_cursor_jump+0x28>
			cursor->buf = cursor->buf->frags;
 801a0f8:	68e3      	ldr	r3, [r4, #12]
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	60e3      	str	r3, [r4, #12]
	while (cursor->buf) {
 801a0fe:	68e0      	ldr	r0, [r4, #12]
 801a100:	b118      	cbz	r0, 801a10a <pkt_cursor_jump+0x28>
			write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
 801a102:	2d00      	cmp	r5, #0
 801a104:	d1f4      	bne.n	801a0f0 <pkt_cursor_jump+0xe>
 801a106:	8980      	ldrh	r0, [r0, #12]
 801a108:	e7f5      	b.n	801a0f6 <pkt_cursor_jump+0x14>
	if (cursor->buf) {
 801a10a:	68e3      	ldr	r3, [r4, #12]
 801a10c:	b113      	cbz	r3, 801a114 <pkt_cursor_jump+0x32>
		cursor->pos = cursor->buf->data;
 801a10e:	689b      	ldr	r3, [r3, #8]
 801a110:	6123      	str	r3, [r4, #16]
}
 801a112:	bd38      	pop	{r3, r4, r5, pc}
		cursor->pos = NULL;
 801a114:	2300      	movs	r3, #0
 801a116:	6123      	str	r3, [r4, #16]
}
 801a118:	e7fb      	b.n	801a112 <pkt_cursor_jump+0x30>

0801a11a <pkt_cursor_advance>:
{
 801a11a:	b538      	push	{r3, r4, r5, lr}
 801a11c:	4604      	mov	r4, r0
	if (!cursor->buf) {
 801a11e:	68c0      	ldr	r0, [r0, #12]
 801a120:	b140      	cbz	r0, 801a134 <pkt_cursor_advance+0x1a>
 801a122:	460d      	mov	r5, r1
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
 801a124:	b939      	cbnz	r1, 801a136 <pkt_cursor_advance+0x1c>
 801a126:	8980      	ldrh	r0, [r0, #12]
	if ((cursor->pos - cursor->buf->data) == len) {
 801a128:	6923      	ldr	r3, [r4, #16]
 801a12a:	68e2      	ldr	r2, [r4, #12]
 801a12c:	6892      	ldr	r2, [r2, #8]
 801a12e:	1a9b      	subs	r3, r3, r2
 801a130:	4283      	cmp	r3, r0
 801a132:	d004      	beq.n	801a13e <pkt_cursor_advance+0x24>
}
 801a134:	bd38      	pop	{r3, r4, r5, pc}
 801a136:	3008      	adds	r0, #8
 801a138:	f7fe fb4b 	bl	80187d2 <net_buf_simple_max_len>
 801a13c:	e7f4      	b.n	801a128 <pkt_cursor_advance+0xe>
		pkt_cursor_jump(pkt, write);
 801a13e:	4629      	mov	r1, r5
 801a140:	4620      	mov	r0, r4
 801a142:	f7ff ffce 	bl	801a0e2 <pkt_cursor_jump>
 801a146:	e7f5      	b.n	801a134 <pkt_cursor_advance+0x1a>

0801a148 <pkt_cursor_update>:
{
 801a148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a14a:	4604      	mov	r4, r0
 801a14c:	460d      	mov	r5, r1
	return pkt->overwrite;
 801a14e:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
	if (net_pkt_is_being_overwritten(pkt)) {
 801a152:	f013 0f01 	tst.w	r3, #1
 801a156:	d107      	bne.n	801a168 <pkt_cursor_update+0x20>
 801a158:	4616      	mov	r6, r2
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
 801a15a:	b132      	cbz	r2, 801a16a <pkt_cursor_update+0x22>
 801a15c:	68c0      	ldr	r0, [r0, #12]
 801a15e:	3008      	adds	r0, #8
 801a160:	f7fe fb37 	bl	80187d2 <net_buf_simple_max_len>
 801a164:	4607      	mov	r7, r0
 801a166:	e002      	b.n	801a16e <pkt_cursor_update+0x26>
		write = false;
 801a168:	2600      	movs	r6, #0
	len = write ? net_buf_max_len(cursor->buf) : cursor->buf->len;
 801a16a:	68e3      	ldr	r3, [r4, #12]
 801a16c:	899f      	ldrh	r7, [r3, #12]
	if (length + (cursor->pos - cursor->buf->data) == len &&
 801a16e:	6923      	ldr	r3, [r4, #16]
 801a170:	68e0      	ldr	r0, [r4, #12]
 801a172:	6882      	ldr	r2, [r0, #8]
 801a174:	1a9b      	subs	r3, r3, r2
 801a176:	442b      	add	r3, r5
 801a178:	42bb      	cmp	r3, r7
 801a17a:	d003      	beq.n	801a184 <pkt_cursor_update+0x3c>
		cursor->pos += length;
 801a17c:	6921      	ldr	r1, [r4, #16]
 801a17e:	4429      	add	r1, r5
 801a180:	6121      	str	r1, [r4, #16]
}
 801a182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a184:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
	if (length + (cursor->pos - cursor->buf->data) == len &&
 801a188:	f013 0f01 	tst.w	r3, #1
 801a18c:	d004      	beq.n	801a198 <pkt_cursor_update+0x50>
 801a18e:	3008      	adds	r0, #8
 801a190:	f7fe fb1f 	bl	80187d2 <net_buf_simple_max_len>
	    !(net_pkt_is_being_overwritten(pkt) &&
 801a194:	42b8      	cmp	r0, r7
 801a196:	d8f1      	bhi.n	801a17c <pkt_cursor_update+0x34>
		pkt_cursor_jump(pkt, write);
 801a198:	4631      	mov	r1, r6
 801a19a:	4620      	mov	r0, r4
 801a19c:	f7ff ffa1 	bl	801a0e2 <pkt_cursor_jump>
 801a1a0:	e7ef      	b.n	801a182 <pkt_cursor_update+0x3a>

0801a1a2 <pkt_alloc_buffer>:
{
 801a1a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1a6:	b085      	sub	sp, #20
 801a1a8:	4682      	mov	sl, r0
 801a1aa:	460d      	mov	r5, r1
 801a1ac:	4616      	mov	r6, r2
 801a1ae:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 801a1b0:	4610      	mov	r0, r2
 801a1b2:	4619      	mov	r1, r3
 801a1b4:	f002 fa2c 	bl	801c610 <sys_clock_timeout_end_calc>
 801a1b8:	4683      	mov	fp, r0
 801a1ba:	9103      	str	r1, [sp, #12]
	struct net_buf *current = NULL;
 801a1bc:	f04f 0800 	mov.w	r8, #0
	struct net_buf *first = NULL;
 801a1c0:	46c1      	mov	r9, r8
	while (size) {
 801a1c2:	e010      	b.n	801a1e6 <pkt_alloc_buffer+0x44>
	if (first) {
 801a1c4:	f1b9 0f00 	cmp.w	r9, #0
 801a1c8:	d003      	beq.n	801a1d2 <pkt_alloc_buffer+0x30>
		net_buf_unref(first);
 801a1ca:	4648      	mov	r0, r9
 801a1cc:	f7fe fab0 	bl	8018730 <net_buf_unref>
	return NULL;
 801a1d0:	46a1      	mov	r9, r4
}
 801a1d2:	4648      	mov	r0, r9
 801a1d4:	b005      	add	sp, #20
 801a1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!first && !current) {
 801a1da:	f1b8 0f00 	cmp.w	r8, #0
 801a1de:	d10f      	bne.n	801a200 <pkt_alloc_buffer+0x5e>
			first = new;
 801a1e0:	4681      	mov	r9, r0
 801a1e2:	e00f      	b.n	801a204 <pkt_alloc_buffer+0x62>
		current = new;
 801a1e4:	46a0      	mov	r8, r4
	while (size) {
 801a1e6:	2d00      	cmp	r5, #0
 801a1e8:	d0f3      	beq.n	801a1d2 <pkt_alloc_buffer+0x30>
		new = net_buf_alloc_fixed(pool, timeout);
 801a1ea:	4632      	mov	r2, r6
 801a1ec:	463b      	mov	r3, r7
 801a1ee:	4650      	mov	r0, sl
 801a1f0:	f7fe fa97 	bl	8018722 <net_buf_alloc_fixed>
		if (!new) {
 801a1f4:	4604      	mov	r4, r0
 801a1f6:	2800      	cmp	r0, #0
 801a1f8:	d0e4      	beq.n	801a1c4 <pkt_alloc_buffer+0x22>
		if (!first && !current) {
 801a1fa:	f1b9 0f00 	cmp.w	r9, #0
 801a1fe:	d0ec      	beq.n	801a1da <pkt_alloc_buffer+0x38>
			current->frags = new;
 801a200:	f8c8 4000 	str.w	r4, [r8]
		if (current->size > size) {
 801a204:	89e3      	ldrh	r3, [r4, #14]
 801a206:	42ab      	cmp	r3, r5
 801a208:	d900      	bls.n	801a20c <pkt_alloc_buffer+0x6a>
			current->size = size;
 801a20a:	81e5      	strh	r5, [r4, #14]
		size -= current->size;
 801a20c:	89e3      	ldrh	r3, [r4, #14]
 801a20e:	1aed      	subs	r5, r5, r3
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 801a210:	ea56 0307 	orrs.w	r3, r6, r7
 801a214:	d0e6      	beq.n	801a1e4 <pkt_alloc_buffer+0x42>
 801a216:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801a21a:	bf08      	it	eq
 801a21c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 801a220:	d0e0      	beq.n	801a1e4 <pkt_alloc_buffer+0x42>
			int64_t remaining = end - sys_clock_tick_get();
 801a222:	f7fc fbdf 	bl	80169e4 <sys_clock_tick_get>
 801a226:	ebbb 0300 	subs.w	r3, fp, r0
 801a22a:	9300      	str	r3, [sp, #0]
 801a22c:	9b03      	ldr	r3, [sp, #12]
 801a22e:	eb63 0301 	sbc.w	r3, r3, r1
 801a232:	9301      	str	r3, [sp, #4]
			if (remaining <= 0) {
 801a234:	e9dd 6700 	ldrd	r6, r7, [sp]
 801a238:	2e01      	cmp	r6, #1
 801a23a:	f177 0300 	sbcs.w	r3, r7, #0
 801a23e:	dad1      	bge.n	801a1e4 <pkt_alloc_buffer+0x42>
 801a240:	e7c7      	b.n	801a1d2 <pkt_alloc_buffer+0x30>

0801a242 <net_pkt_cursor_operate>:
{
 801a242:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a246:	4604      	mov	r4, r0
 801a248:	4688      	mov	r8, r1
 801a24a:	4616      	mov	r6, r2
 801a24c:	4699      	mov	r9, r3
 801a24e:	f89d 7020 	ldrb.w	r7, [sp, #32]
	while (c_op->buf && length) {
 801a252:	e04d      	b.n	801a2f0 <net_pkt_cursor_operate+0xae>
		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
 801a254:	2100      	movs	r1, #0
 801a256:	4620      	mov	r0, r4
 801a258:	f7ff ff5f 	bl	801a11a <pkt_cursor_advance>
		if (c_op->buf == NULL) {
 801a25c:	68e2      	ldr	r2, [r4, #12]
 801a25e:	2a00      	cmp	r2, #0
 801a260:	d058      	beq.n	801a314 <net_pkt_cursor_operate+0xd2>
		if (write && !net_pkt_is_being_overwritten(pkt)) {
 801a262:	b127      	cbz	r7, 801a26e <net_pkt_cursor_operate+0x2c>
 801a264:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801a268:	f013 0f01 	tst.w	r3, #1
 801a26c:	d013      	beq.n	801a296 <net_pkt_cursor_operate+0x54>
			d_len = c_op->buf->len - (c_op->pos - c_op->buf->data);
 801a26e:	8990      	ldrh	r0, [r2, #12]
 801a270:	6895      	ldr	r5, [r2, #8]
 801a272:	6923      	ldr	r3, [r4, #16]
 801a274:	1b5d      	subs	r5, r3, r5
 801a276:	1b45      	subs	r5, r0, r5
		if (!d_len) {
 801a278:	2d00      	cmp	r5, #0
 801a27a:	d04b      	beq.n	801a314 <net_pkt_cursor_operate+0xd2>
		if (length < d_len) {
 801a27c:	42b5      	cmp	r5, r6
 801a27e:	d900      	bls.n	801a282 <net_pkt_cursor_operate+0x40>
			len = length;
 801a280:	4635      	mov	r5, r6
		if (copy) {
 801a282:	f1b9 0f00 	cmp.w	r9, #0
 801a286:	d017      	beq.n	801a2b8 <net_pkt_cursor_operate+0x76>
			memcpy(write ? c_op->pos : data,
 801a288:	b17f      	cbz	r7, 801a2aa <net_pkt_cursor_operate+0x68>
 801a28a:	6920      	ldr	r0, [r4, #16]
 801a28c:	b97f      	cbnz	r7, 801a2ae <net_pkt_cursor_operate+0x6c>
 801a28e:	6921      	ldr	r1, [r4, #16]
 801a290:	e00e      	b.n	801a2b0 <net_pkt_cursor_operate+0x6e>
		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
 801a292:	4639      	mov	r1, r7
 801a294:	e7df      	b.n	801a256 <net_pkt_cursor_operate+0x14>
 801a296:	f102 0008 	add.w	r0, r2, #8
 801a29a:	f7fe fa9a 	bl	80187d2 <net_buf_simple_max_len>
				(c_op->pos - c_op->buf->data);
 801a29e:	6923      	ldr	r3, [r4, #16]
 801a2a0:	68e2      	ldr	r2, [r4, #12]
 801a2a2:	6895      	ldr	r5, [r2, #8]
 801a2a4:	1b5b      	subs	r3, r3, r5
			d_len = net_buf_max_len(c_op->buf) -
 801a2a6:	1ac5      	subs	r5, r0, r3
 801a2a8:	e7e6      	b.n	801a278 <net_pkt_cursor_operate+0x36>
			memcpy(write ? c_op->pos : data,
 801a2aa:	4640      	mov	r0, r8
 801a2ac:	e7ee      	b.n	801a28c <net_pkt_cursor_operate+0x4a>
 801a2ae:	4641      	mov	r1, r8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 801a2b0:	462a      	mov	r2, r5
 801a2b2:	f002 fac1 	bl	801c838 <memcpy>
 801a2b6:	e008      	b.n	801a2ca <net_pkt_cursor_operate+0x88>
		} else if (data) {
 801a2b8:	f1b8 0f00 	cmp.w	r8, #0
 801a2bc:	d005      	beq.n	801a2ca <net_pkt_cursor_operate+0x88>
__ssp_bos_icheck3(memset, void *, int)
 801a2be:	462a      	mov	r2, r5
 801a2c0:	f8d8 1000 	ldr.w	r1, [r8]
 801a2c4:	6920      	ldr	r0, [r4, #16]
 801a2c6:	f002 fad8 	bl	801c87a <memset>
		if (write && !net_pkt_is_being_overwritten(pkt)) {
 801a2ca:	b127      	cbz	r7, 801a2d6 <net_pkt_cursor_operate+0x94>
 801a2cc:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801a2d0:	f013 0f01 	tst.w	r3, #1
 801a2d4:	d018      	beq.n	801a308 <net_pkt_cursor_operate+0xc6>
		pkt_cursor_update(pkt, len, write);
 801a2d6:	463a      	mov	r2, r7
 801a2d8:	4629      	mov	r1, r5
 801a2da:	4620      	mov	r0, r4
 801a2dc:	f7ff ff34 	bl	801a148 <pkt_cursor_update>
		if (copy && data) {
 801a2e0:	f1b9 0f00 	cmp.w	r9, #0
 801a2e4:	d003      	beq.n	801a2ee <net_pkt_cursor_operate+0xac>
 801a2e6:	f1b8 0f00 	cmp.w	r8, #0
 801a2ea:	d000      	beq.n	801a2ee <net_pkt_cursor_operate+0xac>
			data = (uint8_t *) data + len;
 801a2ec:	44a8      	add	r8, r5
		length -= len;
 801a2ee:	1b76      	subs	r6, r6, r5
	while (c_op->buf && length) {
 801a2f0:	68e3      	ldr	r3, [r4, #12]
 801a2f2:	b17b      	cbz	r3, 801a314 <net_pkt_cursor_operate+0xd2>
 801a2f4:	b176      	cbz	r6, 801a314 <net_pkt_cursor_operate+0xd2>
 801a2f6:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
		pkt_cursor_advance(pkt, net_pkt_is_being_overwritten(pkt) ?
 801a2fa:	f013 0f01 	tst.w	r3, #1
 801a2fe:	d1a9      	bne.n	801a254 <net_pkt_cursor_operate+0x12>
 801a300:	2f00      	cmp	r7, #0
 801a302:	d1c6      	bne.n	801a292 <net_pkt_cursor_operate+0x50>
 801a304:	2100      	movs	r1, #0
 801a306:	e7a6      	b.n	801a256 <net_pkt_cursor_operate+0x14>
			net_buf_add(c_op->buf, len);
 801a308:	68e0      	ldr	r0, [r4, #12]
	return net_buf_simple_add(&buf->b, len);
 801a30a:	4629      	mov	r1, r5
 801a30c:	3008      	adds	r0, #8
 801a30e:	f7fe fa46 	bl	801879e <net_buf_simple_add>
 801a312:	e7e0      	b.n	801a2d6 <net_pkt_cursor_operate+0x94>
	if (length) {
 801a314:	b916      	cbnz	r6, 801a31c <net_pkt_cursor_operate+0xda>
	return 0;
 801a316:	2000      	movs	r0, #0
}
 801a318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOBUFS;
 801a31c:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801a320:	e7fa      	b.n	801a318 <net_pkt_cursor_operate+0xd6>

0801a322 <net_pkt_get_reserve_data>:
{
 801a322:	b570      	push	{r4, r5, r6, lr}
 801a324:	4604      	mov	r4, r0
 801a326:	4616      	mov	r6, r2
 801a328:	461d      	mov	r5, r3
	if (k_is_in_isr()) {
 801a32a:	f001 fd33 	bl	801bd94 <k_is_in_isr>
 801a32e:	b128      	cbz	r0, 801a33c <net_pkt_get_reserve_data+0x1a>
	return net_buf_alloc_fixed(pool, timeout);
 801a330:	2200      	movs	r2, #0
 801a332:	2300      	movs	r3, #0
 801a334:	4620      	mov	r0, r4
 801a336:	f7fe f9f4 	bl	8018722 <net_buf_alloc_fixed>
}
 801a33a:	bd70      	pop	{r4, r5, r6, pc}
 801a33c:	4632      	mov	r2, r6
 801a33e:	462b      	mov	r3, r5
 801a340:	4620      	mov	r0, r4
 801a342:	f7fe f9ee 	bl	8018722 <net_buf_alloc_fixed>
	if (!frag) {
 801a346:	e7f8      	b.n	801a33a <net_pkt_get_reserve_data+0x18>

0801a348 <net_pkt_ref>:
		ref = pkt ? atomic_get(&pkt->atomic_ref) : 0;
 801a348:	b1f0      	cbz	r0, 801a388 <net_pkt_ref+0x40>
{
 801a34a:	b410      	push	{r4}
 801a34c:	e000      	b.n	801a350 <net_pkt_ref+0x8>
		ref = pkt ? atomic_get(&pkt->atomic_ref) : 0;
 801a34e:	b1c8      	cbz	r0, 801a384 <net_pkt_ref+0x3c>
 801a350:	f100 0230 	add.w	r2, r0, #48	; 0x30
 801a354:	f3bf 8f5b 	dmb	ish
 801a358:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a35a:	f3bf 8f5b 	dmb	ish
		if (!ref) {
 801a35e:	b18b      	cbz	r3, 801a384 <net_pkt_ref+0x3c>
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref + 1));
 801a360:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 801a362:	f3bf 8f5b 	dmb	ish
 801a366:	e852 4f00 	ldrex	r4, [r2]
 801a36a:	429c      	cmp	r4, r3
 801a36c:	d104      	bne.n	801a378 <net_pkt_ref+0x30>
 801a36e:	e842 1c00 	strex	ip, r1, [r2]
 801a372:	f1bc 0f00 	cmp.w	ip, #0
 801a376:	d1f6      	bne.n	801a366 <net_pkt_ref+0x1e>
 801a378:	f3bf 8f5b 	dmb	ish
 801a37c:	d1e7      	bne.n	801a34e <net_pkt_ref+0x6>
}
 801a37e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a382:	4770      	bx	lr
			return NULL;
 801a384:	2000      	movs	r0, #0
 801a386:	e7fa      	b.n	801a37e <net_pkt_ref+0x36>
 801a388:	2000      	movs	r0, #0
}
 801a38a:	4770      	bx	lr

0801a38c <net_pkt_frag_unref>:
	if (!frag) {
 801a38c:	b118      	cbz	r0, 801a396 <net_pkt_frag_unref+0xa>
{
 801a38e:	b508      	push	{r3, lr}
	net_buf_unref(frag);
 801a390:	f7fe f9ce 	bl	8018730 <net_buf_unref>
}
 801a394:	bd08      	pop	{r3, pc}
 801a396:	4770      	bx	lr

0801a398 <net_pkt_unref>:
{
 801a398:	b510      	push	{r4, lr}
 801a39a:	b082      	sub	sp, #8
 801a39c:	9001      	str	r0, [sp, #4]
	if (!pkt) {
 801a39e:	b320      	cbz	r0, 801a3ea <net_pkt_unref+0x52>
		ref = atomic_get(&pkt->atomic_ref);
 801a3a0:	9b01      	ldr	r3, [sp, #4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801a3a2:	f3bf 8f5b 	dmb	ish
 801a3a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a3a8:	f3bf 8f5b 	dmb	ish
 801a3ac:	4619      	mov	r1, r3
		if (!ref) {
 801a3ae:	b1e3      	cbz	r3, 801a3ea <net_pkt_unref+0x52>
	} while (!atomic_cas(&pkt->atomic_ref, ref, ref - 1));
 801a3b0:	9a01      	ldr	r2, [sp, #4]
 801a3b2:	3230      	adds	r2, #48	; 0x30
 801a3b4:	1e58      	subs	r0, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
 801a3b6:	f3bf 8f5b 	dmb	ish
 801a3ba:	e852 4f00 	ldrex	r4, [r2]
 801a3be:	429c      	cmp	r4, r3
 801a3c0:	d104      	bne.n	801a3cc <net_pkt_unref+0x34>
 801a3c2:	e842 0c00 	strex	ip, r0, [r2]
 801a3c6:	f1bc 0f00 	cmp.w	ip, #0
 801a3ca:	d1f6      	bne.n	801a3ba <net_pkt_unref+0x22>
 801a3cc:	f3bf 8f5b 	dmb	ish
 801a3d0:	d1e6      	bne.n	801a3a0 <net_pkt_unref+0x8>
	if (ref > 1) {
 801a3d2:	2901      	cmp	r1, #1
 801a3d4:	dc09      	bgt.n	801a3ea <net_pkt_unref+0x52>
	if (pkt->frags) {
 801a3d6:	9b01      	ldr	r3, [sp, #4]
 801a3d8:	6898      	ldr	r0, [r3, #8]
 801a3da:	b108      	cbz	r0, 801a3e0 <net_pkt_unref+0x48>
		net_pkt_frag_unref(pkt->frags);
 801a3dc:	f7ff ffd6 	bl	801a38c <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
 801a3e0:	a901      	add	r1, sp, #4
 801a3e2:	9b01      	ldr	r3, [sp, #4]
 801a3e4:	6858      	ldr	r0, [r3, #4]
 801a3e6:	f001 fc91 	bl	801bd0c <k_mem_slab_free>
}
 801a3ea:	b002      	add	sp, #8
 801a3ec:	bd10      	pop	{r4, pc}

0801a3ee <net_pkt_frag_insert>:
{
 801a3ee:	b538      	push	{r3, r4, r5, lr}
 801a3f0:	4604      	mov	r4, r0
 801a3f2:	460d      	mov	r5, r1
	net_buf_frag_last(frag)->frags = pkt->frags;
 801a3f4:	4608      	mov	r0, r1
 801a3f6:	f7fe f9c1 	bl	801877c <net_buf_frag_last>
 801a3fa:	68a3      	ldr	r3, [r4, #8]
 801a3fc:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
 801a3fe:	60a5      	str	r5, [r4, #8]
}
 801a400:	bd38      	pop	{r3, r4, r5, pc}

0801a402 <net_pkt_available_buffer>:
	if (!pkt) {
 801a402:	b160      	cbz	r0, 801a41e <net_pkt_available_buffer+0x1c>
{
 801a404:	b510      	push	{r4, lr}
 801a406:	4604      	mov	r4, r0
	return pkt_get_max_len(pkt) - net_pkt_get_len(pkt);
 801a408:	f7ff fe5e 	bl	801a0c8 <pkt_get_max_len>
	return net_buf_frags_len(pkt->frags);
 801a40c:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
 801a40e:	2200      	movs	r2, #0
	while (buf) {
 801a410:	b11b      	cbz	r3, 801a41a <net_pkt_available_buffer+0x18>
		bytes += buf->len;
 801a412:	8999      	ldrh	r1, [r3, #12]
 801a414:	440a      	add	r2, r1
		buf = buf->frags;
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	e7fa      	b.n	801a410 <net_pkt_available_buffer+0xe>
 801a41a:	1a80      	subs	r0, r0, r2
}
 801a41c:	bd10      	pop	{r4, pc}
		return 0;
 801a41e:	2000      	movs	r0, #0
}
 801a420:	4770      	bx	lr

0801a422 <net_pkt_trim_buffer>:
{
 801a422:	b570      	push	{r4, r5, r6, lr}
 801a424:	4605      	mov	r5, r0
	buf = pkt->buffer;
 801a426:	6880      	ldr	r0, [r0, #8]
	prev = buf;
 801a428:	4606      	mov	r6, r0
	while (buf) {
 801a42a:	e005      	b.n	801a438 <net_pkt_trim_buffer+0x16>
				pkt->buffer = next;
 801a42c:	60ac      	str	r4, [r5, #8]
 801a42e:	e00e      	b.n	801a44e <net_pkt_trim_buffer+0x2c>
				prev->frags = next;
 801a430:	6034      	str	r4, [r6, #0]
 801a432:	e00c      	b.n	801a44e <net_pkt_trim_buffer+0x2c>
			prev = buf;
 801a434:	4606      	mov	r6, r0
 801a436:	4620      	mov	r0, r4
	while (buf) {
 801a438:	b170      	cbz	r0, 801a458 <net_pkt_trim_buffer+0x36>
		struct net_buf *next = buf->frags;
 801a43a:	6804      	ldr	r4, [r0, #0]
		if (!buf->len) {
 801a43c:	8983      	ldrh	r3, [r0, #12]
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d1f8      	bne.n	801a434 <net_pkt_trim_buffer+0x12>
			if (buf == pkt->buffer) {
 801a442:	68ab      	ldr	r3, [r5, #8]
 801a444:	4283      	cmp	r3, r0
 801a446:	d0f1      	beq.n	801a42c <net_pkt_trim_buffer+0xa>
			} else if (buf == prev->frags) {
 801a448:	6833      	ldr	r3, [r6, #0]
 801a44a:	4283      	cmp	r3, r0
 801a44c:	d0f0      	beq.n	801a430 <net_pkt_trim_buffer+0xe>
			buf->frags = NULL;
 801a44e:	2300      	movs	r3, #0
 801a450:	6003      	str	r3, [r0, #0]
			net_buf_unref(buf);
 801a452:	f7fe f96d 	bl	8018730 <net_buf_unref>
 801a456:	e7ee      	b.n	801a436 <net_pkt_trim_buffer+0x14>
}
 801a458:	bd70      	pop	{r4, r5, r6, pc}

0801a45a <net_pkt_cursor_init>:
	pkt->cursor.buf = pkt->buffer;
 801a45a:	6883      	ldr	r3, [r0, #8]
 801a45c:	60c3      	str	r3, [r0, #12]
	if (pkt->cursor.buf) {
 801a45e:	b113      	cbz	r3, 801a466 <net_pkt_cursor_init+0xc>
		pkt->cursor.pos = pkt->cursor.buf->data;
 801a460:	689b      	ldr	r3, [r3, #8]
 801a462:	6103      	str	r3, [r0, #16]
 801a464:	4770      	bx	lr
		pkt->cursor.pos = NULL;
 801a466:	2300      	movs	r3, #0
 801a468:	6103      	str	r3, [r0, #16]
}
 801a46a:	4770      	bx	lr

0801a46c <pkt_alloc_on_iface>:
{
 801a46c:	b510      	push	{r4, lr}
 801a46e:	460c      	mov	r4, r1
	pkt = pkt_alloc(slab, timeout);
 801a470:	f7f5 fab8 	bl	800f9e4 <pkt_alloc>
	if (pkt) {
 801a474:	4603      	mov	r3, r0
 801a476:	b148      	cbz	r0, 801a48c <pkt_alloc_on_iface+0x20>
	pkt->iface = iface;
 801a478:	6184      	str	r4, [r0, #24]
	if (iface) {
 801a47a:	b13c      	cbz	r4, 801a48c <pkt_alloc_on_iface+0x20>
	return &iface->if_dev->link_addr;
 801a47c:	6822      	ldr	r2, [r4, #0]
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
 801a47e:	7d52      	ldrb	r2, [r2, #21]
 801a480:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
 801a484:	6822      	ldr	r2, [r4, #0]
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
 801a486:	7d52      	ldrb	r2, [r2, #21]
 801a488:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
}
 801a48c:	4618      	mov	r0, r3
 801a48e:	bd10      	pop	{r4, pc}

0801a490 <net_pkt_append_buffer>:
{
 801a490:	b510      	push	{r4, lr}
 801a492:	4603      	mov	r3, r0
 801a494:	460c      	mov	r4, r1
	if (!pkt->buffer) {
 801a496:	6880      	ldr	r0, [r0, #8]
 801a498:	b128      	cbz	r0, 801a4a6 <net_pkt_append_buffer+0x16>
		net_buf_frag_insert(net_buf_frag_last(pkt->buffer), buffer);
 801a49a:	f7fe f96f 	bl	801877c <net_buf_frag_last>
 801a49e:	4621      	mov	r1, r4
 801a4a0:	f7fe f972 	bl	8018788 <net_buf_frag_insert>
}
 801a4a4:	bd10      	pop	{r4, pc}
		pkt->buffer = buffer;
 801a4a6:	6099      	str	r1, [r3, #8]
		net_pkt_cursor_init(pkt);
 801a4a8:	4618      	mov	r0, r3
 801a4aa:	f7ff ffd6 	bl	801a45a <net_pkt_cursor_init>
 801a4ae:	e7f9      	b.n	801a4a4 <net_pkt_append_buffer+0x14>

0801a4b0 <pkt_alloc_with_buffer>:
{
 801a4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4b4:	b085      	sub	sp, #20
 801a4b6:	4606      	mov	r6, r0
 801a4b8:	460f      	mov	r7, r1
 801a4ba:	4692      	mov	sl, r2
 801a4bc:	469b      	mov	fp, r3
 801a4be:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
	uint64_t end = sys_clock_timeout_end_calc(timeout);
 801a4c2:	4620      	mov	r0, r4
 801a4c4:	4629      	mov	r1, r5
 801a4c6:	f002 f8a3 	bl	801c610 <sys_clock_timeout_end_calc>
 801a4ca:	9002      	str	r0, [sp, #8]
 801a4cc:	9103      	str	r1, [sp, #12]
	pkt = pkt_alloc_on_iface(slab, iface, timeout);
 801a4ce:	4622      	mov	r2, r4
 801a4d0:	462b      	mov	r3, r5
 801a4d2:	4639      	mov	r1, r7
 801a4d4:	4630      	mov	r0, r6
 801a4d6:	f7ff ffc9 	bl	801a46c <pkt_alloc_on_iface>
	if (!pkt) {
 801a4da:	4606      	mov	r6, r0
 801a4dc:	b1b8      	cbz	r0, 801a50e <pkt_alloc_with_buffer+0x5e>
	pkt->family = family;
 801a4de:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 801a4e2:	f36b 0343 	bfi	r3, fp, #1, #3
 801a4e6:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
 801a4ea:	ea54 0205 	orrs.w	r2, r4, r5
 801a4ee:	d005      	beq.n	801a4fc <pkt_alloc_with_buffer+0x4c>
 801a4f0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 801a4f4:	bf08      	it	eq
 801a4f6:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
 801a4fa:	d10c      	bne.n	801a516 <pkt_alloc_with_buffer+0x66>
	ret = net_pkt_alloc_buffer(pkt, size, proto, timeout);
 801a4fc:	e9cd 4500 	strd	r4, r5, [sp]
 801a500:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 801a504:	4651      	mov	r1, sl
 801a506:	4630      	mov	r0, r6
 801a508:	f7f5 faa2 	bl	800fa50 <net_pkt_alloc_buffer>
	if (ret) {
 801a50c:	b9b0      	cbnz	r0, 801a53c <pkt_alloc_with_buffer+0x8c>
}
 801a50e:	4630      	mov	r0, r6
 801a510:	b005      	add	sp, #20
 801a512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int64_t remaining = end - sys_clock_tick_get();
 801a516:	f7fc fa65 	bl	80169e4 <sys_clock_tick_get>
 801a51a:	9b02      	ldr	r3, [sp, #8]
 801a51c:	ebb3 0800 	subs.w	r8, r3, r0
 801a520:	9b03      	ldr	r3, [sp, #12]
 801a522:	eb63 0901 	sbc.w	r9, r3, r1
		if (remaining <= 0) {
 801a526:	f1b8 0f01 	cmp.w	r8, #1
 801a52a:	f179 0300 	sbcs.w	r3, r9, #0
 801a52e:	db02      	blt.n	801a536 <pkt_alloc_with_buffer+0x86>
			timeout = Z_TIMEOUT_TICKS(remaining);
 801a530:	4644      	mov	r4, r8
 801a532:	464d      	mov	r5, r9
 801a534:	e7e2      	b.n	801a4fc <pkt_alloc_with_buffer+0x4c>
			timeout = K_NO_WAIT;
 801a536:	2400      	movs	r4, #0
 801a538:	2500      	movs	r5, #0
 801a53a:	e7df      	b.n	801a4fc <pkt_alloc_with_buffer+0x4c>
		net_pkt_unref(pkt);
 801a53c:	4630      	mov	r0, r6
 801a53e:	f7ff ff2b 	bl	801a398 <net_pkt_unref>
		return NULL;
 801a542:	2600      	movs	r6, #0
 801a544:	e7e3      	b.n	801a50e <pkt_alloc_with_buffer+0x5e>

0801a546 <net_pkt_skip>:
{
 801a546:	b500      	push	{lr}
 801a548:	b083      	sub	sp, #12
 801a54a:	460a      	mov	r2, r1
	return net_pkt_cursor_operate(pkt, NULL, skip, false, true);
 801a54c:	2301      	movs	r3, #1
 801a54e:	9300      	str	r3, [sp, #0]
 801a550:	2300      	movs	r3, #0
 801a552:	4619      	mov	r1, r3
 801a554:	f7ff fe75 	bl	801a242 <net_pkt_cursor_operate>
}
 801a558:	b003      	add	sp, #12
 801a55a:	f85d fb04 	ldr.w	pc, [sp], #4

0801a55e <net_pkt_memset>:
{
 801a55e:	b500      	push	{lr}
 801a560:	b085      	sub	sp, #20
 801a562:	9103      	str	r1, [sp, #12]
	return net_pkt_cursor_operate(pkt, &byte, amount, false, true);
 801a564:	2301      	movs	r3, #1
 801a566:	9300      	str	r3, [sp, #0]
 801a568:	2300      	movs	r3, #0
 801a56a:	a903      	add	r1, sp, #12
 801a56c:	f7ff fe69 	bl	801a242 <net_pkt_cursor_operate>
}
 801a570:	b005      	add	sp, #20
 801a572:	f85d fb04 	ldr.w	pc, [sp], #4

0801a576 <net_pkt_read>:
{
 801a576:	b500      	push	{lr}
 801a578:	b083      	sub	sp, #12
	return net_pkt_cursor_operate(pkt, data, length, true, false);
 801a57a:	2300      	movs	r3, #0
 801a57c:	9300      	str	r3, [sp, #0]
 801a57e:	2301      	movs	r3, #1
 801a580:	f7ff fe5f 	bl	801a242 <net_pkt_cursor_operate>
}
 801a584:	b003      	add	sp, #12
 801a586:	f85d fb04 	ldr.w	pc, [sp], #4

0801a58a <net_pkt_read_be32>:
{
 801a58a:	b510      	push	{r4, lr}
 801a58c:	b082      	sub	sp, #8
 801a58e:	460c      	mov	r4, r1
	ret = net_pkt_read(pkt, d32, sizeof(uint32_t));
 801a590:	2204      	movs	r2, #4
 801a592:	eb0d 0102 	add.w	r1, sp, r2
 801a596:	f7ff ffee 	bl	801a576 <net_pkt_read>
	*data = d32[0] << 24 | d32[1] << 16 | d32[2] << 8 | d32[3];
 801a59a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801a59e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801a5a2:	041b      	lsls	r3, r3, #16
 801a5a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801a5a8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801a5ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801a5b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801a5b4:	4313      	orrs	r3, r2
 801a5b6:	6023      	str	r3, [r4, #0]
}
 801a5b8:	b002      	add	sp, #8
 801a5ba:	bd10      	pop	{r4, pc}

0801a5bc <net_pkt_copy>:
{
 801a5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5be:	4605      	mov	r5, r0
 801a5c0:	460e      	mov	r6, r1
 801a5c2:	4617      	mov	r7, r2
	while (c_dst->buf && c_src->buf && length) {
 801a5c4:	e018      	b.n	801a5f8 <net_pkt_copy+0x3c>
			if (d_len < s_len) {
 801a5c6:	42a3      	cmp	r3, r4
 801a5c8:	d200      	bcs.n	801a5cc <net_pkt_copy+0x10>
				len = d_len;
 801a5ca:	461c      	mov	r4, r3
		if (!len) {
 801a5cc:	2c00      	cmp	r4, #0
 801a5ce:	d03e      	beq.n	801a64e <net_pkt_copy+0x92>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 801a5d0:	4622      	mov	r2, r4
 801a5d2:	6931      	ldr	r1, [r6, #16]
 801a5d4:	f002 f930 	bl	801c838 <memcpy>
	return pkt->overwrite;
 801a5d8:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
		if (!net_pkt_is_being_overwritten(pkt_dst)) {
 801a5dc:	f013 0f01 	tst.w	r3, #1
 801a5e0:	d02f      	beq.n	801a642 <net_pkt_copy+0x86>
		pkt_cursor_update(pkt_dst, len, true);
 801a5e2:	2201      	movs	r2, #1
 801a5e4:	4621      	mov	r1, r4
 801a5e6:	4628      	mov	r0, r5
 801a5e8:	f7ff fdae 	bl	801a148 <pkt_cursor_update>
		pkt_cursor_update(pkt_src, len, false);
 801a5ec:	2200      	movs	r2, #0
 801a5ee:	4621      	mov	r1, r4
 801a5f0:	4630      	mov	r0, r6
 801a5f2:	f7ff fda9 	bl	801a148 <pkt_cursor_update>
		length -= len;
 801a5f6:	1b3f      	subs	r7, r7, r4
	while (c_dst->buf && c_src->buf && length) {
 801a5f8:	68eb      	ldr	r3, [r5, #12]
 801a5fa:	b343      	cbz	r3, 801a64e <net_pkt_copy+0x92>
 801a5fc:	68f3      	ldr	r3, [r6, #12]
 801a5fe:	b333      	cbz	r3, 801a64e <net_pkt_copy+0x92>
 801a600:	b32f      	cbz	r7, 801a64e <net_pkt_copy+0x92>
		pkt_cursor_advance(pkt_dst, true);
 801a602:	2101      	movs	r1, #1
 801a604:	4628      	mov	r0, r5
 801a606:	f7ff fd88 	bl	801a11a <pkt_cursor_advance>
		pkt_cursor_advance(pkt_src, false);
 801a60a:	2100      	movs	r1, #0
 801a60c:	4630      	mov	r0, r6
 801a60e:	f7ff fd84 	bl	801a11a <pkt_cursor_advance>
		if (!c_dst->buf || !c_src->buf) {
 801a612:	68e8      	ldr	r0, [r5, #12]
 801a614:	b1d8      	cbz	r0, 801a64e <net_pkt_copy+0x92>
 801a616:	68f3      	ldr	r3, [r6, #12]
 801a618:	b1cb      	cbz	r3, 801a64e <net_pkt_copy+0x92>
		s_len = c_src->buf->len - (c_src->pos - c_src->buf->data);
 801a61a:	899c      	ldrh	r4, [r3, #12]
 801a61c:	6932      	ldr	r2, [r6, #16]
 801a61e:	689b      	ldr	r3, [r3, #8]
 801a620:	1ad2      	subs	r2, r2, r3
 801a622:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_max_len(&buf->b);
 801a624:	3008      	adds	r0, #8
 801a626:	f7fe f8d4 	bl	80187d2 <net_buf_simple_max_len>
 801a62a:	4603      	mov	r3, r0
		d_len = net_buf_max_len(c_dst->buf) - (c_dst->pos - c_dst->buf->data);
 801a62c:	6928      	ldr	r0, [r5, #16]
 801a62e:	68ea      	ldr	r2, [r5, #12]
 801a630:	6892      	ldr	r2, [r2, #8]
 801a632:	1a82      	subs	r2, r0, r2
 801a634:	1a9b      	subs	r3, r3, r2
		if (length < s_len && length < d_len) {
 801a636:	42bc      	cmp	r4, r7
 801a638:	d9c5      	bls.n	801a5c6 <net_pkt_copy+0xa>
 801a63a:	42bb      	cmp	r3, r7
 801a63c:	d9c3      	bls.n	801a5c6 <net_pkt_copy+0xa>
			len = length;
 801a63e:	463c      	mov	r4, r7
 801a640:	e7c4      	b.n	801a5cc <net_pkt_copy+0x10>
			net_buf_add(c_dst->buf, len);
 801a642:	68e8      	ldr	r0, [r5, #12]
	return net_buf_simple_add(&buf->b, len);
 801a644:	4621      	mov	r1, r4
 801a646:	3008      	adds	r0, #8
 801a648:	f7fe f8a9 	bl	801879e <net_buf_simple_add>
 801a64c:	e7c9      	b.n	801a5e2 <net_pkt_copy+0x26>
	if (length) {
 801a64e:	b90f      	cbnz	r7, 801a654 <net_pkt_copy+0x98>
	return 0;
 801a650:	2000      	movs	r0, #0
}
 801a652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
 801a654:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801a658:	e7fb      	b.n	801a652 <net_pkt_copy+0x96>

0801a65a <net_pkt_update_length>:
	for (buf = pkt->buffer; buf; buf = buf->frags) {
 801a65a:	6883      	ldr	r3, [r0, #8]
 801a65c:	e002      	b.n	801a664 <net_pkt_update_length+0xa>
			buf->len = length;
 801a65e:	8199      	strh	r1, [r3, #12]
			length = 0;
 801a660:	2100      	movs	r1, #0
	for (buf = pkt->buffer; buf; buf = buf->frags) {
 801a662:	681b      	ldr	r3, [r3, #0]
 801a664:	b123      	cbz	r3, 801a670 <net_pkt_update_length+0x16>
		if (buf->len < length) {
 801a666:	899a      	ldrh	r2, [r3, #12]
 801a668:	428a      	cmp	r2, r1
 801a66a:	d2f8      	bcs.n	801a65e <net_pkt_update_length+0x4>
			length -= buf->len;
 801a66c:	1a89      	subs	r1, r1, r2
 801a66e:	e7f8      	b.n	801a662 <net_pkt_update_length+0x8>
	return !length ? 0 : -EINVAL;
 801a670:	b909      	cbnz	r1, 801a676 <net_pkt_update_length+0x1c>
 801a672:	2000      	movs	r0, #0
 801a674:	4770      	bx	lr
 801a676:	f06f 0015 	mvn.w	r0, #21
}
 801a67a:	4770      	bx	lr

0801a67c <net_pkt_get_current_offset>:
	struct net_buf *buf = pkt->buffer;
 801a67c:	6883      	ldr	r3, [r0, #8]
	if (!pkt->cursor.buf || !pkt->cursor.pos) {
 801a67e:	68c1      	ldr	r1, [r0, #12]
 801a680:	b189      	cbz	r1, 801a6a6 <net_pkt_get_current_offset+0x2a>
{
 801a682:	b410      	push	{r4}
	if (!pkt->cursor.buf || !pkt->cursor.pos) {
 801a684:	6904      	ldr	r4, [r0, #16]
 801a686:	b184      	cbz	r4, 801a6aa <net_pkt_get_current_offset+0x2e>
	offset = 0U;
 801a688:	2000      	movs	r0, #0
 801a68a:	e003      	b.n	801a694 <net_pkt_get_current_offset+0x18>
		offset += buf->len;
 801a68c:	899a      	ldrh	r2, [r3, #12]
 801a68e:	4410      	add	r0, r2
 801a690:	b280      	uxth	r0, r0
		buf = buf->frags;
 801a692:	681b      	ldr	r3, [r3, #0]
	while (buf != pkt->cursor.buf) {
 801a694:	4299      	cmp	r1, r3
 801a696:	d1f9      	bne.n	801a68c <net_pkt_get_current_offset+0x10>
	offset += pkt->cursor.pos - buf->data;
 801a698:	689b      	ldr	r3, [r3, #8]
 801a69a:	1ae4      	subs	r4, r4, r3
 801a69c:	4420      	add	r0, r4
 801a69e:	b280      	uxth	r0, r0
}
 801a6a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a6a4:	4770      	bx	lr
		return 0;
 801a6a6:	2000      	movs	r0, #0
}
 801a6a8:	4770      	bx	lr
		return 0;
 801a6aa:	2000      	movs	r0, #0
 801a6ac:	e7f8      	b.n	801a6a0 <net_pkt_get_current_offset+0x24>

0801a6ae <net_pkt_clone>:
{
 801a6ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a6b2:	b085      	sub	sp, #20
 801a6b4:	4606      	mov	r6, r0
 801a6b6:	4691      	mov	r9, r2
 801a6b8:	4698      	mov	r8, r3
	size_t cursor_offset = net_pkt_get_current_offset(pkt);
 801a6ba:	f7ff ffdf 	bl	801a67c <net_pkt_get_current_offset>
 801a6be:	4607      	mov	r7, r0
	clone_pkt = pkt_alloc_with_buffer(pkt->slab, net_pkt_iface(pkt),
 801a6c0:	6870      	ldr	r0, [r6, #4]
	return pkt->iface;
 801a6c2:	69b1      	ldr	r1, [r6, #24]
	return net_buf_frags_len(pkt->frags);
 801a6c4:	68b4      	ldr	r4, [r6, #8]
	size_t bytes = 0;
 801a6c6:	2200      	movs	r2, #0
	while (buf) {
 801a6c8:	b11c      	cbz	r4, 801a6d2 <net_pkt_clone+0x24>
		bytes += buf->len;
 801a6ca:	89a5      	ldrh	r5, [r4, #12]
 801a6cc:	442a      	add	r2, r5
		buf = buf->frags;
 801a6ce:	6824      	ldr	r4, [r4, #0]
 801a6d0:	e7fa      	b.n	801a6c8 <net_pkt_clone+0x1a>
 801a6d2:	f8cd 9008 	str.w	r9, [sp, #8]
 801a6d6:	f8cd 800c 	str.w	r8, [sp, #12]
 801a6da:	2300      	movs	r3, #0
 801a6dc:	9300      	str	r3, [sp, #0]
 801a6de:	f7ff fee7 	bl	801a4b0 <pkt_alloc_with_buffer>
	if (!clone_pkt) {
 801a6e2:	4605      	mov	r5, r0
 801a6e4:	b368      	cbz	r0, 801a742 <net_pkt_clone+0x94>
	backup->buf = pkt->cursor.buf;
 801a6e6:	f8d6 900c 	ldr.w	r9, [r6, #12]
	backup->pos = pkt->cursor.pos;
 801a6ea:	f8d6 8010 	ldr.w	r8, [r6, #16]
	net_pkt_cursor_init(pkt);
 801a6ee:	4630      	mov	r0, r6
 801a6f0:	f7ff feb3 	bl	801a45a <net_pkt_cursor_init>
	return net_buf_frags_len(pkt->frags);
 801a6f4:	68b4      	ldr	r4, [r6, #8]
	size_t bytes = 0;
 801a6f6:	2200      	movs	r2, #0
	while (buf) {
 801a6f8:	e002      	b.n	801a700 <net_pkt_clone+0x52>
		bytes += buf->len;
 801a6fa:	89a3      	ldrh	r3, [r4, #12]
 801a6fc:	441a      	add	r2, r3
		buf = buf->frags;
 801a6fe:	6824      	ldr	r4, [r4, #0]
	while (buf) {
 801a700:	2c00      	cmp	r4, #0
 801a702:	d1fa      	bne.n	801a6fa <net_pkt_clone+0x4c>
	if (net_pkt_copy(clone_pkt, pkt, net_pkt_get_len(pkt))) {
 801a704:	4631      	mov	r1, r6
 801a706:	4628      	mov	r0, r5
 801a708:	f7ff ff58 	bl	801a5bc <net_pkt_copy>
 801a70c:	b9e8      	cbnz	r0, 801a74a <net_pkt_clone+0x9c>
	if (clone_pkt->buffer) {
 801a70e:	68ab      	ldr	r3, [r5, #8]
 801a710:	b15b      	cbz	r3, 801a72a <net_pkt_clone+0x7c>
		memcpy(&clone_pkt->lladdr_src, &pkt->lladdr_src,
 801a712:	4633      	mov	r3, r6
 801a714:	f853 2f34 	ldr.w	r2, [r3, #52]!
 801a718:	685b      	ldr	r3, [r3, #4]
 801a71a:	636a      	str	r2, [r5, #52]	; 0x34
 801a71c:	63ab      	str	r3, [r5, #56]	; 0x38
		memcpy(&clone_pkt->lladdr_dst, &pkt->lladdr_dst,
 801a71e:	4633      	mov	r3, r6
 801a720:	f853 2f3c 	ldr.w	r2, [r3, #60]!
 801a724:	685b      	ldr	r3, [r3, #4]
 801a726:	63ea      	str	r2, [r5, #60]	; 0x3c
 801a728:	642b      	str	r3, [r5, #64]	; 0x40
	clone_pkt_attributes(pkt, clone_pkt);
 801a72a:	4629      	mov	r1, r5
 801a72c:	4630      	mov	r0, r6
 801a72e:	f7ff fc80 	bl	801a032 <clone_pkt_attributes>
	net_pkt_cursor_init(clone_pkt);
 801a732:	4628      	mov	r0, r5
 801a734:	f7ff fe91 	bl	801a45a <net_pkt_cursor_init>
	if (cursor_offset) {
 801a738:	b987      	cbnz	r7, 801a75c <net_pkt_clone+0xae>
	pkt->cursor.buf = backup->buf;
 801a73a:	f8c6 900c 	str.w	r9, [r6, #12]
	pkt->cursor.pos = backup->pos;
 801a73e:	f8c6 8010 	str.w	r8, [r6, #16]
}
 801a742:	4628      	mov	r0, r5
 801a744:	b005      	add	sp, #20
 801a746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_pkt_unref(clone_pkt);
 801a74a:	4628      	mov	r0, r5
 801a74c:	f7ff fe24 	bl	801a398 <net_pkt_unref>
	pkt->cursor.buf = backup->buf;
 801a750:	f8c6 900c 	str.w	r9, [r6, #12]
	pkt->cursor.pos = backup->pos;
 801a754:	f8c6 8010 	str.w	r8, [r6, #16]
		return NULL;
 801a758:	4625      	mov	r5, r4
 801a75a:	e7f2      	b.n	801a742 <net_pkt_clone+0x94>
	pkt->overwrite = overwrite;
 801a75c:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
 801a760:	f043 0301 	orr.w	r3, r3, #1
 801a764:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
		net_pkt_skip(clone_pkt, cursor_offset);
 801a768:	4639      	mov	r1, r7
 801a76a:	4628      	mov	r0, r5
 801a76c:	f7ff feeb 	bl	801a546 <net_pkt_skip>
 801a770:	e7e3      	b.n	801a73a <net_pkt_clone+0x8c>

0801a772 <net_pkt_get_contiguous_len>:
{
 801a772:	b510      	push	{r4, lr}
 801a774:	4604      	mov	r4, r0
	return pkt->overwrite;
 801a776:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
 801a77a:	f001 0101 	and.w	r1, r1, #1
	pkt_cursor_advance(pkt, !net_pkt_is_being_overwritten(pkt));
 801a77e:	f081 0101 	eor.w	r1, r1, #1
 801a782:	f7ff fcca 	bl	801a11a <pkt_cursor_advance>
	if (pkt->cursor.buf && pkt->cursor.pos) {
 801a786:	68e3      	ldr	r3, [r4, #12]
 801a788:	b16b      	cbz	r3, 801a7a6 <net_pkt_get_contiguous_len+0x34>
 801a78a:	6922      	ldr	r2, [r4, #16]
 801a78c:	b16a      	cbz	r2, 801a7aa <net_pkt_get_contiguous_len+0x38>
 801a78e:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
			pkt->cursor.buf->len : pkt->cursor.buf->size;
 801a792:	f011 0f01 	tst.w	r1, #1
 801a796:	d004      	beq.n	801a7a2 <net_pkt_get_contiguous_len+0x30>
 801a798:	8998      	ldrh	r0, [r3, #12]
		len -= pkt->cursor.pos - pkt->cursor.buf->data;
 801a79a:	689b      	ldr	r3, [r3, #8]
 801a79c:	1ad2      	subs	r2, r2, r3
 801a79e:	1a80      	subs	r0, r0, r2
}
 801a7a0:	bd10      	pop	{r4, pc}
			pkt->cursor.buf->len : pkt->cursor.buf->size;
 801a7a2:	89d8      	ldrh	r0, [r3, #14]
 801a7a4:	e7f9      	b.n	801a79a <net_pkt_get_contiguous_len+0x28>
	return 0;
 801a7a6:	2000      	movs	r0, #0
 801a7a8:	e7fa      	b.n	801a7a0 <net_pkt_get_contiguous_len+0x2e>
 801a7aa:	2000      	movs	r0, #0
 801a7ac:	e7f8      	b.n	801a7a0 <net_pkt_get_contiguous_len+0x2e>

0801a7ae <net_pkt_is_contiguous>:
{
 801a7ae:	b510      	push	{r4, lr}
 801a7b0:	460c      	mov	r4, r1
	size_t len = net_pkt_get_contiguous_len(pkt);
 801a7b2:	f7ff ffde 	bl	801a772 <net_pkt_get_contiguous_len>
}
 801a7b6:	42a0      	cmp	r0, r4
 801a7b8:	bf34      	ite	cc
 801a7ba:	2000      	movcc	r0, #0
 801a7bc:	2001      	movcs	r0, #1
 801a7be:	bd10      	pop	{r4, pc}

0801a7c0 <net_pkt_write>:
{
 801a7c0:	b570      	push	{r4, r5, r6, lr}
 801a7c2:	b082      	sub	sp, #8
 801a7c4:	4604      	mov	r4, r0
 801a7c6:	460d      	mov	r5, r1
 801a7c8:	4616      	mov	r6, r2
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
 801a7ca:	6903      	ldr	r3, [r0, #16]
 801a7cc:	4299      	cmp	r1, r3
 801a7ce:	d008      	beq.n	801a7e2 <net_pkt_write+0x22>
	return net_pkt_cursor_operate(pkt, (void *)data, length, true, true);
 801a7d0:	2301      	movs	r3, #1
 801a7d2:	9300      	str	r3, [sp, #0]
 801a7d4:	4632      	mov	r2, r6
 801a7d6:	4629      	mov	r1, r5
 801a7d8:	4620      	mov	r0, r4
 801a7da:	f7ff fd32 	bl	801a242 <net_pkt_cursor_operate>
}
 801a7de:	b002      	add	sp, #8
 801a7e0:	bd70      	pop	{r4, r5, r6, pc}
	if (data == pkt->cursor.pos && net_pkt_is_contiguous(pkt, length)) {
 801a7e2:	4611      	mov	r1, r2
 801a7e4:	f7ff ffe3 	bl	801a7ae <net_pkt_is_contiguous>
 801a7e8:	2800      	cmp	r0, #0
 801a7ea:	d0f1      	beq.n	801a7d0 <net_pkt_write+0x10>
		return net_pkt_skip(pkt, length);
 801a7ec:	4631      	mov	r1, r6
 801a7ee:	4620      	mov	r0, r4
 801a7f0:	f7ff fea9 	bl	801a546 <net_pkt_skip>
 801a7f4:	e7f3      	b.n	801a7de <net_pkt_write+0x1e>

0801a7f6 <net_pkt_set_data>:

int net_pkt_set_data(struct net_pkt *pkt,
		     struct net_pkt_data_access *access)
{
 801a7f6:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_NET_HEADERS_ALWAYS_CONTIGUOUS)) {
		return net_pkt_skip(pkt, access->size);
	}

	return net_pkt_write(pkt, access->data, access->size);
 801a7f8:	684a      	ldr	r2, [r1, #4]
 801a7fa:	6809      	ldr	r1, [r1, #0]
 801a7fc:	f7ff ffe0 	bl	801a7c0 <net_pkt_write>
}
 801a800:	bd08      	pop	{r3, pc}

0801a802 <net_pkt_init>:
		(size_t)(k_mem_slab_num_free_get(&tx_pkts) *
			 sizeof(struct net_pkt)),
		get_frees(&rx_bufs), get_size(&rx_bufs),
		get_frees(&tx_bufs), get_size(&tx_bufs));
#endif
}
 801a802:	4770      	bx	lr

0801a804 <submit_to_queue>:
{
 801a804:	b508      	push	{r3, lr}
	k_fifo_put(queue, pkt);
 801a806:	f001 fbb0 	bl	801bf6a <k_queue_append>
}
 801a80a:	bd08      	pop	{r3, pc}

0801a80c <tc_tx_handler>:
{
 801a80c:	b510      	push	{r4, lr}
 801a80e:	4604      	mov	r4, r0
 801a810:	e001      	b.n	801a816 <tc_tx_handler+0xa>
		net_process_tx_packet(pkt);
 801a812:	f7ff f8a0 	bl	8019956 <net_process_tx_packet>
	return z_impl_k_queue_get(queue, timeout);
 801a816:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a81a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a81e:	4620      	mov	r0, r4
 801a820:	f7fb f94a 	bl	8015ab8 <z_impl_k_queue_get>
		if (pkt == NULL) {
 801a824:	2800      	cmp	r0, #0
 801a826:	d1f4      	bne.n	801a812 <tc_tx_handler+0x6>
 801a828:	e7f5      	b.n	801a816 <tc_tx_handler+0xa>

0801a82a <tc_rx_handler>:
{
 801a82a:	b510      	push	{r4, lr}
 801a82c:	4604      	mov	r4, r0
 801a82e:	e001      	b.n	801a834 <tc_rx_handler+0xa>
		net_process_rx_packet(pkt);
 801a830:	f7fe fe78 	bl	8019524 <net_process_rx_packet>
 801a834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a83c:	4620      	mov	r0, r4
 801a83e:	f7fb f93b 	bl	8015ab8 <z_impl_k_queue_get>
		if (pkt == NULL) {
 801a842:	2800      	cmp	r0, #0
 801a844:	d1f4      	bne.n	801a830 <tc_rx_handler+0x6>
 801a846:	e7f5      	b.n	801a834 <tc_rx_handler+0xa>

0801a848 <net_tc_tx_stats_priority_setup>:
{
 801a848:	b508      	push	{r3, lr}
	tc_tx_stats_priority_setup(iface);
 801a84a:	f7f5 fa35 	bl	800fcb8 <tc_tx_stats_priority_setup>
}
 801a84e:	bd08      	pop	{r3, pc}

0801a850 <net_tc_rx_stats_priority_setup>:
{
 801a850:	b508      	push	{r3, lr}
	tc_rx_stats_priority_setup(iface);
 801a852:	f7f5 fa4f 	bl	800fcf4 <tc_rx_stats_priority_setup>
}
 801a856:	bd08      	pop	{r3, pc}

0801a858 <icmpv4_create>:
{
 801a858:	b570      	push	{r4, r5, r6, lr}
 801a85a:	b082      	sub	sp, #8
 801a85c:	4604      	mov	r4, r0
 801a85e:	460e      	mov	r6, r1
 801a860:	4615      	mov	r5, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
 801a862:	2300      	movs	r3, #0
 801a864:	9300      	str	r3, [sp, #0]
 801a866:	2304      	movs	r3, #4
 801a868:	9301      	str	r3, [sp, #4]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
 801a86a:	4669      	mov	r1, sp
 801a86c:	f7f5 f9ae 	bl	800fbcc <net_pkt_get_data>
	if (!icmp_hdr) {
 801a870:	b150      	cbz	r0, 801a888 <icmpv4_create+0x30>
	icmp_hdr->type   = icmp_type;
 801a872:	7006      	strb	r6, [r0, #0]
	icmp_hdr->code   = icmp_code;
 801a874:	7045      	strb	r5, [r0, #1]
	icmp_hdr->chksum = 0U;
 801a876:	2200      	movs	r2, #0
 801a878:	7082      	strb	r2, [r0, #2]
 801a87a:	70c2      	strb	r2, [r0, #3]
	return net_pkt_set_data(pkt, &icmpv4_access);
 801a87c:	4669      	mov	r1, sp
 801a87e:	4620      	mov	r0, r4
 801a880:	f7ff ffb9 	bl	801a7f6 <net_pkt_set_data>
}
 801a884:	b002      	add	sp, #8
 801a886:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
 801a888:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801a88c:	e7fa      	b.n	801a884 <icmpv4_create+0x2c>

0801a88e <icmpv4_update_record_route>:
{
 801a88e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a892:	b082      	sub	sp, #8
 801a894:	4680      	mov	r8, r0
 801a896:	460c      	mov	r4, r1
 801a898:	4617      	mov	r7, r2
 801a89a:	4699      	mov	r9, r3
	return pkt->ipv4_opts_len;
 801a89c:	f892 6050 	ldrb.w	r6, [r2, #80]	; 0x50
	if (net_pkt_write_u8(reply, NET_IPV4_OPTS_RR)) {
 801a8a0:	2307      	movs	r3, #7
 801a8a2:	f88d 3007 	strb.w	r3, [sp, #7]
	return net_pkt_write(pkt, &data, sizeof(uint8_t));
 801a8a6:	2201      	movs	r2, #1
 801a8a8:	eb0d 0103 	add.w	r1, sp, r3
 801a8ac:	4638      	mov	r0, r7
 801a8ae:	f7ff ff87 	bl	801a7c0 <net_pkt_write>
 801a8b2:	2800      	cmp	r0, #0
 801a8b4:	d168      	bne.n	801a988 <icmpv4_update_record_route+0xfa>
	if (net_pkt_write_u8(reply, opt_len + 2U)) {
 801a8b6:	1ca3      	adds	r3, r4, #2
 801a8b8:	f88d 3007 	strb.w	r3, [sp, #7]
 801a8bc:	2201      	movs	r2, #1
 801a8be:	f10d 0107 	add.w	r1, sp, #7
 801a8c2:	4638      	mov	r0, r7
 801a8c4:	f7ff ff7c 	bl	801a7c0 <net_pkt_write>
 801a8c8:	2800      	cmp	r0, #0
 801a8ca:	d160      	bne.n	801a98e <icmpv4_update_record_route+0x100>
	ptr = opt_data[offset++];
 801a8cc:	f898 5000 	ldrb.w	r5, [r8]
	if (ptr >= opt_len) {
 801a8d0:	42ac      	cmp	r4, r5
 801a8d2:	d920      	bls.n	801a916 <icmpv4_update_record_route+0x88>
	if ((ptr + addr_len) > opt_len) {
 801a8d4:	1d2b      	adds	r3, r5, #4
 801a8d6:	42a3      	cmp	r3, r4
 801a8d8:	dc62      	bgt.n	801a9a0 <icmpv4_update_record_route+0x112>
	if (net_pkt_write_u8(reply, ptr + addr_len)) {
 801a8da:	f88d 3007 	strb.w	r3, [sp, #7]
 801a8de:	2201      	movs	r2, #1
 801a8e0:	f10d 0107 	add.w	r1, sp, #7
 801a8e4:	4638      	mov	r0, r7
 801a8e6:	f7ff ff6b 	bl	801a7c0 <net_pkt_write>
 801a8ea:	2800      	cmp	r0, #0
 801a8ec:	d15b      	bne.n	801a9a6 <icmpv4_update_record_route+0x118>
	len++;
 801a8ee:	3603      	adds	r6, #3
 801a8f0:	b2f6      	uxtb	r6, r6
	skip = ptr - ptr_offset;
 801a8f2:	f1a5 0a04 	sub.w	sl, r5, #4
	if (skip) {
 801a8f6:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
 801a8fa:	d023      	beq.n	801a944 <icmpv4_update_record_route+0xb6>
		if (net_pkt_write(reply, opt_data + offset, skip)) {
 801a8fc:	4652      	mov	r2, sl
 801a8fe:	f108 0101 	add.w	r1, r8, #1
 801a902:	4638      	mov	r0, r7
 801a904:	f7ff ff5c 	bl	801a7c0 <net_pkt_write>
 801a908:	2800      	cmp	r0, #0
 801a90a:	d14f      	bne.n	801a9ac <icmpv4_update_record_route+0x11e>
		offset += skip;
 801a90c:	3d03      	subs	r5, #3
 801a90e:	b2ed      	uxtb	r5, r5
		len += skip;
 801a910:	4456      	add	r6, sl
 801a912:	b2f6      	uxtb	r6, r6
 801a914:	e017      	b.n	801a946 <icmpv4_update_record_route+0xb8>
		if (net_pkt_write_u8(reply, ptr)) {
 801a916:	f88d 5007 	strb.w	r5, [sp, #7]
 801a91a:	2201      	movs	r2, #1
 801a91c:	f10d 0107 	add.w	r1, sp, #7
 801a920:	4638      	mov	r0, r7
 801a922:	f7ff ff4d 	bl	801a7c0 <net_pkt_write>
 801a926:	bba8      	cbnz	r0, 801a994 <icmpv4_update_record_route+0x106>
		len++;
 801a928:	3603      	adds	r6, #3
 801a92a:	b2f6      	uxtb	r6, r6
		if (net_pkt_write(reply, opt_data + offset, opt_len)) {
 801a92c:	4622      	mov	r2, r4
 801a92e:	f108 0101 	add.w	r1, r8, #1
 801a932:	4638      	mov	r0, r7
 801a934:	f7ff ff44 	bl	801a7c0 <net_pkt_write>
 801a938:	4681      	mov	r9, r0
 801a93a:	bb70      	cbnz	r0, 801a99a <icmpv4_update_record_route+0x10c>
		len += opt_len;
 801a93c:	4426      	add	r6, r4
	pkt->ipv4_opts_len = opts_len;
 801a93e:	f887 6050 	strb.w	r6, [r7, #80]	; 0x50
		return 0;
 801a942:	e012      	b.n	801a96a <icmpv4_update_record_route+0xdc>
	ptr = opt_data[offset++];
 801a944:	2501      	movs	r5, #1
	if (net_pkt_write(reply, (void *)src, addr_len)) {
 801a946:	2204      	movs	r2, #4
 801a948:	4649      	mov	r1, r9
 801a94a:	4638      	mov	r0, r7
 801a94c:	f7ff ff38 	bl	801a7c0 <net_pkt_write>
 801a950:	4681      	mov	r9, r0
 801a952:	bb70      	cbnz	r0, 801a9b2 <icmpv4_update_record_route+0x124>
	len += addr_len;
 801a954:	3604      	adds	r6, #4
 801a956:	b2f6      	uxtb	r6, r6
	offset += addr_len;
 801a958:	3504      	adds	r5, #4
 801a95a:	b2ed      	uxtb	r5, r5
	if (opt_len > offset) {
 801a95c:	42ac      	cmp	r4, r5
 801a95e:	d808      	bhi.n	801a972 <icmpv4_update_record_route+0xe4>
	len += opt_len - offset;
 801a960:	1b64      	subs	r4, r4, r5
 801a962:	fa56 f484 	uxtab	r4, r6, r4
 801a966:	f887 4050 	strb.w	r4, [r7, #80]	; 0x50
}
 801a96a:	4648      	mov	r0, r9
 801a96c:	b002      	add	sp, #8
 801a96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (net_pkt_write(reply, opt_data + offset, opt_len - offset)) {
 801a972:	1b62      	subs	r2, r4, r5
 801a974:	eb08 0105 	add.w	r1, r8, r5
 801a978:	4638      	mov	r0, r7
 801a97a:	f7ff ff21 	bl	801a7c0 <net_pkt_write>
 801a97e:	2800      	cmp	r0, #0
 801a980:	d0ee      	beq.n	801a960 <icmpv4_update_record_route+0xd2>
	return -EINVAL;
 801a982:	f06f 0915 	mvn.w	r9, #21
 801a986:	e7f0      	b.n	801a96a <icmpv4_update_record_route+0xdc>
 801a988:	f06f 0915 	mvn.w	r9, #21
 801a98c:	e7ed      	b.n	801a96a <icmpv4_update_record_route+0xdc>
 801a98e:	f06f 0915 	mvn.w	r9, #21
 801a992:	e7ea      	b.n	801a96a <icmpv4_update_record_route+0xdc>
 801a994:	f06f 0915 	mvn.w	r9, #21
 801a998:	e7e7      	b.n	801a96a <icmpv4_update_record_route+0xdc>
 801a99a:	f06f 0915 	mvn.w	r9, #21
 801a99e:	e7e4      	b.n	801a96a <icmpv4_update_record_route+0xdc>
 801a9a0:	f06f 0915 	mvn.w	r9, #21
 801a9a4:	e7e1      	b.n	801a96a <icmpv4_update_record_route+0xdc>
 801a9a6:	f06f 0915 	mvn.w	r9, #21
 801a9aa:	e7de      	b.n	801a96a <icmpv4_update_record_route+0xdc>
 801a9ac:	f06f 0915 	mvn.w	r9, #21
 801a9b0:	e7db      	b.n	801a96a <icmpv4_update_record_route+0xdc>
 801a9b2:	f06f 0915 	mvn.w	r9, #21
 801a9b6:	e7d8      	b.n	801a96a <icmpv4_update_record_route+0xdc>

0801a9b8 <icmpv4_update_time_stamp>:
{
 801a9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9bc:	b085      	sub	sp, #20
 801a9be:	4680      	mov	r8, r0
 801a9c0:	460d      	mov	r5, r1
 801a9c2:	4614      	mov	r4, r2
 801a9c4:	9301      	str	r3, [sp, #4]
	return pkt->ipv4_opts_len;
 801a9c6:	f892 6050 	ldrb.w	r6, [r2, #80]	; 0x50
	if (net_pkt_write_u8(reply, NET_IPV4_OPTS_TS)) {
 801a9ca:	2344      	movs	r3, #68	; 0x44
 801a9cc:	f88d 300c 	strb.w	r3, [sp, #12]
	return net_pkt_write(pkt, &data, sizeof(uint8_t));
 801a9d0:	2201      	movs	r2, #1
 801a9d2:	a903      	add	r1, sp, #12
 801a9d4:	4620      	mov	r0, r4
 801a9d6:	f7ff fef3 	bl	801a7c0 <net_pkt_write>
 801a9da:	2800      	cmp	r0, #0
 801a9dc:	f040 80d9 	bne.w	801ab92 <icmpv4_update_time_stamp+0x1da>
	if (net_pkt_write_u8(reply, opt_len + 2U)) {
 801a9e0:	1cab      	adds	r3, r5, #2
 801a9e2:	f88d 300c 	strb.w	r3, [sp, #12]
 801a9e6:	2201      	movs	r2, #1
 801a9e8:	a903      	add	r1, sp, #12
 801a9ea:	4620      	mov	r0, r4
 801a9ec:	f7ff fee8 	bl	801a7c0 <net_pkt_write>
 801a9f0:	2800      	cmp	r0, #0
 801a9f2:	f040 80d1 	bne.w	801ab98 <icmpv4_update_time_stamp+0x1e0>
	ptr = opt_data[offset++];
 801a9f6:	f898 9000 	ldrb.w	r9, [r8]
	flag = opt_data[offset++];
 801a9fa:	f898 7001 	ldrb.w	r7, [r8, #1]
	flag = flag & 0x0F;
 801a9fe:	f007 070f 	and.w	r7, r7, #15
	if (ptr >= opt_len) {
 801aa02:	454d      	cmp	r5, r9
 801aa04:	d828      	bhi.n	801aa58 <icmpv4_update_time_stamp+0xa0>
		if (net_pkt_write_u8(reply, ptr)) {
 801aa06:	f88d 900c 	strb.w	r9, [sp, #12]
 801aa0a:	2201      	movs	r2, #1
 801aa0c:	a903      	add	r1, sp, #12
 801aa0e:	4620      	mov	r0, r4
 801aa10:	f7ff fed6 	bl	801a7c0 <net_pkt_write>
 801aa14:	2800      	cmp	r0, #0
 801aa16:	f040 80c2 	bne.w	801ab9e <icmpv4_update_time_stamp+0x1e6>
		flag = (overflow << 4U) | flag;
 801aa1a:	f047 0710 	orr.w	r7, r7, #16
		if (net_pkt_write_u8(reply, flag)) {
 801aa1e:	f88d 700c 	strb.w	r7, [sp, #12]
 801aa22:	2201      	movs	r2, #1
 801aa24:	a903      	add	r1, sp, #12
 801aa26:	4620      	mov	r0, r4
 801aa28:	f7ff feca 	bl	801a7c0 <net_pkt_write>
 801aa2c:	2800      	cmp	r0, #0
 801aa2e:	f040 80b9 	bne.w	801aba4 <icmpv4_update_time_stamp+0x1ec>
		len++;
 801aa32:	3604      	adds	r6, #4
 801aa34:	b2f6      	uxtb	r6, r6
		if (net_pkt_write(reply, opt_data + offset, opt_len)) {
 801aa36:	462a      	mov	r2, r5
 801aa38:	f108 0102 	add.w	r1, r8, #2
 801aa3c:	4620      	mov	r0, r4
 801aa3e:	f7ff febf 	bl	801a7c0 <net_pkt_write>
 801aa42:	4682      	mov	sl, r0
 801aa44:	2800      	cmp	r0, #0
 801aa46:	f040 80b0 	bne.w	801abaa <icmpv4_update_time_stamp+0x1f2>
		len += opt_len;
 801aa4a:	442e      	add	r6, r5
	pkt->ipv4_opts_len = opts_len;
 801aa4c:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
}
 801aa50:	4650      	mov	r0, sl
 801aa52:	b005      	add	sp, #20
 801aa54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (flag) {
 801aa58:	b377      	cbz	r7, 801aab8 <icmpv4_update_time_stamp+0x100>
 801aa5a:	2f01      	cmp	r7, #1
 801aa5c:	f040 80a8 	bne.w	801abb0 <icmpv4_update_time_stamp+0x1f8>
		new_entry_len = addr_len + sizeof(uint32_t);
 801aa60:	2308      	movs	r3, #8
	if (net_pkt_write_u8(reply, ptr + new_entry_len)) {
 801aa62:	444b      	add	r3, r9
 801aa64:	f88d 300c 	strb.w	r3, [sp, #12]
	return net_pkt_write(pkt, &data, sizeof(uint8_t));
 801aa68:	2201      	movs	r2, #1
 801aa6a:	a903      	add	r1, sp, #12
 801aa6c:	4620      	mov	r0, r4
 801aa6e:	f7ff fea7 	bl	801a7c0 <net_pkt_write>
 801aa72:	2800      	cmp	r0, #0
 801aa74:	f040 809f 	bne.w	801abb6 <icmpv4_update_time_stamp+0x1fe>
	if (net_pkt_write_u8(reply, (overflow << 4) | flag)) {
 801aa78:	f88d 700c 	strb.w	r7, [sp, #12]
 801aa7c:	2201      	movs	r2, #1
 801aa7e:	a903      	add	r1, sp, #12
 801aa80:	4620      	mov	r0, r4
 801aa82:	f7ff fe9d 	bl	801a7c0 <net_pkt_write>
 801aa86:	4682      	mov	sl, r0
 801aa88:	2800      	cmp	r0, #0
 801aa8a:	f040 8097 	bne.w	801abbc <icmpv4_update_time_stamp+0x204>
	len++;
 801aa8e:	3604      	adds	r6, #4
 801aa90:	b2f6      	uxtb	r6, r6
	skip = ptr - ptr_offset;
 801aa92:	f1a9 0b05 	sub.w	fp, r9, #5
	if (skip) {
 801aa96:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
 801aa9a:	d10f      	bne.n	801aabc <icmpv4_update_time_stamp+0x104>
	flag = opt_data[offset++];
 801aa9c:	f04f 0902 	mov.w	r9, #2
	switch (flag) {
 801aaa0:	b1df      	cbz	r7, 801aada <icmpv4_update_time_stamp+0x122>
 801aaa2:	2f01      	cmp	r7, #1
 801aaa4:	d03e      	beq.n	801ab24 <icmpv4_update_time_stamp+0x16c>
	if (opt_len > offset) {
 801aaa6:	45a9      	cmp	r9, r5
 801aaa8:	d367      	bcc.n	801ab7a <icmpv4_update_time_stamp+0x1c2>
	len += opt_len - offset;
 801aaaa:	eba5 0509 	sub.w	r5, r5, r9
 801aaae:	fa56 f685 	uxtab	r6, r6, r5
	pkt->ipv4_opts_len = opts_len;
 801aab2:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
	return 0;
 801aab6:	e7cb      	b.n	801aa50 <icmpv4_update_time_stamp+0x98>
	switch (flag) {
 801aab8:	2304      	movs	r3, #4
 801aaba:	e7d2      	b.n	801aa62 <icmpv4_update_time_stamp+0xaa>
		if (net_pkt_write(reply, opt_data + offset, skip)) {
 801aabc:	465a      	mov	r2, fp
 801aabe:	f108 0102 	add.w	r1, r8, #2
 801aac2:	4620      	mov	r0, r4
 801aac4:	f7ff fe7c 	bl	801a7c0 <net_pkt_write>
 801aac8:	2800      	cmp	r0, #0
 801aaca:	d17a      	bne.n	801abc2 <icmpv4_update_time_stamp+0x20a>
		len += skip;
 801aacc:	445e      	add	r6, fp
 801aace:	b2f6      	uxtb	r6, r6
		offset += skip;
 801aad0:	f1a9 0903 	sub.w	r9, r9, #3
 801aad4:	fa5f f989 	uxtb.w	r9, r9
 801aad8:	e7e2      	b.n	801aaa0 <icmpv4_update_time_stamp+0xe8>
	return z_impl_k_uptime_ticks();
 801aada:	f001 fd95 	bl	801c608 <z_impl_k_uptime_ticks>
 801aade:	220a      	movs	r2, #10
 801aae0:	2300      	movs	r3, #0
 801aae2:	f7e6 f82b 	bl	8000b3c <__aeabi_uldivmod>
		if (net_pkt_write_be32(reply, htons(k_uptime_get_32()))) {
 801aae6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801aaea:	f001 fd8d 	bl	801c608 <z_impl_k_uptime_ticks>
 801aaee:	220a      	movs	r2, #10
 801aaf0:	2300      	movs	r3, #0
 801aaf2:	f7e6 f823 	bl	8000b3c <__aeabi_uldivmod>
 801aaf6:	0200      	lsls	r0, r0, #8
 801aaf8:	b280      	uxth	r0, r0
 801aafa:	4307      	orrs	r7, r0
	uint32_t data_be32 = htonl(data);
 801aafc:	023b      	lsls	r3, r7, #8
 801aafe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801ab02:	ea43 6707 	orr.w	r7, r3, r7, lsl #24
 801ab06:	9703      	str	r7, [sp, #12]
	return net_pkt_write(pkt, &data_be32, sizeof(uint32_t));
 801ab08:	2204      	movs	r2, #4
 801ab0a:	a903      	add	r1, sp, #12
 801ab0c:	4620      	mov	r0, r4
 801ab0e:	f7ff fe57 	bl	801a7c0 <net_pkt_write>
 801ab12:	2800      	cmp	r0, #0
 801ab14:	d158      	bne.n	801abc8 <icmpv4_update_time_stamp+0x210>
		len += sizeof(uint32_t);
 801ab16:	3604      	adds	r6, #4
 801ab18:	b2f6      	uxtb	r6, r6
		offset += sizeof(uint32_t);
 801ab1a:	f109 0904 	add.w	r9, r9, #4
 801ab1e:	fa5f f989 	uxtb.w	r9, r9
		break;
 801ab22:	e7c0      	b.n	801aaa6 <icmpv4_update_time_stamp+0xee>
		if (net_pkt_write(reply, (void *)src, addr_len)) {
 801ab24:	2204      	movs	r2, #4
 801ab26:	9901      	ldr	r1, [sp, #4]
 801ab28:	4620      	mov	r0, r4
 801ab2a:	f7ff fe49 	bl	801a7c0 <net_pkt_write>
 801ab2e:	2800      	cmp	r0, #0
 801ab30:	d14d      	bne.n	801abce <icmpv4_update_time_stamp+0x216>
 801ab32:	f001 fd69 	bl	801c608 <z_impl_k_uptime_ticks>
 801ab36:	220a      	movs	r2, #10
 801ab38:	2300      	movs	r3, #0
 801ab3a:	f7e5 ffff 	bl	8000b3c <__aeabi_uldivmod>
		if (net_pkt_write_be32(reply, htons(k_uptime_get_32()))) {
 801ab3e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801ab42:	f001 fd61 	bl	801c608 <z_impl_k_uptime_ticks>
 801ab46:	220a      	movs	r2, #10
 801ab48:	2300      	movs	r3, #0
 801ab4a:	f7e5 fff7 	bl	8000b3c <__aeabi_uldivmod>
 801ab4e:	0200      	lsls	r0, r0, #8
 801ab50:	b280      	uxth	r0, r0
 801ab52:	4307      	orrs	r7, r0
	uint32_t data_be32 = htonl(data);
 801ab54:	023b      	lsls	r3, r7, #8
 801ab56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801ab5a:	ea43 6707 	orr.w	r7, r3, r7, lsl #24
 801ab5e:	9703      	str	r7, [sp, #12]
	return net_pkt_write(pkt, &data_be32, sizeof(uint32_t));
 801ab60:	2204      	movs	r2, #4
 801ab62:	a903      	add	r1, sp, #12
 801ab64:	4620      	mov	r0, r4
 801ab66:	f7ff fe2b 	bl	801a7c0 <net_pkt_write>
 801ab6a:	bb98      	cbnz	r0, 801abd4 <icmpv4_update_time_stamp+0x21c>
		len += sizeof(uint32_t);
 801ab6c:	3608      	adds	r6, #8
 801ab6e:	b2f6      	uxtb	r6, r6
		offset += (addr_len + sizeof(uint32_t));
 801ab70:	f109 0908 	add.w	r9, r9, #8
 801ab74:	fa5f f989 	uxtb.w	r9, r9
		break;
 801ab78:	e795      	b.n	801aaa6 <icmpv4_update_time_stamp+0xee>
		if (net_pkt_write(reply, opt_data + offset, opt_len - offset)) {
 801ab7a:	eba5 0209 	sub.w	r2, r5, r9
 801ab7e:	eb08 0109 	add.w	r1, r8, r9
 801ab82:	4620      	mov	r0, r4
 801ab84:	f7ff fe1c 	bl	801a7c0 <net_pkt_write>
 801ab88:	2800      	cmp	r0, #0
 801ab8a:	d08e      	beq.n	801aaaa <icmpv4_update_time_stamp+0xf2>
	return -EINVAL;
 801ab8c:	f06f 0a15 	mvn.w	sl, #21
 801ab90:	e75e      	b.n	801aa50 <icmpv4_update_time_stamp+0x98>
 801ab92:	f06f 0a15 	mvn.w	sl, #21
 801ab96:	e75b      	b.n	801aa50 <icmpv4_update_time_stamp+0x98>
 801ab98:	f06f 0a15 	mvn.w	sl, #21
 801ab9c:	e758      	b.n	801aa50 <icmpv4_update_time_stamp+0x98>
 801ab9e:	f06f 0a15 	mvn.w	sl, #21
 801aba2:	e755      	b.n	801aa50 <icmpv4_update_time_stamp+0x98>
 801aba4:	f06f 0a15 	mvn.w	sl, #21
 801aba8:	e752      	b.n	801aa50 <icmpv4_update_time_stamp+0x98>
 801abaa:	f06f 0a15 	mvn.w	sl, #21
 801abae:	e74f      	b.n	801aa50 <icmpv4_update_time_stamp+0x98>
	switch (flag) {
 801abb0:	f06f 0a15 	mvn.w	sl, #21
 801abb4:	e74c      	b.n	801aa50 <icmpv4_update_time_stamp+0x98>
	return -EINVAL;
 801abb6:	f06f 0a15 	mvn.w	sl, #21
 801abba:	e749      	b.n	801aa50 <icmpv4_update_time_stamp+0x98>
 801abbc:	f06f 0a15 	mvn.w	sl, #21
 801abc0:	e746      	b.n	801aa50 <icmpv4_update_time_stamp+0x98>
 801abc2:	f06f 0a15 	mvn.w	sl, #21
 801abc6:	e743      	b.n	801aa50 <icmpv4_update_time_stamp+0x98>
 801abc8:	f06f 0a15 	mvn.w	sl, #21
 801abcc:	e740      	b.n	801aa50 <icmpv4_update_time_stamp+0x98>
 801abce:	f06f 0a15 	mvn.w	sl, #21
 801abd2:	e73d      	b.n	801aa50 <icmpv4_update_time_stamp+0x98>
 801abd4:	f06f 0a15 	mvn.w	sl, #21
 801abd8:	e73a      	b.n	801aa50 <icmpv4_update_time_stamp+0x98>

0801abda <icmpv4_reply_to_options>:
{
 801abda:	b538      	push	{r3, r4, r5, lr}
 801abdc:	4604      	mov	r4, r0
 801abde:	4608      	mov	r0, r1
 801abe0:	4611      	mov	r1, r2
 801abe2:	461d      	mov	r5, r3
	if (opt_type == NET_IPV4_OPTS_RR) {
 801abe4:	2c07      	cmp	r4, #7
 801abe6:	d003      	beq.n	801abf0 <icmpv4_reply_to_options+0x16>
	} else if (opt_type == NET_IPV4_OPTS_TS) {
 801abe8:	2c44      	cmp	r4, #68	; 0x44
 801abea:	d006      	beq.n	801abfa <icmpv4_reply_to_options+0x20>
	return 0;
 801abec:	2000      	movs	r0, #0
}
 801abee:	bd38      	pop	{r3, r4, r5, pc}
		return icmpv4_update_record_route(opt_data, opt_len,
 801abf0:	685b      	ldr	r3, [r3, #4]
 801abf2:	682a      	ldr	r2, [r5, #0]
 801abf4:	f7ff fe4b 	bl	801a88e <icmpv4_update_record_route>
 801abf8:	e7f9      	b.n	801abee <icmpv4_reply_to_options+0x14>
		return icmpv4_update_time_stamp(opt_data, opt_len,
 801abfa:	685b      	ldr	r3, [r3, #4]
 801abfc:	682a      	ldr	r2, [r5, #0]
 801abfe:	f7ff fedb 	bl	801a9b8 <icmpv4_update_time_stamp>
 801ac02:	e7f4      	b.n	801abee <icmpv4_reply_to_options+0x14>

0801ac04 <net_icmpv4_finalize>:
{
 801ac04:	b530      	push	{r4, r5, lr}
 801ac06:	b083      	sub	sp, #12
 801ac08:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmpv4_access,
 801ac0a:	2300      	movs	r3, #0
 801ac0c:	9300      	str	r3, [sp, #0]
 801ac0e:	2304      	movs	r3, #4
 801ac10:	9301      	str	r3, [sp, #4]
		if (net_pkt_skip(pkt, net_pkt_ipv4_opts_len(pkt))) {
 801ac12:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
 801ac16:	f7ff fc96 	bl	801a546 <net_pkt_skip>
 801ac1a:	b980      	cbnz	r0, 801ac3e <net_icmpv4_finalize+0x3a>
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmpv4_access);
 801ac1c:	4669      	mov	r1, sp
 801ac1e:	4620      	mov	r0, r4
 801ac20:	f7f4 ffd4 	bl	800fbcc <net_pkt_get_data>
	if (!icmp_hdr) {
 801ac24:	4605      	mov	r5, r0
 801ac26:	b168      	cbz	r0, 801ac44 <net_icmpv4_finalize+0x40>
	return net_calc_chksum(pkt, IPPROTO_ICMP);
 801ac28:	2101      	movs	r1, #1
 801ac2a:	4620      	mov	r0, r4
 801ac2c:	f7ff f921 	bl	8019e72 <net_calc_chksum>
	icmp_hdr->chksum = net_calc_chksum_icmpv4(pkt);
 801ac30:	8068      	strh	r0, [r5, #2]
	return net_pkt_set_data(pkt, &icmpv4_access);
 801ac32:	4669      	mov	r1, sp
 801ac34:	4620      	mov	r0, r4
 801ac36:	f7ff fdde 	bl	801a7f6 <net_pkt_set_data>
}
 801ac3a:	b003      	add	sp, #12
 801ac3c:	bd30      	pop	{r4, r5, pc}
			return -ENOBUFS;
 801ac3e:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801ac42:	e7fa      	b.n	801ac3a <net_icmpv4_finalize+0x36>
		return -ENOBUFS;
 801ac44:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801ac48:	e7f7      	b.n	801ac3a <net_icmpv4_finalize+0x36>

0801ac4a <net_ipv4_create_full>:
{
 801ac4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac4e:	b083      	sub	sp, #12
 801ac50:	4605      	mov	r5, r0
 801ac52:	460e      	mov	r6, r1
 801ac54:	4617      	mov	r7, r2
 801ac56:	4698      	mov	r8, r3
 801ac58:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
 801ac5c:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801ac60:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 801ac64:	2300      	movs	r3, #0
 801ac66:	9300      	str	r3, [sp, #0]
 801ac68:	2314      	movs	r3, #20
 801ac6a:	9301      	str	r3, [sp, #4]
	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
 801ac6c:	4669      	mov	r1, sp
 801ac6e:	f7f4 ffad 	bl	800fbcc <net_pkt_get_data>
	if (!ipv4_hdr) {
 801ac72:	b388      	cbz	r0, 801acd8 <net_ipv4_create_full+0x8e>
 801ac74:	4604      	mov	r4, r0
	ipv4_hdr->vhl       = 0x45;
 801ac76:	2345      	movs	r3, #69	; 0x45
 801ac78:	7003      	strb	r3, [r0, #0]
	ipv4_hdr->tos       = tos;
 801ac7a:	f880 8001 	strb.w	r8, [r0, #1]
	ipv4_hdr->len       = 0U;
 801ac7e:	2300      	movs	r3, #0
 801ac80:	7083      	strb	r3, [r0, #2]
 801ac82:	70c3      	strb	r3, [r0, #3]
	ipv4_hdr->id[0]     = id >> 8;
 801ac84:	ea4f 231b 	mov.w	r3, fp, lsr #8
 801ac88:	7103      	strb	r3, [r0, #4]
	ipv4_hdr->id[1]     = id;
 801ac8a:	f880 b005 	strb.w	fp, [r0, #5]
	ipv4_hdr->offset[0] = (offset >> 8) | (flags << 5);
 801ac8e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ac92:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 801ac96:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 801ac9a:	7183      	strb	r3, [r0, #6]
	ipv4_hdr->offset[1] = offset;
 801ac9c:	f880 a007 	strb.w	sl, [r0, #7]
	ipv4_hdr->ttl       = ttl;
 801aca0:	f880 9008 	strb.w	r9, [r0, #8]
	if (ttl == 0U) {
 801aca4:	f1b9 0f00 	cmp.w	r9, #0
 801aca8:	d011      	beq.n	801acce <net_ipv4_create_full+0x84>
	ipv4_hdr->proto     = 0U;
 801acaa:	2300      	movs	r3, #0
 801acac:	7263      	strb	r3, [r4, #9]
	ipv4_hdr->chksum    = 0U;
 801acae:	72a3      	strb	r3, [r4, #10]
 801acb0:	72e3      	strb	r3, [r4, #11]
	net_ipaddr_copy((struct in_addr *)dest, (const struct in_addr *)src);
 801acb2:	683b      	ldr	r3, [r7, #0]
 801acb4:	6123      	str	r3, [r4, #16]
 801acb6:	6833      	ldr	r3, [r6, #0]
 801acb8:	60e3      	str	r3, [r4, #12]
	pkt->ip_hdr_len = len;
 801acba:	2314      	movs	r3, #20
 801acbc:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	return net_pkt_set_data(pkt, &ipv4_access);
 801acc0:	4669      	mov	r1, sp
 801acc2:	4628      	mov	r0, r5
 801acc4:	f7ff fd97 	bl	801a7f6 <net_pkt_set_data>
}
 801acc8:	b003      	add	sp, #12
 801acca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ipv4_hdr->ttl = net_if_ipv4_get_ttl(net_pkt_iface(pkt));
 801acce:	69a8      	ldr	r0, [r5, #24]
 801acd0:	f7f3 fe64 	bl	800e99c <net_if_ipv4_get_ttl>
 801acd4:	7220      	strb	r0, [r4, #8]
 801acd6:	e7e8      	b.n	801acaa <net_ipv4_create_full+0x60>
		return -ENOBUFS;
 801acd8:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801acdc:	e7f4      	b.n	801acc8 <net_ipv4_create_full+0x7e>

0801acde <net_ipv4_create>:
{
 801acde:	b500      	push	{lr}
 801ace0:	b085      	sub	sp, #20
	return pkt->ipv4_ttl;
 801ace2:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	return net_ipv4_create_full(pkt, src, dst, 0U, 0U, 0U, 0U,
 801ace6:	9303      	str	r3, [sp, #12]
 801ace8:	2300      	movs	r3, #0
 801acea:	9302      	str	r3, [sp, #8]
 801acec:	9301      	str	r3, [sp, #4]
 801acee:	9300      	str	r3, [sp, #0]
 801acf0:	f7ff ffab 	bl	801ac4a <net_ipv4_create_full>
}
 801acf4:	b005      	add	sp, #20
 801acf6:	f85d fb04 	ldr.w	pc, [sp], #4

0801acfa <net_ipv4_finalize>:
{
 801acfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801acfc:	b083      	sub	sp, #12
 801acfe:	4605      	mov	r5, r0
 801ad00:	460e      	mov	r6, r1
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv4_access, struct net_ipv4_hdr);
 801ad02:	2300      	movs	r3, #0
 801ad04:	9300      	str	r3, [sp, #0]
 801ad06:	2314      	movs	r3, #20
 801ad08:	9301      	str	r3, [sp, #4]
	pkt->overwrite = overwrite;
 801ad0a:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 801ad0e:	f043 0301 	orr.w	r3, r3, #1
 801ad12:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
	ipv4_hdr = (struct net_ipv4_hdr *)net_pkt_get_data(pkt, &ipv4_access);
 801ad16:	4669      	mov	r1, sp
 801ad18:	f7f4 ff58 	bl	800fbcc <net_pkt_get_data>
	if (!ipv4_hdr) {
 801ad1c:	2800      	cmp	r0, #0
 801ad1e:	d042      	beq.n	801ada6 <net_ipv4_finalize+0xac>
 801ad20:	4607      	mov	r7, r0
	return pkt->ipv4_opts_len;
 801ad22:	f895 2050 	ldrb.w	r2, [r5, #80]	; 0x50
		if (net_pkt_ipv4_opts_len(pkt)) {
 801ad26:	b13a      	cbz	r2, 801ad38 <net_ipv4_finalize+0x3e>
	return pkt->ip_hdr_len;
 801ad28:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
					((net_pkt_ip_hdr_len(pkt) +
 801ad2c:	4413      	add	r3, r2
			ipv4_hdr->vhl = 0x40 | (0x0F &
 801ad2e:	f3c3 0383 	ubfx	r3, r3, #2, #4
 801ad32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ad36:	7003      	strb	r3, [r0, #0]
	return net_buf_frags_len(pkt->frags);
 801ad38:	68ab      	ldr	r3, [r5, #8]
 801ad3a:	461a      	mov	r2, r3
	size_t bytes = 0;
 801ad3c:	2400      	movs	r4, #0
	while (buf) {
 801ad3e:	b11a      	cbz	r2, 801ad48 <net_ipv4_finalize+0x4e>
		bytes += buf->len;
 801ad40:	8991      	ldrh	r1, [r2, #12]
 801ad42:	440c      	add	r4, r1
		buf = buf->frags;
 801ad44:	6812      	ldr	r2, [r2, #0]
 801ad46:	e7fa      	b.n	801ad3e <net_ipv4_finalize+0x44>
	ipv4_hdr->len   = htons(net_pkt_get_len(pkt));
 801ad48:	f3c4 2407 	ubfx	r4, r4, #8, #8
	while (buf) {
 801ad4c:	e002      	b.n	801ad54 <net_ipv4_finalize+0x5a>
		bytes += buf->len;
 801ad4e:	8999      	ldrh	r1, [r3, #12]
 801ad50:	440a      	add	r2, r1
		buf = buf->frags;
 801ad52:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	d1fa      	bne.n	801ad4e <net_ipv4_finalize+0x54>
 801ad58:	0212      	lsls	r2, r2, #8
 801ad5a:	b292      	uxth	r2, r2
 801ad5c:	4314      	orrs	r4, r2
 801ad5e:	807c      	strh	r4, [r7, #2]
	ipv4_hdr->proto = next_header_proto;
 801ad60:	727e      	strb	r6, [r7, #9]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
 801ad62:	69a8      	ldr	r0, [r5, #24]
 801ad64:	f7fe fdfd 	bl	8019962 <net_if_need_calc_tx_checksum>
 801ad68:	b960      	cbnz	r0, 801ad84 <net_ipv4_finalize+0x8a>
	net_pkt_set_data(pkt, &ipv4_access);
 801ad6a:	4669      	mov	r1, sp
 801ad6c:	4628      	mov	r0, r5
 801ad6e:	f7ff fd42 	bl	801a7f6 <net_pkt_set_data>
	if (IS_ENABLED(CONFIG_NET_UDP) &&
 801ad72:	2e11      	cmp	r6, #17
 801ad74:	d00b      	beq.n	801ad8e <net_ipv4_finalize+0x94>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
 801ad76:	2e06      	cmp	r6, #6
 801ad78:	d00d      	beq.n	801ad96 <net_ipv4_finalize+0x9c>
	} else if (next_header_proto == IPPROTO_ICMP) {
 801ad7a:	2e01      	cmp	r6, #1
 801ad7c:	d00f      	beq.n	801ad9e <net_ipv4_finalize+0xa4>
	return 0;
 801ad7e:	2000      	movs	r0, #0
}
 801ad80:	b003      	add	sp, #12
 801ad82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ipv4_hdr->chksum = net_calc_chksum_ipv4(pkt);
 801ad84:	4628      	mov	r0, r5
 801ad86:	f7ff f911 	bl	8019fac <net_calc_chksum_ipv4>
 801ad8a:	8178      	strh	r0, [r7, #10]
 801ad8c:	e7ed      	b.n	801ad6a <net_ipv4_finalize+0x70>
		return net_udp_finalize(pkt);
 801ad8e:	4628      	mov	r0, r5
 801ad90:	f000 fd0c 	bl	801b7ac <net_udp_finalize>
 801ad94:	e7f4      	b.n	801ad80 <net_ipv4_finalize+0x86>
		return net_tcp_finalize(pkt);
 801ad96:	4628      	mov	r0, r5
 801ad98:	f000 fce6 	bl	801b768 <net_tcp_finalize>
 801ad9c:	e7f0      	b.n	801ad80 <net_ipv4_finalize+0x86>
		return net_icmpv4_finalize(pkt);
 801ad9e:	4628      	mov	r0, r5
 801ada0:	f7ff ff30 	bl	801ac04 <net_icmpv4_finalize>
 801ada4:	e7ec      	b.n	801ad80 <net_ipv4_finalize+0x86>
		return -ENOBUFS;
 801ada6:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801adaa:	e7e9      	b.n	801ad80 <net_ipv4_finalize+0x86>

0801adac <net_ipv4_parse_hdr_options>:
{
 801adac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adb0:	b08d      	sub	sp, #52	; 0x34
	if (!cb) {
 801adb2:	2900      	cmp	r1, #0
 801adb4:	d06a      	beq.n	801ae8c <net_ipv4_parse_hdr_options+0xe0>
 801adb6:	4605      	mov	r5, r0
 801adb8:	4693      	mov	fp, r2
 801adba:	460f      	mov	r7, r1
	backup->buf = pkt->cursor.buf;
 801adbc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	backup->pos = pkt->cursor.pos;
 801adc0:	f8d0 9010 	ldr.w	r9, [r0, #16]
	net_pkt_cursor_init(pkt);
 801adc4:	f7ff fb49 	bl	801a45a <net_pkt_cursor_init>
	if (net_pkt_skip(pkt, sizeof(struct net_ipv4_hdr))) {
 801adc8:	2114      	movs	r1, #20
 801adca:	4628      	mov	r0, r5
 801adcc:	f7ff fbbb 	bl	801a546 <net_pkt_skip>
 801add0:	4680      	mov	r8, r0
 801add2:	2800      	cmp	r0, #0
 801add4:	d15d      	bne.n	801ae92 <net_ipv4_parse_hdr_options+0xe6>
	return pkt->ipv4_opts_len;
 801add6:	f895 6050 	ldrb.w	r6, [r5, #80]	; 0x50
	while (total_opts_len) {
 801adda:	e02e      	b.n	801ae3a <net_ipv4_parse_hdr_options+0x8e>
	return net_pkt_read(pkt, data, 1);
 801addc:	2201      	movs	r2, #1
 801adde:	f10d 0106 	add.w	r1, sp, #6
 801ade2:	4628      	mov	r0, r5
 801ade4:	f7ff fbc7 	bl	801a576 <net_pkt_read>
			if (net_pkt_read_u8(pkt, &opt_len)) {
 801ade8:	2800      	cmp	r0, #0
 801adea:	d144      	bne.n	801ae76 <net_ipv4_parse_hdr_options+0xca>
			if (opt_len < 2U || total_opts_len < 1U) {
 801adec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801adf0:	2b01      	cmp	r3, #1
 801adf2:	d940      	bls.n	801ae76 <net_ipv4_parse_hdr_options+0xca>
 801adf4:	2c00      	cmp	r4, #0
 801adf6:	d03e      	beq.n	801ae76 <net_ipv4_parse_hdr_options+0xca>
			opt_len -= 2U;
 801adf8:	3b02      	subs	r3, #2
 801adfa:	f88d 3006 	strb.w	r3, [sp, #6]
			total_opts_len--;
 801adfe:	1eb4      	subs	r4, r6, #2
 801ae00:	b2e4      	uxtb	r4, r4
 801ae02:	e02b      	b.n	801ae5c <net_ipv4_parse_hdr_options+0xb0>
		switch (opt_type) {
 801ae04:	2b07      	cmp	r3, #7
 801ae06:	d001      	beq.n	801ae0c <net_ipv4_parse_hdr_options+0x60>
 801ae08:	2b44      	cmp	r3, #68	; 0x44
 801ae0a:	d10d      	bne.n	801ae28 <net_ipv4_parse_hdr_options+0x7c>
			if (net_pkt_read(pkt, opt_data, opt_len)) {
 801ae0c:	a902      	add	r1, sp, #8
 801ae0e:	4628      	mov	r0, r5
 801ae10:	f7ff fbb1 	bl	801a576 <net_pkt_read>
 801ae14:	bb78      	cbnz	r0, 801ae76 <net_ipv4_parse_hdr_options+0xca>
			if (cb(opt_type, opt_data, opt_len, user_data)) {
 801ae16:	465b      	mov	r3, fp
 801ae18:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801ae1c:	a902      	add	r1, sp, #8
 801ae1e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801ae22:	47b8      	blx	r7
 801ae24:	b128      	cbz	r0, 801ae32 <net_ipv4_parse_hdr_options+0x86>
 801ae26:	e026      	b.n	801ae76 <net_ipv4_parse_hdr_options+0xca>
			if (net_pkt_skip(pkt, opt_len)) {
 801ae28:	4611      	mov	r1, r2
 801ae2a:	4628      	mov	r0, r5
 801ae2c:	f7ff fb8b 	bl	801a546 <net_pkt_skip>
 801ae30:	bb08      	cbnz	r0, 801ae76 <net_ipv4_parse_hdr_options+0xca>
		total_opts_len -= opt_len;
 801ae32:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801ae36:	1ae4      	subs	r4, r4, r3
 801ae38:	b2e6      	uxtb	r6, r4
	while (total_opts_len) {
 801ae3a:	b316      	cbz	r6, 801ae82 <net_ipv4_parse_hdr_options+0xd6>
		uint8_t opt_len = 0U;
 801ae3c:	2300      	movs	r3, #0
 801ae3e:	f88d 3006 	strb.w	r3, [sp, #6]
 801ae42:	2201      	movs	r2, #1
 801ae44:	f10d 0107 	add.w	r1, sp, #7
 801ae48:	4628      	mov	r0, r5
 801ae4a:	f7ff fb94 	bl	801a576 <net_pkt_read>
		if (net_pkt_read_u8(pkt, &opt_type)) {
 801ae4e:	b990      	cbnz	r0, 801ae76 <net_ipv4_parse_hdr_options+0xca>
		total_opts_len--;
 801ae50:	1e74      	subs	r4, r6, #1
 801ae52:	b2e4      	uxtb	r4, r4
		if (!(opt_type == NET_IPV4_OPTS_EO ||
 801ae54:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801ae58:	2b01      	cmp	r3, #1
 801ae5a:	d8bf      	bhi.n	801addc <net_ipv4_parse_hdr_options+0x30>
		if (opt_len > total_opts_len) {
 801ae5c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801ae60:	42a2      	cmp	r2, r4
 801ae62:	d808      	bhi.n	801ae76 <net_ipv4_parse_hdr_options+0xca>
		switch (opt_type) {
 801ae64:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801ae68:	2b01      	cmp	r3, #1
 801ae6a:	d0e2      	beq.n	801ae32 <net_ipv4_parse_hdr_options+0x86>
 801ae6c:	d8ca      	bhi.n	801ae04 <net_ipv4_parse_hdr_options+0x58>
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	d1da      	bne.n	801ae28 <net_ipv4_parse_hdr_options+0x7c>
			if (total_opts_len) {
 801ae72:	2c00      	cmp	r4, #0
 801ae74:	d0dd      	beq.n	801ae32 <net_ipv4_parse_hdr_options+0x86>
			return -EINVAL;
 801ae76:	f06f 0815 	mvn.w	r8, #21
}
 801ae7a:	4640      	mov	r0, r8
 801ae7c:	b00d      	add	sp, #52	; 0x34
 801ae7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pkt->cursor.buf = backup->buf;
 801ae82:	f8c5 a00c 	str.w	sl, [r5, #12]
	pkt->cursor.pos = backup->pos;
 801ae86:	f8c5 9010 	str.w	r9, [r5, #16]
	return 0;
 801ae8a:	e7f6      	b.n	801ae7a <net_ipv4_parse_hdr_options+0xce>
		return -EINVAL;
 801ae8c:	f06f 0815 	mvn.w	r8, #21
 801ae90:	e7f3      	b.n	801ae7a <net_ipv4_parse_hdr_options+0xce>
		return -EINVAL;
 801ae92:	f06f 0815 	mvn.w	r8, #21
 801ae96:	e7f0      	b.n	801ae7a <net_ipv4_parse_hdr_options+0xce>

0801ae98 <igmp_v2_create>:
{
 801ae98:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae9a:	b085      	sub	sp, #20
 801ae9c:	4605      	mov	r5, r0
 801ae9e:	460e      	mov	r6, r1
 801aea0:	4617      	mov	r7, r2
	NET_PKT_DATA_ACCESS_DEFINE(igmp_access,
 801aea2:	ab02      	add	r3, sp, #8
 801aea4:	9300      	str	r3, [sp, #0]
 801aea6:	2308      	movs	r3, #8
 801aea8:	9301      	str	r3, [sp, #4]
				net_pkt_get_data(pkt, &igmp_access);
 801aeaa:	4669      	mov	r1, sp
 801aeac:	f7f4 fe8e 	bl	800fbcc <net_pkt_get_data>
	if (!igmp) {
 801aeb0:	b190      	cbz	r0, 801aed8 <igmp_v2_create+0x40>
 801aeb2:	4604      	mov	r4, r0
	igmp->type = type;
 801aeb4:	7007      	strb	r7, [r0, #0]
	igmp->max_rsp = 0U;
 801aeb6:	2300      	movs	r3, #0
 801aeb8:	7043      	strb	r3, [r0, #1]
	net_ipaddr_copy(&igmp->address, addr);
 801aeba:	6832      	ldr	r2, [r6, #0]
 801aebc:	6042      	str	r2, [r0, #4]
	igmp->chksum = 0;
 801aebe:	7083      	strb	r3, [r0, #2]
 801aec0:	70c3      	strb	r3, [r0, #3]
	igmp->chksum = net_calc_chksum_igmp((uint8_t *)igmp, sizeof(*igmp));
 801aec2:	2108      	movs	r1, #8
 801aec4:	f7ff f889 	bl	8019fda <net_calc_chksum_igmp>
 801aec8:	8060      	strh	r0, [r4, #2]
	if (net_pkt_set_data(pkt, &igmp_access)) {
 801aeca:	4669      	mov	r1, sp
 801aecc:	4628      	mov	r0, r5
 801aece:	f7ff fc92 	bl	801a7f6 <net_pkt_set_data>
 801aed2:	b920      	cbnz	r0, 801aede <igmp_v2_create+0x46>
}
 801aed4:	b005      	add	sp, #20
 801aed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
 801aed8:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801aedc:	e7fa      	b.n	801aed4 <igmp_v2_create+0x3c>
		return -ENOBUFS;
 801aede:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801aee2:	e7f7      	b.n	801aed4 <igmp_v2_create+0x3c>

0801aee4 <igmp_v2_create_packet>:
{
 801aee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aee6:	b087      	sub	sp, #28
 801aee8:	4604      	mov	r4, r0
 801aeea:	460d      	mov	r5, r1
 801aeec:	4616      	mov	r6, r2
 801aeee:	461f      	mov	r7, r3
	ret = net_ipv4_create_full(pkt,
 801aef0:	6980      	ldr	r0, [r0, #24]
 801aef2:	f7f3 fdd1 	bl	800ea98 <net_if_ipv4_select_src_addr>
 801aef6:	4601      	mov	r1, r0
 801aef8:	2201      	movs	r2, #1
 801aefa:	9203      	str	r2, [sp, #12]
 801aefc:	2300      	movs	r3, #0
 801aefe:	9302      	str	r3, [sp, #8]
 801af00:	9301      	str	r3, [sp, #4]
 801af02:	9300      	str	r3, [sp, #0]
 801af04:	462a      	mov	r2, r5
 801af06:	4620      	mov	r0, r4
 801af08:	f7ff fe9f 	bl	801ac4a <net_ipv4_create_full>
	if (ret) {
 801af0c:	b990      	cbnz	r0, 801af34 <igmp_v2_create_packet+0x50>
	uint32_t data_be32 = htonl(data);
 801af0e:	f240 4394 	movw	r3, #1172	; 0x494
 801af12:	9305      	str	r3, [sp, #20]
	return net_pkt_write(pkt, &data_be32, sizeof(uint32_t));
 801af14:	2204      	movs	r2, #4
 801af16:	a905      	add	r1, sp, #20
 801af18:	4620      	mov	r0, r4
 801af1a:	f7ff fc51 	bl	801a7c0 <net_pkt_write>
	if (net_pkt_write_be32(pkt, router_alert)) {
 801af1e:	b960      	cbnz	r0, 801af3a <igmp_v2_create_packet+0x56>
	pkt->ipv4_opts_len = opts_len;
 801af20:	2304      	movs	r3, #4
 801af22:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	return igmp_v2_create(pkt, group, type);
 801af26:	463a      	mov	r2, r7
 801af28:	4631      	mov	r1, r6
 801af2a:	4620      	mov	r0, r4
 801af2c:	f7ff ffb4 	bl	801ae98 <igmp_v2_create>
}
 801af30:	b007      	add	sp, #28
 801af32:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
 801af34:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801af38:	e7fa      	b.n	801af30 <igmp_v2_create_packet+0x4c>
		return -ENOBUFS;
 801af3a:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801af3e:	e7f7      	b.n	801af30 <igmp_v2_create_packet+0x4c>

0801af40 <net_icmpv6_finalize>:
{
 801af40:	b530      	push	{r4, r5, lr}
 801af42:	b083      	sub	sp, #12
 801af44:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 801af46:	2300      	movs	r3, #0
 801af48:	9300      	str	r3, [sp, #0]
 801af4a:	2304      	movs	r3, #4
 801af4c:	9301      	str	r3, [sp, #4]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 801af4e:	4669      	mov	r1, sp
 801af50:	f7f4 fe3c 	bl	800fbcc <net_pkt_get_data>
	if (!icmp_hdr) {
 801af54:	b158      	cbz	r0, 801af6e <net_icmpv6_finalize+0x2e>
 801af56:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
 801af58:	213a      	movs	r1, #58	; 0x3a
 801af5a:	4620      	mov	r0, r4
 801af5c:	f7fe ff89 	bl	8019e72 <net_calc_chksum>
	icmp_hdr->chksum = net_calc_chksum_icmpv6(pkt);
 801af60:	8068      	strh	r0, [r5, #2]
	return net_pkt_set_data(pkt, &icmp_access);
 801af62:	4669      	mov	r1, sp
 801af64:	4620      	mov	r0, r4
 801af66:	f7ff fc46 	bl	801a7f6 <net_pkt_set_data>
}
 801af6a:	b003      	add	sp, #12
 801af6c:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
 801af6e:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801af72:	e7fa      	b.n	801af6a <net_icmpv6_finalize+0x2a>

0801af74 <net_icmpv6_create>:
{
 801af74:	b570      	push	{r4, r5, r6, lr}
 801af76:	b082      	sub	sp, #8
 801af78:	4604      	mov	r4, r0
 801af7a:	460e      	mov	r6, r1
 801af7c:	4615      	mov	r5, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(icmp_access,
 801af7e:	2300      	movs	r3, #0
 801af80:	9300      	str	r3, [sp, #0]
 801af82:	2304      	movs	r3, #4
 801af84:	9301      	str	r3, [sp, #4]
	icmp_hdr = (struct net_icmp_hdr *)net_pkt_get_data(pkt, &icmp_access);
 801af86:	4669      	mov	r1, sp
 801af88:	f7f4 fe20 	bl	800fbcc <net_pkt_get_data>
	if (!icmp_hdr) {
 801af8c:	b150      	cbz	r0, 801afa4 <net_icmpv6_create+0x30>
	icmp_hdr->type   = icmp_type;
 801af8e:	7006      	strb	r6, [r0, #0]
	icmp_hdr->code   = icmp_code;
 801af90:	7045      	strb	r5, [r0, #1]
	icmp_hdr->chksum = 0U;
 801af92:	2200      	movs	r2, #0
 801af94:	7082      	strb	r2, [r0, #2]
 801af96:	70c2      	strb	r2, [r0, #3]
	return net_pkt_set_data(pkt, &icmp_access);
 801af98:	4669      	mov	r1, sp
 801af9a:	4620      	mov	r0, r4
 801af9c:	f7ff fc2b 	bl	801a7f6 <net_pkt_set_data>
}
 801afa0:	b002      	add	sp, #8
 801afa2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
 801afa4:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801afa8:	e7fa      	b.n	801afa0 <net_icmpv6_create+0x2c>

0801afaa <net_nbr_unref>:
{
 801afaa:	b508      	push	{r3, lr}
	if (--nbr->ref) {
 801afac:	7803      	ldrb	r3, [r0, #0]
 801afae:	3b01      	subs	r3, #1
 801afb0:	b2db      	uxtb	r3, r3
 801afb2:	7003      	strb	r3, [r0, #0]
 801afb4:	b913      	cbnz	r3, 801afbc <net_nbr_unref+0x12>
	if (nbr->remove) {
 801afb6:	6903      	ldr	r3, [r0, #16]
 801afb8:	b103      	cbz	r3, 801afbc <net_nbr_unref+0x12>
		nbr->remove(nbr);
 801afba:	4798      	blx	r3
}
 801afbc:	bd08      	pop	{r3, pc}

0801afbe <net_nbr_ref>:
	nbr->ref++;
 801afbe:	7802      	ldrb	r2, [r0, #0]
 801afc0:	3201      	adds	r2, #1
 801afc2:	7002      	strb	r2, [r0, #0]
}
 801afc4:	4770      	bx	lr

0801afc6 <net_nbr_get>:
{
 801afc6:	b510      	push	{r4, lr}
 801afc8:	4604      	mov	r4, r0
	for (i = 0; i < table->nbr_count; i++) {
 801afca:	2100      	movs	r1, #0
 801afcc:	8923      	ldrh	r3, [r4, #8]
 801afce:	428b      	cmp	r3, r1
 801afd0:	dd11      	ble.n	801aff6 <net_nbr_get+0x30>
		struct net_nbr *nbr = get_nbr(table->nbr, i);
 801afd2:	6822      	ldr	r2, [r4, #0]
			  start->size + start->extra_data_size) * idx));
 801afd4:	8853      	ldrh	r3, [r2, #2]
 801afd6:	8890      	ldrh	r0, [r2, #4]
 801afd8:	4403      	add	r3, r0
 801afda:	3314      	adds	r3, #20
 801afdc:	fb03 f301 	mul.w	r3, r3, r1
	return (struct net_nbr *)((uint8_t *)start +
 801afe0:	18d0      	adds	r0, r2, r3
		if (!nbr->ref) {
 801afe2:	5cd3      	ldrb	r3, [r2, r3]
 801afe4:	b10b      	cbz	r3, 801afea <net_nbr_get+0x24>
	for (i = 0; i < table->nbr_count; i++) {
 801afe6:	3101      	adds	r1, #1
 801afe8:	e7f0      	b.n	801afcc <net_nbr_get+0x6>
			nbr->data = nbr->__nbr;
 801afea:	f100 0314 	add.w	r3, r0, #20
 801afee:	60c3      	str	r3, [r0, #12]
			return net_nbr_ref(nbr);
 801aff0:	f7ff ffe5 	bl	801afbe <net_nbr_ref>
 801aff4:	e000      	b.n	801aff8 <net_nbr_get+0x32>
	return NULL;
 801aff6:	2000      	movs	r0, #0
}
 801aff8:	bd10      	pop	{r4, pc}

0801affa <extension_to_bitmap>:
	switch (header) {
 801affa:	282c      	cmp	r0, #44	; 0x2c
 801affc:	d00c      	beq.n	801b018 <extension_to_bitmap+0x1e>
 801affe:	d804      	bhi.n	801b00a <extension_to_bitmap+0x10>
 801b000:	b160      	cbz	r0, 801b01c <extension_to_bitmap+0x22>
 801b002:	282b      	cmp	r0, #43	; 0x2b
 801b004:	d10c      	bne.n	801b020 <extension_to_bitmap+0x26>
		return NET_IPV6_EXT_HDR_BITMAP_ROUTING;
 801b006:	2004      	movs	r0, #4
 801b008:	4770      	bx	lr
	switch (header) {
 801b00a:	283c      	cmp	r0, #60	; 0x3c
 801b00c:	d10a      	bne.n	801b024 <extension_to_bitmap+0x2a>
		if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_DESTO1) {
 801b00e:	f011 0f02 	tst.w	r1, #2
 801b012:	d109      	bne.n	801b028 <extension_to_bitmap+0x2e>
		return NET_IPV6_EXT_HDR_BITMAP_DESTO1;
 801b014:	2002      	movs	r0, #2
 801b016:	4770      	bx	lr
		return NET_IPV6_EXT_HDR_BITMAP_FRAG;
 801b018:	2008      	movs	r0, #8
 801b01a:	4770      	bx	lr
	switch (header) {
 801b01c:	2001      	movs	r0, #1
 801b01e:	4770      	bx	lr
		return 0;
 801b020:	2000      	movs	r0, #0
 801b022:	4770      	bx	lr
 801b024:	2000      	movs	r0, #0
 801b026:	4770      	bx	lr
			return NET_IPV6_EXT_HDR_BITMAP_DESTO2;
 801b028:	2040      	movs	r0, #64	; 0x40
}
 801b02a:	4770      	bx	lr

0801b02c <ipv6_route_packet>:
{
 801b02c:	b530      	push	{r4, r5, lr}
 801b02e:	b085      	sub	sp, #20
 801b030:	4604      	mov	r4, r0
					   (struct in6_addr *)hdr->dst,
 801b032:	f101 0518 	add.w	r5, r1, #24
		found = net_route_get_info(net_pkt_iface(pkt),
 801b036:	ab02      	add	r3, sp, #8
 801b038:	aa03      	add	r2, sp, #12
 801b03a:	4629      	mov	r1, r5
 801b03c:	6980      	ldr	r0, [r0, #24]
 801b03e:	f7f8 fc5d 	bl	80138fc <net_route_get_info>
	if (found) {
 801b042:	b1b8      	cbz	r0, 801b074 <ipv6_route_packet+0x48>
		if (route) {
 801b044:	9b03      	ldr	r3, [sp, #12]
 801b046:	b153      	cbz	r3, 801b05e <ipv6_route_packet+0x32>
			net_pkt_set_iface(pkt, route->iface);
 801b048:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
 801b04a:	61a3      	str	r3, [r4, #24]
	if (iface) {
 801b04c:	b13b      	cbz	r3, 801b05e <ipv6_route_packet+0x32>
 801b04e:	681a      	ldr	r2, [r3, #0]
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
 801b050:	7d52      	ldrb	r2, [r2, #21]
 801b052:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 801b056:	681b      	ldr	r3, [r3, #0]
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
 801b058:	7d5b      	ldrb	r3, [r3, #21]
 801b05a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		ret = net_route_packet(pkt, nexthop);
 801b05e:	9902      	ldr	r1, [sp, #8]
 801b060:	4620      	mov	r0, r4
 801b062:	f7f8 fc81 	bl	8013968 <net_route_packet>
		if (ret < 0) {
 801b066:	2800      	cmp	r0, #0
 801b068:	db02      	blt.n	801b070 <ipv6_route_packet+0x44>
			return NET_OK;
 801b06a:	2000      	movs	r0, #0
}
 801b06c:	b005      	add	sp, #20
 801b06e:	bd30      	pop	{r4, r5, pc}
	return NET_DROP;
 801b070:	2002      	movs	r0, #2
 801b072:	e7fb      	b.n	801b06c <ipv6_route_packet+0x40>
		struct net_if *iface = NULL;
 801b074:	2300      	movs	r3, #0
 801b076:	9301      	str	r3, [sp, #4]
		if (net_if_ipv6_addr_onlink(&iface, (struct in6_addr *)hdr->dst)) {
 801b078:	4629      	mov	r1, r5
 801b07a:	a801      	add	r0, sp, #4
 801b07c:	f7f3 f9ca 	bl	800e414 <net_if_ipv6_addr_onlink>
 801b080:	b908      	cbnz	r0, 801b086 <ipv6_route_packet+0x5a>
	return NET_DROP;
 801b082:	2002      	movs	r0, #2
 801b084:	e7f2      	b.n	801b06c <ipv6_route_packet+0x40>
			ret = net_route_packet_if(pkt, iface);
 801b086:	9901      	ldr	r1, [sp, #4]
 801b088:	4620      	mov	r0, r4
 801b08a:	f000 fabe 	bl	801b60a <net_route_packet_if>
			if (ret < 0) {
 801b08e:	2800      	cmp	r0, #0
 801b090:	dbf7      	blt.n	801b082 <ipv6_route_packet+0x56>
				return NET_OK;
 801b092:	2000      	movs	r0, #0
 801b094:	e7ea      	b.n	801b06c <ipv6_route_packet+0x40>

0801b096 <net_ipv6_create>:
{
 801b096:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b098:	b083      	sub	sp, #12
 801b09a:	4605      	mov	r5, r0
 801b09c:	460e      	mov	r6, r1
 801b09e:	4617      	mov	r7, r2
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 801b0a0:	2300      	movs	r3, #0
 801b0a2:	9300      	str	r3, [sp, #0]
 801b0a4:	2328      	movs	r3, #40	; 0x28
 801b0a6:	9301      	str	r3, [sp, #4]
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
 801b0a8:	4669      	mov	r1, sp
 801b0aa:	f7f4 fd8f 	bl	800fbcc <net_pkt_get_data>
	if (!ipv6_hdr) {
 801b0ae:	b370      	cbz	r0, 801b10e <net_ipv6_create+0x78>
 801b0b0:	4604      	mov	r4, r0
	ipv6_hdr->vtc     = 0x60;
 801b0b2:	2360      	movs	r3, #96	; 0x60
 801b0b4:	7003      	strb	r3, [r0, #0]
	ipv6_hdr->tcflow  = 0U;
 801b0b6:	2300      	movs	r3, #0
 801b0b8:	7043      	strb	r3, [r0, #1]
	ipv6_hdr->flow    = 0U;
 801b0ba:	7083      	strb	r3, [r0, #2]
 801b0bc:	70c3      	strb	r3, [r0, #3]
	ipv6_hdr->len     = 0U;
 801b0be:	7103      	strb	r3, [r0, #4]
 801b0c0:	7143      	strb	r3, [r0, #5]
	ipv6_hdr->nexthdr = 0U;
 801b0c2:	7183      	strb	r3, [r0, #6]
	return pkt->ipv6_hop_limit;
 801b0c4:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
	ipv6_hdr->hop_limit = net_pkt_ipv6_hop_limit(pkt);
 801b0c8:	71c3      	strb	r3, [r0, #7]
	if (ipv6_hdr->hop_limit == 0U) {
 801b0ca:	b1db      	cbz	r3, 801b104 <net_ipv6_create+0x6e>
 801b0cc:	6838      	ldr	r0, [r7, #0]
 801b0ce:	6879      	ldr	r1, [r7, #4]
 801b0d0:	68ba      	ldr	r2, [r7, #8]
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	61a0      	str	r0, [r4, #24]
 801b0d6:	61e1      	str	r1, [r4, #28]
 801b0d8:	6222      	str	r2, [r4, #32]
 801b0da:	6263      	str	r3, [r4, #36]	; 0x24
 801b0dc:	6830      	ldr	r0, [r6, #0]
 801b0de:	6871      	ldr	r1, [r6, #4]
 801b0e0:	68b2      	ldr	r2, [r6, #8]
 801b0e2:	68f3      	ldr	r3, [r6, #12]
 801b0e4:	60a0      	str	r0, [r4, #8]
 801b0e6:	60e1      	str	r1, [r4, #12]
 801b0e8:	6122      	str	r2, [r4, #16]
 801b0ea:	6163      	str	r3, [r4, #20]
	pkt->ip_hdr_len = len;
 801b0ec:	2328      	movs	r3, #40	; 0x28
 801b0ee:	f885 3048 	strb.w	r3, [r5, #72]	; 0x48
	pkt->ipv6_ext_len = len;
 801b0f2:	2300      	movs	r3, #0
 801b0f4:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
	return net_pkt_set_data(pkt, &ipv6_access);
 801b0f8:	4669      	mov	r1, sp
 801b0fa:	4628      	mov	r0, r5
 801b0fc:	f7ff fb7b 	bl	801a7f6 <net_pkt_set_data>
}
 801b100:	b003      	add	sp, #12
 801b102:	bdf0      	pop	{r4, r5, r6, r7, pc}
			net_if_ipv6_get_hop_limit(net_pkt_iface(pkt));
 801b104:	69a8      	ldr	r0, [r5, #24]
 801b106:	f7f3 fa67 	bl	800e5d8 <net_if_ipv6_get_hop_limit>
		ipv6_hdr->hop_limit =
 801b10a:	71e0      	strb	r0, [r4, #7]
 801b10c:	e7de      	b.n	801b0cc <net_ipv6_create+0x36>
		return -ENOBUFS;
 801b10e:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801b112:	e7f5      	b.n	801b100 <net_ipv6_create+0x6a>

0801b114 <net_ipv6_finalize>:
{
 801b114:	b570      	push	{r4, r5, r6, lr}
 801b116:	b082      	sub	sp, #8
 801b118:	4604      	mov	r4, r0
 801b11a:	460d      	mov	r5, r1
	NET_PKT_DATA_ACCESS_CONTIGUOUS_DEFINE(ipv6_access, struct net_ipv6_hdr);
 801b11c:	2300      	movs	r3, #0
 801b11e:	9300      	str	r3, [sp, #0]
 801b120:	2328      	movs	r3, #40	; 0x28
 801b122:	9301      	str	r3, [sp, #4]
	pkt->overwrite = overwrite;
 801b124:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 801b128:	f043 0301 	orr.w	r3, r3, #1
 801b12c:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
	ipv6_hdr = (struct net_ipv6_hdr *)net_pkt_get_data(pkt, &ipv6_access);
 801b130:	4669      	mov	r1, sp
 801b132:	f7f4 fd4b 	bl	800fbcc <net_pkt_get_data>
	if (!ipv6_hdr) {
 801b136:	2800      	cmp	r0, #0
 801b138:	d046      	beq.n	801b1c8 <net_ipv6_finalize+0xb4>
 801b13a:	4606      	mov	r6, r0
	return net_buf_frags_len(pkt->frags);
 801b13c:	68a3      	ldr	r3, [r4, #8]
 801b13e:	461a      	mov	r2, r3
	size_t bytes = 0;
 801b140:	2100      	movs	r1, #0
	while (buf) {
 801b142:	b11a      	cbz	r2, 801b14c <net_ipv6_finalize+0x38>
		bytes += buf->len;
 801b144:	8990      	ldrh	r0, [r2, #12]
 801b146:	4401      	add	r1, r0
		buf = buf->frags;
 801b148:	6812      	ldr	r2, [r2, #0]
 801b14a:	e7fa      	b.n	801b142 <net_ipv6_finalize+0x2e>
	ipv6_hdr->len = htons(net_pkt_get_len(pkt) -
 801b14c:	3928      	subs	r1, #40	; 0x28
 801b14e:	f3c1 2107 	ubfx	r1, r1, #8, #8
	while (buf) {
 801b152:	e002      	b.n	801b15a <net_ipv6_finalize+0x46>
		bytes += buf->len;
 801b154:	8998      	ldrh	r0, [r3, #12]
 801b156:	4402      	add	r2, r0
		buf = buf->frags;
 801b158:	681b      	ldr	r3, [r3, #0]
	while (buf) {
 801b15a:	2b00      	cmp	r3, #0
 801b15c:	d1fa      	bne.n	801b154 <net_ipv6_finalize+0x40>
 801b15e:	f1a2 0328 	sub.w	r3, r2, #40	; 0x28
 801b162:	b29b      	uxth	r3, r3
 801b164:	021b      	lsls	r3, r3, #8
 801b166:	b29b      	uxth	r3, r3
 801b168:	430b      	orrs	r3, r1
 801b16a:	80b3      	strh	r3, [r6, #4]
	return pkt->ipv6_next_hdr;
 801b16c:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
	if (net_pkt_ipv6_next_hdr(pkt) != 255U) {
 801b170:	2bff      	cmp	r3, #255	; 0xff
 801b172:	d011      	beq.n	801b198 <net_ipv6_finalize+0x84>
		ipv6_hdr->nexthdr = net_pkt_ipv6_next_hdr(pkt);
 801b174:	71b3      	strb	r3, [r6, #6]
	net_pkt_set_data(pkt, &ipv6_access);
 801b176:	4669      	mov	r1, sp
 801b178:	4620      	mov	r0, r4
 801b17a:	f7ff fb3c 	bl	801a7f6 <net_pkt_set_data>
 801b17e:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
	if (net_pkt_ipv6_next_hdr(pkt) != 255U &&
 801b182:	2bff      	cmp	r3, #255	; 0xff
 801b184:	d10a      	bne.n	801b19c <net_ipv6_finalize+0x88>
	if (IS_ENABLED(CONFIG_NET_UDP) &&
 801b186:	2d11      	cmp	r5, #17
 801b188:	d012      	beq.n	801b1b0 <net_ipv6_finalize+0x9c>
	} else if (IS_ENABLED(CONFIG_NET_TCP) &&
 801b18a:	2d06      	cmp	r5, #6
 801b18c:	d014      	beq.n	801b1b8 <net_ipv6_finalize+0xa4>
	} else if (next_header_proto == IPPROTO_ICMPV6) {
 801b18e:	2d3a      	cmp	r5, #58	; 0x3a
 801b190:	d016      	beq.n	801b1c0 <net_ipv6_finalize+0xac>
	return 0;
 801b192:	2000      	movs	r0, #0
}
 801b194:	b002      	add	sp, #8
 801b196:	bd70      	pop	{r4, r5, r6, pc}
		ipv6_hdr->nexthdr = next_header_proto;
 801b198:	71b5      	strb	r5, [r6, #6]
 801b19a:	e7ec      	b.n	801b176 <net_ipv6_finalize+0x62>
	    net_pkt_skip(pkt, net_pkt_ipv6_ext_len(pkt))) {
 801b19c:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801b1a0:	4620      	mov	r0, r4
 801b1a2:	f7ff f9d0 	bl	801a546 <net_pkt_skip>
	if (net_pkt_ipv6_next_hdr(pkt) != 255U &&
 801b1a6:	2800      	cmp	r0, #0
 801b1a8:	d0ed      	beq.n	801b186 <net_ipv6_finalize+0x72>
		return -ENOBUFS;
 801b1aa:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801b1ae:	e7f1      	b.n	801b194 <net_ipv6_finalize+0x80>
		return net_udp_finalize(pkt);
 801b1b0:	4620      	mov	r0, r4
 801b1b2:	f000 fafb 	bl	801b7ac <net_udp_finalize>
 801b1b6:	e7ed      	b.n	801b194 <net_ipv6_finalize+0x80>
		return net_tcp_finalize(pkt);
 801b1b8:	4620      	mov	r0, r4
 801b1ba:	f000 fad5 	bl	801b768 <net_tcp_finalize>
 801b1be:	e7e9      	b.n	801b194 <net_ipv6_finalize+0x80>
		return net_icmpv6_finalize(pkt);
 801b1c0:	4620      	mov	r0, r4
 801b1c2:	f7ff febd 	bl	801af40 <net_icmpv6_finalize>
 801b1c6:	e7e5      	b.n	801b194 <net_ipv6_finalize+0x80>
		return -ENOBUFS;
 801b1c8:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801b1cc:	e7e2      	b.n	801b194 <net_ipv6_finalize+0x80>

0801b1ce <net_ipv6_init>:

void net_ipv6_init(void)
{
 801b1ce:	b508      	push	{r3, lr}
	net_ipv6_nbr_init();
 801b1d0:	f7f7 fe52 	bl	8012e78 <net_ipv6_nbr_init>

#if defined(CONFIG_NET_IPV6_MLD)
	net_ipv6_mld_init();
 801b1d4:	f7f7 ff52 	bl	801307c <net_ipv6_mld_init>
#endif
}
 801b1d8:	bd08      	pop	{r3, pc}

0801b1da <net_neighbor_data_remove>:
}
 801b1da:	4770      	bx	lr

0801b1dc <net_neighbor_table_clear>:
}
 801b1dc:	4770      	bx	lr

0801b1de <nbr_init>:
{
 801b1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1e2:	b084      	sub	sp, #16
 801b1e4:	4604      	mov	r4, r0
 801b1e6:	4616      	mov	r6, r2
 801b1e8:	4698      	mov	r8, r3
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
 801b1ea:	23ff      	movs	r3, #255	; 0xff
 801b1ec:	7043      	strb	r3, [r0, #1]
	nbr->iface = iface;
 801b1ee:	6081      	str	r1, [r0, #8]
 801b1f0:	68c7      	ldr	r7, [r0, #12]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
 801b1f2:	466d      	mov	r5, sp
 801b1f4:	6810      	ldr	r0, [r2, #0]
 801b1f6:	6851      	ldr	r1, [r2, #4]
 801b1f8:	6892      	ldr	r2, [r2, #8]
 801b1fa:	68f3      	ldr	r3, [r6, #12]
 801b1fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b1fe:	466d      	mov	r5, sp
 801b200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b202:	6078      	str	r0, [r7, #4]
 801b204:	60b9      	str	r1, [r7, #8]
 801b206:	60fa      	str	r2, [r7, #12]
 801b208:	613b      	str	r3, [r7, #16]
	ipv6_nbr_set_state(nbr, state);
 801b20a:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 801b20e:	4620      	mov	r0, r4
 801b210:	f7f5 ffa6 	bl	8011160 <ipv6_nbr_set_state>
 801b214:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->is_router = is_router;
 801b216:	f883 8035 	strb.w	r8, [r3, #53]	; 0x35
 801b21a:	68e2      	ldr	r2, [r4, #12]
	net_ipv6_nbr_data(nbr)->pending = NULL;
 801b21c:	2300      	movs	r3, #0
 801b21e:	6013      	str	r3, [r2, #0]
 801b220:	68e2      	ldr	r2, [r4, #12]
	net_ipv6_nbr_data(nbr)->send_ns = 0;
 801b222:	2000      	movs	r0, #0
 801b224:	2100      	movs	r1, #0
 801b226:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
 801b22a:	68e2      	ldr	r2, [r4, #12]
	net_ipv6_nbr_data(nbr)->reachable = 0;
 801b22c:	e9c2 0106 	strd	r0, r1, [r2, #24]
 801b230:	68e2      	ldr	r2, [r4, #12]
	net_ipv6_nbr_data(nbr)->reachable_timeout = 0;
 801b232:	6213      	str	r3, [r2, #32]
}
 801b234:	b004      	add	sp, #16
 801b236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b23a <z_log_msg2_runtime_create>:
{
 801b23a:	b510      	push	{r4, lr}
 801b23c:	b086      	sub	sp, #24
	va_start(ap, fmt);
 801b23e:	ac0a      	add	r4, sp, #40	; 0x28
 801b240:	9405      	str	r4, [sp, #20]
 801b242:	9402      	str	r4, [sp, #8]
 801b244:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b246:	9401      	str	r4, [sp, #4]
 801b248:	9c08      	ldr	r4, [sp, #32]
 801b24a:	9400      	str	r4, [sp, #0]
 801b24c:	f7fc fd9a 	bl	8017d84 <z_impl_z_log_msg2_runtime_vcreate>
}
 801b250:	b006      	add	sp, #24
 801b252:	bd10      	pop	{r4, pc}

0801b254 <dbg_update_neighbor_lladdr_raw>:
{
 801b254:	b500      	push	{lr}
 801b256:	b083      	sub	sp, #12
	struct net_linkaddr lladdr = {
 801b258:	2300      	movs	r3, #0
 801b25a:	9301      	str	r3, [sp, #4]
 801b25c:	9000      	str	r0, [sp, #0]
		.len = old_lladdr->len,
 801b25e:	784b      	ldrb	r3, [r1, #1]
	struct net_linkaddr lladdr = {
 801b260:	f88d 3004 	strb.w	r3, [sp, #4]
	dbg_update_neighbor_lladdr(&lladdr, old_lladdr, addr);
 801b264:	4668      	mov	r0, sp
 801b266:	f7f5 ffdb 	bl	8011220 <dbg_update_neighbor_lladdr>
}
 801b26a:	b003      	add	sp, #12
 801b26c:	f85d fb04 	ldr.w	pc, [sp], #4

0801b270 <check_route>:
{
 801b270:	b570      	push	{r4, r5, r6, lr}
 801b272:	460c      	mov	r4, r1
 801b274:	4615      	mov	r5, r2
	route = net_route_lookup(iface, dst);
 801b276:	f7f7 ff71 	bl	801315c <net_route_lookup>
	if (route) {
 801b27a:	b150      	cbz	r0, 801b292 <check_route+0x22>
 801b27c:	4606      	mov	r6, r0
		nexthop = net_route_get_nexthop(route);
 801b27e:	f7f8 f9d5 	bl	801362c <net_route_get_nexthop>
		if (!nexthop) {
 801b282:	4604      	mov	r4, r0
 801b284:	b108      	cbz	r0, 801b28a <check_route+0x1a>
}
 801b286:	4620      	mov	r0, r4
 801b288:	bd70      	pop	{r4, r5, r6, pc}
			net_route_del(route);
 801b28a:	4630      	mov	r0, r6
 801b28c:	f7f8 f88a 	bl	80133a4 <net_route_del>
			return NULL;
 801b290:	e7f9      	b.n	801b286 <check_route+0x16>
		router = net_if_ipv6_router_find_default(NULL, dst);
 801b292:	4621      	mov	r1, r4
 801b294:	2000      	movs	r0, #0
 801b296:	f7fe fb14 	bl	80198c2 <net_if_ipv6_router_find_default>
		if (!router) {
 801b29a:	b110      	cbz	r0, 801b2a2 <check_route+0x32>
		nexthop = &router->address.in6_addr;
 801b29c:	f100 0408 	add.w	r4, r0, #8
		NET_DBG("Router %p nexthop %s", router,
 801b2a0:	e7f1      	b.n	801b286 <check_route+0x16>
			if (try_route) {
 801b2a2:	2d00      	cmp	r5, #0
 801b2a4:	d0ef      	beq.n	801b286 <check_route+0x16>
				*try_route = true;
 801b2a6:	2301      	movs	r3, #1
 801b2a8:	702b      	strb	r3, [r5, #0]
			return nexthop;
 801b2aa:	e7ec      	b.n	801b286 <check_route+0x16>

0801b2ac <read_llao>:
{
 801b2ac:	b570      	push	{r4, r5, r6, lr}
 801b2ae:	4605      	mov	r5, r0
 801b2b0:	460c      	mov	r4, r1
 801b2b2:	4616      	mov	r6, r2
	llstorage->len = NET_LINK_ADDR_MAX_LENGTH;
 801b2b4:	2306      	movs	r3, #6
 801b2b6:	7053      	strb	r3, [r2, #1]
	if (net_pkt_lladdr_src(pkt)->len < llstorage->len) {
 801b2b8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801b2bc:	2b05      	cmp	r3, #5
 801b2be:	d800      	bhi.n	801b2c2 <read_llao+0x16>
		llstorage->len = net_pkt_lladdr_src(pkt)->len;
 801b2c0:	7053      	strb	r3, [r2, #1]
	if (net_pkt_read(pkt, llstorage->addr, llstorage->len)) {
 801b2c2:	7872      	ldrb	r2, [r6, #1]
 801b2c4:	1cb1      	adds	r1, r6, #2
 801b2c6:	4628      	mov	r0, r5
 801b2c8:	f7ff f955 	bl	801a576 <net_pkt_read>
 801b2cc:	b980      	cbnz	r0, 801b2f0 <read_llao+0x44>
	padding = len * 8U - 2 - llstorage->len;
 801b2ce:	00e1      	lsls	r1, r4, #3
 801b2d0:	b2c9      	uxtb	r1, r1
 801b2d2:	7874      	ldrb	r4, [r6, #1]
 801b2d4:	1b09      	subs	r1, r1, r4
 801b2d6:	b2c9      	uxtb	r1, r1
 801b2d8:	3902      	subs	r1, #2
	if (padding) {
 801b2da:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 801b2de:	d101      	bne.n	801b2e4 <read_llao+0x38>
	return true;
 801b2e0:	2001      	movs	r0, #1
}
 801b2e2:	bd70      	pop	{r4, r5, r6, pc}
		if (net_pkt_skip(pkt, padding)) {
 801b2e4:	4628      	mov	r0, r5
 801b2e6:	f7ff f92e 	bl	801a546 <net_pkt_skip>
 801b2ea:	b918      	cbnz	r0, 801b2f4 <read_llao+0x48>
	return true;
 801b2ec:	2001      	movs	r0, #1
 801b2ee:	e7f8      	b.n	801b2e2 <read_llao+0x36>
		return false;
 801b2f0:	2000      	movs	r0, #0
 801b2f2:	e7f6      	b.n	801b2e2 <read_llao+0x36>
			return false;
 801b2f4:	2000      	movs	r0, #0
 801b2f6:	e7f4      	b.n	801b2e2 <read_llao+0x36>

0801b2f8 <net_ipv6_nbr_set_reachable_timer>:
{
 801b2f8:	b508      	push	{r3, lr}
	if (!iface->config.ip.ipv6) {
 801b2fa:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 801b2fe:	b133      	cbz	r3, 801b30e <net_ipv6_nbr_set_reachable_timer+0x16>
	return iface->config.ip.ipv6->reachable_time;
 801b300:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
	ipv6_nd_restart_reachable_timer(nbr, time);
 801b304:	2300      	movs	r3, #0
 801b306:	4608      	mov	r0, r1
 801b308:	f7f5 ffa0 	bl	801124c <ipv6_nd_restart_reachable_timer>
}
 801b30c:	bd08      	pop	{r3, pc}
		return 0;
 801b30e:	2200      	movs	r2, #0
 801b310:	e7f8      	b.n	801b304 <net_ipv6_nbr_set_reachable_timer+0xc>

0801b312 <net_ipv6_start_dad>:
{
 801b312:	b500      	push	{lr}
 801b314:	b083      	sub	sp, #12
				&ifaddr->address.in6_addr, true);
 801b316:	3104      	adds	r1, #4
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
 801b318:	2301      	movs	r3, #1
 801b31a:	9301      	str	r3, [sp, #4]
 801b31c:	9100      	str	r1, [sp, #0]
 801b31e:	2300      	movs	r3, #0
 801b320:	461a      	mov	r2, r3
 801b322:	4619      	mov	r1, r3
 801b324:	f7f6 fbea 	bl	8011afc <net_ipv6_send_ns>
}
 801b328:	b003      	add	sp, #12
 801b32a:	f85d fb04 	ldr.w	pc, [sp], #4

0801b32e <net_ipv6_start_rs>:
{
 801b32e:	b508      	push	{r3, lr}
	return net_ipv6_send_rs(iface);
 801b330:	f7f7 fce8 	bl	8012d04 <net_ipv6_send_rs>
}
 801b334:	bd08      	pop	{r3, pc}

0801b336 <mld_create_packet>:
{
 801b336:	b530      	push	{r4, r5, lr}
 801b338:	b087      	sub	sp, #28
 801b33a:	4604      	mov	r4, r0
 801b33c:	460d      	mov	r5, r1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
 801b33e:	f240 23ff 	movw	r3, #767	; 0x2ff
 801b342:	f8ad 3008 	strh.w	r3, [sp, #8]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
 801b346:	2300      	movs	r3, #0
 801b348:	f8ad 300a 	strh.w	r3, [sp, #10]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
 801b34c:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
 801b350:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
 801b354:	f8ad 3010 	strh.w	r3, [sp, #16]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
 801b358:	f8ad 3012 	strh.w	r3, [sp, #18]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
 801b35c:	f8ad 3014 	strh.w	r3, [sp, #20]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
 801b360:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 801b364:	f8ad 3016 	strh.w	r3, [sp, #22]
	pkt->ipv6_hop_limit = hop_limit;
 801b368:	2301      	movs	r3, #1
 801b36a:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
	if (net_ipv6_create(pkt, net_if_ipv6_select_src_addr(
 801b36e:	a902      	add	r1, sp, #8
 801b370:	6980      	ldr	r0, [r0, #24]
 801b372:	f7f3 f99f 	bl	800e6b4 <net_if_ipv6_select_src_addr>
 801b376:	4601      	mov	r1, r0
 801b378:	aa02      	add	r2, sp, #8
 801b37a:	4620      	mov	r0, r4
 801b37c:	f7ff fe8b 	bl	801b096 <net_ipv6_create>
 801b380:	2800      	cmp	r0, #0
 801b382:	d161      	bne.n	801b448 <mld_create_packet+0x112>
	if (net_pkt_write_u8(pkt, IPPROTO_ICMPV6) ||
 801b384:	233a      	movs	r3, #58	; 0x3a
 801b386:	f88d 3006 	strb.w	r3, [sp, #6]
	return net_pkt_write(pkt, &data, sizeof(uint8_t));
 801b38a:	2201      	movs	r2, #1
 801b38c:	f10d 0106 	add.w	r1, sp, #6
 801b390:	4620      	mov	r0, r4
 801b392:	f7ff fa15 	bl	801a7c0 <net_pkt_write>
 801b396:	2800      	cmp	r0, #0
 801b398:	d14d      	bne.n	801b436 <mld_create_packet+0x100>
 801b39a:	2300      	movs	r3, #0
 801b39c:	f88d 3006 	strb.w	r3, [sp, #6]
 801b3a0:	2201      	movs	r2, #1
 801b3a2:	f10d 0106 	add.w	r1, sp, #6
 801b3a6:	4620      	mov	r0, r4
 801b3a8:	f7ff fa0a 	bl	801a7c0 <net_pkt_write>
 801b3ac:	2800      	cmp	r0, #0
 801b3ae:	d142      	bne.n	801b436 <mld_create_packet+0x100>
	uint16_t data_be16 = htons(data);
 801b3b0:	f240 2305 	movw	r3, #517	; 0x205
 801b3b4:	f8ad 3006 	strh.w	r3, [sp, #6]
	return net_pkt_write(pkt, &data_be16, sizeof(uint16_t));
 801b3b8:	2202      	movs	r2, #2
 801b3ba:	f10d 0106 	add.w	r1, sp, #6
 801b3be:	4620      	mov	r0, r4
 801b3c0:	f7ff f9fe 	bl	801a7c0 <net_pkt_write>
	if (net_pkt_write_be16(pkt, 0x0502) ||
 801b3c4:	bbd0      	cbnz	r0, 801b43c <mld_create_packet+0x106>
	uint16_t data_be16 = htons(data);
 801b3c6:	2300      	movs	r3, #0
 801b3c8:	f8ad 3006 	strh.w	r3, [sp, #6]
	return net_pkt_write(pkt, &data_be16, sizeof(uint16_t));
 801b3cc:	2202      	movs	r2, #2
 801b3ce:	f10d 0106 	add.w	r1, sp, #6
 801b3d2:	4620      	mov	r0, r4
 801b3d4:	f7ff f9f4 	bl	801a7c0 <net_pkt_write>
 801b3d8:	bb80      	cbnz	r0, 801b43c <mld_create_packet+0x106>
	uint16_t data_be16 = htons(data);
 801b3da:	2300      	movs	r3, #0
 801b3dc:	f8ad 3006 	strh.w	r3, [sp, #6]
	return net_pkt_write(pkt, &data_be16, sizeof(uint16_t));
 801b3e0:	2202      	movs	r2, #2
 801b3e2:	f10d 0106 	add.w	r1, sp, #6
 801b3e6:	4620      	mov	r0, r4
 801b3e8:	f7ff f9ea 	bl	801a7c0 <net_pkt_write>
	    net_pkt_write_be16(pkt, 0) ||
 801b3ec:	bb30      	cbnz	r0, 801b43c <mld_create_packet+0x106>
	pkt->ipv6_ext_len = len;
 801b3ee:	2308      	movs	r3, #8
 801b3f0:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
	if (net_icmpv6_create(pkt, NET_ICMPV6_MLDv2, 0) ||
 801b3f4:	2200      	movs	r2, #0
 801b3f6:	218f      	movs	r1, #143	; 0x8f
 801b3f8:	4620      	mov	r0, r4
 801b3fa:	f7ff fdbb 	bl	801af74 <net_icmpv6_create>
 801b3fe:	bb00      	cbnz	r0, 801b442 <mld_create_packet+0x10c>
	uint16_t data_be16 = htons(data);
 801b400:	2300      	movs	r3, #0
 801b402:	f8ad 3006 	strh.w	r3, [sp, #6]
	return net_pkt_write(pkt, &data_be16, sizeof(uint16_t));
 801b406:	2202      	movs	r2, #2
 801b408:	f10d 0106 	add.w	r1, sp, #6
 801b40c:	4620      	mov	r0, r4
 801b40e:	f7ff f9d7 	bl	801a7c0 <net_pkt_write>
 801b412:	b9b0      	cbnz	r0, 801b442 <mld_create_packet+0x10c>
	uint16_t data_be16 = htons(data);
 801b414:	0a29      	lsrs	r1, r5, #8
 801b416:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
 801b41a:	f8ad 5006 	strh.w	r5, [sp, #6]
	return net_pkt_write(pkt, &data_be16, sizeof(uint16_t));
 801b41e:	2202      	movs	r2, #2
 801b420:	f10d 0106 	add.w	r1, sp, #6
 801b424:	4620      	mov	r0, r4
 801b426:	f7ff f9cb 	bl	801a7c0 <net_pkt_write>
	    net_pkt_write_be16(pkt, 0) ||
 801b42a:	b950      	cbnz	r0, 801b442 <mld_create_packet+0x10c>
	pkt->ipv6_next_hdr = next_hdr;
 801b42c:	2300      	movs	r3, #0
 801b42e:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
}
 801b432:	b007      	add	sp, #28
 801b434:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
 801b436:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801b43a:	e7fa      	b.n	801b432 <mld_create_packet+0xfc>
		return -ENOBUFS;
 801b43c:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801b440:	e7f7      	b.n	801b432 <mld_create_packet+0xfc>
		return -ENOBUFS;
 801b442:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801b446:	e7f4      	b.n	801b432 <mld_create_packet+0xfc>
		return -ENOBUFS;
 801b448:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801b44c:	e7f1      	b.n	801b432 <mld_create_packet+0xfc>

0801b44e <mld_create>:
{
 801b44e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b452:	b088      	sub	sp, #32
 801b454:	4607      	mov	r7, r0
 801b456:	460d      	mov	r5, r1
 801b458:	4690      	mov	r8, r2
 801b45a:	461e      	mov	r6, r3
	NET_PKT_DATA_ACCESS_DEFINE(mld_access,
 801b45c:	ab03      	add	r3, sp, #12
 801b45e:	9301      	str	r3, [sp, #4]
 801b460:	2314      	movs	r3, #20
 801b462:	9302      	str	r3, [sp, #8]
				net_pkt_get_data(pkt, &mld_access);
 801b464:	a901      	add	r1, sp, #4
 801b466:	f7f4 fbb1 	bl	800fbcc <net_pkt_get_data>
	if (!mld) {
 801b46a:	b328      	cbz	r0, 801b4b8 <mld_create+0x6a>
 801b46c:	4604      	mov	r4, r0
	mld->record_type = record_type;
 801b46e:	f880 8000 	strb.w	r8, [r0]
	mld->aux_data_len = 0U;
 801b472:	2300      	movs	r3, #0
 801b474:	7043      	strb	r3, [r0, #1]
	mld->num_sources = htons(num_sources);
 801b476:	0a33      	lsrs	r3, r6, #8
 801b478:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 801b47c:	8043      	strh	r3, [r0, #2]
 801b47e:	6828      	ldr	r0, [r5, #0]
 801b480:	6869      	ldr	r1, [r5, #4]
 801b482:	68aa      	ldr	r2, [r5, #8]
 801b484:	68eb      	ldr	r3, [r5, #12]
 801b486:	6060      	str	r0, [r4, #4]
 801b488:	60a1      	str	r1, [r4, #8]
 801b48a:	60e2      	str	r2, [r4, #12]
 801b48c:	6123      	str	r3, [r4, #16]
	if (net_pkt_set_data(pkt, &mld_access)) {
 801b48e:	a901      	add	r1, sp, #4
 801b490:	4638      	mov	r0, r7
 801b492:	f7ff f9b0 	bl	801a7f6 <net_pkt_set_data>
 801b496:	b990      	cbnz	r0, 801b4be <mld_create+0x70>
	if (num_sources > 0) {
 801b498:	b916      	cbnz	r6, 801b4a0 <mld_create+0x52>
}
 801b49a:	b008      	add	sp, #32
 801b49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				  net_ipv6_unspecified_address()->s6_addr,
 801b4a0:	f7f4 f884 	bl	800f5ac <net_ipv6_unspecified_address>
 801b4a4:	4601      	mov	r1, r0
		if (net_pkt_write(pkt,
 801b4a6:	2210      	movs	r2, #16
 801b4a8:	4638      	mov	r0, r7
 801b4aa:	f7ff f989 	bl	801a7c0 <net_pkt_write>
 801b4ae:	2800      	cmp	r0, #0
 801b4b0:	d0f3      	beq.n	801b49a <mld_create+0x4c>
			return -ENOBUFS;
 801b4b2:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801b4b6:	e7f0      	b.n	801b49a <mld_create+0x4c>
		return -ENOBUFS;
 801b4b8:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801b4bc:	e7ed      	b.n	801b49a <mld_create+0x4c>
		return -ENOBUFS;
 801b4be:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801b4c2:	e7ea      	b.n	801b49a <mld_create+0x4c>

0801b4c4 <mld_send_generic>:
{
 801b4c4:	b570      	push	{r4, r5, r6, lr}
 801b4c6:	b082      	sub	sp, #8
 801b4c8:	460d      	mov	r5, r1
 801b4ca:	4616      	mov	r6, r2
					PKT_WAIT_TIME);
 801b4cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801b4d0:	2300      	movs	r3, #0
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
 801b4d2:	e9cd 2300 	strd	r2, r3, [sp]
 801b4d6:	233a      	movs	r3, #58	; 0x3a
 801b4d8:	2202      	movs	r2, #2
 801b4da:	2130      	movs	r1, #48	; 0x30
 801b4dc:	f7f4 fb52 	bl	800fb84 <net_pkt_alloc_with_buffer>
	if (!pkt) {
 801b4e0:	b1d8      	cbz	r0, 801b51a <mld_send_generic+0x56>
 801b4e2:	4604      	mov	r4, r0
	if (mld_create_packet(pkt, 1) ||
 801b4e4:	2101      	movs	r1, #1
 801b4e6:	f7ff ff26 	bl	801b336 <mld_create_packet>
 801b4ea:	b138      	cbz	r0, 801b4fc <mld_send_generic+0x38>
		ret = -ENOBUFS;
 801b4ec:	f06f 0568 	mvn.w	r5, #104	; 0x68
	net_pkt_unref(pkt);
 801b4f0:	4620      	mov	r0, r4
 801b4f2:	f7fe ff51 	bl	801a398 <net_pkt_unref>
}
 801b4f6:	4628      	mov	r0, r5
 801b4f8:	b002      	add	sp, #8
 801b4fa:	bd70      	pop	{r4, r5, r6, pc}
	    mld_create(pkt, addr, mode, 1)) {
 801b4fc:	2301      	movs	r3, #1
 801b4fe:	4632      	mov	r2, r6
 801b500:	4629      	mov	r1, r5
 801b502:	4620      	mov	r0, r4
 801b504:	f7ff ffa3 	bl	801b44e <mld_create>
	if (mld_create_packet(pkt, 1) ||
 801b508:	2800      	cmp	r0, #0
 801b50a:	d1ef      	bne.n	801b4ec <mld_send_generic+0x28>
	ret = mld_send(pkt);
 801b50c:	4620      	mov	r0, r4
 801b50e:	f7f7 fcdd 	bl	8012ecc <mld_send>
	if (ret) {
 801b512:	4605      	mov	r5, r0
 801b514:	2800      	cmp	r0, #0
 801b516:	d0ee      	beq.n	801b4f6 <mld_send_generic+0x32>
 801b518:	e7ea      	b.n	801b4f0 <mld_send_generic+0x2c>
		return -ENOMEM;
 801b51a:	f06f 050b 	mvn.w	r5, #11
 801b51e:	e7ea      	b.n	801b4f6 <mld_send_generic+0x32>

0801b520 <send_mld_report>:
{
 801b520:	b570      	push	{r4, r5, r6, lr}
 801b522:	b082      	sub	sp, #8
	struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 801b524:	f8d0 5210 	ldr.w	r5, [r0, #528]	; 0x210
	int i, count = 0;
 801b528:	2400      	movs	r4, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 801b52a:	4623      	mov	r3, r4
 801b52c:	e000      	b.n	801b530 <send_mld_report+0x10>
 801b52e:	3301      	adds	r3, #1
 801b530:	2b02      	cmp	r3, #2
 801b532:	dc13      	bgt.n	801b55c <send_mld_report+0x3c>
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
 801b534:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801b538:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801b53c:	f892 2074 	ldrb.w	r2, [r2, #116]	; 0x74
 801b540:	f012 0f01 	tst.w	r2, #1
 801b544:	d0f3      	beq.n	801b52e <send_mld_report+0xe>
 801b546:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801b54a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801b54e:	f892 2074 	ldrb.w	r2, [r2, #116]	; 0x74
 801b552:	f012 0f02 	tst.w	r2, #2
 801b556:	d0ea      	beq.n	801b52e <send_mld_report+0xe>
		count++;
 801b558:	3401      	adds	r4, #1
 801b55a:	e7e8      	b.n	801b52e <send_mld_report+0xe>
					count * MLDv2_MCAST_RECORD_LEN,
 801b55c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 801b560:	0089      	lsls	r1, r1, #2
	pkt = net_pkt_alloc_with_buffer(iface, IPV6_OPT_HDR_ROUTER_ALERT_LEN +
 801b562:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801b566:	2300      	movs	r3, #0
 801b568:	e9cd 2300 	strd	r2, r3, [sp]
 801b56c:	233a      	movs	r3, #58	; 0x3a
 801b56e:	2202      	movs	r2, #2
 801b570:	310c      	adds	r1, #12
 801b572:	f7f4 fb07 	bl	800fb84 <net_pkt_alloc_with_buffer>
	if (!pkt) {
 801b576:	4606      	mov	r6, r0
 801b578:	b378      	cbz	r0, 801b5da <send_mld_report+0xba>
	if (mld_create_packet(pkt, count)) {
 801b57a:	b2a1      	uxth	r1, r4
 801b57c:	f7ff fedb 	bl	801b336 <mld_create_packet>
 801b580:	4604      	mov	r4, r0
 801b582:	b108      	cbz	r0, 801b588 <send_mld_report+0x68>
 801b584:	e026      	b.n	801b5d4 <send_mld_report+0xb4>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
 801b586:	3401      	adds	r4, #1
 801b588:	2c02      	cmp	r4, #2
 801b58a:	dc1f      	bgt.n	801b5cc <send_mld_report+0xac>
		if (!ipv6->mcast[i].is_used || !ipv6->mcast[i].is_joined) {
 801b58c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801b590:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 801b594:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801b598:	f013 0f01 	tst.w	r3, #1
 801b59c:	d0f3      	beq.n	801b586 <send_mld_report+0x66>
 801b59e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801b5a2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 801b5a6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801b5aa:	f013 0f02 	tst.w	r3, #2
 801b5ae:	d0ea      	beq.n	801b586 <send_mld_report+0x66>
		if (!mld_create(pkt, &ipv6->mcast[i].address.in6_addr,
 801b5b0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801b5b4:	00c9      	lsls	r1, r1, #3
 801b5b6:	3160      	adds	r1, #96	; 0x60
 801b5b8:	4429      	add	r1, r5
 801b5ba:	2300      	movs	r3, #0
 801b5bc:	2202      	movs	r2, #2
 801b5be:	3104      	adds	r1, #4
 801b5c0:	4630      	mov	r0, r6
 801b5c2:	f7ff ff44 	bl	801b44e <mld_create>
 801b5c6:	2800      	cmp	r0, #0
 801b5c8:	d1dd      	bne.n	801b586 <send_mld_report+0x66>
 801b5ca:	e003      	b.n	801b5d4 <send_mld_report+0xb4>
	if (!mld_send(pkt)) {
 801b5cc:	4630      	mov	r0, r6
 801b5ce:	f7f7 fc7d 	bl	8012ecc <mld_send>
 801b5d2:	b110      	cbz	r0, 801b5da <send_mld_report+0xba>
	net_pkt_unref(pkt);
 801b5d4:	4630      	mov	r0, r6
 801b5d6:	f7fe fedf 	bl	801a398 <net_pkt_unref>
}
 801b5da:	b002      	add	sp, #8
 801b5dc:	bd70      	pop	{r4, r5, r6, pc}

0801b5de <net_route_nexthop_remove>:
}
 801b5de:	4770      	bx	lr

0801b5e0 <net_route_entry_remove>:
}
 801b5e0:	4770      	bx	lr

0801b5e2 <net_route_entries_table_clear>:
}
 801b5e2:	4770      	bx	lr

0801b5e4 <nbr_nexthop_get>:
{
 801b5e4:	b510      	push	{r4, lr}
	nbr = net_ipv6_nbr_lookup(iface, addr);
 801b5e6:	f7f5 ff85 	bl	80114f4 <net_ipv6_nbr_lookup>
	if (nbr == NULL) {
 801b5ea:	4604      	mov	r4, r0
 801b5ec:	b108      	cbz	r0, 801b5f2 <nbr_nexthop_get+0xe>
	net_nbr_ref(nbr);
 801b5ee:	f7ff fce6 	bl	801afbe <net_nbr_ref>
}
 801b5f2:	4620      	mov	r0, r4
 801b5f4:	bd10      	pop	{r4, pc}

0801b5f6 <nbr_nexthop_put>:
{
 801b5f6:	b508      	push	{r3, lr}
	net_nbr_unref(nbr);
 801b5f8:	f7ff fcd7 	bl	801afaa <net_nbr_unref>
}
 801b5fc:	2000      	movs	r0, #0
 801b5fe:	bd08      	pop	{r3, pc}

0801b600 <release_nexthop_route>:
{
 801b600:	b508      	push	{r3, lr}
	net_nbr_unref(nbr);
 801b602:	3814      	subs	r0, #20
 801b604:	f7ff fcd1 	bl	801afaa <net_nbr_unref>
}
 801b608:	bd08      	pop	{r3, pc}

0801b60a <net_route_packet_if>:
{
 801b60a:	b508      	push	{r3, lr}
	pkt->iface = iface;
 801b60c:	6181      	str	r1, [r0, #24]
	if (iface) {
 801b60e:	b139      	cbz	r1, 801b620 <net_route_packet_if+0x16>
	return &iface->if_dev->link_addr;
 801b610:	680b      	ldr	r3, [r1, #0]
		pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
 801b612:	7d5b      	ldrb	r3, [r3, #21]
 801b614:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 801b618:	680b      	ldr	r3, [r1, #0]
		pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
 801b61a:	7d5b      	ldrb	r3, [r3, #21]
 801b61c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
	pkt->forwarding = forward;
 801b620:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 801b624:	f043 0301 	orr.w	r3, r3, #1
 801b628:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801b62c:	680b      	ldr	r3, [r1, #0]
	net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
 801b62e:	691b      	ldr	r3, [r3, #16]
 801b630:	6343      	str	r3, [r0, #52]	; 0x34
 801b632:	680b      	ldr	r3, [r1, #0]
	net_pkt_lladdr_src(pkt)->type = net_pkt_lladdr_if(pkt)->type;
 801b634:	7d5b      	ldrb	r3, [r3, #21]
 801b636:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 801b63a:	680b      	ldr	r3, [r1, #0]
	net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
 801b63c:	7d1b      	ldrb	r3, [r3, #20]
 801b63e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	return net_send_data(pkt);
 801b642:	f7f0 ff97 	bl	800c574 <net_send_data>
}
 801b646:	bd08      	pop	{r3, pc}

0801b648 <conn_addr_cmp>:
{
 801b648:	b538      	push	{r3, r4, r5, lr}
 801b64a:	4615      	mov	r5, r2
	if (addr->sa_family != net_pkt_family(pkt)) {
 801b64c:	8812      	ldrh	r2, [r2, #0]
	return pkt->family;
 801b64e:	f890 404b 	ldrb.w	r4, [r0, #75]	; 0x4b
 801b652:	f3c4 0042 	ubfx	r0, r4, #1, #3
 801b656:	4282      	cmp	r2, r0
 801b658:	d139      	bne.n	801b6ce <conn_addr_cmp+0x86>
	if (IS_ENABLED(CONFIG_NET_IPV6) &&
 801b65a:	2802      	cmp	r0, #2
 801b65c:	d003      	beq.n	801b666 <conn_addr_cmp+0x1e>
	} else if (IS_ENABLED(CONFIG_NET_IPV4) &&
 801b65e:	2801      	cmp	r0, #1
 801b660:	d024      	beq.n	801b6ac <conn_addr_cmp+0x64>
	return true;
 801b662:	2401      	movs	r4, #1
 801b664:	e034      	b.n	801b6d0 <conn_addr_cmp+0x88>
	    net_pkt_family(pkt) == AF_INET6 &&
 801b666:	2a02      	cmp	r2, #2
 801b668:	d1f9      	bne.n	801b65e <conn_addr_cmp+0x16>
		if (is_remote) {
 801b66a:	b15b      	cbz	r3, 801b684 <conn_addr_cmp+0x3c>
			addr6 = ip_hdr->ipv6->src;
 801b66c:	6809      	ldr	r1, [r1, #0]
 801b66e:	3108      	adds	r1, #8
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 801b670:	686b      	ldr	r3, [r5, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 801b672:	b953      	cbnz	r3, 801b68a <conn_addr_cmp+0x42>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 801b674:	68ab      	ldr	r3, [r5, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
 801b676:	b96b      	cbnz	r3, 801b694 <conn_addr_cmp+0x4c>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 801b678:	68eb      	ldr	r3, [r5, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
 801b67a:	b96b      	cbnz	r3, 801b698 <conn_addr_cmp+0x50>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
 801b67c:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
 801b67e:	b16b      	cbz	r3, 801b69c <conn_addr_cmp+0x54>
 801b680:	2300      	movs	r3, #0
 801b682:	e003      	b.n	801b68c <conn_addr_cmp+0x44>
			addr6 = ip_hdr->ipv6->dst;
 801b684:	6809      	ldr	r1, [r1, #0]
 801b686:	3118      	adds	r1, #24
 801b688:	e7f2      	b.n	801b670 <conn_addr_cmp+0x28>
 801b68a:	2300      	movs	r3, #0
		if (!net_ipv6_is_addr_unspecified(
 801b68c:	461c      	mov	r4, r3
 801b68e:	b13b      	cbz	r3, 801b6a0 <conn_addr_cmp+0x58>
		return true;
 801b690:	2401      	movs	r4, #1
 801b692:	e01d      	b.n	801b6d0 <conn_addr_cmp+0x88>
 801b694:	2300      	movs	r3, #0
 801b696:	e7f9      	b.n	801b68c <conn_addr_cmp+0x44>
 801b698:	2300      	movs	r3, #0
 801b69a:	e7f7      	b.n	801b68c <conn_addr_cmp+0x44>
 801b69c:	2301      	movs	r3, #1
 801b69e:	e7f5      	b.n	801b68c <conn_addr_cmp+0x44>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 801b6a0:	2210      	movs	r2, #16
 801b6a2:	1d28      	adds	r0, r5, #4
 801b6a4:	f001 f8ba 	bl	801c81c <memcmp>
			if (!net_ipv6_addr_cmp_raw((uint8_t *)&net_sin6(addr)->sin6_addr,
 801b6a8:	b990      	cbnz	r0, 801b6d0 <conn_addr_cmp+0x88>
 801b6aa:	e7f1      	b.n	801b690 <conn_addr_cmp+0x48>
		   net_pkt_family(pkt) == AF_INET &&
 801b6ac:	2a01      	cmp	r2, #1
 801b6ae:	d001      	beq.n	801b6b4 <conn_addr_cmp+0x6c>
	return true;
 801b6b0:	2401      	movs	r4, #1
 801b6b2:	e00d      	b.n	801b6d0 <conn_addr_cmp+0x88>
		if (is_remote) {
 801b6b4:	b143      	cbz	r3, 801b6c8 <conn_addr_cmp+0x80>
			addr4 = ip_hdr->ipv4->src;
 801b6b6:	680b      	ldr	r3, [r1, #0]
 801b6b8:	330c      	adds	r3, #12
		if (net_sin(addr)->sin_addr.s_addr) {
 801b6ba:	686a      	ldr	r2, [r5, #4]
 801b6bc:	b152      	cbz	r2, 801b6d4 <conn_addr_cmp+0x8c>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 801b6be:	681b      	ldr	r3, [r3, #0]
			if (!net_ipv4_addr_cmp_raw((uint8_t *)&net_sin(addr)->sin_addr,
 801b6c0:	429a      	cmp	r2, r3
 801b6c2:	d109      	bne.n	801b6d8 <conn_addr_cmp+0x90>
	return true;
 801b6c4:	2401      	movs	r4, #1
 801b6c6:	e003      	b.n	801b6d0 <conn_addr_cmp+0x88>
			addr4 = ip_hdr->ipv4->dst;
 801b6c8:	680b      	ldr	r3, [r1, #0]
 801b6ca:	3310      	adds	r3, #16
 801b6cc:	e7f5      	b.n	801b6ba <conn_addr_cmp+0x72>
		return false;
 801b6ce:	2400      	movs	r4, #0
}
 801b6d0:	4620      	mov	r0, r4
 801b6d2:	bd38      	pop	{r3, r4, r5, pc}
	return true;
 801b6d4:	2401      	movs	r4, #1
 801b6d6:	e7fb      	b.n	801b6d0 <conn_addr_cmp+0x88>
				return false;
 801b6d8:	2400      	movs	r4, #0
 801b6da:	e7f9      	b.n	801b6d0 <conn_addr_cmp+0x88>

0801b6dc <conn_are_end_points_valid>:
{
 801b6dc:	b570      	push	{r4, r5, r6, lr}
 801b6de:	460c      	mov	r4, r1
 801b6e0:	4616      	mov	r6, r2
 801b6e2:	461d      	mov	r5, r3
 801b6e4:	f890 004b 	ldrb.w	r0, [r0, #75]	; 0x4b
 801b6e8:	f3c0 0042 	ubfx	r0, r0, #1, #3
	if (IS_ENABLED(CONFIG_NET_IPV4) && net_pkt_family(pkt) == AF_INET) {
 801b6ec:	2801      	cmp	r0, #1
 801b6ee:	d003      	beq.n	801b6f8 <conn_are_end_points_valid+0x1c>
	} else if (IS_ENABLED(CONFIG_NET_IPV6) &&
 801b6f0:	2802      	cmp	r0, #2
 801b6f2:	d025      	beq.n	801b740 <conn_are_end_points_valid+0x64>
	return !(my_src_addr && (src_port == dst_port));
 801b6f4:	2001      	movs	r0, #1
}
 801b6f6:	bd70      	pop	{r4, r5, r6, pc}
		if (net_ipv4_addr_cmp_raw(ip_hdr->ipv4->src,
 801b6f8:	680c      	ldr	r4, [r1, #0]
 801b6fa:	68e2      	ldr	r2, [r4, #12]
 801b6fc:	6923      	ldr	r3, [r4, #16]
 801b6fe:	429a      	cmp	r2, r3
 801b700:	d103      	bne.n	801b70a <conn_are_end_points_valid+0x2e>
	return !(my_src_addr && (src_port == dst_port));
 801b702:	42ae      	cmp	r6, r5
 801b704:	d02e      	beq.n	801b764 <conn_are_end_points_valid+0x88>
 801b706:	2001      	movs	r0, #1
 801b708:	e7f5      	b.n	801b6f6 <conn_are_end_points_valid+0x1a>
		    net_ipv4_is_my_addr((struct in_addr *)ip_hdr->ipv4->src)) {
 801b70a:	340c      	adds	r4, #12
	ret = net_if_ipv4_addr_lookup(addr, NULL) != NULL;
 801b70c:	2100      	movs	r1, #0
 801b70e:	4620      	mov	r0, r4
 801b710:	f7f3 fa2e 	bl	800eb70 <net_if_ipv4_addr_lookup>
 801b714:	2800      	cmp	r0, #0
 801b716:	bf14      	ite	ne
 801b718:	2001      	movne	r0, #1
 801b71a:	2000      	moveq	r0, #0
	if (!ret) {
 801b71c:	d003      	beq.n	801b726 <conn_are_end_points_valid+0x4a>
					  ip_hdr->ipv4->dst) ||
 801b71e:	2800      	cmp	r0, #0
 801b720:	d1ef      	bne.n	801b702 <conn_are_end_points_valid+0x26>
	return !(my_src_addr && (src_port == dst_port));
 801b722:	2001      	movs	r0, #1
 801b724:	e7e7      	b.n	801b6f6 <conn_are_end_points_valid+0x1a>
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 801b726:	f7f3 ff3d 	bl	800f5a4 <net_ipv4_broadcast_address>
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
 801b72a:	6822      	ldr	r2, [r4, #0]
 801b72c:	6803      	ldr	r3, [r0, #0]
	if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
 801b72e:	429a      	cmp	r2, r3
 801b730:	d004      	beq.n	801b73c <conn_are_end_points_valid+0x60>
	return net_if_ipv4_is_addr_bcast(iface, addr);
 801b732:	4621      	mov	r1, r4
 801b734:	2000      	movs	r0, #0
 801b736:	f7f3 f983 	bl	800ea40 <net_if_ipv4_is_addr_bcast>
 801b73a:	e7f0      	b.n	801b71e <conn_are_end_points_valid+0x42>
		return true;
 801b73c:	2001      	movs	r0, #1
 801b73e:	e7ee      	b.n	801b71e <conn_are_end_points_valid+0x42>
		if (net_ipv6_addr_cmp_raw(ip_hdr->ipv6->src,
 801b740:	6808      	ldr	r0, [r1, #0]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
 801b742:	2210      	movs	r2, #16
 801b744:	f100 0118 	add.w	r1, r0, #24
 801b748:	3008      	adds	r0, #8
 801b74a:	f001 f867 	bl	801c81c <memcmp>
 801b74e:	2800      	cmp	r0, #0
 801b750:	d0d7      	beq.n	801b702 <conn_are_end_points_valid+0x26>
		    net_ipv6_is_my_addr((struct in6_addr *)ip_hdr->ipv6->src)) {
 801b752:	6820      	ldr	r0, [r4, #0]
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
 801b754:	2100      	movs	r1, #0
 801b756:	3008      	adds	r0, #8
 801b758:	f7f2 f822 	bl	800d7a0 <net_if_ipv6_addr_lookup>
					  ip_hdr->ipv6->dst) ||
 801b75c:	2800      	cmp	r0, #0
 801b75e:	d1d0      	bne.n	801b702 <conn_are_end_points_valid+0x26>
	return !(my_src_addr && (src_port == dst_port));
 801b760:	2001      	movs	r0, #1
 801b762:	e7c8      	b.n	801b6f6 <conn_are_end_points_valid+0x1a>
 801b764:	2000      	movs	r0, #0
 801b766:	e7c6      	b.n	801b6f6 <conn_are_end_points_valid+0x1a>

0801b768 <net_tcp_finalize>:
{
 801b768:	b530      	push	{r4, r5, lr}
 801b76a:	b089      	sub	sp, #36	; 0x24
 801b76c:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(tcp_access, struct net_tcp_hdr);
 801b76e:	ab03      	add	r3, sp, #12
 801b770:	9301      	str	r3, [sp, #4]
 801b772:	2314      	movs	r3, #20
 801b774:	9302      	str	r3, [sp, #8]
	tcp_hdr = (struct net_tcp_hdr *)net_pkt_get_data(pkt, &tcp_access);
 801b776:	a901      	add	r1, sp, #4
 801b778:	f7f4 fa28 	bl	800fbcc <net_pkt_get_data>
	if (!tcp_hdr) {
 801b77c:	b198      	cbz	r0, 801b7a6 <net_tcp_finalize+0x3e>
 801b77e:	4605      	mov	r5, r0
	tcp_hdr->chksum = 0U;
 801b780:	2300      	movs	r3, #0
 801b782:	7403      	strb	r3, [r0, #16]
 801b784:	7443      	strb	r3, [r0, #17]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
 801b786:	69a0      	ldr	r0, [r4, #24]
 801b788:	f7fe f8eb 	bl	8019962 <net_if_need_calc_tx_checksum>
 801b78c:	b928      	cbnz	r0, 801b79a <net_tcp_finalize+0x32>
	return net_pkt_set_data(pkt, &tcp_access);
 801b78e:	a901      	add	r1, sp, #4
 801b790:	4620      	mov	r0, r4
 801b792:	f7ff f830 	bl	801a7f6 <net_pkt_set_data>
}
 801b796:	b009      	add	sp, #36	; 0x24
 801b798:	bd30      	pop	{r4, r5, pc}
	return net_calc_chksum(pkt, IPPROTO_TCP);
 801b79a:	2106      	movs	r1, #6
 801b79c:	4620      	mov	r0, r4
 801b79e:	f7fe fb68 	bl	8019e72 <net_calc_chksum>
		tcp_hdr->chksum = net_calc_chksum_tcp(pkt);
 801b7a2:	8228      	strh	r0, [r5, #16]
 801b7a4:	e7f3      	b.n	801b78e <net_tcp_finalize+0x26>
		return -ENOBUFS;
 801b7a6:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801b7aa:	e7f4      	b.n	801b796 <net_tcp_finalize+0x2e>

0801b7ac <net_udp_finalize>:
{
 801b7ac:	b530      	push	{r4, r5, lr}
 801b7ae:	b085      	sub	sp, #20
 801b7b0:	4604      	mov	r4, r0
	NET_PKT_DATA_ACCESS_DEFINE(udp_access, struct net_udp_hdr);
 801b7b2:	ab02      	add	r3, sp, #8
 801b7b4:	9300      	str	r3, [sp, #0]
 801b7b6:	2308      	movs	r3, #8
 801b7b8:	9301      	str	r3, [sp, #4]
	udp_hdr = (struct net_udp_hdr *)net_pkt_get_data(pkt, &udp_access);
 801b7ba:	4669      	mov	r1, sp
 801b7bc:	f7f4 fa06 	bl	800fbcc <net_pkt_get_data>
	if (!udp_hdr) {
 801b7c0:	b348      	cbz	r0, 801b816 <net_udp_finalize+0x6a>
 801b7c2:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
 801b7c4:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
 801b7c6:	2200      	movs	r2, #0
	while (buf) {
 801b7c8:	b11b      	cbz	r3, 801b7d2 <net_udp_finalize+0x26>
		bytes += buf->len;
 801b7ca:	8999      	ldrh	r1, [r3, #12]
 801b7cc:	440a      	add	r2, r1
		buf = buf->frags;
 801b7ce:	681b      	ldr	r3, [r3, #0]
 801b7d0:	e7fa      	b.n	801b7c8 <net_udp_finalize+0x1c>
	length = net_pkt_get_len(pkt) - net_pkt_ip_hdr_len(pkt) -
 801b7d2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801b7d6:	1ad2      	subs	r2, r2, r3
 801b7d8:	b292      	uxth	r2, r2
	return pkt->ipv6_ext_len;
 801b7da:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 801b7de:	1ad2      	subs	r2, r2, r3
 801b7e0:	b293      	uxth	r3, r2
	udp_hdr->len = htons(length);
 801b7e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801b7e6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 801b7ea:	80aa      	strh	r2, [r5, #4]
	if (net_if_need_calc_tx_checksum(net_pkt_iface(pkt))) {
 801b7ec:	69a0      	ldr	r0, [r4, #24]
 801b7ee:	f7fe f8b8 	bl	8019962 <net_if_need_calc_tx_checksum>
 801b7f2:	b928      	cbnz	r0, 801b800 <net_udp_finalize+0x54>
	return net_pkt_set_data(pkt, &udp_access);
 801b7f4:	4669      	mov	r1, sp
 801b7f6:	4620      	mov	r0, r4
 801b7f8:	f7fe fffd 	bl	801a7f6 <net_pkt_set_data>
}
 801b7fc:	b005      	add	sp, #20
 801b7fe:	bd30      	pop	{r4, r5, pc}
	uint16_t chksum = net_calc_chksum(pkt, IPPROTO_UDP);
 801b800:	2111      	movs	r1, #17
 801b802:	4620      	mov	r0, r4
 801b804:	f7fe fb35 	bl	8019e72 <net_calc_chksum>
	return chksum == 0U ? 0xffff : chksum;
 801b808:	4603      	mov	r3, r0
 801b80a:	b108      	cbz	r0, 801b810 <net_udp_finalize+0x64>
		udp_hdr->chksum = net_calc_chksum_udp(pkt);
 801b80c:	80eb      	strh	r3, [r5, #6]
 801b80e:	e7f1      	b.n	801b7f4 <net_udp_finalize+0x48>
 801b810:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b814:	e7fa      	b.n	801b80c <net_udp_finalize+0x60>
		return -ENOBUFS;
 801b816:	f06f 0068 	mvn.w	r0, #104	; 0x68
 801b81a:	e7ef      	b.n	801b7fc <net_udp_finalize+0x50>

0801b81c <iface_find_cb>:
	if (*iface_to_use == NULL &&
 801b81c:	680b      	ldr	r3, [r1, #0]
 801b81e:	b103      	cbz	r3, 801b822 <iface_find_cb+0x6>
}
 801b820:	4770      	bx	lr
	if (iface == NULL) {
 801b822:	b140      	cbz	r0, 801b836 <iface_find_cb+0x1a>
	return atomic_test_bit(iface->if_dev->flags, value);
 801b824:	6803      	ldr	r3, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
 801b826:	f3bf 8f5b 	dmb	ish
 801b82a:	68db      	ldr	r3, [r3, #12]
 801b82c:	f3bf 8f5b 	dmb	ish
	if (*iface_to_use == NULL &&
 801b830:	f013 0f08 	tst.w	r3, #8
 801b834:	d1f4      	bne.n	801b820 <iface_find_cb+0x4>
		*iface_to_use = iface;
 801b836:	6008      	str	r0, [r1, #0]
		return;
 801b838:	e7f2      	b.n	801b820 <iface_find_cb+0x4>

0801b83a <z_log_msg2_runtime_create>:
{
 801b83a:	b510      	push	{r4, lr}
 801b83c:	b086      	sub	sp, #24
	va_start(ap, fmt);
 801b83e:	ac0a      	add	r4, sp, #40	; 0x28
 801b840:	9405      	str	r4, [sp, #20]
 801b842:	9402      	str	r4, [sp, #8]
 801b844:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b846:	9401      	str	r4, [sp, #4]
 801b848:	9c08      	ldr	r4, [sp, #32]
 801b84a:	9400      	str	r4, [sp, #0]
 801b84c:	f7fc fa9a 	bl	8017d84 <z_impl_z_log_msg2_runtime_vcreate>
}
 801b850:	b006      	add	sp, #24
 801b852:	bd10      	pop	{r4, pc}

0801b854 <wait>:
{
 801b854:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
 801b856:	f000 fa9d 	bl	801bd94 <k_is_in_isr>
 801b85a:	b100      	cbz	r0, 801b85e <wait+0xa>
}
 801b85c:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
 801b85e:	2014      	movs	r0, #20
 801b860:	2100      	movs	r1, #0
 801b862:	f7fa fedf 	bl	8016624 <z_impl_k_sleep>
 801b866:	e7f9      	b.n	801b85c <wait+0x8>

0801b868 <uart_xmc4xxx_poll_out>:
{
 801b868:	b508      	push	{r3, lr}
	const struct uart_device_config *config = dev->config;
 801b86a:	6843      	ldr	r3, [r0, #4]
	XMC_UART_CH_Transmit((XMC_USIC_CH_t *)config->base, (uint16_t)c);
 801b86c:	6818      	ldr	r0, [r3, #0]
 801b86e:	f7fc fdab 	bl	80183c8 <XMC_UART_CH_Transmit>
}
 801b872:	bd08      	pop	{r3, pc}

0801b874 <uart_xmc4xxx_poll_in>:
{
 801b874:	b510      	push	{r4, lr}
 801b876:	460c      	mov	r4, r1
	const struct uart_device_config *config = dev->config;
 801b878:	6843      	ldr	r3, [r0, #4]
		XMC_UART_CH_GetReceivedData((XMC_USIC_CH_t *)config->base);
 801b87a:	6818      	ldr	r0, [r3, #0]
 801b87c:	f7fc fdb6 	bl	80183ec <XMC_UART_CH_GetReceivedData>
	*(uint16_t *)c =
 801b880:	8020      	strh	r0, [r4, #0]
}
 801b882:	2000      	movs	r0, #0
 801b884:	bd10      	pop	{r4, pc}

0801b886 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
 801b886:	2000      	movs	r0, #0
 801b888:	4770      	bx	lr

0801b88a <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
 801b88a:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
 801b88c:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
 801b88e:	4293      	cmp	r3, r2
 801b890:	d804      	bhi.n	801b89c <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 801b892:	6880      	ldr	r0, [r0, #8]
 801b894:	1a80      	subs	r0, r0, r2
 801b896:	4403      	add	r3, r0
 801b898:	1e58      	subs	r0, r3, #1
 801b89a:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
 801b89c:	1a9b      	subs	r3, r3, r2
 801b89e:	1e58      	subs	r0, r3, #1
}
 801b8a0:	4770      	bx	lr

0801b8a2 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 801b8a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b8a6:	4604      	mov	r4, r0
 801b8a8:	4688      	mov	r8, r1
 801b8aa:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
 801b8ac:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
 801b8ae:	6887      	ldr	r7, [r0, #8]
 801b8b0:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
 801b8b4:	4591      	cmp	r9, r2
 801b8b6:	d907      	bls.n	801b8c8 <_WriteNoCheck+0x26>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 801b8b8:	6840      	ldr	r0, [r0, #4]
 801b8ba:	4428      	add	r0, r5
 801b8bc:	f000 ffbc 	bl	801c838 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 801b8c0:	4435      	add	r5, r6
 801b8c2:	60e5      	str	r5, [r4, #12]
}
 801b8c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 801b8c8:	6840      	ldr	r0, [r0, #4]
 801b8ca:	464a      	mov	r2, r9
 801b8cc:	4428      	add	r0, r5
 801b8ce:	f000 ffb3 	bl	801c838 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 801b8d2:	1bed      	subs	r5, r5, r7
 801b8d4:	4435      	add	r5, r6
 801b8d6:	462a      	mov	r2, r5
 801b8d8:	eb08 0109 	add.w	r1, r8, r9
 801b8dc:	6860      	ldr	r0, [r4, #4]
 801b8de:	f000 ffab 	bl	801c838 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 801b8e2:	60e5      	str	r5, [r4, #12]
}
 801b8e4:	e7ee      	b.n	801b8c4 <_WriteNoCheck+0x22>

0801b8e6 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 801b8e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b8ea:	4606      	mov	r6, r0
 801b8ec:	4688      	mov	r8, r1
 801b8ee:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
 801b8f0:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
 801b8f2:	f04f 0900 	mov.w	r9, #0
 801b8f6:	e018      	b.n	801b92a <_WriteBlocking+0x44>
      NumBytesToWrite = RdOff - WrOff - 1u;
 801b8f8:	1b64      	subs	r4, r4, r5
 801b8fa:	1e62      	subs	r2, r4, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 801b8fc:	68b3      	ldr	r3, [r6, #8]
 801b8fe:	1b5c      	subs	r4, r3, r5
 801b900:	4294      	cmp	r4, r2
 801b902:	bf28      	it	cs
 801b904:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 801b906:	42bc      	cmp	r4, r7
 801b908:	bf28      	it	cs
 801b90a:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 801b90c:	6870      	ldr	r0, [r6, #4]
 801b90e:	4622      	mov	r2, r4
 801b910:	4641      	mov	r1, r8
 801b912:	4428      	add	r0, r5
 801b914:	f000 ff90 	bl	801c838 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 801b918:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
 801b91a:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
 801b91c:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
 801b91e:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
 801b920:	68b3      	ldr	r3, [r6, #8]
 801b922:	42ab      	cmp	r3, r5
 801b924:	d009      	beq.n	801b93a <_WriteBlocking+0x54>
    pRing->WrOff = WrOff;
 801b926:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
 801b928:	b14f      	cbz	r7, 801b93e <_WriteBlocking+0x58>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 801b92a:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
 801b92c:	42a5      	cmp	r5, r4
 801b92e:	d3e3      	bcc.n	801b8f8 <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 801b930:	68b2      	ldr	r2, [r6, #8]
 801b932:	1b64      	subs	r4, r4, r5
 801b934:	4414      	add	r4, r2
 801b936:	1e62      	subs	r2, r4, #1
 801b938:	e7e0      	b.n	801b8fc <_WriteBlocking+0x16>
      WrOff = 0u;
 801b93a:	2500      	movs	r5, #0
 801b93c:	e7f3      	b.n	801b926 <_WriteBlocking+0x40>
}
 801b93e:	4648      	mov	r0, r9
 801b940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801b944 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 801b944:	b508      	push	{r3, lr}
  _DoInit();
 801b946:	f7f8 ff07 	bl	8014758 <_DoInit>
}
 801b94a:	bd08      	pop	{r3, pc}

0801b94c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
 801b94c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
 801b94e:	f7ff fff9 	bl	801b944 <SEGGER_RTT_Init>

	return 0;
}
 801b952:	2000      	movs	r0, #0
 801b954:	bd08      	pop	{r3, pc}

0801b956 <tmux1208_disable>:
}
 801b956:	2000      	movs	r0, #0
 801b958:	4770      	bx	lr

0801b95a <gpio_xmc_port_toggle_bits>:
	return port->config;
 801b95a:	6843      	ldr	r3, [r0, #4]
	XMC_GPIO_PORT_t *reg = get_port_cfg(port)->port;
 801b95c:	685a      	ldr	r2, [r3, #4]
 801b95e:	b2cb      	uxtb	r3, r1
 801b960:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801b964:	4099      	lsls	r1, r3
 801b966:	6051      	str	r1, [r2, #4]
}
 801b968:	2000      	movs	r0, #0
 801b96a:	4770      	bx	lr

0801b96c <z_log_msg2_runtime_create>:
{
 801b96c:	b510      	push	{r4, lr}
 801b96e:	b086      	sub	sp, #24
	va_start(ap, fmt);
 801b970:	ac0a      	add	r4, sp, #40	; 0x28
 801b972:	9405      	str	r4, [sp, #20]
 801b974:	9402      	str	r4, [sp, #8]
 801b976:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b978:	9401      	str	r4, [sp, #4]
 801b97a:	9c08      	ldr	r4, [sp, #32]
 801b97c:	9400      	str	r4, [sp, #0]
 801b97e:	f7fc fa01 	bl	8017d84 <z_impl_z_log_msg2_runtime_vcreate>
}
 801b982:	b006      	add	sp, #24
 801b984:	bd10      	pop	{r4, pc}

0801b986 <print_buffer>:
	for (uint32_t i=0; i<len; i+=12)
 801b986:	2300      	movs	r3, #0
 801b988:	428b      	cmp	r3, r1
 801b98a:	d201      	bcs.n	801b990 <print_buffer+0xa>
 801b98c:	330c      	adds	r3, #12
 801b98e:	e7fb      	b.n	801b988 <print_buffer+0x2>
}
 801b990:	4770      	bx	lr

0801b992 <xmc_eth_get_capabilities>:
}
 801b992:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
 801b996:	4770      	bx	lr

0801b998 <xmc_eth_get_config>:
}
 801b998:	2000      	movs	r0, #0
 801b99a:	4770      	bx	lr

0801b99c <xmc_eth_start>:
}
 801b99c:	2000      	movs	r0, #0
 801b99e:	4770      	bx	lr

0801b9a0 <xmc_eth_stop>:
}
 801b9a0:	2000      	movs	r0, #0
 801b9a2:	4770      	bx	lr

0801b9a4 <xmc_eth_get_ptp_clock>:
	struct eth_context *context = dev->data;
 801b9a4:	6903      	ldr	r3, [r0, #16]
}
 801b9a6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801b9a8:	4770      	bx	lr

0801b9aa <eth0_config_func>:
DT_INST_FOREACH_STATUS_OKAY(XMC_ETH_INIT)
 801b9aa:	b508      	push	{r3, lr}
 801b9ac:	2200      	movs	r2, #0
 801b9ae:	4611      	mov	r1, r2
 801b9b0:	206c      	movs	r0, #108	; 0x6c
 801b9b2:	f7ea fdd7 	bl	8006564 <z_arm_irq_priority_set>
 801b9b6:	206c      	movs	r0, #108	; 0x6c
 801b9b8:	f7ea fdc4 	bl	8006544 <arch_irq_enable>
 801b9bc:	bd08      	pop	{r3, pc}

0801b9be <xmc_eth_set_config>:
	struct eth_context *context = dev->data;
 801b9be:	6900      	ldr	r0, [r0, #16]
	switch (type)
 801b9c0:	2903      	cmp	r1, #3
 801b9c2:	d128      	bne.n	801ba16 <xmc_eth_set_config+0x58>
{
 801b9c4:	b538      	push	{r3, r4, r5, lr}
 801b9c6:	6813      	ldr	r3, [r2, #0]
 801b9c8:	6483      	str	r3, [r0, #72]	; 0x48
 801b9ca:	8893      	ldrh	r3, [r2, #4]
 801b9cc:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
		context->eth_mac.address = MAC_ADDR_N(context->mac_addr);
 801b9d0:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
 801b9d4:	f890 4049 	ldrb.w	r4, [r0, #73]	; 0x49
 801b9d8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 801b9dc:	f890 404a 	ldrb.w	r4, [r0, #74]	; 0x4a
 801b9e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b9e4:	f890 404b 	ldrb.w	r4, [r0, #75]	; 0x4b
 801b9e8:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 801b9ec:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 801b9f0:	f890 404d 	ldrb.w	r4, [r0, #77]	; 0x4d
 801b9f4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 801b9f8:	6082      	str	r2, [r0, #8]
 801b9fa:	60c3      	str	r3, [r0, #12]
  eth_mac->regs->MAC_ADDRESS0_HIGH = (uint32_t)(addr >> 32);
 801b9fc:	6801      	ldr	r1, [r0, #0]
 801b9fe:	640b      	str	r3, [r1, #64]	; 0x40
  eth_mac->regs->MAC_ADDRESS0_LOW = (uint32_t)addr;
 801ba00:	6803      	ldr	r3, [r0, #0]
 801ba02:	645a      	str	r2, [r3, #68]	; 0x44
	return net_if_set_link_addr_locked(iface, addr, len, type);
 801ba04:	2303      	movs	r3, #3
 801ba06:	2206      	movs	r2, #6
 801ba08:	f100 0148 	add.w	r1, r0, #72	; 0x48
 801ba0c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801ba0e:	f7f1 fd05 	bl	800d41c <net_if_set_link_addr_locked>
		return 0;
 801ba12:	2000      	movs	r0, #0
}
 801ba14:	bd38      	pop	{r3, r4, r5, pc}
	return -ENOTSUP;
 801ba16:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 801ba1a:	4770      	bx	lr

0801ba1c <low_level_input>:
{
 801ba1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ba20:	b085      	sub	sp, #20
 801ba22:	4604      	mov	r4, r0
  return ((eth_mac->rx_desc[eth_mac->rx_index].status & ETH_MAC_DMA_RDES0_OWN) != 0U);
 801ba24:	6902      	ldr	r2, [r0, #16]
 801ba26:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 801ba2a:	015b      	lsls	r3, r3, #5
 801ba2c:	58d3      	ldr	r3, [r2, r3]
  if (XMC_ETH_MAC_IsRxDescriptorOwnedByDma(eth_mac) == false)
 801ba2e:	2b00      	cmp	r3, #0
 801ba30:	da0e      	bge.n	801ba50 <low_level_input+0x34>
	struct net_pkt *pkt = NULL;
 801ba32:	2600      	movs	r6, #0
  eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_RU_Msk;
 801ba34:	6822      	ldr	r2, [r4, #0]
 801ba36:	f241 0314 	movw	r3, #4116	; 0x1014
 801ba3a:	2180      	movs	r1, #128	; 0x80
 801ba3c:	50d1      	str	r1, [r2, r3]
  eth_mac->regs->RECEIVE_POLL_DEMAND = 0U;
 801ba3e:	6822      	ldr	r2, [r4, #0]
 801ba40:	f241 0308 	movw	r3, #4104	; 0x1008
 801ba44:	2100      	movs	r1, #0
 801ba46:	50d1      	str	r1, [r2, r3]
}
 801ba48:	4630      	mov	r0, r6
 801ba4a:	b005      	add	sp, #20
 801ba4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ba50:	460e      	mov	r6, r1
    len = XMC_ETH_MAC_GetRxFrameSize(eth_mac);
 801ba52:	f7fc fa9d 	bl	8017f90 <XMC_ETH_MAC_GetRxFrameSize>
 801ba56:	4605      	mov	r5, r0
    if ((len > 0U) && (len <= (uint32_t)XMC_ETH_MAC_BUF_SIZE))
 801ba58:	1e42      	subs	r2, r0, #1
 801ba5a:	f240 53f3 	movw	r3, #1523	; 0x5f3
 801ba5e:	429a      	cmp	r2, r3
 801ba60:	d83c      	bhi.n	801badc <low_level_input+0xc0>
		XMC_ETH_MAC_GetRxTimeStamp(eth_mac, &xmc_time);
 801ba62:	a902      	add	r1, sp, #8
 801ba64:	4620      	mov	r0, r4
 801ba66:	f7fc fbaf 	bl	80181c8 <XMC_ETH_MAC_GetRxTimeStamp>
		timestamp.second = xmc_time.seconds;
 801ba6a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801ba6e:	2700      	movs	r7, #0
		timestamp.nanosecond = xmc_time.nanoseconds;
 801ba70:	f8dd 800c 	ldr.w	r8, [sp, #12]
										   K_NO_WAIT);
 801ba74:	2200      	movs	r2, #0
 801ba76:	2300      	movs	r3, #0
		pkt = net_pkt_rx_alloc_with_buffer(context->iface, len, AF_UNSPEC, 0,
 801ba78:	e9cd 2300 	strd	r2, r3, [sp]
 801ba7c:	463b      	mov	r3, r7
 801ba7e:	463a      	mov	r2, r7
 801ba80:	4629      	mov	r1, r5
 801ba82:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 801ba84:	f7f4 f890 	bl	800fba8 <net_pkt_rx_alloc_with_buffer>
		if (pkt == NULL)
 801ba88:	4606      	mov	r6, r0
 801ba8a:	2800      	cmp	r0, #0
 801ba8c:	d0dc      	beq.n	801ba48 <low_level_input+0x2c>
  return (uint8_t *)(eth_mac->rx_desc[eth_mac->rx_index].buffer1);
 801ba8e:	6923      	ldr	r3, [r4, #16]
 801ba90:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 801ba94:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801ba98:	6899      	ldr	r1, [r3, #8]
		if (net_pkt_write(pkt, (void *)buffer, len) != 0)
 801ba9a:	462a      	mov	r2, r5
 801ba9c:	f7fe fe90 	bl	801a7c0 <net_pkt_write>
 801baa0:	b968      	cbnz	r0, 801babe <low_level_input+0xa2>
		if (eth_is_ptp_pkt(net_pkt_iface(pkt), pkt))
 801baa2:	4631      	mov	r1, r6
 801baa4:	69b0      	ldr	r0, [r6, #24]
 801baa6:	f7f9 fa25 	bl	8014ef4 <eth_is_ptp_pkt>
 801baaa:	b168      	cbz	r0, 801bac8 <low_level_input+0xac>
			pkt->timestamp.second = timestamp.second;
 801baac:	f8c6 9020 	str.w	r9, [r6, #32]
 801bab0:	6277      	str	r7, [r6, #36]	; 0x24
			pkt->timestamp.nanosecond = timestamp.nanosecond;
 801bab2:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
		XMC_ETH_MAC_ReturnRxDescriptor(eth_mac);
 801bab6:	4620      	mov	r0, r4
 801bab8:	f7fc fb08 	bl	80180cc <XMC_ETH_MAC_ReturnRxDescriptor>
 801babc:	e7ba      	b.n	801ba34 <low_level_input+0x18>
			net_pkt_unref(pkt);
 801babe:	4630      	mov	r0, r6
 801bac0:	f7fe fc6a 	bl	801a398 <net_pkt_unref>
			pkt = NULL;
 801bac4:	463e      	mov	r6, r7
			goto out;
 801bac6:	e7bf      	b.n	801ba48 <low_level_input+0x2c>
			pkt->timestamp.second = UINT64_MAX;
 801bac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bacc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bad0:	e9c6 2308 	strd	r2, r3, [r6, #32]
			pkt->timestamp.nanosecond = UINT32_MAX;
 801bad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bad8:	62b3      	str	r3, [r6, #40]	; 0x28
 801bada:	e7ec      	b.n	801bab6 <low_level_input+0x9a>
      XMC_ETH_MAC_ReturnRxDescriptor(eth_mac);
 801badc:	4620      	mov	r0, r4
 801bade:	f7fc faf5 	bl	80180cc <XMC_ETH_MAC_ReturnRxDescriptor>
	struct net_pkt *pkt = NULL;
 801bae2:	2600      	movs	r6, #0
 801bae4:	e7a6      	b.n	801ba34 <low_level_input+0x18>

0801bae6 <ethernetif_input>:
{
 801bae6:	b570      	push	{r4, r5, r6, lr}
 801bae8:	4606      	mov	r6, r0
 801baea:	460d      	mov	r5, r1
	pkt = low_level_input(eth_mac, context);
 801baec:	f7ff ff96 	bl	801ba1c <low_level_input>
 801baf0:	4604      	mov	r4, r0
	while (pkt != NULL)
 801baf2:	e00a      	b.n	801bb0a <ethernetif_input+0x24>
			r = net_recv_data(context->iface, pkt);
 801baf4:	4621      	mov	r1, r4
 801baf6:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 801baf8:	f7fd fd1a 	bl	8019530 <net_recv_data>
			if (r < 0)
 801bafc:	2800      	cmp	r0, #0
 801bafe:	db1b      	blt.n	801bb38 <ethernetif_input+0x52>
		pkt = low_level_input(eth_mac, context);
 801bb00:	4629      	mov	r1, r5
 801bb02:	4630      	mov	r0, r6
 801bb04:	f7ff ff8a 	bl	801ba1c <low_level_input>
 801bb08:	4604      	mov	r4, r0
	while (pkt != NULL)
 801bb0a:	b1cc      	cbz	r4, 801bb40 <ethernetif_input+0x5a>
	return pkt->frags->data;
 801bb0c:	68a3      	ldr	r3, [r4, #8]
 801bb0e:	689b      	ldr	r3, [r3, #8]
		switch (ntohs(NET_ETH_HDR(pkt)->type))
 801bb10:	899a      	ldrh	r2, [r3, #12]
 801bb12:	0213      	lsls	r3, r2, #8
 801bb14:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
 801bb18:	b29b      	uxth	r3, r3
 801bb1a:	f640 0206 	movw	r2, #2054	; 0x806
 801bb1e:	4293      	cmp	r3, r2
 801bb20:	d0e8      	beq.n	801baf4 <ethernetif_input+0xe>
 801bb22:	f648 02f7 	movw	r2, #35063	; 0x88f7
 801bb26:	4293      	cmp	r3, r2
 801bb28:	d0e4      	beq.n	801baf4 <ethernetif_input+0xe>
 801bb2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bb2e:	d0e1      	beq.n	801baf4 <ethernetif_input+0xe>
			net_pkt_unref(pkt);
 801bb30:	4620      	mov	r0, r4
 801bb32:	f7fe fc31 	bl	801a398 <net_pkt_unref>
			break;
 801bb36:	e7e3      	b.n	801bb00 <ethernetif_input+0x1a>
				net_pkt_unref(pkt);
 801bb38:	4620      	mov	r0, r4
 801bb3a:	f7fe fc2d 	bl	801a398 <net_pkt_unref>
 801bb3e:	e7df      	b.n	801bb00 <ethernetif_input+0x1a>
}
 801bb40:	bd70      	pop	{r4, r5, r6, pc}

0801bb42 <xmc_eth_rx_thread>:
{
 801bb42:	b510      	push	{r4, lr}
 801bb44:	4604      	mov	r4, r0
	LOG_ERR ("%s created", __func__);
 801bb46:	e007      	b.n	801bb58 <xmc_eth_rx_thread+0x16>
			ethernetif_input (&context->eth_mac, context);
 801bb48:	4621      	mov	r1, r4
 801bb4a:	4620      	mov	r0, r4
 801bb4c:	f7ff ffcb 	bl	801bae6 <ethernetif_input>
			XMC_ETH_MAC_EnableEvent((XMC_ETH_MAC_t *const)&context->eth_mac, (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE);
 801bb50:	2140      	movs	r1, #64	; 0x40
 801bb52:	4620      	mov	r0, r4
 801bb54:	f7fc fa6e 	bl	8018034 <XMC_ETH_MAC_EnableEvent>
		if (k_sem_take(&context->rx_thread_sem, K_FOREVER) == 0) {
 801bb58:	f204 70dc 	addw	r0, r4, #2012	; 0x7dc
	return z_impl_k_sem_take(sem, timeout);
 801bb5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bb60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bb64:	f7fa f80e 	bl	8015b84 <z_impl_k_sem_take>
 801bb68:	2800      	cmp	r0, #0
 801bb6a:	d1f5      	bne.n	801bb58 <xmc_eth_rx_thread+0x16>
 801bb6c:	e7ec      	b.n	801bb48 <xmc_eth_rx_thread+0x6>

0801bb6e <ptp_clock_xmc_get>:
{
 801bb6e:	b530      	push	{r4, r5, lr}
 801bb70:	b083      	sub	sp, #12
 801bb72:	460c      	mov	r4, r1
	struct ptp_context *ptp_context = dev->data;
 801bb74:	6903      	ldr	r3, [r0, #16]
	XMC_ETH_MAC_GetPTPTime ((XMC_ETH_MAC_t *const)&context->eth_mac, &xmc_time);
 801bb76:	4669      	mov	r1, sp
 801bb78:	6818      	ldr	r0, [r3, #0]
 801bb7a:	f7fc fae7 	bl	801814c <XMC_ETH_MAC_GetPTPTime>
	tm->_sec.low = xmc_time.seconds; //uint32_t
 801bb7e:	9b00      	ldr	r3, [sp, #0]
 801bb80:	6023      	str	r3, [r4, #0]
	tm->_sec.high = 0;
 801bb82:	2500      	movs	r5, #0
 801bb84:	80a5      	strh	r5, [r4, #4]
	tm->_sec.unused = 0;
 801bb86:	80e5      	strh	r5, [r4, #6]
	tm->nanosecond = (uint32_t)(fabs(xmc_time.nanoseconds));
 801bb88:	9801      	ldr	r0, [sp, #4]
 801bb8a:	f7e4 fc8b 	bl	80004a4 <__aeabi_i2d>
 801bb8e:	ec41 0b10 	vmov	d0, r0, r1
 801bb92:	f7fb f883 	bl	8016c9c <fabs>
 801bb96:	ec51 0b10 	vmov	r0, r1, d0
 801bb9a:	f7e4 ffaf 	bl	8000afc <__aeabi_d2uiz>
 801bb9e:	60a0      	str	r0, [r4, #8]
}
 801bba0:	4628      	mov	r0, r5
 801bba2:	b003      	add	sp, #12
 801bba4:	bd30      	pop	{r4, r5, pc}

0801bba6 <ptp_clock_xmc_set>:
{
 801bba6:	b500      	push	{lr}
 801bba8:	b083      	sub	sp, #12
	struct ptp_context *ptp_context = dev->data;
 801bbaa:	6903      	ldr	r3, [r0, #16]
	struct eth_context *context = ptp_context->eth_context;
 801bbac:	6818      	ldr	r0, [r3, #0]
	xmc_time.seconds = tm->_sec.low;
 801bbae:	680b      	ldr	r3, [r1, #0]
 801bbb0:	9300      	str	r3, [sp, #0]
	if (tm->nanosecond > INT_MAX)
 801bbb2:	688b      	ldr	r3, [r1, #8]
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	db07      	blt.n	801bbc8 <ptp_clock_xmc_set+0x22>
		xmc_time.nanoseconds = tm->nanosecond;
 801bbb8:	9301      	str	r3, [sp, #4]
	XMC_ETH_MAC_SetPTPTime ((XMC_ETH_MAC_t *const)&context->eth_mac, &xmc_time);
 801bbba:	4669      	mov	r1, sp
 801bbbc:	f7ea fae8 	bl	8006190 <XMC_ETH_MAC_SetPTPTime>
}
 801bbc0:	2000      	movs	r0, #0
 801bbc2:	b003      	add	sp, #12
 801bbc4:	f85d fb04 	ldr.w	pc, [sp], #4
		xmc_time.nanoseconds = INT_MAX;
 801bbc8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801bbcc:	9301      	str	r3, [sp, #4]
 801bbce:	e7f4      	b.n	801bbba <ptp_clock_xmc_set+0x14>

0801bbd0 <ETH_LWIP_Error>:
  	for (;;);
 801bbd0:	e7fe      	b.n	801bbd0 <ETH_LWIP_Error>

0801bbd2 <z_log_msg2_runtime_create>:
{
 801bbd2:	b510      	push	{r4, lr}
 801bbd4:	b086      	sub	sp, #24
	va_start(ap, fmt);
 801bbd6:	ac0a      	add	r4, sp, #40	; 0x28
 801bbd8:	9405      	str	r4, [sp, #20]
 801bbda:	9402      	str	r4, [sp, #8]
 801bbdc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801bbde:	9401      	str	r4, [sp, #4]
 801bbe0:	9c08      	ldr	r4, [sp, #32]
 801bbe2:	9400      	str	r4, [sp, #0]
 801bbe4:	f7fc f8ce 	bl	8017d84 <z_impl_z_log_msg2_runtime_vcreate>
}
 801bbe8:	b006      	add	sp, #24
 801bbea:	bd10      	pop	{r4, pc}

0801bbec <arch_system_halt>:
	__asm__ volatile(
 801bbec:	f04f 0204 	mov.w	r2, #4
 801bbf0:	f3ef 8311 	mrs	r3, BASEPRI
 801bbf4:	f382 8812 	msr	BASEPRI_MAX, r2
 801bbf8:	f3bf 8f6f 	isb	sy
	for (;;) {
 801bbfc:	e7fe      	b.n	801bbfc <arch_system_halt+0x10>

0801bbfe <k_heap_init>:
{
 801bbfe:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
 801bc00:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
 801bc04:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
 801bc06:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
 801bc08:	f7fb ff7a 	bl	8017b00 <sys_heap_init>
}
 801bc0c:	bd10      	pop	{r4, pc}

0801bc0e <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
 801bc0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc12:	b087      	sub	sp, #28
 801bc14:	4680      	mov	r8, r0
 801bc16:	9103      	str	r1, [sp, #12]
 801bc18:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
 801bc1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801bc1e:	f000 fcf7 	bl	801c610 <sys_clock_timeout_end_calc>
 801bc22:	4681      	mov	r9, r0
 801bc24:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
 801bc26:	f108 0314 	add.w	r3, r8, #20
 801bc2a:	9305      	str	r3, [sp, #20]
 801bc2c:	f04f 0304 	mov.w	r3, #4
 801bc30:	f3ef 8511 	mrs	r5, BASEPRI
 801bc34:	f383 8812 	msr	BASEPRI_MAX, r3
 801bc38:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
 801bc3c:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
 801bc40:	4654      	mov	r4, sl

	while (ret == NULL) {
 801bc42:	e00f      	b.n	801bc64 <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
 801bc44:	e9cd 6700 	strd	r6, r7, [sp]
 801bc48:	f108 020c 	add.w	r2, r8, #12
 801bc4c:	4629      	mov	r1, r5
 801bc4e:	9805      	ldr	r0, [sp, #20]
 801bc50:	f7fa fb20 	bl	8016294 <z_pend_curr>
 801bc54:	f04f 0304 	mov.w	r3, #4
 801bc58:	f3ef 8511 	mrs	r5, BASEPRI
 801bc5c:	f383 8812 	msr	BASEPRI_MAX, r3
 801bc60:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
 801bc64:	b9b4      	cbnz	r4, 801bc94 <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
 801bc66:	9a04      	ldr	r2, [sp, #16]
 801bc68:	9903      	ldr	r1, [sp, #12]
 801bc6a:	4640      	mov	r0, r8
 801bc6c:	f7fb fed7 	bl	8017a1e <sys_heap_aligned_alloc>
 801bc70:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
 801bc72:	f7fa feb7 	bl	80169e4 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
 801bc76:	b96c      	cbnz	r4, 801bc94 <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
 801bc78:	ebb9 0600 	subs.w	r6, r9, r0
 801bc7c:	eb6b 0701 	sbc.w	r7, fp, r1
 801bc80:	2e01      	cmp	r6, #1
 801bc82:	f177 0300 	sbcs.w	r3, r7, #0
 801bc86:	db05      	blt.n	801bc94 <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
 801bc88:	f1ba 0f00 	cmp.w	sl, #0
 801bc8c:	d1da      	bne.n	801bc44 <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
 801bc8e:	f04f 0a01 	mov.w	sl, #1
 801bc92:	e7d7      	b.n	801bc44 <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
 801bc94:	f385 8811 	msr	BASEPRI, r5
 801bc98:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
 801bc9c:	4620      	mov	r0, r4
 801bc9e:	b007      	add	sp, #28
 801bca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bca4 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
 801bca4:	b570      	push	{r4, r5, r6, lr}
 801bca6:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
 801bca8:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
 801bcac:	f04f 0304 	mov.w	r3, #4
 801bcb0:	f3ef 8511 	mrs	r5, BASEPRI
 801bcb4:	f383 8812 	msr	BASEPRI_MAX, r3
 801bcb8:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
 801bcbc:	f7fb fe6b 	bl	8017996 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
 801bcc0:	f104 000c 	add.w	r0, r4, #12
 801bcc4:	f000 fbbb 	bl	801c43e <z_unpend_all>
 801bcc8:	b920      	cbnz	r0, 801bcd4 <k_heap_free+0x30>
	__asm__ volatile(
 801bcca:	f385 8811 	msr	BASEPRI, r5
 801bcce:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
 801bcd2:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
 801bcd4:	4629      	mov	r1, r5
 801bcd6:	4630      	mov	r0, r6
 801bcd8:	f7fa f978 	bl	8015fcc <z_reschedule>
 801bcdc:	e7f9      	b.n	801bcd2 <k_heap_free+0x2e>

0801bcde <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
 801bcde:	6902      	ldr	r2, [r0, #16]
 801bce0:	6943      	ldr	r3, [r0, #20]
 801bce2:	431a      	orrs	r2, r3
 801bce4:	f012 0203 	ands.w	r2, r2, #3
 801bce8:	d10d      	bne.n	801bd06 <create_free_list+0x28>
	slab->free_list = NULL;
 801bcea:	2100      	movs	r1, #0
 801bcec:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
 801bcee:	e005      	b.n	801bcfc <create_free_list+0x1e>
		*(char **)p = slab->free_list;
 801bcf0:	6981      	ldr	r1, [r0, #24]
 801bcf2:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
 801bcf4:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
 801bcf6:	6901      	ldr	r1, [r0, #16]
 801bcf8:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
 801bcfa:	3201      	adds	r2, #1
 801bcfc:	68c1      	ldr	r1, [r0, #12]
 801bcfe:	4291      	cmp	r1, r2
 801bd00:	d8f6      	bhi.n	801bcf0 <create_free_list+0x12>
	return 0;
 801bd02:	2000      	movs	r0, #0
 801bd04:	4770      	bx	lr
		return -EINVAL;
 801bd06:	f06f 0015 	mvn.w	r0, #21
}
 801bd0a:	4770      	bx	lr

0801bd0c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
 801bd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd0e:	4604      	mov	r4, r0
 801bd10:	460d      	mov	r5, r1
	__asm__ volatile(
 801bd12:	f04f 0304 	mov.w	r3, #4
 801bd16:	f3ef 8611 	mrs	r6, BASEPRI
 801bd1a:	f383 8812 	msr	BASEPRI_MAX, r3
 801bd1e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
 801bd22:	6983      	ldr	r3, [r0, #24]
 801bd24:	b163      	cbz	r3, 801bd40 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
 801bd26:	682b      	ldr	r3, [r5, #0]
 801bd28:	69a2      	ldr	r2, [r4, #24]
 801bd2a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
 801bd2c:	682b      	ldr	r3, [r5, #0]
 801bd2e:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
 801bd30:	69e3      	ldr	r3, [r4, #28]
 801bd32:	3b01      	subs	r3, #1
 801bd34:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
 801bd36:	f386 8811 	msr	BASEPRI, r6
 801bd3a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
 801bd3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd40:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
 801bd44:	f000 fb50 	bl	801c3e8 <z_unpend_first_thread>
		if (pending_thread != NULL) {
 801bd48:	2800      	cmp	r0, #0
 801bd4a:	d0ec      	beq.n	801bd26 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
 801bd4c:	682a      	ldr	r2, [r5, #0]
 801bd4e:	2100      	movs	r1, #0
 801bd50:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
 801bd54:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
 801bd56:	f000 fa85 	bl	801c264 <z_ready_thread>
			z_reschedule(&slab->lock, key);
 801bd5a:	4631      	mov	r1, r6
 801bd5c:	4638      	mov	r0, r7
 801bd5e:	f7fa f935 	bl	8015fcc <z_reschedule>
			return;
 801bd62:	e7ec      	b.n	801bd3e <k_mem_slab_free+0x32>

0801bd64 <setup_thread_stack>:
{
 801bd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd66:	4606      	mov	r6, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 801bd68:	1dd4      	adds	r4, r2, #7
 801bd6a:	f024 0407 	bic.w	r4, r4, #7
 801bd6e:	f104 0520 	add.w	r5, r4, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
 801bd72:	f101 0720 	add.w	r7, r1, #32
	stack_ptr = (char *)stack + stack_obj_size;
 801bd76:	440d      	add	r5, r1
__ssp_bos_icheck3(memset, void *, int)
 801bd78:	4622      	mov	r2, r4
 801bd7a:	21aa      	movs	r1, #170	; 0xaa
 801bd7c:	4638      	mov	r0, r7
 801bd7e:	f000 fd7c 	bl	801c87a <memset>
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
 801bd82:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
	new_thread->stack_info.size = stack_buf_size;
 801bd86:	f8c6 408c 	str.w	r4, [r6, #140]	; 0x8c
	new_thread->stack_info.delta = delta;
 801bd8a:	2300      	movs	r3, #0
 801bd8c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
}
 801bd90:	4628      	mov	r0, r5
 801bd92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bd94 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801bd94:	f3ef 8005 	mrs	r0, IPSR
}
 801bd98:	3800      	subs	r0, #0
 801bd9a:	bf18      	it	ne
 801bd9c:	2001      	movne	r0, #1
 801bd9e:	4770      	bx	lr

0801bda0 <k_thread_name_get>:
}
 801bda0:	3062      	adds	r0, #98	; 0x62
 801bda2:	4770      	bx	lr

0801bda4 <z_impl_k_thread_start>:
{
 801bda4:	b508      	push	{r3, lr}
	z_sched_start(thread);
 801bda6:	f7fa fa3b 	bl	8016220 <z_sched_start>
}
 801bdaa:	bd08      	pop	{r3, pc}

0801bdac <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
 801bdac:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
 801bdae:	2400      	movs	r4, #0
 801bdb0:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
 801bdb2:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 801bdb4:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
 801bdb6:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
 801bdb8:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
 801bdba:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
 801bdbc:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
 801bdbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bdc2:	4770      	bx	lr

0801bdc4 <z_impl_k_thread_create>:
{
 801bdc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bdc6:	b087      	sub	sp, #28
 801bdc8:	4604      	mov	r4, r0
 801bdca:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 801bdce:	2500      	movs	r5, #0
 801bdd0:	9505      	str	r5, [sp, #20]
 801bdd2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801bdd4:	9504      	str	r5, [sp, #16]
 801bdd6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801bdd8:	9503      	str	r5, [sp, #12]
 801bdda:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801bddc:	9502      	str	r5, [sp, #8]
 801bdde:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801bde0:	9501      	str	r5, [sp, #4]
 801bde2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801bde4:	9500      	str	r5, [sp, #0]
 801bde6:	f7f9 fd11 	bl	801580c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
 801bdea:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801bdee:	bf08      	it	eq
 801bdf0:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
 801bdf4:	d102      	bne.n	801bdfc <z_impl_k_thread_create+0x38>
}
 801bdf6:	4620      	mov	r0, r4
 801bdf8:	b007      	add	sp, #28
 801bdfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
 801bdfc:	4632      	mov	r2, r6
 801bdfe:	463b      	mov	r3, r7
 801be00:	4620      	mov	r0, r4
 801be02:	f7f9 fcf1 	bl	80157e8 <schedule_new_thread>
 801be06:	e7f6      	b.n	801bdf6 <z_impl_k_thread_create+0x32>

0801be08 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
 801be08:	b508      	push	{r3, lr}
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 801be0a:	f7ea f9f7 	bl	80061fc <arch_cpu_idle>
 801be0e:	e7fc      	b.n	801be0a <idle+0x2>

0801be10 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
 801be10:	4288      	cmp	r0, r1
 801be12:	da00      	bge.n	801be16 <new_prio_for_inheritance+0x6>
 801be14:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
 801be16:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
 801be1a:	db01      	blt.n	801be20 <new_prio_for_inheritance+0x10>
 801be1c:	4608      	mov	r0, r1
 801be1e:	4770      	bx	lr
 801be20:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
 801be24:	4770      	bx	lr

0801be26 <adjust_owner_prio>:
{
 801be26:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
 801be28:	6880      	ldr	r0, [r0, #8]
 801be2a:	f990 300e 	ldrsb.w	r3, [r0, #14]
 801be2e:	428b      	cmp	r3, r1
 801be30:	d101      	bne.n	801be36 <adjust_owner_prio+0x10>
	return false;
 801be32:	2000      	movs	r0, #0
}
 801be34:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
 801be36:	f7fa fa41 	bl	80162bc <z_set_prio>
 801be3a:	e7fb      	b.n	801be34 <adjust_owner_prio+0xe>

0801be3c <z_impl_k_mutex_init>:
{
 801be3c:	4603      	mov	r3, r0
	mutex->owner = NULL;
 801be3e:	2000      	movs	r0, #0
 801be40:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
 801be42:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
 801be44:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
 801be46:	605b      	str	r3, [r3, #4]
}
 801be48:	4770      	bx	lr

0801be4a <prepare_thread_to_run>:
{
 801be4a:	b508      	push	{r3, lr}
 801be4c:	2200      	movs	r2, #0
 801be4e:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
 801be52:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
 801be54:	f000 fa06 	bl	801c264 <z_ready_thread>
}
 801be58:	bd08      	pop	{r3, pc}

0801be5a <queue_insert>:
{
 801be5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801be5e:	4604      	mov	r4, r0
 801be60:	460f      	mov	r7, r1
 801be62:	4615      	mov	r5, r2
 801be64:	461e      	mov	r6, r3
 801be66:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
 801be6a:	f100 0908 	add.w	r9, r0, #8
	__asm__ volatile(
 801be6e:	f04f 0304 	mov.w	r3, #4
 801be72:	f3ef 8811 	mrs	r8, BASEPRI
 801be76:	f383 8812 	msr	BASEPRI_MAX, r3
 801be7a:	f3bf 8f6f 	isb	sy
	if (is_append) {
 801be7e:	b102      	cbz	r2, 801be82 <queue_insert+0x28>
	return list->tail;
 801be80:	6847      	ldr	r7, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
 801be82:	f104 000c 	add.w	r0, r4, #12
 801be86:	f000 faaf 	bl	801c3e8 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
 801be8a:	b9a0      	cbnz	r0, 801beb6 <queue_insert+0x5c>
	if (alloc) {
 801be8c:	b9e6      	cbnz	r6, 801bec8 <queue_insert+0x6e>
	node->next_and_flags = flags;
 801be8e:	2300      	movs	r3, #0
 801be90:	602b      	str	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
 801be92:	b357      	cbz	r7, 801beea <queue_insert+0x90>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
 801be94:	683b      	ldr	r3, [r7, #0]
Z_GENLIST_INSERT(sflist, sfnode)
 801be96:	f033 0303 	bics.w	r3, r3, #3
 801be9a:	d134      	bne.n	801bf06 <queue_insert+0xac>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 801be9c:	682b      	ldr	r3, [r5, #0]
 801be9e:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 801bea2:	602b      	str	r3, [r5, #0]
	return list->tail;
 801bea4:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
 801bea6:	b35a      	cbz	r2, 801bf00 <queue_insert+0xa6>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 801bea8:	6813      	ldr	r3, [r2, #0]
 801beaa:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 801beae:	432b      	orrs	r3, r5
 801beb0:	6013      	str	r3, [r2, #0]
	list->tail = node;
 801beb2:	6065      	str	r5, [r4, #4]
}
 801beb4:	e031      	b.n	801bf1a <queue_insert+0xc0>
		prepare_thread_to_run(first_pending_thread, data);
 801beb6:	4629      	mov	r1, r5
 801beb8:	f7ff ffc7 	bl	801be4a <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
 801bebc:	4641      	mov	r1, r8
 801bebe:	4648      	mov	r0, r9
 801bec0:	f7fa f884 	bl	8015fcc <z_reschedule>
		return 0;
 801bec4:	2000      	movs	r0, #0
 801bec6:	e032      	b.n	801bf2e <queue_insert+0xd4>
	return z_thread_aligned_alloc(0, size);
 801bec8:	2108      	movs	r1, #8
 801beca:	2000      	movs	r0, #0
 801becc:	f7fa fe76 	bl	8016bbc <z_thread_aligned_alloc>
		if (anode == NULL) {
 801bed0:	b120      	cbz	r0, 801bedc <queue_insert+0x82>
		anode->data = data;
 801bed2:	6045      	str	r5, [r0, #4]
	node->next_and_flags = flags;
 801bed4:	2201      	movs	r2, #1
 801bed6:	6002      	str	r2, [r0, #0]
		data = anode;
 801bed8:	4605      	mov	r5, r0
 801beda:	e7da      	b.n	801be92 <queue_insert+0x38>
	__asm__ volatile(
 801bedc:	f388 8811 	msr	BASEPRI, r8
 801bee0:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
 801bee4:	f06f 000b 	mvn.w	r0, #11
 801bee8:	e021      	b.n	801bf2e <queue_insert+0xd4>
	return list->head;
 801beea:	6822      	ldr	r2, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 801beec:	682b      	ldr	r3, [r5, #0]
 801beee:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 801bef2:	4313      	orrs	r3, r2
 801bef4:	602b      	str	r3, [r5, #0]
	list->head = node;
 801bef6:	6025      	str	r5, [r4, #0]
	return list->tail;
 801bef8:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
 801befa:	b973      	cbnz	r3, 801bf1a <queue_insert+0xc0>
	list->tail = node;
 801befc:	6065      	str	r5, [r4, #4]
}
 801befe:	e00c      	b.n	801bf1a <queue_insert+0xc0>
	list->tail = node;
 801bf00:	6065      	str	r5, [r4, #4]
	list->head = node;
 801bf02:	6025      	str	r5, [r4, #0]
}
 801bf04:	e009      	b.n	801bf1a <queue_insert+0xc0>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 801bf06:	682a      	ldr	r2, [r5, #0]
 801bf08:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 801bf0c:	4313      	orrs	r3, r2
 801bf0e:	602b      	str	r3, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 801bf10:	683b      	ldr	r3, [r7, #0]
 801bf12:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
 801bf16:	431d      	orrs	r5, r3
 801bf18:	603d      	str	r5, [r7, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
 801bf1a:	2104      	movs	r1, #4
 801bf1c:	f104 0014 	add.w	r0, r4, #20
 801bf20:	f000 fc3f 	bl	801c7a2 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
 801bf24:	4641      	mov	r1, r8
 801bf26:	4648      	mov	r0, r9
 801bf28:	f7fa f850 	bl	8015fcc <z_reschedule>
	return 0;
 801bf2c:	2000      	movs	r0, #0
}
 801bf2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801bf32 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
 801bf32:	b160      	cbz	r0, 801bf4e <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
 801bf34:	6803      	ldr	r3, [r0, #0]
 801bf36:	f013 0f03 	tst.w	r3, #3
 801bf3a:	d008      	beq.n	801bf4e <z_queue_node_peek+0x1c>
{
 801bf3c:	b510      	push	{r4, lr}
		ret = anode->data;
 801bf3e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
 801bf40:	b909      	cbnz	r1, 801bf46 <z_queue_node_peek+0x14>
		ret = anode->data;
 801bf42:	4620      	mov	r0, r4
}
 801bf44:	bd10      	pop	{r4, pc}
			k_free(anode);
 801bf46:	f000 fc50 	bl	801c7ea <k_free>
		ret = anode->data;
 801bf4a:	4620      	mov	r0, r4
 801bf4c:	e7fa      	b.n	801bf44 <z_queue_node_peek+0x12>
}
 801bf4e:	4770      	bx	lr

0801bf50 <z_impl_k_queue_init>:
	list->head = NULL;
 801bf50:	2300      	movs	r3, #0
 801bf52:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
 801bf54:	6043      	str	r3, [r0, #4]
	queue->lock = (struct k_spinlock) {};
 801bf56:	7203      	strb	r3, [r0, #8]
 801bf58:	f100 030c 	add.w	r3, r0, #12
	list->head = (sys_dnode_t *)list;
 801bf5c:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
 801bf5e:	6103      	str	r3, [r0, #16]
	sys_dlist_init(&queue->poll_events);
 801bf60:	f100 0314 	add.w	r3, r0, #20
	list->head = (sys_dnode_t *)list;
 801bf64:	6143      	str	r3, [r0, #20]
	list->tail = (sys_dnode_t *)list;
 801bf66:	6183      	str	r3, [r0, #24]
}
 801bf68:	4770      	bx	lr

0801bf6a <k_queue_append>:
{
 801bf6a:	b500      	push	{lr}
 801bf6c:	b083      	sub	sp, #12
 801bf6e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
 801bf70:	2301      	movs	r3, #1
 801bf72:	9300      	str	r3, [sp, #0]
 801bf74:	2300      	movs	r3, #0
 801bf76:	4619      	mov	r1, r3
 801bf78:	f7ff ff6f 	bl	801be5a <queue_insert>
}
 801bf7c:	b003      	add	sp, #12
 801bf7e:	f85d fb04 	ldr.w	pc, [sp], #4

0801bf82 <k_queue_prepend>:
{
 801bf82:	b500      	push	{lr}
 801bf84:	b083      	sub	sp, #12
 801bf86:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
 801bf88:	2100      	movs	r1, #0
 801bf8a:	9100      	str	r1, [sp, #0]
 801bf8c:	460b      	mov	r3, r1
 801bf8e:	f7ff ff64 	bl	801be5a <queue_insert>
}
 801bf92:	b003      	add	sp, #12
 801bf94:	f85d fb04 	ldr.w	pc, [sp], #4

0801bf98 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
 801bf98:	b15a      	cbz	r2, 801bfb2 <z_impl_k_sem_init+0x1a>
 801bf9a:	428a      	cmp	r2, r1
 801bf9c:	d30c      	bcc.n	801bfb8 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
 801bf9e:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
 801bfa0:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
 801bfa2:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
 801bfa4:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
 801bfa6:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
 801bfaa:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
 801bfac:	6143      	str	r3, [r0, #20]
	return 0;
 801bfae:	2000      	movs	r0, #0
 801bfb0:	4770      	bx	lr
		return -EINVAL;
 801bfb2:	f06f 0015 	mvn.w	r0, #21
 801bfb6:	4770      	bx	lr
 801bfb8:	f06f 0015 	mvn.w	r0, #21
}
 801bfbc:	4770      	bx	lr

0801bfbe <cancel_async_locked>:
{
 801bfbe:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
 801bfc0:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
 801bfc2:	f012 0f02 	tst.w	r2, #2
 801bfc6:	d009      	beq.n	801bfdc <cancel_async_locked+0x1e>
	return *flagp;
 801bfc8:	68c2      	ldr	r2, [r0, #12]
	if (ret != 0) {
 801bfca:	f012 000f 	ands.w	r0, r2, #15
 801bfce:	d038      	beq.n	801c042 <cancel_async_locked+0x84>
	*flagp |= BIT(bit);
 801bfd0:	f042 0202 	orr.w	r2, r2, #2
 801bfd4:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
 801bfd6:	f002 000f 	and.w	r0, r2, #15
	return ret;
 801bfda:	4770      	bx	lr
{
 801bfdc:	b410      	push	{r4}
		queue_remove_locked(work->queue, work);
 801bfde:	6884      	ldr	r4, [r0, #8]
	*flagp &= ~BIT(bit);
 801bfe0:	f022 0104 	bic.w	r1, r2, #4
 801bfe4:	60c1      	str	r1, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
 801bfe6:	f012 0f04 	tst.w	r2, #4
 801bfea:	d011      	beq.n	801c010 <cancel_async_locked+0x52>
	return list->head;
 801bfec:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 801bff0:	2100      	movs	r1, #0
 801bff2:	b16a      	cbz	r2, 801c010 <cancel_async_locked+0x52>
 801bff4:	4290      	cmp	r0, r2
 801bff6:	d002      	beq.n	801bffe <cancel_async_locked+0x40>
 801bff8:	4611      	mov	r1, r2
 801bffa:	6812      	ldr	r2, [r2, #0]
 801bffc:	e7f9      	b.n	801bff2 <cancel_async_locked+0x34>
Z_GENLIST_REMOVE(slist, snode)
 801bffe:	b199      	cbz	r1, 801c028 <cancel_async_locked+0x6a>
	return node->next;
 801c000:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
 801c002:	600a      	str	r2, [r1, #0]
	return list->tail;
 801c004:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
Z_GENLIST_REMOVE(slist, snode)
 801c008:	4293      	cmp	r3, r2
 801c00a:	d017      	beq.n	801c03c <cancel_async_locked+0x7e>
	parent->next = child;
 801c00c:	2200      	movs	r2, #0
 801c00e:	601a      	str	r2, [r3, #0]
	return *flagp;
 801c010:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
 801c012:	f012 000f 	ands.w	r0, r2, #15
 801c016:	d004      	beq.n	801c022 <cancel_async_locked+0x64>
	*flagp |= BIT(bit);
 801c018:	f042 0202 	orr.w	r2, r2, #2
 801c01c:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
 801c01e:	f002 000f 	and.w	r0, r2, #15
}
 801c022:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c026:	4770      	bx	lr
	return node->next;
 801c028:	681a      	ldr	r2, [r3, #0]
	list->head = node;
 801c02a:	f8c4 20e8 	str.w	r2, [r4, #232]	; 0xe8
	return list->tail;
 801c02e:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
Z_GENLIST_REMOVE(slist, snode)
 801c032:	428b      	cmp	r3, r1
 801c034:	d1ea      	bne.n	801c00c <cancel_async_locked+0x4e>
	list->tail = node;
 801c036:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
}
 801c03a:	e7e7      	b.n	801c00c <cancel_async_locked+0x4e>
	list->tail = node;
 801c03c:	f8c4 10ec 	str.w	r1, [r4, #236]	; 0xec
}
 801c040:	e7e4      	b.n	801c00c <cancel_async_locked+0x4e>
 801c042:	4770      	bx	lr

0801c044 <work_timeout>:
{
 801c044:	b510      	push	{r4, lr}
 801c046:	b082      	sub	sp, #8
 801c048:	4603      	mov	r3, r0
	__asm__ volatile(
 801c04a:	f04f 0204 	mov.w	r2, #4
 801c04e:	f3ef 8411 	mrs	r4, BASEPRI
 801c052:	f382 8812 	msr	BASEPRI_MAX, r2
 801c056:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
 801c05a:	2200      	movs	r2, #0
 801c05c:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
 801c05e:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
 801c062:	f022 0108 	bic.w	r1, r2, #8
 801c066:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
 801c06a:	f012 0f08 	tst.w	r2, #8
 801c06e:	d105      	bne.n	801c07c <work_timeout+0x38>
	__asm__ volatile(
 801c070:	f384 8811 	msr	BASEPRI, r4
 801c074:	f3bf 8f6f 	isb	sy
}
 801c078:	b002      	add	sp, #8
 801c07a:	bd10      	pop	{r4, pc}
 801c07c:	3810      	subs	r0, #16
		queue = dw->queue;
 801c07e:	699b      	ldr	r3, [r3, #24]
 801c080:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
 801c082:	a901      	add	r1, sp, #4
 801c084:	f7f9 fdcc 	bl	8015c20 <submit_to_queue_locked>
 801c088:	e7f2      	b.n	801c070 <work_timeout+0x2c>

0801c08a <cancel_delayable_async_locked>:
{
 801c08a:	b510      	push	{r4, lr}
 801c08c:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
 801c08e:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
 801c090:	f023 0208 	bic.w	r2, r3, #8
 801c094:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 801c096:	f013 0f08 	tst.w	r3, #8
 801c09a:	d103      	bne.n	801c0a4 <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
 801c09c:	4620      	mov	r0, r4
 801c09e:	f7ff ff8e 	bl	801bfbe <cancel_async_locked>
}
 801c0a2:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
 801c0a4:	3010      	adds	r0, #16
 801c0a6:	f000 fa4a 	bl	801c53e <z_abort_timeout>
		ret = true;
 801c0aa:	e7f7      	b.n	801c09c <cancel_delayable_async_locked+0x12>

0801c0ac <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
 801c0ac:	2300      	movs	r3, #0
 801c0ae:	6003      	str	r3, [r0, #0]
 801c0b0:	6083      	str	r3, [r0, #8]
 801c0b2:	60c3      	str	r3, [r0, #12]
 801c0b4:	6041      	str	r1, [r0, #4]
}
 801c0b6:	4770      	bx	lr

0801c0b8 <k_work_submit_to_queue>:
{
 801c0b8:	b530      	push	{r4, r5, lr}
 801c0ba:	b083      	sub	sp, #12
 801c0bc:	9001      	str	r0, [sp, #4]
 801c0be:	4608      	mov	r0, r1
	__asm__ volatile(
 801c0c0:	f04f 0304 	mov.w	r3, #4
 801c0c4:	f3ef 8511 	mrs	r5, BASEPRI
 801c0c8:	f383 8812 	msr	BASEPRI_MAX, r3
 801c0cc:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
 801c0d0:	a901      	add	r1, sp, #4
 801c0d2:	f7f9 fda5 	bl	8015c20 <submit_to_queue_locked>
 801c0d6:	4604      	mov	r4, r0
	__asm__ volatile(
 801c0d8:	f385 8811 	msr	BASEPRI, r5
 801c0dc:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 801c0e0:	2800      	cmp	r0, #0
 801c0e2:	dc02      	bgt.n	801c0ea <k_work_submit_to_queue+0x32>
}
 801c0e4:	4620      	mov	r0, r4
 801c0e6:	b003      	add	sp, #12
 801c0e8:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
 801c0ea:	f7fa fab9 	bl	8016660 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
 801c0ee:	2800      	cmp	r0, #0
 801c0f0:	d0f8      	beq.n	801c0e4 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
 801c0f2:	f7fa fa03 	bl	80164fc <z_impl_k_yield>
	return ret;
 801c0f6:	e7f5      	b.n	801c0e4 <k_work_submit_to_queue+0x2c>

0801c0f8 <k_work_init_delayable>:
{
 801c0f8:	b538      	push	{r3, r4, r5, lr}
 801c0fa:	4604      	mov	r4, r0
 801c0fc:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
 801c0fe:	2230      	movs	r2, #48	; 0x30
 801c100:	2100      	movs	r1, #0
 801c102:	f000 fbba 	bl	801c87a <memset>
 801c106:	6065      	str	r5, [r4, #4]
 801c108:	f44f 7380 	mov.w	r3, #256	; 0x100
 801c10c:	60e3      	str	r3, [r4, #12]
}
 801c10e:	bd38      	pop	{r3, r4, r5, pc}

0801c110 <k_work_reschedule_for_queue>:
{
 801c110:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c112:	b083      	sub	sp, #12
 801c114:	9001      	str	r0, [sp, #4]
 801c116:	460c      	mov	r4, r1
 801c118:	4616      	mov	r6, r2
 801c11a:	461d      	mov	r5, r3
	__asm__ volatile(
 801c11c:	f04f 0304 	mov.w	r3, #4
 801c120:	f3ef 8711 	mrs	r7, BASEPRI
 801c124:	f383 8812 	msr	BASEPRI_MAX, r3
 801c128:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
 801c12c:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
 801c12e:	f023 0208 	bic.w	r2, r3, #8
 801c132:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
 801c134:	f013 0f08 	tst.w	r3, #8
 801c138:	d10b      	bne.n	801c152 <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
 801c13a:	4632      	mov	r2, r6
 801c13c:	462b      	mov	r3, r5
 801c13e:	4621      	mov	r1, r4
 801c140:	a801      	add	r0, sp, #4
 801c142:	f7f9 fe8d 	bl	8015e60 <schedule_for_queue_locked>
	__asm__ volatile(
 801c146:	f387 8811 	msr	BASEPRI, r7
 801c14a:	f3bf 8f6f 	isb	sy
}
 801c14e:	b003      	add	sp, #12
 801c150:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
 801c152:	f101 0010 	add.w	r0, r1, #16
 801c156:	f000 f9f2 	bl	801c53e <z_abort_timeout>
		ret = true;
 801c15a:	e7ee      	b.n	801c13a <k_work_reschedule_for_queue+0x2a>

0801c15c <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
 801c15c:	b510      	push	{r4, lr}
	__asm__ volatile(
 801c15e:	f04f 0304 	mov.w	r3, #4
 801c162:	f3ef 8411 	mrs	r4, BASEPRI
 801c166:	f383 8812 	msr	BASEPRI_MAX, r3
 801c16a:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
 801c16e:	f7ff ff8c 	bl	801c08a <cancel_delayable_async_locked>
	__asm__ volatile(
 801c172:	f384 8811 	msr	BASEPRI, r4
 801c176:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
 801c17a:	bd10      	pop	{r4, pc}

0801c17c <thread_active_elsewhere>:
}
 801c17c:	2000      	movs	r0, #0
 801c17e:	4770      	bx	lr

0801c180 <pended_on_thread>:
}
 801c180:	6880      	ldr	r0, [r0, #8]
 801c182:	4770      	bx	lr

0801c184 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
 801c184:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
 801c188:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
 801c18c:	4283      	cmp	r3, r0
 801c18e:	d001      	beq.n	801c194 <z_sched_prio_cmp+0x10>
		return b2 - b1;
 801c190:	1ac0      	subs	r0, r0, r3
 801c192:	4770      	bx	lr
	return 0;
 801c194:	2000      	movs	r0, #0
}
 801c196:	4770      	bx	lr

0801c198 <z_unpend_thread_no_timeout>:
{
 801c198:	b538      	push	{r3, r4, r5, lr}
 801c19a:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 801c19c:	2300      	movs	r3, #0
	__asm__ volatile(
 801c19e:	f04f 0204 	mov.w	r2, #4
 801c1a2:	f3ef 8511 	mrs	r5, BASEPRI
 801c1a6:	f382 8812 	msr	BASEPRI_MAX, r2
 801c1aa:	f3bf 8f6f 	isb	sy
 801c1ae:	b98b      	cbnz	r3, 801c1d4 <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 801c1b0:	4620      	mov	r0, r4
 801c1b2:	f7ff ffe5 	bl	801c180 <pended_on_thread>
 801c1b6:	4621      	mov	r1, r4
 801c1b8:	f000 f822 	bl	801c200 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 801c1bc:	7b63      	ldrb	r3, [r4, #13]
 801c1be:	f023 0302 	bic.w	r3, r3, #2
 801c1c2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 801c1c4:	2300      	movs	r3, #0
 801c1c6:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 801c1c8:	f385 8811 	msr	BASEPRI, r5
 801c1cc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801c1d0:	2301      	movs	r3, #1
 801c1d2:	e7ec      	b.n	801c1ae <z_unpend_thread_no_timeout+0x16>
}
 801c1d4:	bd38      	pop	{r3, r4, r5, pc}

0801c1d6 <z_reschedule_irqlock>:
{
 801c1d6:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 801c1d8:	4603      	mov	r3, r0
 801c1da:	b920      	cbnz	r0, 801c1e6 <z_reschedule_irqlock+0x10>
 801c1dc:	f3ef 8205 	mrs	r2, IPSR
 801c1e0:	b942      	cbnz	r2, 801c1f4 <z_reschedule_irqlock+0x1e>
 801c1e2:	2201      	movs	r2, #1
 801c1e4:	e000      	b.n	801c1e8 <z_reschedule_irqlock+0x12>
 801c1e6:	2200      	movs	r2, #0
	if (resched(key)) {
 801c1e8:	b932      	cbnz	r2, 801c1f8 <z_reschedule_irqlock+0x22>
 801c1ea:	f383 8811 	msr	BASEPRI, r3
 801c1ee:	f3bf 8f6f 	isb	sy
}
 801c1f2:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 801c1f4:	2200      	movs	r2, #0
 801c1f6:	e7f7      	b.n	801c1e8 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
 801c1f8:	4618      	mov	r0, r3
 801c1fa:	f7ea f9fb 	bl	80065f4 <arch_swap>
	return ret;
 801c1fe:	e7f8      	b.n	801c1f2 <z_reschedule_irqlock+0x1c>

0801c200 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
 801c200:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
 801c202:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
 801c204:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 801c206:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 801c208:	2300      	movs	r3, #0
 801c20a:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
 801c20c:	604b      	str	r3, [r1, #4]
}
 801c20e:	4770      	bx	lr

0801c210 <z_unpend_thread>:
{
 801c210:	b538      	push	{r3, r4, r5, lr}
 801c212:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 801c214:	2300      	movs	r3, #0
	__asm__ volatile(
 801c216:	f04f 0204 	mov.w	r2, #4
 801c21a:	f3ef 8511 	mrs	r5, BASEPRI
 801c21e:	f382 8812 	msr	BASEPRI_MAX, r2
 801c222:	f3bf 8f6f 	isb	sy
 801c226:	b98b      	cbnz	r3, 801c24c <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 801c228:	4620      	mov	r0, r4
 801c22a:	f7ff ffa9 	bl	801c180 <pended_on_thread>
 801c22e:	4621      	mov	r1, r4
 801c230:	f7ff ffe6 	bl	801c200 <z_priq_dumb_remove>
 801c234:	7b63      	ldrb	r3, [r4, #13]
 801c236:	f023 0302 	bic.w	r3, r3, #2
 801c23a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 801c23c:	2300      	movs	r3, #0
 801c23e:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 801c240:	f385 8811 	msr	BASEPRI, r5
 801c244:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801c248:	2301      	movs	r3, #1
 801c24a:	e7ec      	b.n	801c226 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
 801c24c:	f104 0018 	add.w	r0, r4, #24
 801c250:	f000 f975 	bl	801c53e <z_abort_timeout>
}
 801c254:	bd38      	pop	{r3, r4, r5, pc}

0801c256 <z_priq_dumb_best>:
{
 801c256:	4603      	mov	r3, r0
	return list->head == list;
 801c258:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801c25a:	4283      	cmp	r3, r0
 801c25c:	d000      	beq.n	801c260 <z_priq_dumb_best+0xa>
}
 801c25e:	4770      	bx	lr
	struct k_thread *thread = NULL;
 801c260:	2000      	movs	r0, #0
	return thread;
 801c262:	e7fc      	b.n	801c25e <z_priq_dumb_best+0x8>

0801c264 <z_ready_thread>:
{
 801c264:	b538      	push	{r3, r4, r5, lr}
 801c266:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
 801c268:	2300      	movs	r3, #0
	__asm__ volatile(
 801c26a:	f04f 0204 	mov.w	r2, #4
 801c26e:	f3ef 8511 	mrs	r5, BASEPRI
 801c272:	f382 8812 	msr	BASEPRI_MAX, r2
 801c276:	f3bf 8f6f 	isb	sy
 801c27a:	e007      	b.n	801c28c <z_ready_thread+0x28>
			ready_thread(thread);
 801c27c:	4620      	mov	r0, r4
 801c27e:	f7f9 ff8f 	bl	80161a0 <ready_thread>
	__asm__ volatile(
 801c282:	f385 8811 	msr	BASEPRI, r5
 801c286:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801c28a:	2301      	movs	r3, #1
 801c28c:	b92b      	cbnz	r3, 801c29a <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
 801c28e:	4620      	mov	r0, r4
 801c290:	f7ff ff74 	bl	801c17c <thread_active_elsewhere>
 801c294:	2800      	cmp	r0, #0
 801c296:	d1f4      	bne.n	801c282 <z_ready_thread+0x1e>
 801c298:	e7f0      	b.n	801c27c <z_ready_thread+0x18>
}
 801c29a:	bd38      	pop	{r3, r4, r5, pc}

0801c29c <z_thread_timeout>:
{
 801c29c:	b570      	push	{r4, r5, r6, lr}
 801c29e:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 801c2a0:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
 801c2a4:	2300      	movs	r3, #0
	__asm__ volatile(
 801c2a6:	f04f 0204 	mov.w	r2, #4
 801c2aa:	f3ef 8611 	mrs	r6, BASEPRI
 801c2ae:	f382 8812 	msr	BASEPRI_MAX, r2
 801c2b2:	f3bf 8f6f 	isb	sy
 801c2b6:	e019      	b.n	801c2ec <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 801c2b8:	4628      	mov	r0, r5
 801c2ba:	f7ff ff61 	bl	801c180 <pended_on_thread>
 801c2be:	4629      	mov	r1, r5
 801c2c0:	f7ff ff9e 	bl	801c200 <z_priq_dumb_remove>
 801c2c4:	7b6b      	ldrb	r3, [r5, #13]
 801c2c6:	f023 0302 	bic.w	r3, r3, #2
 801c2ca:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
 801c2cc:	2300      	movs	r3, #0
 801c2ce:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
 801c2d0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 801c2d4:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
 801c2d8:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
 801c2dc:	4628      	mov	r0, r5
 801c2de:	f7f9 ff5f 	bl	80161a0 <ready_thread>
	__asm__ volatile(
 801c2e2:	f386 8811 	msr	BASEPRI, r6
 801c2e6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801c2ea:	2301      	movs	r3, #1
 801c2ec:	b94b      	cbnz	r3, 801c302 <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
 801c2ee:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
 801c2f2:	f013 0f28 	tst.w	r3, #40	; 0x28
 801c2f6:	d1f4      	bne.n	801c2e2 <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
 801c2f8:	f854 3c10 	ldr.w	r3, [r4, #-16]
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d1db      	bne.n	801c2b8 <z_thread_timeout+0x1c>
 801c300:	e7e6      	b.n	801c2d0 <z_thread_timeout+0x34>
}
 801c302:	bd70      	pop	{r4, r5, r6, pc}

0801c304 <add_to_waitq_locked>:
{
 801c304:	b570      	push	{r4, r5, r6, lr}
 801c306:	4605      	mov	r5, r0
 801c308:	460e      	mov	r6, r1
	unready_thread(thread);
 801c30a:	f7f9 ffa7 	bl	801625c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
 801c30e:	7b6b      	ldrb	r3, [r5, #13]
 801c310:	f043 0302 	orr.w	r3, r3, #2
 801c314:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
 801c316:	b1b6      	cbz	r6, 801c346 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
 801c318:	60ae      	str	r6, [r5, #8]
	return list->head == list;
 801c31a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801c31c:	42a6      	cmp	r6, r4
 801c31e:	d019      	beq.n	801c354 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801c320:	b164      	cbz	r4, 801c33c <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
 801c322:	4621      	mov	r1, r4
 801c324:	4628      	mov	r0, r5
 801c326:	f7ff ff2d 	bl	801c184 <z_sched_prio_cmp>
 801c32a:	2800      	cmp	r0, #0
 801c32c:	dc0c      	bgt.n	801c348 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 801c32e:	b12c      	cbz	r4, 801c33c <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
 801c330:	6873      	ldr	r3, [r6, #4]
 801c332:	429c      	cmp	r4, r3
 801c334:	d002      	beq.n	801c33c <add_to_waitq_locked+0x38>
 801c336:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801c338:	2c00      	cmp	r4, #0
 801c33a:	d1f1      	bne.n	801c320 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
 801c33c:	6873      	ldr	r3, [r6, #4]
	node->next = list;
 801c33e:	602e      	str	r6, [r5, #0]
	node->prev = tail;
 801c340:	606b      	str	r3, [r5, #4]
	tail->next = node;
 801c342:	601d      	str	r5, [r3, #0]
	list->tail = node;
 801c344:	6075      	str	r5, [r6, #4]
}
 801c346:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
 801c348:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
 801c34a:	606b      	str	r3, [r5, #4]
	node->next = successor;
 801c34c:	602c      	str	r4, [r5, #0]
	prev->next = node;
 801c34e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
 801c350:	6065      	str	r5, [r4, #4]
}
 801c352:	e7f8      	b.n	801c346 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 801c354:	2400      	movs	r4, #0
 801c356:	e7e3      	b.n	801c320 <add_to_waitq_locked+0x1c>

0801c358 <pend>:
{
 801c358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c35c:	4605      	mov	r5, r0
 801c35e:	460f      	mov	r7, r1
 801c360:	4691      	mov	r9, r2
 801c362:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
 801c364:	2400      	movs	r4, #0
	__asm__ volatile(
 801c366:	f04f 0304 	mov.w	r3, #4
 801c36a:	f3ef 8611 	mrs	r6, BASEPRI
 801c36e:	f383 8812 	msr	BASEPRI_MAX, r3
 801c372:	f3bf 8f6f 	isb	sy
 801c376:	b94c      	cbnz	r4, 801c38c <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
 801c378:	4639      	mov	r1, r7
 801c37a:	4628      	mov	r0, r5
 801c37c:	f7ff ffc2 	bl	801c304 <add_to_waitq_locked>
	__asm__ volatile(
 801c380:	f386 8811 	msr	BASEPRI, r6
 801c384:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801c388:	2401      	movs	r4, #1
 801c38a:	e7f4      	b.n	801c376 <pend+0x1e>
	add_thread_timeout(thread, timeout);
 801c38c:	464a      	mov	r2, r9
 801c38e:	4643      	mov	r3, r8
 801c390:	4628      	mov	r0, r5
 801c392:	f7f9 fdc7 	bl	8015f24 <add_thread_timeout>
}
 801c396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801c39a <z_unpend1_no_timeout>:
{
 801c39a:	b570      	push	{r4, r5, r6, lr}
 801c39c:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
 801c39e:	2300      	movs	r3, #0
	__asm__ volatile(
 801c3a0:	f04f 0204 	mov.w	r2, #4
 801c3a4:	f3ef 8511 	mrs	r5, BASEPRI
 801c3a8:	f382 8812 	msr	BASEPRI_MAX, r2
 801c3ac:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 801c3b0:	461c      	mov	r4, r3
 801c3b2:	e00f      	b.n	801c3d4 <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 801c3b4:	f7ff fee4 	bl	801c180 <pended_on_thread>
 801c3b8:	4621      	mov	r1, r4
 801c3ba:	f7ff ff21 	bl	801c200 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 801c3be:	7b63      	ldrb	r3, [r4, #13]
 801c3c0:	f023 0302 	bic.w	r3, r3, #2
 801c3c4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 801c3c6:	2300      	movs	r3, #0
 801c3c8:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
 801c3ca:	f385 8811 	msr	BASEPRI, r5
 801c3ce:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801c3d2:	2301      	movs	r3, #1
 801c3d4:	b933      	cbnz	r3, 801c3e4 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
 801c3d6:	4630      	mov	r0, r6
 801c3d8:	f7ff ff3d 	bl	801c256 <z_priq_dumb_best>
		if (thread != NULL) {
 801c3dc:	4604      	mov	r4, r0
 801c3de:	2800      	cmp	r0, #0
 801c3e0:	d1e8      	bne.n	801c3b4 <z_unpend1_no_timeout+0x1a>
 801c3e2:	e7f2      	b.n	801c3ca <z_unpend1_no_timeout+0x30>
}
 801c3e4:	4620      	mov	r0, r4
 801c3e6:	bd70      	pop	{r4, r5, r6, pc}

0801c3e8 <z_unpend_first_thread>:
{
 801c3e8:	b570      	push	{r4, r5, r6, lr}
 801c3ea:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
 801c3ec:	2300      	movs	r3, #0
	__asm__ volatile(
 801c3ee:	f04f 0204 	mov.w	r2, #4
 801c3f2:	f3ef 8511 	mrs	r5, BASEPRI
 801c3f6:	f382 8812 	msr	BASEPRI_MAX, r2
 801c3fa:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
 801c3fe:	461c      	mov	r4, r3
 801c400:	e013      	b.n	801c42a <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 801c402:	f7ff febd 	bl	801c180 <pended_on_thread>
 801c406:	4621      	mov	r1, r4
 801c408:	f7ff fefa 	bl	801c200 <z_priq_dumb_remove>
 801c40c:	7b63      	ldrb	r3, [r4, #13]
 801c40e:	f023 0302 	bic.w	r3, r3, #2
 801c412:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 801c414:	2300      	movs	r3, #0
 801c416:	60a3      	str	r3, [r4, #8]
 801c418:	f104 0018 	add.w	r0, r4, #24
 801c41c:	f000 f88f 	bl	801c53e <z_abort_timeout>
	__asm__ volatile(
 801c420:	f385 8811 	msr	BASEPRI, r5
 801c424:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801c428:	2301      	movs	r3, #1
 801c42a:	b933      	cbnz	r3, 801c43a <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
 801c42c:	4630      	mov	r0, r6
 801c42e:	f7ff ff12 	bl	801c256 <z_priq_dumb_best>
		if (thread != NULL) {
 801c432:	4604      	mov	r4, r0
 801c434:	2800      	cmp	r0, #0
 801c436:	d1e4      	bne.n	801c402 <z_unpend_first_thread+0x1a>
 801c438:	e7f2      	b.n	801c420 <z_unpend_first_thread+0x38>
}
 801c43a:	4620      	mov	r0, r4
 801c43c:	bd70      	pop	{r4, r5, r6, pc}

0801c43e <z_unpend_all>:
{
 801c43e:	b538      	push	{r3, r4, r5, lr}
 801c440:	4605      	mov	r5, r0
	int need_sched = 0;
 801c442:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 801c444:	e006      	b.n	801c454 <z_unpend_all+0x16>
		z_unpend_thread(thread);
 801c446:	4620      	mov	r0, r4
 801c448:	f7ff fee2 	bl	801c210 <z_unpend_thread>
		z_ready_thread(thread);
 801c44c:	4620      	mov	r0, r4
 801c44e:	f7ff ff09 	bl	801c264 <z_ready_thread>
		need_sched = 1;
 801c452:	2001      	movs	r0, #1
	return list->head == list;
 801c454:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 801c456:	42a5      	cmp	r5, r4
 801c458:	d001      	beq.n	801c45e <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
 801c45a:	2c00      	cmp	r4, #0
 801c45c:	d1f3      	bne.n	801c446 <z_unpend_all+0x8>
}
 801c45e:	bd38      	pop	{r3, r4, r5, pc}

0801c460 <init_ready_q>:
	sys_dlist_init(&rq->runq);
 801c460:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
 801c462:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
 801c464:	6083      	str	r3, [r0, #8]
}
 801c466:	4770      	bx	lr

0801c468 <z_sched_wake>:
{
 801c468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c46c:	4606      	mov	r6, r0
 801c46e:	4688      	mov	r8, r1
 801c470:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
 801c472:	2300      	movs	r3, #0
	__asm__ volatile(
 801c474:	f04f 0204 	mov.w	r2, #4
 801c478:	f3ef 8511 	mrs	r5, BASEPRI
 801c47c:	f382 8812 	msr	BASEPRI_MAX, r2
 801c480:	f3bf 8f6f 	isb	sy
	bool ret = false;
 801c484:	4699      	mov	r9, r3
 801c486:	e01b      	b.n	801c4c0 <z_sched_wake+0x58>
 801c488:	f8c0 809c 	str.w	r8, [r0, #156]	; 0x9c
	thread->base.swap_data = data;
 801c48c:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
 801c48e:	f7ff fe77 	bl	801c180 <pended_on_thread>
 801c492:	4621      	mov	r1, r4
 801c494:	f7ff feb4 	bl	801c200 <z_priq_dumb_remove>
 801c498:	7b63      	ldrb	r3, [r4, #13]
 801c49a:	f023 0302 	bic.w	r3, r3, #2
 801c49e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
 801c4a0:	2300      	movs	r3, #0
 801c4a2:	60a3      	str	r3, [r4, #8]
 801c4a4:	f104 0018 	add.w	r0, r4, #24
 801c4a8:	f000 f849 	bl	801c53e <z_abort_timeout>
			ready_thread(thread);
 801c4ac:	4620      	mov	r0, r4
 801c4ae:	f7f9 fe77 	bl	80161a0 <ready_thread>
			ret = true;
 801c4b2:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
 801c4b6:	f385 8811 	msr	BASEPRI, r5
 801c4ba:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
 801c4be:	2301      	movs	r3, #1
 801c4c0:	b933      	cbnz	r3, 801c4d0 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
 801c4c2:	4630      	mov	r0, r6
 801c4c4:	f7ff fec7 	bl	801c256 <z_priq_dumb_best>
		if (thread != NULL) {
 801c4c8:	4604      	mov	r4, r0
 801c4ca:	2800      	cmp	r0, #0
 801c4cc:	d1dc      	bne.n	801c488 <z_sched_wake+0x20>
 801c4ce:	e7f2      	b.n	801c4b6 <z_sched_wake+0x4e>
}
 801c4d0:	4648      	mov	r0, r9
 801c4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801c4d6 <remove_timeout>:
{
 801c4d6:	b538      	push	{r3, r4, r5, lr}
 801c4d8:	4604      	mov	r4, r0
	if (next(t) != NULL) {
 801c4da:	f7fa f92f 	bl	801673c <next>
 801c4de:	b148      	cbz	r0, 801c4f4 <remove_timeout+0x1e>
 801c4e0:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
 801c4e2:	6920      	ldr	r0, [r4, #16]
 801c4e4:	6965      	ldr	r5, [r4, #20]
 801c4e6:	6913      	ldr	r3, [r2, #16]
 801c4e8:	6951      	ldr	r1, [r2, #20]
 801c4ea:	181b      	adds	r3, r3, r0
 801c4ec:	eb45 0101 	adc.w	r1, r5, r1
 801c4f0:	6113      	str	r3, [r2, #16]
 801c4f2:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
 801c4f4:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
 801c4f6:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
 801c4f8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 801c4fa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 801c4fc:	2300      	movs	r3, #0
 801c4fe:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
 801c500:	6063      	str	r3, [r4, #4]
}
 801c502:	bd38      	pop	{r3, r4, r5, pc}

0801c504 <timeout_rem>:
	return node->next != NULL;
 801c504:	6803      	ldr	r3, [r0, #0]
	if (z_is_inactive_timeout(timeout)) {
 801c506:	b1bb      	cbz	r3, 801c538 <timeout_rem+0x34>
{
 801c508:	b570      	push	{r4, r5, r6, lr}
 801c50a:	4606      	mov	r6, r0
	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
 801c50c:	f7fa f90c 	bl	8016728 <first>
	k_ticks_t ticks = 0;
 801c510:	2400      	movs	r4, #0
 801c512:	2500      	movs	r5, #0
	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
 801c514:	b148      	cbz	r0, 801c52a <timeout_rem+0x26>
		ticks += t->dticks;
 801c516:	6903      	ldr	r3, [r0, #16]
 801c518:	6942      	ldr	r2, [r0, #20]
 801c51a:	18e4      	adds	r4, r4, r3
 801c51c:	eb42 0505 	adc.w	r5, r2, r5
		if (timeout == t) {
 801c520:	42b0      	cmp	r0, r6
 801c522:	d002      	beq.n	801c52a <timeout_rem+0x26>
	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
 801c524:	f7fa f90a 	bl	801673c <next>
 801c528:	e7f4      	b.n	801c514 <timeout_rem+0x10>
	return ticks - elapsed();
 801c52a:	f7fa f913 	bl	8016754 <elapsed>
 801c52e:	4603      	mov	r3, r0
 801c530:	1a20      	subs	r0, r4, r0
 801c532:	eb65 71e3 	sbc.w	r1, r5, r3, asr #31
}
 801c536:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 801c538:	2000      	movs	r0, #0
 801c53a:	2100      	movs	r1, #0
}
 801c53c:	4770      	bx	lr

0801c53e <z_abort_timeout>:
{
 801c53e:	b570      	push	{r4, r5, r6, lr}
 801c540:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
 801c542:	2300      	movs	r3, #0
	__asm__ volatile(
 801c544:	f04f 0204 	mov.w	r2, #4
 801c548:	f3ef 8611 	mrs	r6, BASEPRI
 801c54c:	f382 8812 	msr	BASEPRI_MAX, r2
 801c550:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
 801c554:	f06f 0015 	mvn.w	r0, #21
 801c558:	e008      	b.n	801c56c <z_abort_timeout+0x2e>
			remove_timeout(to);
 801c55a:	4620      	mov	r0, r4
 801c55c:	f7ff ffbb 	bl	801c4d6 <remove_timeout>
			ret = 0;
 801c560:	4628      	mov	r0, r5
	__asm__ volatile(
 801c562:	f386 8811 	msr	BASEPRI, r6
 801c566:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 801c56a:	2301      	movs	r3, #1
 801c56c:	461d      	mov	r5, r3
 801c56e:	b91b      	cbnz	r3, 801c578 <z_abort_timeout+0x3a>
 801c570:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
 801c572:	2b00      	cmp	r3, #0
 801c574:	d1f1      	bne.n	801c55a <z_abort_timeout+0x1c>
 801c576:	e7f4      	b.n	801c562 <z_abort_timeout+0x24>
}
 801c578:	bd70      	pop	{r4, r5, r6, pc}

0801c57a <z_timeout_remaining>:
{
 801c57a:	b538      	push	{r3, r4, r5, lr}
 801c57c:	4605      	mov	r5, r0
	LOCKED(&timeout_lock) {
 801c57e:	2300      	movs	r3, #0
	__asm__ volatile(
 801c580:	f04f 0204 	mov.w	r2, #4
 801c584:	f3ef 8411 	mrs	r4, BASEPRI
 801c588:	f382 8812 	msr	BASEPRI_MAX, r2
 801c58c:	f3bf 8f6f 	isb	sy
	k_ticks_t ticks = 0;
 801c590:	4618      	mov	r0, r3
 801c592:	4619      	mov	r1, r3
	LOCKED(&timeout_lock) {
 801c594:	b943      	cbnz	r3, 801c5a8 <z_timeout_remaining+0x2e>
		ticks = timeout_rem(timeout);
 801c596:	4628      	mov	r0, r5
 801c598:	f7ff ffb4 	bl	801c504 <timeout_rem>
	__asm__ volatile(
 801c59c:	f384 8811 	msr	BASEPRI, r4
 801c5a0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 801c5a4:	2301      	movs	r3, #1
 801c5a6:	e7f5      	b.n	801c594 <z_timeout_remaining+0x1a>
}
 801c5a8:	bd38      	pop	{r3, r4, r5, pc}

0801c5aa <z_set_timeout_expiry>:
{
 801c5aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5ac:	4606      	mov	r6, r0
 801c5ae:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
 801c5b0:	2300      	movs	r3, #0
	__asm__ volatile(
 801c5b2:	f04f 0204 	mov.w	r2, #4
 801c5b6:	f3ef 8511 	mrs	r5, BASEPRI
 801c5ba:	f382 8812 	msr	BASEPRI_MAX, r2
 801c5be:	f3bf 8f6f 	isb	sy
 801c5c2:	e00a      	b.n	801c5da <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
 801c5c4:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
 801c5c6:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 801c5ca:	2801      	cmp	r0, #1
 801c5cc:	dd00      	ble.n	801c5d0 <z_set_timeout_expiry+0x26>
 801c5ce:	b97c      	cbnz	r4, 801c5f0 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
 801c5d0:	f385 8811 	msr	BASEPRI, r5
 801c5d4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
 801c5d8:	2301      	movs	r3, #1
 801c5da:	461c      	mov	r4, r3
 801c5dc:	b97b      	cbnz	r3, 801c5fe <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
 801c5de:	f7fa f8c5 	bl	801676c <next_timeout>
			      || (ticks <= next_to);
 801c5e2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801c5e6:	d0ed      	beq.n	801c5c4 <z_set_timeout_expiry+0x1a>
 801c5e8:	42b0      	cmp	r0, r6
 801c5ea:	dbec      	blt.n	801c5c6 <z_set_timeout_expiry+0x1c>
 801c5ec:	2401      	movs	r4, #1
 801c5ee:	e7ea      	b.n	801c5c6 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
 801c5f0:	4639      	mov	r1, r7
 801c5f2:	42b0      	cmp	r0, r6
 801c5f4:	bfa8      	it	ge
 801c5f6:	4630      	movge	r0, r6
 801c5f8:	f7f7 fff6 	bl	80145e8 <sys_clock_set_timeout>
 801c5fc:	e7e8      	b.n	801c5d0 <z_set_timeout_expiry+0x26>
}
 801c5fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c600 <sys_clock_tick_get_32>:
{
 801c600:	b508      	push	{r3, lr}
	return (uint32_t)sys_clock_tick_get();
 801c602:	f7fa f9ef 	bl	80169e4 <sys_clock_tick_get>
}
 801c606:	bd08      	pop	{r3, pc}

0801c608 <z_impl_k_uptime_ticks>:
{
 801c608:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
 801c60a:	f7fa f9eb 	bl	80169e4 <sys_clock_tick_get>
}
 801c60e:	bd08      	pop	{r3, pc}

0801c610 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
 801c610:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 801c612:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 801c616:	bf08      	it	eq
 801c618:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
 801c61c:	d024      	beq.n	801c668 <sys_clock_timeout_end_calc+0x58>
 801c61e:	4604      	mov	r4, r0
 801c620:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
 801c622:	ea54 0105 	orrs.w	r1, r4, r5
 801c626:	d00d      	beq.n	801c644 <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
 801c628:	f06f 0101 	mvn.w	r1, #1
 801c62c:	1a0a      	subs	r2, r1, r0
 801c62e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801c632:	eb61 0305 	sbc.w	r3, r1, r5
 801c636:	2a00      	cmp	r2, #0
 801c638:	f173 0100 	sbcs.w	r1, r3, #0
 801c63c:	db05      	blt.n	801c64a <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
 801c63e:	4610      	mov	r0, r2
 801c640:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
 801c642:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
 801c644:	f7fa f9ce 	bl	80169e4 <sys_clock_tick_get>
 801c648:	e7fb      	b.n	801c642 <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
 801c64a:	f7fa f9cb 	bl	80169e4 <sys_clock_tick_get>
 801c64e:	4623      	mov	r3, r4
 801c650:	462a      	mov	r2, r5
 801c652:	2c01      	cmp	r4, #1
 801c654:	f175 0400 	sbcs.w	r4, r5, #0
 801c658:	db03      	blt.n	801c662 <sys_clock_timeout_end_calc+0x52>
 801c65a:	18c0      	adds	r0, r0, r3
 801c65c:	eb42 0101 	adc.w	r1, r2, r1
 801c660:	e7ef      	b.n	801c642 <sys_clock_timeout_end_calc+0x32>
 801c662:	2301      	movs	r3, #1
 801c664:	2200      	movs	r2, #0
 801c666:	e7f8      	b.n	801c65a <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
 801c668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c66c:	4601      	mov	r1, r0
 801c66e:	e7e8      	b.n	801c642 <sys_clock_timeout_end_calc+0x32>

0801c670 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
 801c670:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
 801c672:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
 801c674:	2300      	movs	r3, #0
 801c676:	6303      	str	r3, [r0, #48]	; 0x30
 801c678:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
 801c67c:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
 801c67e:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
 801c680:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 801c682:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
 801c684:	6343      	str	r3, [r0, #52]	; 0x34
}
 801c686:	4770      	bx	lr

0801c688 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
 801c688:	b510      	push	{r4, lr}
 801c68a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
 801c68c:	f7ff ff57 	bl	801c53e <z_abort_timeout>

	if (inactive) {
 801c690:	b9a0      	cbnz	r0, 801c6bc <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
 801c692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c694:	b10b      	cbz	r3, 801c69a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
 801c696:	4620      	mov	r0, r4
 801c698:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
 801c69a:	f104 0018 	add.w	r0, r4, #24
 801c69e:	f7ff fe7c 	bl	801c39a <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
 801c6a2:	b158      	cbz	r0, 801c6bc <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
 801c6a4:	f7ff fdde 	bl	801c264 <z_ready_thread>
	__asm__ volatile(
 801c6a8:	f04f 0304 	mov.w	r3, #4
 801c6ac:	f3ef 8011 	mrs	r0, BASEPRI
 801c6b0:	f383 8812 	msr	BASEPRI_MAX, r3
 801c6b4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 801c6b8:	f7ff fd8d 	bl	801c1d6 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
 801c6bc:	bd10      	pop	{r4, pc}

0801c6be <poller_thread>:
	return false;
}

static struct k_thread *poller_thread(struct z_poller *p)
{
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
 801c6be:	b108      	cbz	r0, 801c6c4 <poller_thread+0x6>
 801c6c0:	3860      	subs	r0, #96	; 0x60
 801c6c2:	4770      	bx	lr
}
 801c6c4:	4770      	bx	lr

0801c6c6 <signal_poller>:

	return events_registered;
}

static int signal_poller(struct k_poll_event *event, uint32_t state)
{
 801c6c6:	b538      	push	{r3, r4, r5, lr}
 801c6c8:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
 801c6ca:	6880      	ldr	r0, [r0, #8]
 801c6cc:	f7ff fff7 	bl	801c6be <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
 801c6d0:	7b43      	ldrb	r3, [r0, #13]

	__ASSERT(thread != NULL, "poller should have a thread\n");

	if (!z_is_thread_pending(thread)) {
 801c6d2:	f013 0f02 	tst.w	r3, #2
 801c6d6:	d028      	beq.n	801c72a <signal_poller+0x64>
 801c6d8:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
 801c6da:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
 801c6de:	f06f 0001 	mvn.w	r0, #1
 801c6e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801c6e6:	428b      	cmp	r3, r1
 801c6e8:	bf08      	it	eq
 801c6ea:	4282      	cmpeq	r2, r0
 801c6ec:	d01f      	beq.n	801c72e <signal_poller+0x68>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
 801c6ee:	4620      	mov	r0, r4
 801c6f0:	f7ff fd8e 	bl	801c210 <z_unpend_thread>
	arch_thread_return_value_set(thread,
 801c6f4:	2d08      	cmp	r5, #8
 801c6f6:	d00a      	beq.n	801c70e <signal_poller+0x48>
 801c6f8:	2300      	movs	r3, #0
 801c6fa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	uint8_t state = thread->base.thread_state;
 801c6fe:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
 801c700:	f013 0f1f 	tst.w	r3, #31
 801c704:	d108      	bne.n	801c718 <signal_poller+0x52>
	return node->next != NULL;
 801c706:	69a3      	ldr	r3, [r4, #24]
 801c708:	b123      	cbz	r3, 801c714 <signal_poller+0x4e>
 801c70a:	2300      	movs	r3, #0
 801c70c:	e005      	b.n	801c71a <signal_poller+0x54>
 801c70e:	f06f 0303 	mvn.w	r3, #3
 801c712:	e7f2      	b.n	801c6fa <signal_poller+0x34>
 801c714:	2301      	movs	r3, #1
 801c716:	e000      	b.n	801c71a <signal_poller+0x54>
 801c718:	2300      	movs	r3, #0
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
 801c71a:	b90b      	cbnz	r3, 801c720 <signal_poller+0x5a>
		return 0;
 801c71c:	2000      	movs	r0, #0
 801c71e:	e005      	b.n	801c72c <signal_poller+0x66>
	}

	z_ready_thread(thread);
 801c720:	4620      	mov	r0, r4
 801c722:	f7ff fd9f 	bl	801c264 <z_ready_thread>

	return 0;
 801c726:	2000      	movs	r0, #0
 801c728:	e000      	b.n	801c72c <signal_poller+0x66>
		return 0;
 801c72a:	2000      	movs	r0, #0
}
 801c72c:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
 801c72e:	f06f 000a 	mvn.w	r0, #10
 801c732:	e7fb      	b.n	801c72c <signal_poller+0x66>

0801c734 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
 801c734:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
 801c736:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
 801c738:	7823      	ldrb	r3, [r4, #0]
 801c73a:	b173      	cbz	r3, 801c75a <signal_triggered_work+0x26>
 801c73c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801c740:	b15d      	cbz	r5, 801c75a <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
 801c742:	f1a4 0614 	sub.w	r6, r4, #20
 801c746:	f104 0014 	add.w	r0, r4, #20
 801c74a:	f7ff fef8 	bl	801c53e <z_abort_timeout>
		twork->poll_result = 0;
 801c74e:	2300      	movs	r3, #0
 801c750:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
 801c752:	4631      	mov	r1, r6
 801c754:	4628      	mov	r0, r5
 801c756:	f7ff fcaf 	bl	801c0b8 <k_work_submit_to_queue>
	}

	return 0;
}
 801c75a:	2000      	movs	r0, #0
 801c75c:	bd70      	pop	{r4, r5, r6, pc}

0801c75e <signal_poll_event>:
{
 801c75e:	b570      	push	{r4, r5, r6, lr}
 801c760:	4604      	mov	r4, r0
 801c762:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
 801c764:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
 801c766:	b1d6      	cbz	r6, 801c79e <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
 801c768:	7873      	ldrb	r3, [r6, #1]
 801c76a:	2b01      	cmp	r3, #1
 801c76c:	d00d      	beq.n	801c78a <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
 801c76e:	2b02      	cmp	r3, #2
 801c770:	d012      	beq.n	801c798 <signal_poll_event+0x3a>
		poller->is_polling = false;
 801c772:	2000      	movs	r0, #0
 801c774:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
 801c776:	2300      	movs	r3, #0
 801c778:	60a3      	str	r3, [r4, #8]
	event->state |= state;
 801c77a:	68e3      	ldr	r3, [r4, #12]
 801c77c:	f3c3 3145 	ubfx	r1, r3, #13, #6
 801c780:	430d      	orrs	r5, r1
 801c782:	f365 3352 	bfi	r3, r5, #13, #6
 801c786:	60e3      	str	r3, [r4, #12]
}
 801c788:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
 801c78a:	f7ff ff9c 	bl	801c6c6 <signal_poller>
		poller->is_polling = false;
 801c78e:	2300      	movs	r3, #0
 801c790:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
 801c792:	4298      	cmp	r0, r3
 801c794:	daef      	bge.n	801c776 <signal_poll_event+0x18>
 801c796:	e7f7      	b.n	801c788 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
 801c798:	f7ff ffcc 	bl	801c734 <signal_triggered_work>
 801c79c:	e7f7      	b.n	801c78e <signal_poll_event+0x30>
	int retcode = 0;
 801c79e:	2000      	movs	r0, #0
 801c7a0:	e7e9      	b.n	801c776 <signal_poll_event+0x18>

0801c7a2 <z_handle_obj_poll_events>:
{
 801c7a2:	b508      	push	{r3, lr}
 801c7a4:	4603      	mov	r3, r0
	return list->head == list;
 801c7a6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
 801c7a8:	4283      	cmp	r3, r0
 801c7aa:	d009      	beq.n	801c7c0 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
 801c7ac:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
 801c7ae:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
 801c7b0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
 801c7b2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 801c7b4:	2300      	movs	r3, #0
 801c7b6:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
 801c7b8:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
 801c7ba:	b108      	cbz	r0, 801c7c0 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
 801c7bc:	f7ff ffcf 	bl	801c75e <signal_poll_event>
}
 801c7c0:	bd08      	pop	{r3, pc}

0801c7c2 <z_heap_aligned_alloc>:
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
 801c7c2:	3204      	adds	r2, #4
 801c7c4:	d20f      	bcs.n	801c7e6 <z_heap_aligned_alloc+0x24>
{
 801c7c6:	b5d0      	push	{r4, r6, r7, lr}
 801c7c8:	b082      	sub	sp, #8
 801c7ca:	4604      	mov	r4, r0
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
 801c7cc:	2600      	movs	r6, #0
 801c7ce:	2700      	movs	r7, #0
 801c7d0:	e9cd 6700 	strd	r6, r7, [sp]
 801c7d4:	f041 0104 	orr.w	r1, r1, #4
 801c7d8:	f7ff fa19 	bl	801bc0e <k_heap_aligned_alloc>
	if (mem == NULL) {
 801c7dc:	b108      	cbz	r0, 801c7e2 <z_heap_aligned_alloc+0x20>
	*heap_ref = heap;
 801c7de:	f840 4b04 	str.w	r4, [r0], #4
}
 801c7e2:	b002      	add	sp, #8
 801c7e4:	bdd0      	pop	{r4, r6, r7, pc}
		return NULL;
 801c7e6:	2000      	movs	r0, #0
}
 801c7e8:	4770      	bx	lr

0801c7ea <k_free>:
	if (ptr != NULL) {
 801c7ea:	b130      	cbz	r0, 801c7fa <k_free+0x10>
{
 801c7ec:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
 801c7ee:	1f01      	subs	r1, r0, #4
 801c7f0:	f850 0c04 	ldr.w	r0, [r0, #-4]
 801c7f4:	f7ff fa56 	bl	801bca4 <k_heap_free>
}
 801c7f8:	bd08      	pop	{r3, pc}
 801c7fa:	4770      	bx	lr

0801c7fc <abs>:
 801c7fc:	2800      	cmp	r0, #0
 801c7fe:	bfb8      	it	lt
 801c800:	4240      	neglt	r0, r0
 801c802:	4770      	bx	lr

0801c804 <llabs>:
 801c804:	460b      	mov	r3, r1
 801c806:	2800      	cmp	r0, #0
 801c808:	f173 0100 	sbcs.w	r1, r3, #0
 801c80c:	4602      	mov	r2, r0
 801c80e:	da02      	bge.n	801c816 <llabs+0x12>
 801c810:	4242      	negs	r2, r0
 801c812:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 801c816:	4610      	mov	r0, r2
 801c818:	4619      	mov	r1, r3
 801c81a:	4770      	bx	lr

0801c81c <memcmp>:
 801c81c:	b530      	push	{r4, r5, lr}
 801c81e:	3901      	subs	r1, #1
 801c820:	2400      	movs	r4, #0
 801c822:	42a2      	cmp	r2, r4
 801c824:	d101      	bne.n	801c82a <memcmp+0xe>
 801c826:	2000      	movs	r0, #0
 801c828:	e005      	b.n	801c836 <memcmp+0x1a>
 801c82a:	5d03      	ldrb	r3, [r0, r4]
 801c82c:	3401      	adds	r4, #1
 801c82e:	5d0d      	ldrb	r5, [r1, r4]
 801c830:	42ab      	cmp	r3, r5
 801c832:	d0f6      	beq.n	801c822 <memcmp+0x6>
 801c834:	1b58      	subs	r0, r3, r5
 801c836:	bd30      	pop	{r4, r5, pc}

0801c838 <memcpy>:
 801c838:	440a      	add	r2, r1
 801c83a:	4291      	cmp	r1, r2
 801c83c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801c840:	d100      	bne.n	801c844 <memcpy+0xc>
 801c842:	4770      	bx	lr
 801c844:	b510      	push	{r4, lr}
 801c846:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c84a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c84e:	4291      	cmp	r1, r2
 801c850:	d1f9      	bne.n	801c846 <memcpy+0xe>
 801c852:	bd10      	pop	{r4, pc}

0801c854 <__memcpy_chk>:
 801c854:	429a      	cmp	r2, r3
 801c856:	b508      	push	{r3, lr}
 801c858:	d901      	bls.n	801c85e <__memcpy_chk+0xa>
 801c85a:	f7ea ffc5 	bl	80077e8 <__chk_fail>
 801c85e:	4281      	cmp	r1, r0
 801c860:	d804      	bhi.n	801c86c <__memcpy_chk+0x18>
 801c862:	188b      	adds	r3, r1, r2
 801c864:	4298      	cmp	r0, r3
 801c866:	d3f8      	bcc.n	801c85a <__memcpy_chk+0x6>
 801c868:	4281      	cmp	r1, r0
 801c86a:	d102      	bne.n	801c872 <__memcpy_chk+0x1e>
 801c86c:	1883      	adds	r3, r0, r2
 801c86e:	4299      	cmp	r1, r3
 801c870:	d3f3      	bcc.n	801c85a <__memcpy_chk+0x6>
 801c872:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801c876:	f7ff bfdf 	b.w	801c838 <memcpy>

0801c87a <memset>:
 801c87a:	4402      	add	r2, r0
 801c87c:	4603      	mov	r3, r0
 801c87e:	4293      	cmp	r3, r2
 801c880:	d100      	bne.n	801c884 <memset+0xa>
 801c882:	4770      	bx	lr
 801c884:	f803 1b01 	strb.w	r1, [r3], #1
 801c888:	e7f9      	b.n	801c87e <memset+0x4>

0801c88a <_calloc_r>:
 801c88a:	b513      	push	{r0, r1, r4, lr}
 801c88c:	434a      	muls	r2, r1
 801c88e:	4611      	mov	r1, r2
 801c890:	9201      	str	r2, [sp, #4]
 801c892:	f7fa fb79 	bl	8016f88 <_malloc_r>
 801c896:	4604      	mov	r4, r0
 801c898:	b118      	cbz	r0, 801c8a2 <_calloc_r+0x18>
 801c89a:	9a01      	ldr	r2, [sp, #4]
 801c89c:	2100      	movs	r1, #0
 801c89e:	f7ff ffec 	bl	801c87a <memset>
 801c8a2:	4620      	mov	r0, r4
 801c8a4:	b002      	add	sp, #8
 801c8a6:	bd10      	pop	{r4, pc}

0801c8a8 <__cvt>:
 801c8a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c8ac:	ec55 4b10 	vmov	r4, r5, d0
 801c8b0:	2d00      	cmp	r5, #0
 801c8b2:	460e      	mov	r6, r1
 801c8b4:	4619      	mov	r1, r3
 801c8b6:	462b      	mov	r3, r5
 801c8b8:	bfbb      	ittet	lt
 801c8ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801c8be:	461d      	movlt	r5, r3
 801c8c0:	2300      	movge	r3, #0
 801c8c2:	232d      	movlt	r3, #45	; 0x2d
 801c8c4:	700b      	strb	r3, [r1, #0]
 801c8c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c8c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801c8cc:	4691      	mov	r9, r2
 801c8ce:	f023 0820 	bic.w	r8, r3, #32
 801c8d2:	bfbc      	itt	lt
 801c8d4:	4622      	movlt	r2, r4
 801c8d6:	4614      	movlt	r4, r2
 801c8d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c8dc:	d005      	beq.n	801c8ea <__cvt+0x42>
 801c8de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801c8e2:	d100      	bne.n	801c8e6 <__cvt+0x3e>
 801c8e4:	3601      	adds	r6, #1
 801c8e6:	2102      	movs	r1, #2
 801c8e8:	e000      	b.n	801c8ec <__cvt+0x44>
 801c8ea:	2103      	movs	r1, #3
 801c8ec:	ab03      	add	r3, sp, #12
 801c8ee:	9301      	str	r3, [sp, #4]
 801c8f0:	ab02      	add	r3, sp, #8
 801c8f2:	9300      	str	r3, [sp, #0]
 801c8f4:	ec45 4b10 	vmov	d0, r4, r5
 801c8f8:	4653      	mov	r3, sl
 801c8fa:	4632      	mov	r2, r6
 801c8fc:	f7e6 fa28 	bl	8002d50 <_dtoa_r>
 801c900:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801c904:	4607      	mov	r7, r0
 801c906:	d102      	bne.n	801c90e <__cvt+0x66>
 801c908:	f019 0f01 	tst.w	r9, #1
 801c90c:	d022      	beq.n	801c954 <__cvt+0xac>
 801c90e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c912:	eb07 0906 	add.w	r9, r7, r6
 801c916:	d110      	bne.n	801c93a <__cvt+0x92>
 801c918:	783b      	ldrb	r3, [r7, #0]
 801c91a:	2b30      	cmp	r3, #48	; 0x30
 801c91c:	d10a      	bne.n	801c934 <__cvt+0x8c>
 801c91e:	2200      	movs	r2, #0
 801c920:	2300      	movs	r3, #0
 801c922:	4620      	mov	r0, r4
 801c924:	4629      	mov	r1, r5
 801c926:	f7e4 f88f 	bl	8000a48 <__aeabi_dcmpeq>
 801c92a:	b918      	cbnz	r0, 801c934 <__cvt+0x8c>
 801c92c:	f1c6 0601 	rsb	r6, r6, #1
 801c930:	f8ca 6000 	str.w	r6, [sl]
 801c934:	f8da 3000 	ldr.w	r3, [sl]
 801c938:	4499      	add	r9, r3
 801c93a:	2200      	movs	r2, #0
 801c93c:	2300      	movs	r3, #0
 801c93e:	4620      	mov	r0, r4
 801c940:	4629      	mov	r1, r5
 801c942:	f7e4 f881 	bl	8000a48 <__aeabi_dcmpeq>
 801c946:	b108      	cbz	r0, 801c94c <__cvt+0xa4>
 801c948:	f8cd 900c 	str.w	r9, [sp, #12]
 801c94c:	2230      	movs	r2, #48	; 0x30
 801c94e:	9b03      	ldr	r3, [sp, #12]
 801c950:	454b      	cmp	r3, r9
 801c952:	d307      	bcc.n	801c964 <__cvt+0xbc>
 801c954:	9b03      	ldr	r3, [sp, #12]
 801c956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c958:	1bdb      	subs	r3, r3, r7
 801c95a:	4638      	mov	r0, r7
 801c95c:	6013      	str	r3, [r2, #0]
 801c95e:	b004      	add	sp, #16
 801c960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c964:	1c59      	adds	r1, r3, #1
 801c966:	9103      	str	r1, [sp, #12]
 801c968:	701a      	strb	r2, [r3, #0]
 801c96a:	e7f0      	b.n	801c94e <__cvt+0xa6>

0801c96c <__exponent>:
 801c96c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c96e:	4603      	mov	r3, r0
 801c970:	2900      	cmp	r1, #0
 801c972:	bfb8      	it	lt
 801c974:	4249      	neglt	r1, r1
 801c976:	f803 2b02 	strb.w	r2, [r3], #2
 801c97a:	bfb4      	ite	lt
 801c97c:	222d      	movlt	r2, #45	; 0x2d
 801c97e:	222b      	movge	r2, #43	; 0x2b
 801c980:	2909      	cmp	r1, #9
 801c982:	7042      	strb	r2, [r0, #1]
 801c984:	dd2a      	ble.n	801c9dc <__exponent+0x70>
 801c986:	f10d 0407 	add.w	r4, sp, #7
 801c98a:	46a4      	mov	ip, r4
 801c98c:	270a      	movs	r7, #10
 801c98e:	46a6      	mov	lr, r4
 801c990:	460a      	mov	r2, r1
 801c992:	fb91 f6f7 	sdiv	r6, r1, r7
 801c996:	fb07 1516 	mls	r5, r7, r6, r1
 801c99a:	3530      	adds	r5, #48	; 0x30
 801c99c:	2a63      	cmp	r2, #99	; 0x63
 801c99e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801c9a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801c9a6:	4631      	mov	r1, r6
 801c9a8:	dcf1      	bgt.n	801c98e <__exponent+0x22>
 801c9aa:	3130      	adds	r1, #48	; 0x30
 801c9ac:	f1ae 0502 	sub.w	r5, lr, #2
 801c9b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 801c9b4:	1c44      	adds	r4, r0, #1
 801c9b6:	4629      	mov	r1, r5
 801c9b8:	4561      	cmp	r1, ip
 801c9ba:	d30a      	bcc.n	801c9d2 <__exponent+0x66>
 801c9bc:	f10d 0209 	add.w	r2, sp, #9
 801c9c0:	eba2 020e 	sub.w	r2, r2, lr
 801c9c4:	4565      	cmp	r5, ip
 801c9c6:	bf88      	it	hi
 801c9c8:	2200      	movhi	r2, #0
 801c9ca:	4413      	add	r3, r2
 801c9cc:	1a18      	subs	r0, r3, r0
 801c9ce:	b003      	add	sp, #12
 801c9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c9d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 801c9da:	e7ed      	b.n	801c9b8 <__exponent+0x4c>
 801c9dc:	2330      	movs	r3, #48	; 0x30
 801c9de:	3130      	adds	r1, #48	; 0x30
 801c9e0:	7083      	strb	r3, [r0, #2]
 801c9e2:	70c1      	strb	r1, [r0, #3]
 801c9e4:	1d03      	adds	r3, r0, #4
 801c9e6:	e7f1      	b.n	801c9cc <__exponent+0x60>

0801c9e8 <_printf_common>:
 801c9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c9ec:	4616      	mov	r6, r2
 801c9ee:	4699      	mov	r9, r3
 801c9f0:	688a      	ldr	r2, [r1, #8]
 801c9f2:	690b      	ldr	r3, [r1, #16]
 801c9f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c9f8:	4293      	cmp	r3, r2
 801c9fa:	bfb8      	it	lt
 801c9fc:	4613      	movlt	r3, r2
 801c9fe:	6033      	str	r3, [r6, #0]
 801ca00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ca04:	4607      	mov	r7, r0
 801ca06:	460c      	mov	r4, r1
 801ca08:	b10a      	cbz	r2, 801ca0e <_printf_common+0x26>
 801ca0a:	3301      	adds	r3, #1
 801ca0c:	6033      	str	r3, [r6, #0]
 801ca0e:	6823      	ldr	r3, [r4, #0]
 801ca10:	0699      	lsls	r1, r3, #26
 801ca12:	bf42      	ittt	mi
 801ca14:	6833      	ldrmi	r3, [r6, #0]
 801ca16:	3302      	addmi	r3, #2
 801ca18:	6033      	strmi	r3, [r6, #0]
 801ca1a:	6825      	ldr	r5, [r4, #0]
 801ca1c:	f015 0506 	ands.w	r5, r5, #6
 801ca20:	d106      	bne.n	801ca30 <_printf_common+0x48>
 801ca22:	f104 0a19 	add.w	sl, r4, #25
 801ca26:	68e3      	ldr	r3, [r4, #12]
 801ca28:	6832      	ldr	r2, [r6, #0]
 801ca2a:	1a9b      	subs	r3, r3, r2
 801ca2c:	42ab      	cmp	r3, r5
 801ca2e:	dc26      	bgt.n	801ca7e <_printf_common+0x96>
 801ca30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ca34:	1e13      	subs	r3, r2, #0
 801ca36:	6822      	ldr	r2, [r4, #0]
 801ca38:	bf18      	it	ne
 801ca3a:	2301      	movne	r3, #1
 801ca3c:	0692      	lsls	r2, r2, #26
 801ca3e:	d42b      	bmi.n	801ca98 <_printf_common+0xb0>
 801ca40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ca44:	4649      	mov	r1, r9
 801ca46:	4638      	mov	r0, r7
 801ca48:	47c0      	blx	r8
 801ca4a:	3001      	adds	r0, #1
 801ca4c:	d01e      	beq.n	801ca8c <_printf_common+0xa4>
 801ca4e:	6823      	ldr	r3, [r4, #0]
 801ca50:	68e5      	ldr	r5, [r4, #12]
 801ca52:	6832      	ldr	r2, [r6, #0]
 801ca54:	f003 0306 	and.w	r3, r3, #6
 801ca58:	2b04      	cmp	r3, #4
 801ca5a:	bf08      	it	eq
 801ca5c:	1aad      	subeq	r5, r5, r2
 801ca5e:	68a3      	ldr	r3, [r4, #8]
 801ca60:	6922      	ldr	r2, [r4, #16]
 801ca62:	bf0c      	ite	eq
 801ca64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ca68:	2500      	movne	r5, #0
 801ca6a:	4293      	cmp	r3, r2
 801ca6c:	bfc4      	itt	gt
 801ca6e:	1a9b      	subgt	r3, r3, r2
 801ca70:	18ed      	addgt	r5, r5, r3
 801ca72:	2600      	movs	r6, #0
 801ca74:	341a      	adds	r4, #26
 801ca76:	42b5      	cmp	r5, r6
 801ca78:	d11a      	bne.n	801cab0 <_printf_common+0xc8>
 801ca7a:	2000      	movs	r0, #0
 801ca7c:	e008      	b.n	801ca90 <_printf_common+0xa8>
 801ca7e:	2301      	movs	r3, #1
 801ca80:	4652      	mov	r2, sl
 801ca82:	4649      	mov	r1, r9
 801ca84:	4638      	mov	r0, r7
 801ca86:	47c0      	blx	r8
 801ca88:	3001      	adds	r0, #1
 801ca8a:	d103      	bne.n	801ca94 <_printf_common+0xac>
 801ca8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ca90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca94:	3501      	adds	r5, #1
 801ca96:	e7c6      	b.n	801ca26 <_printf_common+0x3e>
 801ca98:	18e1      	adds	r1, r4, r3
 801ca9a:	1c5a      	adds	r2, r3, #1
 801ca9c:	2030      	movs	r0, #48	; 0x30
 801ca9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801caa2:	4422      	add	r2, r4
 801caa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801caa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801caac:	3302      	adds	r3, #2
 801caae:	e7c7      	b.n	801ca40 <_printf_common+0x58>
 801cab0:	2301      	movs	r3, #1
 801cab2:	4622      	mov	r2, r4
 801cab4:	4649      	mov	r1, r9
 801cab6:	4638      	mov	r0, r7
 801cab8:	47c0      	blx	r8
 801caba:	3001      	adds	r0, #1
 801cabc:	d0e6      	beq.n	801ca8c <_printf_common+0xa4>
 801cabe:	3601      	adds	r6, #1
 801cac0:	e7d9      	b.n	801ca76 <_printf_common+0x8e>

0801cac2 <strchr>:
 801cac2:	b2c9      	uxtb	r1, r1
 801cac4:	4603      	mov	r3, r0
 801cac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801caca:	b11a      	cbz	r2, 801cad4 <strchr+0x12>
 801cacc:	428a      	cmp	r2, r1
 801cace:	d1f9      	bne.n	801cac4 <strchr+0x2>
 801cad0:	4618      	mov	r0, r3
 801cad2:	4770      	bx	lr
 801cad4:	2900      	cmp	r1, #0
 801cad6:	bf18      	it	ne
 801cad8:	2300      	movne	r3, #0
 801cada:	e7f9      	b.n	801cad0 <strchr+0xe>

0801cadc <strncpy>:
 801cadc:	b510      	push	{r4, lr}
 801cade:	3901      	subs	r1, #1
 801cae0:	4603      	mov	r3, r0
 801cae2:	b132      	cbz	r2, 801caf2 <strncpy+0x16>
 801cae4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801cae8:	f803 4b01 	strb.w	r4, [r3], #1
 801caec:	3a01      	subs	r2, #1
 801caee:	2c00      	cmp	r4, #0
 801caf0:	d1f7      	bne.n	801cae2 <strncpy+0x6>
 801caf2:	441a      	add	r2, r3
 801caf4:	2100      	movs	r1, #0
 801caf6:	4293      	cmp	r3, r2
 801caf8:	d100      	bne.n	801cafc <strncpy+0x20>
 801cafa:	bd10      	pop	{r4, pc}
 801cafc:	f803 1b01 	strb.w	r1, [r3], #1
 801cb00:	e7f9      	b.n	801caf6 <strncpy+0x1a>

0801cb02 <strnlen>:
 801cb02:	b510      	push	{r4, lr}
 801cb04:	4602      	mov	r2, r0
 801cb06:	4401      	add	r1, r0
 801cb08:	428a      	cmp	r2, r1
 801cb0a:	4613      	mov	r3, r2
 801cb0c:	d101      	bne.n	801cb12 <strnlen+0x10>
 801cb0e:	1a18      	subs	r0, r3, r0
 801cb10:	bd10      	pop	{r4, pc}
 801cb12:	781c      	ldrb	r4, [r3, #0]
 801cb14:	3201      	adds	r2, #1
 801cb16:	2c00      	cmp	r4, #0
 801cb18:	d1f6      	bne.n	801cb08 <strnlen+0x6>
 801cb1a:	e7f8      	b.n	801cb0e <strnlen+0xc>

0801cb1c <strrchr>:
 801cb1c:	b538      	push	{r3, r4, r5, lr}
 801cb1e:	4603      	mov	r3, r0
 801cb20:	460c      	mov	r4, r1
 801cb22:	b969      	cbnz	r1, 801cb40 <strrchr+0x24>
 801cb24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cb28:	f7ff bfcb 	b.w	801cac2 <strchr>
 801cb2c:	1c43      	adds	r3, r0, #1
 801cb2e:	4605      	mov	r5, r0
 801cb30:	4621      	mov	r1, r4
 801cb32:	4618      	mov	r0, r3
 801cb34:	f7ff ffc5 	bl	801cac2 <strchr>
 801cb38:	2800      	cmp	r0, #0
 801cb3a:	d1f7      	bne.n	801cb2c <strrchr+0x10>
 801cb3c:	4628      	mov	r0, r5
 801cb3e:	bd38      	pop	{r3, r4, r5, pc}
 801cb40:	2500      	movs	r5, #0
 801cb42:	e7f5      	b.n	801cb30 <strrchr+0x14>

0801cb44 <quorem>:
 801cb44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb48:	6903      	ldr	r3, [r0, #16]
 801cb4a:	690c      	ldr	r4, [r1, #16]
 801cb4c:	42a3      	cmp	r3, r4
 801cb4e:	4607      	mov	r7, r0
 801cb50:	f2c0 8081 	blt.w	801cc56 <quorem+0x112>
 801cb54:	3c01      	subs	r4, #1
 801cb56:	f101 0814 	add.w	r8, r1, #20
 801cb5a:	f100 0514 	add.w	r5, r0, #20
 801cb5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cb62:	9301      	str	r3, [sp, #4]
 801cb64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801cb68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cb6c:	3301      	adds	r3, #1
 801cb6e:	429a      	cmp	r2, r3
 801cb70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801cb74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801cb78:	fbb2 f6f3 	udiv	r6, r2, r3
 801cb7c:	d331      	bcc.n	801cbe2 <quorem+0x9e>
 801cb7e:	f04f 0e00 	mov.w	lr, #0
 801cb82:	4640      	mov	r0, r8
 801cb84:	46ac      	mov	ip, r5
 801cb86:	46f2      	mov	sl, lr
 801cb88:	f850 2b04 	ldr.w	r2, [r0], #4
 801cb8c:	b293      	uxth	r3, r2
 801cb8e:	fb06 e303 	mla	r3, r6, r3, lr
 801cb92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801cb96:	b29b      	uxth	r3, r3
 801cb98:	ebaa 0303 	sub.w	r3, sl, r3
 801cb9c:	0c12      	lsrs	r2, r2, #16
 801cb9e:	f8dc a000 	ldr.w	sl, [ip]
 801cba2:	fb06 e202 	mla	r2, r6, r2, lr
 801cba6:	fa13 f38a 	uxtah	r3, r3, sl
 801cbaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801cbae:	fa1f fa82 	uxth.w	sl, r2
 801cbb2:	f8dc 2000 	ldr.w	r2, [ip]
 801cbb6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801cbba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cbbe:	b29b      	uxth	r3, r3
 801cbc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cbc4:	4581      	cmp	r9, r0
 801cbc6:	f84c 3b04 	str.w	r3, [ip], #4
 801cbca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801cbce:	d2db      	bcs.n	801cb88 <quorem+0x44>
 801cbd0:	f855 300b 	ldr.w	r3, [r5, fp]
 801cbd4:	b92b      	cbnz	r3, 801cbe2 <quorem+0x9e>
 801cbd6:	9b01      	ldr	r3, [sp, #4]
 801cbd8:	3b04      	subs	r3, #4
 801cbda:	429d      	cmp	r5, r3
 801cbdc:	461a      	mov	r2, r3
 801cbde:	d32e      	bcc.n	801cc3e <quorem+0xfa>
 801cbe0:	613c      	str	r4, [r7, #16]
 801cbe2:	4638      	mov	r0, r7
 801cbe4:	f000 fa16 	bl	801d014 <__mcmp>
 801cbe8:	2800      	cmp	r0, #0
 801cbea:	db24      	blt.n	801cc36 <quorem+0xf2>
 801cbec:	3601      	adds	r6, #1
 801cbee:	4628      	mov	r0, r5
 801cbf0:	f04f 0c00 	mov.w	ip, #0
 801cbf4:	f858 2b04 	ldr.w	r2, [r8], #4
 801cbf8:	f8d0 e000 	ldr.w	lr, [r0]
 801cbfc:	b293      	uxth	r3, r2
 801cbfe:	ebac 0303 	sub.w	r3, ip, r3
 801cc02:	0c12      	lsrs	r2, r2, #16
 801cc04:	fa13 f38e 	uxtah	r3, r3, lr
 801cc08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801cc0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cc10:	b29b      	uxth	r3, r3
 801cc12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cc16:	45c1      	cmp	r9, r8
 801cc18:	f840 3b04 	str.w	r3, [r0], #4
 801cc1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801cc20:	d2e8      	bcs.n	801cbf4 <quorem+0xb0>
 801cc22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cc26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cc2a:	b922      	cbnz	r2, 801cc36 <quorem+0xf2>
 801cc2c:	3b04      	subs	r3, #4
 801cc2e:	429d      	cmp	r5, r3
 801cc30:	461a      	mov	r2, r3
 801cc32:	d30a      	bcc.n	801cc4a <quorem+0x106>
 801cc34:	613c      	str	r4, [r7, #16]
 801cc36:	4630      	mov	r0, r6
 801cc38:	b003      	add	sp, #12
 801cc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc3e:	6812      	ldr	r2, [r2, #0]
 801cc40:	3b04      	subs	r3, #4
 801cc42:	2a00      	cmp	r2, #0
 801cc44:	d1cc      	bne.n	801cbe0 <quorem+0x9c>
 801cc46:	3c01      	subs	r4, #1
 801cc48:	e7c7      	b.n	801cbda <quorem+0x96>
 801cc4a:	6812      	ldr	r2, [r2, #0]
 801cc4c:	3b04      	subs	r3, #4
 801cc4e:	2a00      	cmp	r2, #0
 801cc50:	d1f0      	bne.n	801cc34 <quorem+0xf0>
 801cc52:	3c01      	subs	r4, #1
 801cc54:	e7eb      	b.n	801cc2e <quorem+0xea>
 801cc56:	2000      	movs	r0, #0
 801cc58:	e7ee      	b.n	801cc38 <quorem+0xf4>

0801cc5a <_Balloc>:
 801cc5a:	b570      	push	{r4, r5, r6, lr}
 801cc5c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cc5e:	4604      	mov	r4, r0
 801cc60:	460d      	mov	r5, r1
 801cc62:	b93e      	cbnz	r6, 801cc74 <_Balloc+0x1a>
 801cc64:	2010      	movs	r0, #16
 801cc66:	f7fa f987 	bl	8016f78 <malloc>
 801cc6a:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cc6e:	6260      	str	r0, [r4, #36]	; 0x24
 801cc70:	6006      	str	r6, [r0, #0]
 801cc72:	60c6      	str	r6, [r0, #12]
 801cc74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801cc76:	68f3      	ldr	r3, [r6, #12]
 801cc78:	b183      	cbz	r3, 801cc9c <_Balloc+0x42>
 801cc7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cc7c:	68db      	ldr	r3, [r3, #12]
 801cc7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801cc82:	b9b8      	cbnz	r0, 801ccb4 <_Balloc+0x5a>
 801cc84:	2101      	movs	r1, #1
 801cc86:	fa01 f605 	lsl.w	r6, r1, r5
 801cc8a:	1d72      	adds	r2, r6, #5
 801cc8c:	0092      	lsls	r2, r2, #2
 801cc8e:	4620      	mov	r0, r4
 801cc90:	f7ff fdfb 	bl	801c88a <_calloc_r>
 801cc94:	b160      	cbz	r0, 801ccb0 <_Balloc+0x56>
 801cc96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801cc9a:	e00e      	b.n	801ccba <_Balloc+0x60>
 801cc9c:	2221      	movs	r2, #33	; 0x21
 801cc9e:	2104      	movs	r1, #4
 801cca0:	4620      	mov	r0, r4
 801cca2:	f7ff fdf2 	bl	801c88a <_calloc_r>
 801cca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cca8:	60f0      	str	r0, [r6, #12]
 801ccaa:	68db      	ldr	r3, [r3, #12]
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d1e4      	bne.n	801cc7a <_Balloc+0x20>
 801ccb0:	2000      	movs	r0, #0
 801ccb2:	bd70      	pop	{r4, r5, r6, pc}
 801ccb4:	6802      	ldr	r2, [r0, #0]
 801ccb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ccba:	2300      	movs	r3, #0
 801ccbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ccc0:	e7f7      	b.n	801ccb2 <_Balloc+0x58>

0801ccc2 <_Bfree>:
 801ccc2:	b570      	push	{r4, r5, r6, lr}
 801ccc4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801ccc6:	4605      	mov	r5, r0
 801ccc8:	460c      	mov	r4, r1
 801ccca:	b93e      	cbnz	r6, 801ccdc <_Bfree+0x1a>
 801cccc:	2010      	movs	r0, #16
 801ccce:	f7fa f953 	bl	8016f78 <malloc>
 801ccd2:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ccd6:	6268      	str	r0, [r5, #36]	; 0x24
 801ccd8:	6006      	str	r6, [r0, #0]
 801ccda:	60c6      	str	r6, [r0, #12]
 801ccdc:	b13c      	cbz	r4, 801ccee <_Bfree+0x2c>
 801ccde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801cce0:	6862      	ldr	r2, [r4, #4]
 801cce2:	68db      	ldr	r3, [r3, #12]
 801cce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cce8:	6021      	str	r1, [r4, #0]
 801ccea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ccee:	bd70      	pop	{r4, r5, r6, pc}

0801ccf0 <__multadd>:
 801ccf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ccf4:	690e      	ldr	r6, [r1, #16]
 801ccf6:	4607      	mov	r7, r0
 801ccf8:	4698      	mov	r8, r3
 801ccfa:	460c      	mov	r4, r1
 801ccfc:	f101 0014 	add.w	r0, r1, #20
 801cd00:	2300      	movs	r3, #0
 801cd02:	6805      	ldr	r5, [r0, #0]
 801cd04:	b2a9      	uxth	r1, r5
 801cd06:	fb02 8101 	mla	r1, r2, r1, r8
 801cd0a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801cd0e:	0c2d      	lsrs	r5, r5, #16
 801cd10:	fb02 c505 	mla	r5, r2, r5, ip
 801cd14:	b289      	uxth	r1, r1
 801cd16:	3301      	adds	r3, #1
 801cd18:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801cd1c:	429e      	cmp	r6, r3
 801cd1e:	f840 1b04 	str.w	r1, [r0], #4
 801cd22:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801cd26:	dcec      	bgt.n	801cd02 <__multadd+0x12>
 801cd28:	f1b8 0f00 	cmp.w	r8, #0
 801cd2c:	d01b      	beq.n	801cd66 <__multadd+0x76>
 801cd2e:	68a3      	ldr	r3, [r4, #8]
 801cd30:	42b3      	cmp	r3, r6
 801cd32:	dc12      	bgt.n	801cd5a <__multadd+0x6a>
 801cd34:	6861      	ldr	r1, [r4, #4]
 801cd36:	4638      	mov	r0, r7
 801cd38:	3101      	adds	r1, #1
 801cd3a:	f7ff ff8e 	bl	801cc5a <_Balloc>
 801cd3e:	6922      	ldr	r2, [r4, #16]
 801cd40:	3202      	adds	r2, #2
 801cd42:	f104 010c 	add.w	r1, r4, #12
 801cd46:	4605      	mov	r5, r0
 801cd48:	0092      	lsls	r2, r2, #2
 801cd4a:	300c      	adds	r0, #12
 801cd4c:	f7ff fd74 	bl	801c838 <memcpy>
 801cd50:	4621      	mov	r1, r4
 801cd52:	4638      	mov	r0, r7
 801cd54:	f7ff ffb5 	bl	801ccc2 <_Bfree>
 801cd58:	462c      	mov	r4, r5
 801cd5a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801cd5e:	3601      	adds	r6, #1
 801cd60:	f8c3 8014 	str.w	r8, [r3, #20]
 801cd64:	6126      	str	r6, [r4, #16]
 801cd66:	4620      	mov	r0, r4
 801cd68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801cd6c <__hi0bits>:
 801cd6c:	0c03      	lsrs	r3, r0, #16
 801cd6e:	041b      	lsls	r3, r3, #16
 801cd70:	b9d3      	cbnz	r3, 801cda8 <__hi0bits+0x3c>
 801cd72:	0400      	lsls	r0, r0, #16
 801cd74:	2310      	movs	r3, #16
 801cd76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801cd7a:	bf04      	itt	eq
 801cd7c:	0200      	lsleq	r0, r0, #8
 801cd7e:	3308      	addeq	r3, #8
 801cd80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801cd84:	bf04      	itt	eq
 801cd86:	0100      	lsleq	r0, r0, #4
 801cd88:	3304      	addeq	r3, #4
 801cd8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801cd8e:	bf04      	itt	eq
 801cd90:	0080      	lsleq	r0, r0, #2
 801cd92:	3302      	addeq	r3, #2
 801cd94:	2800      	cmp	r0, #0
 801cd96:	db05      	blt.n	801cda4 <__hi0bits+0x38>
 801cd98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801cd9c:	f103 0301 	add.w	r3, r3, #1
 801cda0:	bf08      	it	eq
 801cda2:	2320      	moveq	r3, #32
 801cda4:	4618      	mov	r0, r3
 801cda6:	4770      	bx	lr
 801cda8:	2300      	movs	r3, #0
 801cdaa:	e7e4      	b.n	801cd76 <__hi0bits+0xa>

0801cdac <__lo0bits>:
 801cdac:	6803      	ldr	r3, [r0, #0]
 801cdae:	f013 0207 	ands.w	r2, r3, #7
 801cdb2:	4601      	mov	r1, r0
 801cdb4:	d00b      	beq.n	801cdce <__lo0bits+0x22>
 801cdb6:	07da      	lsls	r2, r3, #31
 801cdb8:	d424      	bmi.n	801ce04 <__lo0bits+0x58>
 801cdba:	0798      	lsls	r0, r3, #30
 801cdbc:	bf49      	itett	mi
 801cdbe:	085b      	lsrmi	r3, r3, #1
 801cdc0:	089b      	lsrpl	r3, r3, #2
 801cdc2:	2001      	movmi	r0, #1
 801cdc4:	600b      	strmi	r3, [r1, #0]
 801cdc6:	bf5c      	itt	pl
 801cdc8:	600b      	strpl	r3, [r1, #0]
 801cdca:	2002      	movpl	r0, #2
 801cdcc:	4770      	bx	lr
 801cdce:	b298      	uxth	r0, r3
 801cdd0:	b9b0      	cbnz	r0, 801ce00 <__lo0bits+0x54>
 801cdd2:	0c1b      	lsrs	r3, r3, #16
 801cdd4:	2010      	movs	r0, #16
 801cdd6:	f013 0fff 	tst.w	r3, #255	; 0xff
 801cdda:	bf04      	itt	eq
 801cddc:	0a1b      	lsreq	r3, r3, #8
 801cdde:	3008      	addeq	r0, #8
 801cde0:	071a      	lsls	r2, r3, #28
 801cde2:	bf04      	itt	eq
 801cde4:	091b      	lsreq	r3, r3, #4
 801cde6:	3004      	addeq	r0, #4
 801cde8:	079a      	lsls	r2, r3, #30
 801cdea:	bf04      	itt	eq
 801cdec:	089b      	lsreq	r3, r3, #2
 801cdee:	3002      	addeq	r0, #2
 801cdf0:	07da      	lsls	r2, r3, #31
 801cdf2:	d403      	bmi.n	801cdfc <__lo0bits+0x50>
 801cdf4:	085b      	lsrs	r3, r3, #1
 801cdf6:	f100 0001 	add.w	r0, r0, #1
 801cdfa:	d005      	beq.n	801ce08 <__lo0bits+0x5c>
 801cdfc:	600b      	str	r3, [r1, #0]
 801cdfe:	4770      	bx	lr
 801ce00:	4610      	mov	r0, r2
 801ce02:	e7e8      	b.n	801cdd6 <__lo0bits+0x2a>
 801ce04:	2000      	movs	r0, #0
 801ce06:	4770      	bx	lr
 801ce08:	2020      	movs	r0, #32
 801ce0a:	4770      	bx	lr

0801ce0c <__i2b>:
 801ce0c:	b510      	push	{r4, lr}
 801ce0e:	460c      	mov	r4, r1
 801ce10:	2101      	movs	r1, #1
 801ce12:	f7ff ff22 	bl	801cc5a <_Balloc>
 801ce16:	2201      	movs	r2, #1
 801ce18:	6144      	str	r4, [r0, #20]
 801ce1a:	6102      	str	r2, [r0, #16]
 801ce1c:	bd10      	pop	{r4, pc}

0801ce1e <__multiply>:
 801ce1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce22:	4615      	mov	r5, r2
 801ce24:	690a      	ldr	r2, [r1, #16]
 801ce26:	692b      	ldr	r3, [r5, #16]
 801ce28:	429a      	cmp	r2, r3
 801ce2a:	bfb8      	it	lt
 801ce2c:	460b      	movlt	r3, r1
 801ce2e:	460c      	mov	r4, r1
 801ce30:	bfbc      	itt	lt
 801ce32:	462c      	movlt	r4, r5
 801ce34:	461d      	movlt	r5, r3
 801ce36:	6927      	ldr	r7, [r4, #16]
 801ce38:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801ce3c:	68a3      	ldr	r3, [r4, #8]
 801ce3e:	6861      	ldr	r1, [r4, #4]
 801ce40:	eb07 0609 	add.w	r6, r7, r9
 801ce44:	42b3      	cmp	r3, r6
 801ce46:	bfb8      	it	lt
 801ce48:	3101      	addlt	r1, #1
 801ce4a:	b085      	sub	sp, #20
 801ce4c:	f7ff ff05 	bl	801cc5a <_Balloc>
 801ce50:	f100 0114 	add.w	r1, r0, #20
 801ce54:	eb01 0886 	add.w	r8, r1, r6, lsl #2
 801ce58:	460b      	mov	r3, r1
 801ce5a:	2200      	movs	r2, #0
 801ce5c:	4543      	cmp	r3, r8
 801ce5e:	d31d      	bcc.n	801ce9c <__multiply+0x7e>
 801ce60:	f104 0314 	add.w	r3, r4, #20
 801ce64:	f105 0214 	add.w	r2, r5, #20
 801ce68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801ce6c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801ce70:	9302      	str	r3, [sp, #8]
 801ce72:	1b3b      	subs	r3, r7, r4
 801ce74:	3b15      	subs	r3, #21
 801ce76:	f023 0303 	bic.w	r3, r3, #3
 801ce7a:	3304      	adds	r3, #4
 801ce7c:	f104 0515 	add.w	r5, r4, #21
 801ce80:	42af      	cmp	r7, r5
 801ce82:	bf38      	it	cc
 801ce84:	2304      	movcc	r3, #4
 801ce86:	9301      	str	r3, [sp, #4]
 801ce88:	9b02      	ldr	r3, [sp, #8]
 801ce8a:	9203      	str	r2, [sp, #12]
 801ce8c:	4293      	cmp	r3, r2
 801ce8e:	d808      	bhi.n	801cea2 <__multiply+0x84>
 801ce90:	2e00      	cmp	r6, #0
 801ce92:	dc5a      	bgt.n	801cf4a <__multiply+0x12c>
 801ce94:	6106      	str	r6, [r0, #16]
 801ce96:	b005      	add	sp, #20
 801ce98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce9c:	f843 2b04 	str.w	r2, [r3], #4
 801cea0:	e7dc      	b.n	801ce5c <__multiply+0x3e>
 801cea2:	f8b2 a000 	ldrh.w	sl, [r2]
 801cea6:	f1ba 0f00 	cmp.w	sl, #0
 801ceaa:	d024      	beq.n	801cef6 <__multiply+0xd8>
 801ceac:	f104 0e14 	add.w	lr, r4, #20
 801ceb0:	4689      	mov	r9, r1
 801ceb2:	f04f 0c00 	mov.w	ip, #0
 801ceb6:	f85e 5b04 	ldr.w	r5, [lr], #4
 801ceba:	f8d9 b000 	ldr.w	fp, [r9]
 801cebe:	b2ab      	uxth	r3, r5
 801cec0:	fa1f fb8b 	uxth.w	fp, fp
 801cec4:	fb0a b303 	mla	r3, sl, r3, fp
 801cec8:	ea4f 4b15 	mov.w	fp, r5, lsr #16
 801cecc:	f8d9 5000 	ldr.w	r5, [r9]
 801ced0:	4463      	add	r3, ip
 801ced2:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 801ced6:	fb0a c50b 	mla	r5, sl, fp, ip
 801ceda:	eb05 4513 	add.w	r5, r5, r3, lsr #16
 801cede:	b29b      	uxth	r3, r3
 801cee0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 801cee4:	4577      	cmp	r7, lr
 801cee6:	f849 3b04 	str.w	r3, [r9], #4
 801ceea:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 801ceee:	d8e2      	bhi.n	801ceb6 <__multiply+0x98>
 801cef0:	9b01      	ldr	r3, [sp, #4]
 801cef2:	f841 c003 	str.w	ip, [r1, r3]
 801cef6:	9b03      	ldr	r3, [sp, #12]
 801cef8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801cefc:	3204      	adds	r2, #4
 801cefe:	f1b9 0f00 	cmp.w	r9, #0
 801cf02:	d020      	beq.n	801cf46 <__multiply+0x128>
 801cf04:	680b      	ldr	r3, [r1, #0]
 801cf06:	f104 0c14 	add.w	ip, r4, #20
 801cf0a:	468e      	mov	lr, r1
 801cf0c:	f04f 0a00 	mov.w	sl, #0
 801cf10:	f8bc 5000 	ldrh.w	r5, [ip]
 801cf14:	f8be b002 	ldrh.w	fp, [lr, #2]
 801cf18:	fb09 b505 	mla	r5, r9, r5, fp
 801cf1c:	44aa      	add	sl, r5
 801cf1e:	b29b      	uxth	r3, r3
 801cf20:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 801cf24:	f84e 3b04 	str.w	r3, [lr], #4
 801cf28:	f85c 3b04 	ldr.w	r3, [ip], #4
 801cf2c:	f8be 5000 	ldrh.w	r5, [lr]
 801cf30:	0c1b      	lsrs	r3, r3, #16
 801cf32:	fb09 5303 	mla	r3, r9, r3, r5
 801cf36:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 801cf3a:	4567      	cmp	r7, ip
 801cf3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801cf40:	d8e6      	bhi.n	801cf10 <__multiply+0xf2>
 801cf42:	9d01      	ldr	r5, [sp, #4]
 801cf44:	514b      	str	r3, [r1, r5]
 801cf46:	3104      	adds	r1, #4
 801cf48:	e79e      	b.n	801ce88 <__multiply+0x6a>
 801cf4a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	d1a0      	bne.n	801ce94 <__multiply+0x76>
 801cf52:	3e01      	subs	r6, #1
 801cf54:	e79c      	b.n	801ce90 <__multiply+0x72>

0801cf56 <__lshift>:
 801cf56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf5a:	460c      	mov	r4, r1
 801cf5c:	6849      	ldr	r1, [r1, #4]
 801cf5e:	6923      	ldr	r3, [r4, #16]
 801cf60:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cf64:	68a3      	ldr	r3, [r4, #8]
 801cf66:	4607      	mov	r7, r0
 801cf68:	4691      	mov	r9, r2
 801cf6a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cf6e:	f108 0601 	add.w	r6, r8, #1
 801cf72:	42b3      	cmp	r3, r6
 801cf74:	db3f      	blt.n	801cff6 <__lshift+0xa0>
 801cf76:	4638      	mov	r0, r7
 801cf78:	f7ff fe6f 	bl	801cc5a <_Balloc>
 801cf7c:	2300      	movs	r3, #0
 801cf7e:	4605      	mov	r5, r0
 801cf80:	f100 0114 	add.w	r1, r0, #20
 801cf84:	f100 0210 	add.w	r2, r0, #16
 801cf88:	4618      	mov	r0, r3
 801cf8a:	4553      	cmp	r3, sl
 801cf8c:	db36      	blt.n	801cffc <__lshift+0xa6>
 801cf8e:	6920      	ldr	r0, [r4, #16]
 801cf90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cf94:	f104 0314 	add.w	r3, r4, #20
 801cf98:	f019 091f 	ands.w	r9, r9, #31
 801cf9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cfa0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801cfa4:	d02e      	beq.n	801d004 <__lshift+0xae>
 801cfa6:	f1c9 0e20 	rsb	lr, r9, #32
 801cfaa:	468a      	mov	sl, r1
 801cfac:	2200      	movs	r2, #0
 801cfae:	6818      	ldr	r0, [r3, #0]
 801cfb0:	fa00 f009 	lsl.w	r0, r0, r9
 801cfb4:	4302      	orrs	r2, r0
 801cfb6:	f84a 2b04 	str.w	r2, [sl], #4
 801cfba:	f853 2b04 	ldr.w	r2, [r3], #4
 801cfbe:	459c      	cmp	ip, r3
 801cfc0:	fa22 f20e 	lsr.w	r2, r2, lr
 801cfc4:	d8f3      	bhi.n	801cfae <__lshift+0x58>
 801cfc6:	ebac 0304 	sub.w	r3, ip, r4
 801cfca:	3b15      	subs	r3, #21
 801cfcc:	f023 0303 	bic.w	r3, r3, #3
 801cfd0:	3304      	adds	r3, #4
 801cfd2:	f104 0015 	add.w	r0, r4, #21
 801cfd6:	4560      	cmp	r0, ip
 801cfd8:	bf88      	it	hi
 801cfda:	2304      	movhi	r3, #4
 801cfdc:	50ca      	str	r2, [r1, r3]
 801cfde:	b10a      	cbz	r2, 801cfe4 <__lshift+0x8e>
 801cfe0:	f108 0602 	add.w	r6, r8, #2
 801cfe4:	3e01      	subs	r6, #1
 801cfe6:	4638      	mov	r0, r7
 801cfe8:	612e      	str	r6, [r5, #16]
 801cfea:	4621      	mov	r1, r4
 801cfec:	f7ff fe69 	bl	801ccc2 <_Bfree>
 801cff0:	4628      	mov	r0, r5
 801cff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cff6:	3101      	adds	r1, #1
 801cff8:	005b      	lsls	r3, r3, #1
 801cffa:	e7ba      	b.n	801cf72 <__lshift+0x1c>
 801cffc:	f842 0f04 	str.w	r0, [r2, #4]!
 801d000:	3301      	adds	r3, #1
 801d002:	e7c2      	b.n	801cf8a <__lshift+0x34>
 801d004:	3904      	subs	r1, #4
 801d006:	f853 2b04 	ldr.w	r2, [r3], #4
 801d00a:	f841 2f04 	str.w	r2, [r1, #4]!
 801d00e:	459c      	cmp	ip, r3
 801d010:	d8f9      	bhi.n	801d006 <__lshift+0xb0>
 801d012:	e7e7      	b.n	801cfe4 <__lshift+0x8e>

0801d014 <__mcmp>:
 801d014:	b530      	push	{r4, r5, lr}
 801d016:	6902      	ldr	r2, [r0, #16]
 801d018:	690c      	ldr	r4, [r1, #16]
 801d01a:	1b12      	subs	r2, r2, r4
 801d01c:	d10e      	bne.n	801d03c <__mcmp+0x28>
 801d01e:	f100 0314 	add.w	r3, r0, #20
 801d022:	3114      	adds	r1, #20
 801d024:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d028:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d02c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d030:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d034:	42a5      	cmp	r5, r4
 801d036:	d003      	beq.n	801d040 <__mcmp+0x2c>
 801d038:	d305      	bcc.n	801d046 <__mcmp+0x32>
 801d03a:	2201      	movs	r2, #1
 801d03c:	4610      	mov	r0, r2
 801d03e:	bd30      	pop	{r4, r5, pc}
 801d040:	4283      	cmp	r3, r0
 801d042:	d3f3      	bcc.n	801d02c <__mcmp+0x18>
 801d044:	e7fa      	b.n	801d03c <__mcmp+0x28>
 801d046:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d04a:	e7f7      	b.n	801d03c <__mcmp+0x28>

0801d04c <__mdiff>:
 801d04c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d050:	460c      	mov	r4, r1
 801d052:	4606      	mov	r6, r0
 801d054:	4611      	mov	r1, r2
 801d056:	4620      	mov	r0, r4
 801d058:	4617      	mov	r7, r2
 801d05a:	f7ff ffdb 	bl	801d014 <__mcmp>
 801d05e:	1e05      	subs	r5, r0, #0
 801d060:	d108      	bne.n	801d074 <__mdiff+0x28>
 801d062:	4629      	mov	r1, r5
 801d064:	4630      	mov	r0, r6
 801d066:	f7ff fdf8 	bl	801cc5a <_Balloc>
 801d06a:	2301      	movs	r3, #1
 801d06c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d074:	bfa4      	itt	ge
 801d076:	463b      	movge	r3, r7
 801d078:	4627      	movge	r7, r4
 801d07a:	4630      	mov	r0, r6
 801d07c:	6879      	ldr	r1, [r7, #4]
 801d07e:	bfa6      	itte	ge
 801d080:	461c      	movge	r4, r3
 801d082:	2500      	movge	r5, #0
 801d084:	2501      	movlt	r5, #1
 801d086:	f7ff fde8 	bl	801cc5a <_Balloc>
 801d08a:	693e      	ldr	r6, [r7, #16]
 801d08c:	60c5      	str	r5, [r0, #12]
 801d08e:	6925      	ldr	r5, [r4, #16]
 801d090:	f107 0114 	add.w	r1, r7, #20
 801d094:	f104 0914 	add.w	r9, r4, #20
 801d098:	f100 0e14 	add.w	lr, r0, #20
 801d09c:	f107 0210 	add.w	r2, r7, #16
 801d0a0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801d0a4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801d0a8:	46f2      	mov	sl, lr
 801d0aa:	2700      	movs	r7, #0
 801d0ac:	f859 3b04 	ldr.w	r3, [r9], #4
 801d0b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d0b4:	fa1f f883 	uxth.w	r8, r3
 801d0b8:	fa17 f78b 	uxtah	r7, r7, fp
 801d0bc:	0c1b      	lsrs	r3, r3, #16
 801d0be:	eba7 0808 	sub.w	r8, r7, r8
 801d0c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d0c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d0ca:	fa1f f888 	uxth.w	r8, r8
 801d0ce:	141f      	asrs	r7, r3, #16
 801d0d0:	454d      	cmp	r5, r9
 801d0d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d0d6:	f84a 3b04 	str.w	r3, [sl], #4
 801d0da:	d8e7      	bhi.n	801d0ac <__mdiff+0x60>
 801d0dc:	1b2b      	subs	r3, r5, r4
 801d0de:	3b15      	subs	r3, #21
 801d0e0:	f023 0303 	bic.w	r3, r3, #3
 801d0e4:	3304      	adds	r3, #4
 801d0e6:	3415      	adds	r4, #21
 801d0e8:	42a5      	cmp	r5, r4
 801d0ea:	bf38      	it	cc
 801d0ec:	2304      	movcc	r3, #4
 801d0ee:	4419      	add	r1, r3
 801d0f0:	4473      	add	r3, lr
 801d0f2:	469e      	mov	lr, r3
 801d0f4:	460d      	mov	r5, r1
 801d0f6:	4565      	cmp	r5, ip
 801d0f8:	d30e      	bcc.n	801d118 <__mdiff+0xcc>
 801d0fa:	f10c 0203 	add.w	r2, ip, #3
 801d0fe:	1a52      	subs	r2, r2, r1
 801d100:	f022 0203 	bic.w	r2, r2, #3
 801d104:	3903      	subs	r1, #3
 801d106:	458c      	cmp	ip, r1
 801d108:	bf38      	it	cc
 801d10a:	2200      	movcc	r2, #0
 801d10c:	441a      	add	r2, r3
 801d10e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801d112:	b17b      	cbz	r3, 801d134 <__mdiff+0xe8>
 801d114:	6106      	str	r6, [r0, #16]
 801d116:	e7ab      	b.n	801d070 <__mdiff+0x24>
 801d118:	f855 8b04 	ldr.w	r8, [r5], #4
 801d11c:	fa17 f488 	uxtah	r4, r7, r8
 801d120:	1422      	asrs	r2, r4, #16
 801d122:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801d126:	b2a4      	uxth	r4, r4
 801d128:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801d12c:	f84e 4b04 	str.w	r4, [lr], #4
 801d130:	1417      	asrs	r7, r2, #16
 801d132:	e7e0      	b.n	801d0f6 <__mdiff+0xaa>
 801d134:	3e01      	subs	r6, #1
 801d136:	e7ea      	b.n	801d10e <__mdiff+0xc2>

0801d138 <__d2b>:
 801d138:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d13c:	4689      	mov	r9, r1
 801d13e:	2101      	movs	r1, #1
 801d140:	ec57 6b10 	vmov	r6, r7, d0
 801d144:	4690      	mov	r8, r2
 801d146:	f7ff fd88 	bl	801cc5a <_Balloc>
 801d14a:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d14e:	4604      	mov	r4, r0
 801d150:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d154:	bb35      	cbnz	r5, 801d1a4 <__d2b+0x6c>
 801d156:	2e00      	cmp	r6, #0
 801d158:	9301      	str	r3, [sp, #4]
 801d15a:	d028      	beq.n	801d1ae <__d2b+0x76>
 801d15c:	4668      	mov	r0, sp
 801d15e:	9600      	str	r6, [sp, #0]
 801d160:	f7ff fe24 	bl	801cdac <__lo0bits>
 801d164:	9900      	ldr	r1, [sp, #0]
 801d166:	b300      	cbz	r0, 801d1aa <__d2b+0x72>
 801d168:	9a01      	ldr	r2, [sp, #4]
 801d16a:	f1c0 0320 	rsb	r3, r0, #32
 801d16e:	fa02 f303 	lsl.w	r3, r2, r3
 801d172:	430b      	orrs	r3, r1
 801d174:	40c2      	lsrs	r2, r0
 801d176:	6163      	str	r3, [r4, #20]
 801d178:	9201      	str	r2, [sp, #4]
 801d17a:	9b01      	ldr	r3, [sp, #4]
 801d17c:	61a3      	str	r3, [r4, #24]
 801d17e:	2b00      	cmp	r3, #0
 801d180:	bf14      	ite	ne
 801d182:	2202      	movne	r2, #2
 801d184:	2201      	moveq	r2, #1
 801d186:	6122      	str	r2, [r4, #16]
 801d188:	b1d5      	cbz	r5, 801d1c0 <__d2b+0x88>
 801d18a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d18e:	4405      	add	r5, r0
 801d190:	f8c9 5000 	str.w	r5, [r9]
 801d194:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d198:	f8c8 0000 	str.w	r0, [r8]
 801d19c:	4620      	mov	r0, r4
 801d19e:	b003      	add	sp, #12
 801d1a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d1a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d1a8:	e7d5      	b.n	801d156 <__d2b+0x1e>
 801d1aa:	6161      	str	r1, [r4, #20]
 801d1ac:	e7e5      	b.n	801d17a <__d2b+0x42>
 801d1ae:	a801      	add	r0, sp, #4
 801d1b0:	f7ff fdfc 	bl	801cdac <__lo0bits>
 801d1b4:	9b01      	ldr	r3, [sp, #4]
 801d1b6:	6163      	str	r3, [r4, #20]
 801d1b8:	2201      	movs	r2, #1
 801d1ba:	6122      	str	r2, [r4, #16]
 801d1bc:	3020      	adds	r0, #32
 801d1be:	e7e3      	b.n	801d188 <__d2b+0x50>
 801d1c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d1c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d1c8:	f8c9 0000 	str.w	r0, [r9]
 801d1cc:	6918      	ldr	r0, [r3, #16]
 801d1ce:	f7ff fdcd 	bl	801cd6c <__hi0bits>
 801d1d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d1d6:	e7df      	b.n	801d198 <__d2b+0x60>

0801d1d8 <__ascii_mbtowc>:
 801d1d8:	b082      	sub	sp, #8
 801d1da:	b901      	cbnz	r1, 801d1de <__ascii_mbtowc+0x6>
 801d1dc:	a901      	add	r1, sp, #4
 801d1de:	b142      	cbz	r2, 801d1f2 <__ascii_mbtowc+0x1a>
 801d1e0:	b14b      	cbz	r3, 801d1f6 <__ascii_mbtowc+0x1e>
 801d1e2:	7813      	ldrb	r3, [r2, #0]
 801d1e4:	600b      	str	r3, [r1, #0]
 801d1e6:	7812      	ldrb	r2, [r2, #0]
 801d1e8:	1e10      	subs	r0, r2, #0
 801d1ea:	bf18      	it	ne
 801d1ec:	2001      	movne	r0, #1
 801d1ee:	b002      	add	sp, #8
 801d1f0:	4770      	bx	lr
 801d1f2:	4610      	mov	r0, r2
 801d1f4:	e7fb      	b.n	801d1ee <__ascii_mbtowc+0x16>
 801d1f6:	f06f 0001 	mvn.w	r0, #1
 801d1fa:	e7f8      	b.n	801d1ee <__ascii_mbtowc+0x16>

0801d1fc <__ascii_wctomb>:
 801d1fc:	b149      	cbz	r1, 801d212 <__ascii_wctomb+0x16>
 801d1fe:	2aff      	cmp	r2, #255	; 0xff
 801d200:	bf85      	ittet	hi
 801d202:	238a      	movhi	r3, #138	; 0x8a
 801d204:	6003      	strhi	r3, [r0, #0]
 801d206:	700a      	strbls	r2, [r1, #0]
 801d208:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801d20c:	bf98      	it	ls
 801d20e:	2001      	movls	r0, #1
 801d210:	4770      	bx	lr
 801d212:	4608      	mov	r0, r1
 801d214:	4770      	bx	lr

# 1 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
# 1 "/home/sebin/thesis/dmz/zephyr_xmc_template/build//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/autoconf.h" 1
# 1 "<command-line>" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/toolchain/zephyr_stdint.h" 1
# 1 "<command-line>" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"






# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log.h" 1
# 10 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_instance.h" 1
# 9 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_instance.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/zephyr/types.h" 1
# 10 "/home/sebin/thesis/zephyrproject/zephyr/include/zephyr/types.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 143 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4

# 143 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 209 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
typedef unsigned int size_t;
# 321 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
typedef unsigned int wchar_t;
# 11 "/home/sebin/thesis/zephyrproject/zephyr/include/zephyr/types.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/lib/libc/newlib/include/stdint.h" 1
# 15 "/home/sebin/thesis/zephyrproject/zephyr/lib/libc/newlib/include/stdint.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/newlib-nano/newlib.h" 1 3 4
# 14 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/newlib-nano/newlib.h" 3 4
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/_newlib_version.h" 1 3 4
# 15 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/newlib-nano/newlib.h" 2 3 4
# 16 "/home/sebin/thesis/zephyrproject/zephyr/lib/libc/newlib/include/stdint.h" 2



# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_stdint.h" 1 3
# 12 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_stdint.h" 3
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h" 1 3







# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/features.h" 1 3
# 9 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h" 2 3
# 41 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h" 3
typedef signed char __int8_t;

typedef unsigned char __uint8_t;
# 55 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h" 3
typedef short int __int16_t;

typedef short unsigned int __uint16_t;
# 77 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h" 3
typedef 
# 77 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h"
       int 
# 77 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h" 3
                      __int32_t;

typedef 
# 79 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h"
       unsigned int 
# 79 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h" 3
                       __uint32_t;
# 103 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h" 3
typedef 
# 103 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h"
       long long int 
# 103 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h" 3
                      __int64_t;

typedef 
# 105 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h"
       unsigned long long int 
# 105 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h" 3
                       __uint64_t;
# 134 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h" 3
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;
# 160 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h" 3
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;
# 182 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h" 3
typedef 
# 182 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h"
       int 
# 182 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h" 3
                            __int_least32_t;

typedef 
# 184 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h"
       unsigned int 
# 184 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h" 3
                             __uint_least32_t;
# 200 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h" 3
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;
# 214 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h" 3
typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef 
# 230 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h"
       long int 
# 230 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h" 3
                       __intptr_t;

typedef 
# 232 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h"
       long unsigned int 
# 232 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_default_types.h" 3
                        __uintptr_t;
# 13 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_stdint.h" 2 3







typedef __int8_t int8_t ;



typedef __uint8_t uint8_t ;







typedef __int16_t int16_t ;



typedef __uint16_t uint16_t ;







typedef __int32_t int32_t ;



typedef __uint32_t uint32_t ;







typedef __int64_t int64_t ;



typedef __uint64_t uint64_t ;






typedef __intmax_t intmax_t;




typedef __uintmax_t uintmax_t;




typedef __intptr_t intptr_t;




typedef __uintptr_t uintptr_t;
# 20 "/home/sebin/thesis/zephyrproject/zephyr/lib/libc/newlib/include/stdint.h" 2
# 28 "/home/sebin/thesis/zephyrproject/zephyr/lib/libc/newlib/include/stdint.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h" 1 3 4
# 11 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h" 3 4
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint-gcc.h" 1 3 4
# 34 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint-gcc.h" 3 4
typedef signed char int8_t;


typedef short int int16_t;


typedef 
# 40 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint-gcc.h"
       int 
# 40 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint-gcc.h" 3 4
                      int32_t;


typedef 
# 43 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint-gcc.h"
       long long int 
# 43 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint-gcc.h" 3 4
                      int64_t;


typedef unsigned char uint8_t;


typedef short unsigned int uint16_t;


typedef 
# 52 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint-gcc.h"
       unsigned int 
# 52 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint-gcc.h" 3 4
                       uint32_t;


typedef 
# 55 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint-gcc.h"
       unsigned long long int 
# 55 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint-gcc.h" 3 4
                       uint64_t;




typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef 
# 62 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint-gcc.h"
       int 
# 62 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint-gcc.h" 3 4
                            int_least32_t;
typedef long long int int_least64_t;
typedef unsigned char uint_least8_t;
typedef short unsigned int uint_least16_t;
typedef 
# 66 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint-gcc.h"
       unsigned int 
# 66 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint-gcc.h" 3 4
                             uint_least32_t;
typedef long long unsigned int uint_least64_t;



typedef int int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int int_fast64_t;
typedef unsigned int uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef long long unsigned int uint_fast64_t;




typedef 
# 83 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint-gcc.h"
       long int 
# 83 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint-gcc.h" 3 4
                       intptr_t;


typedef 
# 86 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint-gcc.h"
       long unsigned int 
# 86 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint-gcc.h" 3 4
                        uintptr_t;




typedef long long int intmax_t;
typedef long long unsigned int uintmax_t;
# 12 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h" 2 3 4
# 29 "/home/sebin/thesis/zephyrproject/zephyr/lib/libc/newlib/include/stdint.h" 2
# 12 "/home/sebin/thesis/zephyrproject/zephyr/include/zephyr/types.h" 2







# 18 "/home/sebin/thesis/zephyrproject/zephyr/include/zephyr/types.h"
typedef unsigned long ulong_t;






typedef union {
 long long thelonglong;
 long double thelongdouble;
 uintmax_t theuintmax_t;
 size_t thesize_t;
 uintptr_t theuintptr_t;
 void *thepvoid;
 void (*thepfunc)(void);
} z_max_align_t;
# 10 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_instance.h" 2






struct log_source_const_data {
 const char *name;
 uint8_t level;







};


struct log_source_dynamic_data {
 uint32_t filters;
# 42 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_instance.h"
};
# 11 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h" 1
# 9 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h" 1
# 9 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h" 1
# 11 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdbool.h" 1 3 4
# 12 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/toolchain.h" 1
# 50 "/home/sebin/thesis/zephyrproject/zephyr/include/toolchain.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/toolchain/gcc.h" 1
# 72 "/home/sebin/thesis/zephyrproject/zephyr/include/toolchain/gcc.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/toolchain/common.h" 1
# 73 "/home/sebin/thesis/zephyrproject/zephyr/include/toolchain/gcc.h" 2
# 51 "/home/sebin/thesis/zephyrproject/zephyr/include/toolchain.h" 2
# 13 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h" 2
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 14 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h" 2


# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util_macro.h" 1
# 34 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util_macro.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util_internal.h" 1
# 18 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util_internal.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util_loops.h" 1
# 19 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util_internal.h" 2
# 35 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util_macro.h" 2
# 17 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h" 2





typedef long atomic_t;
typedef atomic_t atomic_val_t;
typedef void *atomic_ptr_t;
typedef atomic_ptr_t atomic_ptr_val_t;
# 43 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h" 1
# 37 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h"
static inline 
# 37 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h" 3 4
             _Bool 
# 37 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h"
                  atomic_cas(atomic_t *target, atomic_val_t old_value,
     atomic_val_t new_value)
{
 return __atomic_compare_exchange_n(target, &old_value, new_value,
        0, 5,
        5);
}
# 58 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h"
static inline 
# 58 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h" 3 4
             _Bool 
# 58 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h"
                  atomic_ptr_cas(atomic_ptr_t *target, atomic_ptr_val_t old_value,
      atomic_ptr_val_t new_value)
{
 return __atomic_compare_exchange_n(target, &old_value, new_value,
        0, 5,
        5);
}
# 77 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h"
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
 return __atomic_fetch_add(target, value, 5);
}
# 93 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h"
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
 return __atomic_fetch_sub(target, value, 5);
}
# 108 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h"
static inline atomic_val_t atomic_inc(atomic_t *target)
{
 return atomic_add(target, 1);
}
# 123 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h"
static inline atomic_val_t atomic_dec(atomic_t *target)
{
 return atomic_sub(target, 1);
}
# 138 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h"
static inline atomic_val_t atomic_get(const atomic_t *target)
{
 return __atomic_load_n(target, 5);
}
# 153 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h"
static inline atomic_ptr_val_t atomic_ptr_get(const atomic_ptr_t *target)
{
 return __atomic_load_n(target, 5);
}
# 170 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h"
static inline atomic_val_t atomic_set(atomic_t *target, atomic_val_t value)
{




 return __atomic_exchange_n(target, value, 5);
}
# 191 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h"
static inline atomic_ptr_val_t atomic_ptr_set(atomic_ptr_t *target, atomic_ptr_val_t value)
{
 return __atomic_exchange_n(target, value, 5);
}
# 207 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h"
static inline atomic_val_t atomic_clear(atomic_t *target)
{
 return atomic_set(target, 0);
}
# 223 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h"
static inline atomic_ptr_val_t atomic_ptr_clear(atomic_ptr_t *target)
{
 return atomic_ptr_set(target, 
# 225 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h" 3 4
                              ((void *)0)
# 225 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h"
                                  );
}
# 240 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h"
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
 return __atomic_fetch_or(target, value, 5);
}
# 257 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h"
static inline atomic_val_t atomic_xor(atomic_t *target, atomic_val_t value)
{
 return __atomic_fetch_xor(target, value, 5);
}
# 274 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h"
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
 return __atomic_fetch_and(target, value, 5);
}
# 291 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic_builtin.h"
static inline atomic_val_t atomic_nand(atomic_t *target, atomic_val_t value)
{
 return __atomic_fetch_nand(target, value, 5);
}
# 44 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h" 2
# 128 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h"
static inline 
# 128 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h" 3 4
             _Bool 
# 128 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h"
                  atomic_test_bit(const atomic_t *target, int bit)
{
 atomic_val_t val = atomic_get(((target) + ((bit) / (sizeof(atomic_val_t) * 8))));

 return (1 & (val >> (bit & ((sizeof(atomic_val_t) * 8) - 1)))) != 0;
}
# 146 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h"
static inline 
# 146 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h" 3 4
             _Bool 
# 146 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h"
                  atomic_test_and_clear_bit(atomic_t *target, int bit)
{
 atomic_val_t mask = (1UL << ((unsigned long)(bit) & ((sizeof(atomic_val_t) * 8) - 1U)));
 atomic_val_t old;

 old = atomic_and(((target) + ((bit) / (sizeof(atomic_val_t) * 8))), ~mask);

 return (old & mask) != 0;
}
# 167 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h"
static inline 
# 167 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h" 3 4
             _Bool 
# 167 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h"
                  atomic_test_and_set_bit(atomic_t *target, int bit)
{
 atomic_val_t mask = (1UL << ((unsigned long)(bit) & ((sizeof(atomic_val_t) * 8) - 1U)));
 atomic_val_t old;

 old = atomic_or(((target) + ((bit) / (sizeof(atomic_val_t) * 8))), mask);

 return (old & mask) != 0;
}
# 186 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h"
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
 atomic_val_t mask = (1UL << ((unsigned long)(bit) & ((sizeof(atomic_val_t) * 8) - 1U)));

 (void)atomic_and(((target) + ((bit) / (sizeof(atomic_val_t) * 8))), ~mask);
}
# 202 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h"
static inline void atomic_set_bit(atomic_t *target, int bit)
{
 atomic_val_t mask = (1UL << ((unsigned long)(bit) & ((sizeof(atomic_val_t) * 8) - 1U)));

 (void)atomic_or(((target) + ((bit) / (sizeof(atomic_val_t) * 8))), mask);
}
# 219 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h"
static inline void atomic_set_bit_to(atomic_t *target, int bit, 
# 219 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h" 3 4
                                                               _Bool 
# 219 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/atomic.h"
                                                                    val)
{
 atomic_val_t mask = (1UL << ((unsigned long)(bit) & ((sizeof(atomic_val_t) * 8) - 1U)));

 if (val) {
  (void)atomic_or(((target) + ((bit) / (sizeof(atomic_val_t) * 8))), mask);
 } else {
  (void)atomic_and(((target) + ((bit) / (sizeof(atomic_val_t) * 8))), ~mask);
 }
}
# 10 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util.h" 1
# 27 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 28 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util.h" 2
# 212 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util.h"
static inline 
# 212 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util.h" 3 4
             _Bool 
# 212 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util.h"
                  is_power_of_two(unsigned int x)
{
 return (x != 0U) && ((x & (x - 1U)) == 0U);
}
# 224 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util.h"
static inline int64_t arithmetic_shift_right(int64_t value, uint8_t shift)
{
 int64_t sign_ext;

 if (shift == 0U) {
  return value;
 }


 sign_ext = (value >> 63) & 1;


 sign_ext = -sign_ext;


 return (value >> shift) | (sign_ext << (64 - shift));
}
# 251 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util.h"
static inline void bytecpy(void *dst, const void *src, size_t size)
{
 size_t i;

 for (i = 0; i < size; ++i) {
  ((volatile uint8_t *)dst)[i] = ((volatile const uint8_t *)src)[i];
 }
}
# 270 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util.h"
static inline void byteswp(void *a, void *b, size_t size)
{
 uint8_t t;
 uint8_t *aa = (uint8_t *)a;
 uint8_t *bb = (uint8_t *)b;

 for (; size > 0; --size) {
  t = *aa;
  *aa++ = *bb;
  *bb++ = t;
 }
}
# 291 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util.h"
int char2hex(char c, uint8_t *x);
# 301 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util.h"
int hex2char(uint8_t x, char *c);
# 313 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util.h"
size_t bin2hex(const uint8_t *buf, size_t buflen, char *hex, size_t hexlen);
# 325 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util.h"
size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen);
# 334 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util.h"
static inline uint8_t bcd2bin(uint8_t bcd)
{
 return ((10 * (bcd >> 4)) + (bcd & 0x0F));
}
# 346 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util.h"
static inline uint8_t bin2bcd(uint8_t bin)
{
 return (((bin / 10) << 4) | (bin % 10));
}
# 364 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util.h"
uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value);
# 390 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util.h"
char *utf8_trunc(char *utf8_str);
# 404 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/util.h"
char *utf8_lcpy(char *dst, const char *src, size_t n);
# 11 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h" 2
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/string.h" 1 3
# 10 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/string.h" 3
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/_ansi.h" 1 3
# 11 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/_ansi.h" 3
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/config.h" 1 3



# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/ieeefp.h" 1 3
# 5 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/config.h" 2 3
# 12 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/_ansi.h" 2 3
# 11 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/string.h" 2 3
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h" 1 3
# 13 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h" 3
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/_ansi.h" 1 3
# 14 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h" 2 3
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 15 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h" 2 3
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_types.h" 1 3
# 24 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_types.h" 3
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/_types.h" 1 3
# 25 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_types.h" 2 3
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/lock.h" 1 3
# 33 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/lock.h" 3

# 33 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/lock.h" 3
struct __lock;
typedef struct __lock * _LOCK_T;






extern void __retarget_lock_init(_LOCK_T *lock);

extern void __retarget_lock_init_recursive(_LOCK_T *lock);

extern void __retarget_lock_close(_LOCK_T lock);

extern void __retarget_lock_close_recursive(_LOCK_T lock);

extern void __retarget_lock_acquire(_LOCK_T lock);

extern void __retarget_lock_acquire_recursive(_LOCK_T lock);

extern int __retarget_lock_try_acquire(_LOCK_T lock);

extern int __retarget_lock_try_acquire_recursive(_LOCK_T lock);


extern void __retarget_lock_release(_LOCK_T lock);

extern void __retarget_lock_release_recursive(_LOCK_T lock);
# 26 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_types.h" 2 3


typedef long __blkcnt_t;



typedef long __blksize_t;



typedef __uint64_t __fsblkcnt_t;



typedef __uint32_t __fsfilcnt_t;



typedef long _off_t;





typedef int __pid_t;



typedef short __dev_t;



typedef unsigned short __uid_t;


typedef unsigned short __gid_t;



typedef __uint32_t __id_t;







typedef unsigned short __ino_t;
# 88 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_types.h" 3
typedef __uint32_t __mode_t;





__extension__ typedef long long _off64_t;





typedef _off_t __off_t;


typedef _off64_t __loff_t;


typedef long __key_t;







typedef long _fpos_t;
# 129 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_types.h" 3
typedef unsigned int __size_t;
# 145 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_types.h" 3
typedef signed int _ssize_t;
# 156 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_types.h" 3
typedef _ssize_t __ssize_t;


# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 350 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 160 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_types.h" 2 3



typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;



typedef _LOCK_T _flock_t;




typedef void *_iconv_t;






typedef unsigned long __clock_t;






typedef __int_least64_t __time_t;





typedef unsigned long __clockid_t;


typedef unsigned long __timer_t;


typedef __uint8_t __sa_family_t;



typedef __uint32_t __socklen_t;


typedef int __nl_item;
typedef unsigned short __nlink_t;
typedef long __suseconds_t;
typedef unsigned long __useconds_t;




typedef char * __va_list;
# 16 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h" 2 3






typedef unsigned long __ULong;
# 38 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h" 3
struct _reent;

struct __locale_t;






struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};







struct _on_exit_args {
 void * _fnargs[32];
 void * _dso_handle[32];

 __ULong _fntypes;


 __ULong _is_cxa;
};


struct _atexit {
 struct _atexit *_next;
 int _ind;
 void (*_fns[32])(void);
        struct _on_exit_args * _on_exit_args_ptr;
};
# 117 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h" 3
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 153 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h" 3
struct __sFILE_fake {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;

  struct _reent *_data;
};




extern void __sinit (struct _reent *);
# 181 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h" 3
struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;


  struct _reent *_data;



  void * _cookie;

  int (*_read) (struct _reent *, void *,
        char *, int);
  int (*_write) (struct _reent *, void *,
         const char *,
         int);
  _fpos_t (*_seek) (struct _reent *, void *, _fpos_t, int);
  int (*_close) (struct _reent *, void *);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  _off_t _offset;






  _flock_t _lock;

  _mbstate_t _mbstate;
  int _flags2;
};
# 287 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h" 3
typedef struct __sFILE __FILE;



struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 319 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h" 3
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;


  __extension__ unsigned long long _rand_next;

};
# 344 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h" 3
struct _mprec
{

  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;
};


struct _misc_reent
{

  char *_strtok_last;
  _mbstate_t _mblen_state;
  _mbstate_t _wctomb_state;
  _mbstate_t _mbtowc_state;
  char _l64a_buf[8];
  int _getdate_err;
  _mbstate_t _mbrlen_state;
  _mbstate_t _mbrtowc_state;
  _mbstate_t _mbsrtowcs_state;
  _mbstate_t _wcrtomb_state;
  _mbstate_t _wcsrtombs_state;
};



struct _reent
{


  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;

  char *_emergency;

  int __sdidinit;

  int _unspecified_locale_info;
  struct __locale_t *_locale;

  struct _mprec *_mp;

  void (*__cleanup) (struct _reent *);

  int _gamma_signgam;


  int _cvtlen;
  char *_cvtbuf;

  struct _rand48 *_r48;
  struct __tm *_localtime_buf;
  char *_asctime_buf;


  void (**(_sig_func))(int);







  struct _glue __sglue;
  __FILE *__sf;
  struct _misc_reent *_misc;
  char *_signal_buf;
};
# 458 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h" 3
extern const struct __sFILE_fake __sf_fake_stdin;
extern const struct __sFILE_fake __sf_fake_stdout;
extern const struct __sFILE_fake __sf_fake_stderr;
# 814 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h" 3
extern struct _reent *_impure_ptr ;
extern struct _reent *const _global_impure_ptr ;

void _reclaim_reent (struct _reent *);
# 833 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/reent.h" 3
extern struct _atexit *_global_atexit;
# 12 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/string.h" 2 3
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/cdefs.h" 1 3
# 47 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/cdefs.h" 3
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 48 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/cdefs.h" 2 3
# 13 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/string.h" 2 3




# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 18 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/string.h" 2 3
# 27 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/string.h" 3


void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void *restrict, const void *restrict, size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *restrict, const char *restrict);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *restrict, const char *restrict);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *restrict, const char *restrict, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *restrict, const char *restrict, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);

char *strtok (char *restrict, const char *restrict);

size_t strxfrm (char *restrict, const char *restrict, size_t);
# 86 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/string.h" 3
char *_strdup_r (struct _reent *, const char *);



char *_strndup_r (struct _reent *, const char *, size_t);
# 112 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/string.h" 3
char * _strerror_r (struct _reent *, int, int, int *);
# 134 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/string.h" 3
char *strsignal (int __signo);
# 175 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/string.h" 3
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/string.h" 1 3
# 176 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/string.h" 2 3




# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/ssp/string.h" 1 3
# 35 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/ssp/string.h" 3
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/ssp/ssp.h" 1 3
# 71 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/ssp/ssp.h" 3

void __stack_chk_fail(void) __attribute__((__noreturn__));
void __chk_fail(void) __attribute__((__noreturn__));

# 36 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/ssp/string.h" 2 3


void *__memcpy_chk(void *, const void *, size_t, size_t);
void *__memmove_chk(void *, void *, size_t, size_t);
void *__mempcpy_chk(void *, const void *, size_t, size_t);
void *__memset_chk(void *, int, size_t, size_t);
char *__stpcpy_chk(char *, const char *, size_t);
char *__strcat_chk(char *, const char *, size_t);
char *__strcpy_chk(char *, const char *, size_t);
char *__strncat_chk(char *, const char *, size_t, size_t);
char *__strncpy_chk(char *, const char *, size_t, size_t);

# 82 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/ssp/string.h" 3

extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __memcpy_ichk(void * restrict, const void * restrict, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __memcpy_ichk(void * restrict dst, const void * restrict src, size_t len) { return __builtin___memcpy_chk(dst, src, len, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __memmove_ichk(void *, const void *, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __memmove_ichk(void * dst, const void * src, size_t len) { return __builtin___memmove_chk(dst, src, len, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __mempcpy_ichk(void * restrict, const void * restrict, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __mempcpy_ichk(void * restrict dst, const void * restrict src, size_t len) { return __builtin___mempcpy_chk(dst, src, len, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __memset_ichk(void *, int, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) void * __memset_ichk(void * dst, int src, size_t len) { return __builtin___memset_chk(dst, src, len, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __stpcpy_ichk(char *, const char *); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __stpcpy_ichk(char * restrict dst, const char * restrict src) { return __builtin___stpcpy_chk(dst, src, __builtin_object_size(dst, 0)); }

extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __stpncpy_ichk(char * restrict, const char * restrict, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __stpncpy_ichk(char * restrict dst, const char * restrict src, size_t len) { return __builtin___stpncpy_chk(dst, src, len, __builtin_object_size(dst, 0)); }

extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strcpy_ichk(char *, const char *); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strcpy_ichk(char * restrict dst, const char * restrict src) { return __builtin___strcpy_chk(dst, src, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strcat_ichk(char *, const char *); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strcat_ichk(char * restrict dst, const char * restrict src) { return __builtin___strcat_chk(dst, src, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strncpy_ichk(char * restrict, const char * restrict, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strncpy_ichk(char * restrict dst, const char * restrict src, size_t len) { return __builtin___strncpy_chk(dst, src, len, __builtin_object_size(dst, 0)); }
extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strncat_ichk(char * restrict, const char * restrict, size_t); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) char * __strncat_ichk(char * restrict dst, const char * restrict src, size_t len) { return __builtin___strncat_chk(dst, src, len, __builtin_object_size(dst, 0)); }

# 181 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/string.h" 2 3
# 12 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h" 1
# 10 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mpsc_packet.h" 1
# 37 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mpsc_packet.h"

# 37 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mpsc_packet.h"
struct mpsc_pbuf_hdr {
 uint32_t valid: 1; uint32_t busy: 1;
 uint32_t data: 32 - 2;
};


struct mpsc_pbuf_skip {
 uint32_t valid: 1; uint32_t busy: 1;
 uint32_t len: 32 - 2;
};


union mpsc_pbuf_generic {
 struct mpsc_pbuf_hdr hdr;
 struct mpsc_pbuf_skip skip;
 uint32_t raw;
};
# 11 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf.h" 1
# 10 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h" 1 3 4
# 40 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h" 3 4

# 40 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 99 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 11 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf.h" 2
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 12 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf.h" 2
# 38 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf_internal.h" 1
# 10 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf_internal.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/errno.h" 1 3




typedef int error_t;



# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/errno.h" 1 3
# 15 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/errno.h" 3
extern int *__errno (void);




extern const char * const _sys_errlist[];
extern int _sys_nerr;
# 10 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/errno.h" 2 3
# 11 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf_internal.h" 2

# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 13 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf_internal.h" 2
# 51 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf_internal.h"

# 51 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf_internal.h"
static inline void z_cbprintf_wcpy(int *dst, int *src, size_t len)
{
 for (size_t i = 0; i < len; i++) {
  dst[i] = src[i];
 }
}

# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf_cxx.h" 1
# 59 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf_internal.h" 2
# 301 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf_internal.h"
struct z_cbprintf_desc {
 uint8_t len;
 uint8_t str_cnt;
 uint8_t ro_str_cnt;
};


union z_cbprintf_hdr {
 struct z_cbprintf_desc desc;
 void *raw;
};
# 39 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf.h" 2
# 110 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf.h"
typedef int (*cbprintf_cb)( );
# 130 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf.h"
typedef int (*cbvprintf_exteral_formatter_func)(cbprintf_cb out, void *ctx,
      const char *fmt, va_list ap);
# 231 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf.h"
__attribute__((format (printf, 4, 5)))
int cbprintf_package(void *packaged,
       size_t len,
       uint32_t flags,
       const char *format,
       ...);
# 272 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf.h"
int cbvprintf_package(void *packaged,
        size_t len,
        uint32_t flags,
        const char *format,
        va_list ap);
# 304 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf.h"
int cbprintf_fsc_package(void *in_packaged,
    size_t in_len,
    void *packaged,
    size_t len);
# 329 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf.h"
int cbpprintf_external(cbprintf_cb out,
         cbvprintf_exteral_formatter_func formatter,
         void *ctx,
         void *packaged);
# 360 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf.h"
__attribute__((format (printf, 3, 4)))
int cbprintf(cbprintf_cb out, void *ctx, const char *format, ...);
# 388 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf.h"
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
# 407 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/cbprintf.h"
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
 return cbpprintf_external(out, cbvprintf, ctx, packaged);
}
# 12 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h" 2
# 34 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h"
typedef uint32_t log_timestamp_t;
# 50 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h"
struct log_msg2_desc {
 uint32_t valid: 1; uint32_t busy: 1; uint32_t type:1;
 uint32_t domain:3;
 uint32_t level:3;
 uint32_t package_len:10;
 uint32_t data_len:12;
 uint32_t reserved:1;
};

union log_msg2_source {
 const struct log_source_const_data *fixed;
 struct log_source_dynamic_data *dynamic;
 void *raw;
};

struct log_msg2_hdr {
 struct log_msg2_desc desc;







 const void *source;
 log_timestamp_t timestamp;







};

struct log_msg2 {
 struct log_msg2_hdr hdr;
 uint8_t data[];
};

struct log_msg2_generic_hdr {
 uint32_t valid: 1; uint32_t busy: 1; uint32_t type:1;
};

union log_msg2_generic {
 union mpsc_pbuf_generic buf;
 struct log_msg2_generic_hdr generic;
 struct log_msg2 log;
};





enum z_log_msg2_mode {



 Z_LOG_MSG2_MODE_RUNTIME,




 Z_LOG_MSG2_MODE_FROM_STACK,





 Z_LOG_MSG2_MODE_ZERO_COPY,


 Z_LOG_MSG2_MODE_SYNC
};
# 411 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h"
struct log_msg2 *z_log_msg2_alloc(uint32_t wlen);
# 426 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h"
void z_log_msg2_finalize(struct log_msg2 *msg, const void *source,
    const struct log_msg2_desc desc, const void *data);
# 439 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h"
static inline void z_log_msg2_static_create(const void *source,
     const struct log_msg2_desc desc,
     uint8_t *package, const void *data);
# 462 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h"
static inline void z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
       uint8_t level, const void *data,
       size_t dlen, const char *fmt,
       va_list ap);
# 486 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h"
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
          const void *source,
          uint8_t level, const void *data,
          size_t dlen, const char *fmt, ...)
{
 va_list ap;

 
# 493 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h" 3 4
__builtin_va_start(
# 493 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h"
ap
# 493 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h" 3 4
,
# 493 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h"
fmt
# 493 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h" 3 4
)
# 493 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h"
                 ;
 z_log_msg2_runtime_vcreate(domain_id, source, level,
       data, dlen, fmt, ap);
 
# 496 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h" 3 4
__builtin_va_end(
# 496 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h"
ap
# 496 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h" 3 4
)
# 496 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h"
          ;
}

static inline 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h" 3 4
             _Bool 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h"
                  z_log_item_is_msg(const union log_msg2_generic *msg)
{
 return msg->generic.type == 0;
}







static inline uint32_t log_msg2_get_total_wlen(const struct log_msg2_desc desc)
{
 return ((((((unsigned long)((sizeof(struct log_msg2_hdr) + desc.package_len + (desc.data_len))) + ((unsigned long)((0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) - 1)) & ~((unsigned long)((0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) - 1))) + ((sizeof(uint32_t)) - 1)) / (sizeof(uint32_t)));
}







static inline uint32_t log_msg2_generic_get_wlen(const union mpsc_pbuf_generic *item)
{
 const union log_msg2_generic *generic_msg = (const union log_msg2_generic *)item;

 if (z_log_item_is_msg(generic_msg)) {
  const struct log_msg2 *msg = (const struct log_msg2 *)generic_msg;

  return log_msg2_get_total_wlen(msg->hdr.desc);
 }

 return 0;
}







static inline uint8_t log_msg2_get_domain(struct log_msg2 *msg)
{
 return msg->hdr.desc.domain;
}







static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
 return msg->hdr.desc.level;
}







static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
 return msg->hdr.source;
}







static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
 return msg->hdr.timestamp;
}
# 586 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h"
static inline uint8_t *log_msg2_get_data(struct log_msg2 *msg, size_t *len)
{
 *len = msg->hdr.desc.data_len;

 return msg->data + msg->hdr.desc.package_len;
}
# 601 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h"
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
 *len = msg->hdr.desc.package_len;

 return msg->data;
}





# 1 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/log_msg2.h" 1






# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/tracing/tracing_syscall.h" 1
# 8 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/log_msg2.h" 2



# 1 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscall_list.h" 1
# 12 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/log_msg2.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/syscall.h" 1
# 12 "/home/sebin/thesis/zephyrproject/zephyr/include/syscall.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/syscall.h" 1
# 21 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/syscall.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/syscall.h" 1
# 22 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/syscall.h" 2
# 13 "/home/sebin/thesis/zephyrproject/zephyr/include/syscall.h" 2




# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/linker/sections.h" 1
# 132 "/home/sebin/thesis/zephyrproject/zephyr/include/linker/sections.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/linker/section_tags.h" 1
# 133 "/home/sebin/thesis/zephyrproject/zephyr/include/linker/sections.h" 2
# 18 "/home/sebin/thesis/zephyrproject/zephyr/include/syscall.h" 2
# 86 "/home/sebin/thesis/zephyrproject/zephyr/include/syscall.h"
typedef uintptr_t (*_k_syscall_handler_t)(uintptr_t arg1, uintptr_t arg2,
       uintptr_t arg3, uintptr_t arg4,
       uintptr_t arg5, uintptr_t arg6,
       void *ssf);




static inline __attribute__((always_inline)) 
# 94 "/home/sebin/thesis/zephyrproject/zephyr/include/syscall.h" 3 4
                    _Bool 
# 94 "/home/sebin/thesis/zephyrproject/zephyr/include/syscall.h"
                         z_syscall_trap(void)
{
 
# 96 "/home/sebin/thesis/zephyrproject/zephyr/include/syscall.h" 3 4
_Bool 
# 96 "/home/sebin/thesis/zephyrproject/zephyr/include/syscall.h"
     ret = 
# 96 "/home/sebin/thesis/zephyrproject/zephyr/include/syscall.h" 3 4
           0
# 96 "/home/sebin/thesis/zephyrproject/zephyr/include/syscall.h"
                ;
# 106 "/home/sebin/thesis/zephyrproject/zephyr/include/syscall.h"
 return ret;
}







static inline 
# 115 "/home/sebin/thesis/zephyrproject/zephyr/include/syscall.h" 3 4
             _Bool 
# 115 "/home/sebin/thesis/zephyrproject/zephyr/include/syscall.h"
                  k_is_user_context(void)
{



 return 
# 120 "/home/sebin/thesis/zephyrproject/zephyr/include/syscall.h" 3 4
       0
# 120 "/home/sebin/thesis/zephyrproject/zephyr/include/syscall.h"
            ;

}
# 13 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/log_msg2.h" 2





#pragma GCC diagnostic push



#pragma GCC diagnostic ignored "-Wstrict-aliasing"

#pragma GCC diagnostic ignored "-Warray-bounds"







extern void z_impl_z_log_msg2_static_create(const void * source, const struct log_msg2_desc desc, uint8_t * package, const void * data);


static inline void z_log_msg2_static_create(const void * source, const struct log_msg2_desc desc, uint8_t * package, const void * data)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 44 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/log_msg2.h" 3 4
0
# 44 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/log_msg2.h"
);
 z_impl_z_log_msg2_static_create(source, desc, package, data);
}
# 56 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/log_msg2.h"
extern void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void * source, uint8_t level, const void * data, size_t dlen, const char * fmt, va_list ap);


static inline void z_log_msg2_runtime_vcreate(uint8_t domain_id, const void * source, uint8_t level, const void * data, size_t dlen, const char * fmt, va_list ap)
{
# 72 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/log_msg2.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 72 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/log_msg2.h" 3 4
0
# 72 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/log_msg2.h"
);
 z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
}
# 89 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/log_msg2.h"
#pragma GCC diagnostic pop
# 613 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg2.h" 2
# 13 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h" 2
# 29 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
typedef unsigned long log_arg_t;
# 85 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
struct log_msg_ids {
 uint16_t level : 3;
 uint16_t domain_id : 3;
 uint16_t source_id : 10;
};


struct log_msg_generic_hdr {
 uint16_t type : 1; uint16_t ext : 1;
 uint16_t reserved : 14;
};


struct log_msg_std_hdr {
 uint16_t type : 1; uint16_t ext : 1;
 uint16_t reserved : 10;
 uint16_t nargs : 4;
};


struct log_msg_hexdump_hdr {
 uint16_t type : 1; uint16_t ext : 1;
 uint16_t length : 14;
};


struct log_msg_hdr {
 atomic_t ref_cnt;
 union log_msg_hdr_params {
  struct log_msg_generic_hdr generic;
  struct log_msg_std_hdr std;
  struct log_msg_hexdump_hdr hexdump;
  uint16_t raw;
 } params;
 struct log_msg_ids ids;
 uint32_t timestamp;
};


union log_msg_head_data {
 log_arg_t args[3U];
 uint8_t bytes[(3U * sizeof(log_arg_t))];
};


struct log_msg_ext_head_data {
 struct log_msg_cont *next;
 union log_msg_ext_head_data_data {
  log_arg_t args[(3U - (sizeof(void *)/sizeof(log_arg_t)))];
  uint8_t bytes[((3U * sizeof(log_arg_t)) - sizeof(void *))];
 } data;
};


struct log_msg {
 struct log_msg *next;
 struct log_msg_hdr hdr;
 const char *str;
 union log_msg_data {
  union log_msg_head_data single;
  struct log_msg_ext_head_data ext;
 } payload;
};


struct log_msg_cont {
 struct log_msg_cont *next;
 union log_msg_cont_data {
  log_arg_t args[((sizeof(struct log_msg) - sizeof(void *)) / sizeof(log_arg_t))];
  uint8_t bytes[(sizeof(struct log_msg) - sizeof(void *))];
 } payload;
};


union log_msg_chunk {
 struct log_msg head;
 struct log_msg_cont cont;
};


void log_msg_pool_init(void);
# 174 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
void log_msg_get(struct log_msg *msg);
# 183 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
void log_msg_put(struct log_msg *msg);







static inline uint32_t log_msg_domain_id_get(struct log_msg *msg)
{
 return msg->hdr.ids.domain_id;
}







static inline uint32_t log_msg_source_id_get(struct log_msg *msg)
{
 return msg->hdr.ids.source_id;
}







static inline uint32_t log_msg_level_get(struct log_msg *msg)
{
 return msg->hdr.ids.level;
}







static inline uint32_t log_msg_timestamp_get(struct log_msg *msg)
{
 return msg->hdr.timestamp;
}
# 236 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
static inline 
# 236 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h" 3 4
             _Bool 
# 236 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
                  log_msg_is_std(struct log_msg *msg)
{
 return (msg->hdr.params.generic.type == 0U);
}







uint32_t log_msg_nargs_get(struct log_msg *msg);
# 257 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
log_arg_t log_msg_arg_get(struct log_msg *msg, uint32_t arg_idx);
# 266 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
const char *log_msg_str_get(struct log_msg *msg);
# 282 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
struct log_msg *log_msg_hexdump_create(const char *str,
           const uint8_t *data,
           uint32_t length);
# 293 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
void log_msg_hexdump_data_put(struct log_msg *msg,
         uint8_t *data,
         size_t *length,
         size_t offset);
# 305 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
void log_msg_hexdump_data_get(struct log_msg *msg,
         uint8_t *data,
         size_t *length,
         size_t offset);

union log_msg_chunk *log_msg_no_space_handle(void);





union log_msg_chunk *log_msg_chunk_alloc(void);





static inline struct log_msg *z_log_msg_std_alloc(void)
{
 struct log_msg *msg = (struct log_msg *)log_msg_chunk_alloc();

 if (msg != 
# 326 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h" 3 4
           ((void *)0)
# 326 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
               ) {

  msg->hdr.ref_cnt = 1;
  msg->hdr.params.raw = 0U;
  msg->hdr.params.std.type = 0U;

  if (0) {

   msg->hdr.ids.level = 0;
   msg->hdr.ids.domain_id = 0;
   msg->hdr.ids.source_id = 0;
  }
 }

 return msg;
}
# 351 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
static inline struct log_msg *log_msg_create_0(const char *str)
{
 struct log_msg *msg = z_log_msg_std_alloc();

 if (msg != 
# 355 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h" 3 4
           ((void *)0)
# 355 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
               ) {
  msg->str = str;
 }

 return msg;
}
# 375 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
static inline struct log_msg *log_msg_create_1(const char *str,
            log_arg_t arg1)
{
 struct log_msg *msg = z_log_msg_std_alloc();

 if (msg != 
# 380 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h" 3 4
           ((void *)0)
# 380 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
               ) {
  msg->str = str;
  msg->hdr.params.std.nargs = 1U;
  msg->payload.single.args[0] = arg1;
 }

 return msg;
}
# 403 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
static inline struct log_msg *log_msg_create_2(const char *str,
            log_arg_t arg1,
            log_arg_t arg2)
{
 struct log_msg *msg = z_log_msg_std_alloc();

 if (msg != 
# 409 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h" 3 4
           ((void *)0)
# 409 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
               ) {
  msg->str = str;
  msg->hdr.params.std.nargs = 2U;
  msg->payload.single.args[0] = arg1;
  msg->payload.single.args[1] = arg2;
 }

 return msg;
}
# 434 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
static inline struct log_msg *log_msg_create_3(const char *str,
            log_arg_t arg1,
            log_arg_t arg2,
            log_arg_t arg3)
{
 struct log_msg *msg = z_log_msg_std_alloc();

 if (msg != 
# 441 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h" 3 4
           ((void *)0)
# 441 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
               ) {
  msg->str = str;
  msg->hdr.params.std.nargs = 3U;
  msg->payload.single.args[0] = arg1;
  msg->payload.single.args[1] = arg2;
  msg->payload.single.args[2] = arg3;
 }

 return msg;
}
# 466 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_msg.h"
struct log_msg *log_msg_create_n(const char *str,
     log_arg_t *args,
     uint32_t nargs);




uint32_t log_msg_mem_get_free(void);




uint32_t log_msg_mem_get_used(void);




uint32_t log_msg_mem_get_max_used(void);
# 10 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h" 2
# 264 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
void z_log_minimal_hexdump_print(int level, const void *data, size_t size);
void z_log_minimal_vprintk(const char *fmt, va_list ap);
void z_log_minimal_printk(const char *fmt, ...);
# 280 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
static inline char z_log_minimal_level_to_char(int level)
{
 switch (level) {
 case 1U:
  return 'E';
 case 2U:
  return 'W';
 case 3U:
  return 'I';
 case 4U:
  return 'D';
 default:
  return '?';
 }
}
# 518 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
extern struct log_source_const_data __log_const_start[];
extern struct log_source_const_data __log_const_end[];


enum log_strdup_action {
 LOG_STRDUP_SKIP,
 LOG_STRDUP_EXEC,
 LOG_STRDUP_CHECK_EXEC
};
# 549 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
static inline uint32_t log_const_source_id(
    const struct log_source_const_data *data)
{
 return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   sizeof(struct log_source_const_data);
}

extern struct log_source_dynamic_data __log_dynamic_start[];
extern struct log_source_dynamic_data __log_dynamic_end[];
# 575 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
 return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
   sizeof(struct log_source_dynamic_data);
}


static inline __attribute__((format (printf, 1, 2)))
void z_log_printf_arg_checker(const char *fmt, ...)
{
 (void)(fmt);
}






void log_0(const char *str, struct log_msg_ids src_level);







void log_1(const char *str,
    log_arg_t arg1,
    struct log_msg_ids src_level);
# 612 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
void log_2(const char *str,
    log_arg_t arg1,
    log_arg_t arg2,
    struct log_msg_ids src_level);
# 625 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
void log_3(const char *str,
    log_arg_t arg1,
    log_arg_t arg2,
    log_arg_t arg3,
    struct log_msg_ids src_level);
# 638 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
void log_n(const char *str,
    log_arg_t *args,
    uint32_t narg,
    struct log_msg_ids src_level);
# 650 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
void log_hexdump(const char *str, const void *data, uint32_t length,
   struct log_msg_ids src_level);







void log_string_sync(struct log_msg_ids src_level, const char *fmt, ...);
# 668 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
void log_hexdump_sync(struct log_msg_ids src_level, const char *metadata,
        const void *data, uint32_t len);
# 681 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap,
   enum log_strdup_action strdup_action);
# 693 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
static inline void log2_generic(uint8_t level, const char *fmt, va_list ap)
{
 z_log_msg2_runtime_vcreate(0, 
# 695 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h" 3 4
                                                 ((void *)0)
# 695 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
                                                     , level,
       
# 696 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h" 3 4
      ((void *)0)
# 696 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
          , 0, fmt, ap);
}
# 708 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
uint32_t log_count_args(const char *fmt);







void log_generic_from_user(struct log_msg_ids src_level,
      const char *fmt, va_list ap);








# 725 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h" 3 4
_Bool 
# 725 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
    log_is_strdup(const void *buf);
# 736 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
void __attribute__((format (printf, 2, 3))) log_from_user(struct log_msg_ids src_level,
           const char *fmt, ...);


static inline void z_log_string_from_user(uint32_t src_level_val, const char *str);
# 753 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
uint32_t z_log_get_s_mask(const char *str, uint32_t nargs);
# 765 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
void log_hexdump_from_user(struct log_msg_ids src_level, const char *metadata,
      const void *data, uint32_t len);


static inline void z_log_hexdump_from_user(uint32_t src_level_val,
           const char *metadata,
           const uint8_t *data, uint32_t len);
# 832 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
static inline log_arg_t z_log_do_strdup(uint32_t msk, uint32_t idx,
     log_arg_t param,
     enum log_strdup_action action)
{

 char *z_log_strdup(const char *str);

 if (msk & (1 << idx)) {
  const char *str = (const char *)param;





  if (action == LOG_STRDUP_EXEC || !log_is_strdup(str)) {
   param = (log_arg_t)z_log_strdup(str);
  }
 }





 return param;
}
# 896 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h"
# 1 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/log_core.h" 1
# 18 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/log_core.h"
#pragma GCC diagnostic push



#pragma GCC diagnostic ignored "-Wstrict-aliasing"

#pragma GCC diagnostic ignored "-Warray-bounds"







extern void z_impl_z_log_string_from_user(uint32_t src_level_val, const char * str);


static inline void z_log_string_from_user(uint32_t src_level_val, const char * str)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 44 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/log_core.h" 3 4
0
# 44 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/log_core.h"
);
 z_impl_z_log_string_from_user(src_level_val, str);
}
# 56 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/log_core.h"
extern void z_impl_z_log_hexdump_from_user(uint32_t src_level_val, const char * metadata, const uint8_t * data, uint32_t len);


static inline void z_log_hexdump_from_user(uint32_t src_level_val, const char * metadata, const uint8_t * data, uint32_t len)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 68 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/log_core.h" 3 4
0
# 68 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/log_core.h"
);
 z_impl_z_log_hexdump_from_user(src_level_val, metadata, data, len);
}
# 85 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/log_core.h"
#pragma GCC diagnostic pop
# 897 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log_core.h" 2
# 12 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log.h" 2
# 268 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log.h"
void z_log_vprintk(const char *fmt, va_list ap);
# 287 "/home/sebin/thesis/zephyrproject/zephyr/include/logging/log.h"
char *z_log_strdup(const char *str);
static inline char *log_strdup(const char *str)
{
 if (0 || 1) {
  return (char *)str;
 }

 return z_log_strdup(str);
}
# 8 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 2
const struct log_source_const_data log_const_net_if __attribute__ ((section("." "log_const_net_if"))) __attribute__((used)) = { .name = "net_if", .level = 3 }; extern const struct log_source_const_data log_const_net_if; extern struct log_source_dynamic_data log_dynamic_net_if; static const struct log_source_const_data * __log_current_const_data 
# 8 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
__attribute__((__unused__)) 
# 8 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
= 3 ? &log_const_net_if : 
# 8 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 8 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; static struct log_source_dynamic_data * __log_current_dynamic_data 
# 8 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
__attribute__((__unused__)) 
# 8 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
= (3 && 0) ? &log_dynamic_net_if : 
# 8 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 8 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; static const uint32_t __log_level 
# 8 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
__attribute__((__unused__)) 
# 8 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
= 3;

# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/init.h" 1
# 11 "/home/sebin/thesis/zephyrproject/zephyr/include/init.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 1
# 17 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_includes.h" 1
# 16 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_includes.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 17 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_includes.h" 2

# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include-fixed/limits.h" 1 3 4
# 34 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include-fixed/limits.h" 3 4
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include-fixed/syslimits.h" 1 3 4






# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include-fixed/limits.h" 1 3 4
# 194 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include-fixed/limits.h" 3 4
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/limits.h" 1 3 4





# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/syslimits.h" 1 3 4
# 7 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/limits.h" 2 3 4
# 195 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include-fixed/limits.h" 2 3 4
# 8 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include-fixed/syslimits.h" 2 3 4
# 35 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include-fixed/limits.h" 2 3 4
# 19 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_includes.h" 2



# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/__assert.h" 1
# 11 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/__assert.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/printk.h" 1
# 12 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/printk.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 13 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/printk.h" 2

# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/inttypes.h" 1 3
# 18 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/inttypes.h" 3
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_intsup.h" 1 3
# 35 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_intsup.h" 3
       
       
       
       
       
       
       
# 187 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/sys/_intsup.h" 3
       
       
       
       
       
       
       
# 19 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/inttypes.h" 2 3



# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 23 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/inttypes.h" 2 3
# 312 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/inttypes.h" 3

# 312 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/inttypes.h" 3
typedef struct {
  intmax_t quot;
  intmax_t rem;
} imaxdiv_t;

struct _reent;





extern intmax_t imaxabs(intmax_t j);
extern imaxdiv_t imaxdiv(intmax_t numer, intmax_t denomer);
extern intmax_t strtoimax(const char *restrict, char **restrict, int);
extern intmax_t _strtoimax_r(struct _reent *, const char *restrict, char **restrict, int);
extern uintmax_t strtoumax(const char *restrict, char **restrict, int);
extern uintmax_t _strtoumax_r(struct _reent *, const char *restrict, char **restrict, int);
extern intmax_t wcstoimax(const wchar_t *restrict, wchar_t **restrict, int);
extern intmax_t _wcstoimax_r(struct _reent *, const wchar_t *restrict, wchar_t **restrict, int);
extern uintmax_t wcstoumax(const wchar_t *restrict, wchar_t **restrict, int);
extern uintmax_t _wcstoumax_r(struct _reent *, const wchar_t *restrict, wchar_t **restrict, int);
# 15 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/printk.h" 2
# 47 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/printk.h"

# 47 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/printk.h"
extern __attribute__((format (printf, 1, 2))) void printk(const char *fmt, ...);
extern __attribute__((format (printf, 1, 0))) void vprintk(const char *fmt, va_list ap);
# 63 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/printk.h"
extern __attribute__((format (printf, 3, 4))) int snprintk(char *str, size_t size,
     const char *fmt, ...);
extern __attribute__((format (printf, 3, 0))) int vsnprintk(char *str, size_t size,
       const char *fmt, va_list ap);
# 12 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/__assert.h" 2
# 23 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_includes.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/sched_priq.h" 1
# 10 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/sched_priq.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 1
# 23 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 24 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 2
# 37 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
struct _dnode {
 union {
  struct _dnode *head;
  struct _dnode *next;
 };
 union {
  struct _dnode *tail;
  struct _dnode *prev;
 };
};

typedef struct _dnode sys_dlist_t;
typedef struct _dnode sys_dnode_t;
# 197 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline void sys_dlist_init(sys_dlist_t *list)
{
 list->head = (sys_dnode_t *)list;
 list->tail = (sys_dnode_t *)list;
}
# 211 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline void sys_dnode_init(sys_dnode_t *node)
{
 node->next = 
# 213 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 3 4
             ((void *)0)
# 213 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
                 ;
 node->prev = 
# 214 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 3 4
             ((void *)0)
# 214 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
                 ;
}
# 225 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline 
# 225 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 3 4
             _Bool 
# 225 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
                  sys_dnode_is_linked(const sys_dnode_t *node)
{
 return node->next != 
# 227 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 3 4
                     ((void *)0)
# 227 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
                         ;
}
# 239 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline 
# 239 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 3 4
             _Bool 
# 239 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
                  sys_dlist_is_head(sys_dlist_t *list, sys_dnode_t *node)
{
 return list->head == node;
}
# 253 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline 
# 253 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 3 4
             _Bool 
# 253 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
                  sys_dlist_is_tail(sys_dlist_t *list, sys_dnode_t *node)
{
 return list->tail == node;
}
# 266 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline 
# 266 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 3 4
             _Bool 
# 266 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
                  sys_dlist_is_empty(sys_dlist_t *list)
{
 return list->head == list;
}
# 281 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline 
# 281 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 3 4
             _Bool 
# 281 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
                  sys_dlist_has_multiple_nodes(sys_dlist_t *list)
{
 return list->head != list->tail;
}
# 294 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
 return sys_dlist_is_empty(list) ? 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 3 4
                                  ((void *)0) 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
                                       : list->head;
}
# 309 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_head_not_empty(sys_dlist_t *list)
{
 return list->head;
}
# 325 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
       sys_dnode_t *node)
{
 return (node == list->tail) ? 
# 328 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 3 4
                              ((void *)0) 
# 328 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
                                   : node->next;
}
# 341 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
            sys_dnode_t *node)
{
 return (node != 
# 344 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 3 4
                ((void *)0)
# 344 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
                    ) ? sys_dlist_peek_next_no_check(list, node) : 
# 344 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 3 4
                                                                   ((void *)0)
# 344 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
                                                                       ;
}
# 359 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_prev_no_check(sys_dlist_t *list,
       sys_dnode_t *node)
{
 return (node == list->head) ? 
# 362 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 3 4
                              ((void *)0) 
# 362 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
                                   : node->prev;
}
# 376 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_prev(sys_dlist_t *list,
            sys_dnode_t *node)
{
 return (node != 
# 379 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 3 4
                ((void *)0)
# 379 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
                    ) ? sys_dlist_peek_prev_no_check(list, node) : 
# 379 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 3 4
                                                                   ((void *)0)
# 379 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
                                                                       ;
}
# 390 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_peek_tail(sys_dlist_t *list)
{
 return sys_dlist_is_empty(list) ? 
# 392 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 3 4
                                  ((void *)0) 
# 392 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
                                       : list->tail;
}
# 404 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
 sys_dnode_t *const tail = list->tail;

 node->next = list;
 node->prev = tail;

 tail->next = node;
 list->tail = node;
}
# 424 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
 sys_dnode_t *const head = list->head;

 node->next = head;
 node->prev = list;

 head->prev = node;
 list->head = node;
}
# 443 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
 sys_dnode_t *const prev = successor->prev;

 node->prev = prev;
 node->next = successor;
 prev->next = node;
 successor->prev = node;
}
# 468 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline void sys_dlist_insert_at(sys_dlist_t *list, sys_dnode_t *node,
 int (*cond)(sys_dnode_t *node, void *data), void *data)
{
 if (sys_dlist_is_empty(list)) {
  sys_dlist_append(list, node);
 } else {
  sys_dnode_t *pos = sys_dlist_peek_head(list);

  while ((pos != 
# 476 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 3 4
                ((void *)0)
# 476 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
                    ) && (cond(pos, data) == 0)) {
   pos = sys_dlist_peek_next(list, pos);
  }
  if (pos != 
# 479 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 3 4
            ((void *)0)
# 479 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
                ) {
   sys_dlist_insert(pos, node);
  } else {
   sys_dlist_append(list, node);
  }
 }
}
# 496 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline void sys_dlist_remove(sys_dnode_t *node)
{
 sys_dnode_t *const prev = node->prev;
 sys_dnode_t *const next = node->next;

 prev->next = next;
 next->prev = prev;
 sys_dnode_init(node);
}
# 516 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
 sys_dnode_t *node = 
# 518 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h" 3 4
                    ((void *)0)
# 518 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/dlist.h"
                        ;

 if (!sys_dlist_is_empty(list)) {
  node = list->head;
  sys_dlist_remove(node);
 }

 return node;
}
# 11 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/sched_priq.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/rb.h" 1
# 49 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/rb.h"
struct rbnode {
 struct rbnode *children[2];
};
# 81 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/rb.h"
typedef 
# 81 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/rb.h" 3 4
       _Bool 
# 81 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/rb.h"
            (*rb_lessthan_t)(struct rbnode *a, struct rbnode *b);

struct rbtree {
 struct rbnode *root;
 rb_lessthan_t lessthan_fn;
 int max_depth;




};

typedef void (*rb_visit_t)(struct rbnode *node, void *cookie);

struct rbnode *z_rb_child(struct rbnode *node, uint8_t side);
int z_rb_is_black(struct rbnode *node);

void z_rb_walk(struct rbnode *node, rb_visit_t visit_fn, void *cookie);

struct rbnode *z_rb_get_minmax(struct rbtree *tree, uint8_t side);




void rb_insert(struct rbtree *tree, struct rbnode *node);




void rb_remove(struct rbtree *tree, struct rbnode *node);




static inline struct rbnode *rb_get_min(struct rbtree *tree)
{
 return z_rb_get_minmax(tree, 0U);
}




static inline struct rbnode *rb_get_max(struct rbtree *tree)
{
 return z_rb_get_minmax(tree, 1U);
}
# 137 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/rb.h"

# 137 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/rb.h" 3 4
_Bool 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/rb.h"
    rb_contains(struct rbtree *tree, struct rbnode *node);
# 148 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/rb.h"
static inline void rb_walk(struct rbtree *tree, rb_visit_t visit_fn,
      void *cookie)
{
 z_rb_walk(tree->root, visit_fn, cookie);
}


struct _rb_foreach {
 struct rbnode **stack;
 uint8_t *is_left;
 int32_t top;
};
# 176 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/rb.h"
struct rbnode *z_rb_foreach_next(struct rbtree *tree, struct _rb_foreach *f);
# 12 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/sched_priq.h" 2
# 32 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/sched_priq.h"
struct k_thread;

struct k_thread *z_priq_dumb_best(sys_dlist_t *pq);
void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread);

struct _priq_rb {
 struct rbtree tree;
 int next_order_key;
};

void z_priq_rb_add(struct _priq_rb *pq, struct k_thread *thread);
void z_priq_rb_remove(struct _priq_rb *pq, struct k_thread *thread);
struct k_thread *z_priq_rb_best(struct _priq_rb *pq);
# 53 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/sched_priq.h"
struct _priq_mq {
 sys_dlist_t queues[32];
 unsigned int bitmask;
};

struct k_thread *z_priq_mq_best(struct _priq_mq *pq);
# 24 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_includes.h" 2

# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 1
# 20 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 21 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 2

# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/list_gen.h" 1
# 10 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/list_gen.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 11 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/list_gen.h" 2
# 23 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 2






struct _snode {
 struct _snode *next;
};

typedef struct _snode sys_snode_t;

struct _slist {
 sys_snode_t *head;
 sys_snode_t *tail;
};

typedef struct _slist sys_slist_t;
# 196 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
static inline void sys_slist_init(sys_slist_t *list)
{
 list->head = 
# 198 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
             ((void *)0)
# 198 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
                 ;
 list->tail = 
# 199 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
             ((void *)0)
# 199 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
                 ;
}



static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
 return node->next;
}

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
 parent->next = child;
}

static inline void z_slist_head_set(sys_slist_t *list, sys_snode_t *node)
{
 list->head = node;
}

static inline void z_slist_tail_set(sys_slist_t *list, sys_snode_t *node)
{
 list->tail = node;
}
# 231 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
 return list->head;
}
# 243 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
 return list->tail;
}
# 259 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
static inline 
# 259 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
             _Bool 
# 259 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
                  sys_slist_is_empty(sys_slist_t *list);

static inline 
# 261 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
_Bool 
# 261 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
sys_slist_is_empty(sys_slist_t *list) { return (sys_slist_peek_head(list) == 
# 261 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
((void *)0)
# 261 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
); }
# 272 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

static inline sys_snode_t * sys_slist_peek_next_no_check(sys_snode_t *node) { return z_snode_next_peek(node); }
# 283 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

static inline sys_snode_t * sys_slist_peek_next(sys_snode_t *node) { return node != 
# 285 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
((void *)0) 
# 285 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
? sys_slist_peek_next_no_check(node) : 
# 285 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
((void *)0)
# 285 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
; }
# 295 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
static inline void sys_slist_prepend(sys_slist_t *list,
         sys_snode_t *node);

static inline void sys_slist_prepend(sys_slist_t *list, sys_snode_t *node) { z_snode_next_set(node, sys_slist_peek_head(list)); z_slist_head_set(list, node); if (sys_slist_peek_tail(list) == 
# 298 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
((void *)0)
# 298 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
) { z_slist_tail_set(list, sys_slist_peek_head(list)); } }
# 308 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
static inline void sys_slist_append(sys_slist_t *list,
        sys_snode_t *node);

static inline void sys_slist_append(sys_slist_t *list, sys_snode_t *node) { z_snode_next_set(node, 
# 311 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
((void *)0)
# 311 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
); if (sys_slist_peek_tail(list) == 
# 311 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
((void *)0)
# 311 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
) { z_slist_tail_set(list, node); z_slist_head_set(list, node); } else { z_snode_next_set( sys_slist_peek_tail(list), node); z_slist_tail_set(list, node); } }
# 326 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
static inline void sys_slist_append_list(sys_slist_t *list,
      void *head, void *tail);

static inline void sys_slist_append_list(sys_slist_t *list, void *head, void *tail) { if (sys_slist_peek_tail(list) == 
# 329 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
((void *)0)
# 329 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
) { z_slist_head_set(list, (sys_snode_t *)head); } else { z_snode_next_set( sys_slist_peek_tail(list), (sys_snode_t *)head); } z_slist_tail_set(list, (sys_snode_t *)tail); }
# 340 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
static inline void sys_slist_merge_slist(sys_slist_t *list,
      sys_slist_t *list_to_append);

static inline void sys_slist_merge_slist ( sys_slist_t *list, sys_slist_t *list_to_append) { sys_snode_t *head, *tail; head = sys_slist_peek_head(list_to_append); tail = sys_slist_peek_tail(list_to_append); sys_slist_append_list(list, head, tail); sys_slist_init(list_to_append); }
# 354 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
static inline void sys_slist_insert(sys_slist_t *list,
        sys_snode_t *prev,
        sys_snode_t *node);

static inline void sys_slist_insert(sys_slist_t *list, sys_snode_t *prev, sys_snode_t *node) { if (prev == 
# 358 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
((void *)0)
# 358 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
) { sys_slist_prepend(list, node); } else if (z_snode_next_peek(prev) == 
# 358 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
((void *)0)
# 358 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
) { sys_slist_append(list, node); } else { z_snode_next_set(node, z_snode_next_peek(prev)); z_snode_next_set(prev, node); } }
# 370 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

static inline sys_snode_t * sys_slist_get_not_empty(sys_slist_t *list) { sys_snode_t *node = sys_slist_peek_head(list); z_slist_head_set(list, z_snode_next_peek(node)); if (sys_slist_peek_tail(list) == node) { z_slist_tail_set(list, sys_slist_peek_head(list)); } return node; }
# 383 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

static inline sys_snode_t * sys_slist_get(sys_slist_t *list) { return sys_slist_is_empty(list) ? 
# 385 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
((void *)0) 
# 385 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
: sys_slist_get_not_empty(list); }
# 397 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
static inline void sys_slist_remove(sys_slist_t *list,
        sys_snode_t *prev_node,
        sys_snode_t *node);

static inline void sys_slist_remove(sys_slist_t *list, sys_snode_t *prev_node, sys_snode_t *node) { if (prev_node == 
# 401 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
((void *)0)
# 401 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
) { z_slist_head_set(list, z_snode_next_peek(node)); if (sys_slist_peek_tail(list) == node) { z_slist_tail_set(list, sys_slist_peek_head(list)); } } else { z_snode_next_set(prev_node, z_snode_next_peek(node)); if (sys_slist_peek_tail(list) == node) { z_slist_tail_set(list, prev_node); } } z_snode_next_set(node, 
# 401 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
((void *)0)
# 401 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
); }
# 413 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
static inline 
# 413 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
             _Bool 
# 413 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
                  sys_slist_find_and_remove(sys_slist_t *list,
          sys_snode_t *node);


static inline 
# 417 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
_Bool 
# 417 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
sys_slist_find_and_remove(sys_slist_t *list, sys_snode_t *node) { sys_snode_t *prev = 
# 417 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
((void *)0)
# 417 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
; sys_snode_t *test; for (test = sys_slist_peek_head(list); test != 
# 417 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
((void *)0)
# 417 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
; test = sys_slist_peek_next(test)) { if (test == node) { sys_slist_remove(list, prev, node); return 
# 417 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
1
# 417 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
; } prev = test; } return 
# 417 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h" 3 4
0
# 417 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/slist.h"
; }
# 26 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_includes.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 1
# 20 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 21 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 2
# 32 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
typedef uint32_t unative_t;


struct _sfnode {
 unative_t next_and_flags;
};

typedef struct _sfnode sys_sfnode_t;

struct _sflist {
 sys_sfnode_t *head;
 sys_sfnode_t *tail;
};

typedef struct _sflist sys_sflist_t;
# 202 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
static inline void sys_sflist_init(sys_sflist_t *list)
{
 list->head = 
# 204 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
             ((void *)0)
# 204 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
                 ;
 list->tail = 
# 205 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
             ((void *)0)
# 205 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
                 ;
}




static inline sys_sfnode_t *z_sfnode_next_peek(sys_sfnode_t *node)
{
 return (sys_sfnode_t *)(node->next_and_flags & ~0x3UL);
}

static inline uint8_t sys_sfnode_flags_get(sys_sfnode_t *node);

static inline void z_sfnode_next_set(sys_sfnode_t *parent,
           sys_sfnode_t *child)
{
 uint8_t cur_flags = sys_sfnode_flags_get(parent);

 parent->next_and_flags = cur_flags | (unative_t)child;
}

static inline void z_sflist_head_set(sys_sflist_t *list, sys_sfnode_t *node)
{
 list->head = node;
}

static inline void z_sflist_tail_set(sys_sflist_t *list, sys_sfnode_t *node)
{
 list->tail = node;
}
# 243 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
 return list->head;
}
# 255 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
 return list->tail;
}
# 270 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
static inline uint8_t sys_sfnode_flags_get(sys_sfnode_t *node)
{
 return node->next_and_flags & 0x3UL;
}
# 288 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
 { };
 node->next_and_flags = flags;
}
# 304 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
static inline void sys_sfnode_flags_set(sys_sfnode_t *node, uint8_t flags)
{
 { };
 node->next_and_flags = (unative_t)(z_sfnode_next_peek(node)) | flags;
}
# 321 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
static inline 
# 321 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
             _Bool 
# 321 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
                  sys_sflist_is_empty(sys_sflist_t *list);

static inline 
# 323 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
_Bool 
# 323 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
sys_sflist_is_empty(sys_sflist_t *list) { return (sys_sflist_peek_head(list) == 
# 323 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
((void *)0)
# 323 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
); }
# 334 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
static inline sys_sfnode_t *sys_sflist_peek_next_no_check(sys_sfnode_t *node);

static inline sys_sfnode_t * sys_sflist_peek_next_no_check(sys_sfnode_t *node) { return z_sfnode_next_peek(node); }
# 345 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
static inline sys_sfnode_t *sys_sflist_peek_next(sys_sfnode_t *node);

static inline sys_sfnode_t * sys_sflist_peek_next(sys_sfnode_t *node) { return node != 
# 347 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
((void *)0) 
# 347 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
? sys_sflist_peek_next_no_check(node) : 
# 347 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
((void *)0)
# 347 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
; }
# 357 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
static inline void sys_sflist_prepend(sys_sflist_t *list,
          sys_sfnode_t *node);

static inline void sys_sflist_prepend(sys_sflist_t *list, sys_sfnode_t *node) { z_sfnode_next_set(node, sys_sflist_peek_head(list)); z_sflist_head_set(list, node); if (sys_sflist_peek_tail(list) == 
# 360 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
((void *)0)
# 360 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
) { z_sflist_tail_set(list, sys_sflist_peek_head(list)); } }
# 370 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
static inline void sys_sflist_append(sys_sflist_t *list,
         sys_sfnode_t *node);

static inline void sys_sflist_append(sys_sflist_t *list, sys_sfnode_t *node) { z_sfnode_next_set(node, 
# 373 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
((void *)0)
# 373 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
); if (sys_sflist_peek_tail(list) == 
# 373 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
((void *)0)
# 373 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
) { z_sflist_tail_set(list, node); z_sflist_head_set(list, node); } else { z_sfnode_next_set( sys_sflist_peek_tail(list), node); z_sflist_tail_set(list, node); } }
# 388 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
static inline void sys_sflist_append_list(sys_sflist_t *list,
       void *head, void *tail);

static inline void sys_sflist_append_list(sys_sflist_t *list, void *head, void *tail) { if (sys_sflist_peek_tail(list) == 
# 391 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
((void *)0)
# 391 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
) { z_sflist_head_set(list, (sys_sfnode_t *)head); } else { z_sfnode_next_set( sys_sflist_peek_tail(list), (sys_sfnode_t *)head); } z_sflist_tail_set(list, (sys_sfnode_t *)tail); }
# 402 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
static inline void sys_sflist_merge_sflist(sys_sflist_t *list,
        sys_sflist_t *list_to_append);

static inline void sys_sflist_merge_sflist ( sys_sflist_t *list, sys_sflist_t *list_to_append) { sys_sfnode_t *head, *tail; head = sys_sflist_peek_head(list_to_append); tail = sys_sflist_peek_tail(list_to_append); sys_sflist_append_list(list, head, tail); sys_sflist_init(list_to_append); }
# 416 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
static inline void sys_sflist_insert(sys_sflist_t *list,
         sys_sfnode_t *prev,
         sys_sfnode_t *node);

static inline void sys_sflist_insert(sys_sflist_t *list, sys_sfnode_t *prev, sys_sfnode_t *node) { if (prev == 
# 420 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
((void *)0)
# 420 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
) { sys_sflist_prepend(list, node); } else if (z_sfnode_next_peek(prev) == 
# 420 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
((void *)0)
# 420 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
) { sys_sflist_append(list, node); } else { z_sfnode_next_set(node, z_sfnode_next_peek(prev)); z_sfnode_next_set(prev, node); } }
# 432 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

static inline sys_sfnode_t * sys_sflist_get_not_empty(sys_sflist_t *list) { sys_sfnode_t *node = sys_sflist_peek_head(list); z_sflist_head_set(list, z_sfnode_next_peek(node)); if (sys_sflist_peek_tail(list) == node) { z_sflist_tail_set(list, sys_sflist_peek_head(list)); } return node; }
# 445 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
static inline sys_sfnode_t *sys_sflist_get(sys_sflist_t *list);

static inline sys_sfnode_t * sys_sflist_get(sys_sflist_t *list) { return sys_sflist_is_empty(list) ? 
# 447 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
((void *)0) 
# 447 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
: sys_sflist_get_not_empty(list); }
# 459 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
static inline void sys_sflist_remove(sys_sflist_t *list,
         sys_sfnode_t *prev_node,
         sys_sfnode_t *node);

static inline void sys_sflist_remove(sys_sflist_t *list, sys_sfnode_t *prev_node, sys_sfnode_t *node) { if (prev_node == 
# 463 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
((void *)0)
# 463 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
) { z_sflist_head_set(list, z_sfnode_next_peek(node)); if (sys_sflist_peek_tail(list) == node) { z_sflist_tail_set(list, sys_sflist_peek_head(list)); } } else { z_sfnode_next_set(prev_node, z_sfnode_next_peek(node)); if (sys_sflist_peek_tail(list) == node) { z_sflist_tail_set(list, prev_node); } } z_sfnode_next_set(node, 
# 463 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
((void *)0)
# 463 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
); }
# 475 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
static inline 
# 475 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
             _Bool 
# 475 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
                  sys_sflist_find_and_remove(sys_sflist_t *list,
           sys_sfnode_t *node);

static inline 
# 478 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
_Bool 
# 478 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
sys_sflist_find_and_remove(sys_sflist_t *list, sys_sfnode_t *node) { sys_sfnode_t *prev = 
# 478 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
((void *)0)
# 478 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
; sys_sfnode_t *test; for (test = sys_sflist_peek_head(list); test != 
# 478 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
((void *)0)
# 478 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
; test = sys_sflist_peek_next(test)) { if (test == node) { sys_sflist_remove(list, prev, node); return 
# 478 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
1
# 478 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
; } prev = test; } return 
# 478 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h" 3 4
0
# 478 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sflist.h"
; }
# 27 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_includes.h" 2

# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_structs.h" 1
# 29 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_structs.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_heap.h" 1
# 9 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_heap.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 10 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_heap.h" 2
# 55 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_heap.h"
struct sys_heap {
 struct z_heap *heap;
 void *init_mem;
 size_t init_bytes;
};

struct z_heap_stress_result {
 uint32_t total_allocs;
 uint32_t successful_allocs;
 uint32_t total_frees;
 uint64_t accumulated_in_use_bytes;
};
# 95 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_heap.h"
void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes);
# 114 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_heap.h"
void *sys_heap_alloc(struct sys_heap *heap, size_t bytes);
# 129 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_heap.h"
void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes);
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_heap.h"
void sys_heap_free(struct sys_heap *heap, void *mem);
# 169 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_heap.h"
void *sys_heap_aligned_realloc(struct sys_heap *heap, void *ptr,
          size_t align, size_t bytes);
# 189 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_heap.h"
size_t sys_heap_usable_size(struct sys_heap *heap, void *mem);
# 204 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_heap.h"

# 204 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_heap.h" 3 4
_Bool 
# 204 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_heap.h"
    sys_heap_validate(struct sys_heap *heap);
# 235 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_heap.h"
void sys_heap_stress(void *(*alloc_fn)(void *arg, size_t bytes),
       void (*free_fn)(void *arg, void *p),
       void *arg, size_t total_bytes,
       uint32_t op_count,
       void *scratch_mem, size_t scratch_bytes,
       int target_percent,
       struct z_heap_stress_result *result);
# 251 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_heap.h"
void sys_heap_print_info(struct sys_heap *heap, 
# 251 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_heap.h" 3 4
                                               _Bool 
# 251 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_heap.h"
                                                    dump_chunks);
# 30 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_structs.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/structs.h" 1
# 33 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/structs.h"
struct _cpu_arch {
};




typedef struct _cpu_arch _cpu_arch_t;
# 31 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_structs.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/stats.h" 1
# 17 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/stats.h"
struct k_cycle_stats {
 uint64_t total;





 
# 24 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/stats.h" 3 4
_Bool 
# 24 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/stats.h"
          track_usage;
};
# 32 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_structs.h" 2
# 83 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_structs.h"
struct _ready_q {


 struct k_thread *cache;



 sys_dlist_t runq;





};

typedef struct _ready_q _ready_q_t;

struct _cpu {

 uint32_t nested;


 char *irq_stack;


 struct k_thread *current;


 struct k_thread *idle_thread;
# 124 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_structs.h"
 int slice_ticks;


 uint8_t id;
# 149 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_structs.h"
 struct _cpu_arch arch;
};

typedef struct _cpu _cpu_t;

struct z_kernel {
 struct _cpu cpus[1];
# 166 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_structs.h"
 struct _ready_q ready_q;
# 180 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_structs.h"
 struct k_thread *current_fp;





};

typedef struct z_kernel _kernel_t;

extern struct z_kernel _kernel;
# 222 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_structs.h"
typedef struct {
 sys_dlist_t waitq;
} _wait_q_t;







struct _timeout;
typedef void (*_timeout_func_t)(struct _timeout *t);

struct _timeout {
 sys_dnode_t node;
 _timeout_func_t fn;


 int64_t dticks;



};
# 29 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_includes.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/mempool_heap.h" 1
# 16 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/mempool_heap.h"
struct k_mem_block_id {
 void *data;
 struct k_heap *heap;
};




struct k_mem_block {
 union {
  void *data;
  struct k_mem_block_id id;
 };
};
# 30 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_includes.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_version.h" 1
# 47 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_version.h"
extern uint32_t sys_kernel_version_get(void);
# 31 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_includes.h" 2


# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/cpu.h" 1
# 12 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/cpu.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h" 1
# 31 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 32 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h" 2

# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/cpu.h" 1
# 34 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/irq_offload.h" 1
# 18 "/home/sebin/thesis/zephyrproject/zephyr/include/irq_offload.h"
typedef void (*irq_offload_routine_t)(const void *parameter);
# 32 "/home/sebin/thesis/zephyrproject/zephyr/include/irq_offload.h"
void irq_offload(irq_offload_routine_t routine, const void *parameter);
# 35 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h" 2






struct k_thread;
struct k_mem_domain;

typedef struct z_thread_stack_element k_thread_stack_t;

typedef void (*k_thread_entry_t)(void *p1, void *p2, void *p3);
# 59 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
static inline uint32_t arch_k_cycle_get_32(void);






static inline uint64_t arch_k_cycle_get_64(void);
# 167 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
void arch_cpu_idle(void);
# 187 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
void arch_cpu_atomic_idle(unsigned int key);
# 202 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
typedef __attribute__((__noreturn__)) void (*arch_cpustart_t)(void *data);
# 224 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
void arch_start_cpu(int cpu_num, k_thread_stack_t *stack, int sz,
      arch_cpustart_t fn, void *arg);







# 232 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h" 3 4
_Bool 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
    arch_cpu_active(int cpu_num);
# 247 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
static inline unsigned int arch_irq_lock(void);






static inline void arch_irq_unlock(unsigned int key);
# 263 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
static inline 
# 263 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h" 3 4
             _Bool 
# 263 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
                  arch_irq_unlocked(unsigned int key);
# 279 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
void arch_irq_disable(unsigned int irq);






void arch_irq_enable(unsigned int irq);






int arch_irq_is_enabled(unsigned int irq);
# 306 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
int arch_irq_connect_dynamic(unsigned int irq, unsigned int priority,
        void (*routine)(const void *parameter),
        const void *parameter, uint32_t flags);
# 364 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
unsigned int arch_irq_allocate(void);
# 374 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
void arch_irq_set_used(unsigned int irq);
# 383 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"

# 383 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h" 3 4
_Bool 
# 383 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
    arch_irq_is_used(unsigned int irq);
# 797 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
static inline 
# 797 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h" 3 4
             _Bool 
# 797 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
                  arch_mem_coherent(void *ptr)
{
 (void)(ptr);
 return 
# 800 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h" 3 4
       1
# 800 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
           ;
}
# 845 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
static inline void arch_cohere_stacks(struct k_thread *old_thread,
          void *old_switch_handle,
          struct k_thread *new_thread)
{
 (void)(old_thread);
 (void)(old_switch_handle);
 (void)(new_thread);
}
# 1222 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arch_inlines.h" 1
# 1223 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/arch_interface.h" 2
# 13 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/cpu.h" 2






# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/arch.h" 1
# 20 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/arch.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree.h" 1
# 19 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree.h"
# 1 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/devicetree_unfixed.h" 1
# 20 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree.h" 2
# 1 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/devicetree_fixups.h" 1
# 21 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree.h" 2
# 2923 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree/io-channels.h" 1
# 2924 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree/clocks.h" 1
# 2925 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree/gpio.h" 1
# 2926 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree/spi.h" 1
# 2927 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree/dma.h" 1
# 2928 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree/pwms.h" 1
# 2929 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree/fixed-partitions.h" 1
# 2930 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree/zephyr.h" 1
# 2931 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree/ordinals.h" 1
# 2932 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree/pinctrl.h" 1
# 2933 "/home/sebin/thesis/zephyrproject/zephyr/include/devicetree.h" 2
# 21 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/arch.h" 2




# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/thread.h" 1
# 25 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/thread.h"
struct _callee_saved {
 uint32_t v1;
 uint32_t v2;
 uint32_t v3;
 uint32_t v4;
 uint32_t v5;
 uint32_t v6;
 uint32_t v7;
 uint32_t v8;
 uint32_t psp;
};

typedef struct _callee_saved _callee_saved_t;


struct _preempt_float {
 float s16;
 float s17;
 float s18;
 float s19;
 float s20;
 float s21;
 float s22;
 float s23;
 float s24;
 float s25;
 float s26;
 float s27;
 float s28;
 float s29;
 float s30;
 float s31;
};


struct _thread_arch {


 uint32_t basepri;


 uint32_t swap_return_value;







 struct _preempt_float preempt_float;
# 110 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/thread.h"
 union {
  uint32_t mode;


  struct {
   uint8_t mode_bits;
   uint8_t mode_exc_return;
   uint16_t mode_reserved2;
  };

 };
# 130 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/thread.h"
};




typedef struct _thread_arch _thread_arch_t;
# 26 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/arch.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/exc.h" 1
# 21 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/exc.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/cortex_m/nvic.h" 1
# 22 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/exc.h" 2
# 86 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/exc.h"
struct __esf {
 struct __basic_sf {
  union { uint32_t a1, r0; };
  union { uint32_t a2, r1; };
  union { uint32_t a3, r2; };
  union { uint32_t a4, r3; };
  union { uint32_t ip, r12; };
  union { uint32_t lr, r14; };
  union { uint32_t pc, r15; };
  uint32_t xpsr;
 } basic;

 float s[16];
 uint32_t fpscr;
 uint32_t undefined;




};

extern uint32_t z_arm_coredump_fault_sp;

typedef struct __esf z_arch_esf_t;


extern void z_arm_exc_exit(void);
# 27 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/arch.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/irq.h" 1
# 19 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/irq.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/irq.h" 1
# 64 "/home/sebin/thesis/zephyrproject/zephyr/include/irq.h"
static inline int
irq_connect_dynamic(unsigned int irq, unsigned int priority,
      void (*routine)(const void *parameter),
      const void *parameter, uint32_t flags)
{
 return arch_irq_connect_dynamic(irq, priority, routine, parameter,
     flags);
}
# 268 "/home/sebin/thesis/zephyrproject/zephyr/include/irq.h"
static inline unsigned int irq_get_level(unsigned int irq)
{






 (void)(irq);

 return 1;

}
# 20 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/irq.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sw_isr_table.h" 1
# 30 "/home/sebin/thesis/zephyrproject/zephyr/include/sw_isr_table.h"
struct _isr_table_entry {
 const void *arg;
 void (*isr)(const void *);
};




extern struct _isr_table_entry _sw_isr_table[];
# 47 "/home/sebin/thesis/zephyrproject/zephyr/include/sw_isr_table.h"
struct _isr_list {

 int32_t irq;

 int32_t flags;

 void *func;

 const void *param;
};
# 21 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/irq.h" 2
# 40 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/irq.h"
extern void arch_irq_enable(unsigned int irq);
extern void arch_irq_disable(unsigned int irq);
extern int arch_irq_is_enabled(unsigned int irq);


extern void z_arm_irq_priority_set(unsigned int irq, unsigned int prio,
       uint32_t flags);
# 75 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/irq.h"
extern void z_arm_int_exit(void);

extern void z_arm_interrupt_init(void);
# 143 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/irq.h"
extern void z_arm_int_exit(void);






static inline void arch_isr_direct_header(void)
{



}

static inline void arch_isr_direct_footer(int maybe_swap)
{



 if (maybe_swap != 0) {
  z_arm_int_exit();
 }
}
# 236 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/irq.h"
extern void z_irq_spurious(const void *unused);






extern void _isr_wrapper(void);
# 28 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/arch.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/error.h" 1
# 29 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/arch.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/misc.h" 1
# 22 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/misc.h"
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
 return sys_clock_cycle_get_32();
}

extern uint64_t sys_clock_cycle_get_64(void);

static inline uint64_t arch_k_cycle_get_64(void)
{
 return sys_clock_cycle_get_64();
}

static inline __attribute__((always_inline)) void arch_nop(void)
{
 __asm__ volatile("nop");
}
# 30 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/arch.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/common/addr_types.h" 1
# 13 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/common/addr_types.h"
typedef uintptr_t paddr_t;
typedef void *vaddr_t;
# 31 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/arch.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/common/ffs.h" 1
# 31 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/common/ffs.h"
static inline __attribute__((always_inline)) unsigned int find_msb_set(uint32_t op)
{
 if (op == 0) {
  return 0;
 }

 return 32 - __builtin_clz(op);
}
# 53 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/common/ffs.h"
static inline __attribute__((always_inline)) unsigned int find_lsb_set(uint32_t op)
{

 return __builtin_ffs(op);
# 81 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/common/ffs.h"
}
# 32 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/arch.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/nmi.h" 1
# 33 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/arch.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/asm_inline.h" 1
# 18 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/asm_inline.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/asm_inline_gcc.h" 1
# 43 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/asm_inline_gcc.h"
static inline __attribute__((always_inline)) unsigned int arch_irq_lock(void)
{
 unsigned int key;
# 54 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/asm_inline_gcc.h"
 unsigned int tmp;

 __asm__ volatile(
  "mov %1, %2;"
  "mrs %0, BASEPRI;"
  "msr BASEPRI_MAX, %1;"
  "isb;"
  : "=r"(key), "=r"(tmp)
  : "i"(((((1 + 0)) << (8 - 6)) & 0xff))
  : "memory");
# 76 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/asm_inline_gcc.h"
 return key;
}






static inline __attribute__((always_inline)) void arch_irq_unlock(unsigned int key)
{
# 95 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/asm_inline_gcc.h"
 __asm__ volatile(
  "msr BASEPRI, %0;"
  "isb;"
  : : "r"(key) : "memory");
# 109 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/asm_inline_gcc.h"
}

static inline __attribute__((always_inline)) 
# 111 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/asm_inline_gcc.h" 3 4
                    _Bool 
# 111 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/asm_inline_gcc.h"
                         arch_irq_unlocked(unsigned int key)
{

 return key == 0U;
}
# 19 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/asm_inline.h" 2
# 34 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/arch.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/common/sys_bitops.h" 1
# 18 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/common/sys_bitops.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_io.h" 1
# 13 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_io.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 14 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/sys_io.h" 2





typedef uint32_t io_port_t;
typedef uintptr_t mm_reg_t;
typedef uintptr_t mem_addr_t;
# 19 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/common/sys_bitops.h" 2





static inline __attribute__((always_inline)) void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
 uint32_t temp = *(volatile uint32_t *)addr;

 *(volatile uint32_t *)addr = temp | (1 << bit);
}

static inline __attribute__((always_inline)) void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
 uint32_t temp = *(volatile uint32_t *)addr;

 *(volatile uint32_t *)addr = temp & ~(1 << bit);
}

static inline __attribute__((always_inline)) int sys_test_bit(mem_addr_t addr, unsigned int bit)
{
 uint32_t temp = *(volatile uint32_t *)addr;

 return temp & (1 << bit);
}

static inline __attribute__((always_inline)) void sys_set_bits(mem_addr_t addr, unsigned int mask)
{
 uint32_t temp = *(volatile uint32_t *)addr;

 *(volatile uint32_t *)addr = temp | mask;
}

static inline __attribute__((always_inline)) void sys_clear_bits(mem_addr_t addr, unsigned int mask)
{
 uint32_t temp = *(volatile uint32_t *)addr;

 *(volatile uint32_t *)addr = temp & ~mask;
}

static inline __attribute__((always_inline))
 void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{



 sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
}

static inline __attribute__((always_inline))
 void sys_bitfield_clear_bit(mem_addr_t addr, unsigned int bit)
{
 sys_clear_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
}

static inline __attribute__((always_inline))
 int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
 return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
}

static inline __attribute__((always_inline))
 int sys_test_and_set_bit(mem_addr_t addr, unsigned int bit)
{
 int ret;

 ret = sys_test_bit(addr, bit);
 sys_set_bit(addr, bit);

 return ret;
}

static inline __attribute__((always_inline))
 int sys_test_and_clear_bit(mem_addr_t addr, unsigned int bit)
{
 int ret;

 ret = sys_test_bit(addr, bit);
 sys_clear_bit(addr, bit);

 return ret;
}

static inline __attribute__((always_inline))
 int sys_bitfield_test_and_set_bit(mem_addr_t addr, unsigned int bit)
{
 int ret;

 ret = sys_bitfield_test_bit(addr, bit);
 sys_bitfield_set_bit(addr, bit);

 return ret;
}

static inline __attribute__((always_inline))
 int sys_bitfield_test_and_clear_bit(mem_addr_t addr, unsigned int bit)
{
 int ret;

 ret = sys_bitfield_test_bit(addr, bit);
 sys_bitfield_clear_bit(addr, bit);

 return ret;
}
# 35 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/arch.h" 2


# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/cortex_m/cpu.h" 1
# 38 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/arch.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/cortex_m/memory_map.h" 1
# 39 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/arch.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/common/sys_io.h" 1
# 23 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/common/sys_io.h"
static inline __attribute__((always_inline)) uint8_t sys_read8(mem_addr_t addr)
{
 return *(volatile uint8_t *)addr;
}

static inline __attribute__((always_inline)) void sys_write8(uint8_t data, mem_addr_t addr)
{
 *(volatile uint8_t *)addr = data;
}

static inline __attribute__((always_inline)) uint16_t sys_read16(mem_addr_t addr)
{
 return *(volatile uint16_t *)addr;
}

static inline __attribute__((always_inline)) void sys_write16(uint16_t data, mem_addr_t addr)
{
 *(volatile uint16_t *)addr = data;
}

static inline __attribute__((always_inline)) uint32_t sys_read32(mem_addr_t addr)
{
 return *(volatile uint32_t *)addr;
}

static inline __attribute__((always_inline)) void sys_write32(uint32_t data, mem_addr_t addr)
{
 *(volatile uint32_t *)addr = data;
}
# 40 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/arch.h" 2
# 189 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/arch.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/mpu/arm_mpu.h" 1
# 14 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/mpu/arm_mpu.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/mpu/arm_mpu_v7m.h" 1
# 11 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/mpu/arm_mpu_v7m.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/cortex_m/cmsis.h" 1
# 17 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/cortex_m/cmsis.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/soc/arm/infineon_xmc/4xxx/soc.h" 1
# 9 "/home/sebin/thesis/zephyrproject/zephyr/soc/arm/infineon_xmc/4xxx/soc.h"
# 1 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/system_XMC4500.h" 1
# 66 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/system_XMC4500.h"
extern uint32_t SystemCoreClock;
extern uint8_t g_chipid[16];
# 81 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/system_XMC4500.h"
void SystemInit(void);





void SystemCoreSetup(void);





void SystemCoreClockSetup(void);





void SystemCoreClockUpdate(void);





uint32_t OSCHP_GetFrequency(void);
# 10 "/home/sebin/thesis/zephyrproject/zephyr/soc/arm/infineon_xmc/4xxx/soc.h" 2
# 1 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h" 1
# 69 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef enum {

  Reset_IRQn = -15,
  NonMaskableInt_IRQn = -14,
  HardFault_IRQn = -13,
  MemoryManagement_IRQn = -12,

  BusFault_IRQn = -11,

  UsageFault_IRQn = -10,
  SVCall_IRQn = -5,
  DebugMonitor_IRQn = -4,
  PendSV_IRQn = -2,
  SysTick_IRQn = -1,

  SCU_0_IRQn = 0,
  ERU0_0_IRQn = 1,
  ERU0_1_IRQn = 2,
  ERU0_2_IRQn = 3,
  ERU0_3_IRQn = 4,
  ERU1_0_IRQn = 5,
  ERU1_1_IRQn = 6,
  ERU1_2_IRQn = 7,
  ERU1_3_IRQn = 8,
  PMU0_0_IRQn = 12,
  VADC0_C0_0_IRQn = 14,
  VADC0_C0_1_IRQn = 15,
  VADC0_C0_2_IRQn = 16,
  VADC0_C0_3_IRQn = 17,
  VADC0_G0_0_IRQn = 18,
  VADC0_G0_1_IRQn = 19,
  VADC0_G0_2_IRQn = 20,
  VADC0_G0_3_IRQn = 21,
  VADC0_G1_0_IRQn = 22,
  VADC0_G1_1_IRQn = 23,
  VADC0_G1_2_IRQn = 24,
  VADC0_G1_3_IRQn = 25,
  VADC0_G2_0_IRQn = 26,
  VADC0_G2_1_IRQn = 27,
  VADC0_G2_2_IRQn = 28,
  VADC0_G2_3_IRQn = 29,
  VADC0_G3_0_IRQn = 30,
  VADC0_G3_1_IRQn = 31,
  VADC0_G3_2_IRQn = 32,
  VADC0_G3_3_IRQn = 33,
  DSD0_M_0_IRQn = 34,
  DSD0_M_1_IRQn = 35,
  DSD0_M_2_IRQn = 36,
  DSD0_M_3_IRQn = 37,
  DSD0_A_4_IRQn = 38,
  DSD0_A_5_IRQn = 39,
  DSD0_A_6_IRQn = 40,
  DSD0_A_7_IRQn = 41,
  DAC0_0_IRQn = 42,
  DAC0_1_IRQn = 43,
  CCU40_0_IRQn = 44,
  CCU40_1_IRQn = 45,
  CCU40_2_IRQn = 46,
  CCU40_3_IRQn = 47,
  CCU41_0_IRQn = 48,
  CCU41_1_IRQn = 49,
  CCU41_2_IRQn = 50,
  CCU41_3_IRQn = 51,
  CCU42_0_IRQn = 52,
  CCU42_1_IRQn = 53,
  CCU42_2_IRQn = 54,
  CCU42_3_IRQn = 55,
  CCU43_0_IRQn = 56,
  CCU43_1_IRQn = 57,
  CCU43_2_IRQn = 58,
  CCU43_3_IRQn = 59,
  CCU80_0_IRQn = 60,
  CCU80_1_IRQn = 61,
  CCU80_2_IRQn = 62,
  CCU80_3_IRQn = 63,
  CCU81_0_IRQn = 64,
  CCU81_1_IRQn = 65,
  CCU81_2_IRQn = 66,
  CCU81_3_IRQn = 67,
  POSIF0_0_IRQn = 68,
  POSIF0_1_IRQn = 69,
  POSIF1_0_IRQn = 70,
  POSIF1_1_IRQn = 71,
  CAN0_0_IRQn = 76,
  CAN0_1_IRQn = 77,
  CAN0_2_IRQn = 78,
  CAN0_3_IRQn = 79,
  CAN0_4_IRQn = 80,
  CAN0_5_IRQn = 81,
  CAN0_6_IRQn = 82,
  CAN0_7_IRQn = 83,
  USIC0_0_IRQn = 84,
  USIC0_1_IRQn = 85,
  USIC0_2_IRQn = 86,
  USIC0_3_IRQn = 87,
  USIC0_4_IRQn = 88,
  USIC0_5_IRQn = 89,
  USIC1_0_IRQn = 90,
  USIC1_1_IRQn = 91,
  USIC1_2_IRQn = 92,
  USIC1_3_IRQn = 93,
  USIC1_4_IRQn = 94,
  USIC1_5_IRQn = 95,
  USIC2_0_IRQn = 96,
  USIC2_1_IRQn = 97,
  USIC2_2_IRQn = 98,
  USIC2_3_IRQn = 99,
  USIC2_4_IRQn = 100,
  USIC2_5_IRQn = 101,
  LEDTS0_0_IRQn = 102,
  FCE0_0_IRQn = 104,
  GPDMA0_0_IRQn = 105,
  SDMMC0_0_IRQn = 106,
  USB0_0_IRQn = 107,
  ETH0_0_IRQn = 108,
  GPDMA1_0_IRQn = 110
} IRQn_Type;
# 205 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
# 1 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h" 1
# 63 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
# 1 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_version.h" 1
# 64 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h" 2
# 162 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
# 1 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_compiler.h" 1
# 54 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_compiler.h"
# 1 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h" 1
# 29 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
#pragma GCC diagnostic ignored "-Wconversion"
#pragma GCC diagnostic ignored "-Wunused-parameter"
# 71 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed)) T_UINT32 { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_WRITE { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT16_READ { uint16_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_WRITE { uint32_t v; };
#pragma GCC diagnostic pop



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpacked"
#pragma GCC diagnostic ignored "-Wattributes"
  struct __attribute__((packed, aligned(1))) T_UINT32_READ { uint32_t v; };
#pragma GCC diagnostic pop
# 258 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __ISB(void)
{
  __asm volatile ("isb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DSB(void)
{
  __asm volatile ("dsb 0xF":::"memory");
}







__attribute__((always_inline)) static inline void __DMB(void)
{
  __asm volatile ("dmb 0xF":::"memory");
}
# 292 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV(uint32_t value)
{

  return __builtin_bswap32(value);






}
# 311 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __asm ("rev16 %0, %1" : "=r" (result) : "r" (value) );
  return result;
}
# 326 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline int16_t __REVSH(int16_t value)
{

  return (int16_t)__builtin_bswap16(value);






}
# 346 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
}
# 373 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RBIT(uint32_t value)
{
  uint32_t result;




   __asm ("rbit %0, %1" : "=r" (result) : "r" (value) );
# 393 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
  return result;
}
# 403 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __CLZ(uint32_t value)
{
# 414 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
}
# 432 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDREXB(volatile uint8_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint8_t) result);
}
# 454 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDREXH(volatile uint16_t *addr)
{
    uint32_t result;


   __asm volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );






   return ((uint16_t) result);
}
# 476 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __asm volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
   return(result);
}
# 493 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
{
   uint32_t result;

   __asm volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 510 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
{
   uint32_t result;

   __asm volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
   return(result);
}
# 527 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __asm volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
   return(result);
}






__attribute__((always_inline)) static inline void __CLREX(void)
{
  __asm volatile ("clrex" ::: "memory");
}
# 593 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __RRX(uint32_t value)
{
  uint32_t result;

  __asm volatile ("rrx %0, %1" : "=r" (result) : "r" (value) );
  return(result);
}
# 608 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint8_t __LDRBT(volatile uint8_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint8_t) result);
}
# 630 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint16_t __LDRHT(volatile uint16_t *ptr)
{
    uint32_t result;


   __asm volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );






   return ((uint16_t) result);
}
# 652 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __LDRT(volatile uint32_t *ptr)
{
    uint32_t result;

   __asm volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
   return(result);
}
# 667 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRBT(uint8_t value, volatile uint8_t *ptr)
{
   __asm volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 679 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRHT(uint16_t value, volatile uint16_t *ptr)
{
   __asm volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
}
# 691 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __STRT(uint32_t value, volatile uint32_t *ptr)
{
   __asm volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
}
# 949 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_irq(void)
{
  __asm volatile ("cpsie i" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_irq(void)
{
  __asm volatile ("cpsid i" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, control" : "=r" (result) );
  return(result);
}
# 1001 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_CONTROL(uint32_t control)
{
  __asm volatile ("MSR control, %0" : : "r" (control) : "memory");
  __ISB();
}
# 1027 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_IPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, ipsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_APSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, apsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_xPSR(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, xpsr" : "=r" (result) );
  return(result);
}







__attribute__((always_inline)) static inline uint32_t __get_PSP(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, psp" : "=r" (result) );
  return(result);
}
# 1099 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PSP(uint32_t topOfProcStack)
{
  __asm volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
}
# 1123 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_MSP(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, msp" : "=r" (result) );
  return(result);
}
# 1153 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_MSP(uint32_t topOfMainStack)
{
  __asm volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
}
# 1204 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, primask" : "=r" (result) );
  return(result);
}
# 1234 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_PRIMASK(uint32_t priMask)
{
  __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
}
# 1261 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __enable_fault_irq(void)
{
  __asm volatile ("cpsie f" : : : "memory");
}







__attribute__((always_inline)) static inline void __disable_fault_irq(void)
{
  __asm volatile ("cpsid f" : : : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, basepri" : "=r" (result) );
  return(result);
}
# 1313 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI(uint32_t basePri)
{
  __asm volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
}
# 1338 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_BASEPRI_MAX(uint32_t basePri)
{
  __asm volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
}







__attribute__((always_inline)) static inline uint32_t __get_FAULTMASK(void)
{
  uint32_t result;

  __asm volatile ("MRS %0, faultmask" : "=r" (result) );
  return(result);
}
# 1379 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline void __set_FAULTMASK(uint32_t faultMask)
{
  __asm volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
}
# 1588 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __get_FPSCR(void)
{
# 1598 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
  uint32_t result;

  __asm volatile ("VMRS %0, fpscr" : "=r" (result) );
  return(result);




}







__attribute__((always_inline)) static inline void __set_FPSCR(uint32_t fpscr)
{
# 1624 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
  __asm volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");




}
# 1643 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __SADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("qadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("shadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uqadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uhadd8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("qsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("shsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uqsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uhsub8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}


__attribute__((always_inline)) static inline uint32_t __SADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uqadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uhadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uqsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uhsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("uasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uqasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHASX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uhasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("ssax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __QSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("usax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UQSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uqsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UHSAX(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uhsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USAD8(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("usad8 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __USADA8(uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm ("usada8 %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}
# 1965 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline uint32_t __UXTB16(uint32_t op1)
{
  uint32_t result;

  __asm ("uxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __UXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("uxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __asm ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTB16_RORn(uint32_t op1, uint32_t rotate)
{
  uint32_t result;
  if (__builtin_constant_p(rotate) && ((rotate == 8U) || (rotate == 16U) || (rotate == 24U))) {
    __asm volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
  } else {
    result = __SXTB16(__ROR(op1, rotate)) ;
  }
  return result;
}

__attribute__((always_inline)) static inline uint32_t __SXTAB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SXTAB16_RORn(uint32_t op1, uint32_t op2, uint32_t rotate)
{
  uint32_t result;
  if (__builtin_constant_p(rotate) && ((rotate == 8U) || (rotate == 16U) || (rotate == 24U))) {
    __asm volatile ("sxtab16 %0, %1, %2, ROR %3" : "=r" (result) : "r" (op1) , "r" (op2) , "i" (rotate));
  } else {
    result = __SXTAB16(op1, __ROR(op2, rotate));
  }
  return result;
}


__attribute__((always_inline)) static inline uint32_t __SMUAD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUADX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLADX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLALD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLALDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlaldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SMUSD (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsd %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __asm volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
  return(result);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLD (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsld %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint64_t __SMLSLDX (uint32_t op1, uint32_t op2, uint64_t acc)
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;


  __asm volatile ("smlsldx %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );




  return(llr.w64);
}

__attribute__((always_inline)) static inline uint32_t __SEL (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __asm volatile ("sel %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QADD( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}

__attribute__((always_inline)) static inline int32_t __QSUB( int32_t op1, int32_t op2)
{
  int32_t result;

  __asm volatile ("qsub %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
  return(result);
}
# 2197 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_gcc.h"
__attribute__((always_inline)) static inline int32_t __SMMLA (int32_t op1, int32_t op2, int32_t op3)
{
 int32_t result;

 __asm ("smmla %0, %1, %2, %3" : "=r" (result): "r" (op1), "r" (op2), "r" (op3) );
 return(result);
}





#pragma GCC diagnostic pop
# 55 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/cmsis_compiler.h" 2
# 163 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h" 2
# 264 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t _reserved0:16;
    uint32_t GE:4;
    uint32_t _reserved1:7;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} APSR_Type;
# 303 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:23;
  } b;
  uint32_t w;
} IPSR_Type;
# 321 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t ISR:9;
    uint32_t _reserved0:1;
    uint32_t ICI_IT_1:6;
    uint32_t GE:4;
    uint32_t _reserved1:4;
    uint32_t T:1;
    uint32_t ICI_IT_2:2;
    uint32_t Q:1;
    uint32_t V:1;
    uint32_t C:1;
    uint32_t Z:1;
    uint32_t N:1;
  } b;
  uint32_t w;
} xPSR_Type;
# 376 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef union
{
  struct
  {
    uint32_t nPRIV:1;
    uint32_t SPSEL:1;
    uint32_t FPCA:1;
    uint32_t _reserved0:29;
  } b;
  uint32_t w;
} CONTROL_Type;
# 411 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t ISER[8U];
        uint32_t RESERVED0[24U];
  volatile uint32_t ICER[8U];
        uint32_t RESERVED1[24U];
  volatile uint32_t ISPR[8U];
        uint32_t RESERVED2[24U];
  volatile uint32_t ICPR[8U];
        uint32_t RESERVED3[24U];
  volatile uint32_t IABR[8U];
        uint32_t RESERVED4[56U];
  volatile uint8_t IP[240U];
        uint32_t RESERVED5[644U];
  volatile uint32_t STIR;
} NVIC_Type;
# 445 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile const uint32_t CPUID;
  volatile uint32_t ICSR;
  volatile uint32_t VTOR;
  volatile uint32_t AIRCR;
  volatile uint32_t SCR;
  volatile uint32_t CCR;
  volatile uint8_t SHP[12U];
  volatile uint32_t SHCSR;
  volatile uint32_t CFSR;
  volatile uint32_t HFSR;
  volatile uint32_t DFSR;
  volatile uint32_t MMFAR;
  volatile uint32_t BFAR;
  volatile uint32_t AFSR;
  volatile const uint32_t PFR[2U];
  volatile const uint32_t DFR;
  volatile const uint32_t ADR;
  volatile const uint32_t MMFR[4U];
  volatile const uint32_t ISAR[5U];
        uint32_t RESERVED0[5U];
  volatile uint32_t CPACR;
} SCB_Type;
# 724 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile const uint32_t ICTR;
  volatile uint32_t ACTLR;
} SCnSCB_Type;
# 764 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t LOAD;
  volatile uint32_t VAL;
  volatile const uint32_t CALIB;
} SysTick_Type;
# 816 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile union
  {
    volatile uint8_t u8;
    volatile uint16_t u16;
    volatile uint32_t u32;
  } PORT [32U];
        uint32_t RESERVED0[864U];
  volatile uint32_t TER;
        uint32_t RESERVED1[15U];
  volatile uint32_t TPR;
        uint32_t RESERVED2[15U];
  volatile uint32_t TCR;
        uint32_t RESERVED3[32U];
        uint32_t RESERVED4[43U];
  volatile uint32_t LAR;
  volatile const uint32_t LSR;
        uint32_t RESERVED5[6U];
  volatile const uint32_t PID4;
  volatile const uint32_t PID5;
  volatile const uint32_t PID6;
  volatile const uint32_t PID7;
  volatile const uint32_t PID0;
  volatile const uint32_t PID1;
  volatile const uint32_t PID2;
  volatile const uint32_t PID3;
  volatile const uint32_t CID0;
  volatile const uint32_t CID1;
  volatile const uint32_t CID2;
  volatile const uint32_t CID3;
} ITM_Type;
# 904 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t CTRL;
  volatile uint32_t CYCCNT;
  volatile uint32_t CPICNT;
  volatile uint32_t EXCCNT;
  volatile uint32_t SLEEPCNT;
  volatile uint32_t LSUCNT;
  volatile uint32_t FOLDCNT;
  volatile const uint32_t PCSR;
  volatile uint32_t COMP0;
  volatile uint32_t MASK0;
  volatile uint32_t FUNCTION0;
        uint32_t RESERVED0[1U];
  volatile uint32_t COMP1;
  volatile uint32_t MASK1;
  volatile uint32_t FUNCTION1;
        uint32_t RESERVED1[1U];
  volatile uint32_t COMP2;
  volatile uint32_t MASK2;
  volatile uint32_t FUNCTION2;
        uint32_t RESERVED2[1U];
  volatile uint32_t COMP3;
  volatile uint32_t MASK3;
  volatile uint32_t FUNCTION3;
} DWT_Type;
# 1051 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile const uint32_t SSPSR;
  volatile uint32_t CSPSR;
        uint32_t RESERVED0[2U];
  volatile uint32_t ACPR;
        uint32_t RESERVED1[55U];
  volatile uint32_t SPPR;
        uint32_t RESERVED2[131U];
  volatile const uint32_t FFSR;
  volatile uint32_t FFCR;
  volatile const uint32_t FSCR;
        uint32_t RESERVED3[759U];
  volatile const uint32_t TRIGGER;
  volatile const uint32_t FIFO0;
  volatile const uint32_t ITATBCTR2;
        uint32_t RESERVED4[1U];
  volatile const uint32_t ITATBCTR0;
  volatile const uint32_t FIFO1;
  volatile uint32_t ITCTRL;
        uint32_t RESERVED5[39U];
  volatile uint32_t CLAIMSET;
  volatile uint32_t CLAIMCLR;
        uint32_t RESERVED7[8U];
  volatile const uint32_t DEVID;
  volatile const uint32_t DEVTYPE;
} TPI_Type;
# 1213 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile const uint32_t TYPE;
  volatile uint32_t CTRL;
  volatile uint32_t RNR;
  volatile uint32_t RBAR;
  volatile uint32_t RASR;
  volatile uint32_t RBAR_A1;
  volatile uint32_t RASR_A1;
  volatile uint32_t RBAR_A2;
  volatile uint32_t RASR_A2;
  volatile uint32_t RBAR_A3;
  volatile uint32_t RASR_A3;
} MPU_Type;
# 1309 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
        uint32_t RESERVED0[1U];
  volatile uint32_t FPCCR;
  volatile uint32_t FPCAR;
  volatile uint32_t FPDSCR;
  volatile const uint32_t MVFR0;
  volatile const uint32_t MVFR1;
  volatile const uint32_t MVFR2;
} FPU_Type;
# 1421 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
typedef struct
{
  volatile uint32_t DHCSR;
  volatile uint32_t DCRSR;
  volatile uint32_t DCRDR;
  volatile uint32_t DEMCR;
} CoreDebug_Type;
# 1653 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);

  reg_value = ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR;
  reg_value &= ~((uint32_t)((0xFFFFUL << 16U) | (7UL << 8U)));
  reg_value = (reg_value |
                ((uint32_t)0x5FAUL << 16U) |
                (PriorityGroupTmp << 8U) );
  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = reg_value;
}







static inline uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) >> 8U));
}
# 1684 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __asm volatile("":::"memory");
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    __asm volatile("":::"memory");
  }
}
# 1703 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1722 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    __DSB();
    __ISB();
  }
}
# 1741 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1760 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1775 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  }
}
# 1792 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
  }
  else
  {
    return(0U);
  }
}
# 1814 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] = (uint8_t)((priority << (8U - 6)) & (uint32_t)0xFFUL);
  }
  else
  {
    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - 6)) & (uint32_t)0xFFUL);
  }
}
# 1836 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[((uint32_t)IRQn)] >> (8U - 6)));
  }
  else
  {
    return(((uint32_t)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - 6)));
  }
}
# 1861 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(6)) ? (uint32_t)(6) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(6)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(6));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority & (uint32_t)((1UL << (SubPriorityBits )) - 1UL)))
         );
}
# 1888 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(6)) ? (uint32_t)(6) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits = ((PriorityGroupTmp + (uint32_t)(6)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(6));

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
  *pSubPriority = (Priority ) & (uint32_t)((1UL << (SubPriorityBits )) - 1UL);
}
# 1911 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
{
  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  vectors[(int32_t)IRQn + 16] = vector;

}
# 1927 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
{
  uint32_t *vectors = (uint32_t *)((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->VTOR;
  return vectors[(int32_t)IRQn + 16];
}






__attribute__((__noreturn__)) static inline void __NVIC_SystemReset(void)
{
  __DSB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR = (uint32_t)((0x5FAUL << 16U) |
                           (((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR & (7UL << 8U)) |
                            (1UL << 2U) );
  __DSB();

  for(;;)
  {
    __asm volatile ("nop");
  }
}
# 1960 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
# 1 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/mpu_armv7.h" 1
# 183 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/mpu_armv7.h"
typedef struct {
  uint32_t RBAR;
  uint32_t RASR;
} ARM_MPU_Region_t;




static inline void ARM_MPU_Enable(uint32_t MPU_Control)
{
  __DMB();
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL = MPU_Control | (1UL );

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR |= (1UL << 16U);

  __DSB();
  __ISB();
}



static inline void ARM_MPU_Disable(void)
{
  __DMB();

  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHCSR &= ~(1UL << 16U);

  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->CTRL &= ~(1UL );
  __DSB();
  __ISB();
}




static inline void ARM_MPU_ClrRegion(uint32_t rnr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = 0U;
}





static inline void ARM_MPU_SetRegion(uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}






static inline void ARM_MPU_SetRegionEx(uint32_t rnr, uint32_t rbar, uint32_t rasr)
{
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RNR = rnr;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR = rbar;
  ((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RASR = rasr;
}






static inline void ARM_MPU_OrderedMemcpy(volatile uint32_t* dst, const uint32_t* 
# 251 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/mpu_armv7.h" 3
                                                                                  restrict 
# 251 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/mpu_armv7.h"
                                                                                             src, uint32_t len)
{
  uint32_t i;
  for (i = 0U; i < len; ++i)
  {
    dst[i] = src[i];
  }
}





static inline void ARM_MPU_Load(ARM_MPU_Region_t const* table, uint32_t cnt)
{
  const uint32_t rowWordSize = sizeof(ARM_MPU_Region_t)/4U;
  while (cnt > 4U) {
    ARM_MPU_OrderedMemcpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), 4U*rowWordSize);
    table += 4U;
    cnt -= 4U;
  }
  ARM_MPU_OrderedMemcpy(&(((MPU_Type *) ((0xE000E000UL) + 0x0D90UL) )->RBAR), &(table->RBAR), cnt*rowWordSize);
}
# 1961 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h" 2
# 1981 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = ((FPU_Type *) ((0xE000E000UL) + 0x0F30UL) )->MVFR0;
  if ((mvfr0 & ((0xFUL << 4U) | (0xFUL << 8U))) == 0x020U)
  {
    return 1U;
  }
  else
  {
    return 0U;
  }
}
# 2022 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > (0xFFFFFFUL ))
  {
    return (1UL);
  }

  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = (uint32_t)(ticks - 1UL);
  __NVIC_SetPriority (SysTick_IRQn, (1UL << 6) - 1UL);
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL = 0UL;
  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2U) |
                   (1UL << 1U) |
                   (1UL );
  return (0UL);
}
# 2052 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
extern volatile int32_t ITM_RxBuffer;
# 2064 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline uint32_t ITM_SendChar (uint32_t ch)
{
  if (((((ITM_Type *) (0xE0000000UL) )->TCR & (1UL )) != 0UL) &&
      ((((ITM_Type *) (0xE0000000UL) )->TER & 1UL ) != 0UL) )
  {
    while (((ITM_Type *) (0xE0000000UL) )->PORT[0U].u32 == 0UL)
    {
      __asm volatile ("nop");
    }
    ((ITM_Type *) (0xE0000000UL) )->PORT[0U].u8 = (uint8_t)ch;
  }
  return (ch);
}
# 2085 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline int32_t ITM_ReceiveChar (void)
{
  int32_t ch = -1;

  if (ITM_RxBuffer != ((int32_t)0x5AA55AA5U))
  {
    ch = ITM_RxBuffer;
    ITM_RxBuffer = ((int32_t)0x5AA55AA5U);
  }

  return (ch);
}
# 2105 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h"
static inline int32_t ITM_CheckChar (void)
{

  if (ITM_RxBuffer == ((int32_t)0x5AA55AA5U))
  {
    return (0);
  }
  else
  {
    return (1);
  }
}
# 206 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h" 2
# 1 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/system_XMC4500.h" 1
# 207 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h" 2
# 388 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t RESERVED[2];
  volatile uint32_t ACTLR;
  volatile const uint32_t RESERVED1;
  volatile uint32_t SYST_CSR;
  volatile uint32_t SYST_RVR;
  volatile uint32_t SYST_CVR;
  volatile uint32_t SYST_CALIB;
  volatile const uint32_t RESERVED2[56];
  volatile uint32_t NVIC_ISER0;
  volatile uint32_t NVIC_ISER1;
  volatile uint32_t NVIC_ISER2;
  volatile uint32_t NVIC_ISER3;
  volatile const uint32_t RESERVED3[28];
  volatile uint32_t NVIC_ICER0;
  volatile uint32_t NVIC_ICER1;
  volatile uint32_t NVIC_ICER2;
  volatile uint32_t NVIC_ICER3;
  volatile const uint32_t RESERVED4[28];
  volatile uint32_t NVIC_ISPR0;
  volatile uint32_t NVIC_ISPR1;
  volatile uint32_t NVIC_ISPR2;
  volatile uint32_t NVIC_ISPR3;
  volatile const uint32_t RESERVED5[28];
  volatile uint32_t NVIC_ICPR0;
  volatile uint32_t NVIC_ICPR1;
  volatile uint32_t NVIC_ICPR2;
  volatile uint32_t NVIC_ICPR3;
  volatile const uint32_t RESERVED6[28];
  volatile uint32_t NVIC_IABR0;
  volatile uint32_t NVIC_IABR1;
  volatile uint32_t NVIC_IABR2;
  volatile uint32_t NVIC_IABR3;
  volatile const uint32_t RESERVED7[60];
  volatile uint32_t NVIC_IPR0;
  volatile uint32_t NVIC_IPR1;
  volatile uint32_t NVIC_IPR2;
  volatile uint32_t NVIC_IPR3;
  volatile uint32_t NVIC_IPR4;
  volatile uint32_t NVIC_IPR5;
  volatile uint32_t NVIC_IPR6;
  volatile uint32_t NVIC_IPR7;
  volatile uint32_t NVIC_IPR8;
  volatile uint32_t NVIC_IPR9;
  volatile uint32_t NVIC_IPR10;
  volatile uint32_t NVIC_IPR11;
  volatile uint32_t NVIC_IPR12;
  volatile uint32_t NVIC_IPR13;
  volatile uint32_t NVIC_IPR14;
  volatile uint32_t NVIC_IPR15;
  volatile uint32_t NVIC_IPR16;
  volatile uint32_t NVIC_IPR17;
  volatile uint32_t NVIC_IPR18;
  volatile uint32_t NVIC_IPR19;
  volatile uint32_t NVIC_IPR20;
  volatile uint32_t NVIC_IPR21;
  volatile uint32_t NVIC_IPR22;
  volatile uint32_t NVIC_IPR23;
  volatile uint32_t NVIC_IPR24;
  volatile uint32_t NVIC_IPR25;
  volatile uint32_t NVIC_IPR26;
  volatile uint32_t NVIC_IPR27;
  volatile const uint32_t RESERVED8[548];
  volatile const uint32_t CPUID;
  volatile uint32_t ICSR;
  volatile uint32_t VTOR;
  volatile uint32_t AIRCR;
  volatile uint32_t SCR;
  volatile uint32_t CCR;
  volatile uint32_t SHPR1;
  volatile uint32_t SHPR2;
  volatile uint32_t SHPR3;
  volatile uint32_t SHCSR;
  volatile uint32_t CFSR;
  volatile uint32_t HFSR;
  volatile const uint32_t RESERVED9;
  volatile uint32_t MMFAR;
  volatile uint32_t BFAR;
  volatile uint32_t AFSR;
  volatile const uint32_t RESERVED10[18];
  volatile uint32_t CPACR;
  volatile const uint32_t RESERVED11;
  volatile const uint32_t MPU_TYPE;
  volatile uint32_t MPU_CTRL;
  volatile uint32_t MPU_RNR;
  volatile uint32_t MPU_RBAR;
  volatile uint32_t MPU_RASR;
  volatile uint32_t MPU_RBAR_A1;
  volatile uint32_t MPU_RASR_A1;
  volatile uint32_t MPU_RBAR_A2;
  volatile uint32_t MPU_RASR_A2;
  volatile uint32_t MPU_RBAR_A3;
  volatile uint32_t MPU_RASR_A3;
  volatile const uint32_t RESERVED12[81];
  volatile uint32_t STIR;
  volatile const uint32_t RESERVED13[12];
  volatile uint32_t FPCCR;
  volatile uint32_t FPCAR;
  volatile uint32_t FPDSCR;
} PPB_Type;
# 499 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t OVRSTAT;
  volatile uint32_t OVRCLR;
  volatile uint32_t SRSEL0;
  volatile uint32_t SRSEL1;
  volatile uint32_t LNEN;
} DLR_GLOBAL_TypeDef;
# 517 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t EXISEL;
  volatile const uint32_t RESERVED[3];
  volatile uint32_t EXICON[4];
  volatile uint32_t EXOCON[4];
} ERU_GLOBAL_TypeDef;
# 534 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t RAWTFR;
  volatile const uint32_t RESERVED;
  volatile uint32_t RAWBLOCK;
  volatile const uint32_t RESERVED1;
  volatile uint32_t RAWSRCTRAN;
  volatile const uint32_t RESERVED2;
  volatile uint32_t RAWDSTTRAN;
  volatile const uint32_t RESERVED3;
  volatile uint32_t RAWERR;
  volatile const uint32_t RESERVED4;
  volatile const uint32_t STATUSTFR;
  volatile const uint32_t RESERVED5;
  volatile const uint32_t STATUSBLOCK;
  volatile const uint32_t RESERVED6;
  volatile const uint32_t STATUSSRCTRAN;
  volatile const uint32_t RESERVED7;
  volatile const uint32_t STATUSDSTTRAN;
  volatile const uint32_t RESERVED8;
  volatile const uint32_t STATUSERR;
  volatile const uint32_t RESERVED9;
  volatile uint32_t MASKTFR;
  volatile const uint32_t RESERVED10;
  volatile uint32_t MASKBLOCK;
  volatile const uint32_t RESERVED11;
  volatile uint32_t MASKSRCTRAN;
  volatile const uint32_t RESERVED12;
  volatile uint32_t MASKDSTTRAN;
  volatile const uint32_t RESERVED13;
  volatile uint32_t MASKERR;
  volatile const uint32_t RESERVED14;
  volatile uint32_t CLEARTFR;
  volatile const uint32_t RESERVED15;
  volatile uint32_t CLEARBLOCK;
  volatile const uint32_t RESERVED16;
  volatile uint32_t CLEARSRCTRAN;
  volatile const uint32_t RESERVED17;
  volatile uint32_t CLEARDSTTRAN;
  volatile const uint32_t RESERVED18;
  volatile uint32_t CLEARERR;
  volatile const uint32_t RESERVED19;
  volatile const uint32_t STATUSINT;
  volatile const uint32_t RESERVED20;
  volatile uint32_t REQSRCREG;
  volatile const uint32_t RESERVED21;
  volatile uint32_t REQDSTREG;
  volatile const uint32_t RESERVED22;
  volatile uint32_t SGLREQSRCREG;
  volatile const uint32_t RESERVED23;
  volatile uint32_t SGLREQDSTREG;
  volatile const uint32_t RESERVED24;
  volatile uint32_t LSTSRCREG;
  volatile const uint32_t RESERVED25;
  volatile uint32_t LSTDSTREG;
  volatile const uint32_t RESERVED26;
  volatile uint32_t DMACFGREG;
  volatile const uint32_t RESERVED27;
  volatile uint32_t CHENREG;
  volatile const uint32_t RESERVED28;
  volatile const uint32_t ID;
  volatile const uint32_t RESERVED29[19];
  volatile const uint32_t TYPE;
  volatile const uint32_t VERSION;
} GPDMA0_GLOBAL_TypeDef;
# 609 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t SAR;
  volatile const uint32_t RESERVED;
  volatile uint32_t DAR;
  volatile const uint32_t RESERVED1;
  volatile uint32_t LLP;
  volatile const uint32_t RESERVED2;
  volatile uint32_t CTLL;
  volatile uint32_t CTLH;
  volatile uint32_t SSTAT;
  volatile const uint32_t RESERVED3;
  volatile uint32_t DSTAT;
  volatile const uint32_t RESERVED4;
  volatile uint32_t SSTATAR;
  volatile const uint32_t RESERVED5;
  volatile uint32_t DSTATAR;
  volatile const uint32_t RESERVED6;
  volatile uint32_t CFGL;
  volatile uint32_t CFGH;
  volatile uint32_t SGR;
  volatile const uint32_t RESERVED7;
  volatile uint32_t DSR;
} GPDMA0_CH_TypeDef;
# 643 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t SAR;
  volatile const uint32_t RESERVED;
  volatile uint32_t DAR;
  volatile const uint32_t RESERVED1[3];
  volatile uint32_t CTLL;
  volatile uint32_t CTLH;
  volatile const uint32_t RESERVED2[8];
  volatile uint32_t CFGL;
  volatile uint32_t CFGH;
} GPDMA0_CH2_7_Type;
# 665 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t RAWTFR;
  volatile const uint32_t RESERVED;
  volatile uint32_t RAWBLOCK;
  volatile const uint32_t RESERVED1;
  volatile uint32_t RAWSRCTRAN;
  volatile const uint32_t RESERVED2;
  volatile uint32_t RAWDSTTRAN;
  volatile const uint32_t RESERVED3;
  volatile uint32_t RAWERR;
  volatile const uint32_t RESERVED4;
  volatile const uint32_t STATUSTFR;
  volatile const uint32_t RESERVED5;
  volatile const uint32_t STATUSBLOCK;
  volatile const uint32_t RESERVED6;
  volatile const uint32_t STATUSSRCTRAN;
  volatile const uint32_t RESERVED7;
  volatile const uint32_t STATUSDSTTRAN;
  volatile const uint32_t RESERVED8;
  volatile const uint32_t STATUSERR;
  volatile const uint32_t RESERVED9;
  volatile uint32_t MASKTFR;
  volatile const uint32_t RESERVED10;
  volatile uint32_t MASKBLOCK;
  volatile const uint32_t RESERVED11;
  volatile uint32_t MASKSRCTRAN;
  volatile const uint32_t RESERVED12;
  volatile uint32_t MASKDSTTRAN;
  volatile const uint32_t RESERVED13;
  volatile uint32_t MASKERR;
  volatile const uint32_t RESERVED14;
  volatile uint32_t CLEARTFR;
  volatile const uint32_t RESERVED15;
  volatile uint32_t CLEARBLOCK;
  volatile const uint32_t RESERVED16;
  volatile uint32_t CLEARSRCTRAN;
  volatile const uint32_t RESERVED17;
  volatile uint32_t CLEARDSTTRAN;
  volatile const uint32_t RESERVED18;
  volatile uint32_t CLEARERR;
  volatile const uint32_t RESERVED19;
  volatile const uint32_t STATUSINT;
  volatile const uint32_t RESERVED20;
  volatile uint32_t REQSRCREG;
  volatile const uint32_t RESERVED21;
  volatile uint32_t REQDSTREG;
  volatile const uint32_t RESERVED22;
  volatile uint32_t SGLREQSRCREG;
  volatile const uint32_t RESERVED23;
  volatile uint32_t SGLREQDSTREG;
  volatile const uint32_t RESERVED24;
  volatile uint32_t LSTSRCREG;
  volatile const uint32_t RESERVED25;
  volatile uint32_t LSTDSTREG;
  volatile const uint32_t RESERVED26;
  volatile uint32_t DMACFGREG;
  volatile const uint32_t RESERVED27;
  volatile uint32_t CHENREG;
  volatile const uint32_t RESERVED28;
  volatile const uint32_t ID;
  volatile const uint32_t RESERVED29[19];
  volatile const uint32_t TYPE;
  volatile const uint32_t VERSION;
} GPDMA1_GLOBAL_TypeDef;
# 740 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t SAR;
  volatile const uint32_t RESERVED;
  volatile uint32_t DAR;
  volatile const uint32_t RESERVED1[3];
  volatile uint32_t CTLL;
  volatile uint32_t CTLH;
  volatile const uint32_t RESERVED2[8];
  volatile uint32_t CFGL;
  volatile uint32_t CFGH;
} GPDMA1_CH_TypeDef;
# 762 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t CLC;
  volatile const uint32_t RESERVED;
  volatile const uint32_t ID;
} FCE_GLOBAL_TypeDef;
# 778 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t IR;
  volatile const uint32_t RES;
  volatile uint32_t CFG;
  volatile uint32_t STS;
  volatile uint32_t LENGTH;
  volatile uint32_t CHECK;
  volatile uint32_t CRC;
  volatile uint32_t CTR;
} FCE_KE_TypeDef;
# 799 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t STS;
  volatile const uint32_t WADDR;
} PBA_GLOBAL_TypeDef;
# 814 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t RESERVED[1026];
  volatile const uint32_t ID;
  volatile const uint32_t RESERVED1;
  volatile const uint32_t FSR;
  volatile uint32_t FCON;
  volatile uint32_t MARP;
  volatile const uint32_t RESERVED2;
  volatile const uint32_t PROCON0;

  volatile const uint32_t PROCON1;

  volatile const uint32_t PROCON2;

} FLASH0_GLOBAL_TypeDef;
# 840 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t PCON;
} PREF_GLOBAL_TypeDef;
# 854 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t ID;
} PMU0_GLOBAL_TypeDef;
# 868 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t ID;
  volatile uint32_t CTR;
  volatile uint32_t SRV;
  volatile const uint32_t TIM;
  volatile uint32_t WLB;
  volatile uint32_t WUB;
  volatile const uint32_t WDTSTS;
  volatile uint32_t WDTCLR;
} WDT_GLOBAL_TypeDef;
# 889 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t ID;
  volatile uint32_t CTR;
  volatile const uint32_t RAWSTAT;
  volatile const uint32_t STSSR;
  volatile uint32_t MSKSR;
  volatile uint32_t CLRSR;
  volatile uint32_t ATIM0;
  volatile uint32_t ATIM1;
  volatile uint32_t TIM0;
  volatile uint32_t TIM1;
} RTC_GLOBAL_TypeDef;
# 912 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t CLKSTAT;
  volatile uint32_t CLKSET;
  volatile uint32_t CLKCLR;
  volatile uint32_t SYSCLKCR;
  volatile uint32_t CPUCLKCR;
  volatile uint32_t PBCLKCR;
  volatile uint32_t USBCLKCR;
  volatile uint32_t EBUCLKCR;
  volatile uint32_t CCUCLKCR;
  volatile uint32_t WDTCLKCR;
  volatile uint32_t EXTCLKCR;
  volatile const uint32_t RESERVED;
  volatile uint32_t SLEEPCR;
  volatile uint32_t DSLEEPCR;
} SCU_CLK_TypeDef;
# 939 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t OSCHPSTAT;
  volatile uint32_t OSCHPCTRL;
  volatile const uint32_t RESERVED;
  volatile uint32_t CLKCALCONST;
} SCU_OSC_TypeDef;
# 956 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t PLLSTAT;
  volatile uint32_t PLLCON0;
  volatile uint32_t PLLCON1;
  volatile uint32_t PLLCON2;
  volatile const uint32_t USBPLLSTAT;
  volatile uint32_t USBPLLCON;
  volatile const uint32_t RESERVED[4];
  volatile const uint32_t CLKMXSTAT;
} SCU_PLL_TypeDef;
# 977 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t ID;
  volatile const uint32_t IDCHIP;
  volatile const uint32_t IDMANUF;
  volatile const uint32_t RESERVED;
  volatile uint32_t STCON;
  volatile const uint32_t RESERVED1[6];
  volatile uint32_t GPR[2];
  volatile const uint32_t RESERVED2[6];
  volatile uint32_t CCUCON;
  volatile const uint32_t RESERVED3[15];
  volatile uint32_t DTSCON;
  volatile const uint32_t DTSSTAT;
  volatile const uint32_t RESERVED4[2];
  volatile uint32_t SDMMCDEL;
  volatile uint32_t GORCEN[2];
  volatile const uint32_t RESERVED5[7];
  volatile const uint32_t MIRRSTS;
  volatile uint32_t RMACR;
  volatile uint32_t RMDATA;
} SCU_GENERAL_TypeDef;
# 1009 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t SRSTAT;
  volatile const uint32_t SRRAW;
  volatile uint32_t SRMSK;
  volatile uint32_t SRCLR;
  volatile uint32_t SRSET;
  volatile uint32_t NMIREQEN;
} SCU_INTERRUPT_TypeDef;
# 1028 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t PEEN;
  volatile uint32_t MCHKCON;
  volatile uint32_t PETE;
  volatile uint32_t PERSTEN;
  volatile const uint32_t RESERVED;
  volatile uint32_t PEFLAG;
  volatile uint32_t PMTPR;
  volatile uint32_t PMTSR;
} SCU_PARITY_TypeDef;
# 1049 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t TRAPSTAT;
  volatile const uint32_t TRAPRAW;
  volatile uint32_t TRAPDIS;
  volatile uint32_t TRAPCLR;
  volatile uint32_t TRAPSET;
} SCU_TRAP_TypeDef;
# 1067 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t HDSTAT;
  volatile uint32_t HDCLR;
  volatile uint32_t HDSET;
  volatile uint32_t HDCR;
  volatile const uint32_t RESERVED;
  volatile uint32_t OSCSICTRL;
  volatile const uint32_t OSCULSTAT;
  volatile uint32_t OSCULCTRL;
} SCU_HIBERNATE_TypeDef;
# 1088 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t PWRSTAT;
  volatile uint32_t PWRSET;
  volatile uint32_t PWRCLR;
  volatile const uint32_t RESERVED;
  volatile const uint32_t EVRSTAT;
  volatile const uint32_t EVRVADCSTAT;
  volatile const uint32_t RESERVED1[5];
  volatile uint32_t PWRMON;
} SCU_POWER_TypeDef;
# 1109 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t RSTSTAT;
  volatile uint32_t RSTSET;
  volatile uint32_t RSTCLR;
  volatile const uint32_t PRSTAT0;
  volatile uint32_t PRSET0;
  volatile uint32_t PRCLR0;
  volatile const uint32_t PRSTAT1;
  volatile uint32_t PRSET1;
  volatile uint32_t PRCLR1;
  volatile const uint32_t PRSTAT2;
  volatile uint32_t PRSET2;
  volatile uint32_t PRCLR2;
  volatile const uint32_t PRSTAT3;
  volatile uint32_t PRSET3;
  volatile uint32_t PRCLR3;
} SCU_RESET_TypeDef;
# 1137 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t ID;
  volatile uint32_t GLOBCTL;
  volatile uint32_t FNCTL;
  volatile uint32_t EVFR;
  volatile uint32_t TSVAL;
  volatile uint32_t LINE0;
  volatile uint32_t LINE1;
  volatile uint32_t LDCMP0;
  volatile uint32_t LDCMP1;
  volatile uint32_t TSCMP0;
  volatile uint32_t TSCMP1;
} LEDTS0_GLOBAL_TypeDef;
# 1161 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t RESERVED;
  volatile uint16_t BLOCK_SIZE;
  volatile uint16_t BLOCK_COUNT;
  volatile uint32_t ARGUMENT1;
  volatile uint16_t TRANSFER_MODE;
  volatile uint16_t COMMAND;
  volatile const uint32_t RESPONSE0;
  volatile const uint32_t RESPONSE2;
  volatile const uint32_t RESPONSE4;
  volatile const uint32_t RESPONSE6;
  volatile uint32_t DATA_BUFFER;
  volatile const uint32_t PRESENT_STATE;
  volatile uint8_t HOST_CTRL;
  volatile uint8_t POWER_CTRL;
  volatile uint8_t BLOCK_GAP_CTRL;
  volatile uint8_t WAKEUP_CTRL;
  volatile uint16_t CLOCK_CTRL;
  volatile uint8_t TIMEOUT_CTRL;
  volatile uint8_t SW_RESET;
  volatile uint16_t INT_STATUS_NORM;
  volatile uint16_t INT_STATUS_ERR;
  volatile uint16_t EN_INT_STATUS_NORM;
  volatile uint16_t EN_INT_STATUS_ERR;
  volatile uint16_t EN_INT_SIGNAL_NORM;
  volatile uint16_t EN_INT_SIGNAL_ERR;
  volatile const uint16_t ACMD_ERR_STATUS;
  volatile const uint16_t RESERVED1;
  volatile const uint32_t CAPABILITIES;
  volatile const uint32_t CAPABILITIES_HI;
  volatile const uint32_t MAX_CURRENT_CAP;
  volatile const uint32_t RESERVED2;
  volatile uint16_t FORCE_EVENT_ACMD_ERR_STATUS;
  volatile uint16_t FORCE_EVENT_ERR_STATUS;
  volatile const uint32_t RESERVED3[8];
  volatile uint32_t DEBUG_SEL;
  volatile const uint32_t RESERVED4[30];
  volatile uint32_t SPI;
  volatile const uint32_t RESERVED5[2];
  volatile const uint16_t SLOT_INT_STATUS;
} SDMMC_GLOBAL_TypeDef;
# 1213 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t CLC;
  volatile uint32_t MODCON;
  volatile const uint32_t ID;
  volatile uint32_t USERCON;
  volatile const uint32_t RESERVED[2];
  volatile uint32_t ADDRSEL0;
  volatile uint32_t ADDRSEL1;
  volatile uint32_t ADDRSEL2;
  volatile uint32_t ADDRSEL3;
  volatile uint32_t BUSRCON0;
  volatile uint32_t BUSRAP0;
  volatile uint32_t BUSWCON0;
  volatile uint32_t BUSWAP0;
  volatile uint32_t BUSRCON1;
  volatile uint32_t BUSRAP1;
  volatile uint32_t BUSWCON1;
  volatile uint32_t BUSWAP1;
  volatile uint32_t BUSRCON2;
  volatile uint32_t BUSRAP2;
  volatile uint32_t BUSWCON2;
  volatile uint32_t BUSWAP2;
  volatile uint32_t BUSRCON3;
  volatile uint32_t BUSRAP3;
  volatile uint32_t BUSWCON3;
  volatile uint32_t BUSWAP3;
  volatile uint32_t SDRMCON;
  volatile uint32_t SDRMOD;
  volatile uint32_t SDRMREF;
  volatile const uint32_t SDRSTAT;
} EBU_Type;
# 1255 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t CON;
} ETH0_CON_GLOBAL_TypeDef;
# 1269 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t MAC_CONFIGURATION;
  volatile uint32_t MAC_FRAME_FILTER;
  volatile uint32_t HASH_TABLE_HIGH;
  volatile uint32_t HASH_TABLE_LOW;
  volatile uint32_t GMII_ADDRESS;
  volatile uint32_t GMII_DATA;
  volatile uint32_t FLOW_CONTROL;
  volatile uint32_t VLAN_TAG;
  volatile const uint32_t VERSION;
  volatile const uint32_t DEBUG;
  volatile uint32_t REMOTE_WAKE_UP_FRAME_FILTER;
  volatile uint32_t PMT_CONTROL_STATUS;
  volatile const uint32_t RESERVED[2];
  volatile const uint32_t INTERRUPT_STATUS;
  volatile uint32_t INTERRUPT_MASK;
  volatile uint32_t MAC_ADDRESS0_HIGH;
  volatile uint32_t MAC_ADDRESS0_LOW;
  volatile uint32_t MAC_ADDRESS1_HIGH;
  volatile uint32_t MAC_ADDRESS1_LOW;
  volatile uint32_t MAC_ADDRESS2_HIGH;
  volatile uint32_t MAC_ADDRESS2_LOW;
  volatile uint32_t MAC_ADDRESS3_HIGH;
  volatile uint32_t MAC_ADDRESS3_LOW;
  volatile const uint32_t RESERVED1[40];
  volatile uint32_t MMC_CONTROL;
  volatile const uint32_t MMC_RECEIVE_INTERRUPT;
  volatile const uint32_t MMC_TRANSMIT_INTERRUPT;
  volatile uint32_t MMC_RECEIVE_INTERRUPT_MASK;
  volatile uint32_t MMC_TRANSMIT_INTERRUPT_MASK;
  volatile const uint32_t TX_OCTET_COUNT_GOOD_BAD;

  volatile const uint32_t TX_FRAME_COUNT_GOOD_BAD;
  volatile const uint32_t TX_BROADCAST_FRAMES_GOOD;
  volatile const uint32_t TX_MULTICAST_FRAMES_GOOD;
  volatile const uint32_t TX_64OCTETS_FRAMES_GOOD_BAD;

  volatile const uint32_t TX_65TO127OCTETS_FRAMES_GOOD_BAD;

  volatile const uint32_t TX_128TO255OCTETS_FRAMES_GOOD_BAD;

  volatile const uint32_t TX_256TO511OCTETS_FRAMES_GOOD_BAD;

  volatile const uint32_t TX_512TO1023OCTETS_FRAMES_GOOD_BAD;

  volatile const uint32_t TX_1024TOMAXOCTETS_FRAMES_GOOD_BAD;

  volatile const uint32_t TX_UNICAST_FRAMES_GOOD_BAD;

  volatile const uint32_t TX_MULTICAST_FRAMES_GOOD_BAD;

  volatile const uint32_t TX_BROADCAST_FRAMES_GOOD_BAD;

  volatile const uint32_t TX_UNDERFLOW_ERROR_FRAMES;
  volatile const uint32_t TX_SINGLE_COLLISION_GOOD_FRAMES;

  volatile const uint32_t TX_MULTIPLE_COLLISION_GOOD_FRAMES;

  volatile const uint32_t TX_DEFERRED_FRAMES;
  volatile const uint32_t TX_LATE_COLLISION_FRAMES;

  volatile const uint32_t TX_EXCESSIVE_COLLISION_FRAMES;

  volatile const uint32_t TX_CARRIER_ERROR_FRAMES;

  volatile const uint32_t TX_OCTET_COUNT_GOOD;
  volatile const uint32_t TX_FRAME_COUNT_GOOD;
  volatile const uint32_t TX_EXCESSIVE_DEFERRAL_ERROR;

  volatile const uint32_t TX_PAUSE_FRAMES;
  volatile const uint32_t TX_VLAN_FRAMES_GOOD;
  volatile const uint32_t TX_OSIZE_FRAMES_GOOD;
  volatile const uint32_t RESERVED2;
  volatile const uint32_t RX_FRAMES_COUNT_GOOD_BAD;
  volatile const uint32_t RX_OCTET_COUNT_GOOD_BAD;
  volatile const uint32_t RX_OCTET_COUNT_GOOD;
  volatile const uint32_t RX_BROADCAST_FRAMES_GOOD;
  volatile const uint32_t RX_MULTICAST_FRAMES_GOOD;
  volatile const uint32_t RX_CRC_ERROR_FRAMES;
  volatile const uint32_t RX_ALIGNMENT_ERROR_FRAMES;
  volatile const uint32_t RX_RUNT_ERROR_FRAMES;
  volatile const uint32_t RX_JABBER_ERROR_FRAMES;
  volatile const uint32_t RX_UNDERSIZE_FRAMES_GOOD;
  volatile const uint32_t RX_OVERSIZE_FRAMES_GOOD;
  volatile const uint32_t RX_64OCTETS_FRAMES_GOOD_BAD;

  volatile const uint32_t RX_65TO127OCTETS_FRAMES_GOOD_BAD;

  volatile const uint32_t RX_128TO255OCTETS_FRAMES_GOOD_BAD;

  volatile const uint32_t RX_256TO511OCTETS_FRAMES_GOOD_BAD;

  volatile const uint32_t RX_512TO1023OCTETS_FRAMES_GOOD_BAD;

  volatile const uint32_t RX_1024TOMAXOCTETS_FRAMES_GOOD_BAD;

  volatile const uint32_t RX_UNICAST_FRAMES_GOOD;
  volatile const uint32_t RX_LENGTH_ERROR_FRAMES;
  volatile const uint32_t RX_OUT_OF_RANGE_TYPE_FRAMES;
  volatile const uint32_t RX_PAUSE_FRAMES;
  volatile const uint32_t RX_FIFO_OVERFLOW_FRAMES;
  volatile const uint32_t RX_VLAN_FRAMES_GOOD_BAD;
  volatile const uint32_t RX_WATCHDOG_ERROR_FRAMES;
  volatile const uint32_t RX_RECEIVE_ERROR_FRAMES;
  volatile const uint32_t RX_CONTROL_FRAMES_GOOD;
  volatile const uint32_t RESERVED3[6];
  volatile uint32_t MMC_IPC_RECEIVE_INTERRUPT_MASK;
  volatile const uint32_t RESERVED4;
  volatile const uint32_t MMC_IPC_RECEIVE_INTERRUPT;
  volatile const uint32_t RESERVED5;
  volatile const uint32_t RXIPV4_GOOD_FRAMES;
  volatile const uint32_t RXIPV4_HEADER_ERROR_FRAMES;
  volatile const uint32_t RXIPV4_NO_PAYLOAD_FRAMES;
  volatile const uint32_t RXIPV4_FRAGMENTED_FRAMES;
  volatile const uint32_t RXIPV4_UDP_CHECKSUM_DISABLED_FRAMES;

  volatile const uint32_t RXIPV6_GOOD_FRAMES;
  volatile const uint32_t RXIPV6_HEADER_ERROR_FRAMES;
  volatile const uint32_t RXIPV6_NO_PAYLOAD_FRAMES;
  volatile const uint32_t RXUDP_GOOD_FRAMES;
  volatile const uint32_t RXUDP_ERROR_FRAMES;
  volatile const uint32_t RXTCP_GOOD_FRAMES;
  volatile const uint32_t RXTCP_ERROR_FRAMES;
  volatile const uint32_t RXICMP_GOOD_FRAMES;
  volatile const uint32_t RXICMP_ERROR_FRAMES;
  volatile const uint32_t RESERVED6[2];
  volatile const uint32_t RXIPV4_GOOD_OCTETS;
  volatile const uint32_t RXIPV4_HEADER_ERROR_OCTETS;
  volatile const uint32_t RXIPV4_NO_PAYLOAD_OCTETS;
  volatile const uint32_t RXIPV4_FRAGMENTED_OCTETS;
  volatile const uint32_t RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS;
  volatile const uint32_t RXIPV6_GOOD_OCTETS;
  volatile const uint32_t RXIPV6_HEADER_ERROR_OCTETS;
  volatile const uint32_t RXIPV6_NO_PAYLOAD_OCTETS;
  volatile const uint32_t RXUDP_GOOD_OCTETS;
  volatile const uint32_t RXUDP_ERROR_OCTETS;
  volatile const uint32_t RXTCP_GOOD_OCTETS;
  volatile const uint32_t RXTCP_ERROR_OCTETS;
  volatile const uint32_t RXICMP_GOOD_OCTETS;
  volatile const uint32_t RXICMP_ERROR_OCTETS;
  volatile const uint32_t RESERVED7[286];
  volatile uint32_t TIMESTAMP_CONTROL;
  volatile uint32_t SUB_SECOND_INCREMENT;
  volatile const uint32_t SYSTEM_TIME_SECONDS;
  volatile const uint32_t SYSTEM_TIME_NANOSECONDS;
  volatile uint32_t SYSTEM_TIME_SECONDS_UPDATE;
  volatile uint32_t SYSTEM_TIME_NANOSECONDS_UPDATE;
  volatile uint32_t TIMESTAMP_ADDEND;
  volatile uint32_t TARGET_TIME_SECONDS;
  volatile uint32_t TARGET_TIME_NANOSECONDS;
  volatile uint32_t SYSTEM_TIME_HIGHER_WORD_SECONDS;
  volatile const uint32_t TIMESTAMP_STATUS;
  volatile uint32_t PPS_CONTROL;
  volatile const uint32_t RESERVED8[564];
  volatile uint32_t BUS_MODE;
  volatile uint32_t TRANSMIT_POLL_DEMAND;
  volatile uint32_t RECEIVE_POLL_DEMAND;
  volatile uint32_t RECEIVE_DESCRIPTOR_LIST_ADDRESS;
  volatile uint32_t TRANSMIT_DESCRIPTOR_LIST_ADDRESS;
  volatile uint32_t STATUS;
  volatile uint32_t OPERATION_MODE;
  volatile uint32_t INTERRUPT_ENABLE;
  volatile const uint32_t MISSED_FRAME_AND_BUFFER_OVERFLOW_COUNTER;
  volatile uint32_t RECEIVE_INTERRUPT_WATCHDOG_TIMER;
  volatile const uint32_t RESERVED9;
  volatile const uint32_t AHB_STATUS;
  volatile const uint32_t RESERVED10[6];
  volatile const uint32_t CURRENT_HOST_TRANSMIT_DESCRIPTOR;
  volatile const uint32_t CURRENT_HOST_RECEIVE_DESCRIPTOR;
  volatile const uint32_t CURRENT_HOST_TRANSMIT_BUFFER_ADDRESS;
  volatile const uint32_t CURRENT_HOST_RECEIVE_BUFFER_ADDRESS;
  volatile uint32_t HW_FEATURE;
} ETH_GLOBAL_TypeDef;
# 1453 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t GOTGCTL;
  volatile uint32_t GOTGINT;
  volatile uint32_t GAHBCFG;
  volatile uint32_t GUSBCFG;
  volatile uint32_t GRSTCTL;

  union {
    volatile uint32_t GINTSTS_DEVICEMODE;
    volatile uint32_t GINTSTS_HOSTMODE;
  };

  union {
    volatile uint32_t GINTMSK_DEVICEMODE;
    volatile uint32_t GINTMSK_HOSTMODE;
  };

  union {
    volatile const uint32_t GRXSTSR_DEVICEMODE;
    volatile const uint32_t GRXSTSR_HOSTMODE;
  };

  union {
    volatile const uint32_t GRXSTSP_DEVICEMODE;
    volatile const uint32_t GRXSTSP_HOSTMODE;
  };
  volatile uint32_t GRXFSIZ;

  union {
    volatile uint32_t GNPTXFSIZ_DEVICEMODE;
    volatile uint32_t GNPTXFSIZ_HOSTMODE;
  };
  volatile const uint32_t GNPTXSTS;
  volatile const uint32_t RESERVED[3];
  volatile uint32_t GUID;
  volatile const uint32_t RESERVED1[7];
  volatile uint32_t GDFIFOCFG;
  volatile const uint32_t RESERVED2[40];
  volatile uint32_t HPTXFSIZ;
  volatile uint32_t DIEPTXF1;
  volatile uint32_t DIEPTXF2;
  volatile uint32_t DIEPTXF3;
  volatile uint32_t DIEPTXF4;
  volatile uint32_t DIEPTXF5;
  volatile uint32_t DIEPTXF6;
  volatile const uint32_t RESERVED3[185];
  volatile uint32_t HCFG;
  volatile uint32_t HFIR;
  volatile uint32_t HFNUM;
  volatile const uint32_t RESERVED4;
  volatile uint32_t HPTXSTS;
  volatile const uint32_t HAINT;
  volatile uint32_t HAINTMSK;
  volatile uint32_t HFLBADDR;
  volatile const uint32_t RESERVED5[8];
  volatile uint32_t HPRT;
  volatile const uint32_t RESERVED6[239];
  volatile uint32_t DCFG;
  volatile uint32_t DCTL;
  volatile const uint32_t DSTS;
  volatile const uint32_t RESERVED7;
  volatile uint32_t DIEPMSK;
  volatile uint32_t DOEPMSK;
  volatile const uint32_t DAINT;
  volatile uint32_t DAINTMSK;
  volatile const uint32_t RESERVED8[2];
  volatile uint32_t DVBUSDIS;
  volatile uint32_t DVBUSPULSE;
  volatile const uint32_t RESERVED9;
  volatile uint32_t DIEPEMPMSK;

  volatile const uint32_t RESERVED10[370];
  volatile uint32_t PCGCCTL;
} USB0_GLOBAL_TypeDef;
# 1538 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t DIEPCTL0;
  volatile const uint32_t RESERVED;
  volatile uint32_t DIEPINT0;
  volatile const uint32_t RESERVED1;
  volatile uint32_t DIEPTSIZ0;
  volatile uint32_t DIEPDMA0;
  volatile const uint32_t DTXFSTS0;
  volatile const uint32_t DIEPDMAB0;
  volatile const uint32_t RESERVED2[120];
  volatile uint32_t DOEPCTL0;
  volatile const uint32_t RESERVED3;
  volatile uint32_t DOEPINT0;
  volatile const uint32_t RESERVED4;
  volatile uint32_t DOEPTSIZ0;
  volatile uint32_t DOEPDMA0;
  volatile const uint32_t RESERVED5;
  volatile const uint32_t DOEPDMAB0;
} USB0_EP0_TypeDef;
# 1568 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {

  union {
    volatile uint32_t DIEPCTL_INTBULK;
    volatile uint32_t DIEPCTL_ISOCONT;
  };
  volatile const uint32_t RESERVED;
  volatile uint32_t DIEPINT;
  volatile const uint32_t RESERVED1;
  volatile uint32_t DIEPTSIZ;
  volatile uint32_t DIEPDMA;
  volatile const uint32_t DTXFSTS;
  volatile const uint32_t DIEPDMAB;
  volatile const uint32_t RESERVED2[120];

  union {
    volatile uint32_t DOEPCTL_INTBULK;
    volatile uint32_t DOEPCTL_ISOCONT;
  };
  volatile const uint32_t RESERVED3;
  volatile uint32_t DOEPINT;
  volatile const uint32_t RESERVED4;

  union {
    volatile uint32_t DOEPTSIZ_CONTROL;
    volatile uint32_t DOEPTSIZ_ISO;
  };
  volatile uint32_t DOEPDMA;
  volatile const uint32_t RESERVED5;
  volatile const uint32_t DOEPDMAB;
} USB0_EP_TypeDef;
# 1610 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t HCCHAR;
  volatile const uint32_t RESERVED;
  volatile uint32_t HCINT;
  volatile uint32_t HCINTMSK;

  union {
    volatile uint32_t HCTSIZ_SCATGATHER;
    volatile uint32_t HCTSIZ_BUFFERMODE;
  };

  union {
    volatile uint32_t HCDMA_SCATGATHER;
    volatile uint32_t HCDMA_BUFFERMODE;
  };
  volatile const uint32_t RESERVED1;
  volatile const uint32_t HCDMAB;
} USB0_CH_TypeDef;
# 1639 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t ID;
} USIC_GLOBAL_TypeDef;
# 1653 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t RESERVED;
  volatile const uint32_t CCFG;
  volatile const uint32_t RESERVED1;
  volatile uint32_t KSCFG;
  volatile uint32_t FDR;
  volatile uint32_t BRG;
  volatile uint32_t INPR;
  volatile uint32_t DX0CR;
  volatile uint32_t DX1CR;
  volatile uint32_t DX2CR;
  volatile uint32_t DX3CR;
  volatile uint32_t DX4CR;
  volatile uint32_t DX5CR;
  volatile uint32_t SCTR;
  volatile uint32_t TCSR;

  union {
    volatile uint32_t PCR_IICMode;
    volatile uint32_t PCR_IISMode;
    volatile uint32_t PCR_SSCMode;
    volatile uint32_t PCR;
    volatile uint32_t PCR_ASCMode;
  };
  volatile uint32_t CCR;
  volatile uint32_t CMTR;

  union {
    volatile uint32_t PSR_IICMode;
    volatile uint32_t PSR_IISMode;
    volatile uint32_t PSR_SSCMode;
    volatile uint32_t PSR;
    volatile uint32_t PSR_ASCMode;
  };
  volatile uint32_t PSCR;
  volatile const uint32_t RBUFSR;
  volatile const uint32_t RBUF;
  volatile const uint32_t RBUFD;
  volatile const uint32_t RBUF0;
  volatile const uint32_t RBUF1;
  volatile const uint32_t RBUF01SR;
  volatile uint32_t FMR;
  volatile const uint32_t RESERVED2[5];
  volatile uint32_t TBUF[32];
  volatile uint32_t BYP;
  volatile uint32_t BYPCR;
  volatile uint32_t TBCTR;
  volatile uint32_t RBCTR;
  volatile const uint32_t TRBPTR;
  volatile uint32_t TRBSR;
  volatile uint32_t TRBSCR;
  volatile const uint32_t OUTR;
  volatile const uint32_t OUTDR;
  volatile const uint32_t RESERVED3[23];
  volatile uint32_t IN[32];
} USIC_CH_TypeDef;
# 1720 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t CLC;
  volatile const uint32_t RESERVED;
  volatile const uint32_t ID;
  volatile uint32_t FDR;
  volatile const uint32_t RESERVED1[60];
  volatile const uint32_t LIST[8];
  volatile const uint32_t RESERVED2[8];
  volatile uint32_t MSPND[8];
  volatile const uint32_t RESERVED3[8];
  volatile const uint32_t MSID[8];
  volatile const uint32_t RESERVED4[8];
  volatile uint32_t MSIMASK;
  volatile uint32_t PANCTR;
  volatile uint32_t MCR;
  volatile uint32_t MITR;
} CAN_GLOBAL_TypeDef;
# 1748 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t NCR;
  volatile uint32_t NSR;
  volatile uint32_t NIPR;
  volatile uint32_t NPCR;
  volatile uint32_t NBTR;
  volatile uint32_t NECNT;
  volatile uint32_t NFCR;
} CAN_NODE_TypeDef;
# 1768 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t MOFCR;
  volatile uint32_t MOFGPR;
  volatile uint32_t MOIPR;
  volatile uint32_t MOAMR;
  volatile uint32_t MODATAL;
  volatile uint32_t MODATAH;
  volatile uint32_t MOAR;

  union {
    volatile const uint32_t MOSTAT;
    volatile uint32_t MOCTR;
  };
} CAN_MO_TypeDef;
# 1793 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t CLC;
  volatile const uint32_t RESERVED;
  volatile const uint32_t ID;
  volatile const uint32_t RESERVED1[7];
  volatile uint32_t OCS;
  volatile const uint32_t RESERVED2[21];
  volatile uint32_t GLOBCFG;
  volatile const uint32_t RESERVED3[7];
  volatile uint32_t GLOBICLASS[2];
  volatile const uint32_t RESERVED4[4];
  volatile uint32_t GLOBBOUND;
  volatile const uint32_t RESERVED5[9];
  volatile uint32_t GLOBEFLAG;
  volatile const uint32_t RESERVED6[23];
  volatile uint32_t GLOBEVNP;
  volatile const uint32_t RESERVED7[7];
  volatile uint32_t GLOBTF;
  volatile const uint32_t RESERVED8[7];
  volatile uint32_t BRSSEL[4];
  volatile const uint32_t RESERVED9[12];
  volatile uint32_t BRSPND[4];
  volatile const uint32_t RESERVED10[12];
  volatile uint32_t BRSCTRL;
  volatile uint32_t BRSMR;
  volatile const uint32_t RESERVED11[30];
  volatile uint32_t GLOBRCR;
  volatile const uint32_t RESERVED12[31];
  volatile uint32_t GLOBRES;
  volatile const uint32_t RESERVED13[31];
  volatile uint32_t GLOBRESD;
  volatile const uint32_t RESERVED14[27];
  volatile uint32_t EMUXSEL;
} VADC_GLOBAL_TypeDef;
# 1838 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t RESERVED[32];
  volatile uint32_t ARBCFG;
  volatile uint32_t ARBPR;
  volatile uint32_t CHASS;
  volatile const uint32_t RESERVED1[5];
  volatile uint32_t ICLASS[2];
  volatile const uint32_t RESERVED2[2];
  volatile uint32_t ALIAS;
  volatile const uint32_t RESERVED3;
  volatile uint32_t BOUND;
  volatile const uint32_t RESERVED4;
  volatile uint32_t SYNCTR;
  volatile const uint32_t RESERVED5;
  volatile uint32_t BFL;
  volatile const uint32_t RESERVED6[13];
  volatile uint32_t QCTRL0;
  volatile uint32_t QMR0;
  volatile const uint32_t QSR0;
  volatile const uint32_t Q0R0;

  union {
    volatile const uint32_t QBUR0;
    volatile uint32_t QINR0;
  };
  volatile const uint32_t RESERVED7[3];
  volatile uint32_t ASCTRL;
  volatile uint32_t ASMR;
  volatile uint32_t ASSEL;
  volatile uint32_t ASPND;
  volatile const uint32_t RESERVED8[20];
  volatile uint32_t CEFLAG;
  volatile uint32_t REFLAG;
  volatile uint32_t SEFLAG;
  volatile const uint32_t RESERVED9;
  volatile uint32_t CEFCLR;
  volatile uint32_t REFCLR;
  volatile uint32_t SEFCLR;
  volatile const uint32_t RESERVED10;
  volatile uint32_t CEVNP0;
  volatile const uint32_t RESERVED11[3];
  volatile uint32_t REVNP0;
  volatile uint32_t REVNP1;
  volatile const uint32_t RESERVED12[2];
  volatile uint32_t SEVNP;
  volatile const uint32_t RESERVED13;
  volatile uint32_t SRACT;
  volatile const uint32_t RESERVED14[9];
  volatile uint32_t EMUXCTR;
  volatile const uint32_t RESERVED15;
  volatile uint32_t VFR;
  volatile const uint32_t RESERVED16;
  volatile uint32_t CHCTR[8];
  volatile const uint32_t RESERVED17[24];
  volatile uint32_t RCR[16];
  volatile const uint32_t RESERVED18[16];
  volatile uint32_t RES[16];
  volatile const uint32_t RESERVED19[16];
  volatile const uint32_t RESD[16];
} VADC_G_TypeDef;
# 1909 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t CLC;
  volatile const uint32_t RESERVED;
  volatile const uint32_t ID;
  volatile const uint32_t RESERVED1[7];
  volatile uint32_t OCS;
  volatile const uint32_t RESERVED2[21];
  volatile uint32_t GLOBCFG;
  volatile const uint32_t RESERVED3;
  volatile uint32_t GLOBRC;
  volatile const uint32_t RESERVED4[5];
  volatile uint32_t CGCFG;
  volatile const uint32_t RESERVED5[15];
  volatile uint32_t EVFLAG;
  volatile uint32_t EVFLAGCLR;
} DSD_GLOBAL_TypeDef;
# 1936 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t MODCFG;
  volatile const uint32_t RESERVED;
  volatile uint32_t DICFG;
  volatile const uint32_t RESERVED1[2];
  volatile uint32_t FCFGC;
  volatile uint32_t FCFGA;
  volatile const uint32_t RESERVED2;
  volatile uint32_t IWCTR;
  volatile const uint32_t RESERVED3;
  volatile uint32_t BOUNDSEL;
  volatile const uint32_t RESERVED4;
  volatile const uint32_t RESM;
  volatile const uint32_t RESERVED5;
  volatile uint32_t OFFM;
  volatile const uint32_t RESERVED6;
  volatile const uint32_t RESA;
  volatile const uint32_t RESERVED7[3];
  volatile const uint32_t TSTMP;
  volatile const uint32_t RESERVED8[19];
  volatile uint32_t CGSYNC;
  volatile const uint32_t RESERVED9;
  volatile uint32_t RECTCFG;
} DSD_CH_TypeDef;
# 1971 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile const uint32_t ID;
  volatile uint32_t DAC0CFG0;
  volatile uint32_t DAC0CFG1;
  volatile uint32_t DAC1CFG0;
  volatile uint32_t DAC1CFG1;
  volatile uint32_t DAC0DATA;
  volatile uint32_t DAC1DATA;
  volatile uint32_t DAC01DATA;
  volatile uint32_t DAC0PATL;
  volatile uint32_t DAC0PATH;
  volatile uint32_t DAC1PATL;
  volatile uint32_t DAC1PATH;
} DAC_GLOBAL_TypeDef;
# 1996 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t GCTRL;
  volatile const uint32_t GSTAT;
  volatile uint32_t GIDLS;
  volatile uint32_t GIDLC;
  volatile uint32_t GCSS;
  volatile uint32_t GCSC;
  volatile const uint32_t GCST;
  volatile const uint32_t RESERVED[13];
  volatile const uint32_t ECRD;
  volatile const uint32_t RESERVED1[11];
  volatile const uint32_t MIDR;
} CCU4_GLOBAL_TypeDef;
# 2020 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t INS;
  volatile uint32_t CMC;
  volatile const uint32_t TCST;
  volatile uint32_t TCSET;
  volatile uint32_t TCCLR;
  volatile uint32_t TC;
  volatile uint32_t PSL;
  volatile const uint32_t DIT;
  volatile uint32_t DITS;
  volatile uint32_t PSC;
  volatile uint32_t FPC;
  volatile uint32_t FPCS;
  volatile const uint32_t PR;
  volatile uint32_t PRS;
  volatile const uint32_t CR;
  volatile uint32_t CRS;
  volatile const uint32_t RESERVED[12];
  volatile uint32_t TIMER;
  volatile const uint32_t CV[4];
  volatile const uint32_t RESERVED1[7];
  volatile const uint32_t INTS;
  volatile uint32_t INTE;
  volatile uint32_t SRS;
  volatile uint32_t SWS;
  volatile uint32_t SWR;
} CCU4_CC4_TypeDef;
# 2058 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t GCTRL;
  volatile const uint32_t GSTAT;
  volatile uint32_t GIDLS;
  volatile uint32_t GIDLC;
  volatile uint32_t GCSS;
  volatile uint32_t GCSC;
  volatile const uint32_t GCST;
  volatile uint32_t GPCHK;
  volatile const uint32_t RESERVED[12];
  volatile const uint32_t ECRD;
  volatile const uint32_t RESERVED1[11];
  volatile const uint32_t MIDR;
} CCU8_GLOBAL_TypeDef;
# 2083 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t INS;
  volatile uint32_t CMC;
  volatile const uint32_t TCST;
  volatile uint32_t TCSET;
  volatile uint32_t TCCLR;
  volatile uint32_t TC;
  volatile uint32_t PSL;
  volatile const uint32_t DIT;
  volatile uint32_t DITS;
  volatile uint32_t PSC;
  volatile uint32_t FPC;
  volatile uint32_t FPCS;
  volatile const uint32_t PR;
  volatile uint32_t PRS;
  volatile const uint32_t CR1;
  volatile uint32_t CR1S;
  volatile const uint32_t CR2;
  volatile uint32_t CR2S;
  volatile uint32_t CHC;
  volatile uint32_t DTC;
  volatile uint32_t DC1R;
  volatile uint32_t DC2R;
  volatile const uint32_t RESERVED[6];
  volatile uint32_t TIMER;
  volatile const uint32_t CV[4];
  volatile const uint32_t RESERVED1[7];
  volatile const uint32_t INTS;
  volatile uint32_t INTE;
  volatile uint32_t SRS;
  volatile uint32_t SWS;
  volatile uint32_t SWR;
} CCU8_CC8_TypeDef;
# 2127 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t PCONF;
  volatile uint32_t PSUS;
  volatile uint32_t PRUNS;
  volatile uint32_t PRUNC;
  volatile const uint32_t PRUN;
  volatile const uint32_t RESERVED[3];
  volatile const uint32_t MIDR;
  volatile const uint32_t RESERVED1[3];
  volatile const uint32_t HALP;
  volatile uint32_t HALPS;
  volatile const uint32_t RESERVED2[2];
  volatile const uint32_t MCM;
  volatile uint32_t MCSM;
  volatile uint32_t MCMS;
  volatile uint32_t MCMC;
  volatile const uint32_t MCMF;
  volatile const uint32_t RESERVED3[3];
  volatile uint32_t QDC;
  volatile const uint32_t RESERVED4[3];
  volatile const uint32_t PFLG;
  volatile uint32_t PFLGE;
  volatile uint32_t SPFLG;
  volatile uint32_t RPFLG;
  volatile const uint32_t RESERVED5[32];
  volatile const uint32_t PDBG;
} POSIF_GLOBAL_TypeDef;
# 2165 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t OUT;
  volatile uint32_t OMR;
  volatile const uint32_t RESERVED[2];
  volatile uint32_t IOCR0;
  volatile uint32_t IOCR4;
  volatile uint32_t IOCR8;
  volatile uint32_t IOCR12;
  volatile const uint32_t RESERVED1;
  volatile const uint32_t IN;
  volatile const uint32_t RESERVED2[6];
  volatile uint32_t PDR0;
  volatile uint32_t PDR1;
  volatile const uint32_t RESERVED3[6];
  volatile const uint32_t PDISC;
  volatile const uint32_t RESERVED4[3];
  volatile uint32_t PPS;
  volatile uint32_t HWSEL;
} PORT0_Type;
# 2195 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t OUT;
  volatile uint32_t OMR;
  volatile const uint32_t RESERVED[2];
  volatile uint32_t IOCR0;
  volatile uint32_t IOCR4;
  volatile uint32_t IOCR8;
  volatile uint32_t IOCR12;
  volatile const uint32_t RESERVED1;
  volatile const uint32_t IN;
  volatile const uint32_t RESERVED2[6];
  volatile uint32_t PDR0;
  volatile uint32_t PDR1;
  volatile const uint32_t RESERVED3[6];
  volatile const uint32_t PDISC;
  volatile const uint32_t RESERVED4[3];
  volatile uint32_t PPS;
  volatile uint32_t HWSEL;
} PORT1_Type;
# 2225 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t OUT;
  volatile uint32_t OMR;
  volatile const uint32_t RESERVED[2];
  volatile uint32_t IOCR0;
  volatile uint32_t IOCR4;
  volatile uint32_t IOCR8;
  volatile uint32_t IOCR12;
  volatile const uint32_t RESERVED1;
  volatile const uint32_t IN;
  volatile const uint32_t RESERVED2[6];
  volatile uint32_t PDR0;
  volatile uint32_t PDR1;
  volatile const uint32_t RESERVED3[6];
  volatile const uint32_t PDISC;
  volatile const uint32_t RESERVED4[3];
  volatile uint32_t PPS;
  volatile uint32_t HWSEL;
} PORT2_Type;
# 2255 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t OUT;
  volatile uint32_t OMR;
  volatile const uint32_t RESERVED[2];
  volatile uint32_t IOCR0;
  volatile uint32_t IOCR4;
  volatile uint32_t IOCR8;
  volatile uint32_t IOCR12;
  volatile const uint32_t RESERVED1;
  volatile const uint32_t IN;
  volatile const uint32_t RESERVED2[6];
  volatile uint32_t PDR0;
  volatile uint32_t PDR1;
  volatile const uint32_t RESERVED3[6];
  volatile const uint32_t PDISC;
  volatile const uint32_t RESERVED4[3];
  volatile uint32_t PPS;
  volatile uint32_t HWSEL;
} PORT3_Type;
# 2285 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t OUT;
  volatile uint32_t OMR;
  volatile const uint32_t RESERVED[2];
  volatile uint32_t IOCR0;
  volatile uint32_t IOCR4;
  volatile const uint32_t RESERVED1[3];
  volatile const uint32_t IN;
  volatile const uint32_t RESERVED2[6];
  volatile uint32_t PDR0;
  volatile const uint32_t RESERVED3[7];
  volatile const uint32_t PDISC;
  volatile const uint32_t RESERVED4[3];
  volatile uint32_t PPS;
  volatile uint32_t HWSEL;
} PORT4_Type;
# 2312 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t OUT;
  volatile uint32_t OMR;
  volatile const uint32_t RESERVED[2];
  volatile uint32_t IOCR0;
  volatile uint32_t IOCR4;
  volatile uint32_t IOCR8;
  volatile const uint32_t RESERVED1[2];
  volatile const uint32_t IN;
  volatile const uint32_t RESERVED2[6];
  volatile uint32_t PDR0;
  volatile uint32_t PDR1;
  volatile const uint32_t RESERVED3[6];
  volatile const uint32_t PDISC;
  volatile const uint32_t RESERVED4[3];
  volatile uint32_t PPS;
  volatile uint32_t HWSEL;
} PORT5_Type;
# 2341 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t OUT;
  volatile uint32_t OMR;
  volatile const uint32_t RESERVED[2];
  volatile uint32_t IOCR0;
  volatile uint32_t IOCR4;
  volatile const uint32_t RESERVED1[3];
  volatile const uint32_t IN;
  volatile const uint32_t RESERVED2[6];
  volatile uint32_t PDR0;
  volatile const uint32_t RESERVED3[7];
  volatile const uint32_t PDISC;
  volatile const uint32_t RESERVED4[3];
  volatile uint32_t PPS;
  volatile uint32_t HWSEL;
} PORT6_Type;
# 2368 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t OUT;
  volatile uint32_t OMR;
  volatile const uint32_t RESERVED[2];
  volatile uint32_t IOCR0;
  volatile uint32_t IOCR4;
  volatile uint32_t IOCR8;
  volatile uint32_t IOCR12;
  volatile const uint32_t RESERVED1;
  volatile const uint32_t IN;
  volatile const uint32_t RESERVED2[14];
  volatile uint32_t PDISC;
  volatile const uint32_t RESERVED3[3];
  volatile uint32_t PPS;
  volatile uint32_t HWSEL;
} PORT14_Type;
# 2395 "/home/sebin/thesis/zephyrproject/modules/hal/infineon/XMCLib/devices/XMC4500/Include/XMC4500.h"
typedef struct {
  volatile uint32_t OUT;
  volatile uint32_t OMR;
  volatile const uint32_t RESERVED[2];
  volatile uint32_t IOCR0;
  volatile uint32_t IOCR4;
  volatile uint32_t IOCR8;
  volatile uint32_t IOCR12;
  volatile const uint32_t RESERVED1;
  volatile const uint32_t IN;
  volatile const uint32_t RESERVED2[14];
  volatile uint32_t PDISC;
  volatile const uint32_t RESERVED3[3];
  volatile uint32_t PPS;
  volatile uint32_t HWSEL;
} PORT15_Type;
# 10 "/home/sebin/thesis/zephyrproject/zephyr/soc/arm/infineon_xmc/4xxx/soc.h" 2
# 18 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/cortex_m/cmsis.h" 2
# 115 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/cortex_m/cmsis.h"
# 1 "/home/sebin/thesis/zephyrproject/modules/hal/cmsis/CMSIS/Core/Include/core_cm4.h" 1
# 116 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/cortex_m/cmsis.h" 2
# 12 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/mpu/arm_mpu_v7m.h" 2
# 141 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/mpu/arm_mpu_v7m.h"
struct arm_mpu_region_attr {

 uint32_t rasr;
};

typedef struct arm_mpu_region_attr arm_mpu_region_attr_t;


typedef struct {
 uint32_t rasr_attr;
} k_mem_partition_attr_t;
# 15 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/mpu/arm_mpu.h" 2
# 26 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/mpu/arm_mpu.h"
struct arm_mpu_region {

 uint32_t base;

 const char *name;





 arm_mpu_region_attr_t attr;
};


struct arm_mpu_config {

 uint32_t num_regions;

 const struct arm_mpu_region *mpu_regions;
};
# 72 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/mpu/arm_mpu.h"
extern const struct arm_mpu_config mpu_config;
# 190 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/arm/aarch32/arch.h" 2
# 20 "/home/sebin/thesis/zephyrproject/zephyr/include/arch/cpu.h" 2
# 34 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_includes.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/rb.h" 1
# 35 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_includes.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys_clock.h" 1
# 25 "/home/sebin/thesis/zephyrproject/zephyr/include/sys_clock.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 1
# 58 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline int sys_clock_hw_cycles_per_sec(void)
{



 return 120000000;

}
# 101 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline __attribute__((always_inline)) uint64_t z_tmcvt(uint64_t t, uint32_t from_hz,
        uint32_t to_hz, 
# 102 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                       _Bool 
# 102 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                            const_hz,
        
# 103 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
       _Bool 
# 103 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
            result32, 
# 103 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                      _Bool 
# 103 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                           round_up,
        
# 104 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
       _Bool 
# 104 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
            round_off)
{
 
# 106 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
_Bool 
# 106 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
     mul_ratio = const_hz &&
  (to_hz > from_hz) && ((to_hz % from_hz) == 0U);
 
# 108 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
_Bool 
# 108 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
     div_ratio = const_hz &&
  (from_hz > to_hz) && ((from_hz % to_hz) == 0U);

 if (from_hz == to_hz) {
  return result32 ? ((uint32_t)t) : t;
 }

 uint64_t off = 0;

 if (!mul_ratio) {
  uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;

  if (round_up) {
   off = rdivisor - 1U;
  }
  if (round_off) {
   off = rdivisor / 2U;
  }
 }






 if (div_ratio) {
  t += off;
  if (result32 && (t < (1ULL << (32)))) {
   return ((uint32_t)t) / (from_hz / to_hz);
  } else {
   return t / ((uint64_t)from_hz / to_hz);
  }
 } else if (mul_ratio) {
  if (result32) {
   return ((uint32_t)t) * (to_hz / from_hz);
  } else {
   return t * ((uint64_t)to_hz / from_hz);
  }
 } else {
  if (result32) {
   return (uint32_t)((t * to_hz + off) / from_hz);
  } else if (const_hz && (((((365 * 24ULL * 3600ULL * from_hz) + ((0xffffffffUL) - 1)) / (0xffffffffUL)) * to_hz) <= 0xffffffffUL)) {





   return ((t * to_hz + off) / from_hz);
  } else {



   return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
  }
 }
}
# 248 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ms_to_cyc_floor32(uint32_t t)
{

 return z_tmcvt(t, 1000, sys_clock_hw_cycles_per_sec(), (!0), 
# 251 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 251 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 251 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 251 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 251 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 251 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 262 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ms_to_cyc_floor64(uint64_t t)
{

 return z_tmcvt(t, 1000, sys_clock_hw_cycles_per_sec(), (!0), 
# 265 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 265 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 265 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 265 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 265 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           0
# 265 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                );
}
# 276 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ms_to_cyc_near32(uint32_t t)
{

 return z_tmcvt(t, 1000, sys_clock_hw_cycles_per_sec(), (!0), 
# 279 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 279 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 279 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 279 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 279 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          1
# 279 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 290 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ms_to_cyc_near64(uint64_t t)
{

 return z_tmcvt(t, 1000, sys_clock_hw_cycles_per_sec(), (!0), 
# 293 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 293 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 293 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 293 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 293 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           1
# 293 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 304 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ms_to_cyc_ceil32(uint32_t t)
{

 return z_tmcvt(t, 1000, sys_clock_hw_cycles_per_sec(), (!0), 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 307 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   1
# 307 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                       , 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                         0
# 307 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 318 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ms_to_cyc_ceil64(uint64_t t)
{

 return z_tmcvt(t, 1000, sys_clock_hw_cycles_per_sec(), (!0), 
# 321 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 321 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 321 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    1
# 321 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 321 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 321 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 332 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ms_to_ticks_floor32(uint32_t t)
{

 return z_tmcvt(t, 1000, 10000, 
# 335 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 335 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 335 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 335 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 335 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 335 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 335 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 335 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 346 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ms_to_ticks_floor64(uint64_t t)
{

 return z_tmcvt(t, 1000, 10000, 
# 349 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 349 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 349 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 349 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 349 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 349 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 349 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           0
# 349 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                );
}
# 360 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ms_to_ticks_near32(uint32_t t)
{

 return z_tmcvt(t, 1000, 10000, 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 363 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 363 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 363 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          1
# 363 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 374 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ms_to_ticks_near64(uint64_t t)
{

 return z_tmcvt(t, 1000, 10000, 
# 377 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 377 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 377 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 377 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 377 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 377 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 377 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           1
# 377 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 388 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ms_to_ticks_ceil32(uint32_t t)
{

 return z_tmcvt(t, 1000, 10000, 
# 391 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 391 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 391 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 391 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 391 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   1
# 391 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                       , 
# 391 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                         0
# 391 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 402 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ms_to_ticks_ceil64(uint64_t t)
{

 return z_tmcvt(t, 1000, 10000, 
# 405 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 405 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 405 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 405 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 405 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    1
# 405 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 405 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 405 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 416 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_us_to_cyc_floor32(uint32_t t)
{

 return z_tmcvt(t, 1000000, sys_clock_hw_cycles_per_sec(), (!0), 
# 419 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 419 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 419 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 419 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 419 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 419 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 430 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_us_to_cyc_floor64(uint64_t t)
{

 return z_tmcvt(t, 1000000, sys_clock_hw_cycles_per_sec(), (!0), 
# 433 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 433 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 433 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 433 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 433 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           0
# 433 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                );
}
# 444 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_us_to_cyc_near32(uint32_t t)
{

 return z_tmcvt(t, 1000000, sys_clock_hw_cycles_per_sec(), (!0), 
# 447 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 447 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 447 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 447 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 447 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          1
# 447 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 458 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_us_to_cyc_near64(uint64_t t)
{

 return z_tmcvt(t, 1000000, sys_clock_hw_cycles_per_sec(), (!0), 
# 461 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 461 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 461 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 461 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 461 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           1
# 461 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 472 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_us_to_cyc_ceil32(uint32_t t)
{

 return z_tmcvt(t, 1000000, sys_clock_hw_cycles_per_sec(), (!0), 
# 475 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 475 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 475 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   1
# 475 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                       , 
# 475 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                         0
# 475 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 486 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_us_to_cyc_ceil64(uint64_t t)
{

 return z_tmcvt(t, 1000000, sys_clock_hw_cycles_per_sec(), (!0), 
# 489 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 489 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 489 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    1
# 489 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 489 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 489 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 500 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_us_to_ticks_floor32(uint32_t t)
{

 return z_tmcvt(t, 1000000, 10000, 
# 503 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 503 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 503 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 503 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 503 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 503 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 503 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 503 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 514 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_us_to_ticks_floor64(uint64_t t)
{

 return z_tmcvt(t, 1000000, 10000, 
# 517 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 517 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 517 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 517 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 517 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 517 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 517 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           0
# 517 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                );
}
# 528 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_us_to_ticks_near32(uint32_t t)
{

 return z_tmcvt(t, 1000000, 10000, 
# 531 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 531 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 531 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 531 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 531 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 531 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 531 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          1
# 531 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 542 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_us_to_ticks_near64(uint64_t t)
{

 return z_tmcvt(t, 1000000, 10000, 
# 545 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 545 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 545 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 545 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 545 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 545 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 545 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           1
# 545 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 556 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_us_to_ticks_ceil32(uint32_t t)
{

 return z_tmcvt(t, 1000000, 10000, 
# 559 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 559 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 559 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 559 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 559 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   1
# 559 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                       , 
# 559 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                         0
# 559 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 570 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_us_to_ticks_ceil64(uint64_t t)
{

 return z_tmcvt(t, 1000000, 10000, 
# 573 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 573 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 573 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 573 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 573 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    1
# 573 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 573 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 573 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 584 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ns_to_cyc_floor32(uint32_t t)
{

 return z_tmcvt(t, 1000000000, sys_clock_hw_cycles_per_sec(), (!0), 
# 587 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 587 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 587 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 587 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 587 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 587 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 598 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ns_to_cyc_floor64(uint64_t t)
{

 return z_tmcvt(t, 1000000000, sys_clock_hw_cycles_per_sec(), (!0), 
# 601 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 601 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 601 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 601 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 601 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           0
# 601 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                );
}
# 612 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ns_to_cyc_near32(uint32_t t)
{

 return z_tmcvt(t, 1000000000, sys_clock_hw_cycles_per_sec(), (!0), 
# 615 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 615 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 615 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 615 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 615 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          1
# 615 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 626 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ns_to_cyc_near64(uint64_t t)
{

 return z_tmcvt(t, 1000000000, sys_clock_hw_cycles_per_sec(), (!0), 
# 629 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 629 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 629 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 629 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 629 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           1
# 629 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 640 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ns_to_cyc_ceil32(uint32_t t)
{

 return z_tmcvt(t, 1000000000, sys_clock_hw_cycles_per_sec(), (!0), 
# 643 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 643 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 643 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   1
# 643 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                       , 
# 643 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                         0
# 643 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 654 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ns_to_cyc_ceil64(uint64_t t)
{

 return z_tmcvt(t, 1000000000, sys_clock_hw_cycles_per_sec(), (!0), 
# 657 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 657 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 657 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    1
# 657 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 657 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 657 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 668 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ns_to_ticks_floor32(uint32_t t)
{

 return z_tmcvt(t, 1000000000, 10000, 
# 671 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 671 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 671 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 671 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 671 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 671 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 671 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 671 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 682 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ns_to_ticks_floor64(uint64_t t)
{

 return z_tmcvt(t, 1000000000, 10000, 
# 685 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 685 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 685 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 685 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 685 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 685 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 685 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           0
# 685 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                );
}
# 696 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ns_to_ticks_near32(uint32_t t)
{

 return z_tmcvt(t, 1000000000, 10000, 
# 699 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 699 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 699 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 699 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 699 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 699 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 699 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          1
# 699 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 710 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ns_to_ticks_near64(uint64_t t)
{

 return z_tmcvt(t, 1000000000, 10000, 
# 713 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 713 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 713 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 713 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 713 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 713 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 713 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           1
# 713 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 724 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ns_to_ticks_ceil32(uint32_t t)
{

 return z_tmcvt(t, 1000000000, 10000, 
# 727 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 727 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 727 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 727 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 727 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   1
# 727 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                       , 
# 727 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                         0
# 727 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 738 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ns_to_ticks_ceil64(uint64_t t)
{

 return z_tmcvt(t, 1000000000, 10000, 
# 741 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 741 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 741 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 741 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 741 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    1
# 741 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 741 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 741 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 752 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_cyc_to_ms_floor32(uint32_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 1000, (!0), 
# 755 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 755 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 755 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 755 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 755 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 755 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 766 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_cyc_to_ms_floor64(uint64_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 1000, (!0), 
# 769 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 769 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 769 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 769 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 769 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           0
# 769 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                );
}
# 780 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_cyc_to_ms_near32(uint32_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 1000, (!0), 
# 783 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 783 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 783 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 783 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 783 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          1
# 783 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 794 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_cyc_to_ms_near64(uint64_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 1000, (!0), 
# 797 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 797 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 797 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 797 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 797 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           1
# 797 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 808 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_cyc_to_ms_ceil32(uint32_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 1000, (!0), 
# 811 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 811 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 811 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   1
# 811 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                       , 
# 811 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                         0
# 811 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 822 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_cyc_to_ms_ceil64(uint64_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 1000, (!0), 
# 825 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 825 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 825 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    1
# 825 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 825 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 825 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 836 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_cyc_to_us_floor32(uint32_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 1000000, (!0), 
# 839 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 839 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 839 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 839 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 839 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 839 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 850 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_cyc_to_us_floor64(uint64_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 1000000, (!0), 
# 853 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 853 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 853 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 853 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 853 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           0
# 853 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                );
}
# 864 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_cyc_to_us_near32(uint32_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 1000000, (!0), 
# 867 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 867 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 867 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 867 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 867 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          1
# 867 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 878 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_cyc_to_us_near64(uint64_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 1000000, (!0), 
# 881 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 881 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 881 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 881 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 881 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           1
# 881 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 892 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_cyc_to_us_ceil32(uint32_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 1000000, (!0), 
# 895 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 895 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 895 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   1
# 895 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                       , 
# 895 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                         0
# 895 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 906 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_cyc_to_us_ceil64(uint64_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 1000000, (!0), 
# 909 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 909 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 909 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    1
# 909 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 909 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 909 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 920 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_cyc_to_ns_floor32(uint32_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 1000000000, (!0), 
# 923 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 923 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 923 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 923 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 923 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 923 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 934 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_cyc_to_ns_floor64(uint64_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 1000000000, (!0), 
# 937 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 937 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 937 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 937 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 937 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           0
# 937 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                );
}
# 948 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_cyc_to_ns_near32(uint32_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 1000000000, (!0), 
# 951 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 951 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 951 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 951 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 951 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          1
# 951 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 962 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_cyc_to_ns_near64(uint64_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 1000000000, (!0), 
# 965 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 965 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 965 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 965 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 965 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           1
# 965 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 976 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_cyc_to_ns_ceil32(uint32_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 1000000000, (!0), 
# 979 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 979 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 979 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   1
# 979 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                       , 
# 979 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                         0
# 979 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 990 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_cyc_to_ns_ceil64(uint64_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 1000000000, (!0), 
# 993 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 993 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 993 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    1
# 993 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 993 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 993 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 1004 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_cyc_to_ticks_floor32(uint32_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 10000, (!0), 
# 1007 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                1
# 1007 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                    , 
# 1007 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                      0
# 1007 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                           , 
# 1007 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                             0
# 1007 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                  );
}
# 1018 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_cyc_to_ticks_floor64(uint64_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 10000, (!0), 
# 1021 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                0
# 1021 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                     , 
# 1021 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                       0
# 1021 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                            , 
# 1021 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                              0
# 1021 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                   );
}
# 1032 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_cyc_to_ticks_near32(uint32_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 10000, (!0), 
# 1035 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                1
# 1035 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                    , 
# 1035 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                      0
# 1035 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                           , 
# 1035 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                             1
# 1035 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                 );
}
# 1046 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_cyc_to_ticks_near64(uint64_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 10000, (!0), 
# 1049 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                0
# 1049 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                     , 
# 1049 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                       0
# 1049 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                            , 
# 1049 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                              1
# 1049 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                  );
}
# 1060 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_cyc_to_ticks_ceil32(uint32_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 10000, (!0), 
# 1063 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                1
# 1063 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                    , 
# 1063 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                      1
# 1063 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                          , 
# 1063 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                            0
# 1063 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                 );
}
# 1074 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_cyc_to_ticks_ceil64(uint64_t t)
{

 return z_tmcvt(t, sys_clock_hw_cycles_per_sec(), 10000, (!0), 
# 1077 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                0
# 1077 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                     , 
# 1077 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                       1
# 1077 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                           , 
# 1077 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                             0
# 1077 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                  );
}
# 1088 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ticks_to_ms_floor32(uint32_t t)
{

 return z_tmcvt(t, 10000, 1000, 
# 1091 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 1091 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 1091 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 1091 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 1091 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 1091 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 1091 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 1091 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 1102 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ticks_to_ms_floor64(uint64_t t)
{

 return z_tmcvt(t, 10000, 1000, 
# 1105 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 1105 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 1105 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 1105 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 1105 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 1105 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 1105 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           0
# 1105 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                );
}
# 1116 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ticks_to_ms_near32(uint32_t t)
{

 return z_tmcvt(t, 10000, 1000, 
# 1119 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 1119 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 1119 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 1119 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 1119 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 1119 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 1119 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          1
# 1119 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 1130 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ticks_to_ms_near64(uint64_t t)
{

 return z_tmcvt(t, 10000, 1000, 
# 1133 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 1133 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 1133 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 1133 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 1133 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 1133 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 1133 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           1
# 1133 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 1144 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ticks_to_ms_ceil32(uint32_t t)
{

 return z_tmcvt(t, 10000, 1000, 
# 1147 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 1147 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 1147 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 1147 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 1147 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   1
# 1147 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                       , 
# 1147 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                         0
# 1147 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 1158 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ticks_to_ms_ceil64(uint64_t t)
{

 return z_tmcvt(t, 10000, 1000, 
# 1161 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 1161 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 1161 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 1161 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 1161 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    1
# 1161 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 1161 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 1161 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 1172 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ticks_to_us_floor32(uint32_t t)
{

 return z_tmcvt(t, 10000, 1000000, 
# 1175 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 1175 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 1175 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 1175 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 1175 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 1175 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 1175 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 1175 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 1186 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ticks_to_us_floor64(uint64_t t)
{

 return z_tmcvt(t, 10000, 1000000, 
# 1189 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 1189 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 1189 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 1189 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 1189 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 1189 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 1189 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           0
# 1189 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                );
}
# 1200 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ticks_to_us_near32(uint32_t t)
{

 return z_tmcvt(t, 10000, 1000000, 
# 1203 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 1203 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 1203 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 1203 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 1203 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 1203 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 1203 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          1
# 1203 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 1214 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ticks_to_us_near64(uint64_t t)
{

 return z_tmcvt(t, 10000, 1000000, 
# 1217 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 1217 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 1217 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 1217 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 1217 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 1217 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 1217 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           1
# 1217 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 1228 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ticks_to_us_ceil32(uint32_t t)
{

 return z_tmcvt(t, 10000, 1000000, 
# 1231 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 1231 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 1231 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 1231 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 1231 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   1
# 1231 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                       , 
# 1231 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                         0
# 1231 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 1242 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ticks_to_us_ceil64(uint64_t t)
{

 return z_tmcvt(t, 10000, 1000000, 
# 1245 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 1245 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 1245 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 1245 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 1245 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    1
# 1245 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 1245 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 1245 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 1256 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ticks_to_ns_floor32(uint32_t t)
{

 return z_tmcvt(t, 10000, 1000000000, 
# 1259 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 1259 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 1259 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 1259 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 1259 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 1259 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 1259 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 1259 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 1270 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ticks_to_ns_floor64(uint64_t t)
{

 return z_tmcvt(t, 10000, 1000000000, 
# 1273 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 1273 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 1273 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 1273 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 1273 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 1273 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 1273 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           0
# 1273 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                );
}
# 1284 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ticks_to_ns_near32(uint32_t t)
{

 return z_tmcvt(t, 10000, 1000000000, 
# 1287 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 1287 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 1287 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 1287 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 1287 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   0
# 1287 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 1287 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          1
# 1287 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 1298 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ticks_to_ns_near64(uint64_t t)
{

 return z_tmcvt(t, 10000, 1000000000, 
# 1301 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 1301 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 1301 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 1301 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 1301 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    0
# 1301 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                         , 
# 1301 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                           1
# 1301 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 1312 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ticks_to_ns_ceil32(uint32_t t)
{

 return z_tmcvt(t, 10000, 1000000000, 
# 1315 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 1315 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 1315 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             1
# 1315 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                 , 
# 1315 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                   1
# 1315 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                       , 
# 1315 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                         0
# 1315 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                              );
}
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ticks_to_ns_ceil64(uint64_t t)
{

 return z_tmcvt(t, 10000, 1000000000, 
# 1329 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                       1
# 1329 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                           , 
# 1329 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                             0
# 1329 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                  , 
# 1329 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                    1
# 1329 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                        , 
# 1329 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                          0
# 1329 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                               );
}
# 1340 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ticks_to_cyc_floor32(uint32_t t)
{

 return z_tmcvt(t, 10000, sys_clock_hw_cycles_per_sec(), (!0), 
# 1343 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                1
# 1343 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                    , 
# 1343 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                      0
# 1343 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                           , 
# 1343 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                             0
# 1343 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                  );
}
# 1354 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ticks_to_cyc_floor64(uint64_t t)
{

 return z_tmcvt(t, 10000, sys_clock_hw_cycles_per_sec(), (!0), 
# 1357 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                0
# 1357 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                     , 
# 1357 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                       0
# 1357 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                            , 
# 1357 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                              0
# 1357 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                   );
}
# 1368 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ticks_to_cyc_near32(uint32_t t)
{

 return z_tmcvt(t, 10000, sys_clock_hw_cycles_per_sec(), (!0), 
# 1371 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                1
# 1371 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                    , 
# 1371 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                      0
# 1371 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                           , 
# 1371 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                             1
# 1371 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                 );
}
# 1382 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ticks_to_cyc_near64(uint64_t t)
{

 return z_tmcvt(t, 10000, sys_clock_hw_cycles_per_sec(), (!0), 
# 1385 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                0
# 1385 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                     , 
# 1385 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                       0
# 1385 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                            , 
# 1385 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                              1
# 1385 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                  );
}
# 1396 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint32_t k_ticks_to_cyc_ceil32(uint32_t t)
{

 return z_tmcvt(t, 10000, sys_clock_hw_cycles_per_sec(), (!0), 
# 1399 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                1
# 1399 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                    , 
# 1399 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                      1
# 1399 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                          , 
# 1399 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                            0
# 1399 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                 );
}
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
static inline uint64_t k_ticks_to_cyc_ceil64(uint64_t t)
{

 return z_tmcvt(t, 10000, sys_clock_hw_cycles_per_sec(), (!0), 
# 1413 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                0
# 1413 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                     , 
# 1413 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                       1
# 1413 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                           , 
# 1413 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h" 3 4
                                                             0
# 1413 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/time_units.h"
                                                                  );
}
# 26 "/home/sebin/thesis/zephyrproject/zephyr/include/sys_clock.h" 2
# 46 "/home/sebin/thesis/zephyrproject/zephyr/include/sys_clock.h"
typedef int64_t k_ticks_t;
# 65 "/home/sebin/thesis/zephyrproject/zephyr/include/sys_clock.h"
typedef struct {
 k_ticks_t ticks;
} k_timeout_t;
# 115 "/home/sebin/thesis/zephyrproject/zephyr/include/sys_clock.h"
extern void z_enable_sys_clock(void);
# 174 "/home/sebin/thesis/zephyrproject/zephyr/include/sys_clock.h"
uint32_t sys_clock_tick_get_32(void);
# 183 "/home/sebin/thesis/zephyrproject/zephyr/include/sys_clock.h"
int64_t sys_clock_tick_get(void);






uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout);
# 36 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_includes.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/spinlock.h" 1
# 31 "/home/sebin/thesis/zephyrproject/zephyr/include/spinlock.h"
struct z_spinlock_key {
 int key;
};
# 42 "/home/sebin/thesis/zephyrproject/zephyr/include/spinlock.h"
struct k_spinlock {
# 69 "/home/sebin/thesis/zephyrproject/zephyr/include/spinlock.h"
 char dummy;

};
# 100 "/home/sebin/thesis/zephyrproject/zephyr/include/spinlock.h"
typedef struct z_spinlock_key k_spinlock_key_t;
# 130 "/home/sebin/thesis/zephyrproject/zephyr/include/spinlock.h"
static inline __attribute__((always_inline)) k_spinlock_key_t k_spin_lock(struct k_spinlock *l)
{
 (void)(l);
 k_spinlock_key_t k;





 k.key = arch_irq_lock();
# 156 "/home/sebin/thesis/zephyrproject/zephyr/include/spinlock.h"
 return k;
}
# 180 "/home/sebin/thesis/zephyrproject/zephyr/include/spinlock.h"
static inline __attribute__((always_inline)) void k_spin_unlock(struct k_spinlock *l,
     k_spinlock_key_t key)
{
 (void)(l);
# 198 "/home/sebin/thesis/zephyrproject/zephyr/include/spinlock.h"
 arch_irq_unlock(key.key);
}




static inline __attribute__((always_inline)) void k_spin_release(struct k_spinlock *l)
{
 (void)(l);






}
# 37 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_includes.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/fatal.h" 1
# 27 "/home/sebin/thesis/zephyrproject/zephyr/include/fatal.h"
enum k_fatal_error_reason {

 K_ERR_CPU_EXCEPTION,


 K_ERR_SPURIOUS_IRQ,


 K_ERR_STACK_CHK_FAIL,


 K_ERR_KERNEL_OOPS,


 K_ERR_KERNEL_PANIC




};
# 56 "/home/sebin/thesis/zephyrproject/zephyr/include/fatal.h"
__attribute__((__noreturn__)) void k_fatal_halt(unsigned int reason);
# 87 "/home/sebin/thesis/zephyrproject/zephyr/include/fatal.h"
void k_sys_fatal_error_handler(unsigned int reason, const z_arch_esf_t *esf);
# 103 "/home/sebin/thesis/zephyrproject/zephyr/include/fatal.h"
void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf);
# 38 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_includes.h" 2

# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/thread_stack.h" 1
# 47 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/thread_stack.h"
struct 
# 47 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/thread_stack.h" 3
      __attribute__((__packed__)) 
# 47 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/thread_stack.h"
               z_thread_stack_element {
 char data;
};
# 69 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/thread_stack.h"
static inline char *z_stack_ptr_align(char *ptr)
{
 return (char *)((unsigned long)(ptr) & ~((unsigned long)(8) - 1));
}
# 292 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/thread_stack.h"
static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
 return (char *)sym + ((size_t)32);
}
# 40 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_includes.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/app_memory/mem_domain.h" 1
# 12 "/home/sebin/thesis/zephyrproject/zephyr/include/app_memory/mem_domain.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 13 "/home/sebin/thesis/zephyrproject/zephyr/include/app_memory/mem_domain.h" 2


# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/thread.h" 1
# 43 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/thread.h"
struct _thread_base {


 union {
  sys_dnode_t qnode_dlist;
  struct rbnode qnode_rb;
 };




 _wait_q_t *pended_on;


 uint8_t user_options;


 uint8_t thread_state;
# 76 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/thread.h"
 union {
  struct {




   int8_t prio;
   uint8_t sched_locked;

  };
  uint16_t preempt;
 };





 uint32_t order_key;
# 113 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/thread.h"
 void *swap_data;



 struct _timeout timeout;





};

typedef struct _thread_base _thread_base_t;



struct _thread_stack_info {



 uintptr_t start;
# 142 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/thread.h"
 size_t size;





 size_t delta;
};

typedef struct _thread_stack_info _thread_stack_info_t;
# 172 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/thread.h"
typedef struct k_thread_runtime_stats {
# 205 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/thread.h"
} k_thread_runtime_stats_t;

struct z_poller {
 
# 208 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/thread.h" 3 4
_Bool 
# 208 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/thread.h"
     is_polling;
 uint8_t mode;
};





struct k_thread {

 struct _thread_base base;


 struct _callee_saved callee_saved;


 void *init_data;


 _wait_q_t join_queue;


 struct z_poller poller;
# 250 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/thread.h"
 char name[32];
# 265 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/thread.h"
 int errno_var;





 struct _thread_stack_info stack_info;
# 296 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/thread.h"
 struct k_heap *resource_pool;
# 309 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel/thread.h"
 struct _thread_arch arch;
};

typedef struct k_thread _thread_t;
typedef struct k_thread *k_tid_t;
# 16 "/home/sebin/thesis/zephyrproject/zephyr/include/app_memory/mem_domain.h" 2
# 105 "/home/sebin/thesis/zephyrproject/zephyr/include/app_memory/mem_domain.h"
struct k_mem_domain;
struct k_mem_partition;
# 129 "/home/sebin/thesis/zephyrproject/zephyr/include/app_memory/mem_domain.h"
extern int k_mem_domain_init(struct k_mem_domain *domain, uint8_t num_parts,
        struct k_mem_partition *parts[]);
# 159 "/home/sebin/thesis/zephyrproject/zephyr/include/app_memory/mem_domain.h"
extern int k_mem_domain_add_partition(struct k_mem_domain *domain,
          struct k_mem_partition *part);
# 174 "/home/sebin/thesis/zephyrproject/zephyr/include/app_memory/mem_domain.h"
extern int k_mem_domain_remove_partition(struct k_mem_domain *domain,
      struct k_mem_partition *part);
# 188 "/home/sebin/thesis/zephyrproject/zephyr/include/app_memory/mem_domain.h"
extern int k_mem_domain_add_thread(struct k_mem_domain *domain,
       k_tid_t thread);
# 41 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_includes.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/kobject.h" 1
# 10 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/kobject.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 11 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/kobject.h" 2





struct k_thread;
struct k_mutex;
struct z_futex_data;
# 27 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/kobject.h"
enum k_objects {
 K_OBJ_ANY,







# 1 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/kobj-types-enum.h" 1

K_OBJ_MEM_SLAB,
K_OBJ_MSGQ,
K_OBJ_MUTEX,
K_OBJ_PIPE,
K_OBJ_QUEUE,
K_OBJ_POLL_SIGNAL,
K_OBJ_SEM,
K_OBJ_STACK,
K_OBJ_THREAD,
K_OBJ_TIMER,
K_OBJ_THREAD_STACK_ELEMENT,
K_OBJ_NET_SOCKET,
K_OBJ_NET_IF,
K_OBJ_SYS_MUTEX,
K_OBJ_FUTEX,
K_OBJ_CONDVAR,




K_OBJ_DRIVER_CRYPTO,
K_OBJ_DRIVER_ADC,
K_OBJ_DRIVER_BBRAM,
K_OBJ_DRIVER_CAN,
K_OBJ_DRIVER_COUNTER,
K_OBJ_DRIVER_DAC,
K_OBJ_DRIVER_DMA,
K_OBJ_DRIVER_EC_HOST_CMD_PERIPH_API,
K_OBJ_DRIVER_EDAC,
K_OBJ_DRIVER_EEPROM,
K_OBJ_DRIVER_ENTROPY,
K_OBJ_DRIVER_ESPI,
K_OBJ_DRIVER_ESPI_SAF,
K_OBJ_DRIVER_FLASH,
K_OBJ_DRIVER_FPGA,
K_OBJ_DRIVER_GPIO,
K_OBJ_DRIVER_I2C,
K_OBJ_DRIVER_I2S,
K_OBJ_DRIVER_IPM,
K_OBJ_DRIVER_KSCAN,
K_OBJ_DRIVER_LED,
K_OBJ_DRIVER_MBOX,
K_OBJ_DRIVER_MDIO,
K_OBJ_DRIVER_PINMUX,
K_OBJ_DRIVER_PS2,
K_OBJ_DRIVER_PTP_CLOCK,
K_OBJ_DRIVER_PWM,
K_OBJ_DRIVER_REGULATOR,
K_OBJ_DRIVER_SENSOR,
K_OBJ_DRIVER_SPI,
K_OBJ_DRIVER_SYSCON,
K_OBJ_DRIVER_UART,
K_OBJ_DRIVER_WDT,
K_OBJ_DRIVER_UART_MUX,
K_OBJ_DRIVER_ITS,
K_OBJ_DRIVER_PCIE_CTRL,
K_OBJ_DRIVER_IVSHMEM,
K_OBJ_DRIVER_ETHPHY,
# 37 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/kobject.h" 2



 K_OBJ_LAST
};
# 200 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/kobject.h"
static inline void z_object_init(const void *obj)
{
 (void)(obj);
}




static inline void z_impl_k_object_access_grant(const void *object,
      struct k_thread *thread)
{
 (void)(object);
 (void)(thread);
}




static inline void k_object_access_revoke(const void *object,
       struct k_thread *thread)
{
 (void)(object);
 (void)(thread);
}




static inline void z_impl_k_object_release(const void *object)
{
 (void)(object);
}

static inline void k_object_access_all_grant(const void *object)
{
 (void)(object);
}
# 316 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/kobject.h"
static inline void *z_impl_k_object_alloc(enum k_objects otype)
{
 (void)(otype);

 return 
# 320 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/kobject.h" 3 4
       ((void *)0)
# 320 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/kobject.h"
           ;
}

static inline struct z_object *z_dynamic_object_aligned_create(size_t align,
              size_t size)
{
 (void)(align);
 (void)(size);

 return 
# 329 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/kobject.h" 3 4
       ((void *)0)
# 329 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/kobject.h"
           ;
}

static inline struct z_object *z_dynamic_object_create(size_t size)
{
 (void)(size);

 return 
# 336 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/kobject.h" 3 4
       ((void *)0)
# 336 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/kobject.h"
           ;
}






static inline void k_object_free(void *obj)
{
 (void)(obj);
}





# 1 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kobject.h" 1
# 18 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kobject.h"
#pragma GCC diagnostic push



#pragma GCC diagnostic ignored "-Wstrict-aliasing"

#pragma GCC diagnostic ignored "-Warray-bounds"







extern void z_impl_k_object_access_grant(const void * object, struct k_thread * thread);


static inline void k_object_access_grant(const void * object, struct k_thread * thread)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 44 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kobject.h" 3 4
0
# 44 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kobject.h"
);
 z_impl_k_object_access_grant(object, thread);
}
# 56 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kobject.h"
extern void z_impl_k_object_release(const void * object);


static inline void k_object_release(const void * object)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 68 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kobject.h" 3 4
0
# 68 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kobject.h"
);
 z_impl_k_object_release(object);
}
# 80 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kobject.h"
extern void * z_impl_k_object_alloc(enum k_objects otype);


static inline void * k_object_alloc(enum k_objects otype)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 91 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kobject.h" 3 4
0
# 91 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kobject.h"
);
 return z_impl_k_object_alloc(otype);
}
# 108 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kobject.h"
#pragma GCC diagnostic pop
# 354 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/kobject.h" 2
# 42 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel_includes.h" 2
# 18 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 2

# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include-fixed/limits.h" 1 3 4
# 20 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 2


# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/tracing/tracing_macros.h" 1
# 23 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 2
# 60 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct k_thread;
struct k_mutex;
struct k_sem;
struct k_msgq;
struct k_mbox;
struct k_pipe;
struct k_queue;
struct k_fifo;
struct k_lifo;
struct k_stack;
struct k_mem_slab;
struct k_mem_pool;
struct k_timer;
struct k_poll_event;
struct k_poll_signal;
struct k_mem_domain;
struct k_mem_partition;
struct k_futex;
struct k_event;

enum execution_context_types {
 K_ISR = 0,
 K_COOP_THREAD,
 K_PREEMPT_THREAD,
};


struct k_work_poll;
typedef int (*_poller_cb_t)(struct k_poll_event *event, uint32_t state);






typedef void (*k_thread_user_cb_t)(const struct k_thread *thread,
       void *user_data);
# 113 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void k_thread_foreach(k_thread_user_cb_t user_cb, void *user_data);
# 142 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void k_thread_foreach_unlocked(
 k_thread_user_cb_t user_cb, void *user_data);
# 276 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline k_tid_t k_thread_create(struct k_thread *new_thread,
      k_thread_stack_t *stack,
      size_t stack_size,
      k_thread_entry_t entry,
      void *p1, void *p2, void *p3,
      int prio, uint32_t options, k_timeout_t delay);
# 304 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern __attribute__((__noreturn__)) void k_thread_user_mode_enter(k_thread_entry_t entry,
         void *p1, void *p2,
         void *p3);
# 338 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_thread_heap_assign(struct k_thread *thread,
     struct k_heap *heap)
{
 thread->resource_pool = heap;
}
# 365 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_thread_stack_space_get(const struct k_thread *thread,
           size_t *unused_ptr);
# 404 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_thread_join(struct k_thread *thread, k_timeout_t timeout);
# 419 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int32_t k_sleep(k_timeout_t timeout);
# 431 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int32_t k_msleep(int32_t ms)
{
 return k_sleep(((k_timeout_t) { .ticks = ((k_ticks_t)k_ms_to_ticks_ceil64((((ms) > (0)) ? (ms) : (0)))) }));
}
# 451 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int32_t k_usleep(int32_t us);
# 465 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_busy_wait(uint32_t usec_to_wait);
# 474 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_yield(void);
# 485 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_wakeup(k_tid_t thread);
# 494 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
__attribute__((__const__))
static inline k_tid_t z_current_get(void);
# 508 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
__attribute__((__const__))
static inline k_tid_t k_current_get(void)
{



 return z_current_get();

}
# 541 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_thread_abort(k_tid_t thread);
# 553 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_thread_start(k_tid_t thread);

extern k_ticks_t z_timeout_expires(const struct _timeout *timeout);
extern k_ticks_t z_timeout_remaining(const struct _timeout *timeout);
# 567 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline k_ticks_t k_thread_timeout_expires_ticks(const struct k_thread *t);

static inline k_ticks_t z_impl_k_thread_timeout_expires_ticks(
      const struct k_thread *t)
{
 return z_timeout_expires(&t->base.timeout);
}
# 582 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline k_ticks_t k_thread_timeout_remaining_ticks(const struct k_thread *t);

static inline k_ticks_t z_impl_k_thread_timeout_remaining_ticks(
      const struct k_thread *t)
{
 return z_timeout_remaining(&t->base.timeout);
}
# 599 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct _static_thread_data {
 struct k_thread *init_thread;
 k_thread_stack_t *init_stack;
 unsigned int init_stack_size;
 k_thread_entry_t init_entry;
 void *init_p1;
 void *init_p2;
 void *init_p3;
 int init_prio;
 uint32_t init_options;
 int32_t init_delay;
 void (*init_abort)(void);
 const char *init_name;
};
# 686 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_thread_priority_get(k_tid_t thread);
# 713 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_thread_priority_set(k_tid_t thread, int prio);
# 825 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_thread_suspend(k_tid_t thread);
# 837 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_thread_resume(k_tid_t thread);
# 865 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void k_sched_time_slice_set(int32_t slice, int prio);
# 885 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern 
# 885 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
      _Bool 
# 885 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
           k_is_in_isr(void);
# 903 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_is_preempt_thread(void);
# 916 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline 
# 916 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
             _Bool 
# 916 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
                  k_is_pre_kernel(void)
{
 extern 
# 918 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
       _Bool 
# 918 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
            z_sys_post_kernel;

 return !z_sys_post_kernel;
}
# 948 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void k_sched_lock(void);
# 957 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void k_sched_unlock(void);
# 971 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_thread_custom_data_set(void *value);
# 980 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void *k_thread_custom_data_get(void);
# 995 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_thread_name_set(k_tid_t thread, const char *str);
# 1005 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
const char *k_thread_name_get(k_tid_t thread);
# 1018 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_thread_name_copy(k_tid_t thread, char *buf,
     size_t size);
# 1029 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
const char *k_thread_state_str(k_tid_t thread_id);
# 1241 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct k_timer {





 struct _timeout timeout;


 _wait_q_t wait_q;


 void (*expiry_fn)(struct k_timer *timer);


 void (*stop_fn)(struct k_timer *timer);


 k_timeout_t period;


 uint32_t status;


 void *user_data;


};
# 1304 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
typedef void (*k_timer_expiry_t)(struct k_timer *timer);
# 1320 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
typedef void (*k_timer_stop_t)(struct k_timer *timer);
# 1346 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void k_timer_init(struct k_timer *timer,
    k_timer_expiry_t expiry_fn,
    k_timer_stop_t stop_fn);
# 1364 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_timer_start(struct k_timer *timer,
        k_timeout_t duration, k_timeout_t period);
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_timer_stop(struct k_timer *timer);
# 1397 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline uint32_t k_timer_status_get(struct k_timer *timer);
# 1416 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline uint32_t k_timer_status_sync(struct k_timer *timer);
# 1430 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline k_ticks_t k_timer_expires_ticks(const struct k_timer *timer);

static inline k_ticks_t z_impl_k_timer_expires_ticks(
           const struct k_timer *timer)
{
 return z_timeout_expires(&timer->timeout);
}
# 1445 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline k_ticks_t k_timer_remaining_ticks(const struct k_timer *timer);

static inline k_ticks_t z_impl_k_timer_remaining_ticks(
           const struct k_timer *timer)
{
 return z_timeout_remaining(&timer->timeout);
}
# 1463 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline uint32_t k_timer_remaining_get(struct k_timer *timer)
{
 return k_ticks_to_ms_floor32(k_timer_remaining_ticks(timer));
}
# 1482 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_timer_user_data_set(struct k_timer *timer, void *user_data);




static inline void z_impl_k_timer_user_data_set(struct k_timer *timer,
            void *user_data)
{
 timer->user_data = user_data;
}
# 1500 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void *k_timer_user_data_get(const struct k_timer *timer);

static inline void *z_impl_k_timer_user_data_get(const struct k_timer *timer)
{
 return timer->user_data;
}
# 1524 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int64_t k_uptime_ticks(void);
# 1539 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int64_t k_uptime_get(void)
{
 return k_ticks_to_ms_floor64(k_uptime_ticks());
}
# 1563 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline uint32_t k_uptime_get_32(void)
{
 return (uint32_t)k_uptime_get();
}
# 1579 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int64_t k_uptime_delta(int64_t *reftime)
{
 int64_t uptime, delta;

 uptime = k_uptime_get();
 delta = uptime - *reftime;
 *reftime = uptime;

 return delta;
}
# 1598 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline uint32_t k_cycle_get_32(void)
{
 return arch_k_cycle_get_32();
}
# 1613 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline uint64_t k_cycle_get_64(void)
{
 if (!0) {
  { }
                                                  ;
  return 0;
 }

 return arch_k_cycle_get_64();
}
# 1632 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct k_queue {
 sys_sflist_t data_q;
 struct k_spinlock lock;
 _wait_q_t wait_q;

 sys_dlist_t poll_events;


};
# 1650 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void *z_queue_node_peek(sys_sfnode_t *node, 
# 1650 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
                                                  _Bool 
# 1650 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
                                                       needs_free);
# 1669 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_queue_init(struct k_queue *queue);
# 1684 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_queue_cancel_wait(struct k_queue *queue);
# 1698 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void k_queue_append(struct k_queue *queue, void *data);
# 1716 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int32_t k_queue_alloc_append(struct k_queue *queue, void *data);
# 1730 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void k_queue_prepend(struct k_queue *queue, void *data);
# 1748 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int32_t k_queue_alloc_prepend(struct k_queue *queue, void *data);
# 1763 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void k_queue_insert(struct k_queue *queue, void *prev, void *data);
# 1783 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern int k_queue_append_list(struct k_queue *queue, void *head, void *tail);
# 1800 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern int k_queue_merge_slist(struct k_queue *queue, sys_slist_t *list);
# 1820 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void *k_queue_get(struct k_queue *queue, k_timeout_t timeout);
# 1838 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"

# 1838 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
_Bool 
# 1838 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
    k_queue_remove(struct k_queue *queue, void *data);
# 1854 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"

# 1854 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
_Bool 
# 1854 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
    k_queue_unique_append(struct k_queue *queue, void *data);
# 1869 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_queue_is_empty(struct k_queue *queue);

static inline int z_impl_k_queue_is_empty(struct k_queue *queue)
{
 return (int)sys_sflist_is_empty(&queue->data_q);
}
# 1885 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void *k_queue_peek_head(struct k_queue *queue);
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void *k_queue_peek_tail(struct k_queue *queue);
# 2002 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct k_event {
 _wait_q_t wait_q;
 uint32_t events;
 struct k_spinlock lock;
};
# 2021 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_event_init(struct k_event *event);
# 2036 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_event_post(struct k_event *event, uint32_t events);
# 2051 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_event_set(struct k_event *event, uint32_t events);
# 2074 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline uint32_t k_event_wait(struct k_event *event, uint32_t events,
    
# 2075 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
   _Bool 
# 2075 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
        reset, k_timeout_t timeout);
# 2098 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline uint32_t k_event_wait_all(struct k_event *event, uint32_t events,
        
# 2099 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
       _Bool 
# 2099 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
            reset, k_timeout_t timeout);
# 2116 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct k_fifo {
 struct k_queue _queue;
};
# 2350 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct k_lifo {
 struct k_queue _queue;
};
# 2475 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
typedef uintptr_t stack_data_t;

struct k_stack {
 _wait_q_t wait_q;
 struct k_spinlock lock;
 stack_data_t *base, *next, *top;

 uint8_t flags;


};
# 2514 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
void k_stack_init(struct k_stack *stack,
    stack_data_t *buffer, uint32_t num_entries);
# 2532 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int32_t k_stack_alloc_init(struct k_stack *stack,
       uint32_t num_entries);
# 2546 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
int k_stack_cleanup(struct k_stack *stack);
# 2561 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_stack_push(struct k_stack *stack, stack_data_t data);
# 2583 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_stack_pop(struct k_stack *stack, stack_data_t *data,
     k_timeout_t timeout);
# 2609 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct k_work;
struct k_work_q;
struct k_work_queue_config;
struct k_delayed_work;
extern struct k_work_q k_sys_work_q;
# 2629 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct k_mutex {

 _wait_q_t wait_q;

 struct k_thread *owner;


 uint32_t lock_count;


 int owner_orig_prio;


};
# 2684 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_mutex_init(struct k_mutex *mutex);
# 2708 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout);
# 2730 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_mutex_unlock(struct k_mutex *mutex);






struct k_condvar {
 _wait_q_t wait_q;
};
# 2758 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_condvar_init(struct k_condvar *condvar);







static inline int k_condvar_signal(struct k_condvar *condvar);
# 2775 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_condvar_broadcast(struct k_condvar *condvar);
# 2794 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_condvar_wait(struct k_condvar *condvar, struct k_mutex *mutex,
        k_timeout_t timeout);
# 2818 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct k_sem {
 _wait_q_t wait_q;
 unsigned int count;
 unsigned int limit;

 sys_dlist_t poll_events;



};
# 2872 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_sem_init(struct k_sem *sem, unsigned int initial_count,
     unsigned int limit);
# 2893 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_sem_take(struct k_sem *sem, k_timeout_t timeout);
# 2905 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_sem_give(struct k_sem *sem);
# 2916 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_sem_reset(struct k_sem *sem);
# 2927 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline unsigned int k_sem_count_get(struct k_sem *sem);




static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
 return sem->count;
}
# 2961 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct k_work_delayable;
struct k_work_sync;
# 2980 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
typedef void (*k_work_handler_t)(struct k_work *work);
# 2995 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
void k_work_init(struct k_work *work,
    k_work_handler_t handler);
# 3012 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
int k_work_busy_get(const struct k_work *work);
# 3027 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline 
# 3027 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
             _Bool 
# 3027 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
                  k_work_is_pending(const struct k_work *work);
# 3049 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
int k_work_submit_to_queue(struct k_work_q *queue,
      struct k_work *work);
# 3060 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern int k_work_submit(struct k_work *work);
# 3086 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"

# 3086 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
_Bool 
# 3086 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
    k_work_flush(struct k_work *work,
    struct k_work_sync *sync);
# 3108 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
int k_work_cancel(struct k_work *work);
# 3140 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"

# 3140 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
_Bool 
# 3140 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
    k_work_cancel_sync(struct k_work *work, struct k_work_sync *sync);
# 3151 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
void k_work_queue_init(struct k_work_q *queue);
# 3172 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
void k_work_queue_start(struct k_work_q *queue,
   k_thread_stack_t *stack, size_t stack_size,
   int prio, const struct k_work_queue_config *cfg);
# 3185 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline k_tid_t k_work_queue_thread_get(struct k_work_q *queue);
# 3210 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
int k_work_queue_drain(struct k_work_q *queue, 
# 3210 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
                                              _Bool 
# 3210 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
                                                   plug);
# 3225 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
int k_work_queue_unplug(struct k_work_q *queue);
# 3240 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
void k_work_init_delayable(struct k_work_delayable *dwork,
      k_work_handler_t handler);
# 3254 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline struct k_work_delayable *
k_work_delayable_from_work(struct k_work *work);
# 3270 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
int k_work_delayable_busy_get(const struct k_work_delayable *dwork);
# 3286 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline 
# 3286 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
             _Bool 
# 3286 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
                  k_work_delayable_is_pending(
 const struct k_work_delayable *dwork);
# 3302 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline k_ticks_t k_work_delayable_expires_get(
 const struct k_work_delayable *dwork);
# 3318 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline k_ticks_t k_work_delayable_remaining_get(
 const struct k_work_delayable *dwork);
# 3346 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
int k_work_schedule_for_queue(struct k_work_q *queue,
          struct k_work_delayable *dwork,
          k_timeout_t delay);
# 3363 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern int k_work_schedule(struct k_work_delayable *dwork,
       k_timeout_t delay);
# 3401 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
int k_work_reschedule_for_queue(struct k_work_q *queue,
     struct k_work_delayable *dwork,
     k_timeout_t delay);
# 3417 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern int k_work_reschedule(struct k_work_delayable *dwork,
         k_timeout_t delay);
# 3444 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"

# 3444 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
_Bool 
# 3444 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
    k_work_flush_delayable(struct k_work_delayable *dwork,
       struct k_work_sync *sync);
# 3467 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
int k_work_cancel_delayable(struct k_work_delayable *dwork);
# 3497 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"

# 3497 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
_Bool 
# 3497 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
    k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
      struct k_work_sync *sync);

enum {
# 3512 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
 K_WORK_RUNNING_BIT = 0,
 K_WORK_CANCELING_BIT = 1,
 K_WORK_QUEUED_BIT = 2,
 K_WORK_DELAYED_BIT = 3,

 K_WORK_MASK = (1UL << (K_WORK_DELAYED_BIT)) | (1UL << (K_WORK_QUEUED_BIT))
  | (1UL << (K_WORK_RUNNING_BIT)) | (1UL << (K_WORK_CANCELING_BIT)),


 K_WORK_DELAYABLE_BIT = 8,
 K_WORK_DELAYABLE = (1UL << (K_WORK_DELAYABLE_BIT)),


 K_WORK_QUEUE_STARTED_BIT = 0,
 K_WORK_QUEUE_STARTED = (1UL << (K_WORK_QUEUE_STARTED_BIT)),
 K_WORK_QUEUE_BUSY_BIT = 1,
 K_WORK_QUEUE_BUSY = (1UL << (K_WORK_QUEUE_BUSY_BIT)),
 K_WORK_QUEUE_DRAIN_BIT = 2,
 K_WORK_QUEUE_DRAIN = (1UL << (K_WORK_QUEUE_DRAIN_BIT)),
 K_WORK_QUEUE_PLUGGED_BIT = 3,
 K_WORK_QUEUE_PLUGGED = (1UL << (K_WORK_QUEUE_PLUGGED_BIT)),


 K_WORK_QUEUE_NO_YIELD_BIT = 8,
 K_WORK_QUEUE_NO_YIELD = (1UL << (K_WORK_QUEUE_NO_YIELD_BIT)),
# 3548 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
 K_WORK_RUNNING = (1UL << (K_WORK_RUNNING_BIT)),





 K_WORK_CANCELING = (1UL << (K_WORK_CANCELING_BIT)),






 K_WORK_QUEUED = (1UL << (K_WORK_QUEUED_BIT)),






 K_WORK_DELAYED = (1UL << (K_WORK_DELAYED_BIT)),
};


struct k_work {





 sys_snode_t node;


 k_work_handler_t handler;


 struct k_work_q *queue;







 uint32_t flags;
};






struct k_work_delayable {

 struct k_work work;


 struct _timeout timeout;


 struct k_work_q *queue;
};
# 3649 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct z_work_flusher {
 struct k_work work;
 struct k_sem sem;
};







struct z_work_canceller {
 sys_snode_t node;
 struct k_work *work;
 struct k_sem sem;
};
# 3683 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct k_work_sync {
 union {
  struct z_work_flusher flusher;
  struct z_work_canceller canceller;
 };
};







struct k_work_queue_config {




 const char *name;
# 3715 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
 
# 3715 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
_Bool 
# 3715 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
     no_yield;
};


struct k_work_q {

 struct k_thread thread;






 sys_slist_t pending;


 _wait_q_t notifyq;


 _wait_q_t drainq;


 uint32_t flags;
};



static inline 
# 3742 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
             _Bool 
# 3742 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
                  k_work_is_pending(const struct k_work *work)
{
 return k_work_busy_get(work) != 0;
}

static inline struct k_work_delayable *
k_work_delayable_from_work(struct k_work *work)
{
 return ((struct k_work_delayable *)(((char *)(work)) - 
# 3750 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
       __builtin_offsetof (
# 3750 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
       struct k_work_delayable
# 3750 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
       , 
# 3750 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
       work
# 3750 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
       )
# 3750 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
       ));
}

static inline 
# 3753 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
             _Bool 
# 3753 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
                  k_work_delayable_is_pending(
 const struct k_work_delayable *dwork)
{
 return k_work_delayable_busy_get(dwork) != 0;
}

static inline k_ticks_t k_work_delayable_expires_get(
 const struct k_work_delayable *dwork)
{
 return z_timeout_expires(&dwork->timeout);
}

static inline k_ticks_t k_work_delayable_remaining_get(
 const struct k_work_delayable *dwork)
{
 return z_timeout_remaining(&dwork->timeout);
}

static inline k_tid_t k_work_queue_thread_get(struct k_work_q *queue)
{
 return &queue->thread;
}



__attribute__((deprecated))
static inline 
# 3779 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
             _Bool 
# 3779 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
                  k_work_pending(const struct k_work *work)
{
 return k_work_is_pending(work);
}

__attribute__((deprecated))
static inline void k_work_q_start(struct k_work_q *work_q,
      k_thread_stack_t *stack,
      size_t stack_size, int prio)
{
 k_work_queue_start(work_q, stack, stack_size, prio, 
# 3789 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
                                                    ((void *)0)
# 3789 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
                                                        );
}


struct k_delayed_work {
 struct k_work_delayable work;
};





__attribute__((deprecated))
static inline void k_delayed_work_init(struct k_delayed_work *work,
           k_work_handler_t handler)
{
 k_work_init_delayable(&work->work, handler);
}

__attribute__((deprecated))
static inline int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
       struct k_delayed_work *work,
       k_timeout_t delay)
{
 int rc = k_work_reschedule_for_queue(work_q, &work->work, delay);


 return (rc >= 0) ? 0 : rc;
}

__attribute__((deprecated))
static inline int k_delayed_work_submit(struct k_delayed_work *work,
     k_timeout_t delay)
{
 int rc = k_work_reschedule(&work->work, delay);


 return (rc >= 0) ? 0 : rc;
}

__attribute__((deprecated))
static inline int k_delayed_work_cancel(struct k_delayed_work *work)
{
 
# 3832 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
_Bool 
# 3832 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
     pending = k_work_delayable_is_pending(&work->work);
 int rc = k_work_cancel_delayable(&work->work);
# 3863 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
 if (pending) {
  return (rc == 0) ? 0 : -
# 3864 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3
                         22
# 3864 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
                               ;
 }

 return -
# 3867 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3
        120
# 3867 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
                ;
}

__attribute__((deprecated))
static inline 
# 3871 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
             _Bool 
# 3871 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
                  k_delayed_work_pending(struct k_delayed_work *work)
{
 return k_work_delayable_is_pending(&work->work);
}

__attribute__((deprecated))
static inline int32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
 k_ticks_t rem = k_work_delayable_remaining_get(&work->work);


 return k_ticks_to_ms_floor32(rem);
}

__attribute__((deprecated))
static inline k_ticks_t k_delayed_work_expires_ticks(
 struct k_delayed_work *work)
{
 return k_work_delayable_expires_get(&work->work);
}

__attribute__((deprecated))
static inline k_ticks_t k_delayed_work_remaining_ticks(
 struct k_delayed_work *work)
{
 return k_work_delayable_remaining_get(&work->work);
}



struct k_work_user;
# 3917 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
typedef void (*k_work_user_handler_t)(struct k_work_user *work);





struct k_work_user_q {
 struct k_queue queue;
 struct k_thread thread;
};

enum {
 K_WORK_USER_STATE_PENDING,
};

struct k_work_user {
 void *_reserved;
 k_work_user_handler_t handler;
 atomic_t flags;
};
# 3976 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_work_user_init(struct k_work_user *work,
        k_work_user_handler_t handler)
{
 *work = (struct k_work_user){ ._reserved = 
# 3979 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
                            ((void *)0)
# 3979 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
                            , .handler = handler, .flags = 0 };
}
# 3998 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline 
# 3998 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
             _Bool 
# 3998 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
                  k_work_user_is_pending(struct k_work_user *work)
{
 return atomic_test_bit(&work->flags, K_WORK_USER_STATE_PENDING);
}
# 4021 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_work_user_submit_to_queue(struct k_work_user_q *work_q,
           struct k_work_user *work)
{
 int ret = -
# 4024 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3
           16
# 4024 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
                ;

 if (!atomic_test_and_set_bit(&work->flags,
         K_WORK_USER_STATE_PENDING)) {
  ret = k_queue_alloc_append(&work_q->queue, work);




  if (ret != 0) {
   atomic_clear_bit(&work->flags,
      K_WORK_USER_STATE_PENDING);
  }
 }

 return ret;
}
# 4061 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void k_work_user_queue_start(struct k_work_user_q *work_q,
        k_thread_stack_t *stack,
        size_t stack_size, int prio,
        const char *name);







struct k_work_poll {
 struct k_work work;
 struct k_work_q *workq;
 struct z_poller poller;
 struct k_poll_event *events;
 int num_events;
 k_work_handler_t real_handler;
 struct _timeout timeout;
 int poll_result;
};
# 4129 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void k_work_poll_init(struct k_work_poll *work,
        k_work_handler_t handler);
# 4166 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern int k_work_poll_submit_to_queue(struct k_work_q *work_q,
           struct k_work_poll *work,
           struct k_poll_event *events,
           int num_events,
           k_timeout_t timeout);
# 4203 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern int k_work_poll_submit(struct k_work_poll *work,
         struct k_poll_event *events,
         int num_events,
         k_timeout_t timeout);
# 4222 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern int k_work_poll_cancel(struct k_work_poll *work);
# 4235 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct k_msgq {

 _wait_q_t wait_q;

 struct k_spinlock lock;

 size_t msg_size;

 uint32_t max_msgs;

 char *buffer_start;

 char *buffer_end;

 char *read_ptr;

 char *write_ptr;

 uint32_t used_msgs;

 sys_dlist_t poll_events;


 uint8_t flags;


};
# 4290 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct k_msgq_attrs {

 size_t msg_size;

 uint32_t max_msgs;

 uint32_t used_msgs;
};
# 4343 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
void k_msgq_init(struct k_msgq *msgq, char *buffer, size_t msg_size,
   uint32_t max_msgs);
# 4365 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_msgq_alloc_init(struct k_msgq *msgq, size_t msg_size,
    uint32_t max_msgs);
# 4378 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
int k_msgq_cleanup(struct k_msgq *msgq);
# 4401 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout);
# 4423 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout);
# 4439 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_msgq_peek(struct k_msgq *msgq, void *data);
# 4450 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_msgq_purge(struct k_msgq *msgq);
# 4462 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline uint32_t k_msgq_num_free_get(struct k_msgq *msgq);
# 4472 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_msgq_get_attrs(struct k_msgq *msgq,
     struct k_msgq_attrs *attrs);


static inline uint32_t z_impl_k_msgq_num_free_get(struct k_msgq *msgq)
{
 return msgq->max_msgs - msgq->used_msgs;
}
# 4490 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline uint32_t k_msgq_num_used_get(struct k_msgq *msgq);

static inline uint32_t z_impl_k_msgq_num_used_get(struct k_msgq *msgq)
{
 return msgq->used_msgs;
}
# 4509 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct k_mbox_msg {

 uint32_t _mailbox;

 size_t size;

 uint32_t info;

 void *tx_data;

 void *_rx_data;

 struct k_mem_block tx_block;

 k_tid_t rx_source_thread;

 k_tid_t tx_target_thread;

 k_tid_t _syncing_thread;


 struct k_sem *_async_sem;

};




struct k_mbox {

 _wait_q_t tx_msg_queue;

 _wait_q_t rx_msg_queue;
 struct k_spinlock lock;


};
# 4580 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void k_mbox_init(struct k_mbox *mbox);
# 4601 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern int k_mbox_put(struct k_mbox *mbox, struct k_mbox_msg *tx_msg,
        k_timeout_t timeout);
# 4617 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void k_mbox_async_put(struct k_mbox *mbox, struct k_mbox_msg *tx_msg,
        struct k_sem *sem);
# 4637 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern int k_mbox_get(struct k_mbox *mbox, struct k_mbox_msg *rx_msg,
        void *buffer, k_timeout_t timeout);
# 4653 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void k_mbox_data_get(struct k_mbox_msg *rx_msg, void *buffer);
# 4664 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct k_pipe {
 unsigned char *buffer;
 size_t size;
 size_t bytes_used;
 size_t read_index;
 size_t write_index;
 struct k_spinlock lock;

 struct {
  _wait_q_t readers;
  _wait_q_t writers;
 } wait_q;

 uint8_t flags;


};
# 4736 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
void k_pipe_init(struct k_pipe *pipe, unsigned char *buffer, size_t size);
# 4749 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
int k_pipe_cleanup(struct k_pipe *pipe);
# 4766 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_pipe_alloc_init(struct k_pipe *pipe, size_t size);
# 4786 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_pipe_put(struct k_pipe *pipe, void *data,
    size_t bytes_to_write, size_t *bytes_written,
    size_t min_xfer, k_timeout_t timeout);
# 4809 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_pipe_get(struct k_pipe *pipe, void *data,
    size_t bytes_to_read, size_t *bytes_read,
    size_t min_xfer, k_timeout_t timeout);
# 4821 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline size_t k_pipe_read_avail(struct k_pipe *pipe);
# 4831 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline size_t k_pipe_write_avail(struct k_pipe *pipe);
# 4845 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_pipe_flush(struct k_pipe *pipe);
# 4860 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_pipe_buffer_flush(struct k_pipe *pipe);







struct k_mem_slab {
 _wait_q_t wait_q;
 struct k_spinlock lock;
 uint32_t num_blocks;
 size_t block_size;
 char *buffer;
 char *free_list;
 uint32_t num_used;





};
# 4980 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern int k_mem_slab_init(struct k_mem_slab *slab, void *buffer,
      size_t block_size, uint32_t num_blocks);
# 5005 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem,
       k_timeout_t timeout);
# 5017 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void k_mem_slab_free(struct k_mem_slab *slab, void **mem);
# 5029 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline uint32_t k_mem_slab_num_used_get(struct k_mem_slab *slab)
{
 return slab->num_used;
}
# 5044 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline uint32_t k_mem_slab_max_used_get(struct k_mem_slab *slab)
{



 (void)(slab);
 return 0;

}
# 5064 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline uint32_t k_mem_slab_num_free_get(struct k_mem_slab *slab)
{
 return slab->num_blocks - slab->num_used;
}
# 5078 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct k_heap {
 struct sys_heap heap;
 _wait_q_t wait_q;
 struct k_spinlock lock;
};
# 5097 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
void k_heap_init(struct k_heap *h, void *mem, size_t bytes);
# 5118 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
   k_timeout_t timeout);
# 5141 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
void *k_heap_alloc(struct k_heap *h, size_t bytes,
     k_timeout_t timeout);
# 5154 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
void k_heap_free(struct k_heap *h, void *mem);
# 5251 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void *k_aligned_alloc(size_t align, size_t size);
# 5263 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void *k_malloc(size_t size);
# 5276 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void k_free(void *ptr);
# 5289 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void *k_calloc(size_t nmemb, size_t size);
# 5302 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
enum _poll_types_bits {

 _POLL_TYPE_IGNORE,


 _POLL_TYPE_SIGNAL,


 _POLL_TYPE_SEM_AVAILABLE,


 _POLL_TYPE_DATA_AVAILABLE,


 _POLL_TYPE_MSGQ_DATA_AVAILABLE,

 _POLL_NUM_TYPES
};




enum _poll_states_bits {

 _POLL_STATE_NOT_READY,


 _POLL_STATE_SIGNALED,


 _POLL_STATE_SEM_AVAILABLE,


 _POLL_STATE_DATA_AVAILABLE,


 _POLL_STATE_CANCELLED,


 _POLL_STATE_MSGQ_DATA_AVAILABLE,

 _POLL_NUM_STATES
};
# 5376 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
enum k_poll_modes {

 K_POLL_MODE_NOTIFY_ONLY = 0,

 K_POLL_NUM_MODES
};
# 5393 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct k_poll_signal {

 sys_dlist_t poll_events;





 unsigned int signaled;


 int result;
};
# 5417 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
struct k_poll_event {

 sys_dnode_t _node;


 struct z_poller *poller;


 uint32_t tag:8;


 uint32_t type:_POLL_NUM_TYPES;


 uint32_t state:_POLL_NUM_STATES;


 uint32_t mode:1;


 uint32_t unused:(32 - (0 + 8 + _POLL_NUM_TYPES + _POLL_NUM_STATES + 1 ));


 union {
  void *obj;
  struct k_poll_signal *signal;
  struct k_sem *sem;
  struct k_fifo *fifo;
  struct k_queue *queue;
  struct k_msgq *msgq;
 };
};
# 5490 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void k_poll_event_init(struct k_poll_event *event, uint32_t type,
         int mode, void *obj);
# 5536 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_poll(struct k_poll_event *events, int num_events,
       k_timeout_t timeout);
# 5547 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_poll_signal_init(struct k_poll_signal *sig);






static inline void k_poll_signal_reset(struct k_poll_signal *sig);
# 5566 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_poll_signal_check(struct k_poll_signal *sig,
       unsigned int *signaled, int *result);
# 5593 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_poll_signal_raise(struct k_poll_signal *sig, int result);




extern void z_handle_obj_poll_events(sys_dlist_t *events, uint32_t state);
# 5620 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_cpu_idle(void)
{
 arch_cpu_idle();
}
# 5639 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_cpu_atomic_idle(unsigned int key)
{
 arch_cpu_atomic_idle(key);
}
# 5706 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void z_init_thread_base(struct _thread_base *thread_base,
         int priority, uint32_t initial_state,
         unsigned int options);





extern void z_init_static_threads(void);
# 5725 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern 
# 5725 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 3 4
      _Bool 
# 5725 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
           z_is_thread_essential(void);
# 5735 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void z_timer_expiration_handler(struct _timeout *t);
# 5745 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline void k_str_out(char *c, size_t n);
# 5768 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_float_disable(struct k_thread *thread);
# 5808 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
static inline int k_float_enable(struct k_thread *thread, unsigned int options);
# 5817 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
int k_thread_runtime_stats_get(k_tid_t thread,
          k_thread_runtime_stats_t *stats);







int k_thread_runtime_stats_all_get(k_thread_runtime_stats_t *stats);
# 5837 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern int k_thread_runtime_stats_enable(k_tid_t thread);
# 5848 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern int k_thread_runtime_stats_disable(k_tid_t thread);
# 5859 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void k_sys_runtime_stats_enable(void);
# 5870 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h"
extern void k_sys_runtime_stats_disable(void);





# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/tracing/tracing.h" 1
# 9 "/home/sebin/thesis/zephyrproject/zephyr/include/tracing/tracing.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 1
# 10 "/home/sebin/thesis/zephyrproject/zephyr/include/tracing/tracing.h" 2

# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/tracing/tracking.h" 1
# 12 "/home/sebin/thesis/zephyrproject/zephyr/include/tracing/tracing.h" 2
# 2013 "/home/sebin/thesis/zephyrproject/zephyr/include/tracing/tracing.h"
void sys_trace_isr_enter(void);




void sys_trace_isr_exit(void);




void sys_trace_isr_exit_to_scheduler(void);




void sys_trace_idle(void);
# 5877 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 2
# 1 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 1
# 18 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
#pragma GCC diagnostic push



#pragma GCC diagnostic ignored "-Wstrict-aliasing"

#pragma GCC diagnostic ignored "-Warray-bounds"







extern k_tid_t z_impl_k_thread_create(struct k_thread * new_thread, k_thread_stack_t * stack, size_t stack_size, k_thread_entry_t entry, void * p1, void * p2, void * p3, int prio, uint32_t options, k_timeout_t delay);


static inline k_tid_t k_thread_create(struct k_thread * new_thread, k_thread_stack_t * stack, size_t stack_size, k_thread_entry_t entry, void * p1, void * p2, void * p3, int prio, uint32_t options, k_timeout_t delay)
{
# 53 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 53 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 53 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
}


extern int z_impl_k_thread_stack_space_get(const struct k_thread * thread, size_t * unused_ptr);


static inline int k_thread_stack_space_get(const struct k_thread * thread, size_t * unused_ptr)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 69 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 69 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_stack_space_get(thread, unused_ptr);
}


extern int z_impl_k_thread_join(struct k_thread * thread, k_timeout_t timeout);


static inline int k_thread_join(struct k_thread * thread, k_timeout_t timeout)
{
# 87 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 87 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 87 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_join(thread, timeout);
}


extern int32_t z_impl_k_sleep(k_timeout_t timeout);


static inline int32_t k_sleep(k_timeout_t timeout)
{
# 105 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 105 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 105 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_sleep(timeout);
}


extern int32_t z_impl_k_usleep(int32_t us);


static inline int32_t k_usleep(int32_t us)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 121 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 121 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_usleep(us);
}


extern void z_impl_k_busy_wait(uint32_t usec_to_wait);


static inline void k_busy_wait(uint32_t usec_to_wait)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 138 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 138 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_busy_wait(usec_to_wait);
}


extern void z_impl_k_yield(void);


static inline void k_yield(void)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 155 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 155 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_yield();
}


extern void z_impl_k_wakeup(k_tid_t thread);


static inline void k_wakeup(k_tid_t thread)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 172 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 172 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_wakeup(thread);
}


extern k_tid_t z_impl_z_current_get(void);


static inline k_tid_t z_current_get(void)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 188 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 188 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_z_current_get();
}


extern void z_impl_k_thread_abort(k_tid_t thread);


static inline void k_thread_abort(k_tid_t thread)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 205 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 205 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_thread_abort(thread);
}


extern void z_impl_k_thread_start(k_tid_t thread);


static inline void k_thread_start(k_tid_t thread)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 222 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 222 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_thread_start(thread);
}


extern k_ticks_t z_impl_k_thread_timeout_expires_ticks(const struct k_thread * t);


static inline k_ticks_t k_thread_timeout_expires_ticks(const struct k_thread * t)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 238 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 238 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_timeout_expires_ticks(t);
}


extern k_ticks_t z_impl_k_thread_timeout_remaining_ticks(const struct k_thread * t);


static inline k_ticks_t k_thread_timeout_remaining_ticks(const struct k_thread * t)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 254 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 254 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_timeout_remaining_ticks(t);
}


extern int z_impl_k_thread_priority_get(k_tid_t thread);


static inline int k_thread_priority_get(k_tid_t thread)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 270 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 270 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_priority_get(thread);
}


extern void z_impl_k_thread_priority_set(k_tid_t thread, int prio);


static inline void k_thread_priority_set(k_tid_t thread, int prio)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 287 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 287 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_thread_priority_set(thread, prio);
}


extern void z_impl_k_thread_deadline_set(k_tid_t thread, int deadline);


static inline void k_thread_deadline_set(k_tid_t thread, int deadline)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 304 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 304 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_thread_deadline_set(thread, deadline);
}


extern void z_impl_k_thread_suspend(k_tid_t thread);


static inline void k_thread_suspend(k_tid_t thread)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 321 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 321 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_thread_suspend(thread);
}


extern void z_impl_k_thread_resume(k_tid_t thread);


static inline void k_thread_resume(k_tid_t thread)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 338 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 338 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_thread_resume(thread);
}


extern int z_impl_k_is_preempt_thread(void);


static inline int k_is_preempt_thread(void)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 354 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 354 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_is_preempt_thread();
}


extern void z_impl_k_thread_custom_data_set(void * value);


static inline void k_thread_custom_data_set(void * value)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 371 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 371 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_thread_custom_data_set(value);
}


extern void * z_impl_k_thread_custom_data_get(void);


static inline void * k_thread_custom_data_get(void)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 387 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 387 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_custom_data_get();
}


extern int z_impl_k_thread_name_set(k_tid_t thread, const char * str);


static inline int k_thread_name_set(k_tid_t thread, const char * str)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 403 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 403 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_name_set(thread, str);
}


extern int z_impl_k_thread_name_copy(k_tid_t thread, char * buf, size_t size);


static inline int k_thread_name_copy(k_tid_t thread, char * buf, size_t size)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 419 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 419 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_thread_name_copy(thread, buf, size);
}


extern void z_impl_k_timer_start(struct k_timer * timer, k_timeout_t duration, k_timeout_t period);


static inline void k_timer_start(struct k_timer * timer, k_timeout_t duration, k_timeout_t period)
{
# 440 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 440 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 440 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_timer_start(timer, duration, period);
}


extern void z_impl_k_timer_stop(struct k_timer * timer);


static inline void k_timer_stop(struct k_timer * timer)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 457 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 457 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_timer_stop(timer);
}


extern uint32_t z_impl_k_timer_status_get(struct k_timer * timer);


static inline uint32_t k_timer_status_get(struct k_timer * timer)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 473 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 473 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_timer_status_get(timer);
}


extern uint32_t z_impl_k_timer_status_sync(struct k_timer * timer);


static inline uint32_t k_timer_status_sync(struct k_timer * timer)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 489 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 489 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_timer_status_sync(timer);
}


extern k_ticks_t z_impl_k_timer_expires_ticks(const struct k_timer * timer);


static inline k_ticks_t k_timer_expires_ticks(const struct k_timer * timer)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 505 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 505 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_timer_expires_ticks(timer);
}


extern k_ticks_t z_impl_k_timer_remaining_ticks(const struct k_timer * timer);


static inline k_ticks_t k_timer_remaining_ticks(const struct k_timer * timer)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 521 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 521 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_timer_remaining_ticks(timer);
}


extern void z_impl_k_timer_user_data_set(struct k_timer * timer, void * user_data);


static inline void k_timer_user_data_set(struct k_timer * timer, void * user_data)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 538 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 538 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_timer_user_data_set(timer, user_data);
}


extern void * z_impl_k_timer_user_data_get(const struct k_timer * timer);


static inline void * k_timer_user_data_get(const struct k_timer * timer)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 554 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 554 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_timer_user_data_get(timer);
}


extern int64_t z_impl_k_uptime_ticks(void);


static inline int64_t k_uptime_ticks(void)
{
# 572 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 572 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 572 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_uptime_ticks();
}


extern void z_impl_k_queue_init(struct k_queue * queue);


static inline void k_queue_init(struct k_queue * queue)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 589 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 589 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_queue_init(queue);
}


extern void z_impl_k_queue_cancel_wait(struct k_queue * queue);


static inline void k_queue_cancel_wait(struct k_queue * queue)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 606 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 606 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_queue_cancel_wait(queue);
}


extern int32_t z_impl_k_queue_alloc_append(struct k_queue * queue, void * data);


static inline int32_t k_queue_alloc_append(struct k_queue * queue, void * data)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 622 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 622 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_queue_alloc_append(queue, data);
}


extern int32_t z_impl_k_queue_alloc_prepend(struct k_queue * queue, void * data);


static inline int32_t k_queue_alloc_prepend(struct k_queue * queue, void * data)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 638 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 638 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_queue_alloc_prepend(queue, data);
}


extern void * z_impl_k_queue_get(struct k_queue * queue, k_timeout_t timeout);


static inline void * k_queue_get(struct k_queue * queue, k_timeout_t timeout)
{
# 656 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 656 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 656 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_queue_get(queue, timeout);
}


extern int z_impl_k_queue_is_empty(struct k_queue * queue);


static inline int k_queue_is_empty(struct k_queue * queue)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 672 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 672 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_queue_is_empty(queue);
}


extern void * z_impl_k_queue_peek_head(struct k_queue * queue);


static inline void * k_queue_peek_head(struct k_queue * queue)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 688 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 688 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_queue_peek_head(queue);
}


extern void * z_impl_k_queue_peek_tail(struct k_queue * queue);


static inline void * k_queue_peek_tail(struct k_queue * queue)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 704 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 704 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_queue_peek_tail(queue);
}


extern int z_impl_k_futex_wait(struct k_futex * futex, int expected, k_timeout_t timeout);


static inline int k_futex_wait(struct k_futex * futex, int expected, k_timeout_t timeout)
{
# 722 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 722 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 722 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_futex_wait(futex, expected, timeout);
}


extern int z_impl_k_futex_wake(struct k_futex * futex, 
# 727 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
                                                      _Bool 
# 727 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
                                                           wake_all);


static inline int k_futex_wake(struct k_futex * futex, 
# 730 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
                                                      _Bool 
# 730 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
                                                           wake_all)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 738 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 738 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_futex_wake(futex, wake_all);
}


extern void z_impl_k_event_init(struct k_event * event);


static inline void k_event_init(struct k_event * event)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 755 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 755 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_event_init(event);
}


extern void z_impl_k_event_post(struct k_event * event, uint32_t events);


static inline void k_event_post(struct k_event * event, uint32_t events)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 772 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 772 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_event_post(event, events);
}


extern void z_impl_k_event_set(struct k_event * event, uint32_t events);


static inline void k_event_set(struct k_event * event, uint32_t events)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 789 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 789 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_event_set(event, events);
}


extern uint32_t z_impl_k_event_wait(struct k_event * event, uint32_t events, 
# 794 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
                                                                            _Bool 
# 794 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
                                                                                 reset, k_timeout_t timeout);


static inline uint32_t k_event_wait(struct k_event * event, uint32_t events, 
# 797 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
                                                                            _Bool 
# 797 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
                                                                                 reset, k_timeout_t timeout)
{
# 807 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 807 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 807 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_event_wait(event, events, reset, timeout);
}


extern uint32_t z_impl_k_event_wait_all(struct k_event * event, uint32_t events, 
# 812 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
                                                                                _Bool 
# 812 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
                                                                                     reset, k_timeout_t timeout);


static inline uint32_t k_event_wait_all(struct k_event * event, uint32_t events, 
# 815 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
                                                                                _Bool 
# 815 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
                                                                                     reset, k_timeout_t timeout)
{
# 825 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 825 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 825 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_event_wait_all(event, events, reset, timeout);
}


extern int32_t z_impl_k_stack_alloc_init(struct k_stack * stack, uint32_t num_entries);


static inline int32_t k_stack_alloc_init(struct k_stack * stack, uint32_t num_entries)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 841 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 841 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_stack_alloc_init(stack, num_entries);
}


extern int z_impl_k_stack_push(struct k_stack * stack, stack_data_t data);


static inline int k_stack_push(struct k_stack * stack, stack_data_t data)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 857 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 857 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_stack_push(stack, data);
}


extern int z_impl_k_stack_pop(struct k_stack * stack, stack_data_t * data, k_timeout_t timeout);


static inline int k_stack_pop(struct k_stack * stack, stack_data_t * data, k_timeout_t timeout)
{
# 875 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 875 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 875 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_stack_pop(stack, data, timeout);
}


extern int z_impl_k_mutex_init(struct k_mutex * mutex);


static inline int k_mutex_init(struct k_mutex * mutex)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 891 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 891 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_mutex_init(mutex);
}


extern int z_impl_k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout);


static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
{
# 909 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 909 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 909 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_mutex_lock(mutex, timeout);
}


extern int z_impl_k_mutex_unlock(struct k_mutex * mutex);


static inline int k_mutex_unlock(struct k_mutex * mutex)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 925 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 925 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_mutex_unlock(mutex);
}


extern int z_impl_k_condvar_init(struct k_condvar * condvar);


static inline int k_condvar_init(struct k_condvar * condvar)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 941 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 941 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_condvar_init(condvar);
}


extern int z_impl_k_condvar_signal(struct k_condvar * condvar);


static inline int k_condvar_signal(struct k_condvar * condvar)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 957 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 957 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_condvar_signal(condvar);
}


extern int z_impl_k_condvar_broadcast(struct k_condvar * condvar);


static inline int k_condvar_broadcast(struct k_condvar * condvar)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 973 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 973 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_condvar_broadcast(condvar);
}


extern int z_impl_k_condvar_wait(struct k_condvar * condvar, struct k_mutex * mutex, k_timeout_t timeout);


static inline int k_condvar_wait(struct k_condvar * condvar, struct k_mutex * mutex, k_timeout_t timeout)
{
# 991 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 991 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 991 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_condvar_wait(condvar, mutex, timeout);
}


extern int z_impl_k_sem_init(struct k_sem * sem, unsigned int initial_count, unsigned int limit);


static inline int k_sem_init(struct k_sem * sem, unsigned int initial_count, unsigned int limit)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1007 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1007 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_sem_init(sem, initial_count, limit);
}


extern int z_impl_k_sem_take(struct k_sem * sem, k_timeout_t timeout);


static inline int k_sem_take(struct k_sem * sem, k_timeout_t timeout)
{
# 1025 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1025 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1025 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_sem_take(sem, timeout);
}


extern void z_impl_k_sem_give(struct k_sem * sem);


static inline void k_sem_give(struct k_sem * sem)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1042 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1042 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_sem_give(sem);
}


extern void z_impl_k_sem_reset(struct k_sem * sem);


static inline void k_sem_reset(struct k_sem * sem)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1059 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1059 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_sem_reset(sem);
}


extern unsigned int z_impl_k_sem_count_get(struct k_sem * sem);


static inline unsigned int k_sem_count_get(struct k_sem * sem)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1075 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1075 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_sem_count_get(sem);
}


extern int z_impl_k_msgq_alloc_init(struct k_msgq * msgq, size_t msg_size, uint32_t max_msgs);


static inline int k_msgq_alloc_init(struct k_msgq * msgq, size_t msg_size, uint32_t max_msgs)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1091 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1091 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_msgq_alloc_init(msgq, msg_size, max_msgs);
}


extern int z_impl_k_msgq_put(struct k_msgq * msgq, const void * data, k_timeout_t timeout);


static inline int k_msgq_put(struct k_msgq * msgq, const void * data, k_timeout_t timeout)
{
# 1109 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1109 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1109 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_msgq_put(msgq, data, timeout);
}


extern int z_impl_k_msgq_get(struct k_msgq * msgq, void * data, k_timeout_t timeout);


static inline int k_msgq_get(struct k_msgq * msgq, void * data, k_timeout_t timeout)
{
# 1127 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1127 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1127 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_msgq_get(msgq, data, timeout);
}


extern int z_impl_k_msgq_peek(struct k_msgq * msgq, void * data);


static inline int k_msgq_peek(struct k_msgq * msgq, void * data)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1143 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1143 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_msgq_peek(msgq, data);
}


extern void z_impl_k_msgq_purge(struct k_msgq * msgq);


static inline void k_msgq_purge(struct k_msgq * msgq)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1160 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1160 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_msgq_purge(msgq);
}


extern uint32_t z_impl_k_msgq_num_free_get(struct k_msgq * msgq);


static inline uint32_t k_msgq_num_free_get(struct k_msgq * msgq)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1176 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1176 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_msgq_num_free_get(msgq);
}


extern void z_impl_k_msgq_get_attrs(struct k_msgq * msgq, struct k_msgq_attrs * attrs);


static inline void k_msgq_get_attrs(struct k_msgq * msgq, struct k_msgq_attrs * attrs)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1193 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1193 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_msgq_get_attrs(msgq, attrs);
}


extern uint32_t z_impl_k_msgq_num_used_get(struct k_msgq * msgq);


static inline uint32_t k_msgq_num_used_get(struct k_msgq * msgq)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1209 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1209 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_msgq_num_used_get(msgq);
}


extern int z_impl_k_pipe_alloc_init(struct k_pipe * pipe, size_t size);


static inline int k_pipe_alloc_init(struct k_pipe * pipe, size_t size)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1225 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1225 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_pipe_alloc_init(pipe, size);
}


extern int z_impl_k_pipe_put(struct k_pipe * pipe, void * data, size_t bytes_to_write, size_t * bytes_written, size_t min_xfer, k_timeout_t timeout);


static inline int k_pipe_put(struct k_pipe * pipe, void * data, size_t bytes_to_write, size_t * bytes_written, size_t min_xfer, k_timeout_t timeout)
{
# 1247 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1247 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1247 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_pipe_put(pipe, data, bytes_to_write, bytes_written, min_xfer, timeout);
}


extern int z_impl_k_pipe_get(struct k_pipe * pipe, void * data, size_t bytes_to_read, size_t * bytes_read, size_t min_xfer, k_timeout_t timeout);


static inline int k_pipe_get(struct k_pipe * pipe, void * data, size_t bytes_to_read, size_t * bytes_read, size_t min_xfer, k_timeout_t timeout)
{
# 1269 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1269 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1269 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_pipe_get(pipe, data, bytes_to_read, bytes_read, min_xfer, timeout);
}


extern size_t z_impl_k_pipe_read_avail(struct k_pipe * pipe);


static inline size_t k_pipe_read_avail(struct k_pipe * pipe)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1285 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1285 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_pipe_read_avail(pipe);
}


extern size_t z_impl_k_pipe_write_avail(struct k_pipe * pipe);


static inline size_t k_pipe_write_avail(struct k_pipe * pipe)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1301 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1301 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_pipe_write_avail(pipe);
}


extern void z_impl_k_pipe_flush(struct k_pipe * pipe);


static inline void k_pipe_flush(struct k_pipe * pipe)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1318 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1318 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_pipe_flush(pipe);
}


extern void z_impl_k_pipe_buffer_flush(struct k_pipe * pipe);


static inline void k_pipe_buffer_flush(struct k_pipe * pipe)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1335 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1335 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_pipe_buffer_flush(pipe);
}


extern int z_impl_k_poll(struct k_poll_event * events, int num_events, k_timeout_t timeout);


static inline int k_poll(struct k_poll_event * events, int num_events, k_timeout_t timeout)
{
# 1353 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1353 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1353 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_poll(events, num_events, timeout);
}


extern void z_impl_k_poll_signal_init(struct k_poll_signal * sig);


static inline void k_poll_signal_init(struct k_poll_signal * sig)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1370 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1370 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_poll_signal_init(sig);
}


extern void z_impl_k_poll_signal_reset(struct k_poll_signal * sig);


static inline void k_poll_signal_reset(struct k_poll_signal * sig)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1387 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1387 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_poll_signal_reset(sig);
}


extern void z_impl_k_poll_signal_check(struct k_poll_signal * sig, unsigned int * signaled, int * result);


static inline void k_poll_signal_check(struct k_poll_signal * sig, unsigned int * signaled, int * result)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1404 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1404 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_poll_signal_check(sig, signaled, result);
}


extern int z_impl_k_poll_signal_raise(struct k_poll_signal * sig, int result);


static inline int k_poll_signal_raise(struct k_poll_signal * sig, int result)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1420 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1420 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_poll_signal_raise(sig, result);
}


extern void z_impl_k_str_out(char * c, size_t n);


static inline void k_str_out(char * c, size_t n)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1437 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1437 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 z_impl_k_str_out(c, n);
}


extern int z_impl_k_float_disable(struct k_thread * thread);


static inline int k_float_disable(struct k_thread * thread)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1453 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1453 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_float_disable(thread);
}


extern int z_impl_k_float_enable(struct k_thread * thread, unsigned int options);


static inline int k_float_enable(struct k_thread * thread, unsigned int options)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1469 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h" 3 4
0
# 1469 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/kernel.h"
);
 return z_impl_k_float_enable(thread, options);
}







#pragma GCC diagnostic pop
# 5878 "/home/sebin/thesis/zephyrproject/zephyr/include/kernel.h" 2
# 12 "/home/sebin/thesis/zephyrproject/zephyr/include/init.h" 2
# 33 "/home/sebin/thesis/zephyrproject/zephyr/include/init.h"
struct device;
# 43 "/home/sebin/thesis/zephyrproject/zephyr/include/init.h"
struct init_entry {



 int (*init)(const struct device *dev);



 const struct device *dev;
};

void z_sys_init_run_level(int32_t level);
# 11 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 2


# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/random/rand32.h" 1
# 24 "/home/sebin/thesis/zephyrproject/zephyr/include/random/rand32.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 25 "/home/sebin/thesis/zephyrproject/zephyr/include/random/rand32.h" 2
# 47 "/home/sebin/thesis/zephyrproject/zephyr/include/random/rand32.h"
static inline uint32_t sys_rand32_get(void);
# 60 "/home/sebin/thesis/zephyrproject/zephyr/include/random/rand32.h"
static inline void sys_rand_get(void *dst, size_t len);
# 75 "/home/sebin/thesis/zephyrproject/zephyr/include/random/rand32.h"
static inline int sys_csrand_get(void *dst, size_t len);
# 85 "/home/sebin/thesis/zephyrproject/zephyr/include/random/rand32.h"
# 1 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/rand32.h" 1
# 18 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/rand32.h"
#pragma GCC diagnostic push



#pragma GCC diagnostic ignored "-Wstrict-aliasing"

#pragma GCC diagnostic ignored "-Warray-bounds"







extern uint32_t z_impl_sys_rand32_get(void);


static inline uint32_t sys_rand32_get(void)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 43 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/rand32.h" 3 4
0
# 43 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/rand32.h"
);
 return z_impl_sys_rand32_get();
}
# 55 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/rand32.h"
extern void z_impl_sys_rand_get(void * dst, size_t len);


static inline void sys_rand_get(void * dst, size_t len)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 67 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/rand32.h" 3 4
0
# 67 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/rand32.h"
);
 z_impl_sys_rand_get(dst, len);
}
# 79 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/rand32.h"
extern int z_impl_sys_csrand_get(void * dst, size_t len);


static inline int sys_csrand_get(void * dst, size_t len)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 90 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/rand32.h" 3 4
0
# 90 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/rand32.h"
);
 return z_impl_sys_csrand_get(dst, len);
}
# 107 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/rand32.h"
#pragma GCC diagnostic pop
# 86 "/home/sebin/thesis/zephyrproject/zephyr/include/random/rand32.h" 2
# 14 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/syscall_handler.h" 1
# 15 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 2
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/stdlib.h" 1 3
# 10 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/stdlib.h" 3
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/ieeefp.h" 1 3
# 11 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/stdlib.h" 2 3





# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 17 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/stdlib.h" 2 3



# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/machine/stdlib.h" 1 3
# 21 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/stdlib.h" 2 3
# 33 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/stdlib.h" 3



# 35 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/stdlib.h" 3
typedef struct
{
  int quot;
  int rem;
} div_t;

typedef struct
{
  long quot;
  long rem;
} ldiv_t;


typedef struct
{
  long long int quot;
  long long int rem;
} lldiv_t;




typedef int (*__compar_fn_t) (const void *, const void *);







int __locale_mb_cur_max (void);



void abort (void) __attribute__ ((__noreturn__));
int abs (int);





int atexit (void (*__func)(void));
double atof (const char *__nptr);



int atoi (const char *__nptr);
int _atoi_r (struct _reent *, const char *__nptr);
long atol (const char *__nptr);
long _atol_r (struct _reent *, const char *__nptr);
void * bsearch (const void *__key,
         const void *__base,
         size_t __nmemb,
         size_t __size,
         __compar_fn_t _compar);
void *calloc(size_t, size_t) __attribute__((__malloc__)) __attribute__((__warn_unused_result__))
      __attribute__((__alloc_size__(1, 2))) ;
div_t div (int __numer, int __denom);
void exit (int __status) __attribute__ ((__noreturn__));
void free (void *) ;
char * getenv (const char *__string);
char * _getenv_r (struct _reent *, const char *__string);
char * _findenv (const char *, int *);
char * _findenv_r (struct _reent *, const char *, int *);




long labs (long);
ldiv_t ldiv (long __numer, long __denom);
void *malloc(size_t) __attribute__((__malloc__)) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(1))) ;
int mblen (const char *, size_t);
int _mblen_r (struct _reent *, const char *, size_t, _mbstate_t *);
int mbtowc (wchar_t *restrict, const char *restrict, size_t);
int _mbtowc_r (struct _reent *, wchar_t *restrict, const char *restrict, size_t, _mbstate_t *);
int wctomb (char *, wchar_t);
int _wctomb_r (struct _reent *, char *, wchar_t, _mbstate_t *);
size_t mbstowcs (wchar_t *restrict, const char *restrict, size_t);
size_t _mbstowcs_r (struct _reent *, wchar_t *restrict, const char *restrict, size_t, _mbstate_t *);
size_t wcstombs (char *restrict, const wchar_t *restrict, size_t);
size_t _wcstombs_r (struct _reent *, char *restrict, const wchar_t *restrict, size_t, _mbstate_t *);
# 134 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/stdlib.h" 3
char * _mkdtemp_r (struct _reent *, char *);
int _mkostemp_r (struct _reent *, char *, int);
int _mkostemps_r (struct _reent *, char *, int, int);
int _mkstemp_r (struct _reent *, char *);
int _mkstemps_r (struct _reent *, char *, int);
char * _mktemp_r (struct _reent *, char *) __attribute__ ((__deprecated__("the use of `mktemp' is dangerous; use `mkstemp' instead")));
void qsort (void *__base, size_t __nmemb, size_t __size, __compar_fn_t _compar);
int rand (void);
void *realloc(void *, size_t) __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2))) ;
# 156 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/stdlib.h" 3
void srand (unsigned __seed);
double strtod (const char *restrict __n, char **restrict __end_PTR);
double _strtod_r (struct _reent *,const char *restrict __n, char **restrict __end_PTR);

float strtof (const char *restrict __n, char **restrict __end_PTR);







long strtol (const char *restrict __n, char **restrict __end_PTR, int __base);
long _strtol_r (struct _reent *,const char *restrict __n, char **restrict __end_PTR, int __base);
unsigned long strtoul (const char *restrict __n, char **restrict __end_PTR, int __base);
unsigned long _strtoul_r (struct _reent *,const char *restrict __n, char **restrict __end_PTR, int __base);
# 188 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/stdlib.h" 3
int system (const char *__string);
# 199 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/stdlib.h" 3
void _Exit (int __status) __attribute__ ((__noreturn__));




int _putenv_r (struct _reent *, char *__string);
void * _reallocf_r (struct _reent *, void *, size_t);



int _setenv_r (struct _reent *, const char *__string, const char *__value, int __overwrite);
# 221 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/stdlib.h" 3
char * __itoa (int, char *, int);
char * __utoa (unsigned, char *, int);
# 260 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/stdlib.h" 3
long long atoll (const char *__nptr);

long long _atoll_r (struct _reent *, const char *__nptr);

long long llabs (long long);
lldiv_t lldiv (long long __numer, long long __denom);
long long strtoll (const char *restrict __n, char **restrict __end_PTR, int __base);

long long _strtoll_r (struct _reent *, const char *restrict __n, char **restrict __end_PTR, int __base);

unsigned long long strtoull (const char *restrict __n, char **restrict __end_PTR, int __base);

unsigned long long _strtoull_r (struct _reent *, const char *restrict __n, char **restrict __end_PTR, int __base);
# 281 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/stdlib.h" 3
int _unsetenv_r (struct _reent *, const char *__string);







char * _dtoa_r (struct _reent *, double, int, int, int *, int*, char**);

void * _malloc_r (struct _reent *, size_t) ;
void * _calloc_r (struct _reent *, size_t, size_t) ;
void _free_r (struct _reent *, void *) ;
void * _realloc_r (struct _reent *, void *, size_t) ;
void _mstats_r (struct _reent *, char *);

int _system_r (struct _reent *, const char *);

void __eprintf (const char *, const char *, unsigned int, const char *);
# 319 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/stdlib.h" 3
extern long double _strtold_r (struct _reent *, const char *restrict, char **restrict);

extern long double strtold (const char *restrict, char **restrict);
# 336 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/stdlib.h" 3



# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/ssp/stdlib.h" 1 3








size_t __ssp_real_mbstowcs (wchar_t *__buf, const char *__src, size_t __n) __asm__("" "mbstowcs"); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) size_t mbstowcs (wchar_t *__buf, const char *__src, size_t __n)
{
  if (__buf != ((void *)0))
    if (__builtin_object_size(__buf, 2 > 1) != (size_t)-1 && __n * sizeof(wchar_t) > __builtin_object_size(__buf, 2 > 1)) __chk_fail();
  return __ssp_real_mbstowcs (__buf, __src, __n);
}

size_t __ssp_real_wcstombs (char *__buf, const wchar_t *__src, size_t __len) __asm__("" "wcstombs"); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) size_t wcstombs (char *__buf, const wchar_t *__src, size_t __len) { if (__buf != ((void *)0)) if (__builtin_object_size(__buf, 2 > 1) != (size_t)-1 && __len > __builtin_object_size(__buf, 2 > 1)) __chk_fail(); return __ssp_real_wcstombs (__buf, __src, __len); }

                                                    ;

int __ssp_real_wctomb (char *__buf, wchar_t __wc) __asm__("" "wctomb"); extern __inline__ __attribute__((__always_inline__, __gnu_inline__)) int wctomb (char *__buf, wchar_t __wc)
{
  if (__buf != ((void *)0))
    if (__builtin_object_size(__buf, 2 > 1) != (size_t)-1 && __locale_mb_cur_max() > __builtin_object_size(__buf, 2 > 1)) __chk_fail();
  return __ssp_real_wctomb (__buf, __wc);
}


# 340 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include/stdlib.h" 2 3
# 16 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 2

# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/igmp.h" 1
# 23 "/home/sebin/thesis/zephyrproject/zephyr/include/net/igmp.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 1
# 22 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h" 1
# 31 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/device_mmio.h" 1
# 42 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/device_mmio.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 43 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/device_mmio.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h" 1
# 79 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 80 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h" 2




# 83 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
struct k_mem_paging_stats_t {
# 109 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
};

struct k_mem_paging_histogram_t {
# 121 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
};


static inline uintptr_t z_mem_phys_addr(void *virt)
{
 uintptr_t addr = (uintptr_t)virt;
# 135 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
 { }



                       ;






 return ((addr) - 0);
}


static inline void *z_mem_virt_addr(uintptr_t phys)
{
 { }


                                                            ;





 return (void *)((phys) + 0);
}
# 209 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
void z_phys_map(uint8_t **virt_ptr, uintptr_t phys, size_t size,
  uint32_t flags);
# 239 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
void z_phys_unmap(uint8_t *virt, size_t size);
# 299 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
size_t k_mem_free_get(void);
# 340 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
void *k_mem_map(size_t size, uint32_t flags);
# 355 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
void k_mem_unmap(void *addr, size_t size);
# 370 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
size_t k_mem_region_align(uintptr_t *aligned_addr, size_t *aligned_size,
     uintptr_t addr, size_t size, size_t align);
# 401 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
int k_mem_page_out(void *addr, size_t size);
# 416 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
void k_mem_page_in(void *addr, size_t size);
# 431 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
void k_mem_pin(void *addr, size_t size);
# 443 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
void k_mem_unpin(void *addr, size_t size);
# 453 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
static inline void k_mem_paging_stats_get(struct k_mem_paging_stats_t *stats);

struct k_thread;
# 465 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
static inline
void k_mem_paging_thread_stats_get(struct k_thread *thread,
       struct k_mem_paging_stats_t *stats);
# 477 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
static inline void k_mem_paging_histogram_eviction_get(
 struct k_mem_paging_histogram_t *hist);
# 488 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
static inline void k_mem_paging_histogram_backing_store_page_in_get(
 struct k_mem_paging_histogram_t *hist);
# 499 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
static inline void k_mem_paging_histogram_backing_store_page_out_get(
 struct k_mem_paging_histogram_t *hist);

# 1 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/mem_manage.h" 1
# 18 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/mem_manage.h"
#pragma GCC diagnostic push



#pragma GCC diagnostic ignored "-Wstrict-aliasing"

#pragma GCC diagnostic ignored "-Warray-bounds"







extern void z_impl_k_mem_paging_stats_get(struct k_mem_paging_stats_t * stats);


static inline void k_mem_paging_stats_get(struct k_mem_paging_stats_t * stats)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 44 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/mem_manage.h" 3 4
0
# 44 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/mem_manage.h"
);
 z_impl_k_mem_paging_stats_get(stats);
}
# 56 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/mem_manage.h"
extern void z_impl_k_mem_paging_thread_stats_get(struct k_thread * thread, struct k_mem_paging_stats_t * stats);


static inline void k_mem_paging_thread_stats_get(struct k_thread * thread, struct k_mem_paging_stats_t * stats)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 68 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/mem_manage.h" 3 4
0
# 68 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/mem_manage.h"
);
 z_impl_k_mem_paging_thread_stats_get(thread, stats);
}
# 80 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/mem_manage.h"
extern void z_impl_k_mem_paging_histogram_eviction_get(struct k_mem_paging_histogram_t * hist);


static inline void k_mem_paging_histogram_eviction_get(struct k_mem_paging_histogram_t * hist)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 92 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/mem_manage.h" 3 4
0
# 92 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/mem_manage.h"
);
 z_impl_k_mem_paging_histogram_eviction_get(hist);
}
# 104 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/mem_manage.h"
extern void z_impl_k_mem_paging_histogram_backing_store_page_in_get(struct k_mem_paging_histogram_t * hist);


static inline void k_mem_paging_histogram_backing_store_page_in_get(struct k_mem_paging_histogram_t * hist)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 116 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/mem_manage.h" 3 4
0
# 116 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/mem_manage.h"
);
 z_impl_k_mem_paging_histogram_backing_store_page_in_get(hist);
}
# 128 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/mem_manage.h"
extern void z_impl_k_mem_paging_histogram_backing_store_page_out_get(struct k_mem_paging_histogram_t * hist);


static inline void k_mem_paging_histogram_backing_store_page_out_get(struct k_mem_paging_histogram_t * hist)
{







 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 140 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/mem_manage.h" 3 4
0
# 140 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/mem_manage.h"
);
 z_impl_k_mem_paging_histogram_backing_store_page_out_get(hist);
}
# 157 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/mem_manage.h"
#pragma GCC diagnostic pop
# 503 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h" 2
# 527 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
struct z_page_frame *k_mem_paging_eviction_select(
# 527 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h" 3 4
                                                 _Bool 
# 527 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
                                                      *dirty);
# 536 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
void k_mem_paging_eviction_init(void);
# 582 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
int k_mem_paging_backing_store_location_get(struct z_page_frame *pf,
         uintptr_t *location,
         
# 584 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h" 3 4
        _Bool 
# 584 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
             page_fault);
# 596 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
void k_mem_paging_backing_store_location_free(uintptr_t location);
# 609 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
void k_mem_paging_backing_store_page_out(uintptr_t location);
# 622 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
void k_mem_paging_backing_store_page_in(uintptr_t location);
# 644 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
void k_mem_paging_backing_store_page_finalize(struct z_page_frame *pf,
           uintptr_t location);
# 660 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/mem_manage.h"
void k_mem_paging_backing_store_init(void);
# 44 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/device_mmio.h" 2
# 106 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/device_mmio.h"
struct z_device_mmio_rom {

 mm_reg_t addr;
};
# 32 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h" 2
# 53 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
typedef int16_t device_handle_t;
# 429 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
struct device_state {







 unsigned int init_res : 8;




 
# 442 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h" 3 4
_Bool 
# 442 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
     initialized : 1;
};

struct pm_device;




struct device {

 const char *name;

 const void *config;

 const void *api;

 struct device_state * const state;

 void * const data;







 const device_handle_t *const handles;




};
# 483 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
static inline device_handle_t
device_handle_get(const struct device *dev)
{
 device_handle_t ret = 0;
 extern const struct device __device_start[];




 if (dev != 
# 492 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h" 3 4
           ((void *)0)
# 492 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
               ) {
  ret = 1 + (device_handle_t)(dev - __device_start);
 }

 return ret;
}
# 507 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
static inline const struct device *
device_from_handle(device_handle_t dev_handle)
{
 extern const struct device __device_start[];
 extern const struct device __device_end[];
 const struct device *dev = 
# 512 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h" 3 4
                           ((void *)0)
# 512 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
                               ;
 size_t numdev = __device_end - __device_start;

 if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
  dev = &__device_start[dev_handle - 1];
 }

 return dev;
}
# 541 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
typedef int (*device_visitor_callback_t)(const struct device *dev, void *context);
# 563 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
static inline const device_handle_t *
device_required_handles_get(const struct device *dev,
       size_t *count)
{
 const device_handle_t *rv = dev->handles;

 if (rv != 
# 569 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h" 3 4
          ((void *)0)
# 569 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
              ) {
  size_t i = 0;

  while ((rv[i] != 0x7fff)
         && (rv[i] != 
# 573 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h" 3 4
                     (-0x7fff - 1)
# 573 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
                                      )) {
   ++i;
  }
  *count = i;
 }

 return rv;
}
# 603 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
static inline const device_handle_t *
device_supported_handles_get(const struct device *dev,
        size_t *count)
{
 const device_handle_t *rv = dev->handles;
 size_t region = 0;
 size_t i = 0;

 if (rv != 
# 611 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h" 3 4
          ((void *)0)
# 611 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
              ) {

  while (region != 2) {
   if (*rv == 
# 614 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h" 3 4
             (-0x7fff - 1)
# 614 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
                              ) {
    region++;
   }
   rv++;
  }

  while (rv[i] != 0x7fff) {
   ++i;
  }
  *count = i;
 }

 return rv;
}
# 662 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
int device_required_foreach(const struct device *dev,
     device_visitor_callback_t visitor_cb,
     void *context);
# 698 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
int device_supported_foreach(const struct device *dev,
        device_visitor_callback_t visitor_cb,
        void *context);
# 724 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
static inline const struct device *device_get_binding(const char *name);
# 734 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
size_t z_device_get_all_static(const struct device * *devices);
# 750 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"

# 750 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h" 3 4
_Bool 
# 750 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
    z_device_is_ready(const struct device *dev);
# 767 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
static inline 
# 767 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h" 3 4
         _Bool 
# 767 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
              device_is_ready(const struct device *dev);

static inline 
# 769 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h" 3 4
             _Bool 
# 769 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
                  z_impl_device_is_ready(const struct device *dev)
{
 return z_device_is_ready(dev);
}
# 787 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
__attribute__((deprecated)) static inline int z_device_usable_check(const struct device *dev)
{
 return z_device_is_ready(dev) ? 0 : -
# 789 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h" 3
                                     19
# 789 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
                                           ;
}
# 802 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
__attribute__((deprecated)) static inline int device_usable_check(const struct device *dev)
{
 return device_is_ready(dev) ? 0 : -
# 804 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h" 3
                                   19
# 804 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
                                         ;
}
# 878 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
_Static_assert(sizeof(device_handle_t) == 2, "" "fix the linker scripts");
# 931 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h"
# 1 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/device_extern.h" 1







extern const struct device __device_dts_ord_0;
extern const struct device __device_dts_ord_1;
extern const struct device __device_dts_ord_2;
extern const struct device __device_dts_ord_3;
extern const struct device __device_dts_ord_4;
extern const struct device __device_dts_ord_5;
extern const struct device __device_dts_ord_6;
extern const struct device __device_dts_ord_7;
extern const struct device __device_dts_ord_8;
extern const struct device __device_dts_ord_9;
extern const struct device __device_dts_ord_10;
extern const struct device __device_dts_ord_11;
extern const struct device __device_dts_ord_12;
extern const struct device __device_dts_ord_13;
extern const struct device __device_dts_ord_14;
extern const struct device __device_dts_ord_15;
extern const struct device __device_dts_ord_16;
extern const struct device __device_dts_ord_17;
extern const struct device __device_dts_ord_18;
extern const struct device __device_dts_ord_19;
extern const struct device __device_dts_ord_20;
extern const struct device __device_dts_ord_21;
extern const struct device __device_dts_ord_22;
extern const struct device __device_dts_ord_23;
extern const struct device __device_dts_ord_24;
extern const struct device __device_dts_ord_25;
extern const struct device __device_dts_ord_26;
# 932 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h" 2

# 1 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/device.h" 1
# 18 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/device.h"
#pragma GCC diagnostic push



#pragma GCC diagnostic ignored "-Wstrict-aliasing"

#pragma GCC diagnostic ignored "-Warray-bounds"







extern const struct device * z_impl_device_get_binding(const char * name);


static inline const struct device * device_get_binding(const char * name)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 43 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/device.h" 3 4
0
# 43 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/device.h"
);
 return z_impl_device_get_binding(name);
}
# 55 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/device.h"
extern 
# 55 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/device.h" 3 4
      _Bool 
# 55 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/device.h"
           z_impl_device_is_ready(const struct device * dev);


static inline 
# 58 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/device.h" 3 4
             _Bool 
# 58 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/device.h"
                  device_is_ready(const struct device * dev)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 66 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/device.h" 3 4
0
# 66 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/device.h"
);
 return z_impl_device_is_ready(dev);
}
# 83 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/device.h"
#pragma GCC diagnostic pop
# 934 "/home/sebin/thesis/zephyrproject/zephyr/include/device.h" 2
# 23 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 2


# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_core.h" 1
# 23 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_core.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_timeout.h" 1
# 26 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_timeout.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include-fixed/limits.h" 1 3 4
# 27 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_timeout.h" 2
# 55 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_timeout.h"
struct net_timeout {






 sys_snode_t node;




 uint32_t timer_start;







 uint32_t timer_timeout;







 uint32_t wrap_counter;
};
# 95 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_timeout.h"
void net_timeout_set(struct net_timeout *timeout,
       uint32_t lifetime,
       uint32_t now);
# 112 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_timeout.h"
int64_t net_timeout_deadline(const struct net_timeout *timeout,
        int64_t now);
# 132 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_timeout.h"
uint32_t net_timeout_remaining(const struct net_timeout *timeout,
          uint32_t now);
# 153 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_timeout.h"
uint32_t net_timeout_evaluate(struct net_timeout *timeout,
         uint32_t now);
# 24 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_core.h" 2
# 89 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_core.h"
struct net_buf;
struct net_pkt;
struct net_context;
struct net_if;




enum net_verdict {

 NET_OK,



 NET_CONTINUE,

 NET_DROP,
};
# 118 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_core.h"
int net_recv_data(struct net_if *iface, struct net_pkt *pkt);
# 132 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_core.h"
int net_send_data(struct net_pkt *pkt);
# 26 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/hostname.h" 1
# 40 "/home/sebin/thesis/zephyrproject/zephyr/include/net/hostname.h"
static inline const char *net_hostname_get(void)
{
 return "zephyr";
}
# 53 "/home/sebin/thesis/zephyrproject/zephyr/include/net/hostname.h"
static inline void net_hostname_init(void)
{
}
# 74 "/home/sebin/thesis/zephyrproject/zephyr/include/net/hostname.h"
static inline int net_hostname_set_postfix(const uint8_t *hostname_postfix,
        int postfix_len)
{
 return -
# 77 "/home/sebin/thesis/zephyrproject/zephyr/include/net/hostname.h" 3
        122
# 77 "/home/sebin/thesis/zephyrproject/zephyr/include/net/hostname.h"
                ;
}
# 27 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h" 1
# 47 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h"
enum net_link_type {

 NET_LINK_UNKNOWN = 0,

 NET_LINK_IEEE802154,

 NET_LINK_BLUETOOTH,

 NET_LINK_ETHERNET,

 NET_LINK_DUMMY,

 NET_LINK_CANBUS_RAW,

 NET_LINK_CANBUS,
} 
# 62 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h" 3
 __attribute__((__packed__))
# 62 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h"
         ;






struct net_linkaddr {

 uint8_t *addr;


 uint8_t len;


 uint8_t type;
};
# 90 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h"
struct net_linkaddr_storage {

 uint8_t type;


 uint8_t len;


 uint8_t addr[6];
};
# 109 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h"
static inline 
# 109 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h" 3 4
             _Bool 
# 109 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h"
                  net_linkaddr_cmp(struct net_linkaddr *lladdr1,
        struct net_linkaddr *lladdr2)
{
 if (!lladdr1 || !lladdr2) {
  return 
# 113 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h" 3 4
        0
# 113 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h"
             ;
 }

 if (lladdr1->len != lladdr2->len) {
  return 
# 117 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h" 3 4
        0
# 117 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h"
             ;
 }

 return !memcmp(lladdr1->addr, lladdr2->addr, lladdr1->len);
}
# 132 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h"
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
       uint8_t *new_addr, uint8_t new_len)
{
 if (!lladdr_store || !new_addr) {
  return -
# 136 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h" 3
         22
# 136 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h"
               ;
 }

 if (new_len > 6) {
  return -
# 140 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h" 3
         122
# 140 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h"
                 ;
 }

 lladdr_store->len = new_len;
 
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h" 3
((__builtin_object_size(
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h"
lladdr_store->addr
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h" 3
, 0) != (size_t)-1) ? __builtin___memcpy_chk(
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h"
lladdr_store->addr
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h" 3
, 
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h"
new_addr
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h" 3
, 
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h"
new_len
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h" 3
, __builtin_object_size(
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h"
lladdr_store->addr
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h" 3
, 0)) : __memcpy_ichk(
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h"
lladdr_store->addr
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h" 3
, 
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h"
new_addr
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h" 3
, 
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h"
new_len
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h" 3
))
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_linkaddr.h"
                                             ;

 return 0;
}
# 28 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 1
# 27 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h" 1
# 15 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 16 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h" 2
# 226 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline void sys_put_be16(uint16_t val, uint8_t dst[2])
{
 dst[0] = val >> 8;
 dst[1] = val;
}
# 241 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline void sys_put_be24(uint32_t val, uint8_t dst[3])
{
 dst[0] = val >> 16;
 sys_put_be16(val, &dst[1]);
}
# 256 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline void sys_put_be32(uint32_t val, uint8_t dst[4])
{
 sys_put_be16(val >> 16, dst);
 sys_put_be16(val, &dst[2]);
}
# 271 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline void sys_put_be48(uint64_t val, uint8_t dst[6])
{
 sys_put_be16(val >> 32, dst);
 sys_put_be32(val, &dst[2]);
}
# 286 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline void sys_put_be64(uint64_t val, uint8_t dst[8])
{
 sys_put_be32(val >> 32, dst);
 sys_put_be32(val, &dst[4]);
}
# 301 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
 dst[0] = val;
 dst[1] = val >> 8;
}
# 316 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline void sys_put_le24(uint32_t val, uint8_t dst[3])
{
 sys_put_le16(val, dst);
 dst[2] = val >> 16;
}
# 331 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
 sys_put_le16(val, dst);
 sys_put_le16(val >> 16, &dst[2]);
}
# 346 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline void sys_put_le48(uint64_t val, uint8_t dst[6])
{
 sys_put_le32(val, dst);
 sys_put_le16(val >> 32, &dst[4]);
}
# 361 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline void sys_put_le64(uint64_t val, uint8_t dst[8])
{
 sys_put_le32(val, dst);
 sys_put_le32(val >> 32, &dst[4]);
}
# 377 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline uint16_t sys_get_be16(const uint8_t src[2])
{
 return ((uint16_t)src[0] << 8) | src[1];
}
# 392 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline uint32_t sys_get_be24(const uint8_t src[3])
{
 return ((uint32_t)src[0] << 16) | sys_get_be16(&src[1]);
}
# 407 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline uint32_t sys_get_be32(const uint8_t src[4])
{
 return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
}
# 422 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline uint64_t sys_get_be48(const uint8_t src[6])
{
 return ((uint64_t)sys_get_be32(&src[0]) << 16) | sys_get_be16(&src[4]);
}
# 437 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline uint64_t sys_get_be64(const uint8_t src[8])
{
 return ((uint64_t)sys_get_be32(&src[0]) << 32) | sys_get_be32(&src[4]);
}
# 452 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
 return ((uint16_t)src[1] << 8) | src[0];
}
# 467 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline uint32_t sys_get_le24(const uint8_t src[3])
{
 return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
}
# 482 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
 return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
}
# 497 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline uint64_t sys_get_le48(const uint8_t src[6])
{
 return ((uint64_t)sys_get_le32(&src[2]) << 16) | sys_get_le16(&src[0]);
}
# 512 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
 return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
}
# 530 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
 uint8_t *pdst = (uint8_t *)dst;
 const uint8_t *psrc = (const uint8_t *)src;

 { }

                                                     ;

 psrc += length - 1;

 for (; length > 0; length--) {
  *pdst++ = *psrc--;
 }
}
# 556 "/home/sebin/thesis/zephyrproject/zephyr/include/sys/byteorder.h"
static inline void sys_mem_swap(void *buf, size_t length)
{
 size_t i;

 for (i = 0; i < (length/2); i++) {
  uint8_t tmp = ((uint8_t *)buf)[i];

  ((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
  ((uint8_t *)buf)[length - 1 - i] = tmp;
 }
}
# 28 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 2
# 62 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
enum net_ip_protocol {
 IPPROTO_IP = 0,
 IPPROTO_ICMP = 1,
 IPPROTO_IGMP = 2,
 IPPROTO_IPIP = 4,
 IPPROTO_TCP = 6,
 IPPROTO_UDP = 17,
 IPPROTO_IPV6 = 41,
 IPPROTO_ICMPV6 = 58,
 IPPROTO_RAW = 255,
};


enum net_ip_protocol_secure {
 IPPROTO_TLS_1_0 = 256,
 IPPROTO_TLS_1_1 = 257,
 IPPROTO_TLS_1_2 = 258,
 IPPROTO_DTLS_1_0 = 272,
 IPPROTO_DTLS_1_2 = 273,
};


enum net_sock_type {
 SOCK_STREAM = 1,
 SOCK_DGRAM,
 SOCK_RAW
};
# 139 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
struct in6_addr {
 union {
  uint8_t s6_addr[16];
  uint16_t s6_addr16[8];
  uint32_t s6_addr32[4];
 };
};





struct in_addr {
 union {
  uint8_t s4_addr[4];
  uint16_t s4_addr16[2];
  uint32_t s4_addr32[1];
  uint32_t s_addr;
 };
};





typedef unsigned short int sa_family_t;


typedef size_t socklen_t;







struct sockaddr_in6 {
 sa_family_t sin6_family;
 uint16_t sin6_port;
 struct in6_addr sin6_addr;
 uint8_t sin6_scope_id;
};

struct sockaddr_in6_ptr {
 sa_family_t sin6_family;
 uint16_t sin6_port;
 struct in6_addr *sin6_addr;
 uint8_t sin6_scope_id;
};


struct sockaddr_in {
 sa_family_t sin_family;
 uint16_t sin_port;
 struct in_addr sin_addr;
};

struct sockaddr_in_ptr {
 sa_family_t sin_family;
 uint16_t sin_port;
 struct in_addr *sin_addr;
};


struct sockaddr_ll {
 sa_family_t sll_family;
 uint16_t sll_protocol;
 int sll_ifindex;
 uint16_t sll_hatype;
 uint8_t sll_pkttype;
 uint8_t sll_halen;
 uint8_t sll_addr[8];
};

struct sockaddr_ll_ptr {
 sa_family_t sll_family;
 uint16_t sll_protocol;
 int sll_ifindex;
 uint16_t sll_hatype;
 uint8_t sll_pkttype;
 uint8_t sll_halen;
 uint8_t *sll_addr;
};

struct sockaddr_can_ptr {
 sa_family_t can_family;
 int can_ifindex;
};


struct iovec {
 void *iov_base;
 size_t iov_len;
};


struct msghdr {
 void *msg_name;
 socklen_t msg_namelen;
 struct iovec *msg_iov;
 size_t msg_iovlen;
 void *msg_control;
 size_t msg_controllen;
 int msg_flags;
};

struct cmsghdr {
 socklen_t cmsg_len;
 int cmsg_level;
 int cmsg_type;

 z_max_align_t cmsg_data[];
};
# 341 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
struct sockaddr {
 sa_family_t sa_family;
 char data[(sizeof(struct sockaddr_in6)) - sizeof(sa_family_t)];
};



struct sockaddr_ptr {
 sa_family_t family;
 char data[(sizeof(struct sockaddr_in6_ptr)) - sizeof(sa_family_t)];
};


struct sockaddr_storage {
 sa_family_t ss_family;
 char data[(sizeof(struct sockaddr_in6)) - sizeof(sa_family_t)];
};


struct sockaddr_un {
 sa_family_t sun_family;
 char sun_path[(sizeof(struct sockaddr_in6)) - sizeof(sa_family_t)];
};

struct net_addr {
 sa_family_t family;
 union {
  struct in6_addr in6_addr;
  struct in_addr in_addr;
 };
};






extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;
# 403 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
enum net_ip_mtu {



 NET_IPV6_MTU = 1280,




 NET_IPV4_MTU = 576,
};


enum net_priority {
 NET_PRIORITY_BK = 1,
 NET_PRIORITY_BE = 0,
 NET_PRIORITY_EE = 2,
 NET_PRIORITY_CA = 3,
 NET_PRIORITY_VI = 4,
 NET_PRIORITY_VO = 5,
 NET_PRIORITY_IC = 6,
 NET_PRIORITY_NC = 7
} 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 __attribute__((__packed__))
# 425 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
         ;




struct net_tuple {
 struct net_addr *remote_addr;
 struct net_addr *local_addr;
 uint16_t remote_port;
 uint16_t local_port;
 enum net_ip_protocol ip_proto;
};


enum net_addr_state {
 NET_ADDR_ANY_STATE = -1,
 NET_ADDR_TENTATIVE = 0,
 NET_ADDR_PREFERRED,
 NET_ADDR_DEPRECATED,
} 
# 444 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 __attribute__((__packed__))
# 444 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
         ;


enum net_addr_type {

 NET_ADDR_ANY = 0,

 NET_ADDR_AUTOCONF,

 NET_ADDR_DHCP,

 NET_ADDR_MANUAL,

 NET_ADDR_OVERRIDABLE,
} 
# 458 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 __attribute__((__packed__))
# 458 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
         ;



struct net_ipv6_hdr {
 uint8_t vtc;
 uint8_t tcflow;
 uint16_t flow;
 uint16_t len;
 uint8_t nexthdr;
 uint8_t hop_limit;
 uint8_t src[16];
 uint8_t dst[16];
} 
# 471 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 __attribute__((__packed__))
# 471 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
         ;

struct net_ipv6_frag_hdr {
 uint8_t nexthdr;
 uint8_t reserved;
 uint16_t offset;
 uint32_t id;
} 
# 478 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 __attribute__((__packed__))
# 478 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
         ;

struct net_ipv4_hdr {
 uint8_t vhl;
 uint8_t tos;
 uint16_t len;
 uint8_t id[2];
 uint8_t offset[2];
 uint8_t ttl;
 uint8_t proto;
 uint16_t chksum;
 uint8_t src[4];
 uint8_t dst[4];
} 
# 491 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 __attribute__((__packed__))
# 491 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
         ;

struct net_icmp_hdr {
 uint8_t type;
 uint8_t code;
 uint16_t chksum;
} 
# 497 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 __attribute__((__packed__))
# 497 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
         ;

struct net_udp_hdr {
 uint16_t src_port;
 uint16_t dst_port;
 uint16_t len;
 uint16_t chksum;
} 
# 504 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 __attribute__((__packed__))
# 504 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
         ;

struct net_tcp_hdr {
 uint16_t src_port;
 uint16_t dst_port;
 uint8_t seq[4];
 uint8_t ack[4];
 uint8_t offset;
 uint8_t flags;
 uint8_t wnd[2];
 uint16_t chksum;
 uint8_t urg[2];
 uint8_t optdata[0];
} 
# 517 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 __attribute__((__packed__))
# 517 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
         ;

static inline const char *net_addr_type2str(enum net_addr_type type)
{
 switch (type) {
 case NET_ADDR_AUTOCONF:
  return "AUTO";
 case NET_ADDR_DHCP:
  return "DHCP";
 case NET_ADDR_MANUAL:
  return "MANUAL";
 case NET_ADDR_OVERRIDABLE:
  return "OVERRIDE";
 case NET_ADDR_ANY:
 default:
  break;
 }

 return "<unknown>";
}
# 549 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
union net_ip_header {
 struct net_ipv4_hdr *ipv4;
 struct net_ipv6_hdr *ipv6;
};

union net_proto_header {
 struct net_udp_hdr *udp;
 struct net_tcp_hdr *tcp;
};
# 589 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 589 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 589 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_is_addr_loopback(struct in6_addr *addr)
{
 return __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr32[0])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[0]); __p->__v; }) == 0 &&
  __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr32[1])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[1]); __p->__v; }) == 0 &&
  __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr32[2])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[2]); __p->__v; }) == 0 &&
  ((uint32_t) ((((__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr32[3])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[3]); __p->__v; })) >> 24) & 0xff) | (((__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr32[3])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[3]); __p->__v; })) >> 8) & 0xff00) | (((__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr32[3])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[3]); __p->__v; })) & 0xff00) << 8) | (((__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr32[3])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[3]); __p->__v; })) & 0xff) << 24))) == 1;
}
# 604 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 604 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 604 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_is_addr_mcast(const struct in6_addr *addr)
{
 return addr->s6_addr[0] == 0xFF;
}

struct net_if;
struct net_if_config;

extern struct net_if_addr *net_if_ipv6_addr_lookup(const struct in6_addr *addr,
         struct net_if **iface);
# 622 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 622 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 622 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_is_my_addr(struct in6_addr *addr)
{
 return net_if_ipv6_addr_lookup(addr, 
# 624 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
                                     ((void *)0)
# 624 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                                         ) != 
# 624 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
                                              ((void *)0)
# 624 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                                                  ;
}

extern struct net_if_mcast_addr *net_if_ipv6_maddr_lookup(
 const struct in6_addr *addr, struct net_if **iface);
# 638 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 638 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 638 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_is_my_maddr(struct in6_addr *maddr)
{
 return net_if_ipv6_maddr_lookup(maddr, 
# 640 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
                                       ((void *)0)
# 640 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                                           ) != 
# 640 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
                                                ((void *)0)
# 640 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                                                    ;
}
# 652 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 652 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 652 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_is_prefix(const uint8_t *addr1,
          const uint8_t *addr2,
          uint8_t length)
{
 uint8_t bits = 128 - length;
 uint8_t bytes = length / 8U;
 uint8_t remain = bits % 8;
 uint8_t mask;

 if (length > 128) {
  return 
# 662 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
        0
# 662 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
             ;
 }

 if (memcmp(addr1, addr2, bytes)) {
  return 
# 666 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
        0
# 666 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
             ;
 }

 if (!remain) {



  return 
# 673 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
        1
# 673 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
            ;
 }


 mask = ((0xff << (8 - remain)) ^ 0xff) << remain;

 return (addr1[bytes] & mask) == (addr2[bytes] & mask);
}
# 689 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 689 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 689 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv4_is_addr_loopback(struct in_addr *addr)
{
 return addr->s4_addr[0] == 127U;
}
# 701 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 701 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 701 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv4_is_addr_unspecified(const struct in_addr *addr)
{
 return __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s_addr)) __v; } *__p = (__typeof__(__p)) (&addr->s_addr); __p->__v; }) == 0;
}
# 713 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 713 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 713 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv4_is_addr_mcast(const struct in_addr *addr)
{
 return (((uint32_t) ((((__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s_addr)) __v; } *__p = (__typeof__(__p)) (&addr->s_addr); __p->__v; })) >> 24) & 0xff) | (((__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s_addr)) __v; } *__p = (__typeof__(__p)) (&addr->s_addr); __p->__v; })) >> 8) & 0xff00) | (((__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s_addr)) __v; } *__p = (__typeof__(__p)) (&addr->s_addr); __p->__v; })) & 0xff00) << 8) | (((__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s_addr)) __v; } *__p = (__typeof__(__p)) (&addr->s_addr); __p->__v; })) & 0xff) << 24))) & 0xF0000000) == 0xE0000000;
}
# 725 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 725 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 725 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv4_is_ll_addr(const struct in_addr *addr)
{
 return (((uint32_t) ((((__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s_addr)) __v; } *__p = (__typeof__(__p)) (&addr->s_addr); __p->__v; })) >> 24) & 0xff) | (((__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s_addr)) __v; } *__p = (__typeof__(__p)) (&addr->s_addr); __p->__v; })) >> 8) & 0xff00) | (((__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s_addr)) __v; } *__p = (__typeof__(__p)) (&addr->s_addr); __p->__v; })) & 0xff00) << 8) | (((__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s_addr)) __v; } *__p = (__typeof__(__p)) (&addr->s_addr); __p->__v; })) & 0xff) << 24))) & 0xA9FE0000) == 0xA9FE0000;
}
# 748 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline void net_ipv4_addr_copy_raw(uint8_t *dest,
       const uint8_t *src)
{
 do { struct __attribute__((__packed__)) { __typeof__(*(struct in_addr *)dest) __v; } *__p = (__typeof__(__p)) ((struct in_addr *)dest); __p->__v = (__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*((const struct in_addr *)src)) __v; } *__p = (__typeof__(__p)) ((const struct in_addr *)src); __p->__v; })); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 751 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 751 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
); } while (
# 751 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 751 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
);
}







static inline void net_ipv6_addr_copy_raw(uint8_t *dest,
       const uint8_t *src)
{
 
# 763 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
((__builtin_object_size(
# 763 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
dest
# 763 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
, 0) != (size_t)-1) ? __builtin___memcpy_chk(
# 763 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
dest
# 763 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
, 
# 763 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
src
# 763 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
, 
# 763 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
sizeof(struct in6_addr)
# 763 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
, __builtin_object_size(
# 763 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
dest
# 763 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
, 0)) : __memcpy_ichk(
# 763 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
dest
# 763 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
, 
# 763 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
src
# 763 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
, 
# 763 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
sizeof(struct in6_addr)
# 763 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
))
# 763 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                                          ;
}
# 774 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 774 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 774 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv4_addr_cmp(const struct in_addr *addr1,
         const struct in_addr *addr2)
{
 return __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr1->s_addr)) __v; } *__p = (__typeof__(__p)) (&addr1->s_addr); __p->__v; }) == __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr2->s_addr)) __v; } *__p = (__typeof__(__p)) (&addr2->s_addr); __p->__v; });
}
# 788 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 788 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 788 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv4_addr_cmp_raw(const uint8_t *addr1,
      const uint8_t *addr2)
{
 return net_ipv4_addr_cmp((const struct in_addr *)addr1,
     (const struct in_addr *)addr2);
}
# 803 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 803 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 803 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_addr_cmp(const struct in6_addr *addr1,
         const struct in6_addr *addr2)
{
 return !memcmp(addr1, addr2, sizeof(struct in6_addr));
}
# 817 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 817 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 817 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_addr_cmp_raw(const uint8_t *addr1,
      const uint8_t *addr2)
{
 return net_ipv6_addr_cmp((const struct in6_addr *)addr1,
     (const struct in6_addr *)addr2);
}
# 831 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 831 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 831 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_is_ll_addr(const struct in6_addr *addr)
{
 return __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr16[0])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr16[0]); __p->__v; }) == ((uint16_t) ((((0xFE80) >> 8) & 0xff) | (((0xFE80) & 0xff) << 8)));
}
# 843 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 843 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 843 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_is_ula_addr(const struct in6_addr *addr)
{
 return addr->s6_addr[0] == 0xFD;
}






const struct in6_addr *net_ipv6_unspecified_address(void);






const struct in_addr *net_ipv4_unspecified_address(void);






const struct in_addr *net_ipv4_broadcast_address(void);

struct net_if;
extern 
# 870 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
      _Bool 
# 870 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
           net_if_ipv4_addr_mask_cmp(struct net_if *iface,
          const struct in_addr *addr);
# 882 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 882 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 882 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv4_addr_mask_cmp(struct net_if *iface,
       const struct in_addr *addr)
{
 return net_if_ipv4_addr_mask_cmp(iface, addr);
}

extern 
# 888 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
      _Bool 
# 888 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
           net_if_ipv4_is_addr_bcast(struct net_if *iface,
          const struct in_addr *addr);
# 900 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 900 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 900 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv4_is_addr_bcast(struct net_if *iface,
       const struct in_addr *addr)
{
 if (net_ipv4_addr_cmp(addr, net_ipv4_broadcast_address())) {
  return 
# 904 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
        1
# 904 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
            ;
 }

 return net_if_ipv4_is_addr_bcast(iface, addr);
}
# 920 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
extern struct net_if_addr *net_if_ipv4_addr_lookup(const struct in_addr *addr,
         struct net_if **iface);
# 932 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 932 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 932 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv4_is_my_addr(const struct in_addr *addr)
{
 
# 934 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
_Bool 
# 934 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
     ret;

 ret = net_if_ipv4_addr_lookup(addr, 
# 936 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
                                    ((void *)0)
# 936 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                                        ) != 
# 936 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
                                             ((void *)0)
# 936 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                                                 ;
 if (!ret) {
  ret = net_ipv4_is_addr_bcast(
# 938 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
                              ((void *)0)
# 938 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                                  , addr);
 }

 return ret;
}
# 951 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 951 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 951 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_is_addr_unspecified(const struct in6_addr *addr)
{
 return __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr32[0])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[0]); __p->__v; }) == 0 &&
  __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr32[1])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[1]); __p->__v; }) == 0 &&
  __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr32[2])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[2]); __p->__v; }) == 0 &&
  __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr32[3])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[3]); __p->__v; }) == 0;
}
# 967 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 967 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 967 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_is_addr_solicited_node(const struct in6_addr *addr)
{
 return __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr32[0])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[0]); __p->__v; }) == ((uint32_t) ((((0xff020000) >> 24) & 0xff) | (((0xff020000) >> 8) & 0xff00) | (((0xff020000) & 0xff00) << 8) | (((0xff020000) & 0xff) << 24))) &&
  __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr32[1])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[1]); __p->__v; }) == 0x00000000 &&
  __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr32[2])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[2]); __p->__v; }) == ((uint32_t) ((((0x00000001) >> 24) & 0xff) | (((0x00000001) >> 8) & 0xff00) | (((0x00000001) & 0xff00) << 8) | (((0x00000001) & 0xff) << 24))) &&
  ((__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr32[3])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[3]); __p->__v; }) & ((uint32_t) ((((0xff000000) >> 24) & 0xff) | (((0xff000000) >> 8) & 0xff00) | (((0xff000000) & 0xff00) << 8) | (((0xff000000) & 0xff) << 24)))) ==
   ((uint32_t) ((((0xff000000) >> 24) & 0xff) | (((0xff000000) >> 8) & 0xff00) | (((0xff000000) & 0xff00) << 8) | (((0xff000000) & 0xff) << 24))));
}
# 986 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 986 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 986 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_is_addr_mcast_scope(const struct in6_addr *addr,
      int scope)
{
 return (addr->s6_addr[0] == 0xff) && (addr->s6_addr[1] == scope);
}
# 1001 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 1001 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 1001 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_is_same_mcast_scope(const struct in6_addr *addr_1,
      const struct in6_addr *addr_2)
{
 return (addr_1->s6_addr[0] == 0xff) && (addr_2->s6_addr[0] == 0xff) &&
   (addr_1->s6_addr[1] == addr_2->s6_addr[1]);
}
# 1015 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 1015 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 1015 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_is_addr_mcast_global(const struct in6_addr *addr)
{
 return net_ipv6_is_addr_mcast_scope(addr, 0x0e);
}
# 1029 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 1029 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 1029 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_is_addr_mcast_iface(const struct in6_addr *addr)
{
 return net_ipv6_is_addr_mcast_scope(addr, 0x01);
}
# 1043 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 1043 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 1043 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_is_addr_mcast_link(const struct in6_addr *addr)
{
 return net_ipv6_is_addr_mcast_scope(addr, 0x02);
}
# 1057 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 1057 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 1057 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_is_addr_mcast_mesh(const struct in6_addr *addr)
{
 return net_ipv6_is_addr_mcast_scope(addr, 0x03);
}
# 1071 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 1071 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 1071 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_is_addr_mcast_site(const struct in6_addr *addr)
{
 return net_ipv6_is_addr_mcast_scope(addr, 0x05);
}
# 1085 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 1085 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 1085 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_is_addr_mcast_org(const struct in6_addr *addr)
{
 return net_ipv6_is_addr_mcast_scope(addr, 0x08);
}
# 1100 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 1100 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 1100 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_is_addr_mcast_group(const struct in6_addr *addr,
      const struct in6_addr *group)
{
 return __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr16[1])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr16[1]); __p->__v; }) == group->s6_addr16[1] &&
  __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr16[2])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr16[2]); __p->__v; }) == group->s6_addr16[2] &&
  __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr16[3])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr16[3]); __p->__v; }) == group->s6_addr16[3] &&
  __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr32[1])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[1]); __p->__v; }) == group->s6_addr32[1] &&
  __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr32[2])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[2]); __p->__v; }) == group->s6_addr32[1] &&
  __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s6_addr32[3])) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[3]); __p->__v; }) == group->s6_addr32[3];
}
# 1119 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 1119 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool

# 1120 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
net_ipv6_is_addr_mcast_all_nodes_group(const struct in6_addr *addr)
{
 static const struct in6_addr all_nodes_mcast_group = {
  { { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } }
 };

 return net_ipv6_is_addr_mcast_group(addr, &all_nodes_mcast_group);
}
# 1139 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 1139 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool

# 1140 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
net_ipv6_is_addr_mcast_iface_all_nodes(const struct in6_addr *addr)
{
 return net_ipv6_is_addr_mcast_iface(addr) &&
        net_ipv6_is_addr_mcast_all_nodes_group(addr);
}
# 1155 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 1155 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool

# 1156 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
net_ipv6_is_addr_mcast_link_all_nodes(const struct in6_addr *addr)
{
 return net_ipv6_is_addr_mcast_link(addr) &&
        net_ipv6_is_addr_mcast_all_nodes_group(addr);
}
# 1169 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline
void net_ipv6_addr_create_solicited_node(const struct in6_addr *src,
      struct in6_addr *dst)
{
 dst->s6_addr[0] = 0xFF;
 dst->s6_addr[1] = 0x02;
 do { struct __attribute__((__packed__)) { __typeof__(*&dst->s6_addr16[1]) __v; } *__p = (__typeof__(__p)) (&dst->s6_addr16[1]); __p->__v = (0); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1175 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1175 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
); } while (
# 1175 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1175 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
);
 do { struct __attribute__((__packed__)) { __typeof__(*&dst->s6_addr16[2]) __v; } *__p = (__typeof__(__p)) (&dst->s6_addr16[2]); __p->__v = (0); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1176 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1176 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
); } while (
# 1176 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1176 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
);
 do { struct __attribute__((__packed__)) { __typeof__(*&dst->s6_addr16[3]) __v; } *__p = (__typeof__(__p)) (&dst->s6_addr16[3]); __p->__v = (0); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1177 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1177 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
); } while (
# 1177 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1177 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
);
 do { struct __attribute__((__packed__)) { __typeof__(*&dst->s6_addr16[4]) __v; } *__p = (__typeof__(__p)) (&dst->s6_addr16[4]); __p->__v = (0); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1178 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1178 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
); } while (
# 1178 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1178 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
);
 dst->s6_addr[10] = 0U;
 dst->s6_addr[11] = 0x01;
 dst->s6_addr[12] = 0xFF;
 dst->s6_addr[13] = src->s6_addr[13];
 do { struct __attribute__((__packed__)) { __typeof__(*&dst->s6_addr16[7]) __v; } *__p = (__typeof__(__p)) (&dst->s6_addr16[7]); __p->__v = (__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&src->s6_addr16[7])) __v; } *__p = (__typeof__(__p)) (&src->s6_addr16[7]); __p->__v; })); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1183 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1183 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
); } while (
# 1183 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1183 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
);
}
# 1198 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline void net_ipv6_addr_create(struct in6_addr *addr,
     uint16_t addr0, uint16_t addr1,
     uint16_t addr2, uint16_t addr3,
     uint16_t addr4, uint16_t addr5,
     uint16_t addr6, uint16_t addr7)
{
 do { struct __attribute__((__packed__)) { __typeof__(*&addr->s6_addr16[0]) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr16[0]); __p->__v = (((uint16_t) ((((addr0) >> 8) & 0xff) | (((addr0) & 0xff) << 8)))); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1204 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1204 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
); } while (
# 1204 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1204 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
);
 do { struct __attribute__((__packed__)) { __typeof__(*&addr->s6_addr16[1]) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr16[1]); __p->__v = (((uint16_t) ((((addr1) >> 8) & 0xff) | (((addr1) & 0xff) << 8)))); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1205 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1205 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
); } while (
# 1205 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1205 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
);
 do { struct __attribute__((__packed__)) { __typeof__(*&addr->s6_addr16[2]) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr16[2]); __p->__v = (((uint16_t) ((((addr2) >> 8) & 0xff) | (((addr2) & 0xff) << 8)))); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1206 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1206 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
); } while (
# 1206 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1206 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
);
 do { struct __attribute__((__packed__)) { __typeof__(*&addr->s6_addr16[3]) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr16[3]); __p->__v = (((uint16_t) ((((addr3) >> 8) & 0xff) | (((addr3) & 0xff) << 8)))); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1207 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1207 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
); } while (
# 1207 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1207 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
);
 do { struct __attribute__((__packed__)) { __typeof__(*&addr->s6_addr16[4]) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr16[4]); __p->__v = (((uint16_t) ((((addr4) >> 8) & 0xff) | (((addr4) & 0xff) << 8)))); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1208 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1208 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
); } while (
# 1208 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1208 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
);
 do { struct __attribute__((__packed__)) { __typeof__(*&addr->s6_addr16[5]) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr16[5]); __p->__v = (((uint16_t) ((((addr5) >> 8) & 0xff) | (((addr5) & 0xff) << 8)))); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1209 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1209 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
); } while (
# 1209 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1209 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
);
 do { struct __attribute__((__packed__)) { __typeof__(*&addr->s6_addr16[6]) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr16[6]); __p->__v = (((uint16_t) ((((addr6) >> 8) & 0xff) | (((addr6) & 0xff) << 8)))); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1210 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1210 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
); } while (
# 1210 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1210 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
);
 do { struct __attribute__((__packed__)) { __typeof__(*&addr->s6_addr16[7]) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr16[7]); __p->__v = (((uint16_t) ((((addr7) >> 8) & 0xff) | (((addr7) & 0xff) << 8)))); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1211 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1211 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
); } while (
# 1211 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1211 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
);
}






static inline void net_ipv6_addr_create_ll_allnodes_mcast(struct in6_addr *addr)
{
 net_ipv6_addr_create(addr, 0xff02, 0, 0, 0, 0, 0, 0, 0x0001);
}






static inline void net_ipv6_addr_create_ll_allrouters_mcast(struct in6_addr *addr)
{
 net_ipv6_addr_create(addr, 0xff02, 0, 0, 0, 0, 0, 0, 0x0002);
}







static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
         struct net_linkaddr *lladdr)
{
 do { struct __attribute__((__packed__)) { __typeof__(*&addr->s6_addr32[0]) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[0]); __p->__v = (((uint32_t) ((((0xfe800000) >> 24) & 0xff) | (((0xfe800000) >> 8) & 0xff00) | (((0xfe800000) & 0xff00) << 8) | (((0xfe800000) & 0xff) << 24)))); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1243 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1243 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
); } while (
# 1243 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1243 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
);
 do { struct __attribute__((__packed__)) { __typeof__(*&addr->s6_addr32[1]) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[1]); __p->__v = (0); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1244 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1244 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
); } while (
# 1244 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
0
# 1244 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
);

 switch (lladdr->len) {
 case 2:



  if (lladdr->type == NET_LINK_IEEE802154 ||
      lladdr->type == NET_LINK_CANBUS) {
   do { struct __attribute__((__packed__)) { __typeof__(*&addr->s6_addr32[2]) __v; } *__p = (__typeof__(__p)) (&addr->s6_addr32[2]); __p->__v = (0); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1253 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
  0
# 1253 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
  ); } while (
# 1253 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
  0
# 1253 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
  );
   addr->s6_addr[11] = 0xff;
   addr->s6_addr[12] = 0xfe;
   addr->s6_addr[13] = 0U;
   addr->s6_addr[14] = lladdr->addr[0];
   addr->s6_addr[15] = lladdr->addr[1];
  }

  break;
 case 6:



  
# 1266 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 ((__builtin_object_size(
# 1266 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 &addr->s6_addr[8]
# 1266 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , 0) != (size_t)-1) ? __builtin___memcpy_chk(
# 1266 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 &addr->s6_addr[8]
# 1266 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , 
# 1266 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 lladdr->addr
# 1266 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , 
# 1266 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 3
# 1266 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , __builtin_object_size(
# 1266 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 &addr->s6_addr[8]
# 1266 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , 0)) : __memcpy_ichk(
# 1266 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 &addr->s6_addr[8]
# 1266 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , 
# 1266 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 lladdr->addr
# 1266 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , 
# 1266 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 3
# 1266 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 ))
# 1266 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                                           ;
  addr->s6_addr[11] = 0xff;
  addr->s6_addr[12] = 0xfe;
  
# 1269 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 ((__builtin_object_size(
# 1269 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 &addr->s6_addr[13]
# 1269 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , 0) != (size_t)-1) ? __builtin___memcpy_chk(
# 1269 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 &addr->s6_addr[13]
# 1269 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , 
# 1269 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 lladdr->addr + 3
# 1269 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , 
# 1269 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 3
# 1269 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , __builtin_object_size(
# 1269 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 &addr->s6_addr[13]
# 1269 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , 0)) : __memcpy_ichk(
# 1269 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 &addr->s6_addr[13]
# 1269 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , 
# 1269 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 lladdr->addr + 3
# 1269 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , 
# 1269 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 3
# 1269 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 ))
# 1269 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                                                ;
# 1280 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
  if (lladdr->type == NET_LINK_ETHERNET) {
   addr->s6_addr[8] ^= 0x02;
  }

  break;
 case 8:
  
# 1286 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 ((__builtin_object_size(
# 1286 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 &addr->s6_addr[8]
# 1286 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , 0) != (size_t)-1) ? __builtin___memcpy_chk(
# 1286 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 &addr->s6_addr[8]
# 1286 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , 
# 1286 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 lladdr->addr
# 1286 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , 
# 1286 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 lladdr->len
# 1286 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , __builtin_object_size(
# 1286 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 &addr->s6_addr[8]
# 1286 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , 0)) : __memcpy_ichk(
# 1286 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 &addr->s6_addr[8]
# 1286 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , 
# 1286 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 lladdr->addr
# 1286 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 , 
# 1286 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
 lladdr->len
# 1286 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3
 ))
# 1286 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                                                     ;
  addr->s6_addr[8] ^= 0x02;
  break;
 }
}






static inline 
# 1297 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 1297 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_ipv6_addr_based_on_ll(const struct in6_addr *addr,
          const struct net_linkaddr *lladdr)
{
 if (!addr || !lladdr) {
  return 
# 1301 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
        0
# 1301 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
             ;
 }

 switch (lladdr->len) {
 case 2:
  if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
      addr->s6_addr[8] == 0U &&
      addr->s6_addr[9] == 0U &&
      addr->s6_addr[10] == 0U &&
      addr->s6_addr[11] == 0xff &&
      addr->s6_addr[12] == 0xfe) {
   return 
# 1312 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
         1
# 1312 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
             ;
  }

  break;
 case 6:
  if (lladdr->type == NET_LINK_ETHERNET) {
   if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
       !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
       addr->s6_addr[11] == 0xff &&
       addr->s6_addr[12] == 0xfe &&
       (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
    return 
# 1323 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
          1
# 1323 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
              ;
   }
  } else if (lladdr->type == NET_LINK_BLUETOOTH) {
   if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
       !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
       addr->s6_addr[11] == 0xff &&
       addr->s6_addr[12] == 0xfe






       ) {
    return 
# 1337 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
          1
# 1337 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
              ;
   }
  }

  break;
 case 8:
  if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
       lladdr->len - 1) &&
      (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   return 
# 1346 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
         1
# 1346 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
             ;
  }

  break;
 }

 return 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
       0
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
            ;
}
# 1363 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline struct sockaddr_in6 *net_sin6(const struct sockaddr *addr)
{
 return (struct sockaddr_in6 *)addr;
}
# 1376 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline struct sockaddr_in *net_sin(const struct sockaddr *addr)
{
 return (struct sockaddr_in *)addr;
}
# 1389 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline
struct sockaddr_in6_ptr *net_sin6_ptr(const struct sockaddr_ptr *addr)
{
 return (struct sockaddr_in6_ptr *)addr;
}
# 1403 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline
struct sockaddr_in_ptr *net_sin_ptr(const struct sockaddr_ptr *addr)
{
 return (struct sockaddr_in_ptr *)addr;
}
# 1417 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline
struct sockaddr_ll_ptr *net_sll_ptr(const struct sockaddr_ptr *addr)
{
 return (struct sockaddr_ll_ptr *)addr;
}
# 1431 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline
struct sockaddr_can_ptr *net_can_ptr(const struct sockaddr_ptr *addr)
{
 return (struct sockaddr_can_ptr *)addr;
}
# 1450 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline int net_addr_pton(sa_family_t family, const char *src, void *dst);
# 1463 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline char *net_addr_ntop(sa_family_t family, const void *src,
         char *dst, size_t size);
# 1487 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"

# 1487 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
_Bool 
# 1487 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
    net_ipaddr_parse(const char *str, size_t str_len,
        struct sockaddr *addr);
# 1501 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline int32_t net_tcp_seq_cmp(uint32_t seq1, uint32_t seq2)
{
 return (int32_t)(seq1 - seq2);
}
# 1516 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline 
# 1516 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 3 4
             _Bool 
# 1516 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
                  net_tcp_seq_greater(uint32_t seq1, uint32_t seq2)
{
 return net_tcp_seq_cmp(seq1, seq2) > 0;
}
# 1532 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
int net_bytes_from_str(uint8_t *buf, int buf_len, const char *src);
# 1542 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
int net_tx_priority2tc(enum net_priority prio);
# 1552 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
int net_rx_priority2tc(enum net_priority prio);
# 1562 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline enum net_priority net_vlan2priority(uint8_t priority)
{

 static const uint8_t vlan2priority[] = {
  NET_PRIORITY_BE,
  NET_PRIORITY_BK,
  NET_PRIORITY_EE,
  NET_PRIORITY_CA,
  NET_PRIORITY_VI,
  NET_PRIORITY_VO,
  NET_PRIORITY_IC,
  NET_PRIORITY_NC
 };

 if (priority >= ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(vlan2priority), __typeof__(&(vlan2priority)[0])))]) - 1) + (sizeof(vlan2priority) / sizeof((vlan2priority)[0]))))) {

  return NET_PRIORITY_BE;
 }

 return (enum net_priority)vlan2priority[priority];
}
# 1591 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
static inline uint8_t net_priority2vlan(enum net_priority priority)
{

 return (uint8_t)net_vlan2priority(priority);
}
# 1605 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h"
const char *net_family2str(sa_family_t family);





# 1 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_ip.h" 1
# 18 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_ip.h"
#pragma GCC diagnostic push



#pragma GCC diagnostic ignored "-Wstrict-aliasing"

#pragma GCC diagnostic ignored "-Warray-bounds"







extern int z_impl_net_addr_pton(sa_family_t family, const char * src, void * dst);


static inline int net_addr_pton(sa_family_t family, const char * src, void * dst)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 43 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_ip.h" 3 4
0
# 43 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_ip.h"
);
 return z_impl_net_addr_pton(family, src, dst);
}
# 55 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_ip.h"
extern char * z_impl_net_addr_ntop(sa_family_t family, const void * src, char * dst, size_t size);


static inline char * net_addr_ntop(sa_family_t family, const void * src, char * dst, size_t size)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 66 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_ip.h" 3 4
0
# 66 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_ip.h"
);
 return z_impl_net_addr_ntop(family, src, dst, size);
}
# 83 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_ip.h"
#pragma GCC diagnostic pop
# 1612 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_ip.h" 2
# 29 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_l2.h" 1
# 16 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_l2.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h" 1
# 13 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 14 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h" 2


# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/zephyr.h" 1
# 17 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h" 2
# 83 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
struct net_buf_simple {

 uint8_t *data;






 uint16_t len;


 uint16_t size;




 uint8_t *__buf;
};
# 136 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_simple_init(struct net_buf_simple *buf,
           size_t reserve_head)
{
 if (!buf->__buf) {
  buf->__buf = (uint8_t *)buf + sizeof(*buf);
 }

 buf->data = buf->__buf + reserve_head;
 buf->len = 0U;
}
# 156 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_init_with_data(struct net_buf_simple *buf,
       void *data, size_t size);
# 166 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_simple_reset(struct net_buf_simple *buf)
{
 buf->len = 0U;
 buf->data = buf->__buf;
}
# 182 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_clone(const struct net_buf_simple *original,
     struct net_buf_simple *clone);
# 196 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void *net_buf_simple_add(struct net_buf_simple *buf, size_t len);
# 210 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
        size_t len);
# 224 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val);
# 236 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val);
# 248 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_add_be16(struct net_buf_simple *buf, uint16_t val);
# 260 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_add_le24(struct net_buf_simple *buf, uint32_t val);
# 272 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_add_be24(struct net_buf_simple *buf, uint32_t val);
# 284 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_add_le32(struct net_buf_simple *buf, uint32_t val);
# 296 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_add_be32(struct net_buf_simple *buf, uint32_t val);
# 308 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_add_le48(struct net_buf_simple *buf, uint64_t val);
# 320 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_add_be48(struct net_buf_simple *buf, uint64_t val);
# 332 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_add_le64(struct net_buf_simple *buf, uint64_t val);
# 344 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_add_be64(struct net_buf_simple *buf, uint64_t val);
# 356 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void *net_buf_simple_remove_mem(struct net_buf_simple *buf, size_t len);
# 368 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint8_t net_buf_simple_remove_u8(struct net_buf_simple *buf);
# 380 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint16_t net_buf_simple_remove_le16(struct net_buf_simple *buf);
# 392 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint16_t net_buf_simple_remove_be16(struct net_buf_simple *buf);
# 404 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint32_t net_buf_simple_remove_le24(struct net_buf_simple *buf);
# 416 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint32_t net_buf_simple_remove_be24(struct net_buf_simple *buf);
# 428 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint32_t net_buf_simple_remove_le32(struct net_buf_simple *buf);
# 440 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint32_t net_buf_simple_remove_be32(struct net_buf_simple *buf);
# 452 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint64_t net_buf_simple_remove_le48(struct net_buf_simple *buf);
# 464 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint64_t net_buf_simple_remove_be48(struct net_buf_simple *buf);
# 476 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint64_t net_buf_simple_remove_le64(struct net_buf_simple *buf);
# 488 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint64_t net_buf_simple_remove_be64(struct net_buf_simple *buf);
# 501 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void *net_buf_simple_push(struct net_buf_simple *buf, size_t len);
# 515 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void *net_buf_simple_push_mem(struct net_buf_simple *buf, const void *mem,
         size_t len);
# 527 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_push_le16(struct net_buf_simple *buf, uint16_t val);
# 538 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_push_be16(struct net_buf_simple *buf, uint16_t val);
# 548 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val);
# 559 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_push_le24(struct net_buf_simple *buf, uint32_t val);
# 570 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_push_be24(struct net_buf_simple *buf, uint32_t val);
# 581 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_push_le32(struct net_buf_simple *buf, uint32_t val);
# 592 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_push_be32(struct net_buf_simple *buf, uint32_t val);
# 603 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_push_le48(struct net_buf_simple *buf, uint64_t val);
# 614 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_push_be48(struct net_buf_simple *buf, uint64_t val);
# 625 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_push_le64(struct net_buf_simple *buf, uint64_t val);
# 636 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_push_be64(struct net_buf_simple *buf, uint64_t val);
# 649 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len);
# 662 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len);
# 674 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf);
# 686 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf);
# 698 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint16_t net_buf_simple_pull_be16(struct net_buf_simple *buf);
# 710 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint32_t net_buf_simple_pull_le24(struct net_buf_simple *buf);
# 722 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint32_t net_buf_simple_pull_be24(struct net_buf_simple *buf);
# 734 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint32_t net_buf_simple_pull_le32(struct net_buf_simple *buf);
# 746 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint32_t net_buf_simple_pull_be32(struct net_buf_simple *buf);
# 758 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint64_t net_buf_simple_pull_le48(struct net_buf_simple *buf);
# 770 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint64_t net_buf_simple_pull_be48(struct net_buf_simple *buf);
# 782 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint64_t net_buf_simple_pull_le64(struct net_buf_simple *buf);
# 794 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint64_t net_buf_simple_pull_be64(struct net_buf_simple *buf);
# 805 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint8_t *net_buf_simple_tail(struct net_buf_simple *buf)
{
 return buf->data + buf->len;
}
# 819 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
size_t net_buf_simple_headroom(struct net_buf_simple *buf);
# 830 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
size_t net_buf_simple_tailroom(struct net_buf_simple *buf);
# 841 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
uint16_t net_buf_simple_max_len(struct net_buf_simple *buf);
# 850 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
struct net_buf_simple_state {

 uint16_t offset;

 uint16_t len;
};
# 865 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_simple_save(struct net_buf_simple *buf,
           struct net_buf_simple_state *state)
{
 state->offset = net_buf_simple_headroom(buf);
 state->len = buf->len;
}
# 881 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
       struct net_buf_simple_state *state)
{
 buf->data = buf->__buf + state->offset;
 buf->len = state->len;
}
# 915 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
struct net_buf {
 union {

  sys_snode_t node;


  struct net_buf *frags;
 };


 uint8_t ref;


 uint8_t flags;


 uint8_t pool_id;


 uint8_t user_data_size;




 union {

  struct {

   uint8_t *data;


   uint16_t len;


   uint16_t size;





   uint8_t *__buf;
  };

  struct net_buf_simple b;
 };


 uint8_t user_data[] 
# 962 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h" 3
                    __attribute__((__aligned__(
# 962 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
                    sizeof(void *)
# 962 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h" 3
                    )))
# 962 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
                                   ;
};

struct net_buf_data_cb {
 uint8_t * __attribute__((warn_unused_result)) (*alloc)(struct net_buf *buf, size_t *size,
      k_timeout_t timeout);
 uint8_t * __attribute__((warn_unused_result)) (*ref)(struct net_buf *buf, uint8_t *data);
 void (*unref)(struct net_buf *buf, uint8_t *data);
};

struct net_buf_data_alloc {
 const struct net_buf_data_cb *cb;
 void *alloc_data;
};






struct net_buf_pool {

 struct k_lifo free;


 struct k_spinlock lock;


 const uint16_t buf_count;


 uint16_t uninit_count;


 uint8_t user_data_size;
# 1010 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
 void (*const destroy)(struct net_buf *buf);


 const struct net_buf_data_alloc *alloc;


 struct net_buf * const __bufs;
};
# 1061 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
extern const struct net_buf_data_alloc net_buf_heap_alloc;
# 1098 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
struct net_buf_pool_fixed {
 size_t data_size;
 uint8_t *data_pool;
};


extern const struct net_buf_data_cb net_buf_fixed_cb;
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
extern const struct net_buf_data_cb net_buf_var_cb;
# 1222 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
struct net_buf_pool *net_buf_pool_get(int id);
# 1236 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
int net_buf_id(struct net_buf *buf);
# 1260 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
struct net_buf * __attribute__((warn_unused_result)) net_buf_alloc_fixed(struct net_buf_pool *pool,
        k_timeout_t timeout);





static inline struct net_buf * __attribute__((warn_unused_result)) net_buf_alloc(struct net_buf_pool *pool,
         k_timeout_t timeout)
{
 return net_buf_alloc_fixed(pool, timeout);
}
# 1297 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
struct net_buf * __attribute__((warn_unused_result)) net_buf_alloc_len(struct net_buf_pool *pool,
      size_t size,
      k_timeout_t timeout);
# 1330 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
struct net_buf * __attribute__((warn_unused_result)) net_buf_alloc_with_data(struct net_buf_pool *pool,
            void *data, size_t size,
            k_timeout_t timeout);
# 1355 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
struct net_buf * __attribute__((warn_unused_result)) net_buf_get(struct k_fifo *fifo,
       k_timeout_t timeout);
# 1368 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_destroy(struct net_buf *buf)
{
 struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

 ({ do { } while (
# 1372 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h" 3 4
0
# 1372 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
); k_queue_prepend(&(&pool->free)->_queue, buf); do { } while (
# 1372 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h" 3 4
0
# 1372 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
); });
}
# 1382 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_reset(struct net_buf *buf);
# 1392 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve);
# 1403 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf);
# 1415 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
struct net_buf * __attribute__((warn_unused_result)) net_buf_slist_get(sys_slist_t *list);
# 1426 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_put(struct k_fifo *fifo, struct net_buf *buf);
# 1440 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_unref(struct net_buf *buf);
# 1450 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
struct net_buf * __attribute__((warn_unused_result)) net_buf_ref(struct net_buf *buf);
# 1465 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
struct net_buf * __attribute__((warn_unused_result)) net_buf_clone(struct net_buf *buf,
         k_timeout_t timeout);
# 1475 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void * __attribute__((warn_unused_result)) net_buf_user_data(const struct net_buf *buf)
{
 return (void *)buf->user_data;
}
# 1488 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
 net_buf_simple_reserve(&buf->b, reserve);
}
# 1504 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
 return net_buf_simple_add(&buf->b, len);
}
# 1521 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void *net_buf_add_mem(struct net_buf *buf, const void *mem,
        size_t len)
{
 return net_buf_simple_add_mem(&buf->b, mem, len);
}
# 1538 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint8_t *net_buf_add_u8(struct net_buf *buf, uint8_t val)
{
 return net_buf_simple_add_u8(&buf->b, val);
}
# 1553 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_add_le16(struct net_buf *buf, uint16_t val)
{
 net_buf_simple_add_le16(&buf->b, val);
}
# 1568 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_add_be16(struct net_buf *buf, uint16_t val)
{
 net_buf_simple_add_be16(&buf->b, val);
}
# 1583 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_add_le24(struct net_buf *buf, uint32_t val)
{
 net_buf_simple_add_le24(&buf->b, val);
}
# 1598 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_add_be24(struct net_buf *buf, uint32_t val)
{
 net_buf_simple_add_be24(&buf->b, val);
}
# 1613 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_add_le32(struct net_buf *buf, uint32_t val)
{
 net_buf_simple_add_le32(&buf->b, val);
}
# 1628 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_add_be32(struct net_buf *buf, uint32_t val)
{
 net_buf_simple_add_be32(&buf->b, val);
}
# 1643 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_add_le48(struct net_buf *buf, uint64_t val)
{
 net_buf_simple_add_le48(&buf->b, val);
}
# 1658 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_add_be48(struct net_buf *buf, uint64_t val)
{
 net_buf_simple_add_be48(&buf->b, val);
}
# 1673 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_add_le64(struct net_buf *buf, uint64_t val)
{
 net_buf_simple_add_le64(&buf->b, val);
}
# 1688 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_add_be64(struct net_buf *buf, uint64_t val)
{
 net_buf_simple_add_be64(&buf->b, val);
}
# 1703 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void *net_buf_remove_mem(struct net_buf *buf, size_t len)
{
 return net_buf_simple_remove_mem(&buf->b, len);
}
# 1718 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint8_t net_buf_remove_u8(struct net_buf *buf)
{
 return net_buf_simple_remove_u8(&buf->b);
}
# 1733 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint16_t net_buf_remove_le16(struct net_buf *buf)
{
 return net_buf_simple_remove_le16(&buf->b);
}
# 1748 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint16_t net_buf_remove_be16(struct net_buf *buf)
{
 return net_buf_simple_remove_be16(&buf->b);
}
# 1763 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint32_t net_buf_remove_be24(struct net_buf *buf)
{
 return net_buf_simple_remove_be24(&buf->b);
}
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint32_t net_buf_remove_le24(struct net_buf *buf)
{
 return net_buf_simple_remove_le24(&buf->b);
}
# 1793 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint32_t net_buf_remove_le32(struct net_buf *buf)
{
 return net_buf_simple_remove_le32(&buf->b);
}
# 1808 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint32_t net_buf_remove_be32(struct net_buf *buf)
{
 return net_buf_simple_remove_be32(&buf->b);
}
# 1823 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint64_t net_buf_remove_le48(struct net_buf *buf)
{
 return net_buf_simple_remove_le48(&buf->b);
}
# 1838 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint64_t net_buf_remove_be48(struct net_buf *buf)
{
 return net_buf_simple_remove_be48(&buf->b);
}
# 1853 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint64_t net_buf_remove_le64(struct net_buf *buf)
{
 return net_buf_simple_remove_le64(&buf->b);
}
# 1868 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint64_t net_buf_remove_be64(struct net_buf *buf)
{
 return net_buf_simple_remove_be64(&buf->b);
}
# 1884 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void *net_buf_push(struct net_buf *buf, size_t len)
{
 return net_buf_simple_push(&buf->b, len);
}
# 1901 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void *net_buf_push_mem(struct net_buf *buf, const void *mem,
         size_t len)
{
 return net_buf_simple_push_mem(&buf->b, mem, len);
}
# 1915 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_push_u8(struct net_buf *buf, uint8_t val)
{
 net_buf_simple_push_u8(&buf->b, val);
}
# 1929 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_push_le16(struct net_buf *buf, uint16_t val)
{
 net_buf_simple_push_le16(&buf->b, val);
}
# 1943 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_push_be16(struct net_buf *buf, uint16_t val)
{
 net_buf_simple_push_be16(&buf->b, val);
}
# 1957 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_push_le24(struct net_buf *buf, uint32_t val)
{
 net_buf_simple_push_le24(&buf->b, val);
}
# 1971 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_push_be24(struct net_buf *buf, uint32_t val)
{
 net_buf_simple_push_be24(&buf->b, val);
}
# 1985 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_push_le32(struct net_buf *buf, uint32_t val)
{
 net_buf_simple_push_le32(&buf->b, val);
}
# 1999 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_push_be32(struct net_buf *buf, uint32_t val)
{
 net_buf_simple_push_be32(&buf->b, val);
}
# 2013 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_push_le48(struct net_buf *buf, uint64_t val)
{
 net_buf_simple_push_le48(&buf->b, val);
}
# 2027 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_push_be48(struct net_buf *buf, uint64_t val)
{
 net_buf_simple_push_be48(&buf->b, val);
}
# 2041 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_push_le64(struct net_buf *buf, uint64_t val)
{
 net_buf_simple_push_le64(&buf->b, val);
}
# 2055 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void net_buf_push_be64(struct net_buf *buf, uint64_t val)
{
 net_buf_simple_push_be64(&buf->b, val);
}
# 2071 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
 return net_buf_simple_pull(&buf->b, len);
}
# 2087 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
 return net_buf_simple_pull_mem(&buf->b, len);
}
# 2102 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
 return net_buf_simple_pull_u8(&buf->b);
}
# 2117 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint16_t net_buf_pull_le16(struct net_buf *buf)
{
 return net_buf_simple_pull_le16(&buf->b);
}
# 2132 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint16_t net_buf_pull_be16(struct net_buf *buf)
{
 return net_buf_simple_pull_be16(&buf->b);
}
# 2147 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint32_t net_buf_pull_le24(struct net_buf *buf)
{
 return net_buf_simple_pull_le24(&buf->b);
}
# 2162 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint32_t net_buf_pull_be24(struct net_buf *buf)
{
 return net_buf_simple_pull_be24(&buf->b);
}
# 2177 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint32_t net_buf_pull_le32(struct net_buf *buf)
{
 return net_buf_simple_pull_le32(&buf->b);
}
# 2192 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint32_t net_buf_pull_be32(struct net_buf *buf)
{
 return net_buf_simple_pull_be32(&buf->b);
}
# 2207 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint64_t net_buf_pull_le48(struct net_buf *buf)
{
 return net_buf_simple_pull_le48(&buf->b);
}
# 2222 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint64_t net_buf_pull_be48(struct net_buf *buf)
{
 return net_buf_simple_pull_be48(&buf->b);
}
# 2237 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint64_t net_buf_pull_le64(struct net_buf *buf)
{
 return net_buf_simple_pull_le64(&buf->b);
}
# 2252 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint64_t net_buf_pull_be64(struct net_buf *buf)
{
 return net_buf_simple_pull_be64(&buf->b);
}
# 2266 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
 return net_buf_simple_tailroom(&buf->b);
}
# 2280 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline size_t net_buf_headroom(struct net_buf *buf)
{
 return net_buf_simple_headroom(&buf->b);
}
# 2294 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint16_t net_buf_max_len(struct net_buf *buf)
{
 return net_buf_simple_max_len(&buf->b);
}
# 2308 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline uint8_t *net_buf_tail(struct net_buf *buf)
{
 return net_buf_simple_tail(&buf->b);
}






struct net_buf *net_buf_frag_last(struct net_buf *frags);
# 2331 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag);
# 2347 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag);
# 2365 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag);
# 2383 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
size_t net_buf_linearize(void *dst, size_t dst_len,
    struct net_buf *src, size_t offset, size_t len);
# 2400 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
typedef struct net_buf * __attribute__((warn_unused_result)) (*net_buf_allocator_cb)(k_timeout_t timeout,
             void *user_data);
# 2424 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
size_t net_buf_append_bytes(struct net_buf *buf, size_t len,
       const void *value, k_timeout_t timeout,
       net_buf_allocator_cb allocate_cb, void *user_data);
# 2443 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline struct net_buf *net_buf_skip(struct net_buf *buf, size_t len)
{
 while (buf && len--) {
  net_buf_pull_u8(buf);
  if (!buf->len) {
   buf = net_buf_frag_del(
# 2448 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h" 3 4
                         ((void *)0)
# 2448 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
                             , buf);
  }
 }

 return buf;
}
# 2465 "/home/sebin/thesis/zephyrproject/zephyr/include/net/buf.h"
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
 size_t bytes = 0;

 while (buf) {
  bytes += buf->len;
  buf = buf->frags;
 }

 return bytes;
}
# 17 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_l2.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h" 1
# 31 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h"
struct net_if;

struct net_capture_interface_api {



 int (*cleanup)(const struct device *dev);


 int (*enable)(const struct device *dev, struct net_if *iface);


 int (*disable)(const struct device *dev);



 
# 47 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h" 3 4
_Bool 
# 47 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h"
     (*is_enabled)(const struct device *dev);


 int (*send)(const struct device *dev, struct net_if *iface,
      struct net_pkt *pkt);
};
# 71 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h"
int net_capture_setup(const char *remote_addr, const char *my_local_addr,
        const char *peer_addr, const struct device **dev);
# 85 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h"
static inline int net_capture_cleanup(const struct device *dev)
{






 (void)(dev);

 return -
# 95 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h" 3
        134
# 95 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h"
               ;

}
# 111 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h"
static inline int net_capture_enable(const struct device *dev,
         struct net_if *iface)
{






 (void)(dev);
 (void)(iface);

 return -
# 123 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h" 3
        134
# 123 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h"
               ;

}
# 134 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h"
static inline 
# 134 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h" 3 4
             _Bool 
# 134 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h"
                  net_capture_is_enabled(const struct device *dev)
{






 (void)(dev);

 return 
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h" 3 4
       0
# 144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h"
            ;

}
# 155 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h"
static inline int net_capture_disable(const struct device *dev)
{






 (void)(dev);

 return -
# 165 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h" 3
        134
# 165 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h"
               ;

}
# 178 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h"
static inline int net_capture_send(const struct device *dev,
       struct net_if *iface,
       struct net_pkt *pkt)
{






 (void)(dev);
 (void)(iface);
 (void)(pkt);

 return -
# 192 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h" 3
        134
# 192 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h"
               ;

}
# 208 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h"
static inline void net_capture_pkt(struct net_if *iface, struct net_pkt *pkt)
{
 (void)(iface);
 (void)(pkt);
}


struct net_capture_info {
 const struct device *capture_dev;
 struct net_if *capture_iface;
 struct net_if *tunnel_iface;
 struct sockaddr *peer;
 struct sockaddr *local;
 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h" 3 4
_Bool 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h"
     is_enabled;
};
# 231 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h"
typedef void (*net_capture_cb_t)(struct net_capture_info *info,
     void *user_data);
# 246 "/home/sebin/thesis/zephyrproject/zephyr/include/net/capture.h"
static inline void net_capture_foreach(net_capture_cb_t cb, void *user_data)
{
 (void)(cb);
 (void)(user_data);
}
# 18 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_l2.h" 2
# 30 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_l2.h"
struct net_if;


enum net_l2_flags {

 NET_L2_MULTICAST = (1UL << (0)),


 NET_L2_MULTICAST_SKIP_JOIN_SOLICIT_NODE = (1UL << (1)),


 NET_L2_PROMISC_MODE = (1UL << (2)),




 NET_L2_POINT_TO_POINT = (1UL << (3)),
} 
# 47 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_l2.h" 3
 __attribute__((__packed__))
# 47 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_l2.h"
         ;






struct net_l2 {




 enum net_verdict (*recv)(struct net_if *iface, struct net_pkt *pkt);







 int (*send)(struct net_if *iface, struct net_pkt *pkt);





 int (*enable)(struct net_if *iface, 
# 73 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_l2.h" 3 4
                                    _Bool 
# 73 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_l2.h"
                                         state);




 enum net_l2_flags (*get_flags)(struct net_if *iface);
};
# 100 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_l2.h"
extern const struct net_l2 _net_l2_ETHERNET;
# 157 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_l2.h"
typedef int (*net_l2_send_t)(const struct device *dev, struct net_pkt *pkt);

static inline int net_l2_send(net_l2_send_t send_fn,
         const struct device *dev,
         struct net_if *iface,
         struct net_pkt *pkt)
{
 net_capture_pkt(iface, pkt);

 return send_fn(dev, pkt);
}
# 30 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_stats.h" 1
# 19 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_stats.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_mgmt.h" 1
# 17 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_mgmt.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_event.h" 1
# 36 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_event.h"
enum net_event_if_cmd {
 NET_EVENT_IF_CMD_DOWN = 1,
 NET_EVENT_IF_CMD_UP,
};
# 55 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_event.h"
enum net_event_ipv6_cmd {
 NET_EVENT_IPV6_CMD_ADDR_ADD = 1,
 NET_EVENT_IPV6_CMD_ADDR_DEL,
 NET_EVENT_IPV6_CMD_MADDR_ADD,
 NET_EVENT_IPV6_CMD_MADDR_DEL,
 NET_EVENT_IPV6_CMD_PREFIX_ADD,
 NET_EVENT_IPV6_CMD_PREFIX_DEL,
 NET_EVENT_IPV6_CMD_MCAST_JOIN,
 NET_EVENT_IPV6_CMD_MCAST_LEAVE,
 NET_EVENT_IPV6_CMD_ROUTER_ADD,
 NET_EVENT_IPV6_CMD_ROUTER_DEL,
 NET_EVENT_IPV6_CMD_ROUTE_ADD,
 NET_EVENT_IPV6_CMD_ROUTE_DEL,
 NET_EVENT_IPV6_CMD_DAD_SUCCEED,
 NET_EVENT_IPV6_CMD_DAD_FAILED,
 NET_EVENT_IPV6_CMD_NBR_ADD,
 NET_EVENT_IPV6_CMD_NBR_DEL,
};
# 130 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_event.h"
enum net_event_ipv4_cmd {
 NET_EVENT_IPV4_CMD_ADDR_ADD = 1,
 NET_EVENT_IPV4_CMD_ADDR_DEL,
 NET_EVENT_IPV4_CMD_MADDR_ADD,
 NET_EVENT_IPV4_CMD_MADDR_DEL,
 NET_EVENT_IPV4_CMD_ROUTER_ADD,
 NET_EVENT_IPV4_CMD_ROUTER_DEL,
 NET_EVENT_IPV4_CMD_DHCP_START,
 NET_EVENT_IPV4_CMD_DHCP_BOUND,
 NET_EVENT_IPV4_CMD_DHCP_STOP,
 NET_EVENT_IPV4_CMD_MCAST_JOIN,
 NET_EVENT_IPV4_CMD_MCAST_LEAVE,
};
# 186 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_event.h"
enum net_event_l4_cmd {
 NET_EVENT_L4_CMD_CONNECTED = 1,
 NET_EVENT_L4_CMD_DISCONNECTED,
 NET_EVENT_L4_CMD_DNS_SERVER_ADD,
 NET_EVENT_L4_CMD_DNS_SERVER_DEL,
};
# 18 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_mgmt.h" 2
# 30 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_mgmt.h"
struct net_if;
# 88 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_mgmt.h"
typedef int (*net_mgmt_request_handler_t)(uint32_t mgmt_request,
       struct net_if *iface,
       void *data, size_t len);
# 103 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_mgmt.h"
struct net_mgmt_event_callback;
# 113 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_mgmt.h"
typedef void (*net_mgmt_event_handler_t)(struct net_mgmt_event_callback *cb,
      uint32_t mgmt_event,
      struct net_if *iface);







struct net_mgmt_event_callback {



 sys_snode_t node;

 union {


  net_mgmt_event_handler_t handler;



  struct k_sem *sync_call;
 };
# 149 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_mgmt.h"
 union {
# 158 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_mgmt.h"
  uint32_t event_mask;



  uint32_t raised_event;
 };
};
# 173 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_mgmt.h"
static inline
void net_mgmt_init_event_callback(struct net_mgmt_event_callback *cb,
      net_mgmt_event_handler_t handler,
      uint32_t mgmt_event_mask)
{
 { };
 { };

 cb->handler = handler;
 cb->event_mask = mgmt_event_mask;
};
# 193 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_mgmt.h"
void net_mgmt_add_event_callback(struct net_mgmt_event_callback *cb);
# 203 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_mgmt.h"
void net_mgmt_del_event_callback(struct net_mgmt_event_callback *cb);
# 222 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_mgmt.h"
void net_mgmt_event_notify_with_info(uint32_t mgmt_event, struct net_if *iface,
         const void *info, size_t length);

static inline void net_mgmt_event_notify(uint32_t mgmt_event,
      struct net_if *iface)
{
 net_mgmt_event_notify_with_info(mgmt_event, iface, 
# 228 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_mgmt.h" 3 4
                                                   ((void *)0)
# 228 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_mgmt.h"
                                                       , 0);
}
# 256 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_mgmt.h"
int net_mgmt_event_wait(uint32_t mgmt_event_mask,
   uint32_t *raised_event,
   struct net_if **iface,
   const void **info,
   size_t *info_length,
   k_timeout_t timeout);
# 294 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_mgmt.h"
int net_mgmt_event_wait_on_iface(struct net_if *iface,
     uint32_t mgmt_event_mask,
     uint32_t *raised_event,
     const void **info,
     size_t *info_length,
     k_timeout_t timeout);
# 317 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_mgmt.h"
void net_mgmt_event_init(void);
# 20 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_stats.h" 2
# 36 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_stats.h"
typedef uint32_t net_stats_t;




struct net_stats_bytes {

 net_stats_t sent;

 net_stats_t received;
};




struct net_stats_pkts {

 net_stats_t tx;

 net_stats_t rx;
};




struct net_stats_ip {

 net_stats_t recv;


 net_stats_t sent;


 net_stats_t forwarded;


 net_stats_t drop;
};




struct net_stats_ip_errors {



 net_stats_t vhlerr;


 net_stats_t hblenerr;


 net_stats_t lblenerr;


 net_stats_t fragerr;


 net_stats_t chkerr;




 net_stats_t protoerr;
};




struct net_stats_icmp {

 net_stats_t recv;


 net_stats_t sent;


 net_stats_t drop;


 net_stats_t typeerr;


 net_stats_t chkerr;
};




struct net_stats_tcp {

 struct net_stats_bytes bytes;


 net_stats_t resent;


 net_stats_t drop;


 net_stats_t recv;


 net_stats_t sent;


 net_stats_t seg_drop;


 net_stats_t chkerr;


 net_stats_t ackerr;


 net_stats_t rsterr;


 net_stats_t rst;


 net_stats_t rexmit;




 net_stats_t conndrop;


 net_stats_t connrst;
};




struct net_stats_udp {

 net_stats_t drop;


 net_stats_t recv;


 net_stats_t sent;


 net_stats_t chkerr;
};




struct net_stats_ipv6_nd {
 net_stats_t drop;
 net_stats_t recv;
 net_stats_t sent;
};




struct net_stats_ipv6_mld {

 net_stats_t recv;


 net_stats_t sent;


 net_stats_t drop;
};




struct net_stats_ipv4_igmp {

 net_stats_t recv;


 net_stats_t sent;


 net_stats_t drop;
};




struct net_stats_tx_time {
 uint64_t sum;
 net_stats_t count;
};




struct net_stats_rx_time {
 uint64_t sum;
 net_stats_t count;
};
# 253 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_stats.h"
struct net_stats_tc {
 struct {
  struct net_stats_tx_time tx_time;




  net_stats_t pkts;
  net_stats_t bytes;
  uint8_t priority;
 } sent[6];

 struct {
  struct net_stats_rx_time rx_time;




  net_stats_t pkts;
  net_stats_t bytes;
  uint8_t priority;
 } recv[4];
};





struct net_stats_pm {
 uint64_t overall_suspend_time;
 net_stats_t suspend_count;
 uint32_t last_suspend_time;
 uint32_t start_time;
};





struct net_stats {

 net_stats_t processing_error;





 struct net_stats_bytes bytes;


 struct net_stats_ip_errors ip_errors;



 struct net_stats_ip ipv6;




 struct net_stats_ip ipv4;




 struct net_stats_icmp icmp;




 struct net_stats_tcp tcp;




 struct net_stats_udp udp;




 struct net_stats_ipv6_nd ipv6_nd;




 struct net_stats_ipv6_mld ipv6_mld;




 struct net_stats_ipv4_igmp ipv4_igmp;




 struct net_stats_tc tc;
# 372 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_stats.h"
};




struct net_stats_eth_errors {
 net_stats_t rx_length_errors;
 net_stats_t rx_over_errors;
 net_stats_t rx_crc_errors;
 net_stats_t rx_frame_errors;
 net_stats_t rx_no_buffer_count;
 net_stats_t rx_missed_errors;
 net_stats_t rx_long_length_errors;
 net_stats_t rx_short_length_errors;
 net_stats_t rx_align_errors;
 net_stats_t rx_dma_failed;
 net_stats_t rx_buf_alloc_failed;

 net_stats_t tx_aborted_errors;
 net_stats_t tx_carrier_errors;
 net_stats_t tx_fifo_errors;
 net_stats_t tx_heartbeat_errors;
 net_stats_t tx_window_errors;
 net_stats_t tx_dma_failed;

 net_stats_t uncorr_ecc_errors;
 net_stats_t corr_ecc_errors;
};




struct net_stats_eth_flow {
 net_stats_t rx_flow_control_xon;
 net_stats_t rx_flow_control_xoff;
 net_stats_t tx_flow_control_xon;
 net_stats_t tx_flow_control_xoff;
};




struct net_stats_eth_csum {
 net_stats_t rx_csum_offload_good;
 net_stats_t rx_csum_offload_errors;
};




struct net_stats_eth_hw_timestamp {
 net_stats_t rx_hwtstamp_cleared;
 net_stats_t tx_hwtstamp_timeouts;
 net_stats_t tx_hwtstamp_skipped;
};
# 441 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_stats.h"
struct net_stats_eth {
 struct net_stats_bytes bytes;
 struct net_stats_pkts pkts;
 struct net_stats_pkts broadcast;
 struct net_stats_pkts multicast;
 struct net_stats_pkts errors;
 struct net_stats_eth_errors error_details;
 struct net_stats_eth_flow flow_control;
 struct net_stats_eth_csum csum;
 struct net_stats_eth_hw_timestamp hw_timestamp;
 net_stats_t collisions;
 net_stats_t tx_dropped;
 net_stats_t tx_timeout_count;
 net_stats_t tx_restart_queue;




};




struct net_stats_ppp {
 struct net_stats_bytes bytes;
 struct net_stats_pkts pkts;


 net_stats_t drop;


 net_stats_t chkerr;
};
# 483 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_stats.h"
enum net_request_stats_cmd {
 NET_REQUEST_STATS_CMD_GET_ALL = 1,
 NET_REQUEST_STATS_CMD_GET_PROCESSING_ERROR,
 NET_REQUEST_STATS_CMD_GET_BYTES,
 NET_REQUEST_STATS_CMD_GET_IP_ERRORS,
 NET_REQUEST_STATS_CMD_GET_IPV4,
 NET_REQUEST_STATS_CMD_GET_IPV6,
 NET_REQUEST_STATS_CMD_GET_IPV6_ND,
 NET_REQUEST_STATS_CMD_GET_ICMP,
 NET_REQUEST_STATS_CMD_GET_UDP,
 NET_REQUEST_STATS_CMD_GET_TCP,
 NET_REQUEST_STATS_CMD_GET_ETHERNET,
 NET_REQUEST_STATS_CMD_GET_PPP,
 NET_REQUEST_STATS_CMD_GET_PM
};




extern int net_mgmt_NET_REQUEST_STATS_GET_ALL(uint32_t mgmt_request, struct net_if *iface, void *data, size_t len);




extern int net_mgmt_NET_REQUEST_STATS_GET_PROCESSING_ERROR(uint32_t mgmt_request, struct net_if *iface, void *data, size_t len);




extern int net_mgmt_NET_REQUEST_STATS_GET_BYTES(uint32_t mgmt_request, struct net_if *iface, void *data, size_t len);




extern int net_mgmt_NET_REQUEST_STATS_GET_IP_ERRORS(uint32_t mgmt_request, struct net_if *iface, void *data, size_t len);





extern int net_mgmt_NET_REQUEST_STATS_GET_IPV4(uint32_t mgmt_request, struct net_if *iface, void *data, size_t len);






extern int net_mgmt_NET_REQUEST_STATS_GET_IPV6(uint32_t mgmt_request, struct net_if *iface, void *data, size_t len);






extern int net_mgmt_NET_REQUEST_STATS_GET_IPV6_ND(uint32_t mgmt_request, struct net_if *iface, void *data, size_t len);






extern int net_mgmt_NET_REQUEST_STATS_GET_ICMP(uint32_t mgmt_request, struct net_if *iface, void *data, size_t len);






extern int net_mgmt_NET_REQUEST_STATS_GET_UDP(uint32_t mgmt_request, struct net_if *iface, void *data, size_t len);






extern int net_mgmt_NET_REQUEST_STATS_GET_TCP(uint32_t mgmt_request, struct net_if *iface, void *data, size_t len);






extern int net_mgmt_NET_REQUEST_STATS_GET_ETHERNET(uint32_t mgmt_request, struct net_if *iface, void *data, size_t len);
# 31 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 2
# 49 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_addr {

 struct net_addr address;


 struct net_timeout lifetime;




 sys_snode_t dad_node;
 uint32_t dad_start;


 enum net_addr_type addr_type;


 enum net_addr_state addr_state;



 uint8_t dad_count;



 uint8_t is_infinite : 1;


 uint8_t is_used : 1;


 uint8_t is_mesh_local : 1;

 uint8_t _unused : 5;
};






struct net_if_mcast_addr {

 struct net_addr address;


 uint8_t is_used : 1;


 uint8_t is_joined : 1;

 uint8_t _unused : 6;
};






struct net_if_ipv6_prefix {

 struct net_timeout lifetime;


 struct in6_addr prefix;


 struct net_if *iface;


 uint8_t len;


 uint8_t is_infinite : 1;


 uint8_t is_used : 1;

 uint8_t _unused : 6;
};






struct net_if_router {

 sys_snode_t node;


 struct net_addr address;


 struct net_if *iface;


 uint32_t life_start;


 uint16_t lifetime;


 uint8_t is_used : 1;


 uint8_t is_default : 1;


 uint8_t is_infinite : 1;

 uint8_t _unused : 5;
};

enum net_if_flag {

 NET_IF_UP,


 NET_IF_POINTOPOINT,


 NET_IF_PROMISC,







 NET_IF_NO_AUTO_START,


 NET_IF_SUSPENDED,





 NET_IF_FORWARD_MULTICASTS,


 NET_IF_IPV4,


 NET_IF_IPV6,



 NET_IF_NUM_FLAGS

};
# 218 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_ipv6 {

 struct net_if_addr unicast[2];


 struct net_if_mcast_addr mcast[3];


 struct net_if_ipv6_prefix prefix[2];


 uint32_t base_reachable_time;


 uint32_t reachable_time;


 uint32_t retrans_timer;


 sys_snode_t rs_node;


 uint32_t rs_start;


 uint8_t rs_count;



 uint8_t hop_limit;
};
# 261 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_ipv4 {

 struct net_if_addr unicast[1];


 struct net_if_mcast_addr mcast[1];


 struct in_addr gw;


 struct in_addr netmask;


 uint8_t ttl;
};
# 360 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_ip {

 struct net_if_ipv6 *ipv6;



 struct net_if_ipv4 *ipv4;

};




struct net_if_config {

 struct net_if_ip ip;
# 392 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
};
# 403 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_traffic_class {

 struct k_fifo fifo;


 struct k_thread handler;


 k_thread_stack_t *stack;
};
# 427 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_dev {

 const struct device *dev;


 const struct net_l2 * const l2;


 void *l2_data;


 atomic_t flags[(1 + ((NET_IF_NUM_FLAGS) - 1) / (sizeof(atomic_val_t) * 8))];


 struct net_linkaddr link_addr;
# 453 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
 uint16_t mtu;





};
# 468 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if {

 struct net_if_dev *if_dev;



 struct net_stats stats;



 struct net_if_config config;
# 487 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
};







static inline void net_if_flag_set(struct net_if *iface,
       enum net_if_flag value)
{
 { };

 atomic_set_bit(iface->if_dev->flags, value);
}
# 511 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline 
# 511 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
             _Bool 
# 511 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
                  net_if_flag_test_and_set(struct net_if *iface,
         enum net_if_flag value)
{
 { };

 return atomic_test_and_set_bit(iface->if_dev->flags, value);
}







static inline void net_if_flag_clear(struct net_if *iface,
         enum net_if_flag value)
{
 { };

 atomic_clear_bit(iface->if_dev->flags, value);
}
# 541 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline 
# 541 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
             _Bool 
# 541 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
                  net_if_flag_is_set(struct net_if *iface,
          enum net_if_flag value)
{
 if (iface == 
# 544 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
             ((void *)0)
# 544 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
                 ) {
  return 
# 545 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
        0
# 545 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
             ;
 }

 return atomic_test_bit(iface->if_dev->flags, value);
}
# 559 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
enum net_verdict net_if_send_data(struct net_if *iface, struct net_pkt *pkt);
# 568 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline const struct net_l2 * const net_if_l2(struct net_if *iface)
{
 if (!iface || !iface->if_dev) {
  return 
# 571 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
        ((void *)0)
# 571 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
            ;
 }

 return iface->if_dev->l2;
}
# 585 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
enum net_verdict net_if_recv_data(struct net_if *iface, struct net_pkt *pkt);
# 594 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline void *net_if_l2_data(struct net_if *iface)
{
 return iface->if_dev->l2_data;
}
# 606 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline const struct device *net_if_get_device(struct net_if *iface)
{
 return iface->if_dev->dev;
}







void net_if_queue_tx(struct net_if *iface, struct net_pkt *pkt);
# 626 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline 
# 626 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
             _Bool 
# 626 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
                  net_if_is_ip_offloaded(struct net_if *iface)
{



 (void)(iface);

 return 
# 633 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
       0
# 633 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
            ;

}
# 644 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline struct net_offload *net_if_offload(struct net_if *iface)
{



 (void)(iface);

 return 
# 651 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
       ((void *)0)
# 651 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
           ;

}
# 662 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline 
# 662 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
             _Bool 
# 662 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
                  net_if_is_socket_offloaded(struct net_if *iface)
{



 (void)(iface);

 return 
# 669 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
       0
# 669 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
            ;

}
# 680 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline struct net_linkaddr *net_if_get_link_addr(struct net_if *iface)
{
 return &iface->if_dev->link_addr;
}
# 692 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline struct net_if_config *net_if_get_config(struct net_if *iface)
{
 return &iface->config;
}







void net_if_start_dad(struct net_if *iface);
# 716 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
void net_if_start_rs(struct net_if *iface);
# 725 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
void net_if_stop_rs(struct net_if *iface);
# 735 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline int net_if_set_link_addr_unlocked(struct net_if *iface,
      uint8_t *addr, uint8_t len,
      enum net_link_type type)
{
 if (net_if_flag_is_set(iface, NET_IF_UP)) {
  return -
# 740 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3
         1
# 740 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
              ;
 }

 net_if_get_link_addr(iface)->addr = addr;
 net_if_get_link_addr(iface)->len = len;
 net_if_get_link_addr(iface)->type = type;

 net_hostname_set_postfix(addr, len);

 return 0;
}

int net_if_set_link_addr_locked(struct net_if *iface,
    uint8_t *addr, uint8_t len,
    enum net_link_type type);
# 768 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline int net_if_set_link_addr(struct net_if *iface,
           uint8_t *addr, uint8_t len,
           enum net_link_type type)
{



 return net_if_set_link_addr_locked(iface, addr, len, type);

}
# 786 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline uint16_t net_if_get_mtu(struct net_if *iface)
{
 if (iface == 
# 788 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
             ((void *)0)
# 788 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
                 ) {
  return 0U;
 }

 return iface->if_dev->mtu;
}







static inline void net_if_set_mtu(struct net_if *iface,
      uint16_t mtu)
{
 if (iface == 
# 804 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
             ((void *)0)
# 804 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
                 ) {
  return;
 }

 iface->if_dev->mtu = mtu;
}







static inline void net_if_addr_set_lf(struct net_if_addr *ifaddr,
          
# 818 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
         _Bool 
# 818 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
              is_infinite)
{
 ifaddr->is_infinite = is_infinite;
}
# 830 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if *net_if_get_by_link_addr(struct net_linkaddr *ll_addr);
# 839 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if *net_if_lookup_by_dev(const struct device *dev);
# 848 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline struct net_if_config *net_if_config_get(struct net_if *iface)
{
 return &iface->config;
}






void net_if_router_rm(struct net_if_router *router);






struct net_if *net_if_get_default(void);
# 875 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if *net_if_get_first_by_type(const struct net_l2 *l2);
# 900 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
int net_if_config_ipv6_get(struct net_if *iface,
      struct net_if_ipv6 **ipv6);
# 910 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
int net_if_config_ipv6_put(struct net_if *iface);
# 920 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_addr *net_if_ipv6_addr_lookup(const struct in6_addr *addr,
         struct net_if **iface);
# 931 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_addr *net_if_ipv6_addr_lookup_by_iface(struct net_if *iface,
           struct in6_addr *addr);
# 942 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline int net_if_ipv6_addr_lookup_by_index(const struct in6_addr *addr);
# 954 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_addr *net_if_ipv6_addr_add(struct net_if *iface,
      struct in6_addr *addr,
      enum net_addr_type addr_type,
      uint32_t vlifetime);
# 969 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline 
# 969 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
         _Bool 
# 969 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
              net_if_ipv6_addr_add_by_index(int index,
          struct in6_addr *addr,
          enum net_addr_type addr_type,
          uint32_t vlifetime);







void net_if_ipv6_addr_update_lifetime(struct net_if_addr *ifaddr,
          uint32_t vlifetime);
# 991 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"

# 991 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
_Bool 
# 991 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
    net_if_ipv6_addr_rm(struct net_if *iface, const struct in6_addr *addr);
# 1001 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline 
# 1001 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
         _Bool 
# 1001 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
              net_if_ipv6_addr_rm_by_index(int index,
         const struct in6_addr *addr);
# 1012 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_mcast_addr *net_if_ipv6_maddr_add(struct net_if *iface,
      const struct in6_addr *addr);
# 1023 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"

# 1023 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
_Bool 
# 1023 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
    net_if_ipv6_maddr_rm(struct net_if *iface, const struct in6_addr *addr);
# 1035 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_mcast_addr *net_if_ipv6_maddr_lookup(const struct in6_addr *addr,
         struct net_if **iface);
# 1049 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
typedef void (*net_if_mcast_callback_t)(struct net_if *iface,
     const struct net_addr *addr,
     
# 1051 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
    _Bool 
# 1051 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
         is_joined);
# 1061 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_mcast_monitor {

 sys_snode_t node;


 struct net_if *iface;


 net_if_mcast_callback_t cb;
};
# 1080 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
void net_if_mcast_mon_register(struct net_if_mcast_monitor *mon,
          struct net_if *iface,
          net_if_mcast_callback_t cb);






void net_if_mcast_mon_unregister(struct net_if_mcast_monitor *mon);
# 1098 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
void net_if_mcast_monitor(struct net_if *iface, const struct net_addr *addr,
     
# 1099 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
    _Bool 
# 1099 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
         is_joined);






void net_if_ipv6_maddr_join(struct net_if_mcast_addr *addr);
# 1115 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline 
# 1115 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
             _Bool 
# 1115 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
                  net_if_ipv6_maddr_is_joined(struct net_if_mcast_addr *addr)
{
 { };

 return addr->is_joined;
}






void net_if_ipv6_maddr_leave(struct net_if_mcast_addr *addr);
# 1137 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_ipv6_prefix *net_if_ipv6_prefix_get(struct net_if *iface,
        struct in6_addr *addr);
# 1149 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_ipv6_prefix *net_if_ipv6_prefix_lookup(struct net_if *iface,
           struct in6_addr *addr,
           uint8_t len);
# 1163 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_ipv6_prefix *net_if_ipv6_prefix_add(struct net_if *iface,
        struct in6_addr *prefix,
        uint8_t len,
        uint32_t lifetime);
# 1177 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"

# 1177 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
_Bool 
# 1177 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
    net_if_ipv6_prefix_rm(struct net_if *iface, struct in6_addr *addr,
      uint8_t len);







static inline void net_if_ipv6_prefix_set_lf(struct net_if_ipv6_prefix *prefix,
          
# 1187 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
         _Bool 
# 1187 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
              is_infinite)
{
 prefix->is_infinite = is_infinite;
}







void net_if_ipv6_prefix_set_timer(struct net_if_ipv6_prefix *prefix,
      uint32_t lifetime);






void net_if_ipv6_prefix_unset_timer(struct net_if_ipv6_prefix *prefix);
# 1218 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"

# 1218 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
_Bool 
# 1218 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
    net_if_ipv6_addr_onlink(struct net_if **iface, struct in6_addr *addr);
# 1227 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline struct in6_addr *net_if_router_ipv6(struct net_if_router *router)
{
 return &router->address.in6_addr;
}
# 1251 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_router *net_if_ipv6_router_lookup(struct net_if *iface,
      struct in6_addr *addr);
# 1263 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_router *net_if_ipv6_router_find_default(struct net_if *iface,
            struct in6_addr *addr);







void net_if_ipv6_router_update_lifetime(struct net_if_router *router,
     uint16_t lifetime);
# 1284 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_router *net_if_ipv6_router_add(struct net_if *iface,
          struct in6_addr *addr,
          uint16_t router_lifetime);
# 1295 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"

# 1295 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
_Bool 
# 1295 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
    net_if_ipv6_router_rm(struct net_if_router *router);
# 1305 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
uint8_t net_if_ipv6_get_hop_limit(struct net_if *iface);







void net_ipv6_set_hop_limit(struct net_if *iface, uint8_t hop_limit);







static inline void net_if_ipv6_set_base_reachable_time(struct net_if *iface,
             uint32_t reachable_time)
{

 if (!iface->config.ip.ipv6) {
  return;
 }

 iface->config.ip.ipv6->base_reachable_time = reachable_time;

}
# 1340 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline uint32_t net_if_ipv6_get_reachable_time(struct net_if *iface)
{

 if (!iface->config.ip.ipv6) {
  return 0;
 }

 return iface->config.ip.ipv6->reachable_time;



}
# 1360 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
uint32_t net_if_ipv6_calc_reachable_time(struct net_if_ipv6 *ipv6);







static inline void net_if_ipv6_set_reachable_time(struct net_if_ipv6 *ipv6)
{

 ipv6->reachable_time = net_if_ipv6_calc_reachable_time(ipv6);

}







static inline void net_if_ipv6_set_retrans_timer(struct net_if *iface,
       uint32_t retrans_timer)
{

 if (!iface->config.ip.ipv6) {
  return;
 }

 iface->config.ip.ipv6->retrans_timer = retrans_timer;

}
# 1400 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline uint32_t net_if_ipv6_get_retrans_timer(struct net_if *iface)
{

 if (!iface->config.ip.ipv6) {
  return 0;
 }

 return iface->config.ip.ipv6->retrans_timer;



}
# 1425 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *iface,
         const struct in6_addr *dst);
# 1448 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if *net_if_ipv6_select_src_iface(const struct in6_addr *dst);
# 1468 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct in6_addr *net_if_ipv6_get_ll(struct net_if *iface,
        enum net_addr_state addr_state);
# 1480 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct in6_addr *net_if_ipv6_get_ll_addr(enum net_addr_state state,
      struct net_if **iface);
# 1490 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
void net_if_ipv6_dad_failed(struct net_if *iface, const struct in6_addr *addr);
# 1503 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct in6_addr *net_if_ipv6_get_global_addr(enum net_addr_state state,
          struct net_if **iface);
# 1516 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
int net_if_config_ipv4_get(struct net_if *iface,
      struct net_if_ipv4 **ipv4);
# 1526 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
int net_if_config_ipv4_put(struct net_if *iface);
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
uint8_t net_if_ipv4_get_ttl(struct net_if *iface);







void net_if_ipv4_set_ttl(struct net_if *iface, uint8_t ttl);
# 1553 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_addr *net_if_ipv4_addr_lookup(const struct in_addr *addr,
         struct net_if **iface);
# 1566 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_addr *net_if_ipv4_addr_add(struct net_if *iface,
      struct in_addr *addr,
      enum net_addr_type addr_type,
      uint32_t vlifetime);
# 1579 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"

# 1579 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
_Bool 
# 1579 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
    net_if_ipv4_addr_rm(struct net_if *iface, const struct in_addr *addr);
# 1589 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline int net_if_ipv4_addr_lookup_by_index(const struct in_addr *addr);
# 1601 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline 
# 1601 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
         _Bool 
# 1601 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
              net_if_ipv4_addr_add_by_index(int index,
          struct in_addr *addr,
          enum net_addr_type addr_type,
          uint32_t vlifetime);
# 1614 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline 
# 1614 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
         _Bool 
# 1614 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
              net_if_ipv4_addr_rm_by_index(int index,
         const struct in_addr *addr);
# 1625 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_mcast_addr *net_if_ipv4_maddr_add(struct net_if *iface,
      const struct in_addr *addr);
# 1636 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"

# 1636 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
_Bool 
# 1636 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
    net_if_ipv4_maddr_rm(struct net_if *iface, const struct in_addr *addr);
# 1648 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_mcast_addr *net_if_ipv4_maddr_lookup(const struct in_addr *addr,
         struct net_if **iface);






void net_if_ipv4_maddr_join(struct net_if_mcast_addr *addr);
# 1665 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline 
# 1665 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
             _Bool 
# 1665 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
                  net_if_ipv4_maddr_is_joined(struct net_if_mcast_addr *addr)
{
 { };

 return addr->is_joined;
}






void net_if_ipv4_maddr_leave(struct net_if_mcast_addr *addr);
# 1686 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline struct in_addr *net_if_router_ipv4(struct net_if_router *router)
{
 return &router->address.in_addr;
}
# 1710 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_router *net_if_ipv4_router_lookup(struct net_if *iface,
      struct in_addr *addr);
# 1722 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_router *net_if_ipv4_router_find_default(struct net_if *iface,
            struct in_addr *addr);
# 1734 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_router *net_if_ipv4_router_add(struct net_if *iface,
          struct in_addr *addr,
          
# 1736 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
         _Bool 
# 1736 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
              is_default,
          uint16_t router_lifetime);
# 1746 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"

# 1746 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
_Bool 
# 1746 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
    net_if_ipv4_router_rm(struct net_if_router *router);
# 1756 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"

# 1756 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
_Bool 
# 1756 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
    net_if_ipv4_addr_mask_cmp(struct net_if *iface,
          const struct in_addr *addr);
# 1767 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"

# 1767 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
_Bool 
# 1767 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
    net_if_ipv4_is_addr_bcast(struct net_if *iface,
          const struct in_addr *addr);
# 1780 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if *net_if_ipv4_select_src_iface(const struct in_addr *dst);
# 1803 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
const struct in_addr *net_if_ipv4_select_src_addr(struct net_if *iface,
        const struct in_addr *dst);
# 1825 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct in_addr *net_if_ipv4_get_ll(struct net_if *iface,
       enum net_addr_state addr_state);
# 1837 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct in_addr *net_if_ipv4_get_global_addr(struct net_if *iface,
         enum net_addr_state addr_state);







void net_if_ipv4_set_netmask(struct net_if *iface,
        const struct in_addr *netmask);
# 1857 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline 
# 1857 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
         _Bool 
# 1857 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
              net_if_ipv4_set_netmask_by_index(int index,
      const struct in_addr *netmask);







void net_if_ipv4_set_gw(struct net_if *iface, const struct in_addr *gw);
# 1876 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline 
# 1876 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
         _Bool 
# 1876 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
              net_if_ipv4_set_gw_by_index(int index, const struct in_addr *gw);
# 1888 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if *net_if_select_src_iface(const struct sockaddr *dst);
# 1898 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
typedef void (*net_if_link_callback_t)(struct net_if *iface,
           struct net_linkaddr *dst,
           int status);
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_link_cb {

 sys_snode_t node;


 net_if_link_callback_t cb;
};







void net_if_register_link_cb(struct net_if_link_cb *link,
        net_if_link_callback_t cb);






void net_if_unregister_link_cb(struct net_if_link_cb *link);
# 1941 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
    int status);
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"

# 1953 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
_Bool 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
    net_if_need_calc_rx_checksum(struct net_if *iface);
# 1965 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"

# 1965 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
_Bool 
# 1965 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
    net_if_need_calc_tx_checksum(struct net_if *iface);
# 1977 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline struct net_if *net_if_get_by_index(int index);
# 1986 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
int net_if_get_by_iface(struct net_if *iface);
# 1995 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
typedef void (*net_if_cb_t)(struct net_if *iface, void *user_data);
# 2004 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
void net_if_foreach(net_if_cb_t cb, void *user_data);
# 2013 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
int net_if_up(struct net_if *iface);
# 2022 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline 
# 2022 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
             _Bool 
# 2022 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
                  net_if_is_up(struct net_if *iface)
{
 { };

 return net_if_flag_is_set(iface, NET_IF_UP);
}
# 2036 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
int net_if_down(struct net_if *iface);
# 2046 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
typedef void (*net_if_timestamp_callback_t)(struct net_pkt *pkt);
# 2056 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_timestamp_cb {

 sys_snode_t node;




 struct net_pkt *pkt;




 struct net_if *iface;


 net_if_timestamp_callback_t cb;
};
# 2084 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
void net_if_register_timestamp_cb(struct net_if_timestamp_cb *handle,
      struct net_pkt *pkt,
      struct net_if *iface,
      net_if_timestamp_callback_t cb);






void net_if_unregister_timestamp_cb(struct net_if_timestamp_cb *handle);






void net_if_call_timestamp_cb(struct net_pkt *pkt);






void net_if_add_tx_timestamp(struct net_pkt *pkt);
# 2120 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
int net_if_set_promisc(struct net_if *iface);






void net_if_unset_promisc(struct net_if *iface);
# 2137 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"

# 2137 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
_Bool 
# 2137 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
    net_if_is_promisc(struct net_if *iface);
# 2148 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
static inline 
# 2148 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
             _Bool 
# 2148 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
                  net_if_are_pending_tx_packets(struct net_if *iface)
{



 (void)(iface);

 return 
# 2155 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 3 4
       0
# 2155 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
            ;

}
# 2189 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
struct net_if_api {
 void (*init)(struct net_if *iface);
};
# 2501 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h"
# 1 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 1
# 18 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
#pragma GCC diagnostic push



#pragma GCC diagnostic ignored "-Wstrict-aliasing"

#pragma GCC diagnostic ignored "-Warray-bounds"







extern int z_impl_net_if_ipv6_addr_lookup_by_index(const struct in6_addr * addr);


static inline int net_if_ipv6_addr_lookup_by_index(const struct in6_addr * addr)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 43 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
0
# 43 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
);
 return z_impl_net_if_ipv6_addr_lookup_by_index(addr);
}
# 55 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
extern 
# 55 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
      _Bool 
# 55 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
           z_impl_net_if_ipv6_addr_add_by_index(int index, struct in6_addr * addr, enum net_addr_type addr_type, uint32_t vlifetime);


static inline 
# 58 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
             _Bool 
# 58 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
                  net_if_ipv6_addr_add_by_index(int index, struct in6_addr * addr, enum net_addr_type addr_type, uint32_t vlifetime)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 66 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
0
# 66 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
);
 return z_impl_net_if_ipv6_addr_add_by_index(index, addr, addr_type, vlifetime);
}
# 78 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
extern 
# 78 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
      _Bool 
# 78 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
           z_impl_net_if_ipv6_addr_rm_by_index(int index, const struct in6_addr * addr);


static inline 
# 81 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
             _Bool 
# 81 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
                  net_if_ipv6_addr_rm_by_index(int index, const struct in6_addr * addr)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 89 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
0
# 89 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
);
 return z_impl_net_if_ipv6_addr_rm_by_index(index, addr);
}
# 101 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
extern int z_impl_net_if_ipv4_addr_lookup_by_index(const struct in_addr * addr);


static inline int net_if_ipv4_addr_lookup_by_index(const struct in_addr * addr)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 112 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
0
# 112 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
);
 return z_impl_net_if_ipv4_addr_lookup_by_index(addr);
}
# 124 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
extern 
# 124 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
      _Bool 
# 124 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
           z_impl_net_if_ipv4_addr_add_by_index(int index, struct in_addr * addr, enum net_addr_type addr_type, uint32_t vlifetime);


static inline 
# 127 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
             _Bool 
# 127 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
                  net_if_ipv4_addr_add_by_index(int index, struct in_addr * addr, enum net_addr_type addr_type, uint32_t vlifetime)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 135 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
0
# 135 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
);
 return z_impl_net_if_ipv4_addr_add_by_index(index, addr, addr_type, vlifetime);
}
# 147 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
extern 
# 147 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
      _Bool 
# 147 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
           z_impl_net_if_ipv4_addr_rm_by_index(int index, const struct in_addr * addr);


static inline 
# 150 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
             _Bool 
# 150 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
                  net_if_ipv4_addr_rm_by_index(int index, const struct in_addr * addr)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 158 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
0
# 158 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
);
 return z_impl_net_if_ipv4_addr_rm_by_index(index, addr);
}
# 170 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
extern 
# 170 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
      _Bool 
# 170 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
           z_impl_net_if_ipv4_set_netmask_by_index(int index, const struct in_addr * netmask);


static inline 
# 173 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
             _Bool 
# 173 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
                  net_if_ipv4_set_netmask_by_index(int index, const struct in_addr * netmask)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 181 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
0
# 181 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
);
 return z_impl_net_if_ipv4_set_netmask_by_index(index, netmask);
}
# 193 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
extern 
# 193 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
      _Bool 
# 193 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
           z_impl_net_if_ipv4_set_gw_by_index(int index, const struct in_addr * gw);


static inline 
# 196 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
             _Bool 
# 196 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
                  net_if_ipv4_set_gw_by_index(int index, const struct in_addr * gw)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 204 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
0
# 204 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
);
 return z_impl_net_if_ipv4_set_gw_by_index(index, gw);
}
# 216 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
extern struct net_if * z_impl_net_if_get_by_index(int index);


static inline struct net_if * net_if_get_by_index(int index)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 227 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h" 3 4
0
# 227 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
);
 return z_impl_net_if_get_by_index(index);
}
# 244 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/net_if.h"
#pragma GCC diagnostic pop
# 2502 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_if.h" 2
# 24 "/home/sebin/thesis/zephyrproject/zephyr/include/net/igmp.h" 2
# 39 "/home/sebin/thesis/zephyrproject/zephyr/include/net/igmp.h"
int net_ipv4_igmp_join(struct net_if *iface, const struct in_addr *addr);
# 60 "/home/sebin/thesis/zephyrproject/zephyr/include/net/igmp.h"
int net_ipv4_igmp_leave(struct net_if *iface, const struct in_addr *addr);
# 18 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 2

# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 1
# 28 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h" 1
# 39 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
enum net_context_state {
 NET_CONTEXT_IDLE = 0,
 NET_CONTEXT_UNCONNECTED = 0,
 NET_CONTEXT_CONFIGURING = 1,
 NET_CONTEXT_CONNECTING = 1,
 NET_CONTEXT_READY = 2,
 NET_CONTEXT_CONNECTED = 2,
 NET_CONTEXT_LISTENING = 3,
};
# 71 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
struct net_context;
# 93 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
typedef void (*net_context_recv_cb_t)(struct net_context *context,
          struct net_pkt *pkt,
          union net_ip_header *ip_hdr,
          union net_proto_header *proto_hdr,
          int status,
          void *user_data);
# 114 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
typedef void (*net_context_send_cb_t)(struct net_context *context,
          int status,
          void *user_data);
# 134 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
typedef void (*net_tcp_accept_cb_t)(struct net_context *new_context,
        struct sockaddr *addr,
        socklen_t addrlen,
        int status,
        void *user_data);
# 161 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
typedef void (*net_context_connect_cb_t)(struct net_context *context,
      int status,
      void *user_data);
# 176 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
typedef struct k_mem_slab *(*net_pkt_get_slab_func_t)(void);
# 189 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
typedef struct net_buf_pool *(*net_pkt_get_pool_func_t)(void);

struct net_tcp;

struct net_conn_handle;







 struct net_context {





 void *user_data;



 atomic_t refcount;



 struct k_mutex lock;




 struct sockaddr_ptr local;




 struct sockaddr remote;


 struct net_conn_handle *conn_handler;




 net_context_recv_cb_t recv_cb;




 net_context_send_cb_t send_cb;




 net_context_connect_cb_t connect_cb;
# 257 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
 void *tcp;






 struct k_sem recv_data_wait;
# 296 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
 struct {


  uint8_t priority;
# 316 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
 } options;


 uint16_t proto;


 uint16_t flags;


 int8_t iface;


 union {
  uint8_t ipv6_hop_limit;
  uint8_t ipv4_ttl;
 };





};

static inline 
# 339 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h" 3 4
             _Bool 
# 339 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
                  net_context_is_used(struct net_context *context)
{
 { };

 return context->flags & (1UL << (0));
}

static inline 
# 346 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h" 3 4
             _Bool 
# 346 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
                  net_context_is_bound_to_iface(struct net_context *context)
{
 { };

 return context->flags & (1UL << (11));
}
# 360 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
static inline 
# 360 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h" 3 4
             _Bool 
# 360 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
                  net_context_is_accepting(struct net_context *context)
{
 { };

 return context->flags & (1UL << (9));
}







static inline void net_context_set_accepting(struct net_context *context,
          
# 374 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h" 3 4
         _Bool 
# 374 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
              accepting)
{
 { };

 if (accepting) {
  context->flags |= (1UL << (9));
 } else {
  context->flags &= ~(1UL << (9));
 }
}
# 392 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
static inline 
# 392 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h" 3 4
             _Bool 
# 392 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
                  net_context_is_closing(struct net_context *context)
{
 { };

 return context->flags & (1UL << (10));
}







static inline void net_context_set_closing(struct net_context *context,
        
# 406 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h" 3 4
       _Bool 
# 406 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
            closing)
{
 { };

 if (closing) {
  context->flags |= (1UL << (10));
 } else {
  context->flags &= ~(1UL << (10));
 }
}
# 429 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
static inline
enum net_context_state net_context_get_state(struct net_context *context)
{
 { };

 return (enum net_context_state)
  ((context->flags >> 1) &
  0x03);
}
# 447 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
static inline void net_context_set_state(struct net_context *context,
      enum net_context_state state)
{
 { };

 context->flags &= ~(0x03 << 1);
 context->flags |= ((state & 0x03) <<
      1);
}
# 467 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
static inline sa_family_t net_context_get_family(struct net_context *context)
{
 { };

 return ((context->flags & ((1UL << (3)) | (1UL << (4)) | (1UL << (5)))) >> 3);
}
# 483 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
static inline void net_context_set_family(struct net_context *context,
       sa_family_t family)
{
 uint8_t flag = 0U;

 { };

 if (family == 0 || family == 1 || family == 2 ||
     family == 3 || family == 4) {

  flag = family << 3;
 }

 context->flags |= flag;
}
# 509 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
static inline
enum net_sock_type net_context_get_type(struct net_context *context)
{
 { };

 return (enum net_sock_type)((context->flags & ((1UL << (6)) | (1UL << (7)))) >> 6);
}
# 526 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
static inline void net_context_set_type(struct net_context *context,
     enum net_sock_type type)
{
 uint16_t flag = 0U;

 { };

 if (type == SOCK_DGRAM || type == SOCK_STREAM || type == SOCK_RAW) {

  flag = type << 6;
 }

 context->flags |= flag;
}
# 558 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
static inline void net_context_set_filter_id(struct net_context *context,
          int filter_id)
{
 (void)(context);
 (void)(filter_id);
}
# 583 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
static inline int net_context_get_filter_id(struct net_context *context)
{
 (void)(context);

 return -1;
}
# 601 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
static inline uint16_t net_context_get_ip_proto(struct net_context *context)
{
 return context->proto;
}
# 616 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
static inline void net_context_set_ip_proto(struct net_context *context,
         uint16_t proto)
{
 context->proto = proto;
}
# 632 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
static inline
struct net_if *net_context_get_iface(struct net_context *context)
{
 { };

 return net_if_get_by_index(context->iface);
}
# 648 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
static inline void net_context_set_iface(struct net_context *context,
      struct net_if *iface)
{
 { };

 context->iface = net_if_get_by_iface(iface);
}

static inline uint8_t net_context_get_ipv4_ttl(struct net_context *context)
{
 return context->ipv4_ttl;
}

static inline void net_context_set_ipv4_ttl(struct net_context *context,
         uint8_t ttl)
{
 context->ipv4_ttl = ttl;
}

static inline uint8_t net_context_get_ipv6_hop_limit(struct net_context *context)
{
 return context->ipv6_hop_limit;
}

static inline void net_context_set_ipv6_hop_limit(struct net_context *context,
        uint8_t hop_limit)
{
 context->ipv6_hop_limit = hop_limit;
}
# 690 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
static inline void net_context_set_proxy_enabled(struct net_context *context,
       
# 691 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h" 3 4
      _Bool 
# 691 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
           enable)
{
 (void)(context);
 (void)(enable);
}

static inline 
# 697 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h" 3 4
             _Bool 
# 697 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
                  net_context_is_proxy_enabled(struct net_context *context)
{
 return 
# 699 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h" 3 4
       0
# 699 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
            ;
}
# 720 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
int net_context_get(sa_family_t family,
      enum net_sock_type type,
      uint16_t ip_proto,
      struct net_context **context);
# 738 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
int net_context_put(struct net_context *context);
# 752 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
int net_context_ref(struct net_context *context);
# 767 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
int net_context_unref(struct net_context *context);
# 780 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
int net_context_create_ipv4_new(struct net_context *context,
    struct net_pkt *pkt,
    const struct in_addr *src,
    const struct in_addr *dst);
# 805 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
int net_context_create_ipv6_new(struct net_context *context,
    struct net_pkt *pkt,
    const struct in6_addr *src,
    const struct in6_addr *dst);
# 830 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
int net_context_bind(struct net_context *context,
       const struct sockaddr *addr,
       socklen_t addrlen);
# 844 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
int net_context_listen(struct net_context *context,
         int backlog);
# 875 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
int net_context_connect(struct net_context *context,
   const struct sockaddr *addr,
   socklen_t addrlen,
   net_context_connect_cb_t cb,
   k_timeout_t timeout,
   void *user_data);
# 907 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
int net_context_accept(struct net_context *context,
         net_tcp_accept_cb_t cb,
         k_timeout_t timeout,
         void *user_data);
# 931 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
int net_context_send(struct net_context *context,
       const void *buf,
       size_t len,
       net_context_send_cb_t cb,
       k_timeout_t timeout,
       void *user_data);
# 959 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
int net_context_sendto(struct net_context *context,
         const void *buf,
         size_t len,
         const struct sockaddr *dst_addr,
         socklen_t addrlen,
         net_context_send_cb_t cb,
         k_timeout_t timeout,
         void *user_data);
# 986 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
int net_context_sendmsg(struct net_context *context,
   const struct msghdr *msghdr,
   int flags,
   net_context_send_cb_t cb,
   k_timeout_t timeout,
   void *user_data);
# 1029 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
int net_context_recv(struct net_context *context,
       net_context_recv_cb_t cb,
       k_timeout_t timeout,
       void *user_data);
# 1054 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
int net_context_update_recv_wnd(struct net_context *context,
    int32_t delta);

enum net_context_option {
 NET_OPT_PRIORITY = 1,
 NET_OPT_TXTIME = 2,
 NET_OPT_SOCKS5 = 3,
 NET_OPT_RCVTIMEO = 4,
 NET_OPT_SNDTIMEO = 5,
};
# 1075 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
int net_context_set_option(struct net_context *context,
      enum net_context_option option,
      const void *value, size_t len);
# 1089 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
int net_context_get_option(struct net_context *context,
      enum net_context_option option,
      void *value, size_t *len);
# 1100 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
typedef void (*net_context_cb_t)(struct net_context *context, void *user_data);
# 1109 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
void net_context_foreach(net_context_cb_t cb, void *user_data);
# 1158 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"

# 1158 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h" 3 4
_Bool 
# 1158 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_context.h"
    net_context_port_in_use(enum net_ip_protocol ip_proto,
 uint16_t local_port, const struct sockaddr *local_addr);
# 29 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet_vlan.h" 1
# 39 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet_vlan.h"
static inline uint16_t net_eth_vlan_get_vid(uint16_t tci)
{
 return tci & 0x0fff;
}
# 51 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet_vlan.h"
static inline uint8_t net_eth_vlan_get_dei(uint16_t tci)
{
 return (tci >> 12) & 0x01;
}
# 63 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet_vlan.h"
static inline uint8_t net_eth_vlan_get_pcp(uint16_t tci)
{
 return (tci >> 13) & 0x07;
}
# 76 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet_vlan.h"
static inline uint16_t net_eth_vlan_set_vid(uint16_t tci, uint16_t vid)
{
 return (tci & 0xf000) | (vid & 0x0fff);
}
# 89 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet_vlan.h"
static inline uint16_t net_eth_vlan_set_dei(uint16_t tci, 
# 89 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet_vlan.h" 3 4
                                                         _Bool 
# 89 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet_vlan.h"
                                                              dei)
{
 return (tci & 0xefff) | ((!!dei) << 12);
}
# 102 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet_vlan.h"
static inline uint16_t net_eth_vlan_set_pcp(uint16_t tci, uint8_t pcp)
{
 return (tci & 0x1fff) | ((pcp & 0x07) << 13);
}
# 30 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ptp_time.h" 1
# 39 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ptp_time.h"
struct net_ptp_time {

 union {
  struct {

   uint32_t low;
   uint16_t high;
   uint16_t unused;







  } _sec;
  uint64_t second;
 };


 uint32_t nanosecond;
};
# 76 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ptp_time.h"
struct net_ptp_extended_time {

 union {
  struct {

   uint32_t low;
   uint16_t high;
   uint16_t unused;







  } _sec;
  uint64_t second;
 };


 union {
  struct {

   uint32_t low;
   uint16_t high;
   uint16_t unused;







  } _fns;
  uint64_t fract_nsecond;
 };
} 
# 112 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ptp_time.h" 3
 __attribute__((__packed__))
# 112 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ptp_time.h"
         ;
# 31 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 2
# 43 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
struct net_context;
struct canbus_net_isotp_tx_ctx;
struct canbus_net_isotp_rx_ctx;



struct net_pkt_cursor {

 struct net_buf *buf;

 uint8_t *pos;
};







struct net_pkt {




 intptr_t fifo;


 struct k_mem_slab *slab;


 union {
  struct net_buf *frags;
  struct net_buf *buffer;
 };


 struct net_pkt_cursor cursor;


 struct net_context *context;


 struct net_if *iface;
# 95 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
 struct net_ptp_time timestamp;
# 125 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
 atomic_t atomic_ref;


 struct net_linkaddr lladdr_src;
 struct net_linkaddr lladdr_dst;



 sys_snode_t next;


 uint8_t ip_hdr_len;

 uint8_t overwrite : 1;

 uint8_t sent_or_eof: 1;




 union {
  uint8_t pkt_queued: 1;




  uint8_t ptp_pkt: 1;



 };

 uint8_t forwarding : 1;


 uint8_t family : 3;

 union {
  uint8_t ipv4_auto_arp_msg : 1;





  uint8_t lldp_pkt : 1;





  uint8_t ppp_msg : 1;
 };


 uint8_t tcp_first_msg : 1;





 uint8_t captured : 1;



 uint8_t l2_bridged : 1;





 union {



  uint8_t ipv6_hop_limit;
  uint8_t ipv4_ttl;
 };

 union {

  uint8_t ipv4_opts_len;


  uint16_t ipv6_ext_len;

 };




 uint8_t priority;
# 232 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
 uint16_t ipv6_prev_hdr_start;







 uint8_t ipv6_ext_opt_len;
 uint8_t ipv6_next_hdr;
# 272 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
};




static inline struct net_linkaddr *net_pkt_lladdr_if(struct net_pkt *pkt)
{
 return net_if_get_link_addr(pkt->iface);
}

static inline struct net_context *net_pkt_context(struct net_pkt *pkt)
{
 return pkt->context;
}

static inline void net_pkt_set_context(struct net_pkt *pkt,
           struct net_context *ctx)
{
 pkt->context = ctx;
}

static inline struct net_if *net_pkt_iface(struct net_pkt *pkt)
{
 return pkt->iface;
}

static inline void net_pkt_set_iface(struct net_pkt *pkt, struct net_if *iface)
{
 pkt->iface = iface;





 if (iface) {
  pkt->lladdr_src.type = net_if_get_link_addr(iface)->type;
  pkt->lladdr_dst.type = net_if_get_link_addr(iface)->type;
 }
}

static inline struct net_if *net_pkt_orig_iface(struct net_pkt *pkt)
{



 return pkt->iface;

}

static inline void net_pkt_set_orig_iface(struct net_pkt *pkt,
       struct net_if *iface)
{



}

static inline uint8_t net_pkt_family(struct net_pkt *pkt)
{
 return pkt->family;
}

static inline void net_pkt_set_family(struct net_pkt *pkt, uint8_t family)
{
 pkt->family = family;
}

static inline 
# 339 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
             _Bool 
# 339 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                  net_pkt_is_ptp(struct net_pkt *pkt)
{
 return !!(pkt->ptp_pkt);
}

static inline void net_pkt_set_ptp(struct net_pkt *pkt, 
# 344 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
                                                       _Bool 
# 344 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                                                            is_ptp)
{
 pkt->ptp_pkt = is_ptp;
}

static inline 
# 349 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
             _Bool 
# 349 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                  net_pkt_is_captured(struct net_pkt *pkt)
{
 return !!(pkt->captured);
}

static inline void net_pkt_set_captured(struct net_pkt *pkt, 
# 354 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
                                                            _Bool 
# 354 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                                                                 is_captured)
{
 pkt->captured = is_captured;
}

static inline 
# 359 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
             _Bool 
# 359 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                  net_pkt_is_l2_bridged(struct net_pkt *pkt)
{
 return 0 ? !!(pkt->l2_bridged) : 0;
}

static inline void net_pkt_set_l2_bridged(struct net_pkt *pkt, 
# 364 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
                                                              _Bool 
# 364 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                                                                   is_l2_bridged)
{
 if (0) {
  pkt->l2_bridged = is_l2_bridged;
 }
}

static inline uint8_t net_pkt_ip_hdr_len(struct net_pkt *pkt)
{
 return pkt->ip_hdr_len;
}

static inline void net_pkt_set_ip_hdr_len(struct net_pkt *pkt, uint8_t len)
{
 pkt->ip_hdr_len = len;
}

static inline uint8_t net_pkt_sent(struct net_pkt *pkt)
{
 return pkt->sent_or_eof;
}

static inline void net_pkt_set_sent(struct net_pkt *pkt, 
# 386 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
                                                        _Bool 
# 386 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                                                             sent)
{
 pkt->sent_or_eof = sent;
}

static inline uint8_t net_pkt_queued(struct net_pkt *pkt)
{
 return pkt->pkt_queued;
}

static inline void net_pkt_set_queued(struct net_pkt *pkt, 
# 396 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
                                                          _Bool 
# 396 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                                                               send)
{
 pkt->pkt_queued = send;
}

static inline uint8_t net_pkt_tcp_1st_msg(struct net_pkt *pkt)
{

 return pkt->tcp_first_msg;



}

static inline void net_pkt_set_tcp_1st_msg(struct net_pkt *pkt, 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
                                                               _Bool 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                                                                    is_1st)
{

 pkt->tcp_first_msg = is_1st;




}
# 433 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
static inline 
# 433 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
             _Bool 
# 433 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                  net_pkt_forwarding(struct net_pkt *pkt)
{
 return pkt->forwarding;
}

static inline void net_pkt_set_forwarding(struct net_pkt *pkt, 
# 438 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
                                                              _Bool 
# 438 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                                                                   forward)
{
 pkt->forwarding = forward;
}
# 450 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
static inline uint8_t net_pkt_ipv4_ttl(struct net_pkt *pkt)
{
 return pkt->ipv4_ttl;
}

static inline void net_pkt_set_ipv4_ttl(struct net_pkt *pkt,
     uint8_t ttl)
{
 pkt->ipv4_ttl = ttl;
}

static inline uint8_t net_pkt_ipv4_opts_len(struct net_pkt *pkt)
{
 return pkt->ipv4_opts_len;
}

static inline void net_pkt_set_ipv4_opts_len(struct net_pkt *pkt,
          uint8_t opts_len)
{
 pkt->ipv4_opts_len = opts_len;
}
# 501 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
static inline uint8_t net_pkt_ipv6_ext_opt_len(struct net_pkt *pkt)
{
 return pkt->ipv6_ext_opt_len;
}

static inline void net_pkt_set_ipv6_ext_opt_len(struct net_pkt *pkt,
      uint8_t len)
{
 pkt->ipv6_ext_opt_len = len;
}

static inline uint8_t net_pkt_ipv6_next_hdr(struct net_pkt *pkt)
{
 return pkt->ipv6_next_hdr;
}

static inline void net_pkt_set_ipv6_next_hdr(struct net_pkt *pkt,
          uint8_t next_hdr)
{
 pkt->ipv6_next_hdr = next_hdr;
}

static inline uint16_t net_pkt_ipv6_ext_len(struct net_pkt *pkt)
{
 return pkt->ipv6_ext_len;
}

static inline void net_pkt_set_ipv6_ext_len(struct net_pkt *pkt, uint16_t len)
{
 pkt->ipv6_ext_len = len;
}

static inline uint16_t net_pkt_ipv6_hdr_prev(struct net_pkt *pkt)
{
 return pkt->ipv6_prev_hdr_start;
}

static inline void net_pkt_set_ipv6_hdr_prev(struct net_pkt *pkt,
          uint16_t offset)
{
 pkt->ipv6_prev_hdr_start = offset;
}

static inline uint8_t net_pkt_ipv6_hop_limit(struct net_pkt *pkt)
{
 return pkt->ipv6_hop_limit;
}

static inline void net_pkt_set_ipv6_hop_limit(struct net_pkt *pkt,
           uint8_t hop_limit)
{
 pkt->ipv6_hop_limit = hop_limit;
}
# 625 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
static inline uint16_t net_pkt_ip_opts_len(struct net_pkt *pkt)
{

 return pkt->ipv6_ext_len;







}
# 676 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
static inline uint16_t net_pkt_ipv6_fragment_start(struct net_pkt *pkt)
{
 (void)(pkt);

 return 0;
}

static inline void net_pkt_set_ipv6_fragment_start(struct net_pkt *pkt,
         uint16_t start)
{
 (void)(pkt);
 (void)(start);
}

static inline uint16_t net_pkt_ipv6_fragment_offset(struct net_pkt *pkt)
{
 (void)(pkt);

 return 0;
}

static inline 
# 697 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
             _Bool 
# 697 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                  net_pkt_ipv6_fragment_more(struct net_pkt *pkt)
{
 (void)(pkt);

 return 0;
}

static inline void net_pkt_set_ipv6_fragment_flags(struct net_pkt *pkt,
         uint16_t flags)
{
 (void)(pkt);
 (void)(flags);
}

static inline uint32_t net_pkt_ipv6_fragment_id(struct net_pkt *pkt)
{
 (void)(pkt);

 return 0;
}

static inline void net_pkt_set_ipv6_fragment_id(struct net_pkt *pkt,
      uint32_t id)
{
 (void)(pkt);
 (void)(id);
}


static inline uint8_t net_pkt_priority(struct net_pkt *pkt)
{
 return pkt->priority;
}

static inline void net_pkt_set_priority(struct net_pkt *pkt,
     uint8_t priority)
{
 pkt->priority = priority;
}
# 779 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
static inline uint16_t net_pkt_vlan_tag(struct net_pkt *pkt)
{
 return 0x0fff;
}

static inline void net_pkt_set_vlan_tag(struct net_pkt *pkt, uint16_t tag)
{
 (void)(pkt);
 (void)(tag);
}

static inline uint8_t net_pkt_vlan_priority(struct net_pkt *pkt)
{
 (void)(pkt);
 return 0;
}

static inline 
# 796 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
             _Bool 
# 796 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                  net_pkt_vlan_dei(struct net_pkt *pkt)
{
 return 
# 798 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
       0
# 798 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
            ;
}

static inline void net_pkt_set_vlan_dei(struct net_pkt *pkt, 
# 801 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
                                                            _Bool 
# 801 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                                                                 dei)
{
 (void)(pkt);
 (void)(dei);
}

static inline uint16_t net_pkt_vlan_tci(struct net_pkt *pkt)
{
 return 0x0fff;
}

static inline void net_pkt_set_vlan_tci(struct net_pkt *pkt, uint16_t tci)
{
 (void)(pkt);
 (void)(tci);
}



static inline struct net_ptp_time *net_pkt_timestamp(struct net_pkt *pkt)
{
 return &pkt->timestamp;
}

static inline void net_pkt_set_timestamp(struct net_pkt *pkt,
      struct net_ptp_time *timestamp)
{
 pkt->timestamp.second = timestamp->second;
 pkt->timestamp.nanosecond = timestamp->nanosecond;
}
# 859 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
static inline uint32_t net_pkt_create_time(struct net_pkt *pkt)
{
 (void)(pkt);

 return 0U;
}

static inline void net_pkt_set_create_time(struct net_pkt *pkt,
        uint32_t create_time)
{
 (void)(pkt);
 (void)(create_time);
}
# 885 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
static inline uint64_t net_pkt_txtime(struct net_pkt *pkt)
{
 (void)(pkt);

 return 0;
}

static inline void net_pkt_set_txtime(struct net_pkt *pkt, uint64_t txtime)
{
 (void)(pkt);
 (void)(txtime);
}
# 931 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
static inline uint32_t *net_pkt_stats_tick(struct net_pkt *pkt)
{
 (void)(pkt);

 return 
# 935 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
       ((void *)0)
# 935 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
           ;
}

static inline int net_pkt_stats_tick_count(struct net_pkt *pkt)
{
 (void)(pkt);

 return 0;
}

static inline void net_pkt_stats_tick_reset(struct net_pkt *pkt)
{
 (void)(pkt);
}

static inline void net_pkt_set_stats_tick(struct net_pkt *pkt, uint32_t tick)
{
 (void)(pkt);
 (void)(tick);
}






static inline size_t net_pkt_get_len(struct net_pkt *pkt)
{
 return net_buf_frags_len(pkt->frags);
}

static inline uint8_t *net_pkt_data(struct net_pkt *pkt)
{
 return pkt->frags->data;
}

static inline uint8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
 return pkt->frags->data;
}

static inline 
# 976 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
             _Bool 
# 976 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                  net_pkt_is_empty(struct net_pkt *pkt)
{
 return !pkt->buffer || !net_pkt_data(pkt) || pkt->buffer->len == 0;
}

static inline struct net_linkaddr *net_pkt_lladdr_src(struct net_pkt *pkt)
{
 return &pkt->lladdr_src;
}

static inline struct net_linkaddr *net_pkt_lladdr_dst(struct net_pkt *pkt)
{
 return &pkt->lladdr_dst;
}

static inline void net_pkt_lladdr_swap(struct net_pkt *pkt)
{
 uint8_t *addr = net_pkt_lladdr_src(pkt)->addr;

 net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_dst(pkt)->addr;
 net_pkt_lladdr_dst(pkt)->addr = addr;
}

static inline void net_pkt_lladdr_clear(struct net_pkt *pkt)
{
 net_pkt_lladdr_src(pkt)->addr = 
# 1001 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
                                ((void *)0)
# 1001 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                                    ;
 net_pkt_lladdr_src(pkt)->len = 0U;
}
# 1128 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
static inline 
# 1128 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
             _Bool 
# 1128 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                  net_pkt_ipv4_auto(struct net_pkt *pkt)
{
 (void)(pkt);

 return 
# 1132 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
       0
# 1132 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
            ;
}

static inline void net_pkt_set_ipv4_auto(struct net_pkt *pkt,
      
# 1136 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
     _Bool 
# 1136 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
          is_auto_arp_msg)
{
 (void)(pkt);
 (void)(is_auto_arp_msg);
}



static inline 
# 1144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
             _Bool 
# 1144 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                  net_pkt_is_lldp(struct net_pkt *pkt)
{
 return pkt->lldp_pkt;
}

static inline void net_pkt_set_lldp(struct net_pkt *pkt, 
# 1149 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
                                                        _Bool 
# 1149 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                                                             is_lldp)
{
 pkt->lldp_pkt = is_lldp;
}
# 1180 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
static inline 
# 1180 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
             _Bool 
# 1180 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                  net_pkt_is_ppp(struct net_pkt *pkt)
{
 (void)(pkt);

 return 
# 1184 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
       0
# 1184 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
            ;
}

static inline void net_pkt_set_ppp(struct net_pkt *pkt,
       
# 1188 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
      _Bool 
# 1188 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
           is_ppp_msg)
{
 (void)(pkt);
 (void)(is_ppp_msg);
}





static inline void net_pkt_set_src_ipv6_addr(struct net_pkt *pkt)
{
 net_if_ipv6_select_src_addr(net_context_get_iface(
         net_pkt_context(pkt)),
        (struct in6_addr *)((struct net_ipv6_hdr *)net_pkt_ip_data(pkt))->src);
}

static inline void net_pkt_set_overwrite(struct net_pkt *pkt, 
# 1205 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
                                                             _Bool 
# 1205 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                                                                  overwrite)
{
 pkt->overwrite = overwrite;
}

static inline 
# 1210 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
             _Bool 
# 1210 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                  net_pkt_is_being_overwritten(struct net_pkt *pkt)
{
 return pkt->overwrite;
}
# 1222 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
static inline 
# 1222 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
             _Bool 
# 1222 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                  net_pkt_filter_send_ok(struct net_pkt *pkt)
{
 (void)(pkt);

 return 
# 1226 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
       1
# 1226 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
           ;
}

static inline 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
             _Bool 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
                  net_pkt_filter_recv_ok(struct net_pkt *pkt)
{
 (void)(pkt);

 return 
# 1233 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
       1
# 1233 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
           ;
}
# 1379 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
struct net_buf *net_pkt_get_reserve_rx_data(k_timeout_t timeout);
# 1396 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
struct net_buf *net_pkt_get_reserve_tx_data(k_timeout_t timeout);
# 1411 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
struct net_buf *net_pkt_get_frag(struct net_pkt *pkt, k_timeout_t timeout);
# 1424 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
void net_pkt_unref(struct net_pkt *pkt);
# 1437 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
struct net_pkt *net_pkt_ref(struct net_pkt *pkt);
# 1450 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
struct net_buf *net_pkt_frag_ref(struct net_buf *frag);
# 1459 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
void net_pkt_frag_unref(struct net_buf *frag);
# 1473 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
struct net_buf *net_pkt_frag_del(struct net_pkt *pkt,
     struct net_buf *parent,
     struct net_buf *frag);
# 1485 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
void net_pkt_frag_add(struct net_pkt *pkt, struct net_buf *frag);
# 1495 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
void net_pkt_frag_insert(struct net_pkt *pkt, struct net_buf *frag);
# 1506 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"

# 1506 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
_Bool 
# 1506 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
    net_pkt_compact(struct net_pkt *pkt);
# 1516 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
void net_pkt_get_info(struct k_mem_slab **rx,
        struct k_mem_slab **tx,
        struct net_buf_pool **rx_data,
        struct net_buf_pool **tx_data);
# 1631 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
struct net_pkt *net_pkt_alloc(k_timeout_t timeout);
# 1649 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
struct net_pkt *net_pkt_alloc_from_slab(struct k_mem_slab *slab,
     k_timeout_t timeout);
# 1664 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
struct net_pkt *net_pkt_rx_alloc(k_timeout_t timeout);
# 1676 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
struct net_pkt *net_pkt_alloc_on_iface(struct net_if *iface,
           k_timeout_t timeout);


struct net_pkt *net_pkt_rx_alloc_on_iface(struct net_if *iface,
       k_timeout_t timeout);
# 1700 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
int net_pkt_alloc_buffer(struct net_pkt *pkt,
    size_t size,
    enum net_ip_protocol proto,
    k_timeout_t timeout);
# 1718 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
struct net_pkt *net_pkt_alloc_with_buffer(struct net_if *iface,
       size_t size,
       sa_family_t family,
       enum net_ip_protocol proto,
       k_timeout_t timeout);


struct net_pkt *net_pkt_rx_alloc_with_buffer(struct net_if *iface,
          size_t size,
          sa_family_t family,
          enum net_ip_protocol proto,
          k_timeout_t timeout);
# 1738 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
void net_pkt_append_buffer(struct net_pkt *pkt, struct net_buf *buffer);
# 1750 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
size_t net_pkt_available_buffer(struct net_pkt *pkt);
# 1767 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
size_t net_pkt_available_payload_buffer(struct net_pkt *pkt,
     enum net_ip_protocol proto);
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
void net_pkt_trim_buffer(struct net_pkt *pkt);
# 1794 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
int net_pkt_remove_tail(struct net_pkt *pkt, size_t length);
# 1803 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
void net_pkt_cursor_init(struct net_pkt *pkt);







static inline void net_pkt_cursor_backup(struct net_pkt *pkt,
      struct net_pkt_cursor *backup)
{
 backup->buf = pkt->cursor.buf;
 backup->pos = pkt->cursor.pos;
}







static inline void net_pkt_cursor_restore(struct net_pkt *pkt,
       struct net_pkt_cursor *backup)
{
 pkt->cursor.buf = backup->buf;
 pkt->cursor.pos = backup->pos;
}
# 1838 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
static inline void *net_pkt_cursor_get_pos(struct net_pkt *pkt)
{
 return pkt->cursor.pos;
}
# 1863 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
int net_pkt_skip(struct net_pkt *pkt, size_t length);
# 1879 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
int net_pkt_memset(struct net_pkt *pkt, int byte, size_t length);
# 1894 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
int net_pkt_copy(struct net_pkt *pkt_dst,
   struct net_pkt *pkt_src,
   size_t length);
# 1906 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
struct net_pkt *net_pkt_clone(struct net_pkt *pkt, k_timeout_t timeout);
# 1916 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
struct net_pkt *net_pkt_shallow_clone(struct net_pkt *pkt,
          k_timeout_t timeout);
# 1932 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
int net_pkt_read(struct net_pkt *pkt, void *data, size_t length);


static inline int net_pkt_read_u8(struct net_pkt *pkt, uint8_t *data)
{
 return net_pkt_read(pkt, data, 1);
}
# 1952 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
int net_pkt_read_be16(struct net_pkt *pkt, uint16_t *data);
# 1966 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
int net_pkt_read_le16(struct net_pkt *pkt, uint16_t *data);
# 1980 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
int net_pkt_read_be32(struct net_pkt *pkt, uint32_t *data);
# 1995 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
int net_pkt_write(struct net_pkt *pkt, const void *data, size_t length);


static inline int net_pkt_write_u8(struct net_pkt *pkt, uint8_t data)
{
 return net_pkt_write(pkt, &data, sizeof(uint8_t));
}


static inline int net_pkt_write_be16(struct net_pkt *pkt, uint16_t data)
{
 uint16_t data_be16 = ((uint16_t) ((((data) >> 8) & 0xff) | (((data) & 0xff) << 8)));

 return net_pkt_write(pkt, &data_be16, sizeof(uint16_t));
}


static inline int net_pkt_write_be32(struct net_pkt *pkt, uint32_t data)
{
 uint32_t data_be32 = ((uint32_t) ((((data) >> 24) & 0xff) | (((data) >> 8) & 0xff00) | (((data) & 0xff00) << 8) | (((data) & 0xff) << 24)));

 return net_pkt_write(pkt, &data_be32, sizeof(uint32_t));
}


static inline int net_pkt_write_le32(struct net_pkt *pkt, uint32_t data)
{
 uint32_t data_le32 = (data);

 return net_pkt_write(pkt, &data_le32, sizeof(uint32_t));
}


static inline int net_pkt_write_le16(struct net_pkt *pkt, uint16_t data)
{
 uint16_t data_le16 = (data);

 return net_pkt_write(pkt, &data_le16, sizeof(uint16_t));
}
# 2042 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
size_t net_pkt_remaining_data(struct net_pkt *pkt);
# 2056 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
int net_pkt_update_length(struct net_pkt *pkt, size_t length);
# 2070 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
int net_pkt_pull(struct net_pkt *pkt, size_t length);
# 2080 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
uint16_t net_pkt_get_current_offset(struct net_pkt *pkt);
# 2093 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"

# 2093 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h" 3 4
_Bool 
# 2093 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
    net_pkt_is_contiguous(struct net_pkt *pkt, size_t size);
# 2103 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
size_t net_pkt_get_contiguous_len(struct net_pkt *pkt);

struct net_pkt_data_access {

 void *data;

 const size_t size;
};
# 2150 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
void *net_pkt_get_data(struct net_pkt *pkt,
         struct net_pkt_data_access *access);
# 2166 "/home/sebin/thesis/zephyrproject/zephyr/include/net/net_pkt.h"
int net_pkt_set_data(struct net_pkt *pkt,
       struct net_pkt_data_access *access);





static inline int net_pkt_acknowledge_data(struct net_pkt *pkt,
        struct net_pkt_data_access *access)
{
 return net_pkt_skip(pkt, access->size);
}
# 20 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 2


# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 1
# 25 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/lldp.h" 1
# 116 "/home/sebin/thesis/zephyrproject/zephyr/include/net/lldp.h"
struct net_if;




enum net_lldp_tlv_type {
 LLDP_TLV_END_LLDPDU = 0,
 LLDP_TLV_CHASSIS_ID = 1,
 LLDP_TLV_PORT_ID = 2,
 LLDP_TLV_TTL = 3,
 LLDP_TLV_PORT_DESC = 4,
 LLDP_TLV_SYSTEM_NAME = 5,
 LLDP_TLV_SYSTEM_DESC = 6,
 LLDP_TLV_SYSTEM_CAPABILITIES = 7,
 LLDP_TLV_MANAGEMENT_ADDR = 8,

 LLDP_TLV_ORG_SPECIFIC = 127,
};


struct net_lldp_chassis_tlv {

 uint16_t type_length;

 uint8_t subtype;

 uint8_t value[(6)];
} 
# 143 "/home/sebin/thesis/zephyrproject/zephyr/include/net/lldp.h" 3
 __attribute__((__packed__))
# 143 "/home/sebin/thesis/zephyrproject/zephyr/include/net/lldp.h"
         ;


struct net_lldp_port_tlv {

 uint16_t type_length;

 uint8_t subtype;

 uint8_t value[(sizeof("PORT_ID_PLACEHOLDER") - 1)];
} 
# 153 "/home/sebin/thesis/zephyrproject/zephyr/include/net/lldp.h" 3
 __attribute__((__packed__))
# 153 "/home/sebin/thesis/zephyrproject/zephyr/include/net/lldp.h"
         ;


struct net_lldp_time_to_live_tlv {

 uint16_t type_length;

 uint16_t ttl;
} 
# 161 "/home/sebin/thesis/zephyrproject/zephyr/include/net/lldp.h" 3
 __attribute__((__packed__))
# 161 "/home/sebin/thesis/zephyrproject/zephyr/include/net/lldp.h"
         ;





struct net_lldpdu {
 struct net_lldp_chassis_tlv chassis_id;
 struct net_lldp_port_tlv port_id;
 struct net_lldp_time_to_live_tlv ttl;
} 
# 171 "/home/sebin/thesis/zephyrproject/zephyr/include/net/lldp.h" 3
 __attribute__((__packed__))
# 171 "/home/sebin/thesis/zephyrproject/zephyr/include/net/lldp.h"
         ;
# 181 "/home/sebin/thesis/zephyrproject/zephyr/include/net/lldp.h"
int net_lldp_config(struct net_if *iface, const struct net_lldpdu *lldpdu);
# 192 "/home/sebin/thesis/zephyrproject/zephyr/include/net/lldp.h"
int net_lldp_config_optional(struct net_if *iface, const uint8_t *tlv,
        size_t len);




void net_lldp_init(void);
# 213 "/home/sebin/thesis/zephyrproject/zephyr/include/net/lldp.h"
typedef enum net_verdict (*net_lldp_recv_cb_t)(struct net_if *iface,
            struct net_pkt *pkt);
# 224 "/home/sebin/thesis/zephyrproject/zephyr/include/net/lldp.h"
int net_lldp_register_callback(struct net_if *iface, net_lldp_recv_cb_t cb);
# 234 "/home/sebin/thesis/zephyrproject/zephyr/include/net/lldp.h"
enum net_verdict net_lldp_recv(struct net_if *iface, struct net_pkt *pkt);
# 244 "/home/sebin/thesis/zephyrproject/zephyr/include/net/lldp.h"
int net_lldp_set_lldpdu(struct net_if *iface);
# 255 "/home/sebin/thesis/zephyrproject/zephyr/include/net/lldp.h"
void net_lldp_unset_lldpdu(struct net_if *iface);
# 26 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 2
# 54 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
struct net_eth_addr {
 uint8_t addr[6];
};
# 113 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
enum ethernet_hw_caps {

 ETHERNET_HW_TX_CHKSUM_OFFLOAD = (1UL << (0)),


 ETHERNET_HW_RX_CHKSUM_OFFLOAD = (1UL << (1)),


 ETHERNET_HW_VLAN = (1UL << (2)),


 ETHERNET_AUTO_NEGOTIATION_SET = (1UL << (3)),


 ETHERNET_LINK_10BASE_T = (1UL << (4)),


 ETHERNET_LINK_100BASE_T = (1UL << (5)),


 ETHERNET_LINK_1000BASE_T = (1UL << (6)),


 ETHERNET_DUPLEX_SET = (1UL << (7)),


 ETHERNET_PTP = (1UL << (8)),


 ETHERNET_QAV = (1UL << (9)),


 ETHERNET_PROMISC_MODE = (1UL << (10)),


 ETHERNET_PRIORITY_QUEUES = (1UL << (11)),


 ETHERNET_HW_FILTERING = (1UL << (12)),


 ETHERNET_LLDP = (1UL << (13)),


 ETHERNET_HW_VLAN_TAG_STRIP = (1UL << (14)),


 ETHERNET_DSA_SLAVE_PORT = (1UL << (15)),
 ETHERNET_DSA_MASTER_PORT = (1UL << (16)),


 ETHERNET_QBV = (1UL << (17)),


 ETHERNET_QBU = (1UL << (18)),


 ETHERNET_TXTIME = (1UL << (19)),
};



enum ethernet_config_type {
 ETHERNET_CONFIG_TYPE_AUTO_NEG,
 ETHERNET_CONFIG_TYPE_LINK,
 ETHERNET_CONFIG_TYPE_DUPLEX,
 ETHERNET_CONFIG_TYPE_MAC_ADDRESS,
 ETHERNET_CONFIG_TYPE_QAV_PARAM,
 ETHERNET_CONFIG_TYPE_QBV_PARAM,
 ETHERNET_CONFIG_TYPE_QBU_PARAM,
 ETHERNET_CONFIG_TYPE_TXTIME_PARAM,
 ETHERNET_CONFIG_TYPE_PROMISC_MODE,
 ETHERNET_CONFIG_TYPE_PRIORITY_QUEUES_NUM,
 ETHERNET_CONFIG_TYPE_FILTER,
 ETHERNET_CONFIG_TYPE_PORTS_NUM,
};

enum ethernet_qav_param_type {
 ETHERNET_QAV_PARAM_TYPE_DELTA_BANDWIDTH,
 ETHERNET_QAV_PARAM_TYPE_IDLE_SLOPE,
 ETHERNET_QAV_PARAM_TYPE_OPER_IDLE_SLOPE,
 ETHERNET_QAV_PARAM_TYPE_TRAFFIC_CLASS,
 ETHERNET_QAV_PARAM_TYPE_STATUS,
};



struct ethernet_qav_param {

 int queue_id;

 enum ethernet_qav_param_type type;
 union {

  
# 207 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
 _Bool 
# 207 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
      enabled;

  unsigned int delta_bandwidth;

  unsigned int idle_slope;

  unsigned int oper_idle_slope;

  unsigned int traffic_class;
 };
};



enum ethernet_qbv_param_type {
 ETHERNET_QBV_PARAM_TYPE_STATUS,
 ETHERNET_QBV_PARAM_TYPE_GATE_CONTROL_LIST,
 ETHERNET_QBV_PARAM_TYPE_GATE_CONTROL_LIST_LEN,
 ETHERNET_QBV_PARAM_TYPE_TIME,
};

enum ethernet_qbv_state_type {
 ETHERNET_QBV_STATE_TYPE_ADMIN,
 ETHERNET_QBV_STATE_TYPE_OPER,
};

enum ethernet_gate_state_operation {
 ETHERNET_SET_GATE_STATE,
 ETHERNET_SET_AND_HOLD_MAC_STATE,
 ETHERNET_SET_AND_RELEASE_MAC_STATE,
};



struct ethernet_qbv_param {

 int port_id;

 enum ethernet_qbv_param_type type;

 enum ethernet_qbv_state_type state;
 union {

  
# 250 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
 _Bool 
# 250 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
      enabled;

  struct {

   
# 254 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
  _Bool 
# 254 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
       gate_status[6];


   enum ethernet_gate_state_operation operation;


   uint32_t time_interval;


   uint16_t row;
  } gate_control;


  uint32_t gate_control_list_len;




  struct {

   struct net_ptp_extended_time base_time;


   struct net_ptp_time cycle_time;


   uint32_t extension_time;
  };
 };
};



enum ethernet_qbu_param_type {
 ETHERNET_QBU_PARAM_TYPE_STATUS,
 ETHERNET_QBU_PARAM_TYPE_RELEASE_ADVANCE,
 ETHERNET_QBU_PARAM_TYPE_HOLD_ADVANCE,
 ETHERNET_QBU_PARAM_TYPE_PREEMPTION_STATUS_TABLE,


 ETHERNET_QBR_PARAM_TYPE_LINK_PARTNER_STATUS,
 ETHERNET_QBR_PARAM_TYPE_ADDITIONAL_FRAGMENT_SIZE,
};

enum ethernet_qbu_preempt_status {
 ETHERNET_QBU_STATUS_EXPRESS,
 ETHERNET_QBU_STATUS_PREEMPTABLE
} 
# 301 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3
 __attribute__((__packed__))
# 301 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
         ;



struct ethernet_qbu_param {

 int port_id;

 enum ethernet_qbu_param_type type;
 union {

  uint32_t hold_advance;


  uint32_t release_advance;



  enum ethernet_qbu_preempt_status
    frame_preempt_statuses[6];


  
# 323 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
 _Bool 
# 323 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
      enabled;


  
# 326 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
 _Bool 
# 326 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
      link_partner_status;




  uint8_t additional_fragment_size : 2;
 };
};




enum ethernet_filter_type {
 ETHERNET_FILTER_TYPE_SRC_MAC_ADDRESS,
 ETHERNET_FILTER_TYPE_DST_MAC_ADDRESS,
};



struct ethernet_filter {

 enum ethernet_filter_type type;

 struct net_eth_addr mac_address;

 
# 351 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
_Bool 
# 351 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
     set;
};



enum ethernet_txtime_param_type {
 ETHERNET_TXTIME_PARAM_TYPE_ENABLE_QUEUES,
};



struct ethernet_txtime_param {

 enum ethernet_txtime_param_type type;

 int queue_id;

 
# 368 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
_Bool 
# 368 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
     enable_txtime;
};


struct ethernet_config {
 union {
  
# 374 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
 _Bool 
# 374 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
      auto_negotiation;
  
# 375 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
 _Bool 
# 375 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
      full_duplex;
  
# 376 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
 _Bool 
# 376 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
      promisc_mode;

  struct {
   
# 379 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
  _Bool 
# 379 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
       link_10bt;
   
# 380 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
  _Bool 
# 380 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
       link_100bt;
   
# 381 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
  _Bool 
# 381 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
       link_1000bt;
  } l;

  struct net_eth_addr mac_address;

  struct ethernet_qav_param qav_param;
  struct ethernet_qbv_param qbv_param;
  struct ethernet_qbu_param qbu_param;
  struct ethernet_txtime_param txtime_param;

  int priority_queues_num;
  int ports_num;

  struct ethernet_filter filter;
 };
};


struct ethernet_api {




 struct net_if_api iface_api;






 struct net_stats_eth *(*get_stats)(const struct device *dev);



 int (*start)(const struct device *dev);


 int (*stop)(const struct device *dev);


 enum ethernet_hw_caps (*get_capabilities)(const struct device *dev);


 int (*set_config)(const struct device *dev,
     enum ethernet_config_type type,
     const struct ethernet_config *config);


 int (*get_config)(const struct device *dev,
     enum ethernet_config_type type,
     struct ethernet_config *config);
# 445 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
 const struct device *(*get_ptp_clock)(const struct device *dev);



 int (*send)(const struct device *dev, struct net_pkt *pkt);
};




_Static_assert(
# 455 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
__builtin_offsetof (
# 455 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
struct ethernet_api
# 455 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
, 
# 455 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
iface_api
# 455 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
) 
# 455 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
== 0, "" );


struct net_eth_hdr {
 struct net_eth_addr dst;
 struct net_eth_addr src;
 uint16_t type;
} 
# 462 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3
 __attribute__((__packed__))
# 462 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
         ;

struct ethernet_vlan {

 struct net_if *iface;


 uint16_t tag;
};
# 483 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
struct ethernet_lldp {

 sys_snode_t node;


 const struct net_lldpdu *lldpdu;


 const uint8_t *optional_du;


 size_t optional_len;


 struct net_if *iface;


 int64_t tx_timer_start;


 uint32_t tx_timer_timeout;


 net_lldp_recv_cb_t cb;
};


enum ethernet_flags {
 ETH_CARRIER_UP,
};


struct ethernet_context {



 atomic_t flags;
# 542 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
 struct k_work carrier_work;


 struct net_if *iface;


 struct ethernet_lldp lldp[1];





 enum net_l2_flags ethernet_l2_flags;






 int port;
# 589 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
 
# 589 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
_Bool 
# 589 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
     is_net_carrier_up : 1;


 
# 592 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
_Bool 
# 592 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
     is_init : 1;
};






void ethernet_init(struct net_if *iface);
# 609 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
struct net_eth_vlan_hdr {
 struct net_eth_addr dst;
 struct net_eth_addr src;
 struct {
  uint16_t tpid;
  uint16_t tci;
 } vlan;
 uint16_t type;
} 
# 617 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3
 __attribute__((__packed__))
# 617 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
         ;


static inline 
# 620 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
             _Bool 
# 620 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
                  net_eth_is_addr_broadcast(struct net_eth_addr *addr)
{
 if (addr->addr[0] == 0xff &&
     addr->addr[1] == 0xff &&
     addr->addr[2] == 0xff &&
     addr->addr[3] == 0xff &&
     addr->addr[4] == 0xff &&
     addr->addr[5] == 0xff) {
  return 
# 628 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
        1
# 628 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
            ;
 }

 return 
# 631 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
       0
# 631 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
            ;
}

static inline 
# 634 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
             _Bool 
# 634 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
                  net_eth_is_addr_unspecified(struct net_eth_addr *addr)
{
 if (addr->addr[0] == 0x00 &&
     addr->addr[1] == 0x00 &&
     addr->addr[2] == 0x00 &&
     addr->addr[3] == 0x00 &&
     addr->addr[4] == 0x00 &&
     addr->addr[5] == 0x00) {
  return 
# 642 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
        1
# 642 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
            ;
 }

 return 
# 645 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
       0
# 645 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
            ;
}

static inline 
# 648 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
             _Bool 
# 648 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
                  net_eth_is_addr_multicast(struct net_eth_addr *addr)
{

 if (addr->addr[0] == 0x33 &&
     addr->addr[1] == 0x33) {
  return 
# 653 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
        1
# 653 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
            ;
 }



 if (addr->addr[0] == 0x01 &&
     addr->addr[1] == 0x00 &&
     addr->addr[2] == 0x5e) {
  return 
# 661 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
        1
# 661 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
            ;
 }


 return 
# 665 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
       0
# 665 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
            ;
}

static inline 
# 668 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
             _Bool 
# 668 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
                  net_eth_is_addr_lldp_multicast(struct net_eth_addr *addr)
{

 if (addr->addr[0] == 0x01 &&
     addr->addr[1] == 0x80 &&
     addr->addr[2] == 0xc2 &&
     addr->addr[3] == 0x00 &&
     addr->addr[4] == 0x00 &&
     addr->addr[5] == 0x0e) {
  return 
# 677 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
        1
# 677 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
            ;
 }
# 691 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
 return 
# 691 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
       0
# 691 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
            ;
}

const struct net_eth_addr *net_eth_broadcast_addr(void);
# 704 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
void net_eth_ipv4_mcast_to_mac_addr(const struct in_addr *ipv4_addr,
        struct net_eth_addr *mac_addr);







void net_eth_ipv6_mcast_to_mac_addr(const struct in6_addr *ipv6_addr,
        struct net_eth_addr *mac_addr);
# 723 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
static inline
enum ethernet_hw_caps net_eth_get_hw_capabilities(struct net_if *iface)
{
 const struct ethernet_api *eth =
  (struct ethernet_api *)net_if_get_device(iface)->api;

 if (!eth->get_capabilities) {
  return (enum ethernet_hw_caps)0;
 }

 return eth->get_capabilities(net_if_get_device(iface));
}
# 747 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
static inline int net_eth_vlan_enable(struct net_if *iface, uint16_t tag)
{
 return -
# 749 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3
        22
# 749 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
              ;
}
# 764 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
static inline int net_eth_vlan_disable(struct net_if *iface, uint16_t tag)
{
 return -
# 766 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3
        22
# 766 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
              ;
}
# 781 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
static inline uint16_t net_eth_get_vlan_tag(struct net_if *iface)
{
 return 0x0fff;
}
# 800 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
static inline
struct net_if *net_eth_get_vlan_iface(struct net_if *iface, uint16_t tag)
{
 return 
# 803 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
       ((void *)0)
# 803 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
           ;
}
# 819 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
static inline 
# 819 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
             _Bool 
# 819 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
                  net_eth_is_vlan_enabled(struct ethernet_context *ctx,
        struct net_if *iface)
{
 return 
# 822 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
       0
# 822 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
            ;
}
# 836 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
static inline 
# 836 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
             _Bool 
# 836 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
                  net_eth_get_vlan_status(struct net_if *iface)
{
 return 
# 838 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
       0
# 838 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
            ;
}
# 932 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
void net_eth_carrier_on(struct net_if *iface);







void net_eth_carrier_off(struct net_if *iface);
# 951 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
int net_eth_promisc_mode(struct net_if *iface, 
# 951 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 3 4
                                              _Bool 
# 951 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
                                                   enable);
# 962 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
const struct device *net_eth_get_ptp_clock(struct net_if *iface);
# 981 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
static inline const struct device *net_eth_get_ptp_clock_by_index(int index);
# 991 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
int net_eth_get_ptp_port(struct net_if *iface);
# 1008 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
void net_eth_set_ptp_port(struct net_if *iface, int port);
# 1019 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h"
# 1 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/ethernet.h" 1
# 18 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/ethernet.h"
#pragma GCC diagnostic push



#pragma GCC diagnostic ignored "-Wstrict-aliasing"

#pragma GCC diagnostic ignored "-Warray-bounds"







extern const struct device * z_impl_net_eth_get_ptp_clock_by_index(int index);


static inline const struct device * net_eth_get_ptp_clock_by_index(int index)
{






 do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 43 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/ethernet.h" 3 4
0
# 43 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/ethernet.h"
);
 return z_impl_net_eth_get_ptp_clock_by_index(index);
}
# 60 "/home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/include/generated/syscalls/ethernet.h"
#pragma GCC diagnostic pop
# 1020 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ethernet.h" 2
# 23 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/virtual.h" 1
# 37 "/home/sebin/thesis/zephyrproject/zephyr/include/net/virtual.h"
enum virtual_interface_caps {

 VIRTUAL_INTERFACE_IPIP = (1UL << (1)),





 VIRTUAL_INTERFACE_NUM_CAPS

};



enum virtual_interface_config_type {
 VIRTUAL_INTERFACE_CONFIG_TYPE_PEER_ADDRESS,
 VIRTUAL_INTERFACE_CONFIG_TYPE_MTU,
};

struct virtual_interface_config {
 sa_family_t family;
 union {
  struct in_addr peer4addr;
  struct in6_addr peer6addr;
  int mtu;
 };
};
# 72 "/home/sebin/thesis/zephyrproject/zephyr/include/net/virtual.h"
struct virtual_interface_api {




 struct net_if_api iface_api;


 enum virtual_interface_caps (*get_capabilities)(struct net_if *iface);


 int (*start)(const struct device *dev);


 int (*stop)(const struct device *dev);


 int (*send)(struct net_if *iface, struct net_pkt *pkt);


 enum net_verdict (*recv)(struct net_if *iface, struct net_pkt *pkt);






 enum net_verdict (*input)(struct net_if *input_iface,
      struct net_if *iface,
      struct net_addr *remote_addr,
      struct net_pkt *pkt);


 int (*attach)(struct net_if *virtual_iface, struct net_if *iface);


 int (*set_config)(struct net_if *iface,
     enum virtual_interface_config_type type,
     const struct virtual_interface_config *config);


 int (*get_config)(struct net_if *iface,
     enum virtual_interface_config_type type,
     struct virtual_interface_config *config);
};




_Static_assert(
# 121 "/home/sebin/thesis/zephyrproject/zephyr/include/net/virtual.h" 3 4
__builtin_offsetof (
# 121 "/home/sebin/thesis/zephyrproject/zephyr/include/net/virtual.h"
struct virtual_interface_api
# 121 "/home/sebin/thesis/zephyrproject/zephyr/include/net/virtual.h" 3 4
, 
# 121 "/home/sebin/thesis/zephyrproject/zephyr/include/net/virtual.h"
iface_api
# 121 "/home/sebin/thesis/zephyrproject/zephyr/include/net/virtual.h" 3 4
) 
# 121 "/home/sebin/thesis/zephyrproject/zephyr/include/net/virtual.h"
== 0, "" );



struct virtual_interface_context {


 sys_snode_t node;


 struct net_if *virtual_iface;







 struct net_if *iface;




 enum net_l2_flags virtual_l2_flags;


 
# 147 "/home/sebin/thesis/zephyrproject/zephyr/include/net/virtual.h" 3 4
_Bool 
# 147 "/home/sebin/thesis/zephyrproject/zephyr/include/net/virtual.h"
     is_init;


 struct net_linkaddr_storage lladdr;


 char name[0];
};
# 165 "/home/sebin/thesis/zephyrproject/zephyr/include/net/virtual.h"
int net_virtual_interface_attach(struct net_if *virtual_iface,
      struct net_if *iface);
# 177 "/home/sebin/thesis/zephyrproject/zephyr/include/net/virtual.h"
struct net_if *net_virtual_get_iface(struct net_if *iface);
# 188 "/home/sebin/thesis/zephyrproject/zephyr/include/net/virtual.h"
char *net_virtual_get_name(struct net_if *iface, char *buf, size_t len);







void net_virtual_set_name(struct net_if *iface, const char *name);
# 206 "/home/sebin/thesis/zephyrproject/zephyr/include/net/virtual.h"
enum net_l2_flags net_virtual_set_flags(struct net_if *iface,
     enum net_l2_flags flags);
# 218 "/home/sebin/thesis/zephyrproject/zephyr/include/net/virtual.h"
enum net_verdict net_virtual_input(struct net_if *input_iface,
       struct net_addr *remote_addr,
       struct net_pkt *pkt);
# 233 "/home/sebin/thesis/zephyrproject/zephyr/include/net/virtual.h"
static inline void net_virtual_init(struct net_if *iface)
{
 (void)(iface);
}
# 248 "/home/sebin/thesis/zephyrproject/zephyr/include/net/virtual.h"
static inline void net_virtual_disable(struct net_if *iface)
{
 (void)(iface);
}
# 263 "/home/sebin/thesis/zephyrproject/zephyr/include/net/virtual.h"
static inline enum virtual_interface_caps
net_virtual_get_iface_capabilities(struct net_if *iface)
{
 const struct virtual_interface_api *virt =
  (struct virtual_interface_api *)net_if_get_device(iface)->api;

 if (!virt->get_capabilities) {
  return (enum virtual_interface_caps)0;
 }

 return virt->get_capabilities(iface);
}
# 24 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 2

# 1 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 1
# 43 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/connection.h" 1
# 29 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/connection.h"
struct net_conn;

struct net_conn_handle;






typedef enum net_verdict (*net_conn_cb_t)(struct net_conn *conn,
       struct net_pkt *pkt,
       union net_ip_header *ip_hdr,
       union net_proto_header *proto_hdr,
       void *user_data);







struct net_conn {

 sys_snode_t node;


 struct sockaddr remote_addr;


 struct sockaddr local_addr;


 net_conn_cb_t cb;




 struct net_context *context;


 void *user_data;


 uint16_t proto;


 uint8_t family;


 uint8_t flags;
};
# 99 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/connection.h"
int net_conn_register(uint16_t proto, uint8_t family,
        const struct sockaddr *remote_addr,
        const struct sockaddr *local_addr,
        uint16_t remote_port,
        uint16_t local_port,
        struct net_context *context,
        net_conn_cb_t cb,
        void *user_data,
        struct net_conn_handle **handle);
# 142 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/connection.h"
int net_conn_unregister(struct net_conn_handle *handle);
# 162 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/connection.h"
int net_conn_change_callback(struct net_conn_handle *handle,
        net_conn_cb_t cb, void *user_data);
# 178 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/connection.h"
enum net_verdict net_conn_input(struct net_pkt *pkt,
    union net_ip_header *ip_hdr,
    uint8_t proto,
    union net_proto_header *proto_hdr);
# 200 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/connection.h"
typedef void (*net_conn_foreach_cb_t)(struct net_conn *conn, void *user_data);
# 209 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/connection.h"
void net_conn_foreach(net_conn_foreach_cb_t cb, void *user_data);


void net_conn_init(void);
# 44 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 2

extern void net_if_init(void);
extern void net_if_post_init(void);
extern void net_if_carrier_down(struct net_if *iface);
extern void net_if_stats_reset(struct net_if *iface);
extern void net_if_stats_reset_all(void);
extern void net_process_rx_packet(struct net_pkt *pkt);
extern void net_process_tx_packet(struct net_pkt *pkt);


extern void net_context_init(void);
extern const char *net_context_state(struct net_context *context);
extern void net_pkt_init(void);
extern void net_tc_tx_init(void);
extern void net_tc_rx_init(void);
# 72 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
enum net_verdict net_ipv4_input(struct net_pkt *pkt);
enum net_verdict net_ipv6_input(struct net_pkt *pkt, 
# 73 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
                                                    _Bool 
# 73 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
                                                         is_loopback);
# 91 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
extern 
# 91 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
      _Bool 
# 91 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
           net_tc_submit_to_tx_queue(uint8_t tc, struct net_pkt *pkt);
extern void net_tc_submit_to_rx_queue(uint8_t tc, struct net_pkt *pkt);
extern enum net_verdict net_promisc_mode_input(struct net_pkt *pkt);

char *net_sprint_addr(sa_family_t af, const void *addr);
# 109 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
static inline void net_coap_init(void)
{
 return;
}
# 121 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
void net_gptp_init(void);
# 130 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
enum net_verdict net_gptp_recv(struct net_if *iface, struct net_pkt *pkt);
# 141 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
extern const char *net_proto2str(int family, int proto);
extern char *net_byte_to_hex(char *ptr, uint8_t byte, char base, 
# 142 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
                                                                _Bool 
# 142 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
                                                                     pad);
extern char *net_sprint_ll_addr_buf(const uint8_t *ll, uint8_t ll_len,
        char *buf, int buflen);
extern uint16_t net_calc_chksum(struct net_pkt *pkt, uint8_t proto);
# 160 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
enum net_verdict net_context_packet_received(struct net_conn *conn,
          struct net_pkt *pkt,
          union net_ip_header *ip_hdr,
          union net_proto_header *proto_hdr,
          void *user_data);


extern uint16_t net_calc_chksum_ipv4(struct net_pkt *pkt);



uint16_t net_calc_chksum_igmp(uint8_t *data, size_t len);
enum net_verdict net_ipv4_igmp_input(struct net_pkt *pkt,
         struct net_ipv4_hdr *ip_hdr);





static inline uint16_t net_calc_chksum_icmpv6(struct net_pkt *pkt)
{
 return net_calc_chksum(pkt, IPPROTO_ICMPV6);
}

static inline uint16_t net_calc_chksum_icmpv4(struct net_pkt *pkt)
{
 return net_calc_chksum(pkt, IPPROTO_ICMP);
}

static inline uint16_t net_calc_chksum_udp(struct net_pkt *pkt)
{
 uint16_t chksum = net_calc_chksum(pkt, IPPROTO_UDP);

 return chksum == 0U ? 0xffff : chksum;
}

static inline uint16_t net_calc_verify_chksum_udp(struct net_pkt *pkt)
{
 return net_calc_chksum(pkt, IPPROTO_UDP);
}

static inline uint16_t net_calc_chksum_tcp(struct net_pkt *pkt)
{
 return net_calc_chksum(pkt, IPPROTO_TCP);
}

static inline char *net_sprint_ll_addr(const uint8_t *ll, uint8_t ll_len)
{
 static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

 return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
}

static inline void net_hexdump(const char *str,
          const uint8_t *packet, size_t length)
{
 if (!length) {
  do { if (!(1 && ((4U <= 0) || ((0 == 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 0
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "%s zero-length packet" "\n", z_log_minimal_level_to_char(4U), str); } while (
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 0
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 _Bool 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic push
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((str) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic pop
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 ((void *)0)
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 , 0, "%s: " "%s zero-length packet", (const char *)__func__ , str); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic push
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 _Bool 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 ((void *)0)
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 ((void *)0) 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 != 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 ((void *)0)
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 28
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "%s zero-length packet") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "%s zero-length packet") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "%s zero-length packet") + 0))) > (1)) ? (_Generic(("%s: " "%s zero-length packet") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "%s zero-length packet") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "%s zero-length packet") + 0; size_t _arg_size = _Generic(("%s: " "%s zero-length packet"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "%s zero-length packet") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "%s zero-length packet") + 0; double _d = _Generic(("%s: " "%s zero-length packet") + 0, float : ("%s: " "%s zero-length packet") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "%s zero-length packet") + 0; size_t _arg_size = _Generic(("%s: " "%s zero-length packet"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "%s zero-length packet") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "%s zero-length packet") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "%s zero-length packet"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((str) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((str) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((str) + 0))) > (1)) ? (_Generic((str) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((str) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (str) + 0; size_t _arg_size = _Generic((str), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((str) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (str) + 0; double _d = _Generic((str) + 0, float : (str) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (str) + 0; size_t _arg_size = _Generic((str), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((str) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((str) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = str; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 28 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic pop
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 ((__builtin_object_size(
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 _msg
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 _msg
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 0
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , __builtin_object_size(
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 _msg
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , 0)) : __memset_ichk(
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 _msg
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 0
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 ))
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ; }; if (_plen) { do {
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic push
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 _Bool 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 ((void *)0)
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 28
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "%s zero-length packet") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "%s zero-length packet") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "%s zero-length packet") + 0))) > (1)) ? (_Generic(("%s: " "%s zero-length packet") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "%s zero-length packet") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "%s zero-length packet") + 0; size_t _arg_size = _Generic(("%s: " "%s zero-length packet"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "%s zero-length packet") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "%s zero-length packet") + 0; double _d = _Generic(("%s: " "%s zero-length packet") + 0, float : ("%s: " "%s zero-length packet") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "%s zero-length packet") + 0; size_t _arg_size = _Generic(("%s: " "%s zero-length packet"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "%s zero-length packet") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "%s zero-length packet") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "%s zero-length packet"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((str) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((str) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((str) + 0))) > (1)) ? (_Generic((str) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((str) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (str) + 0; size_t _arg_size = _Generic((str), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((str) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (str) + 0; double _d = _Generic((str) + 0, float : (str) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (str) + 0; size_t _arg_size = _Generic((str), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((str) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((str) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = str; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 28 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic pop
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 ((void *)0)
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "%s zero-length packet", (const char *)__func__ , str); } else if (1) { log_string_sync(src_level, "%s: " "%s zero-length packet", (const char *)__func__ , str); } else { log_2("%s: " "%s zero-length packet", (log_arg_t)((const char *)__func__), (log_arg_t)(str), src_level); } } while (
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 0
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ); } while (0); } if (
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 0
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ) { z_log_printf_arg_checker("%s zero-length packet", str); } } while (
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 0
# 217 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 );
  return;
 }

 do { const char *_str = str; if (!(1 && ((4U <= 0) || ((0 == 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
0
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
_Bool 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0) { do { z_log_minimal_printk("%c: " "%s" "\n", z_log_minimal_level_to_char(4U), _str); } while (
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
0
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
); z_log_minimal_hexdump_print(4U, (const char *)packet, length); break; } if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic push
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"

# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((str) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic pop
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)packet, length, "%s: " "%s", (const char *)__func__ , str); mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic push
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"

# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
_Bool 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
((void *)0)
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
((void *)0) 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
!= 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
((void *)0)
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
28
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "%s") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "%s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "%s") + 0))) > (1)) ? (_Generic(("%s: " "%s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "%s") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "%s") + 0; size_t _arg_size = _Generic(("%s: " "%s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "%s") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "%s") + 0; double _d = _Generic(("%s: " "%s") + 0, float : ("%s: " "%s") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "%s") + 0; size_t _arg_size = _Generic(("%s: " "%s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "%s") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "%s") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "%s"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((str) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((str) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((str) + 0))) > (1)) ? (_Generic((str) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((str) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (str) + 0; size_t _arg_size = _Generic((str), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((str) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (str) + 0; double _d = _Generic((str) + 0, float : (str) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (str) + 0; size_t _arg_size = _Generic((str), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((str) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((str) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = str; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
28 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic pop
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (length))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (length))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
((__builtin_object_size(
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
_msg
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
_msg
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
, 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
0
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
, 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
(sizeof(struct log_msg2_hdr) + _plen + (length))
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
, __builtin_object_size(
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
_msg
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
, 0)) : __memset_ichk(
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
_msg
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
, 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
0
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
, 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
(sizeof(struct log_msg2_hdr) + _plen + (length))
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
))
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
; }; if (_plen) { do {
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic push
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"

# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
_Bool 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
((void *)0)
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
28
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "%s") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "%s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "%s") + 0))) > (1)) ? (_Generic(("%s: " "%s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "%s") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "%s") + 0; size_t _arg_size = _Generic(("%s: " "%s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "%s") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "%s") + 0; double _d = _Generic(("%s: " "%s") + 0, float : ("%s: " "%s") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "%s") + 0; size_t _arg_size = _Generic(("%s: " "%s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "%s") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "%s") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "%s"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((str) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((str) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((str) + 0))) > (1)) ? (_Generic((str) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((str) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (str) + 0; size_t _arg_size = _Generic((str), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((str) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (str) + 0; double _d = _Generic((str) + 0, float : (str) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (str) + 0; size_t _arg_size = _Generic((str), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((str) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((str) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = str; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
28 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic pop
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = length, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, packet); } while (0); mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); break; } uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id, }; if (is_user_context) { log_hexdump_from_user(src_level, _str, (const char *)packet, length); } else if (1) { log_hexdump_sync(src_level, _str, (const char *)packet, length); } else { log_hexdump(_str, (const char *)packet, length, src_level); } } while (
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
0
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
);
}



static inline void net_pkt_hexdump(struct net_pkt *pkt, const char *str)
{
 struct net_buf *buf = pkt->buffer;
 char pkt_str[sizeof("0x") + sizeof(intptr_t) * 2];

 if (str && str[0]) {
  do { if (!(1 && ((4U <= 0) || ((0 == 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 0
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "%s" "\n", z_log_minimal_level_to_char(4U), log_strdup(str)); } while (
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 0
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 _Bool 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic push
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(str)) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic pop
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 ((void *)0)
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 , 0, "%s: " "%s", (const char *)__func__ , log_strdup(str)); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic push
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 _Bool 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 ((void *)0)
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 ((void *)0) 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 != 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 ((void *)0)
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 28
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "%s") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "%s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "%s") + 0))) > (1)) ? (_Generic(("%s: " "%s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "%s") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "%s") + 0; size_t _arg_size = _Generic(("%s: " "%s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "%s") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "%s") + 0; double _d = _Generic(("%s: " "%s") + 0, float : ("%s: " "%s") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "%s") + 0; size_t _arg_size = _Generic(("%s: " "%s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "%s") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "%s") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "%s"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(str)) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(str)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(str)) + 0))) > (1)) ? (_Generic((log_strdup(str)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(str)) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(str)) + 0; size_t _arg_size = _Generic((log_strdup(str)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(str)) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(str)) + 0; double _d = _Generic((log_strdup(str)) + 0, float : (log_strdup(str)) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(str)) + 0; size_t _arg_size = _Generic((log_strdup(str)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(str)) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(str)) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(str); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 28 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic pop
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 ((__builtin_object_size(
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 _msg
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 _msg
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 0
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , __builtin_object_size(
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 _msg
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , 0)) : __memset_ichk(
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 _msg
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 0
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 ))
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ; }; if (_plen) { do {
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic push
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 _Bool 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 ((void *)0)
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 28
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "%s") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "%s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "%s") + 0))) > (1)) ? (_Generic(("%s: " "%s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "%s") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "%s") + 0; size_t _arg_size = _Generic(("%s: " "%s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "%s") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "%s") + 0; double _d = _Generic(("%s: " "%s") + 0, float : ("%s: " "%s") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "%s") + 0; size_t _arg_size = _Generic(("%s: " "%s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "%s") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "%s") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "%s"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(str)) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(str)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(str)) + 0))) > (1)) ? (_Generic((log_strdup(str)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(str)) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(str)) + 0; size_t _arg_size = _Generic((log_strdup(str)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(str)) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(str)) + 0; double _d = _Generic((log_strdup(str)) + 0, float : (log_strdup(str)) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(str)) + 0; size_t _arg_size = _Generic((log_strdup(str)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(str)) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(str)) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(str); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 28 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic pop
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 ((void *)0)
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "%s", (const char *)__func__ , log_strdup(str)); } else if (1) { log_string_sync(src_level, "%s: " "%s", (const char *)__func__ , log_strdup(str)); } else { log_2("%s: " "%s", (log_arg_t)((const char *)__func__), (log_arg_t)(log_strdup(str)), src_level); } } while (
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 0
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ); } while (0); } if (
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 0
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ) { z_log_printf_arg_checker("%s", log_strdup(str)); } } while (
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 0
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 );
 }

 snprintk(pkt_str, sizeof(pkt_str), "%p", pkt);

 while (buf) {
  do { const char *_str = log_strdup(pkt_str); if (!(1 && ((4U <= 0) || ((0 == 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 0
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 _Bool 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0) { do { z_log_minimal_printk("%c: " "%s" "\n", z_log_minimal_level_to_char(4U), _str); } while (
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 0
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ); z_log_minimal_hexdump_print(4U, (const char *)buf->data, buf->len); break; } if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic push
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(pkt_str)) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic pop
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)buf->data, buf->len, "%s: " "%s", (const char *)__func__ , log_strdup(pkt_str)); mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic push
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 _Bool 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 ((void *)0)
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 ((void *)0) 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 != 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 ((void *)0)
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 28
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "%s") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "%s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "%s") + 0))) > (1)) ? (_Generic(("%s: " "%s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "%s") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "%s") + 0; size_t _arg_size = _Generic(("%s: " "%s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "%s") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "%s") + 0; double _d = _Generic(("%s: " "%s") + 0, float : ("%s: " "%s") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "%s") + 0; size_t _arg_size = _Generic(("%s: " "%s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "%s") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "%s") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "%s"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(pkt_str)) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(pkt_str)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(pkt_str)) + 0))) > (1)) ? (_Generic((log_strdup(pkt_str)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(pkt_str)) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(pkt_str)) + 0; size_t _arg_size = _Generic((log_strdup(pkt_str)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(pkt_str)) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(pkt_str)) + 0; double _d = _Generic((log_strdup(pkt_str)) + 0, float : (log_strdup(pkt_str)) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(pkt_str)) + 0; size_t _arg_size = _Generic((log_strdup(pkt_str)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(pkt_str)) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(pkt_str)) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(pkt_str); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 28 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic pop
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (buf->len))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (buf->len))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 ((__builtin_object_size(
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 _msg
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 _msg
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 0
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 (sizeof(struct log_msg2_hdr) + _plen + (buf->len))
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , __builtin_object_size(
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 _msg
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , 0)) : __memset_ichk(
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 _msg
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 0
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 , 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 (sizeof(struct log_msg2_hdr) + _plen + (buf->len))
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 ))
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ; }; if (_plen) { do {
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic push
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 _Bool 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 ((void *)0)
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 28
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "%s") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "%s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "%s") + 0))) > (1)) ? (_Generic(("%s: " "%s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "%s") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "%s") + 0; size_t _arg_size = _Generic(("%s: " "%s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "%s") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "%s") + 0; double _d = _Generic(("%s: " "%s") + 0, float : ("%s: " "%s") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "%s") + 0; size_t _arg_size = _Generic(("%s: " "%s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "%s") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "%s") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "%s"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(pkt_str)) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(pkt_str)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(pkt_str)) + 0))) > (1)) ? (_Generic((log_strdup(pkt_str)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(pkt_str)) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(pkt_str)) + 0; size_t _arg_size = _Generic((log_strdup(pkt_str)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(pkt_str)) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(pkt_str)) + 0; double _d = _Generic((log_strdup(pkt_str)) + 0, float : (log_strdup(pkt_str)) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(pkt_str)) + 0; size_t _arg_size = _Generic((log_strdup(pkt_str)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(pkt_str)) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(pkt_str)) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(pkt_str); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3
 28 
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
#pragma GCC diagnostic pop
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = buf->len, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, buf->data); } while (0); mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); break; } uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id, }; if (is_user_context) { log_hexdump_from_user(src_level, _str, (const char *)buf->data, buf->len); } else if (1) { log_hexdump_sync(src_level, _str, (const char *)buf->data, buf->len); } else { log_hexdump(_str, (const char *)buf->data, buf->len, src_level); } } while (
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h" 3 4
 0
# 238 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_private.h"
 );
  buf = buf->frags;
 }
}

static inline void net_pkt_print_buffer_info(struct net_pkt *pkt, const char *str)
{
 struct net_buf *buf = pkt->buffer;

 if (str) {
  printk("%s", str);
 }

 printk("%p[%ld]", pkt, atomic_get(&pkt->atomic_ref));

 if (buf) {
  printk("->");
 }

 while (buf) {
  printk("%p[%ld/%u (%u/%u)]", buf, atomic_get(&pkt->atomic_ref),
         buf->len, net_buf_max_len(buf), buf->size);

  buf = buf->frags;
  if (buf) {
   printk("->");
  }
 }

 printk("\n");
}
# 26 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h" 1
# 23 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h" 1
# 22 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h"
struct net_icmpv6_ns_hdr {
 uint32_t reserved;
 uint8_t tgt[16];
} 
# 25 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h" 3
 __attribute__((__packed__))
# 25 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h"
         ;

struct net_icmpv6_nd_opt_hdr {
 uint8_t type;
 uint8_t len;
} 
# 30 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h" 3
 __attribute__((__packed__))
# 30 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h"
         ;

struct net_icmpv6_na_hdr {
 uint8_t flags;
 uint8_t reserved[3];
 uint8_t tgt[16];
} 
# 36 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h" 3
 __attribute__((__packed__))
# 36 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h"
         ;

struct net_icmpv6_rs_hdr {
 uint32_t reserved;
} 
# 40 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h" 3
 __attribute__((__packed__))
# 40 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h"
         ;

struct net_icmpv6_ra_hdr {
 uint8_t cur_hop_limit;
 uint8_t flags;
 uint16_t router_lifetime;
 uint32_t reachable_time;
 uint32_t retrans_timer;
} 
# 48 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h" 3
 __attribute__((__packed__))
# 48 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h"
         ;

struct net_icmpv6_nd_opt_mtu {
 uint16_t reserved;
 uint32_t mtu;
} 
# 53 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h" 3
 __attribute__((__packed__))
# 53 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h"
         ;

struct net_icmpv6_nd_opt_prefix_info {
 uint8_t prefix_len;
 uint8_t flags;
 uint32_t valid_lifetime;
 uint32_t preferred_lifetime;
 uint32_t reserved;
 uint8_t prefix[16];
} 
# 62 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h" 3
 __attribute__((__packed__))
# 62 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h"
         ;

struct net_icmpv6_nd_opt_6co {
 uint8_t context_len;
 uint8_t flag;
 uint16_t reserved;
 uint16_t lifetime;
 uint8_t prefix[16];
} 
# 70 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h" 3
 __attribute__((__packed__))
# 70 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h"
         ;


struct net_icmpv6_nd_opt_route_info {
 uint8_t prefix_len;
 struct {

  uint8_t reserved_2 :3;
  uint8_t prf :2;
  uint8_t reserved_1 :3;





 } flags;
 uint32_t route_lifetime;



} 
# 90 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h" 3
 __attribute__((__packed__))
# 90 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h"
         ;

struct net_icmpv6_echo_req {
 uint16_t identifier;
 uint16_t sequence;
} 
# 95 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h" 3
 __attribute__((__packed__))
# 95 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h"
         ;

struct net_icmpv6_mld_query {
 uint16_t max_response_code;
 uint16_t reserved;
 uint8_t mcast_address[16];
 uint16_t flagg;
 uint16_t num_sources;
} 
# 103 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h" 3
 __attribute__((__packed__))
# 103 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h"
         ;

struct net_icmpv6_mld_mcast_record {
 uint8_t record_type;
 uint8_t aux_data_len;
 uint16_t num_sources;
 uint8_t mcast_address[16];
} 
# 110 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h" 3
 __attribute__((__packed__))
# 110 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h"
         ;
# 165 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h"
typedef enum net_verdict (*icmpv6_callback_handler_t)(
      struct net_pkt *pkt,
      struct net_ipv6_hdr *ip_hdr,
      struct net_icmp_hdr *icmp_hdr);

const char *net_icmpv6_type2str(int icmpv6_type);

struct net_icmpv6_handler {
 sys_snode_t node;
 icmpv6_callback_handler_t handler;
 uint8_t type;
 uint8_t code;
};
# 189 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h"
int net_icmpv6_send_error(struct net_pkt *pkt, uint8_t type, uint8_t code,
     uint32_t param);
# 208 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h"
int net_icmpv6_send_echo_request(struct net_if *iface,
     struct in6_addr *dst,
     uint16_t identifier,
     uint16_t sequence,
     const void *data,
     size_t data_size);
# 234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/icmpv6.h"
void net_icmpv6_register_handler(struct net_icmpv6_handler *handler);
void net_icmpv6_unregister_handler(struct net_icmpv6_handler *handler);
enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
      struct net_ipv6_hdr *ip_hdr);

int net_icmpv6_create(struct net_pkt *pkt, uint8_t icmp_type, uint8_t icmp_code);
int net_icmpv6_finalize(struct net_pkt *pkt);

void net_icmpv6_init(void);
# 24 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/nbr.h" 1
# 13 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/nbr.h"
# 1 "/home/sebin/LIOT/gcc-arm-none-eabi-9-2019-q4-major/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h" 1 3 4
# 14 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/nbr.h" 2
# 29 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/nbr.h"
struct net_nbr_lladdr {

 struct net_linkaddr_storage lladdr;


 uint8_t ref;
};
# 46 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/nbr.h"
struct net_nbr {

 uint8_t ref;





 uint8_t idx;


 const uint16_t size;


 const uint16_t extra_data_size;


 struct net_if *iface;


 uint8_t *data;


 void (*const remove)(struct net_nbr *nbr);




 uint8_t __nbr[0] 
# 74 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/nbr.h" 3
                 __attribute__((__aligned__(
# 74 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/nbr.h"
                 sizeof(int)
# 74 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/nbr.h" 3
                 )))
# 74 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/nbr.h"
                                ;
};
# 91 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/nbr.h"
struct net_nbr_table {

 struct net_nbr *nbr;


 void (*const clear)(struct net_nbr_table *table);


 const uint16_t nbr_count;
};
# 125 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/nbr.h"
static inline void *net_nbr_extra_data(struct net_nbr *nbr)
{
 return (void *)(((unsigned long)((nbr->__nbr + nbr->size)) + ((unsigned long)(sizeof(int)) - 1)) & ~((unsigned long)(sizeof(int)) - 1));
}
# 139 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/nbr.h"
void net_nbr_unref(struct net_nbr *nbr);
# 152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/nbr.h"
struct net_nbr *net_nbr_ref(struct net_nbr *nbr);







struct net_nbr *net_nbr_get(struct net_nbr_table *table);
# 169 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/nbr.h"
struct net_nbr *net_nbr_lookup(struct net_nbr_table *table,
          struct net_if *iface,
          struct net_linkaddr *lladdr);
# 180 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/nbr.h"
int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
   const struct net_linkaddr *lladdr);







int net_nbr_unlink(struct net_nbr *nbr, struct net_linkaddr *lladdr);







struct net_linkaddr_storage *net_nbr_get_lladdr(uint8_t idx);
# 212 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/nbr.h"
void net_nbr_clear_table(struct net_nbr_table *table);





void net_nbr_print(struct net_nbr_table *table);
# 25 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h" 2
# 68 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
enum net_ipv6_nbr_state {
 NET_IPV6_NBR_STATE_INCOMPLETE,
 NET_IPV6_NBR_STATE_REACHABLE,
 NET_IPV6_NBR_STATE_STALE,
 NET_IPV6_NBR_STATE_DELAY,
 NET_IPV6_NBR_STATE_PROBE,
 NET_IPV6_NBR_STATE_STATIC,
};

const char *net_ipv6_nbr_state2str(enum net_ipv6_nbr_state state);




struct net_ipv6_nbr_data {

 struct net_pkt *pending;


 struct in6_addr addr;


 int64_t reachable;


 int32_t reachable_timeout;


 int64_t send_ns;


 enum net_ipv6_nbr_state state;


 uint16_t link_metric;


 uint8_t ns_count;


 
# 108 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h" 3 4
_Bool 
# 108 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
     is_router;





 uint32_t stale_counter;

};

static inline struct net_ipv6_nbr_data *net_ipv6_nbr_data(struct net_nbr *nbr)
{
 return (struct net_ipv6_nbr_data *)nbr->data;
}


int net_ipv6_start_dad(struct net_if *iface, struct net_if_addr *ifaddr);


int net_ipv6_send_ns(struct net_if *iface, struct net_pkt *pending,
       const struct in6_addr *src, const struct in6_addr *dst,
       const struct in6_addr *tgt, 
# 129 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h" 3 4
                                  _Bool 
# 129 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
                                       is_my_address);

int net_ipv6_send_rs(struct net_if *iface);
int net_ipv6_start_rs(struct net_if *iface);

int net_ipv6_send_na(struct net_if *iface, const struct in6_addr *src,
       const struct in6_addr *dst, const struct in6_addr *tgt,
       uint8_t flags);


static inline 
# 139 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h" 3 4
             _Bool 
# 139 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
                  net_ipv6_is_nexthdr_upper_layer(uint8_t nexthdr)
{
 return (nexthdr == IPPROTO_ICMPV6 || nexthdr == IPPROTO_UDP ||
  nexthdr == IPPROTO_TCP ||
  (0 &&
   ((nexthdr == IPPROTO_IPV6) || (nexthdr == IPPROTO_IPIP))));
}
# 157 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
int net_ipv6_create(struct net_pkt *pkt,
      const struct in6_addr *src,
      const struct in6_addr *dst);
# 185 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
int net_ipv6_finalize(struct net_pkt *pkt, uint8_t next_header_proto);
# 206 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
int net_ipv6_mld_join(struct net_if *iface, const struct in6_addr *addr);
# 220 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
int net_ipv6_mld_leave(struct net_if *iface, const struct in6_addr *addr);
# 232 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
typedef void (*net_nbr_cb_t)(struct net_nbr *nbr, void *user_data);
# 247 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
enum net_verdict net_ipv6_prepare_for_send(struct net_pkt *pkt);
# 264 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
struct net_nbr *net_ipv6_nbr_lookup(struct net_if *iface,
        struct in6_addr *addr);
# 283 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
struct net_nbr *net_ipv6_get_nbr(struct net_if *iface, uint8_t idx);
# 295 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
struct in6_addr *net_ipv6_nbr_lookup_by_index(struct net_if *iface,
           uint8_t idx);
# 322 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
struct net_nbr *net_ipv6_nbr_add(struct net_if *iface,
     const struct in6_addr *addr,
     const struct net_linkaddr *lladdr,
     
# 325 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h" 3 4
    _Bool 
# 325 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
         is_router,
     enum net_ipv6_nbr_state state);
# 347 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"

# 347 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h" 3 4
_Bool 
# 347 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
    net_ipv6_nbr_rm(struct net_if *iface, struct in6_addr *addr);
# 362 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
void net_ipv6_nbr_foreach(net_nbr_cb_t cb, void *user_data);
# 377 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
void net_ipv6_nbr_set_reachable_timer(struct net_if *iface,
          struct net_nbr *nbr);
# 409 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
struct net_ipv6_reassembly;
# 419 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
typedef void (*net_ipv6_frag_cb_t)(struct net_ipv6_reassembly *reass,
       void *user_data);







void net_ipv6_frag_foreach(net_ipv6_frag_cb_t cb, void *user_data);
# 441 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
int net_ipv6_find_last_ext_hdr(struct net_pkt *pkt, uint16_t *next_hdr_off,
          uint16_t *last_hdr_off);
# 458 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv6.h"
static inline
enum net_verdict net_ipv6_handle_fragment_hdr(struct net_pkt *pkt,
           struct net_ipv6_hdr *hdr,
           uint8_t nexthdr)
{
 (void)(pkt);
 (void)(hdr);
 (void)(nexthdr);

 return NET_DROP;
}



void net_ipv6_init(void);
void net_ipv6_nbr_init(void);

void net_ipv6_mld_init(void);
# 27 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 2
# 1 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv4_autoconf_internal.h" 1
# 18 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv4_autoconf_internal.h"
# 1 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ipv4_autoconf.h" 1
# 15 "/home/sebin/thesis/zephyrproject/zephyr/include/net/ipv4_autoconf.h"
enum net_ipv4_autoconf_state {
 NET_IPV4_AUTOCONF_INIT,
 NET_IPV4_AUTOCONF_PROBE,
 NET_IPV4_AUTOCONF_ANNOUNCE,
 NET_IPV4_AUTOCONF_ASSIGNED,
 NET_IPV4_AUTOCONF_RENEW,
};
# 19 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/ipv4_autoconf_internal.h" 2
# 28 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 2

# 1 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_stats.h" 1
# 18 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_stats.h"
extern struct net_stats net_stats;
# 36 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_stats.h"
static inline void net_stats_update_processing_error(struct net_if *iface)
{
 { { }; ((net_stats.processing_error++)); (iface->stats.processing_error++); };
}

static inline void net_stats_update_ip_errors_protoerr(struct net_if *iface)
{
 { { }; ((net_stats.ip_errors.protoerr++)); (iface->stats.ip_errors.protoerr++); };
}

static inline void net_stats_update_ip_errors_vhlerr(struct net_if *iface)
{
 { { }; ((net_stats.ip_errors.vhlerr++)); (iface->stats.ip_errors.vhlerr++); };
}

static inline void net_stats_update_bytes_recv(struct net_if *iface,
            uint32_t bytes)
{
 { { }; ((net_stats.bytes.received += bytes)); (iface->stats.bytes.received += bytes); };
}

static inline void net_stats_update_bytes_sent(struct net_if *iface,
            uint32_t bytes)
{
 { { }; ((net_stats.bytes.sent += bytes)); (iface->stats.bytes.sent += bytes); };
}
# 73 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_stats.h"
static inline void net_stats_update_ipv6_sent(struct net_if *iface)
{
 { { }; ((net_stats.ipv6.sent++)); (iface->stats.ipv6.sent++); };
}

static inline void net_stats_update_ipv6_recv(struct net_if *iface)
{
 { { }; ((net_stats.ipv6.recv++)); (iface->stats.ipv6.recv++); };
}

static inline void net_stats_update_ipv6_drop(struct net_if *iface)
{
 { { }; ((net_stats.ipv6.drop++)); (iface->stats.ipv6.drop++); };
}
# 96 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_stats.h"
static inline void net_stats_update_ipv6_nd_sent(struct net_if *iface)
{
 { { }; ((net_stats.ipv6_nd.sent++)); (iface->stats.ipv6_nd.sent++); };
}

static inline void net_stats_update_ipv6_nd_recv(struct net_if *iface)
{
 { { }; ((net_stats.ipv6_nd.recv++)); (iface->stats.ipv6_nd.recv++); };
}

static inline void net_stats_update_ipv6_nd_drop(struct net_if *iface)
{
 { { }; ((net_stats.ipv6_nd.drop++)); (iface->stats.ipv6_nd.drop++); };
}
# 119 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_stats.h"
static inline void net_stats_update_ipv4_drop(struct net_if *iface)
{
 { { }; ((net_stats.ipv4.drop++)); (iface->stats.ipv4.drop++); };
}

static inline void net_stats_update_ipv4_sent(struct net_if *iface)
{
 { { }; ((net_stats.ipv4.sent++)); (iface->stats.ipv4.sent++); };
}

static inline void net_stats_update_ipv4_recv(struct net_if *iface)
{
 { { }; ((net_stats.ipv4.recv++)); (iface->stats.ipv4.recv++); };
}
# 141 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_stats.h"
static inline void net_stats_update_icmp_sent(struct net_if *iface)
{
 { { }; ((net_stats.icmp.sent++)); (iface->stats.icmp.sent++); };
}

static inline void net_stats_update_icmp_recv(struct net_if *iface)
{
 { { }; ((net_stats.icmp.recv++)); (iface->stats.icmp.recv++); };
}

static inline void net_stats_update_icmp_drop(struct net_if *iface)
{
 { { }; ((net_stats.icmp.drop++)); (iface->stats.icmp.drop++); };
}
# 163 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_stats.h"
static inline void net_stats_update_udp_sent(struct net_if *iface)
{
 { { }; ((net_stats.udp.sent++)); (iface->stats.udp.sent++); };
}

static inline void net_stats_update_udp_recv(struct net_if *iface)
{
 { { }; ((net_stats.udp.recv++)); (iface->stats.udp.recv++); };
}

static inline void net_stats_update_udp_drop(struct net_if *iface)
{
 { { }; ((net_stats.udp.drop++)); (iface->stats.udp.drop++); };
}

static inline void net_stats_update_udp_chkerr(struct net_if *iface)
{
 { { }; ((net_stats.udp.chkerr++)); (iface->stats.udp.chkerr++); };
}
# 191 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_stats.h"
static inline void net_stats_update_tcp_sent(struct net_if *iface, uint32_t bytes)
{
 { { }; ((net_stats.tcp.bytes.sent += bytes)); (iface->stats.tcp.bytes.sent += bytes); };
}

static inline void net_stats_update_tcp_recv(struct net_if *iface, uint32_t bytes)
{
 { { }; ((net_stats.tcp.bytes.received += bytes)); (iface->stats.tcp.bytes.received += bytes); };
}

static inline void net_stats_update_tcp_resent(struct net_if *iface,
            uint32_t bytes)
{
 { { }; ((net_stats.tcp.resent += bytes)); (iface->stats.tcp.resent += bytes); };
}

static inline void net_stats_update_tcp_drop(struct net_if *iface)
{
 { { }; ((net_stats.tcp.drop++)); (iface->stats.tcp.drop++); };
}

static inline void net_stats_update_tcp_seg_sent(struct net_if *iface)
{
 { { }; ((net_stats.tcp.sent++)); (iface->stats.tcp.sent++); };
}

static inline void net_stats_update_tcp_seg_recv(struct net_if *iface)
{
 { { }; ((net_stats.tcp.recv++)); (iface->stats.tcp.recv++); };
}

static inline void net_stats_update_tcp_seg_drop(struct net_if *iface)
{
 { { }; ((net_stats.tcp.seg_drop++)); (iface->stats.tcp.seg_drop++); };
}

static inline void net_stats_update_tcp_seg_rst(struct net_if *iface)
{
 { { }; ((net_stats.tcp.rst++)); (iface->stats.tcp.rst++); };
}

static inline void net_stats_update_tcp_seg_conndrop(struct net_if *iface)
{
 { { }; ((net_stats.tcp.conndrop++)); (iface->stats.tcp.conndrop++); };
}

static inline void net_stats_update_tcp_seg_connrst(struct net_if *iface)
{
 { { }; ((net_stats.tcp.connrst++)); (iface->stats.tcp.connrst++); };
}

static inline void net_stats_update_tcp_seg_chkerr(struct net_if *iface)
{
 { { }; ((net_stats.tcp.chkerr++)); (iface->stats.tcp.chkerr++); };
}

static inline void net_stats_update_tcp_seg_ackerr(struct net_if *iface)
{
 { { }; ((net_stats.tcp.ackerr++)); (iface->stats.tcp.ackerr++); };
}

static inline void net_stats_update_tcp_seg_rsterr(struct net_if *iface)
{
 { { }; ((net_stats.tcp.rsterr++)); (iface->stats.tcp.rsterr++); };
}

static inline void net_stats_update_tcp_seg_rexmit(struct net_if *iface)
{
 { { }; ((net_stats.tcp.rexmit++)); (iface->stats.tcp.rexmit++); };
}
# 278 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_stats.h"
static inline void net_stats_update_per_proto_recv(struct net_if *iface,
         enum net_ip_protocol proto)
{
 if (!1) {
  return;
 }

 if (1 && proto == IPPROTO_UDP) {
  net_stats_update_udp_recv(iface);
 } else if (1 && proto == IPPROTO_TCP) {
  net_stats_update_tcp_seg_recv(iface);
 }
}

static inline void net_stats_update_per_proto_drop(struct net_if *iface,
         enum net_ip_protocol proto)
{
 if (!1) {
  return;
 }

 if (1 && proto == IPPROTO_UDP) {
  net_stats_update_udp_drop(iface);
 } else if (1 && proto == IPPROTO_TCP) {
  net_stats_update_tcp_drop(iface);
 }
}


static inline void net_stats_update_ipv6_mld_recv(struct net_if *iface)
{
 { { }; ((net_stats.ipv6_mld.recv++)); (iface->stats.ipv6_mld.recv++); };
}

static inline void net_stats_update_ipv6_mld_sent(struct net_if *iface)
{
 { { }; ((net_stats.ipv6_mld.sent++)); (iface->stats.ipv6_mld.sent++); };
}

static inline void net_stats_update_ipv6_mld_drop(struct net_if *iface)
{
 { { }; ((net_stats.ipv6_mld.drop++)); (iface->stats.ipv6_mld.drop++); };
}







static inline void net_stats_update_ipv4_igmp_recv(struct net_if *iface)
{
 { { }; ((net_stats.ipv4_igmp.recv++)); (iface->stats.ipv4_igmp.recv++); };
}

static inline void net_stats_update_ipv4_igmp_sent(struct net_if *iface)
{
 { { }; ((net_stats.ipv4_igmp.sent++)); (iface->stats.ipv4_igmp.sent++); };
}

static inline void net_stats_update_ipv4_igmp_drop(struct net_if *iface)
{
 { { }; ((net_stats.ipv4_igmp.drop++)); (iface->stats.ipv4_igmp.drop++); };
}
# 416 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_stats.h"
static inline void net_stats_update_tc_sent_pkt(struct net_if *iface, uint8_t tc)
{
 { { }; ((net_stats.tc.sent[tc].pkts++)); (iface->stats.tc.sent[tc].pkts++); };
}

static inline void net_stats_update_tc_sent_bytes(struct net_if *iface,
        uint8_t tc, size_t bytes)
{
 { { }; ((net_stats.tc.sent[tc].bytes += bytes)); (iface->stats.tc.sent[tc].bytes += bytes); };
}

static inline void net_stats_update_tc_sent_priority(struct net_if *iface,
           uint8_t tc, uint8_t priority)
{
 { { }; ((net_stats.tc.sent[tc].priority = priority)); (iface->stats.tc.sent[tc].priority = priority); };
}
# 517 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_stats.h"
static inline void net_stats_update_tc_recv_pkt(struct net_if *iface, uint8_t tc)
{
 { { }; ((net_stats.tc.recv[tc].pkts++)); (iface->stats.tc.recv[tc].pkts++); };
}

static inline void net_stats_update_tc_recv_bytes(struct net_if *iface,
        uint8_t tc, size_t bytes)
{
 { { }; ((net_stats.tc.recv[tc].bytes += bytes)); (iface->stats.tc.recv[tc].bytes += bytes); };
}

static inline void net_stats_update_tc_recv_priority(struct net_if *iface,
           uint8_t tc, uint8_t priority)
{
 { { }; ((net_stats.tc.recv[tc].priority = priority)); (iface->stats.tc.recv[tc].priority = priority); };
}
# 634 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_stats.h"
void net_stats_reset(struct net_if *iface);
# 30 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 2
# 41 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
static 
# 41 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
      __attribute__((__aligned__(
# 41 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
      __alignof(struct k_mutex)
# 41 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
      ))) 
# 41 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
      struct k_mutex lock __attribute__((section("." "_k_mutex" "." "static" "." "lock"))) 
# 41 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
      __attribute__((__used__)) 
# 41 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
      = { .wait_q = { { {(&(&lock.wait_q)->waitq)}, {(&(&lock.wait_q)->waitq)} } }, .owner = 
# 41 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
      ((void *)0)
# 41 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
      , .lock_count = 0, .owner_orig_prio = (15 - 1), };


extern struct net_if _net_if_list_start[];
extern struct net_if _net_if_list_end[];


static struct net_if_router routers[2];
static struct k_work_delayable router_timer;
static sys_slist_t active_router_timers;




static struct k_work_delayable address_lifetime_timer;


static sys_slist_t active_address_lifetime_timers;


static struct k_work_delayable prefix_lifetime_timer;


static sys_slist_t active_prefix_lifetime_timers;



static struct k_work_delayable dad_timer;
static sys_slist_t active_dad_timers;



static struct k_work_delayable rs_timer;
static sys_slist_t active_rs_timers;


static struct {
 struct net_if_ipv6 ipv6;
 struct net_if *iface;
} ipv6_addresses[1];



static struct {
 struct net_if_ipv4 ipv4;
 struct net_if *iface;
} ipv4_addresses[1];




static sys_slist_t link_callbacks;




static sys_slist_t mcast_monitor_callbacks;







struct z_thread_stack_element __attribute__((section("." "noinit" "." "\"WEST_TOPDIR/zephyr/subsys/net/ip/net_if.c\"" "." "0"))) 
# 105 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
__attribute__((__aligned__(
# 105 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
((((32) > (128)) ? (32) : (128)))
# 105 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))) 
# 105 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
tx_ts_stack[((((unsigned long)(1024) + ((unsigned long)(8) - 1)) & ~((unsigned long)(8) - 1)) + ((size_t)32))];

# 106 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
__attribute__((__aligned__(
# 106 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__alignof(struct k_fifo)
# 106 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))) 
# 106 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
struct k_fifo tx_ts_queue __attribute__((section("." "_k_queue" "." "static" "." "tx_ts_queue"))) 
# 106 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
__attribute__((__used__)) 
# 106 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
= { ._queue = { .data_q = {
# 106 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 106 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
, 
# 106 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 106 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
}, .lock = { }, .wait_q = { { {(&(&tx_ts_queue._queue.wait_q)->waitq)}, {(&(&tx_ts_queue._queue.wait_q)->waitq)} } }, .poll_events = { {(&tx_ts_queue._queue.poll_events)}, {(&tx_ts_queue._queue.poll_events)} }, } };

static struct k_thread tx_thread_ts;



static sys_slist_t timestamp_callbacks;
# 130 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
struct net_if *z_impl_net_if_get_by_index(int index)
{
 if (index <= 0) {
  return 
# 133 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        ((void *)0)
# 133 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
 }

 if (&_net_if_list_start[index - 1] >= _net_if_list_end) {
  do { if (!(1 && ((4U <= 0) || ((0 == 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "Index %d is too large" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), index); } while (
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((index) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "Index %d is too large", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), index); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Index %d is too large") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Index %d is too large") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Index %d is too large") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Index %d is too large") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Index %d is too large") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Index %d is too large") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Index %d is too large"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Index %d is too large") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Index %d is too large") + 0; double _d = _Generic(("%s: " "(%s): " "Index %d is too large") + 0, float : ("%s: " "(%s): " "Index %d is too large") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Index %d is too large") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Index %d is too large"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Index %d is too large") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Index %d is too large") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Index %d is too large"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((index) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((index) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((index) + 0))) > (1)) ? (_Generic((index) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((index) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (index) + 0; size_t _arg_size = _Generic((index), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((index) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (index) + 0; double _d = _Generic((index) + 0, float : (index) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (index) + 0; size_t _arg_size = _Generic((index), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((index) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((index) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = index; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Index %d is too large") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Index %d is too large") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Index %d is too large") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Index %d is too large") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Index %d is too large") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Index %d is too large") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Index %d is too large"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Index %d is too large") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Index %d is too large") + 0; double _d = _Generic(("%s: " "(%s): " "Index %d is too large") + 0, float : ("%s: " "(%s): " "Index %d is too large") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Index %d is too large") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Index %d is too large"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Index %d is too large") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Index %d is too large") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Index %d is too large"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((index) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((index) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((index) + 0))) > (1)) ? (_Generic((index) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((index) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (index) + 0; size_t _arg_size = _Generic((index), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((index) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (index) + 0; double _d = _Generic((index) + 0, float : (index) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (index) + 0; size_t _arg_size = _Generic((index), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((index) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((index) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = index; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "Index %d is too large", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), index); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "Index %d is too large", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), index); } else { log_3("%s: " "(%s): " "Index %d is too large", (log_arg_t)((const char *)__func__), (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))), (log_arg_t)(index), src_level); } } while (
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "Index %d is too large", log_strdup(k_thread_name_get(k_current_get())), index); } } while (
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 137 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 );
  return 
# 138 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        ((void *)0)
# 138 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
 }

 return &_net_if_list_start[index - 1];
}
# 170 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
static inline void net_context_send_cb(struct net_context *context,
           int status)
{
 if (!context) {
  return;
 }

 if (context->send_cb) {
  context->send_cb(context, status, context->user_data);
 }

 if (1 &&
     net_context_get_ip_proto(context) == IPPROTO_UDP) {
  net_stats_update_udp_sent(net_context_get_iface(context));
 } else if (1 &&
     net_context_get_ip_proto(context) == IPPROTO_TCP) {
  net_stats_update_tcp_seg_sent(net_context_get_iface(context));
 }
}

static void update_txtime_stats_detail(struct net_pkt *pkt,
           uint32_t start_time, uint32_t stop_time)
{
 uint32_t val, prev = start_time;
 int i;

 for (i = 0; i < net_pkt_stats_tick_count(pkt); i++) {
  if (!net_pkt_stats_tick(pkt)[i]) {
   break;
  }

  val = net_pkt_stats_tick(pkt)[i] - prev;
  prev = net_pkt_stats_tick(pkt)[i];
  net_pkt_stats_tick(pkt)[i] = val;
 }
}

static 
# 207 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
      _Bool 
# 207 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           net_if_tx(struct net_if *iface, struct net_pkt *pkt)
{
 struct net_linkaddr ll_dst = {
  .addr = 
# 210 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
         ((void *)0)
 
# 211 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
};
 struct net_linkaddr_storage ll_dst_storage;
 struct net_context *context;
 uint32_t create_time;
 int status;


 uint8_t pkt_priority;

 if (!pkt) {
  return 
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        0
# 221 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
             ;
 }

 create_time = net_pkt_create_time(pkt);

 ;





 if (!sys_slist_is_empty(&link_callbacks)) {
  if (net_linkaddr_set(&ll_dst_storage,
         net_pkt_lladdr_dst(pkt)->addr,
         net_pkt_lladdr_dst(pkt)->len) == 0) {
   ll_dst.addr = ll_dst_storage.addr;
   ll_dst.len = ll_dst_storage.len;
   ll_dst.type = net_pkt_lladdr_dst(pkt)->type;
  }
 }

 context = net_pkt_context(pkt);

 if (net_if_flag_is_set(iface, NET_IF_UP)) {
  if (1 &&
      net_pkt_family(pkt) != 0) {
   net_pkt_set_queued(pkt, 
# 247 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                          0
# 247 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                               );
  }

  if (0) {
   pkt_priority = net_pkt_priority(pkt);

   if (0) {



    net_pkt_ref(pkt);
   }
  }

  status = net_if_l2(iface)->send(iface, pkt);

  if (0) {
   uint32_t end_tick = k_cycle_get_32();

   ;

  


                   ;

   if (0) {
    update_txtime_stats_detail(
     pkt,
     create_time,
     end_tick);

   

                             ;






    net_pkt_stats_tick_reset(pkt);

    net_pkt_unref(pkt);
   }
  }

 } else {

  do { if (!(1 && ((2U <= 0) || ((0 == 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (2U <= __log_level) && (2U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "iface %p is down" "\n", z_log_minimal_level_to_char(2U), iface); } while (
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (2U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 2U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 0) > 0);
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 2U, (uint8_t *)
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "iface %p is down", iface); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("iface %p is down") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("iface %p is down") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("iface %p is down") + 0))) > (1)) ? (_Generic(("iface %p is down") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("iface %p is down") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("iface %p is down") + 0; size_t _arg_size = _Generic(("iface %p is down"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("iface %p is down") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("iface %p is down") + 0; double _d = _Generic(("iface %p is down") + 0, float : ("iface %p is down") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("iface %p is down") + 0; size_t _arg_size = _Generic(("iface %p is down"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("iface %p is down") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("iface %p is down") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "iface %p is down"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("iface %p is down") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("iface %p is down") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("iface %p is down") + 0))) > (1)) ? (_Generic(("iface %p is down") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("iface %p is down") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("iface %p is down") + 0; size_t _arg_size = _Generic(("iface %p is down"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("iface %p is down") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("iface %p is down") + 0; double _d = _Generic(("iface %p is down") + 0, float : ("iface %p is down") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("iface %p is down") + 0; size_t _arg_size = _Generic(("iface %p is down"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("iface %p is down") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("iface %p is down") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "iface %p is down"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 2U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 2U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "iface %p is down", iface); } else if (1) { log_string_sync(src_level, "iface %p is down", iface); } else { log_1("iface %p is down", (log_arg_t)(iface), src_level); } } while (
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("iface %p is down", iface); } } while (
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 );
  status = -
# 297 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
           115
# 297 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                   ;
 }

 if (status < 0) {
  net_pkt_unref(pkt);
 } else {
  net_stats_update_bytes_sent(iface, status);
 }

 if (context) {
  do { if (!(1 && ((4U <= 0) || ((0 == 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "Calling context send cb %p status %d" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), context, status); } while (
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((context) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((status) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
#pragma GCC diagnostic pop
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "Calling context send cb %p status %d", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), context, status); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Calling context send cb %p status %d") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Calling context send cb %p status %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Calling context send cb %p status %d") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Calling context send cb %p status %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Calling context send cb %p status %d") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Calling context send cb %p status %d") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Calling context send cb %p status %d"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Calling context send cb %p status %d") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Calling context send cb %p status %d") + 0; double _d = _Generic(("%s: " "(%s): " "Calling context send cb %p status %d") + 0, float : ("%s: " "(%s): " "Calling context send cb %p status %d") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Calling context send cb %p status %d") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Calling context send cb %p status %d"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Calling context send cb %p status %d") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Calling context send cb %p status %d") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Calling context send cb %p status %d"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((context) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((context) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((context) + 0))) > (1)) ? (_Generic((context) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((context) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (context) + 0; size_t _arg_size = _Generic((context), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((context) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (context) + 0; double _d = _Generic((context) + 0, float : (context) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (context) + 0; size_t _arg_size = _Generic((context), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((context) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((context) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = context; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((status) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((status) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((status) + 0))) > (1)) ? (_Generic((status) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((status) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (status) + 0; size_t _arg_size = _Generic((status), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((status) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (status) + 0; double _d = _Generic((status) + 0, float : (status) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (status) + 0; size_t _arg_size = _Generic((status), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((status) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((status) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = status; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
#pragma GCC diagnostic push
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Calling context send cb %p status %d") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Calling context send cb %p status %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Calling context send cb %p status %d") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Calling context send cb %p status %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Calling context send cb %p status %d") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Calling context send cb %p status %d") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Calling context send cb %p status %d"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Calling context send cb %p status %d") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Calling context send cb %p status %d") + 0; double _d = _Generic(("%s: " "(%s): " "Calling context send cb %p status %d") + 0, float : ("%s: " "(%s): " "Calling context send cb %p status %d") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Calling context send cb %p status %d") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Calling context send cb %p status %d"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Calling context send cb %p status %d") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Calling context send cb %p status %d") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Calling context send cb %p status %d"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((context) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((context) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((context) + 0))) > (1)) ? (_Generic((context) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((context) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (context) + 0; size_t _arg_size = _Generic((context), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((context) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (context) + 0; double _d = _Generic((context) + 0, float : (context) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (context) + 0; size_t _arg_size = _Generic((context), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((context) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((context) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = context; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((status) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((status) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((status) + 0))) > (1)) ? (_Generic((status) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((status) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (status) + 0; size_t _arg_size = _Generic((status), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((status) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (status) + 0; double _d = _Generic((status) + 0, float : (status) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (status) + 0; size_t _arg_size = _Generic((status), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((status) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((status) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = status; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "Calling context send cb %p status %d", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), context, status); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "Calling context send cb %p status %d", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), context, status); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(context) , (log_arg_t)(status)}; log_n("%s: " "(%s): " "Calling context send cb %p status %d", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } } while (
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "Calling context send cb %p status %d", log_strdup(k_thread_name_get(k_current_get())), context, status); } } while (
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 307 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )
                   ;

  net_context_send_cb(context, status);
 }

 if (ll_dst.addr) {
  net_if_call_link_cb(iface, &ll_dst, status);
 }

 return 
# 317 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       1
# 317 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           ;
}

void net_process_tx_packet(struct net_pkt *pkt)
{
 struct net_if *iface;

 ;

 iface = net_pkt_iface(pkt);

 net_if_tx(iface, pkt);




}

void net_if_queue_tx(struct net_if *iface, struct net_pkt *pkt)
{
 if (!net_pkt_filter_send_ok(pkt)) {

  net_pkt_unref(pkt);
  return;
 }

 uint8_t prio = net_pkt_priority(pkt);
 uint8_t tc = net_tx_priority2tc(prio);

 net_stats_update_tc_sent_pkt(iface, tc);
 net_stats_update_tc_sent_bytes(iface, tc, net_pkt_get_len(pkt));
 net_stats_update_tc_sent_priority(iface, tc, prio);





 if ((0 &&
      prio == NET_PRIORITY_CA) || 6 == 0) {
  ;

  net_if_tx(net_pkt_iface(pkt), pkt);
  return;
 }


 do { if (!(1 && ((4U <= 0) || ((0 == 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "TC %d with prio %d pkt %p" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), tc, prio, pkt); } while (
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((tc) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((prio) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((pkt) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
, 0, "%s: " "(%s): " "TC %d with prio %d pkt %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), tc, prio, pkt); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0) 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
!= 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "TC %d with prio %d pkt %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0; double _d = _Generic(("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0, float : ("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "TC %d with prio %d pkt %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "TC %d with prio %d pkt %p"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((tc) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((tc) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((tc) + 0))) > (1)) ? (_Generic((tc) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((tc) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (tc) + 0; size_t _arg_size = _Generic((tc), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((tc) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (tc) + 0; double _d = _Generic((tc) + 0, float : (tc) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (tc) + 0; size_t _arg_size = _Generic((tc), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((tc) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((tc) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = tc; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((prio) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((prio) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((prio) + 0))) > (1)) ? (_Generic((prio) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((prio) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (prio) + 0; size_t _arg_size = _Generic((prio), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((prio) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (prio) + 0; double _d = _Generic((prio) + 0, float : (prio) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (prio) + 0; size_t _arg_size = _Generic((prio), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((prio) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((prio) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = prio; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((pkt) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((pkt) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((pkt) + 0))) > (1)) ? (_Generic((pkt) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((pkt) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (pkt) + 0; size_t _arg_size = _Generic((pkt), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((pkt) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (pkt) + 0; double _d = _Generic((pkt) + 0, float : (pkt) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (pkt) + 0; size_t _arg_size = _Generic((pkt), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((pkt) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((pkt) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = pkt; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
((__builtin_object_size(
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, __builtin_object_size(
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0)) : __memset_ichk(
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; }; if (_plen) { do {
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "TC %d with prio %d pkt %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0; double _d = _Generic(("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0, float : ("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "TC %d with prio %d pkt %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "TC %d with prio %d pkt %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "TC %d with prio %d pkt %p"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((tc) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((tc) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((tc) + 0))) > (1)) ? (_Generic((tc) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((tc) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (tc) + 0; size_t _arg_size = _Generic((tc), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((tc) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (tc) + 0; double _d = _Generic((tc) + 0, float : (tc) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (tc) + 0; size_t _arg_size = _Generic((tc), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((tc) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((tc) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = tc; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((prio) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((prio) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((prio) + 0))) > (1)) ? (_Generic((prio) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((prio) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (prio) + 0; size_t _arg_size = _Generic((prio), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((prio) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (prio) + 0; double _d = _Generic((prio) + 0, float : (prio) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (prio) + 0; size_t _arg_size = _Generic((prio), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((prio) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((prio) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = prio; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((pkt) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((pkt) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((pkt) + 0))) > (1)) ? (_Generic((pkt) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((pkt) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (pkt) + 0; size_t _arg_size = _Generic((pkt), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((pkt) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (pkt) + 0; double _d = _Generic((pkt) + 0, float : (pkt) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (pkt) + 0; size_t _arg_size = _Generic((pkt), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((pkt) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((pkt) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = pkt; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "TC %d with prio %d pkt %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), tc, prio, pkt); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "TC %d with prio %d pkt %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), tc, prio, pkt); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(tc) , (log_arg_t)(prio) , (log_arg_t)(pkt)}; log_n("%s: " "(%s): " "TC %d with prio %d pkt %p", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } } while (
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); } if (
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) { z_log_printf_arg_checker("(%s): " "TC %d with prio %d pkt %p", log_strdup(k_thread_name_get(k_current_get())), tc, prio, pkt); } } while (
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 363 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
);






 if (!net_tc_submit_to_tx_queue(tc, pkt)) {



   ;
 }
}

void net_if_stats_reset(struct net_if *iface)
{

 extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *tmp = _net_if_list_start; ({ { }; tmp < _net_if_list_end; }); tmp++) {
  if (iface == tmp) {
   
# 383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  ((__builtin_object_size(
# 383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  &iface->stats
# 383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 0) != (size_t)-1) ? __builtin___memset_chk(
# 383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  &iface->stats
# 383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  0
# 383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  sizeof(iface->stats)
# 383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , __builtin_object_size(
# 383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  &iface->stats
# 383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 0)) : __memset_ichk(
# 383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  &iface->stats
# 383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  0
# 383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  sizeof(iface->stats)
# 383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  ))
# 383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                                ;
   return;
  }
 }



}

void net_if_stats_reset_all(void)
{

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *iface = _net_if_list_start; ({ { }; iface < _net_if_list_end; }); iface++) {
  
# 398 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 398 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 &iface->stats
# 398 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 398 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 &iface->stats
# 398 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 398 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 398 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 398 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 sizeof(iface->stats)
# 398 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 398 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 &iface->stats
# 398 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 398 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 &iface->stats
# 398 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 398 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 398 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 398 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 sizeof(iface->stats)
# 398 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 398 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                               ;
 }

 k_mutex_unlock(&lock);

}

static inline void init_iface(struct net_if *iface)
{
 const struct net_if_api *api = net_if_get_device(iface)->api;

 if (!api || !api->init) {
  do { if (!(1 && ((1U <= 0) || ((0 == 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Iface %p driver API init NULL" "\n", z_log_minimal_level_to_char(1U), iface); } while (
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 1U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 0) > 0);
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 1U, (uint8_t *)
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "Iface %p driver API init NULL", iface); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Iface %p driver API init NULL") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Iface %p driver API init NULL") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Iface %p driver API init NULL") + 0))) > (1)) ? (_Generic(("Iface %p driver API init NULL") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Iface %p driver API init NULL") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("Iface %p driver API init NULL") + 0; size_t _arg_size = _Generic(("Iface %p driver API init NULL"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("Iface %p driver API init NULL") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Iface %p driver API init NULL") + 0; double _d = _Generic(("Iface %p driver API init NULL") + 0, float : ("Iface %p driver API init NULL") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("Iface %p driver API init NULL") + 0; size_t _arg_size = _Generic(("Iface %p driver API init NULL"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Iface %p driver API init NULL") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Iface %p driver API init NULL") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Iface %p driver API init NULL"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Iface %p driver API init NULL") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Iface %p driver API init NULL") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Iface %p driver API init NULL") + 0))) > (1)) ? (_Generic(("Iface %p driver API init NULL") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Iface %p driver API init NULL") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("Iface %p driver API init NULL") + 0; size_t _arg_size = _Generic(("Iface %p driver API init NULL"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("Iface %p driver API init NULL") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Iface %p driver API init NULL") + 0; double _d = _Generic(("Iface %p driver API init NULL") + 0, float : ("Iface %p driver API init NULL") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("Iface %p driver API init NULL") + 0; size_t _arg_size = _Generic(("Iface %p driver API init NULL"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Iface %p driver API init NULL") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Iface %p driver API init NULL") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Iface %p driver API init NULL"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 1U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "Iface %p driver API init NULL", iface); } else if (1) { log_string_sync(src_level, "Iface %p driver API init NULL", iface); } else { log_1("Iface %p driver API init NULL", (log_arg_t)(iface), src_level); } } while (
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("Iface %p driver API init NULL", iface); } } while (
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 );
  return;
 }





 net_if_flag_set(iface, NET_IF_IPV4);


 net_if_flag_set(iface, NET_IF_IPV6);

 net_virtual_init(iface);

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "On iface %p" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), iface); } while (
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
, 0, "%s: " "(%s): " "On iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0) 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
!= 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "On iface %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "On iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "On iface %p") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "On iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "On iface %p") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "On iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "On iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "On iface %p") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "On iface %p") + 0; double _d = _Generic(("%s: " "(%s): " "On iface %p") + 0, float : ("%s: " "(%s): " "On iface %p") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "On iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "On iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "On iface %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "On iface %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "On iface %p"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
((__builtin_object_size(
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, __builtin_object_size(
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0)) : __memset_ichk(
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; }; if (_plen) { do {
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "On iface %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "On iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "On iface %p") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "On iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "On iface %p") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "On iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "On iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "On iface %p") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "On iface %p") + 0; double _d = _Generic(("%s: " "(%s): " "On iface %p") + 0, float : ("%s: " "(%s): " "On iface %p") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "On iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "On iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "On iface %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "On iface %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "On iface %p"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "On iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "On iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); } else { log_3("%s: " "(%s): " "On iface %p", (log_arg_t)((const char *)__func__), (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))), (log_arg_t)(iface), src_level); } } while (
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); } if (
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) { z_log_printf_arg_checker("(%s): " "On iface %p", log_strdup(k_thread_name_get(k_current_get())), iface); } } while (
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 425 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
);





 api->init(iface);
}

enum net_verdict net_if_send_data(struct net_if *iface, struct net_pkt *pkt)
{
 struct net_context *context = net_pkt_context(pkt);
 struct net_linkaddr *dst = net_pkt_lladdr_dst(pkt);
 enum net_verdict verdict = NET_OK;
 int status = -
# 439 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
              5
# 439 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                 ;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (!net_if_flag_is_set(iface, NET_IF_UP) ||
     net_if_flag_is_set(iface, NET_IF_SUSPENDED)) {

  do { if (!(1 && ((2U <= 0) || ((0 == 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (2U <= __log_level) && (2U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "iface %p is down" "\n", z_log_minimal_level_to_char(2U), iface); } while (
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (2U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 2U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 0) > 0);
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 2U, (uint8_t *)
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "iface %p is down", iface); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("iface %p is down") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("iface %p is down") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("iface %p is down") + 0))) > (1)) ? (_Generic(("iface %p is down") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("iface %p is down") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("iface %p is down") + 0; size_t _arg_size = _Generic(("iface %p is down"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("iface %p is down") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("iface %p is down") + 0; double _d = _Generic(("iface %p is down") + 0, float : ("iface %p is down") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("iface %p is down") + 0; size_t _arg_size = _Generic(("iface %p is down"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("iface %p is down") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("iface %p is down") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "iface %p is down"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("iface %p is down") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("iface %p is down") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("iface %p is down") + 0))) > (1)) ? (_Generic(("iface %p is down") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("iface %p is down") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("iface %p is down") + 0; size_t _arg_size = _Generic(("iface %p is down"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("iface %p is down") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("iface %p is down") + 0; double _d = _Generic(("iface %p is down") + 0, float : ("iface %p is down") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("iface %p is down") + 0; size_t _arg_size = _Generic(("iface %p is down"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("iface %p is down") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("iface %p is down") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "iface %p is down"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 2U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 2U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "iface %p is down", iface); } else if (1) { log_string_sync(src_level, "iface %p is down", iface); } else { log_1("iface %p is down", (log_arg_t)(iface), src_level); } } while (
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("iface %p is down", iface); } } while (
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 446 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 );
  verdict = NET_DROP;
  status = -
# 448 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
           115
# 448 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                   ;
  goto done;
 }

 if (0 && !net_if_l2(iface)) {
  do { if (!(1 && ((2U <= 0) || ((0 == 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (2U <= __log_level) && (2U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "no l2 for iface %p, discard pkt" "\n", z_log_minimal_level_to_char(2U), iface); } while (
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (2U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 2U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 0) > 0);
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 2U, (uint8_t *)
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "no l2 for iface %p, discard pkt", iface); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("no l2 for iface %p, discard pkt") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("no l2 for iface %p, discard pkt") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("no l2 for iface %p, discard pkt") + 0))) > (1)) ? (_Generic(("no l2 for iface %p, discard pkt") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("no l2 for iface %p, discard pkt") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("no l2 for iface %p, discard pkt") + 0; size_t _arg_size = _Generic(("no l2 for iface %p, discard pkt"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("no l2 for iface %p, discard pkt") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("no l2 for iface %p, discard pkt") + 0; double _d = _Generic(("no l2 for iface %p, discard pkt") + 0, float : ("no l2 for iface %p, discard pkt") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("no l2 for iface %p, discard pkt") + 0; size_t _arg_size = _Generic(("no l2 for iface %p, discard pkt"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("no l2 for iface %p, discard pkt") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("no l2 for iface %p, discard pkt") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "no l2 for iface %p, discard pkt"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("no l2 for iface %p, discard pkt") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("no l2 for iface %p, discard pkt") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("no l2 for iface %p, discard pkt") + 0))) > (1)) ? (_Generic(("no l2 for iface %p, discard pkt") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("no l2 for iface %p, discard pkt") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("no l2 for iface %p, discard pkt") + 0; size_t _arg_size = _Generic(("no l2 for iface %p, discard pkt"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("no l2 for iface %p, discard pkt") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("no l2 for iface %p, discard pkt") + 0; double _d = _Generic(("no l2 for iface %p, discard pkt") + 0, float : ("no l2 for iface %p, discard pkt") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("no l2 for iface %p, discard pkt") + 0; size_t _arg_size = _Generic(("no l2 for iface %p, discard pkt"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("no l2 for iface %p, discard pkt") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("no l2 for iface %p, discard pkt") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "no l2 for iface %p, discard pkt"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 2U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 2U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "no l2 for iface %p, discard pkt", iface); } else if (1) { log_string_sync(src_level, "no l2 for iface %p, discard pkt", iface); } else { log_1("no l2 for iface %p, discard pkt", (log_arg_t)(iface), src_level); } } while (
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("no l2 for iface %p, discard pkt", iface); } } while (
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 453 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 );
  verdict = NET_DROP;
  goto done;
 }






 if (!net_if_flag_is_set(iface, NET_IF_POINTOPOINT) &&
     !net_pkt_lladdr_src(pkt)->addr) {
  net_pkt_lladdr_src(pkt)->addr = net_pkt_lladdr_if(pkt)->addr;
  net_pkt_lladdr_src(pkt)->len = net_pkt_lladdr_if(pkt)->len;
 }
# 481 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 if (1 && net_pkt_family(pkt) == 2) {
  verdict = net_ipv6_prepare_for_send(pkt);
 }

done:
# 497 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 if (verdict == NET_DROP) {
  if (context) {
   do { if (!(1 && ((4U <= 0) || ((0 == 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "Calling ctx send cb %p verdict %d" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), context, verdict); } while (
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  _Bool 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((context) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((verdict) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
#pragma GCC diagnostic pop
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  , 0, "%s: " "(%s): " "Calling ctx send cb %p verdict %d", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), context, verdict); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  _Bool 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0) 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  != 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Calling ctx send cb %p verdict %d"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0; double _d = _Generic(("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0, float : ("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Calling ctx send cb %p verdict %d"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Calling ctx send cb %p verdict %d"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((context) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((context) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((context) + 0))) > (1)) ? (_Generic((context) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((context) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (context) + 0; size_t _arg_size = _Generic((context), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((context) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (context) + 0; double _d = _Generic((context) + 0, float : (context) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (context) + 0; size_t _arg_size = _Generic((context), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((context) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((context) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = context; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((verdict) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((verdict) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((verdict) + 0))) > (1)) ? (_Generic((verdict) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((verdict) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (verdict) + 0; size_t _arg_size = _Generic((verdict), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((verdict) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (verdict) + 0; double _d = _Generic((verdict) + 0, float : (verdict) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (verdict) + 0; size_t _arg_size = _Generic((verdict), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((verdict) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((verdict) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = verdict; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  ((__builtin_object_size(
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 0) != (size_t)-1) ? __builtin___memset_chk(
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  0
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  (sizeof(struct log_msg2_hdr) + _plen + (0))
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , __builtin_object_size(
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 0)) : __memset_ichk(
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  0
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  (sizeof(struct log_msg2_hdr) + _plen + (0))
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  ))
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; }; if (_plen) { do {
#pragma GCC diagnostic push
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  _Bool 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Calling ctx send cb %p verdict %d"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0; double _d = _Generic(("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0, float : ("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Calling ctx send cb %p verdict %d"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Calling ctx send cb %p verdict %d") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Calling ctx send cb %p verdict %d"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((context) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((context) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((context) + 0))) > (1)) ? (_Generic((context) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((context) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (context) + 0; size_t _arg_size = _Generic((context), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((context) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (context) + 0; double _d = _Generic((context) + 0, float : (context) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (context) + 0; size_t _arg_size = _Generic((context), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((context) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((context) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = context; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((verdict) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((verdict) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((verdict) + 0))) > (1)) ? (_Generic((verdict) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((verdict) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (verdict) + 0; size_t _arg_size = _Generic((verdict), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((verdict) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (verdict) + 0; double _d = _Generic((verdict) + 0, float : (verdict) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (verdict) + 0; size_t _arg_size = _Generic((verdict), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((verdict) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((verdict) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = verdict; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "Calling ctx send cb %p verdict %d", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), context, verdict); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "Calling ctx send cb %p verdict %d", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), context, verdict); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(context) , (log_arg_t)(verdict)}; log_n("%s: " "(%s): " "Calling ctx send cb %p verdict %d", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); } } while (
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); } while (0); } if (
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) { z_log_printf_arg_checker("(%s): " "Calling ctx send cb %p verdict %d", log_strdup(k_thread_name_get(k_current_get())), context, verdict); } } while (
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 499 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  )
                     ;
   net_context_send_cb(context, status);
  }

  if (dst->addr) {
   net_if_call_link_cb(iface, dst, status);
  }
 } else if (verdict == NET_OK) {

  net_if_queue_tx(iface, pkt);
 }

 k_mutex_unlock(&lock);

 return verdict;
}

int net_if_set_link_addr_locked(struct net_if *iface,
    uint8_t *addr, uint8_t len,
    enum net_link_type type)
{
 int ret;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 ret = net_if_set_link_addr_unlocked(iface, addr, len, type);

 k_mutex_unlock(&lock);

 return ret;
}

struct net_if *net_if_get_by_link_addr(struct net_linkaddr *ll_addr)
{
 extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *iface = _net_if_list_start; ({ { }; iface < _net_if_list_end; }); iface++) {
  if (!memcmp(net_if_get_link_addr(iface)->addr, ll_addr->addr,
       ll_addr->len)) {
   return iface;
  }
 }

 return 
# 541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       ((void *)0)
# 541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           ;
}

struct net_if *net_if_lookup_by_dev(const struct device *dev)
{
 extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *iface = _net_if_list_start; ({ { }; iface < _net_if_list_end; }); iface++) {
  if (net_if_get_device(iface) == dev) {
   return iface;
  }
 }

 return 
# 552 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       ((void *)0)
# 552 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           ;
}

struct net_if *net_if_get_default(void)
{
 struct net_if *iface = 
# 557 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                       ((void *)0)
# 557 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                           ;

 if (_net_if_list_start == _net_if_list_end) {
  return 
# 560 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        ((void *)0)
# 560 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
 }
# 588 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 return iface ? iface : _net_if_list_start;
}

struct net_if *net_if_get_first_by_type(const struct net_l2 *l2)
{
 extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *iface = _net_if_list_start; ({ { }; iface < _net_if_list_end; }); iface++) {
  if (0 &&
      !l2 && net_if_offload(iface)) {
   return iface;
  }

  if (net_if_l2(iface) == l2) {
   return iface;
  }
 }

 return 
# 604 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       ((void *)0)
# 604 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           ;
}

static enum net_l2_flags l2_flags_get(struct net_if *iface)
{
 enum net_l2_flags flags = 0;

 if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
  flags = net_if_l2(iface)->get_flags(iface);
 }

 return flags;
}



static uint8_t get_ipaddr_diff(const uint8_t *src, const uint8_t *dst, int addr_len)
{
 uint8_t j, k, xor;
 uint8_t len = 0U;

 for (j = 0U; j < addr_len; j++) {
  if (src[j] == dst[j]) {
   len += 8U;
  } else {
   xor = src[j] ^ dst[j];
   for (k = 0U; k < 8; k++) {
    if (!(xor & 0x80)) {
     len++;
     xor <<= 1;
    } else {
     break;
    }
   }
   break;
  }
 }

 return len;
}

static struct net_if_router *iface_router_lookup(struct net_if *iface,
       uint8_t family, void *addr)
{
 struct net_if_router *router = 
# 648 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                               ((void *)0)
# 648 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                   ;
 int i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 for (i = 0; i < 2; i++) {
  if (!routers[i].is_used ||
      routers[i].address.family != family ||
      routers[i].iface != iface) {
   continue;
  }

  if ((1 && family == 2 &&
       net_ipv6_addr_cmp(net_if_router_ipv6(&routers[i]),
           (struct in6_addr *)addr)) ||
      (1 && family == 1 &&
       net_ipv4_addr_cmp(net_if_router_ipv4(&routers[i]),
           (struct in_addr *)addr))) {
   router = &routers[i];
   goto out;
  }
 }

out:
 k_mutex_unlock(&lock);

 return router;
}

static void iface_router_notify_deletion(struct net_if_router *router,
      const char *delete_reason)
{
 if (1 &&
     router->address.family == 2) {
  do { if (!(1 && ((4U <= 0) || ((0 == 
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "IPv6 router %s %s" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, net_if_router_ipv6(router))), delete_reason); } while (
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({


#pragma GCC diagnostic push
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((delete_reason) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);


#pragma GCC diagnostic pop
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "IPv6 router %s %s", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, net_if_router_ipv6(router))), delete_reason); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {


#pragma GCC diagnostic push
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "IPv6 router %s %s") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "IPv6 router %s %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "IPv6 router %s %s") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "IPv6 router %s %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "IPv6 router %s %s") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "IPv6 router %s %s") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "IPv6 router %s %s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "IPv6 router %s %s") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "IPv6 router %s %s") + 0; double _d = _Generic(("%s: " "(%s): " "IPv6 router %s %s") + 0, float : ("%s: " "(%s): " "IPv6 router %s %s") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "IPv6 router %s %s") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "IPv6 router %s %s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "IPv6 router %s %s") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "IPv6 router %s %s") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "IPv6 router %s %s"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0, float : (log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, net_if_router_ipv6(router))); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((delete_reason) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((delete_reason) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((delete_reason) + 0))) > (1)) ? (_Generic((delete_reason) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((delete_reason) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (delete_reason) + 0; size_t _arg_size = _Generic((delete_reason), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((delete_reason) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (delete_reason) + 0; double _d = _Generic((delete_reason) + 0, float : (delete_reason) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (delete_reason) + 0; size_t _arg_size = _Generic((delete_reason), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((delete_reason) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((delete_reason) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = delete_reason; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }


#pragma GCC diagnostic pop
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {


#pragma GCC diagnostic push
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "IPv6 router %s %s") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "IPv6 router %s %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "IPv6 router %s %s") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "IPv6 router %s %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "IPv6 router %s %s") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "IPv6 router %s %s") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "IPv6 router %s %s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "IPv6 router %s %s") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "IPv6 router %s %s") + 0; double _d = _Generic(("%s: " "(%s): " "IPv6 router %s %s") + 0, float : ("%s: " "(%s): " "IPv6 router %s %s") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "IPv6 router %s %s") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "IPv6 router %s %s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "IPv6 router %s %s") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "IPv6 router %s %s") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "IPv6 router %s %s"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0, float : (log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, net_if_router_ipv6(router))); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((delete_reason) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((delete_reason) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((delete_reason) + 0))) > (1)) ? (_Generic((delete_reason) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((delete_reason) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (delete_reason) + 0; size_t _arg_size = _Generic((delete_reason), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((delete_reason) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (delete_reason) + 0; double _d = _Generic((delete_reason) + 0, float : (delete_reason) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (delete_reason) + 0; size_t _arg_size = _Generic((delete_reason), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((delete_reason) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((delete_reason) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = delete_reason; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }


#pragma GCC diagnostic pop
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "IPv6 router %s %s", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, net_if_router_ipv6(router))), delete_reason); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "IPv6 router %s %s", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, net_if_router_ipv6(router))), delete_reason); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(log_strdup(net_sprint_addr(2, net_if_router_ipv6(router)))) , (log_arg_t)(delete_reason)}; log_n("%s: " "(%s): " "IPv6 router %s %s", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } } while (
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "IPv6 router %s %s", log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, net_if_router_ipv6(router))), delete_reason); } } while (
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )


                 ;

  net_mgmt_event_notify_with_info((((1UL << (31)) | (1UL << (30)) | (2 << 28) | (0x060 << 16)) | NET_EVENT_IPV6_CMD_ROUTER_DEL),
      router->iface,
      &router->address.in6_addr,
      sizeof(struct in6_addr));
 } else if (1 &&
     router->address.family == 1) {
  do { if (!(1 && ((4U <= 0) || ((0 == 
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "IPv4 router %s %s" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(1, net_if_router_ipv4(router))), delete_reason); } while (
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({


#pragma GCC diagnostic push
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((delete_reason) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);


#pragma GCC diagnostic pop
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "IPv4 router %s %s", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(1, net_if_router_ipv4(router))), delete_reason); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {


#pragma GCC diagnostic push
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "IPv4 router %s %s") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "IPv4 router %s %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "IPv4 router %s %s") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "IPv4 router %s %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "IPv4 router %s %s") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "IPv4 router %s %s") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "IPv4 router %s %s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "IPv4 router %s %s") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "IPv4 router %s %s") + 0; double _d = _Generic(("%s: " "(%s): " "IPv4 router %s %s") + 0, float : ("%s: " "(%s): " "IPv4 router %s %s") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "IPv4 router %s %s") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "IPv4 router %s %s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "IPv4 router %s %s") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "IPv4 router %s %s") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "IPv4 router %s %s"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0, float : (log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(1, net_if_router_ipv4(router))); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((delete_reason) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((delete_reason) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((delete_reason) + 0))) > (1)) ? (_Generic((delete_reason) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((delete_reason) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (delete_reason) + 0; size_t _arg_size = _Generic((delete_reason), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((delete_reason) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (delete_reason) + 0; double _d = _Generic((delete_reason) + 0, float : (delete_reason) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (delete_reason) + 0; size_t _arg_size = _Generic((delete_reason), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((delete_reason) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((delete_reason) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = delete_reason; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }


#pragma GCC diagnostic pop
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {


#pragma GCC diagnostic push
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "IPv4 router %s %s") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "IPv4 router %s %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "IPv4 router %s %s") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "IPv4 router %s %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "IPv4 router %s %s") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "IPv4 router %s %s") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "IPv4 router %s %s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "IPv4 router %s %s") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "IPv4 router %s %s") + 0; double _d = _Generic(("%s: " "(%s): " "IPv4 router %s %s") + 0, float : ("%s: " "(%s): " "IPv4 router %s %s") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "IPv4 router %s %s") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "IPv4 router %s %s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "IPv4 router %s %s") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "IPv4 router %s %s") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "IPv4 router %s %s"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0, float : (log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(1, net_if_router_ipv4(router))); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((delete_reason) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((delete_reason) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((delete_reason) + 0))) > (1)) ? (_Generic((delete_reason) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((delete_reason) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (delete_reason) + 0; size_t _arg_size = _Generic((delete_reason), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((delete_reason) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (delete_reason) + 0; double _d = _Generic((delete_reason) + 0, float : (delete_reason) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (delete_reason) + 0; size_t _arg_size = _Generic((delete_reason), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((delete_reason) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((delete_reason) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = delete_reason; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }


#pragma GCC diagnostic pop
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "IPv4 router %s %s", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(1, net_if_router_ipv4(router))), delete_reason); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "IPv4 router %s %s", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(1, net_if_router_ipv4(router))), delete_reason); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(log_strdup(net_sprint_addr(1, net_if_router_ipv4(router)))) , (log_arg_t)(delete_reason)}; log_n("%s: " "(%s): " "IPv4 router %s %s", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } } while (
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "IPv4 router %s %s", log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(1, net_if_router_ipv4(router))), delete_reason); } } while (
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 693 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )


                 ;

  net_mgmt_event_notify_with_info((((1UL << (31)) | (1UL << (30)) | (2 << 28) | (0x004 << 16)) | NET_EVENT_IPV4_CMD_ROUTER_DEL),
      router->iface,
      &router->address.in_addr,
      sizeof(struct in6_addr));
 }
}

static inline int32_t iface_router_ends(const struct net_if_router *router,
     uint32_t now)
{
 uint32_t ends = router->life_start;

 ends += 1000U * router->lifetime;


 return (int32_t)(ends - now);
}

static void iface_router_update_timer(uint32_t now)
{
 struct net_if_router *router, *next;
 uint32_t new_delay = 0xffffffffUL;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 for (router = ((sys_slist_peek_head(&active_router_timers)) ? ((__typeof__(*(router)) *)(((char *)((sys_slist_peek_head(&active_router_timers)))) - 
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(router))
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
node
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
), next = ((router) ? ((sys_slist_peek_next(&((router)->node))) ? ((__typeof__(*(router)) *)(((char *)((sys_slist_peek_next(&((router)->node))))) - 
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(router))
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
node
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) : 
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); router != 
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; router = next, next = ((router) ? ((sys_slist_peek_next(&((router)->node))) ? ((__typeof__(*(router)) *)(((char *)((sys_slist_peek_next(&((router)->node))))) - 
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(router))
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
node
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) : 
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 723 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
))
                          {
  int32_t ends = iface_router_ends(router, now);

  if (ends <= 0) {
   new_delay = 0;
   break;
  }

  new_delay = ((((uint32_t)ends) < (new_delay)) ? ((uint32_t)ends) : (new_delay));
 }

 if (new_delay == 0xffffffffUL) {
  k_work_cancel_delayable(&router_timer);
 } else {
  k_work_reschedule(&router_timer, ((k_timeout_t) { .ticks = ((k_ticks_t)k_ms_to_ticks_ceil64((((new_delay) > (0)) ? (new_delay) : (0)))) }));
 }

 k_mutex_unlock(&lock);
}

static void iface_router_expired(struct k_work *work)
{
 uint32_t current_time = k_uptime_get_32();
 struct net_if_router *router, *next;
 sys_snode_t *prev_node = 
# 748 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                         ((void *)0)
# 748 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                             ;

 (void)(work);

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 for (router = ((sys_slist_peek_head(&active_router_timers)) ? ((__typeof__(*(router)) *)(((char *)((sys_slist_peek_head(&active_router_timers)))) - 
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(router))
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
node
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
), next = ((router) ? ((sys_slist_peek_next(&((router)->node))) ? ((__typeof__(*(router)) *)(((char *)((sys_slist_peek_next(&((router)->node))))) - 
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(router))
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
node
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) : 
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); router != 
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; router = next, next = ((router) ? ((sys_slist_peek_next(&((router)->node))) ? ((__typeof__(*(router)) *)(((char *)((sys_slist_peek_next(&((router)->node))))) - 
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(router))
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
node
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) : 
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
))
                           {
  int32_t ends = iface_router_ends(router, current_time);

  if (ends > 0) {



   prev_node = &router->node;
   continue;
  }

  iface_router_notify_deletion(router, "has expired");
  sys_slist_remove(&active_router_timers,
     prev_node, &router->node);
  router->is_used = 
# 769 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                   0
# 769 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                        ;
 }

 iface_router_update_timer(current_time);

 k_mutex_unlock(&lock);
}

static struct net_if_router *iface_router_add(struct net_if *iface,
           uint8_t family, void *addr,
           
# 779 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
          _Bool 
# 779 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
               is_default,
           uint16_t lifetime)
{
 struct net_if_router *router = 
# 782 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                               ((void *)0)
# 782 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                   ;
 int i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 for (i = 0; i < 2; i++) {
  if (routers[i].is_used) {
   continue;
  }

  routers[i].is_used = 
# 792 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                      1
# 792 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                          ;
  routers[i].iface = iface;
  routers[i].address.family = family;

  if (lifetime) {
   routers[i].is_default = 
# 797 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                          1
# 797 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                              ;
   routers[i].is_infinite = 
# 798 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                           0
# 798 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                ;
   routers[i].lifetime = lifetime;
   routers[i].life_start = k_uptime_get_32();

   sys_slist_append(&active_router_timers,
      &routers[i].node);

   iface_router_update_timer(routers[i].life_start);
  } else {
   routers[i].is_default = 
# 807 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                          0
# 807 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                               ;
   routers[i].is_infinite = 
# 808 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                           1
# 808 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                               ;
   routers[i].lifetime = 0;
  }

  if (1 && family == 2) {
   
# 813 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  ((__builtin_object_size(
# 813 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  net_if_router_ipv6(&routers[i])
# 813 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 0) != (size_t)-1) ? __builtin___memcpy_chk(
# 813 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  net_if_router_ipv6(&routers[i])
# 813 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 813 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  addr
# 813 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 813 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  sizeof(struct in6_addr)
# 813 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , __builtin_object_size(
# 813 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  net_if_router_ipv6(&routers[i])
# 813 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 0)) : __memcpy_ichk(
# 813 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  net_if_router_ipv6(&routers[i])
# 813 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 813 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  addr
# 813 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 813 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  sizeof(struct in6_addr)
# 813 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  ))
                                  
# 814 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                 ;
   net_mgmt_event_notify_with_info(
     (((1UL << (31)) | (1UL << (30)) | (2 << 28) | (0x060 << 16)) | NET_EVENT_IPV6_CMD_ROUTER_ADD), iface,
     &routers[i].address.in6_addr,
     sizeof(struct in6_addr));

   do { if (!(1 && ((4U <= 0) || ((0 == 
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "interface %p router %s lifetime %u default %d " "added" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(2, (struct in6_addr *)addr)), lifetime, routers[i].is_default); } while (
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  _Bool 
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({



#pragma GCC diagnostic push
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  



#pragma GCC diagnostic ignored "-Wpointer-arith"
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((lifetime) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((routers[i].is_default) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);



#pragma GCC diagnostic pop
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  , 0, "%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(2, (struct in6_addr *)addr)), lifetime, routers[i].is_default); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {



#pragma GCC diagnostic push
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  



#pragma GCC diagnostic ignored "-Wpointer-arith"
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  _Bool 
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0) 
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  != 
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0; double _d = _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, float : ("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0, float : (log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, (struct in6_addr *)addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((lifetime) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((lifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((lifetime) + 0))) > (1)) ? (_Generic((lifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((lifetime) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (lifetime) + 0; size_t _arg_size = _Generic((lifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((lifetime) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (lifetime) + 0; double _d = _Generic((lifetime) + 0, float : (lifetime) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (lifetime) + 0; size_t _arg_size = _Generic((lifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((lifetime) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((lifetime) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = lifetime; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((routers[i].is_default) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((routers[i].is_default) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((routers[i].is_default) + 0))) > (1)) ? (_Generic((routers[i].is_default) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((routers[i].is_default) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (routers[i].is_default) + 0; size_t _arg_size = _Generic((routers[i].is_default), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((routers[i].is_default) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (routers[i].is_default) + 0; double _d = _Generic((routers[i].is_default) + 0, float : (routers[i].is_default) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (routers[i].is_default) + 0; size_t _arg_size = _Generic((routers[i].is_default), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((routers[i].is_default) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((routers[i].is_default) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = routers[i].is_default; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28 
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }



#pragma GCC diagnostic pop
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  ((__builtin_object_size(
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 0) != (size_t)-1) ? __builtin___memset_chk(
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  0
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  (sizeof(struct log_msg2_hdr) + _plen + (0))
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , __builtin_object_size(
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 0)) : __memset_ichk(
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  0
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  (sizeof(struct log_msg2_hdr) + _plen + (0))
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  ))
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; }; if (_plen) { do {



#pragma GCC diagnostic push
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  



#pragma GCC diagnostic ignored "-Wpointer-arith"
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  _Bool 
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0; double _d = _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, float : ("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0, float : (log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, (struct in6_addr *)addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((lifetime) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((lifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((lifetime) + 0))) > (1)) ? (_Generic((lifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((lifetime) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (lifetime) + 0; size_t _arg_size = _Generic((lifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((lifetime) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (lifetime) + 0; double _d = _Generic((lifetime) + 0, float : (lifetime) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (lifetime) + 0; size_t _arg_size = _Generic((lifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((lifetime) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((lifetime) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = lifetime; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((routers[i].is_default) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((routers[i].is_default) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((routers[i].is_default) + 0))) > (1)) ? (_Generic((routers[i].is_default) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((routers[i].is_default) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (routers[i].is_default) + 0; size_t _arg_size = _Generic((routers[i].is_default), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((routers[i].is_default) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (routers[i].is_default) + 0; double _d = _Generic((routers[i].is_default) + 0, float : (routers[i].is_default) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (routers[i].is_default) + 0; size_t _arg_size = _Generic((routers[i].is_default), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((routers[i].is_default) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((routers[i].is_default) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = routers[i].is_default; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28 
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }



#pragma GCC diagnostic pop
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(2, (struct in6_addr *)addr)), lifetime, routers[i].is_default); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(2, (struct in6_addr *)addr)), lifetime, routers[i].is_default); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(iface) , (log_arg_t)(log_strdup(net_sprint_addr(2, (struct in6_addr *)addr))) , (log_arg_t)(lifetime) , (log_arg_t)(routers[i].is_default)}; log_n("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); } } while (
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); } while (0); } if (
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) { z_log_printf_arg_checker("(%s): " "interface %p router %s lifetime %u default %d " "added", log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(2, (struct in6_addr *)addr)), lifetime, routers[i].is_default); } } while (
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 820 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  )



                                    ;
  } else if (1 && family == 1) {
   
# 826 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  ((__builtin_object_size(
# 826 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  net_if_router_ipv4(&routers[i])
# 826 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 0) != (size_t)-1) ? __builtin___memcpy_chk(
# 826 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  net_if_router_ipv4(&routers[i])
# 826 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 826 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  addr
# 826 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 826 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  sizeof(struct in_addr)
# 826 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , __builtin_object_size(
# 826 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  net_if_router_ipv4(&routers[i])
# 826 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 0)) : __memcpy_ichk(
# 826 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  net_if_router_ipv4(&routers[i])
# 826 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 826 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  addr
# 826 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 826 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  sizeof(struct in_addr)
# 826 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  ))
                                 
# 827 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                ;
   routers[i].is_default = is_default;

   net_mgmt_event_notify_with_info(
     (((1UL << (31)) | (1UL << (30)) | (2 << 28) | (0x004 << 16)) | NET_EVENT_IPV4_CMD_ROUTER_ADD), iface,
     &routers[i].address.in_addr,
     sizeof(struct in_addr));

   do { if (!(1 && ((4U <= 0) || ((0 == 
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "interface %p router %s lifetime %u default %d " "added" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(1, (struct in_addr *)addr)), lifetime, is_default); } while (
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  _Bool 
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({



#pragma GCC diagnostic push
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  



#pragma GCC diagnostic ignored "-Wpointer-arith"
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((lifetime) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((is_default) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);



#pragma GCC diagnostic pop
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  , 0, "%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(1, (struct in_addr *)addr)), lifetime, is_default); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {



#pragma GCC diagnostic push
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  



#pragma GCC diagnostic ignored "-Wpointer-arith"
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  _Bool 
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0) 
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  != 
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0; double _d = _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, float : ("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0, float : (log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(1, (struct in_addr *)addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((lifetime) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((lifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((lifetime) + 0))) > (1)) ? (_Generic((lifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((lifetime) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (lifetime) + 0; size_t _arg_size = _Generic((lifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((lifetime) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (lifetime) + 0; double _d = _Generic((lifetime) + 0, float : (lifetime) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (lifetime) + 0; size_t _arg_size = _Generic((lifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((lifetime) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((lifetime) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = lifetime; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((is_default) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((is_default) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((is_default) + 0))) > (1)) ? (_Generic((is_default) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((is_default) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (is_default) + 0; size_t _arg_size = _Generic((is_default), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((is_default) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (is_default) + 0; double _d = _Generic((is_default) + 0, float : (is_default) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (is_default) + 0; size_t _arg_size = _Generic((is_default), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((is_default) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((is_default) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = is_default; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28 
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }



#pragma GCC diagnostic pop
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  ((__builtin_object_size(
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 0) != (size_t)-1) ? __builtin___memset_chk(
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  0
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  (sizeof(struct log_msg2_hdr) + _plen + (0))
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , __builtin_object_size(
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 0)) : __memset_ichk(
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  0
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  (sizeof(struct log_msg2_hdr) + _plen + (0))
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  ))
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; }; if (_plen) { do {



#pragma GCC diagnostic push
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  



#pragma GCC diagnostic ignored "-Wpointer-arith"
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  _Bool 
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0; double _d = _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, float : ("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0, float : (log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(1, (struct in_addr *)addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((lifetime) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((lifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((lifetime) + 0))) > (1)) ? (_Generic((lifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((lifetime) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (lifetime) + 0; size_t _arg_size = _Generic((lifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((lifetime) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (lifetime) + 0; double _d = _Generic((lifetime) + 0, float : (lifetime) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (lifetime) + 0; size_t _arg_size = _Generic((lifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((lifetime) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((lifetime) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = lifetime; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((is_default) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((is_default) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((is_default) + 0))) > (1)) ? (_Generic((is_default) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((is_default) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (is_default) + 0; size_t _arg_size = _Generic((is_default), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((is_default) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (is_default) + 0; double _d = _Generic((is_default) + 0, float : (is_default) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (is_default) + 0; size_t _arg_size = _Generic((is_default), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((is_default) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((is_default) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = is_default; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28 
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }



#pragma GCC diagnostic pop
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(1, (struct in_addr *)addr)), lifetime, is_default); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(1, (struct in_addr *)addr)), lifetime, is_default); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(iface) , (log_arg_t)(log_strdup(net_sprint_addr(1, (struct in_addr *)addr))) , (log_arg_t)(lifetime) , (log_arg_t)(is_default)}; log_n("%s: " "(%s): " "interface %p router %s lifetime %u default %d " "added", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); } } while (
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); } while (0); } if (
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) { z_log_printf_arg_checker("(%s): " "interface %p router %s lifetime %u default %d " "added", log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(1, (struct in_addr *)addr)), lifetime, is_default); } } while (
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 835 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  )



                         ;
  }

  router = &routers[i];
  goto out;
 }

out:
 k_mutex_unlock(&lock);

 return router;
}

static 
# 852 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
      _Bool 
# 852 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           iface_router_rm(struct net_if_router *router)
{
 
# 854 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 854 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
     ret = 
# 854 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
           0
# 854 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                ;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (!router->is_used) {
  goto out;
 }

 iface_router_notify_deletion(router, "has been removed");


 if (sys_slist_find_and_remove(&active_router_timers, &router->node)) {
  iface_router_update_timer(k_uptime_get_32());
 }

 router->is_used = 
# 869 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                  0
# 869 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                       ;
 ret = 
# 870 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
      1
# 870 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
          ;

out:
 k_mutex_unlock(&lock);

 return ret;
}

void net_if_router_rm(struct net_if_router *router)
{
 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 router->is_used = 
# 882 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                  0
# 882 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                       ;



 k_mutex_unlock(&lock);
}

static struct net_if_router *iface_router_find_default(struct net_if *iface,
             uint8_t family, void *addr)
{
 struct net_if_router *router = 
# 892 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                               ((void *)0)
# 892 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                   ;
 int i;


 (void)(addr);

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 for (i = 0; i < 2; i++) {
  if (!routers[i].is_used ||
      !routers[i].is_default ||
      routers[i].address.family != family) {
   continue;
  }

  if (iface && iface != routers[i].iface) {
   continue;
  }

  router = &routers[i];
  goto out;
 }

out:
 k_mutex_unlock(&lock);

 return router;
}

static void iface_router_init(void)
{
 k_work_init_delayable(&router_timer, iface_router_expired);
 sys_slist_init(&active_router_timers);
}





void net_if_mcast_mon_register(struct net_if_mcast_monitor *mon,
          struct net_if *iface,
          net_if_mcast_callback_t cb)
{
 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 sys_slist_find_and_remove(&mcast_monitor_callbacks, &mon->node);
 sys_slist_prepend(&mcast_monitor_callbacks, &mon->node);

 mon->iface = iface;
 mon->cb = cb;

 k_mutex_unlock(&lock);
}

void net_if_mcast_mon_unregister(struct net_if_mcast_monitor *mon)
{
 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 sys_slist_find_and_remove(&mcast_monitor_callbacks, &mon->node);

 k_mutex_unlock(&lock);
}

void net_if_mcast_monitor(struct net_if *iface,
     const struct net_addr *addr,
     
# 957 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
    _Bool 
# 957 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
         is_joined)
{
 struct net_if_mcast_monitor *mon, *tmp;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 for (mon = ((sys_slist_peek_head(&mcast_monitor_callbacks)) ? ((__typeof__(*(mon)) *)(((char *)((sys_slist_peek_head(&mcast_monitor_callbacks)))) - 
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(mon))
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
node
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
), tmp = ((mon) ? ((sys_slist_peek_next(&((mon)->node))) ? ((__typeof__(*(mon)) *)(((char *)((sys_slist_peek_next(&((mon)->node))))) - 
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(mon))
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
node
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) : 
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); mon != 
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; mon = tmp, tmp = ((mon) ? ((sys_slist_peek_next(&((mon)->node))) ? ((__typeof__(*(mon)) *)(((char *)((sys_slist_peek_next(&((mon)->node))))) - 
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(mon))
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
node
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) : 
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 963 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
))
                       {
  if (iface == mon->iface) {
   mon->cb(iface, addr, is_joined);
  }
 }

 k_mutex_unlock(&lock);
}



int net_if_config_ipv6_get(struct net_if *iface, struct net_if_ipv6 **ipv6)
{
 int ret = 0;
 int i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (!net_if_flag_is_set(iface, NET_IF_IPV6)) {
  ret = -
# 983 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
        134
# 983 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
               ;
  goto out;
 }

 if (iface->config.ip.ipv6) {
  if (ipv6) {
   *ipv6 = iface->config.ip.ipv6;
  }

  goto out;
 }

 for (i = 0; i < ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0])))); i++) {
  if (ipv6_addresses[i].iface) {
   continue;
  }

  iface->config.ip.ipv6 = &ipv6_addresses[i].ipv6;
  ipv6_addresses[i].iface = iface;

  if (ipv6) {
   *ipv6 = &ipv6_addresses[i].ipv6;
  }

  goto out;
 }

 ret = -
# 1010 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
       3
# 1010 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
out:
 k_mutex_unlock(&lock);

 return ret;
}

int net_if_config_ipv6_put(struct net_if *iface)
{
 int ret = 0;
 int i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (!net_if_flag_is_set(iface, NET_IF_IPV6)) {
  ret = -
# 1025 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
        134
# 1025 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
               ;
  goto out;
 }

 if (!iface->config.ip.ipv6) {
  ret = -
# 1030 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
        120
# 1030 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                ;
  goto out;
 }

 for (i = 0; i < ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0])))); i++) {
  if (ipv6_addresses[i].iface != iface) {
   continue;
  }

  iface->config.ip.ipv6 = 
# 1039 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                         ((void *)0)
# 1039 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                             ;
  ipv6_addresses[i].iface = 
# 1040 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                           ((void *)0)
# 1040 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                               ;

  goto out;
 }

 ret = -
# 1045 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
       3
# 1045 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
out:
 k_mutex_unlock(&lock);

 return ret;
}


static void join_mcast_allnodes(struct net_if *iface)
{
 struct in6_addr addr;
 int ret;

 net_ipv6_addr_create_ll_allnodes_mcast(&addr);

 ret = net_ipv6_mld_join(iface, &addr);
 if (ret < 0 && ret != -
# 1061 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
                       120
# 1061 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                               ) {
  do { if (!(1 && ((1U <= 0) || ((0 == 
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Cannot join all nodes address %s (%d)" "\n", z_log_minimal_level_to_char(1U), log_strdup(net_sprint_addr(2, &addr)), ret); } while (
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 1U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((ret) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 0) > 0);
#pragma GCC diagnostic pop
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 1U, (uint8_t *)
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "Cannot join all nodes address %s (%d)", log_strdup(net_sprint_addr(2, &addr)), ret); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Cannot join all nodes address %s (%d)") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Cannot join all nodes address %s (%d)") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot join all nodes address %s (%d)") + 0))) > (1)) ? (_Generic(("Cannot join all nodes address %s (%d)") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot join all nodes address %s (%d)") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("Cannot join all nodes address %s (%d)") + 0; size_t _arg_size = _Generic(("Cannot join all nodes address %s (%d)"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("Cannot join all nodes address %s (%d)") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Cannot join all nodes address %s (%d)") + 0; double _d = _Generic(("Cannot join all nodes address %s (%d)") + 0, float : ("Cannot join all nodes address %s (%d)") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("Cannot join all nodes address %s (%d)") + 0; size_t _arg_size = _Generic(("Cannot join all nodes address %s (%d)"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Cannot join all nodes address %s (%d)") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Cannot join all nodes address %s (%d)") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Cannot join all nodes address %s (%d)"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : (log_strdup(net_sprint_addr(2, &addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((ret) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((ret) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ret) + 0))) > (1)) ? (_Generic((ret) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ret) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (ret) + 0; size_t _arg_size = _Generic((ret), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((ret) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (ret) + 0; double _d = _Generic((ret) + 0, float : (ret) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (ret) + 0; size_t _arg_size = _Generic((ret), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((ret) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((ret) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = ret; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
#pragma GCC diagnostic push
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Cannot join all nodes address %s (%d)") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Cannot join all nodes address %s (%d)") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot join all nodes address %s (%d)") + 0))) > (1)) ? (_Generic(("Cannot join all nodes address %s (%d)") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot join all nodes address %s (%d)") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("Cannot join all nodes address %s (%d)") + 0; size_t _arg_size = _Generic(("Cannot join all nodes address %s (%d)"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("Cannot join all nodes address %s (%d)") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Cannot join all nodes address %s (%d)") + 0; double _d = _Generic(("Cannot join all nodes address %s (%d)") + 0, float : ("Cannot join all nodes address %s (%d)") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("Cannot join all nodes address %s (%d)") + 0; size_t _arg_size = _Generic(("Cannot join all nodes address %s (%d)"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Cannot join all nodes address %s (%d)") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Cannot join all nodes address %s (%d)") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Cannot join all nodes address %s (%d)"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : (log_strdup(net_sprint_addr(2, &addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((ret) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((ret) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ret) + 0))) > (1)) ? (_Generic((ret) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ret) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (ret) + 0; size_t _arg_size = _Generic((ret), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((ret) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (ret) + 0; double _d = _Generic((ret) + 0, float : (ret) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (ret) + 0; size_t _arg_size = _Generic((ret), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((ret) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((ret) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = ret; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 1U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "Cannot join all nodes address %s (%d)", log_strdup(net_sprint_addr(2, &addr)), ret); } else if (1) { log_string_sync(src_level, "Cannot join all nodes address %s (%d)", log_strdup(net_sprint_addr(2, &addr)), ret); } else { log_2("Cannot join all nodes address %s (%d)", (log_arg_t)(log_strdup(net_sprint_addr(2, &addr))), (log_arg_t)(ret), src_level); } } while (
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("Cannot join all nodes address %s (%d)", log_strdup(net_sprint_addr(2, &addr)), ret); } } while (
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1062 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )
                                                ;
 }
}

static void join_mcast_solicit_node(struct net_if *iface,
        struct in6_addr *my_addr)
{
 struct in6_addr addr;
 int ret;


 net_ipv6_addr_create_solicited_node(my_addr, &addr);

 ret = net_ipv6_mld_join(iface, &addr);
 if (ret < 0 && ret != -
# 1077 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
                       120
# 1077 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                               ) {
  do { if (!(1 && ((1U <= 0) || ((0 == 
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Cannot join solicit node address %s (%d)" "\n", z_log_minimal_level_to_char(1U), log_strdup(net_sprint_addr(2, &addr)), ret); } while (
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 1U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((ret) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 0) > 0);
#pragma GCC diagnostic pop
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 1U, (uint8_t *)
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "Cannot join solicit node address %s (%d)", log_strdup(net_sprint_addr(2, &addr)), ret); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Cannot join solicit node address %s (%d)") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Cannot join solicit node address %s (%d)") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot join solicit node address %s (%d)") + 0))) > (1)) ? (_Generic(("Cannot join solicit node address %s (%d)") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot join solicit node address %s (%d)") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("Cannot join solicit node address %s (%d)") + 0; size_t _arg_size = _Generic(("Cannot join solicit node address %s (%d)"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("Cannot join solicit node address %s (%d)") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Cannot join solicit node address %s (%d)") + 0; double _d = _Generic(("Cannot join solicit node address %s (%d)") + 0, float : ("Cannot join solicit node address %s (%d)") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("Cannot join solicit node address %s (%d)") + 0; size_t _arg_size = _Generic(("Cannot join solicit node address %s (%d)"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Cannot join solicit node address %s (%d)") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Cannot join solicit node address %s (%d)") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Cannot join solicit node address %s (%d)"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : (log_strdup(net_sprint_addr(2, &addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((ret) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((ret) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ret) + 0))) > (1)) ? (_Generic((ret) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ret) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (ret) + 0; size_t _arg_size = _Generic((ret), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((ret) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (ret) + 0; double _d = _Generic((ret) + 0, float : (ret) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (ret) + 0; size_t _arg_size = _Generic((ret), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((ret) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((ret) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = ret; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
#pragma GCC diagnostic push
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Cannot join solicit node address %s (%d)") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Cannot join solicit node address %s (%d)") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot join solicit node address %s (%d)") + 0))) > (1)) ? (_Generic(("Cannot join solicit node address %s (%d)") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot join solicit node address %s (%d)") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("Cannot join solicit node address %s (%d)") + 0; size_t _arg_size = _Generic(("Cannot join solicit node address %s (%d)"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("Cannot join solicit node address %s (%d)") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Cannot join solicit node address %s (%d)") + 0; double _d = _Generic(("Cannot join solicit node address %s (%d)") + 0, float : ("Cannot join solicit node address %s (%d)") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("Cannot join solicit node address %s (%d)") + 0; size_t _arg_size = _Generic(("Cannot join solicit node address %s (%d)"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Cannot join solicit node address %s (%d)") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Cannot join solicit node address %s (%d)") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Cannot join solicit node address %s (%d)"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : (log_strdup(net_sprint_addr(2, &addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((ret) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((ret) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ret) + 0))) > (1)) ? (_Generic((ret) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ret) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (ret) + 0; size_t _arg_size = _Generic((ret), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((ret) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (ret) + 0; double _d = _Generic((ret) + 0, float : (ret) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (ret) + 0; size_t _arg_size = _Generic((ret), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((ret) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((ret) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = ret; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 1U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "Cannot join solicit node address %s (%d)", log_strdup(net_sprint_addr(2, &addr)), ret); } else if (1) { log_string_sync(src_level, "Cannot join solicit node address %s (%d)", log_strdup(net_sprint_addr(2, &addr)), ret); } else { log_2("Cannot join solicit node address %s (%d)", (log_arg_t)(log_strdup(net_sprint_addr(2, &addr))), (log_arg_t)(ret), src_level); } } while (
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("Cannot join solicit node address %s (%d)", log_strdup(net_sprint_addr(2, &addr)), ret); } } while (
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1078 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )
                                                ;
 }
}

static void leave_mcast_all(struct net_if *iface)
{
 struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 int i;

 if (!ipv6) {
  return;
 }

 for (i = 0; i < 3; i++) {
  if (!ipv6->mcast[i].is_used ||
      !ipv6->mcast[i].is_joined) {
   continue;
  }

  net_ipv6_mld_leave(iface, &ipv6->mcast[i].address.in6_addr);
 }
}

static void join_mcast_nodes(struct net_if *iface, struct in6_addr *addr)
{
 enum net_l2_flags flags = 0;

 flags = l2_flags_get(iface);
 if (flags & NET_L2_MULTICAST) {
  join_mcast_allnodes(iface);

  if (!(flags & NET_L2_MULTICAST_SKIP_JOIN_SOLICIT_NODE)) {
   join_mcast_solicit_node(iface, addr);
  }
 }
}
# 1125 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
static void dad_timeout(struct k_work *work)
{
 uint32_t current_time = k_uptime_get_32();
 struct net_if_addr *ifaddr, *next;
 int32_t delay = -1;

 (void)(work);

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 for (ifaddr = ((sys_slist_peek_head(&active_dad_timers)) ? ((__typeof__(*(ifaddr)) *)(((char *)((sys_slist_peek_head(&active_dad_timers)))) - 
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(ifaddr))
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
dad_node
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
), next = ((ifaddr) ? ((sys_slist_peek_next(&((ifaddr)->dad_node))) ? ((__typeof__(*(ifaddr)) *)(((char *)((sys_slist_peek_next(&((ifaddr)->dad_node))))) - 
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(ifaddr))
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
dad_node
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) : 
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); ifaddr != 
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; ifaddr = next, next = ((ifaddr) ? ((sys_slist_peek_next(&((ifaddr)->dad_node))) ? ((__typeof__(*(ifaddr)) *)(((char *)((sys_slist_peek_next(&((ifaddr)->dad_node))))) - 
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(ifaddr))
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
dad_node
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) : 
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1135 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
))
                               {
  struct net_if_addr *tmp;
  struct net_if *iface;




  delay = (int32_t)(ifaddr->dad_start +
      100U - current_time);
  if (delay > 0) {
   break;
  }


  sys_slist_remove(&active_dad_timers, 
# 1150 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                      ((void *)0)
# 1150 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                          , &ifaddr->dad_node);

  do { if (!(1 && ((4U <= 0) || ((0 == 
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "DAD succeeded for %s" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); } while (
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({

#pragma GCC diagnostic push
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);

#pragma GCC diagnostic pop
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "DAD succeeded for %s", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {

#pragma GCC diagnostic push
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "DAD succeeded for %s") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "DAD succeeded for %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "DAD succeeded for %s") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "DAD succeeded for %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "DAD succeeded for %s") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "DAD succeeded for %s") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "DAD succeeded for %s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "DAD succeeded for %s") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "DAD succeeded for %s") + 0; double _d = _Generic(("%s: " "(%s): " "DAD succeeded for %s") + 0, float : ("%s: " "(%s): " "DAD succeeded for %s") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "DAD succeeded for %s") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "DAD succeeded for %s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "DAD succeeded for %s") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "DAD succeeded for %s") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "DAD succeeded for %s"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {

#pragma GCC diagnostic push
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "DAD succeeded for %s") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "DAD succeeded for %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "DAD succeeded for %s") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "DAD succeeded for %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "DAD succeeded for %s") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "DAD succeeded for %s") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "DAD succeeded for %s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "DAD succeeded for %s") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "DAD succeeded for %s") + 0; double _d = _Generic(("%s: " "(%s): " "DAD succeeded for %s") + 0, float : ("%s: " "(%s): " "DAD succeeded for %s") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "DAD succeeded for %s") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "DAD succeeded for %s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "DAD succeeded for %s") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "DAD succeeded for %s") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "DAD succeeded for %s"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "DAD succeeded for %s", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "DAD succeeded for %s", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); } else { log_3("%s: " "(%s): " "DAD succeeded for %s", (log_arg_t)((const char *)__func__), (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))), (log_arg_t)(log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), src_level); } } while (
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "DAD succeeded for %s", log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); } } while (
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1152 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )

                                    ;

  ifaddr->addr_state = NET_ADDR_PREFERRED;




  iface = 
# 1161 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
         ((void *)0)
# 1161 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
             ;
  tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr,
           &iface);
  if (tmp == ifaddr) {
   net_mgmt_event_notify_with_info(
     (((1UL << (31)) | (1UL << (30)) | (2 << 28) | (0x060 << 16)) | NET_EVENT_IPV6_CMD_DAD_SUCCEED),
     iface, &ifaddr->address.in6_addr,
     sizeof(struct in6_addr));




   net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
  }

  ifaddr = 
# 1176 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
          ((void *)0)
# 1176 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
              ;
 }

 if ((ifaddr != 
# 1179 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
               ((void *)0)
# 1179 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                   ) && (delay > 0)) {
  k_work_reschedule(&dad_timer, ((k_timeout_t) { .ticks = ((k_ticks_t)k_ms_to_ticks_ceil64(((((uint32_t)delay) > (0)) ? ((uint32_t)delay) : (0)))) }));
 }

 k_mutex_unlock(&lock);
}

static void net_if_ipv6_start_dad(struct net_if *iface,
      struct net_if_addr *ifaddr)
{
 ifaddr->addr_state = NET_ADDR_TENTATIVE;

 if (net_if_is_up(iface)) {
  do { if (!(1 && ((4U <= 0) || ((0 == 
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len)), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); } while (
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({





#pragma GCC diagnostic push
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 





#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);





#pragma GCC diagnostic pop
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len)), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {





#pragma GCC diagnostic push
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 





#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0; double _d = _Generic(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0, float : ("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0; double _d = _Generic((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0, float : (log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }





#pragma GCC diagnostic pop
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {





#pragma GCC diagnostic push
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 





#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0; double _d = _Generic(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0, float : ("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0; double _d = _Generic((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0, float : (log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }





#pragma GCC diagnostic pop
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len)), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len)), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(iface) , (log_arg_t)(log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len))) , (log_arg_t)(log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr)))}; log_n("%s: " "(%s): " "Interface %p ll addr %s tentative IPv6 addr %s", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } } while (
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "Interface %p ll addr %s tentative IPv6 addr %s", log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_ll_addr( net_if_get_link_addr(iface)->addr, net_if_get_link_addr(iface)->len)), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); } } while (
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1192 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )





                                    ;

  ifaddr->dad_count = 1U;

  if (!net_ipv6_start_dad(iface, ifaddr)) {
   ifaddr->dad_start = k_uptime_get_32();
   sys_slist_append(&active_dad_timers, &ifaddr->dad_node);


   if (!k_work_delayable_remaining_get(&dad_timer)) {
    k_work_reschedule(&dad_timer,
        ((k_timeout_t) { .ticks = ((k_ticks_t)k_ms_to_ticks_ceil64((((100U) > (0)) ? (100U) : (0)))) }));
   }
  }
 } else {
  do { if (!(1 && ((4U <= 0) || ((0 == 
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "Interface %p is down, starting DAD for %s later." "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); } while (
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({


#pragma GCC diagnostic push
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);


#pragma GCC diagnostic pop
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "Interface %p is down, starting DAD for %s later.", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {


#pragma GCC diagnostic push
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0; double _d = _Generic(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0, float : ("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Interface %p is down, starting DAD for %s later."; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }


#pragma GCC diagnostic pop
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {


#pragma GCC diagnostic push
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0; double _d = _Generic(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0, float : ("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Interface %p is down, starting DAD for %s later."; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }


#pragma GCC diagnostic pop
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "Interface %p is down, starting DAD for %s later.", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "Interface %p is down, starting DAD for %s later.", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(iface) , (log_arg_t)(log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr)))}; log_n("%s: " "(%s): " "Interface %p is down, starting DAD for %s later.", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } } while (
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "Interface %p is down, starting DAD for %s later.", log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); } } while (
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1213 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )


                                    ;
 }
}

void net_if_start_dad(struct net_if *iface)
{
 struct net_if_addr *ifaddr;
 struct net_if_ipv6 *ipv6;
 struct in6_addr addr = { };
 int ret, i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "Starting DAD for iface %p" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), iface); } while (
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
, 0, "%s: " "(%s): " "Starting DAD for iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0) 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
!= 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Starting DAD for iface %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Starting DAD for iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Starting DAD for iface %p") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Starting DAD for iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Starting DAD for iface %p") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Starting DAD for iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Starting DAD for iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Starting DAD for iface %p") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Starting DAD for iface %p") + 0; double _d = _Generic(("%s: " "(%s): " "Starting DAD for iface %p") + 0, float : ("%s: " "(%s): " "Starting DAD for iface %p") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Starting DAD for iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Starting DAD for iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Starting DAD for iface %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Starting DAD for iface %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Starting DAD for iface %p"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
((__builtin_object_size(
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, __builtin_object_size(
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0)) : __memset_ichk(
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; }; if (_plen) { do {
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Starting DAD for iface %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Starting DAD for iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Starting DAD for iface %p") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Starting DAD for iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Starting DAD for iface %p") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Starting DAD for iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Starting DAD for iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Starting DAD for iface %p") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Starting DAD for iface %p") + 0; double _d = _Generic(("%s: " "(%s): " "Starting DAD for iface %p") + 0, float : ("%s: " "(%s): " "Starting DAD for iface %p") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Starting DAD for iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Starting DAD for iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Starting DAD for iface %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Starting DAD for iface %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Starting DAD for iface %p"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "Starting DAD for iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "Starting DAD for iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); } else { log_3("%s: " "(%s): " "Starting DAD for iface %p", (log_arg_t)((const char *)__func__), (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))), (log_arg_t)(iface), src_level); } } while (
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); } if (
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) { z_log_printf_arg_checker("(%s): " "Starting DAD for iface %p", log_strdup(k_thread_name_get(k_current_get())), iface); } } while (
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
);

 ret = net_if_config_ipv6_get(iface, &ipv6);
 if (ret < 0) {
  if (ret != -
# 1233 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
             134
# 1233 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                    ) {
   do { if (!(1 && ((2U <= 0) || ((0 == 
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) && (2U <= __log_level) && (2U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Cannot do DAD IPv6 config is not valid." "\n", z_log_minimal_level_to_char(2U)); } while (
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); break; } if (0 & !0) { if (2U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  _Bool 
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 2U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   int _rv = 0;
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 2U, (uint8_t *)
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  , 0, "Cannot do DAD IPv6 config is not valid."); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  _Bool 
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0) 
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  != 
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Cannot do DAD IPv6 config is not valid.") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Cannot do DAD IPv6 config is not valid.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot do DAD IPv6 config is not valid.") + 0))) > (1)) ? (_Generic(("Cannot do DAD IPv6 config is not valid.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot do DAD IPv6 config is not valid.") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("Cannot do DAD IPv6 config is not valid.") + 0; size_t _arg_size = _Generic(("Cannot do DAD IPv6 config is not valid."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("Cannot do DAD IPv6 config is not valid.") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Cannot do DAD IPv6 config is not valid.") + 0; double _d = _Generic(("Cannot do DAD IPv6 config is not valid.") + 0, float : ("Cannot do DAD IPv6 config is not valid.") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("Cannot do DAD IPv6 config is not valid.") + 0; size_t _arg_size = _Generic(("Cannot do DAD IPv6 config is not valid."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Cannot do DAD IPv6 config is not valid.") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Cannot do DAD IPv6 config is not valid.") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Cannot do DAD IPv6 config is not valid."; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28 
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  ((__builtin_object_size(
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 0) != (size_t)-1) ? __builtin___memset_chk(
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  0
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , __builtin_object_size(
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 0)) : __memset_ichk(
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  0
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  ))
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; }; if (_plen) { do {
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  _Bool 
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Cannot do DAD IPv6 config is not valid.") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Cannot do DAD IPv6 config is not valid.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot do DAD IPv6 config is not valid.") + 0))) > (1)) ? (_Generic(("Cannot do DAD IPv6 config is not valid.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot do DAD IPv6 config is not valid.") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("Cannot do DAD IPv6 config is not valid.") + 0; size_t _arg_size = _Generic(("Cannot do DAD IPv6 config is not valid."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("Cannot do DAD IPv6 config is not valid.") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Cannot do DAD IPv6 config is not valid.") + 0; double _d = _Generic(("Cannot do DAD IPv6 config is not valid.") + 0, float : ("Cannot do DAD IPv6 config is not valid.") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("Cannot do DAD IPv6 config is not valid.") + 0; size_t _arg_size = _Generic(("Cannot do DAD IPv6 config is not valid."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Cannot do DAD IPv6 config is not valid.") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Cannot do DAD IPv6 config is not valid.") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Cannot do DAD IPv6 config is not valid."; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28 
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 2U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 2U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "Cannot do DAD IPv6 config is not valid."); } else if (1) { log_string_sync(src_level, "Cannot do DAD IPv6 config is not valid."); } else { log_0("Cannot do DAD IPv6 config is not valid.", src_level); } } while (
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); } while (0); } if (
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) { z_log_printf_arg_checker("Cannot do DAD IPv6 config is not valid."); } } while (
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 1234 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  );
  }

  goto out;
 }

 if (!ipv6) {
  goto out;
 }

 net_ipv6_addr_create_iid(&addr, net_if_get_link_addr(iface));

 ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
 if (!ifaddr) {
  do { if (!(1 && ((1U <= 0) || ((0 == 
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Cannot add %s address to interface %p, DAD fails" "\n", z_log_minimal_level_to_char(1U), log_strdup(net_sprint_addr(2, &addr)), iface); } while (
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 1U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 0) > 0);
#pragma GCC diagnostic pop
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 1U, (uint8_t *)
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "Cannot add %s address to interface %p, DAD fails", log_strdup(net_sprint_addr(2, &addr)), iface); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Cannot add %s address to interface %p, DAD fails") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Cannot add %s address to interface %p, DAD fails") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot add %s address to interface %p, DAD fails") + 0))) > (1)) ? (_Generic(("Cannot add %s address to interface %p, DAD fails") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot add %s address to interface %p, DAD fails") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("Cannot add %s address to interface %p, DAD fails") + 0; size_t _arg_size = _Generic(("Cannot add %s address to interface %p, DAD fails"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("Cannot add %s address to interface %p, DAD fails") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Cannot add %s address to interface %p, DAD fails") + 0; double _d = _Generic(("Cannot add %s address to interface %p, DAD fails") + 0, float : ("Cannot add %s address to interface %p, DAD fails") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("Cannot add %s address to interface %p, DAD fails") + 0; size_t _arg_size = _Generic(("Cannot add %s address to interface %p, DAD fails"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Cannot add %s address to interface %p, DAD fails") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Cannot add %s address to interface %p, DAD fails") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Cannot add %s address to interface %p, DAD fails"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : (log_strdup(net_sprint_addr(2, &addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
#pragma GCC diagnostic push
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Cannot add %s address to interface %p, DAD fails") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Cannot add %s address to interface %p, DAD fails") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot add %s address to interface %p, DAD fails") + 0))) > (1)) ? (_Generic(("Cannot add %s address to interface %p, DAD fails") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot add %s address to interface %p, DAD fails") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("Cannot add %s address to interface %p, DAD fails") + 0; size_t _arg_size = _Generic(("Cannot add %s address to interface %p, DAD fails"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("Cannot add %s address to interface %p, DAD fails") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Cannot add %s address to interface %p, DAD fails") + 0; double _d = _Generic(("Cannot add %s address to interface %p, DAD fails") + 0, float : ("Cannot add %s address to interface %p, DAD fails") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("Cannot add %s address to interface %p, DAD fails") + 0; size_t _arg_size = _Generic(("Cannot add %s address to interface %p, DAD fails"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Cannot add %s address to interface %p, DAD fails") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Cannot add %s address to interface %p, DAD fails") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Cannot add %s address to interface %p, DAD fails"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : (log_strdup(net_sprint_addr(2, &addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 1U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "Cannot add %s address to interface %p, DAD fails", log_strdup(net_sprint_addr(2, &addr)), iface); } else if (1) { log_string_sync(src_level, "Cannot add %s address to interface %p, DAD fails", log_strdup(net_sprint_addr(2, &addr)), iface); } else { log_2("Cannot add %s address to interface %p, DAD fails", (log_arg_t)(log_strdup(net_sprint_addr(2, &addr))), (log_arg_t)(iface), src_level); } } while (
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("Cannot add %s address to interface %p, DAD fails", log_strdup(net_sprint_addr(2, &addr)), iface); } } while (
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1248 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )
                                                  ;
 }




 for (i = 0; i < 2; i++) {
  if (!ipv6->unicast[i].is_used ||
      ipv6->unicast[i].address.family != 2 ||
      &ipv6->unicast[i] == ifaddr ||
      net_ipv6_is_addr_loopback(
       &ipv6->unicast[i].address.in6_addr)) {
   continue;
  }

  net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
 }

out:
 k_mutex_unlock(&lock);
}

void net_if_ipv6_dad_failed(struct net_if *iface, const struct in6_addr *addr)
{
 struct net_if_addr *ifaddr;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
 if (!ifaddr) {
  do { if (!(1 && ((1U <= 0) || ((0 == 
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Cannot find %s address in interface %p" "\n", z_log_minimal_level_to_char(1U), log_strdup(net_sprint_addr(2, addr)), iface); } while (
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 1U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 0) > 0);
#pragma GCC diagnostic pop
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 1U, (uint8_t *)
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "Cannot find %s address in interface %p", log_strdup(net_sprint_addr(2, addr)), iface); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Cannot find %s address in interface %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Cannot find %s address in interface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot find %s address in interface %p") + 0))) > (1)) ? (_Generic(("Cannot find %s address in interface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot find %s address in interface %p") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("Cannot find %s address in interface %p") + 0; size_t _arg_size = _Generic(("Cannot find %s address in interface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("Cannot find %s address in interface %p") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Cannot find %s address in interface %p") + 0; double _d = _Generic(("Cannot find %s address in interface %p") + 0, float : ("Cannot find %s address in interface %p") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("Cannot find %s address in interface %p") + 0; size_t _arg_size = _Generic(("Cannot find %s address in interface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Cannot find %s address in interface %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Cannot find %s address in interface %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Cannot find %s address in interface %p"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (log_strdup(net_sprint_addr(2, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
#pragma GCC diagnostic push
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Cannot find %s address in interface %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Cannot find %s address in interface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot find %s address in interface %p") + 0))) > (1)) ? (_Generic(("Cannot find %s address in interface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Cannot find %s address in interface %p") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("Cannot find %s address in interface %p") + 0; size_t _arg_size = _Generic(("Cannot find %s address in interface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("Cannot find %s address in interface %p") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Cannot find %s address in interface %p") + 0; double _d = _Generic(("Cannot find %s address in interface %p") + 0, float : ("Cannot find %s address in interface %p") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("Cannot find %s address in interface %p") + 0; size_t _arg_size = _Generic(("Cannot find %s address in interface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Cannot find %s address in interface %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Cannot find %s address in interface %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Cannot find %s address in interface %p"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (log_strdup(net_sprint_addr(2, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 1U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "Cannot find %s address in interface %p", log_strdup(net_sprint_addr(2, addr)), iface); } else if (1) { log_string_sync(src_level, "Cannot find %s address in interface %p", log_strdup(net_sprint_addr(2, addr)), iface); } else { log_2("Cannot find %s address in interface %p", (log_arg_t)(log_strdup(net_sprint_addr(2, addr))), (log_arg_t)(iface), src_level); } } while (
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("Cannot find %s address in interface %p", log_strdup(net_sprint_addr(2, addr)), iface); } } while (
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1279 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )
                                                 ;
  goto out;
 }

 sys_slist_find_and_remove(&active_dad_timers, &ifaddr->dad_node);

 net_mgmt_event_notify_with_info((((1UL << (31)) | (1UL << (30)) | (2 << 28) | (0x060 << 16)) | NET_EVENT_IPV6_CMD_DAD_FAILED), iface,
     &ifaddr->address.in6_addr,
     sizeof(struct in6_addr));

 net_if_ipv6_addr_rm(iface, addr);

out:
 k_mutex_unlock(&lock);
}

static inline void iface_ipv6_dad_init(void)
{
 k_work_init_delayable(&dad_timer, dad_timeout);
 sys_slist_init(&active_dad_timers);
}
# 1316 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
static void rs_timeout(struct k_work *work)
{
 uint32_t current_time = k_uptime_get_32();
 struct net_if_ipv6 *ipv6, *next;
 int32_t delay = -1;

 (void)(work);

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 for (ipv6 = ((sys_slist_peek_head(&active_rs_timers)) ? ((__typeof__(*(ipv6)) *)(((char *)((sys_slist_peek_head(&active_rs_timers)))) - 
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(ipv6))
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
rs_node
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
), next = ((ipv6) ? ((sys_slist_peek_next(&((ipv6)->rs_node))) ? ((__typeof__(*(ipv6)) *)(((char *)((sys_slist_peek_next(&((ipv6)->rs_node))))) - 
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(ipv6))
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
rs_node
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) : 
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); ipv6 != 
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; ipv6 = next, next = ((ipv6) ? ((sys_slist_peek_next(&((ipv6)->rs_node))) ? ((__typeof__(*(ipv6)) *)(((char *)((sys_slist_peek_next(&((ipv6)->rs_node))))) - 
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(ipv6))
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
rs_node
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) : 
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1326 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
))
                            {
  struct net_if *iface = 
# 1328 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                        ((void *)0)
# 1328 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                            ;




  delay = (int32_t)(ipv6->rs_start + (1U * 1000U) - current_time);
  if (delay > 0) {
   break;
  }


  sys_slist_remove(&active_rs_timers, 
# 1339 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                     ((void *)0)
# 1339 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                         , &ipv6->rs_node);


  ipv6->rs_count++;

  extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *tmp = _net_if_list_start; ({ { }; tmp < _net_if_list_end; }); tmp++) {
   if (tmp->config.ip.ipv6 == ipv6) {
    iface = tmp;
    break;
   }
  }

  if (iface) {
   do { if (!(1 && ((4U <= 0) || ((0 == 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "RS no respond iface %p count %d" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), iface, ipv6->rs_count); } while (
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  _Bool 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((ipv6->rs_count) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
#pragma GCC diagnostic pop
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  , 0, "%s: " "(%s): " "RS no respond iface %p count %d", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, ipv6->rs_count); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  _Bool 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0) 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  != 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "RS no respond iface %p count %d") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "RS no respond iface %p count %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "RS no respond iface %p count %d") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "RS no respond iface %p count %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "RS no respond iface %p count %d") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "RS no respond iface %p count %d") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "RS no respond iface %p count %d"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "RS no respond iface %p count %d") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "RS no respond iface %p count %d") + 0; double _d = _Generic(("%s: " "(%s): " "RS no respond iface %p count %d") + 0, float : ("%s: " "(%s): " "RS no respond iface %p count %d") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "RS no respond iface %p count %d") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "RS no respond iface %p count %d"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "RS no respond iface %p count %d") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "RS no respond iface %p count %d") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "RS no respond iface %p count %d"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((ipv6->rs_count) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((ipv6->rs_count) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ipv6->rs_count) + 0))) > (1)) ? (_Generic((ipv6->rs_count) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ipv6->rs_count) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (ipv6->rs_count) + 0; size_t _arg_size = _Generic((ipv6->rs_count), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((ipv6->rs_count) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (ipv6->rs_count) + 0; double _d = _Generic((ipv6->rs_count) + 0, float : (ipv6->rs_count) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (ipv6->rs_count) + 0; size_t _arg_size = _Generic((ipv6->rs_count), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((ipv6->rs_count) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((ipv6->rs_count) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = ipv6->rs_count; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  ((__builtin_object_size(
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 0) != (size_t)-1) ? __builtin___memset_chk(
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  0
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , __builtin_object_size(
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 0)) : __memset_ichk(
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  0
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  ))
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; }; if (_plen) { do {
#pragma GCC diagnostic push
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  _Bool 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "RS no respond iface %p count %d") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "RS no respond iface %p count %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "RS no respond iface %p count %d") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "RS no respond iface %p count %d") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "RS no respond iface %p count %d") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "RS no respond iface %p count %d") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "RS no respond iface %p count %d"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "RS no respond iface %p count %d") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "RS no respond iface %p count %d") + 0; double _d = _Generic(("%s: " "(%s): " "RS no respond iface %p count %d") + 0, float : ("%s: " "(%s): " "RS no respond iface %p count %d") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "RS no respond iface %p count %d") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "RS no respond iface %p count %d"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "RS no respond iface %p count %d") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "RS no respond iface %p count %d") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "RS no respond iface %p count %d"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((ipv6->rs_count) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((ipv6->rs_count) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ipv6->rs_count) + 0))) > (1)) ? (_Generic((ipv6->rs_count) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ipv6->rs_count) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (ipv6->rs_count) + 0; size_t _arg_size = _Generic((ipv6->rs_count), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((ipv6->rs_count) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (ipv6->rs_count) + 0; double _d = _Generic((ipv6->rs_count) + 0, float : (ipv6->rs_count) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (ipv6->rs_count) + 0; size_t _arg_size = _Generic((ipv6->rs_count), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((ipv6->rs_count) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((ipv6->rs_count) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = ipv6->rs_count; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "RS no respond iface %p count %d", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, ipv6->rs_count); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "RS no respond iface %p count %d", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, ipv6->rs_count); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(iface) , (log_arg_t)(ipv6->rs_count)}; log_n("%s: " "(%s): " "RS no respond iface %p count %d", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); } } while (
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); } while (0); } if (
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) { z_log_printf_arg_checker("(%s): " "RS no respond iface %p count %d", log_strdup(k_thread_name_get(k_current_get())), iface, ipv6->rs_count); } } while (
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 1352 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  )
                          ;
   if (ipv6->rs_count < 3) {
    net_if_start_rs(iface);
   }
  } else {
   do { if (!(1 && ((4U <= 0) || ((0 == 
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "Interface IPv6 config %p not found" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), ipv6); } while (
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  _Bool 
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((ipv6) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  , 0, "%s: " "(%s): " "Interface IPv6 config %p not found", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), ipv6); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  _Bool 
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0) 
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  != 
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Interface IPv6 config %p not found") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Interface IPv6 config %p not found") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Interface IPv6 config %p not found") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Interface IPv6 config %p not found") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Interface IPv6 config %p not found") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Interface IPv6 config %p not found") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Interface IPv6 config %p not found"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Interface IPv6 config %p not found") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Interface IPv6 config %p not found") + 0; double _d = _Generic(("%s: " "(%s): " "Interface IPv6 config %p not found") + 0, float : ("%s: " "(%s): " "Interface IPv6 config %p not found") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Interface IPv6 config %p not found") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Interface IPv6 config %p not found"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Interface IPv6 config %p not found") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Interface IPv6 config %p not found") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Interface IPv6 config %p not found"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((ipv6) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((ipv6) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ipv6) + 0))) > (1)) ? (_Generic((ipv6) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ipv6) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (ipv6) + 0; size_t _arg_size = _Generic((ipv6), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((ipv6) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (ipv6) + 0; double _d = _Generic((ipv6) + 0, float : (ipv6) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (ipv6) + 0; size_t _arg_size = _Generic((ipv6), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((ipv6) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((ipv6) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = ipv6; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28 
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  ((__builtin_object_size(
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 0) != (size_t)-1) ? __builtin___memset_chk(
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  0
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , __builtin_object_size(
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 0)) : __memset_ichk(
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _msg
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  0
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  , 
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  ))
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; }; if (_plen) { do {
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  _Bool 
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Interface IPv6 config %p not found") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Interface IPv6 config %p not found") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Interface IPv6 config %p not found") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Interface IPv6 config %p not found") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Interface IPv6 config %p not found") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Interface IPv6 config %p not found") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Interface IPv6 config %p not found"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Interface IPv6 config %p not found") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Interface IPv6 config %p not found") + 0; double _d = _Generic(("%s: " "(%s): " "Interface IPv6 config %p not found") + 0, float : ("%s: " "(%s): " "Interface IPv6 config %p not found") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Interface IPv6 config %p not found") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Interface IPv6 config %p not found"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Interface IPv6 config %p not found") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Interface IPv6 config %p not found") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Interface IPv6 config %p not found"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((ipv6) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((ipv6) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ipv6) + 0))) > (1)) ? (_Generic((ipv6) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ipv6) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (ipv6) + 0; size_t _arg_size = _Generic((ipv6), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((ipv6) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (ipv6) + 0; double _d = _Generic((ipv6) + 0, float : (ipv6) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (ipv6) + 0; size_t _arg_size = _Generic((ipv6), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((ipv6) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((ipv6) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = ipv6; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
  28 
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "Interface IPv6 config %p not found", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), ipv6); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "Interface IPv6 config %p not found", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), ipv6); } else { log_3("%s: " "(%s): " "Interface IPv6 config %p not found", (log_arg_t)((const char *)__func__), (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))), (log_arg_t)(ipv6), src_level); } } while (
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ); } while (0); } if (
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ) { z_log_printf_arg_checker("(%s): " "Interface IPv6 config %p not found", log_strdup(k_thread_name_get(k_current_get())), ipv6); } } while (
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  0
# 1358 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  );
  }

  ipv6 = 
# 1361 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        ((void *)0)
# 1361 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
 }

 if ((ipv6 != 
# 1364 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
             ((void *)0)
# 1364 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                 ) && (delay > 0)) {
  k_work_reschedule(&rs_timer, ((k_timeout_t) { .ticks = ((k_ticks_t)k_ms_to_ticks_ceil64((((ipv6->rs_start + (1U * 1000U) - current_time) > (0)) ? (ipv6->rs_start + (1U * 1000U) - current_time) : (0)))) })
                                    );
 }

 k_mutex_unlock(&lock);
}

void net_if_start_rs(struct net_if *iface)
{
 struct net_if_ipv6 *ipv6;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 ipv6 = iface->config.ip.ipv6;
 if (!ipv6) {
  goto out;
 }

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "Starting ND/RS for iface %p" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), iface); } while (
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
, 0, "%s: " "(%s): " "Starting ND/RS for iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0) 
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
!= 
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Starting ND/RS for iface %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Starting ND/RS for iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Starting ND/RS for iface %p") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Starting ND/RS for iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Starting ND/RS for iface %p") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Starting ND/RS for iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Starting ND/RS for iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Starting ND/RS for iface %p") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Starting ND/RS for iface %p") + 0; double _d = _Generic(("%s: " "(%s): " "Starting ND/RS for iface %p") + 0, float : ("%s: " "(%s): " "Starting ND/RS for iface %p") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Starting ND/RS for iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Starting ND/RS for iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Starting ND/RS for iface %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Starting ND/RS for iface %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Starting ND/RS for iface %p"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
((__builtin_object_size(
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, __builtin_object_size(
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0)) : __memset_ichk(
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; }; if (_plen) { do {
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Starting ND/RS for iface %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Starting ND/RS for iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Starting ND/RS for iface %p") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Starting ND/RS for iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Starting ND/RS for iface %p") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Starting ND/RS for iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Starting ND/RS for iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Starting ND/RS for iface %p") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Starting ND/RS for iface %p") + 0; double _d = _Generic(("%s: " "(%s): " "Starting ND/RS for iface %p") + 0, float : ("%s: " "(%s): " "Starting ND/RS for iface %p") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Starting ND/RS for iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Starting ND/RS for iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Starting ND/RS for iface %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Starting ND/RS for iface %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Starting ND/RS for iface %p"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "Starting ND/RS for iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "Starting ND/RS for iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); } else { log_3("%s: " "(%s): " "Starting ND/RS for iface %p", (log_arg_t)((const char *)__func__), (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))), (log_arg_t)(iface), src_level); } } while (
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); } if (
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) { z_log_printf_arg_checker("(%s): " "Starting ND/RS for iface %p", log_strdup(k_thread_name_get(k_current_get())), iface); } } while (
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1383 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
);

 if (!net_ipv6_start_rs(iface)) {
  ipv6->rs_start = k_uptime_get_32();
  sys_slist_append(&active_rs_timers, &ipv6->rs_node);


  if (!k_work_delayable_remaining_get(&rs_timer)) {
   k_work_reschedule(&rs_timer, ((k_timeout_t) { .ticks = ((k_ticks_t)k_ms_to_ticks_ceil64(((((1U * 1000U)) > (0)) ? ((1U * 1000U)) : (0)))) }));
  }
 }

out:
 k_mutex_unlock(&lock);
}

void net_if_stop_rs(struct net_if *iface)
{
 struct net_if_ipv6 *ipv6;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 ipv6 = iface->config.ip.ipv6;
 if (!ipv6) {
  goto out;
 }

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "Stopping ND/RS for iface %p" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), iface); } while (
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
, 0, "%s: " "(%s): " "Stopping ND/RS for iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0) 
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
!= 
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Stopping ND/RS for iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0; double _d = _Generic(("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0, float : ("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Stopping ND/RS for iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Stopping ND/RS for iface %p"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
((__builtin_object_size(
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, __builtin_object_size(
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0)) : __memset_ichk(
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; }; if (_plen) { do {
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Stopping ND/RS for iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0; double _d = _Generic(("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0, float : ("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Stopping ND/RS for iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Stopping ND/RS for iface %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Stopping ND/RS for iface %p"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "Stopping ND/RS for iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "Stopping ND/RS for iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); } else { log_3("%s: " "(%s): " "Stopping ND/RS for iface %p", (log_arg_t)((const char *)__func__), (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))), (log_arg_t)(iface), src_level); } } while (
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); } if (
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) { z_log_printf_arg_checker("(%s): " "Stopping ND/RS for iface %p", log_strdup(k_thread_name_get(k_current_get())), iface); } } while (
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1410 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
);

 sys_slist_find_and_remove(&active_rs_timers, &ipv6->rs_node);

out:
 k_mutex_unlock(&lock);
}

static inline void iface_ipv6_nd_init(void)
{
 k_work_init_delayable(&rs_timer, rs_timeout);
 sys_slist_init(&active_rs_timers);
}







struct net_if_addr *net_if_ipv6_addr_lookup(const struct in6_addr *addr,
         struct net_if **ret)
{
 struct net_if_addr *ifaddr = 
# 1433 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                             ((void *)0)
# 1433 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                 ;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *iface = _net_if_list_start; ({ { }; iface < _net_if_list_end; }); iface++) {
  struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
  int i;

  if (!ipv6) {
   continue;
  }

  for (i = 0; i < 2; i++) {
   if (!ipv6->unicast[i].is_used ||
       ipv6->unicast[i].address.family != 2) {
    continue;
   }

   if (net_ipv6_is_prefix(
        addr->s6_addr,
        ipv6->unicast[i].address.in6_addr.s6_addr,
        128)) {

    if (ret) {
     *ret = iface;
    }

    ifaddr = &ipv6->unicast[i];
    goto out;
   }
  }
 }

out:
 k_mutex_unlock(&lock);

 return ifaddr;
}

struct net_if_addr *net_if_ipv6_addr_lookup_by_iface(struct net_if *iface,
           struct in6_addr *addr)
{
 struct net_if_addr *ifaddr = 
# 1475 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                             ((void *)0)
# 1475 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                 ;
 struct net_if_ipv6 *ipv6;
 int i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 ipv6 = iface->config.ip.ipv6;
 if (!ipv6) {
  goto out;
 }

 for (i = 0; i < 2; i++) {
  if (!ipv6->unicast[i].is_used ||
      ipv6->unicast[i].address.family != 2) {
   continue;
  }

  if (net_ipv6_is_prefix(
       addr->s6_addr,
       ipv6->unicast[i].address.in6_addr.s6_addr,
       128)) {
   ifaddr = &ipv6->unicast[i];
   goto out;
  }
 }

out:
 k_mutex_unlock(&lock);

 return ifaddr;
}

int z_impl_net_if_ipv6_addr_lookup_by_index(const struct in6_addr *addr)
{
 struct net_if *iface = 
# 1509 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                       ((void *)0)
# 1509 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                           ;
 struct net_if_addr *if_addr;

 if_addr = net_if_ipv6_addr_lookup(addr, &iface);
 if (!if_addr) {
  return 0;
 }

 return net_if_get_by_iface(iface);
}
# 1533 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
static void address_expired(struct net_if_addr *ifaddr)
{
 do { if (!(1 && ((4U <= 0) || ((0 == 
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "IPv6 address %s is deprecated" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); } while (
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
#pragma GCC diagnostic pop
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
, 0, "%s: " "(%s): " "IPv6 address %s is deprecated", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0) 
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
!= 
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "IPv6 address %s is deprecated") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "IPv6 address %s is deprecated") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "IPv6 address %s is deprecated") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "IPv6 address %s is deprecated") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "IPv6 address %s is deprecated") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "IPv6 address %s is deprecated") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "IPv6 address %s is deprecated"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "IPv6 address %s is deprecated") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "IPv6 address %s is deprecated") + 0; double _d = _Generic(("%s: " "(%s): " "IPv6 address %s is deprecated") + 0, float : ("%s: " "(%s): " "IPv6 address %s is deprecated") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "IPv6 address %s is deprecated") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "IPv6 address %s is deprecated"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "IPv6 address %s is deprecated") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "IPv6 address %s is deprecated") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "IPv6 address %s is deprecated"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
((__builtin_object_size(
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, __builtin_object_size(
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0)) : __memset_ichk(
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; }; if (_plen) { do {
#pragma GCC diagnostic push
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "IPv6 address %s is deprecated") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "IPv6 address %s is deprecated") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "IPv6 address %s is deprecated") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "IPv6 address %s is deprecated") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "IPv6 address %s is deprecated") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "IPv6 address %s is deprecated") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "IPv6 address %s is deprecated"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "IPv6 address %s is deprecated") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "IPv6 address %s is deprecated") + 0; double _d = _Generic(("%s: " "(%s): " "IPv6 address %s is deprecated") + 0, float : ("%s: " "(%s): " "IPv6 address %s is deprecated") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "IPv6 address %s is deprecated") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "IPv6 address %s is deprecated"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "IPv6 address %s is deprecated") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "IPv6 address %s is deprecated") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "IPv6 address %s is deprecated"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "IPv6 address %s is deprecated", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "IPv6 address %s is deprecated", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); } else { log_3("%s: " "(%s): " "IPv6 address %s is deprecated", (log_arg_t)((const char *)__func__), (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))), (log_arg_t)(log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), src_level); } } while (
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); } if (
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) { z_log_printf_arg_checker("(%s): " "IPv6 address %s is deprecated", log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))); } } while (
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1535 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)
                                                              ;

 ifaddr->addr_state = NET_ADDR_DEPRECATED;

 sys_slist_find_and_remove(&active_address_lifetime_timers,
      &ifaddr->lifetime.node);

 net_timeout_set(&ifaddr->lifetime, 0, 0);
}

static void address_lifetime_timeout(struct k_work *work)
{
 uint32_t next_update = 0xffffffffUL;
 uint32_t current_time = k_uptime_get_32();
 struct net_if_addr *current, *next;

 (void)(work);

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 for (current = ((sys_slist_peek_head(&active_address_lifetime_timers)) ? ((__typeof__(*(current)) *)(((char *)((sys_slist_peek_head(&active_address_lifetime_timers)))) - 
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(current))
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
lifetime.node
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
), next = ((current) ? ((sys_slist_peek_next(&((current)->lifetime.node))) ? ((__typeof__(*(current)) *)(((char *)((sys_slist_peek_next(&((current)->lifetime.node))))) - 
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(current))
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
lifetime.node
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) : 
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); current != 
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; current = next, next = ((current) ? ((sys_slist_peek_next(&((current)->lifetime.node))) ? ((__typeof__(*(current)) *)(((char *)((sys_slist_peek_next(&((current)->lifetime.node))))) - 
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(current))
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
lifetime.node
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) : 
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1556 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
))
                                     {
  struct net_timeout *timeout = &current->lifetime;
  uint32_t this_update = net_timeout_evaluate(timeout,
            current_time);

  if (this_update == 0U) {
   address_expired(current);
   continue;
  }

  if (this_update < next_update) {
   next_update = this_update;
  }

  if (current == next) {
   break;
  }
 }

 if (next_update != 0xffffffffUL) {
  do { if (!(1 && ((4U <= 0) || ((0 == 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "Waiting for %d ms" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), (int32_t)next_update); } while (
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic(((int32_t)next_update) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "Waiting for %d ms", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), (int32_t)next_update); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Waiting for %d ms") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Waiting for %d ms") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Waiting for %d ms") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Waiting for %d ms") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Waiting for %d ms") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Waiting for %d ms") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Waiting for %d ms"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Waiting for %d ms") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Waiting for %d ms") + 0; double _d = _Generic(("%s: " "(%s): " "Waiting for %d ms") + 0, float : ("%s: " "(%s): " "Waiting for %d ms") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Waiting for %d ms") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Waiting for %d ms"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Waiting for %d ms") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Waiting for %d ms") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Waiting for %d ms"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((int32_t)next_update) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((int32_t)next_update) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((int32_t)next_update) + 0))) > (1)) ? (_Generic(((int32_t)next_update) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((int32_t)next_update) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((int32_t)next_update) + 0; size_t _arg_size = _Generic(((int32_t)next_update), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((int32_t)next_update) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((int32_t)next_update) + 0; double _d = _Generic(((int32_t)next_update) + 0, float : ((int32_t)next_update) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((int32_t)next_update) + 0; size_t _arg_size = _Generic(((int32_t)next_update), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((int32_t)next_update) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((int32_t)next_update) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (int32_t)next_update; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Waiting for %d ms") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Waiting for %d ms") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Waiting for %d ms") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Waiting for %d ms") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Waiting for %d ms") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Waiting for %d ms") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Waiting for %d ms"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Waiting for %d ms") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Waiting for %d ms") + 0; double _d = _Generic(("%s: " "(%s): " "Waiting for %d ms") + 0, float : ("%s: " "(%s): " "Waiting for %d ms") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Waiting for %d ms") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Waiting for %d ms"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Waiting for %d ms") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Waiting for %d ms") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Waiting for %d ms"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((int32_t)next_update) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((int32_t)next_update) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((int32_t)next_update) + 0))) > (1)) ? (_Generic(((int32_t)next_update) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((int32_t)next_update) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((int32_t)next_update) + 0; size_t _arg_size = _Generic(((int32_t)next_update), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((int32_t)next_update) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((int32_t)next_update) + 0; double _d = _Generic(((int32_t)next_update) + 0, float : ((int32_t)next_update) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((int32_t)next_update) + 0; size_t _arg_size = _Generic(((int32_t)next_update), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((int32_t)next_update) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((int32_t)next_update) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (int32_t)next_update; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "Waiting for %d ms", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), (int32_t)next_update); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "Waiting for %d ms", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), (int32_t)next_update); } else { log_3("%s: " "(%s): " "Waiting for %d ms", (log_arg_t)((const char *)__func__), (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))), (log_arg_t)((int32_t)next_update), src_level); } } while (
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "Waiting for %d ms", log_strdup(k_thread_name_get(k_current_get())), (int32_t)next_update); } } while (
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1577 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 );

  k_work_reschedule(&address_lifetime_timer, ((k_timeout_t) { .ticks = ((k_ticks_t)k_ms_to_ticks_ceil64((((next_update) > (0)) ? (next_update) : (0)))) }));
 }

 k_mutex_unlock(&lock);
}
# 1592 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
static void address_start_timer(struct net_if_addr *ifaddr, uint32_t vlifetime)
{
 sys_slist_append(&active_address_lifetime_timers,
    &ifaddr->lifetime.node);

 net_timeout_set(&ifaddr->lifetime, vlifetime, k_uptime_get_32());
 k_work_reschedule(&address_lifetime_timer, ((k_timeout_t) {0}));
}

void net_if_ipv6_addr_update_lifetime(struct net_if_addr *ifaddr,
          uint32_t vlifetime)
{
 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "Updating expire time of %s by %u secs" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr)), vlifetime); } while (
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({

#pragma GCC diagnostic push
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((vlifetime) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);

#pragma GCC diagnostic pop
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
, 0, "%s: " "(%s): " "Updating expire time of %s by %u secs", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr)), vlifetime); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {

#pragma GCC diagnostic push
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0) 
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
!= 
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0; double _d = _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, float : ("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Updating expire time of %s by %u secs"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((vlifetime) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((vlifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((vlifetime) + 0))) > (1)) ? (_Generic((vlifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((vlifetime) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (vlifetime) + 0; size_t _arg_size = _Generic((vlifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((vlifetime) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (vlifetime) + 0; double _d = _Generic((vlifetime) + 0, float : (vlifetime) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (vlifetime) + 0; size_t _arg_size = _Generic((vlifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((vlifetime) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((vlifetime) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = vlifetime; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
((__builtin_object_size(
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, __builtin_object_size(
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0)) : __memset_ichk(
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; }; if (_plen) { do {

#pragma GCC diagnostic push
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0; double _d = _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, float : ("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Updating expire time of %s by %u secs"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((vlifetime) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((vlifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((vlifetime) + 0))) > (1)) ? (_Generic((vlifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((vlifetime) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (vlifetime) + 0; size_t _arg_size = _Generic((vlifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((vlifetime) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (vlifetime) + 0; double _d = _Generic((vlifetime) + 0, float : (vlifetime) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (vlifetime) + 0; size_t _arg_size = _Generic((vlifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((vlifetime) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((vlifetime) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = vlifetime; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "Updating expire time of %s by %u secs", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr)), vlifetime); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "Updating expire time of %s by %u secs", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr)), vlifetime); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr))) , (log_arg_t)(vlifetime)}; log_n("%s: " "(%s): " "Updating expire time of %s by %u secs", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } } while (
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); } if (
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) { z_log_printf_arg_checker("(%s): " "Updating expire time of %s by %u secs", log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifaddr->address.in6_addr)), vlifetime); } } while (
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1606 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)

            ;

 ifaddr->addr_state = NET_ADDR_PREFERRED;

 address_start_timer(ifaddr, vlifetime);

 k_mutex_unlock(&lock);
}

static struct net_if_addr *ipv6_addr_find(struct net_if *iface,
       struct in6_addr *addr)
{
 struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 int i;

 for (i = 0; i < 2; i++) {
  if (!ipv6->unicast[i].is_used) {
   continue;
  }

  if (net_ipv6_addr_cmp(
       addr, &ipv6->unicast[i].address.in6_addr)) {

   return &ipv6->unicast[i];
  }
 }

 return 
# 1635 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       ((void *)0)
# 1635 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           ;
}

static inline void net_if_addr_init(struct net_if_addr *ifaddr,
        struct in6_addr *addr,
        enum net_addr_type addr_type,
        uint32_t vlifetime)
{
 ifaddr->is_used = 
# 1643 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                  1
# 1643 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                      ;
 ifaddr->address.family = 2;
 ifaddr->addr_type = addr_type;
 do { struct __attribute__((__packed__)) { __typeof__(*&ifaddr->address.in6_addr) __v; } *__p = (__typeof__(__p)) (&ifaddr->address.in6_addr); __p->__v = (__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(addr)) __v; } *__p = (__typeof__(__p)) (addr); __p->__v; })); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 1646 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1646 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (
# 1646 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 1646 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
);



 if (vlifetime) {
  ifaddr->is_infinite = 
# 1651 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                       0
# 1651 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                            ;

  do { if (!(1 && ((4U <= 0) || ((0 == 
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "Expiring %s in %u secs" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, addr)), vlifetime); } while (
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({

#pragma GCC diagnostic push
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((vlifetime) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);

#pragma GCC diagnostic pop
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "Expiring %s in %u secs", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, addr)), vlifetime); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {

#pragma GCC diagnostic push
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Expiring %s in %u secs") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Expiring %s in %u secs") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Expiring %s in %u secs") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Expiring %s in %u secs") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Expiring %s in %u secs") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Expiring %s in %u secs") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Expiring %s in %u secs"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Expiring %s in %u secs") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Expiring %s in %u secs") + 0; double _d = _Generic(("%s: " "(%s): " "Expiring %s in %u secs") + 0, float : ("%s: " "(%s): " "Expiring %s in %u secs") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Expiring %s in %u secs") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Expiring %s in %u secs"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Expiring %s in %u secs") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Expiring %s in %u secs") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Expiring %s in %u secs"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (log_strdup(net_sprint_addr(2, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((vlifetime) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((vlifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((vlifetime) + 0))) > (1)) ? (_Generic((vlifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((vlifetime) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (vlifetime) + 0; size_t _arg_size = _Generic((vlifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((vlifetime) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (vlifetime) + 0; double _d = _Generic((vlifetime) + 0, float : (vlifetime) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (vlifetime) + 0; size_t _arg_size = _Generic((vlifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((vlifetime) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((vlifetime) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = vlifetime; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {

#pragma GCC diagnostic push
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Expiring %s in %u secs") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Expiring %s in %u secs") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Expiring %s in %u secs") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Expiring %s in %u secs") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Expiring %s in %u secs") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Expiring %s in %u secs") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Expiring %s in %u secs"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Expiring %s in %u secs") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Expiring %s in %u secs") + 0; double _d = _Generic(("%s: " "(%s): " "Expiring %s in %u secs") + 0, float : ("%s: " "(%s): " "Expiring %s in %u secs") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Expiring %s in %u secs") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Expiring %s in %u secs"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Expiring %s in %u secs") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Expiring %s in %u secs") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Expiring %s in %u secs"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (log_strdup(net_sprint_addr(2, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((vlifetime) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((vlifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((vlifetime) + 0))) > (1)) ? (_Generic((vlifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((vlifetime) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (vlifetime) + 0; size_t _arg_size = _Generic((vlifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((vlifetime) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (vlifetime) + 0; double _d = _Generic((vlifetime) + 0, float : (vlifetime) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (vlifetime) + 0; size_t _arg_size = _Generic((vlifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((vlifetime) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((vlifetime) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = vlifetime; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "Expiring %s in %u secs", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, addr)), vlifetime); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "Expiring %s in %u secs", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, addr)), vlifetime); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(log_strdup(net_sprint_addr(2, addr))) , (log_arg_t)(vlifetime)}; log_n("%s: " "(%s): " "Expiring %s in %u secs", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } } while (
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "Expiring %s in %u secs", log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, addr)), vlifetime); } } while (
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1653 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )

             ;

  net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
 } else {
  ifaddr->is_infinite = 
# 1659 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                       1
# 1659 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                           ;
 }
}

struct net_if_addr *net_if_ipv6_addr_add(struct net_if *iface,
      struct in6_addr *addr,
      enum net_addr_type addr_type,
      uint32_t vlifetime)
{
 struct net_if_addr *ifaddr = 
# 1668 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                             ((void *)0)
# 1668 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                 ;
 struct net_if_ipv6 *ipv6;
 int i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
  goto out;
 }

 ifaddr = ipv6_addr_find(iface, addr);
 if (ifaddr) {
  goto out;
 }

 for (i = 0; i < 2; i++) {
  if (ipv6->unicast[i].is_used) {
   continue;
  }

  net_if_addr_init(&ipv6->unicast[i], addr, addr_type,
     vlifetime);

  do { if (!(1 && ((4U <= 0) || ((0 == 
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "[%d] interface %p address %s type %s added" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr)), net_addr_type2str(addr_type)); } while (
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({

#pragma GCC diagnostic push
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((net_addr_type2str(addr_type)) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);

#pragma GCC diagnostic pop
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "[%d] interface %p address %s type %s added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr)), net_addr_type2str(addr_type)); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {

#pragma GCC diagnostic push
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0; double _d = _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, float : ("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "[%d] interface %p address %s type %s added"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((i) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) > (1)) ? (_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (i) + 0; double _d = _Generic((i) + 0, float : (i) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((i) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((i) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = i; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (log_strdup(net_sprint_addr(2, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((net_addr_type2str(addr_type)) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((net_addr_type2str(addr_type)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((net_addr_type2str(addr_type)) + 0))) > (1)) ? (_Generic((net_addr_type2str(addr_type)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((net_addr_type2str(addr_type)) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (net_addr_type2str(addr_type)) + 0; size_t _arg_size = _Generic((net_addr_type2str(addr_type)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((net_addr_type2str(addr_type)) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (net_addr_type2str(addr_type)) + 0; double _d = _Generic((net_addr_type2str(addr_type)) + 0, float : (net_addr_type2str(addr_type)) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (net_addr_type2str(addr_type)) + 0; size_t _arg_size = _Generic((net_addr_type2str(addr_type)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((net_addr_type2str(addr_type)) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((net_addr_type2str(addr_type)) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = net_addr_type2str(addr_type); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {

#pragma GCC diagnostic push
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0; double _d = _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, float : ("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "[%d] interface %p address %s type %s added"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((i) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) > (1)) ? (_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (i) + 0; double _d = _Generic((i) + 0, float : (i) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((i) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((i) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = i; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (log_strdup(net_sprint_addr(2, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((net_addr_type2str(addr_type)) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((net_addr_type2str(addr_type)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((net_addr_type2str(addr_type)) + 0))) > (1)) ? (_Generic((net_addr_type2str(addr_type)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((net_addr_type2str(addr_type)) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (net_addr_type2str(addr_type)) + 0; size_t _arg_size = _Generic((net_addr_type2str(addr_type)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((net_addr_type2str(addr_type)) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (net_addr_type2str(addr_type)) + 0; double _d = _Generic((net_addr_type2str(addr_type)) + 0, float : (net_addr_type2str(addr_type)) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (net_addr_type2str(addr_type)) + 0; size_t _arg_size = _Generic((net_addr_type2str(addr_type)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((net_addr_type2str(addr_type)) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((net_addr_type2str(addr_type)) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = net_addr_type2str(addr_type); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "[%d] interface %p address %s type %s added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr)), net_addr_type2str(addr_type)); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "[%d] interface %p address %s type %s added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr)), net_addr_type2str(addr_type)); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(i) , (log_arg_t)(iface) , (log_arg_t)(log_strdup(net_sprint_addr(2, addr))) , (log_arg_t)(net_addr_type2str(addr_type))}; log_n("%s: " "(%s): " "[%d] interface %p address %s type %s added", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } } while (
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "[%d] interface %p address %s type %s added", log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr)), net_addr_type2str(addr_type)); } } while (
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1691 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )

                                ;

  if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT) &&
      !net_ipv6_is_addr_loopback(addr)) {
# 1707 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
   join_mcast_nodes(iface,
      &ipv6->unicast[i].address.in6_addr);

   net_if_ipv6_start_dad(iface, &ipv6->unicast[i]);
  } else {



   ipv6->unicast[i].addr_state = NET_ADDR_PREFERRED;
  }

  net_mgmt_event_notify_with_info(
   (((1UL << (31)) | (1UL << (30)) | (2 << 28) | (0x060 << 16)) | NET_EVENT_IPV6_CMD_ADDR_ADD), iface,
   &ipv6->unicast[i].address.in6_addr,
   sizeof(struct in6_addr));

  ifaddr = &ipv6->unicast[i];
  goto out;
 }

out:
 k_mutex_unlock(&lock);

 return ifaddr;
}


# 1733 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1733 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
    net_if_ipv6_addr_rm(struct net_if *iface, const struct in6_addr *addr)
{
 
# 1735 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1735 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
     ret = 
# 1735 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
           0
# 1735 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                ;
 struct net_if_ipv6 *ipv6;
 int i;

 { };

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 ipv6 = iface->config.ip.ipv6;
 if (!ipv6) {
  goto out;
 }

 for (i = 0; i < 2; i++) {
  struct in6_addr maddr;

  if (!ipv6->unicast[i].is_used) {
   continue;
  }

  if (!net_ipv6_addr_cmp(&ipv6->unicast[i].address.in6_addr,
           addr)) {
   continue;
  }

  if (!ipv6->unicast[i].is_infinite) {
   sys_slist_find_and_remove(
    &active_address_lifetime_timers,
    &ipv6->unicast[i].lifetime.node);

   if (sys_slist_is_empty(
        &active_address_lifetime_timers)) {
    k_work_cancel_delayable(
     &address_lifetime_timer);
   }
  }

  ipv6->unicast[i].is_used = 
# 1772 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                            0
# 1772 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                 ;

  net_ipv6_addr_create_solicited_node(addr, &maddr);

  net_if_ipv6_maddr_rm(iface, &maddr);

  do { if (!(1 && ((4U <= 0) || ((0 == 
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "[%d] interface %p address %s type %s removed" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr)), net_addr_type2str(ipv6->unicast[i].addr_type)); } while (
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({

#pragma GCC diagnostic push
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((net_addr_type2str(ipv6->unicast[i].addr_type)) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);

#pragma GCC diagnostic pop
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "[%d] interface %p address %s type %s removed", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr)), net_addr_type2str(ipv6->unicast[i].addr_type)); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {

#pragma GCC diagnostic push
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0; double _d = _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0, float : ("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "[%d] interface %p address %s type %s removed"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((i) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) > (1)) ? (_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (i) + 0; double _d = _Generic((i) + 0, float : (i) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((i) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((i) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = i; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (log_strdup(net_sprint_addr(2, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((net_addr_type2str(ipv6->unicast[i].addr_type)) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((net_addr_type2str(ipv6->unicast[i].addr_type)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((net_addr_type2str(ipv6->unicast[i].addr_type)) + 0))) > (1)) ? (_Generic((net_addr_type2str(ipv6->unicast[i].addr_type)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((net_addr_type2str(ipv6->unicast[i].addr_type)) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (net_addr_type2str(ipv6->unicast[i].addr_type)) + 0; size_t _arg_size = _Generic((net_addr_type2str(ipv6->unicast[i].addr_type)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((net_addr_type2str(ipv6->unicast[i].addr_type)) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (net_addr_type2str(ipv6->unicast[i].addr_type)) + 0; double _d = _Generic((net_addr_type2str(ipv6->unicast[i].addr_type)) + 0, float : (net_addr_type2str(ipv6->unicast[i].addr_type)) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (net_addr_type2str(ipv6->unicast[i].addr_type)) + 0; size_t _arg_size = _Generic((net_addr_type2str(ipv6->unicast[i].addr_type)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((net_addr_type2str(ipv6->unicast[i].addr_type)) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((net_addr_type2str(ipv6->unicast[i].addr_type)) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = net_addr_type2str(ipv6->unicast[i].addr_type); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {

#pragma GCC diagnostic push
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0; double _d = _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0, float : ("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s removed") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "[%d] interface %p address %s type %s removed"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((i) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) > (1)) ? (_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (i) + 0; double _d = _Generic((i) + 0, float : (i) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((i) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((i) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = i; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (log_strdup(net_sprint_addr(2, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((net_addr_type2str(ipv6->unicast[i].addr_type)) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((net_addr_type2str(ipv6->unicast[i].addr_type)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((net_addr_type2str(ipv6->unicast[i].addr_type)) + 0))) > (1)) ? (_Generic((net_addr_type2str(ipv6->unicast[i].addr_type)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((net_addr_type2str(ipv6->unicast[i].addr_type)) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (net_addr_type2str(ipv6->unicast[i].addr_type)) + 0; size_t _arg_size = _Generic((net_addr_type2str(ipv6->unicast[i].addr_type)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((net_addr_type2str(ipv6->unicast[i].addr_type)) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (net_addr_type2str(ipv6->unicast[i].addr_type)) + 0; double _d = _Generic((net_addr_type2str(ipv6->unicast[i].addr_type)) + 0, float : (net_addr_type2str(ipv6->unicast[i].addr_type)) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (net_addr_type2str(ipv6->unicast[i].addr_type)) + 0; size_t _arg_size = _Generic((net_addr_type2str(ipv6->unicast[i].addr_type)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((net_addr_type2str(ipv6->unicast[i].addr_type)) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((net_addr_type2str(ipv6->unicast[i].addr_type)) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = net_addr_type2str(ipv6->unicast[i].addr_type); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "[%d] interface %p address %s type %s removed", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr)), net_addr_type2str(ipv6->unicast[i].addr_type)); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "[%d] interface %p address %s type %s removed", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr)), net_addr_type2str(ipv6->unicast[i].addr_type)); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(i) , (log_arg_t)(iface) , (log_arg_t)(log_strdup(net_sprint_addr(2, addr))) , (log_arg_t)(net_addr_type2str(ipv6->unicast[i].addr_type))}; log_n("%s: " "(%s): " "[%d] interface %p address %s type %s removed", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } } while (
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "[%d] interface %p address %s type %s removed", log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr)), net_addr_type2str(ipv6->unicast[i].addr_type)); } } while (
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1778 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )

                                                 ;





  net_mgmt_event_notify_with_info(
   (((1UL << (31)) | (1UL << (30)) | (2 << 28) | (0x060 << 16)) | NET_EVENT_IPV6_CMD_ADDR_DEL),
   iface,
   &ipv6->unicast[i].address.in6_addr,
   sizeof(struct in6_addr));

  ret = 
# 1792 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       1
# 1792 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           ;
  goto out;
 }

out:
 k_mutex_unlock(&lock);

 return ret;
}


# 1802 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1802 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
    z_impl_net_if_ipv6_addr_add_by_index(int index,
       struct in6_addr *addr,
       enum net_addr_type addr_type,
       uint32_t vlifetime)
{
 struct net_if *iface;

 iface = net_if_get_by_index(index);
 if (!iface) {
  return 
# 1811 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        0
# 1811 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
             ;
 }

 return net_if_ipv6_addr_add(iface, addr, addr_type, vlifetime) ?
  
# 1815 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 1 
# 1815 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
      : 
# 1815 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        0
# 1815 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
             ;
}
# 1843 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 1843 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1843 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
    z_impl_net_if_ipv6_addr_rm_by_index(int index,
      const struct in6_addr *addr)
{
 struct net_if *iface;

 iface = net_if_get_by_index(index);
 if (!iface) {
  return 
# 1850 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        0
# 1850 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
             ;
 }

 return net_if_ipv6_addr_rm(iface, addr);
}
# 1876 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
struct net_if_mcast_addr *net_if_ipv6_maddr_add(struct net_if *iface,
      const struct in6_addr *addr)
{
 struct net_if_mcast_addr *ifmaddr = 
# 1879 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                    ((void *)0)
# 1879 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                        ;
 struct net_if_ipv6 *ipv6;
 int i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
  goto out;
 }

 if (!net_ipv6_is_addr_mcast(addr)) {
  do { if (!(1 && ((4U <= 0) || ((0 == 
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "Address %s is not a multicast address." "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, addr))); } while (
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
#pragma GCC diagnostic pop
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "Address %s is not a multicast address.", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, addr))); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Address %s is not a multicast address.") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Address %s is not a multicast address.") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Address %s is not a multicast address.") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Address %s is not a multicast address."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Address %s is not a multicast address.") + 0; double _d = _Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, float : ("%s: " "(%s): " "Address %s is not a multicast address.") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Address %s is not a multicast address.") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Address %s is not a multicast address."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Address %s is not a multicast address."; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (log_strdup(net_sprint_addr(2, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
#pragma GCC diagnostic push
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Address %s is not a multicast address.") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Address %s is not a multicast address.") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Address %s is not a multicast address.") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Address %s is not a multicast address."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Address %s is not a multicast address.") + 0; double _d = _Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, float : ("%s: " "(%s): " "Address %s is not a multicast address.") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Address %s is not a multicast address.") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Address %s is not a multicast address."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Address %s is not a multicast address."; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (log_strdup(net_sprint_addr(2, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "Address %s is not a multicast address.", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, addr))); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "Address %s is not a multicast address.", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, addr))); } else { log_3("%s: " "(%s): " "Address %s is not a multicast address.", (log_arg_t)((const char *)__func__), (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))), (log_arg_t)(log_strdup(net_sprint_addr(2, addr))), src_level); } } while (
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "Address %s is not a multicast address.", log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, addr))); } } while (
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )
                                          ;
  goto out;
 }

 if (net_if_ipv6_maddr_lookup(addr, &iface)) {
  do { if (!(1 && ((2U <= 0) || ((0 == 
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (2U <= __log_level) && (2U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Multicast address %s is is already registered." "\n", z_log_minimal_level_to_char(2U), log_strdup(net_sprint_addr(2, addr))); } while (
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (2U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 2U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 0) > 0);
#pragma GCC diagnostic pop
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 2U, (uint8_t *)
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "Multicast address %s is is already registered.", log_strdup(net_sprint_addr(2, addr))); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Multicast address %s is is already registered.") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Multicast address %s is is already registered.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Multicast address %s is is already registered.") + 0))) > (1)) ? (_Generic(("Multicast address %s is is already registered.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Multicast address %s is is already registered.") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("Multicast address %s is is already registered.") + 0; size_t _arg_size = _Generic(("Multicast address %s is is already registered."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("Multicast address %s is is already registered.") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Multicast address %s is is already registered.") + 0; double _d = _Generic(("Multicast address %s is is already registered.") + 0, float : ("Multicast address %s is is already registered.") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("Multicast address %s is is already registered.") + 0; size_t _arg_size = _Generic(("Multicast address %s is is already registered."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Multicast address %s is is already registered.") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Multicast address %s is is already registered.") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Multicast address %s is is already registered."; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (log_strdup(net_sprint_addr(2, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
#pragma GCC diagnostic push
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Multicast address %s is is already registered.") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Multicast address %s is is already registered.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Multicast address %s is is already registered.") + 0))) > (1)) ? (_Generic(("Multicast address %s is is already registered.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Multicast address %s is is already registered.") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("Multicast address %s is is already registered.") + 0; size_t _arg_size = _Generic(("Multicast address %s is is already registered."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("Multicast address %s is is already registered.") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Multicast address %s is is already registered.") + 0; double _d = _Generic(("Multicast address %s is is already registered.") + 0, float : ("Multicast address %s is is already registered.") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("Multicast address %s is is already registered.") + 0; size_t _arg_size = _Generic(("Multicast address %s is is already registered."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Multicast address %s is is already registered.") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Multicast address %s is is already registered.") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Multicast address %s is is already registered."; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (log_strdup(net_sprint_addr(2, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 2U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 2U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "Multicast address %s is is already registered.", log_strdup(net_sprint_addr(2, addr))); } else if (1) { log_string_sync(src_level, "Multicast address %s is is already registered.", log_strdup(net_sprint_addr(2, addr))); } else { log_1("Multicast address %s is is already registered.", (log_arg_t)(log_strdup(net_sprint_addr(2, addr))), src_level); } } while (
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("Multicast address %s is is already registered.", log_strdup(net_sprint_addr(2, addr))); } } while (
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1896 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )
                                          ;
  goto out;
 }

 for (i = 0; i < 3; i++) {
  if (ipv6->mcast[i].is_used) {
   continue;
  }

  ipv6->mcast[i].is_used = 
# 1906 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                          1
# 1906 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                              ;
  ipv6->mcast[i].address.family = 2;
  
# 1908 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 1908 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 &ipv6->mcast[i].address.in6_addr
# 1908 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memcpy_chk(
# 1908 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 &ipv6->mcast[i].address.in6_addr
# 1908 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1908 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 addr
# 1908 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1908 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 16
# 1908 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 1908 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 &ipv6->mcast[i].address.in6_addr
# 1908 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memcpy_ichk(
# 1908 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 &ipv6->mcast[i].address.in6_addr
# 1908 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1908 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 addr
# 1908 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1908 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 16
# 1908 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 1908 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                                   ;

  do { if (!(1 && ((4U <= 0) || ((0 == 
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "[%d] interface %p address %s added" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr))); } while (
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
#pragma GCC diagnostic pop
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "[%d] interface %p address %s added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr))); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "[%d] interface %p address %s added") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "[%d] interface %p address %s added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s added") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "[%d] interface %p address %s added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s added") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "[%d] interface %p address %s added") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s added") + 0; double _d = _Generic(("%s: " "(%s): " "[%d] interface %p address %s added") + 0, float : ("%s: " "(%s): " "[%d] interface %p address %s added") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "[%d] interface %p address %s added") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "[%d] interface %p address %s added") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "[%d] interface %p address %s added"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((i) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) > (1)) ? (_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (i) + 0; double _d = _Generic((i) + 0, float : (i) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((i) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((i) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = i; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (log_strdup(net_sprint_addr(2, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
#pragma GCC diagnostic push
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "[%d] interface %p address %s added") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "[%d] interface %p address %s added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s added") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "[%d] interface %p address %s added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s added") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "[%d] interface %p address %s added") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s added") + 0; double _d = _Generic(("%s: " "(%s): " "[%d] interface %p address %s added") + 0, float : ("%s: " "(%s): " "[%d] interface %p address %s added") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "[%d] interface %p address %s added") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "[%d] interface %p address %s added") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "[%d] interface %p address %s added"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((i) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) > (1)) ? (_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (i) + 0; double _d = _Generic((i) + 0, float : (i) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((i) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((i) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = i; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (log_strdup(net_sprint_addr(2, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "[%d] interface %p address %s added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr))); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "[%d] interface %p address %s added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr))); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(i) , (log_arg_t)(iface) , (log_arg_t)(log_strdup(net_sprint_addr(2, addr)))}; log_n("%s: " "(%s): " "[%d] interface %p address %s added", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } } while (
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "[%d] interface %p address %s added", log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr))); } } while (
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1910 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )
                                          ;

  net_mgmt_event_notify_with_info(
   (((1UL << (31)) | (1UL << (30)) | (2 << 28) | (0x060 << 16)) | NET_EVENT_IPV6_CMD_MADDR_ADD), iface,
   &ipv6->mcast[i].address.in6_addr,
   sizeof(struct in6_addr));

  ifmaddr = &ipv6->mcast[i];
  goto out;
 }

out:
 k_mutex_unlock(&lock);

 return ifmaddr;
}


# 1928 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1928 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
    net_if_ipv6_maddr_rm(struct net_if *iface, const struct in6_addr *addr)
{
 
# 1930 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 1930 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
     ret = 
# 1930 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
           0
# 1930 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                ;
 struct net_if_ipv6 *ipv6;
 int i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 ipv6 = iface->config.ip.ipv6;
 if (!ipv6) {
  goto out;
 }

 for (i = 0; i < 3; i++) {
  if (!ipv6->mcast[i].is_used) {
   continue;
  }

  if (!net_ipv6_addr_cmp(&ipv6->mcast[i].address.in6_addr,
           addr)) {
   continue;
  }

  ipv6->mcast[i].is_used = 
# 1951 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                          0
# 1951 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                               ;

  do { if (!(1 && ((4U <= 0) || ((0 == 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "[%d] interface %p address %s removed" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr))); } while (
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
#pragma GCC diagnostic pop
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "[%d] interface %p address %s removed", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr))); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s removed") + 0; double _d = _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, float : ("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "[%d] interface %p address %s removed"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((i) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) > (1)) ? (_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (i) + 0; double _d = _Generic((i) + 0, float : (i) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((i) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((i) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = i; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (log_strdup(net_sprint_addr(2, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
#pragma GCC diagnostic push
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s removed") + 0; double _d = _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, float : ("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "[%d] interface %p address %s removed"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((i) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) > (1)) ? (_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (i) + 0; double _d = _Generic((i) + 0, float : (i) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((i) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((i) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = i; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : (log_strdup(net_sprint_addr(2, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "[%d] interface %p address %s removed", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr))); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "[%d] interface %p address %s removed", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr))); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(i) , (log_arg_t)(iface) , (log_arg_t)(log_strdup(net_sprint_addr(2, addr)))}; log_n("%s: " "(%s): " "[%d] interface %p address %s removed", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } } while (
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "[%d] interface %p address %s removed", log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, addr))); } } while (
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 1953 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )
                                                    ;

  net_mgmt_event_notify_with_info(
   (((1UL << (31)) | (1UL << (30)) | (2 << 28) | (0x060 << 16)) | NET_EVENT_IPV6_CMD_MADDR_DEL), iface,
   &ipv6->mcast[i].address.in6_addr,
   sizeof(struct in6_addr));

  ret = 
# 1961 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       1
# 1961 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           ;
  goto out;
 }

out:
 k_mutex_unlock(&lock);

 return ret;
}

struct net_if_mcast_addr *net_if_ipv6_maddr_lookup(const struct in6_addr *maddr,
         struct net_if **ret)
{
 struct net_if_mcast_addr *ifmaddr = 
# 1974 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                    ((void *)0)
# 1974 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                        ;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *iface = _net_if_list_start; ({ { }; iface < _net_if_list_end; }); iface++) {
  struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
  int i;

  if (ret && *ret && iface != *ret) {
   continue;
  }

  if (!ipv6) {
   continue;
  }

  for (i = 0; i < 3; i++) {
   if (!ipv6->mcast[i].is_used ||
       ipv6->mcast[i].address.family != 2) {
    continue;
   }

   if (net_ipv6_is_prefix(
        maddr->s6_addr,
        ipv6->mcast[i].address.in6_addr.s6_addr,
        128)) {
    if (ret) {
     *ret = iface;
    }

    ifmaddr = &ipv6->mcast[i];
    goto out;
   }
  }
 }

out:
 k_mutex_unlock(&lock);

 return ifmaddr;
}

void net_if_ipv6_maddr_leave(struct net_if_mcast_addr *addr)
{
 { };

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 addr->is_joined = 
# 2022 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                  0
# 2022 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                       ;

 k_mutex_unlock(&lock);
}

void net_if_ipv6_maddr_join(struct net_if_mcast_addr *addr)
{
 { };

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 addr->is_joined = 
# 2033 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                  1
# 2033 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                      ;

 k_mutex_unlock(&lock);
}

static void remove_prefix_addresses(struct net_if *iface,
        struct net_if_ipv6 *ipv6,
        struct in6_addr *addr,
        uint8_t len)
{
 int i;

 for (i = 0; i < 2; i++) {
  if (!ipv6->unicast[i].is_used ||
      ipv6->unicast[i].address.family != 2 ||
      ipv6->unicast[i].addr_type != NET_ADDR_AUTOCONF) {
   continue;
  }

  if (net_ipv6_is_prefix(
    addr->s6_addr,
    ipv6->unicast[i].address.in6_addr.s6_addr,
    len)) {
   net_if_ipv6_addr_rm(iface,
         &ipv6->unicast[i].address.in6_addr);
  }
 }
}

static void prefix_lifetime_expired(struct net_if_ipv6_prefix *ifprefix)
{
 struct net_if_ipv6 *ipv6;

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "Prefix %s/%d expired" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifprefix->prefix)), ifprefix->len); } while (
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({

#pragma GCC diagnostic push
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((ifprefix->len) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);

#pragma GCC diagnostic pop
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
, 0, "%s: " "(%s): " "Prefix %s/%d expired", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifprefix->prefix)), ifprefix->len); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {

#pragma GCC diagnostic push
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0) 
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
!= 
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Prefix %s/%d expired") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Prefix %s/%d expired") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Prefix %s/%d expired") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Prefix %s/%d expired") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Prefix %s/%d expired") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Prefix %s/%d expired") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Prefix %s/%d expired"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Prefix %s/%d expired") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Prefix %s/%d expired") + 0; double _d = _Generic(("%s: " "(%s): " "Prefix %s/%d expired") + 0, float : ("%s: " "(%s): " "Prefix %s/%d expired") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Prefix %s/%d expired") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Prefix %s/%d expired"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Prefix %s/%d expired") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Prefix %s/%d expired") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Prefix %s/%d expired"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, float : (log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &ifprefix->prefix)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((ifprefix->len) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((ifprefix->len) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ifprefix->len) + 0))) > (1)) ? (_Generic((ifprefix->len) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ifprefix->len) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (ifprefix->len) + 0; size_t _arg_size = _Generic((ifprefix->len), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((ifprefix->len) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (ifprefix->len) + 0; double _d = _Generic((ifprefix->len) + 0, float : (ifprefix->len) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (ifprefix->len) + 0; size_t _arg_size = _Generic((ifprefix->len), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((ifprefix->len) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((ifprefix->len) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = ifprefix->len; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
((__builtin_object_size(
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, __builtin_object_size(
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0)) : __memset_ichk(
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; }; if (_plen) { do {

#pragma GCC diagnostic push
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Prefix %s/%d expired") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Prefix %s/%d expired") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Prefix %s/%d expired") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Prefix %s/%d expired") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Prefix %s/%d expired") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Prefix %s/%d expired") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Prefix %s/%d expired"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Prefix %s/%d expired") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Prefix %s/%d expired") + 0; double _d = _Generic(("%s: " "(%s): " "Prefix %s/%d expired") + 0, float : ("%s: " "(%s): " "Prefix %s/%d expired") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Prefix %s/%d expired") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Prefix %s/%d expired"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Prefix %s/%d expired") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Prefix %s/%d expired") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Prefix %s/%d expired"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, float : (log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &ifprefix->prefix)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((ifprefix->len) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((ifprefix->len) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ifprefix->len) + 0))) > (1)) ? (_Generic((ifprefix->len) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ifprefix->len) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (ifprefix->len) + 0; size_t _arg_size = _Generic((ifprefix->len), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((ifprefix->len) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (ifprefix->len) + 0; double _d = _Generic((ifprefix->len) + 0, float : (ifprefix->len) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (ifprefix->len) + 0; size_t _arg_size = _Generic((ifprefix->len), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((ifprefix->len) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((ifprefix->len) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = ifprefix->len; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "Prefix %s/%d expired", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifprefix->prefix)), ifprefix->len); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "Prefix %s/%d expired", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifprefix->prefix)), ifprefix->len); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(log_strdup(net_sprint_addr(2, &ifprefix->prefix))) , (log_arg_t)(ifprefix->len)}; log_n("%s: " "(%s): " "Prefix %s/%d expired", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } } while (
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); } if (
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) { z_log_printf_arg_checker("(%s): " "Prefix %s/%d expired", log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifprefix->prefix)), ifprefix->len); } } while (
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)

                ;

 ifprefix->is_used = 
# 2070 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                    0
# 2070 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                         ;

 if (net_if_config_ipv6_get(ifprefix->iface, &ipv6) < 0) {
  return;
 }



 remove_prefix_addresses(ifprefix->iface, ipv6, &ifprefix->prefix,
    ifprefix->len);

 net_mgmt_event_notify_with_info(
  (((1UL << (31)) | (1UL << (30)) | (2 << 28) | (0x060 << 16)) | NET_EVENT_IPV6_CMD_PREFIX_DEL), ifprefix->iface,
  &ifprefix->prefix, sizeof(struct in6_addr));
}

static void prefix_timer_remove(struct net_if_ipv6_prefix *ifprefix)
{
 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "IPv6 prefix %s/%d removed" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifprefix->prefix)), ifprefix->len); } while (
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({

#pragma GCC diagnostic push
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((ifprefix->len) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);

#pragma GCC diagnostic pop
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
, 0, "%s: " "(%s): " "IPv6 prefix %s/%d removed", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifprefix->prefix)), ifprefix->len); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {

#pragma GCC diagnostic push
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0) 
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
!= 
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "IPv6 prefix %s/%d removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0; double _d = _Generic(("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0, float : ("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "IPv6 prefix %s/%d removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "IPv6 prefix %s/%d removed"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, float : (log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &ifprefix->prefix)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((ifprefix->len) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((ifprefix->len) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ifprefix->len) + 0))) > (1)) ? (_Generic((ifprefix->len) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ifprefix->len) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (ifprefix->len) + 0; size_t _arg_size = _Generic((ifprefix->len), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((ifprefix->len) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (ifprefix->len) + 0; double _d = _Generic((ifprefix->len) + 0, float : (ifprefix->len) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (ifprefix->len) + 0; size_t _arg_size = _Generic((ifprefix->len), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((ifprefix->len) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((ifprefix->len) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = ifprefix->len; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
((__builtin_object_size(
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, __builtin_object_size(
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0)) : __memset_ichk(
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; }; if (_plen) { do {

#pragma GCC diagnostic push
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "IPv6 prefix %s/%d removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0; double _d = _Generic(("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0, float : ("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "IPv6 prefix %s/%d removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "IPv6 prefix %s/%d removed") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "IPv6 prefix %s/%d removed"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, float : (log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &ifprefix->prefix))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &ifprefix->prefix)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((ifprefix->len) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((ifprefix->len) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ifprefix->len) + 0))) > (1)) ? (_Generic((ifprefix->len) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((ifprefix->len) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (ifprefix->len) + 0; size_t _arg_size = _Generic((ifprefix->len), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((ifprefix->len) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (ifprefix->len) + 0; double _d = _Generic((ifprefix->len) + 0, float : (ifprefix->len) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (ifprefix->len) + 0; size_t _arg_size = _Generic((ifprefix->len), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((ifprefix->len) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((ifprefix->len) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = ifprefix->len; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "IPv6 prefix %s/%d removed", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifprefix->prefix)), ifprefix->len); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "IPv6 prefix %s/%d removed", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifprefix->prefix)), ifprefix->len); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(log_strdup(net_sprint_addr(2, &ifprefix->prefix))) , (log_arg_t)(ifprefix->len)}; log_n("%s: " "(%s): " "IPv6 prefix %s/%d removed", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } } while (
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); } if (
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) { z_log_printf_arg_checker("(%s): " "IPv6 prefix %s/%d removed", log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &ifprefix->prefix)), ifprefix->len); } } while (
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2090 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)

                ;

 sys_slist_find_and_remove(&active_prefix_lifetime_timers,
      &ifprefix->lifetime.node);

 net_timeout_set(&ifprefix->lifetime, 0, 0);

 k_mutex_unlock(&lock);
}

static void prefix_lifetime_timeout(struct k_work *work)
{
 uint32_t next_update = 0xffffffffUL;
 uint32_t current_time = k_uptime_get_32();
 struct net_if_ipv6_prefix *current, *next;

 (void)(work);

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 for (current = ((sys_slist_peek_head(&active_prefix_lifetime_timers)) ? ((__typeof__(*(current)) *)(((char *)((sys_slist_peek_head(&active_prefix_lifetime_timers)))) - 
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(current))
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
lifetime.node
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
), next = ((current) ? ((sys_slist_peek_next(&((current)->lifetime.node))) ? ((__typeof__(*(current)) *)(((char *)((sys_slist_peek_next(&((current)->lifetime.node))))) - 
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(current))
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
lifetime.node
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) : 
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); current != 
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; current = next, next = ((current) ? ((sys_slist_peek_next(&((current)->lifetime.node))) ? ((__typeof__(*(current)) *)(((char *)((sys_slist_peek_next(&((current)->lifetime.node))))) - 
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(current))
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
lifetime.node
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) : 
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
))
                                     {
  struct net_timeout *timeout = &current->lifetime;
  uint32_t this_update = net_timeout_evaluate(timeout,
           current_time);

  if (this_update == 0U) {
   prefix_lifetime_expired(current);
   continue;
  }

  if (this_update < next_update) {
   next_update = this_update;
  }

  if (current == next) {
   break;
  }
 }

 if (next_update != 0xffffffffUL) {
  k_work_reschedule(&prefix_lifetime_timer, ((k_timeout_t) { .ticks = ((k_ticks_t)k_ms_to_ticks_ceil64((((next_update) > (0)) ? (next_update) : (0)))) }));
 }

 k_mutex_unlock(&lock);
}

static void prefix_start_timer(struct net_if_ipv6_prefix *ifprefix,
          uint32_t lifetime)
{
 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 (void)sys_slist_find_and_remove(&active_prefix_lifetime_timers,
     &ifprefix->lifetime.node);
 sys_slist_append(&active_prefix_lifetime_timers,
    &ifprefix->lifetime.node);

 net_timeout_set(&ifprefix->lifetime, lifetime, k_uptime_get_32());
 k_work_reschedule(&prefix_lifetime_timer, ((k_timeout_t) {0}));

 k_mutex_unlock(&lock);
}

static struct net_if_ipv6_prefix *ipv6_prefix_find(struct net_if *iface,
         struct in6_addr *prefix,
         uint8_t prefix_len)
{
 struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 int i;

 if (!ipv6) {
  return 
# 2163 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        ((void *)0)
# 2163 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
 }

 for (i = 0; i < 2; i++) {
  if (!ipv6->prefix[i].is_used) {
   continue;
  }

  if (net_ipv6_addr_cmp(prefix, &ipv6->prefix[i].prefix) &&
      prefix_len == ipv6->prefix[i].len) {
   return &ipv6->prefix[i];
  }
 }

 return 
# 2177 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       ((void *)0)
# 2177 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           ;
}

static void net_if_ipv6_prefix_init(struct net_if *iface,
        struct net_if_ipv6_prefix *ifprefix,
        struct in6_addr *addr, uint8_t len,
        uint32_t lifetime)
{
 ifprefix->is_used = 
# 2185 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                    1
# 2185 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                        ;
 ifprefix->len = len;
 ifprefix->iface = iface;
 do { struct __attribute__((__packed__)) { __typeof__(*&ifprefix->prefix) __v; } *__p = (__typeof__(__p)) (&ifprefix->prefix); __p->__v = (__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(addr)) __v; } *__p = (__typeof__(__p)) (addr); __p->__v; })); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 2188 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2188 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (
# 2188 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2188 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
);

 if (lifetime == 0xFFFFFFFF) {
  ifprefix->is_infinite = 
# 2191 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                         1
# 2191 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                             ;
 } else {
  ifprefix->is_infinite = 
# 2193 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                         0
# 2193 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                              ;
 }
}

struct net_if_ipv6_prefix *net_if_ipv6_prefix_add(struct net_if *iface,
        struct in6_addr *prefix,
        uint8_t len,
        uint32_t lifetime)
{
 struct net_if_ipv6_prefix *ifprefix = 
# 2202 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                      ((void *)0)
# 2202 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                          ;
 struct net_if_ipv6 *ipv6;
 int i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (net_if_config_ipv6_get(iface, &ipv6) < 0) {
  goto out;
 }

 ifprefix = ipv6_prefix_find(iface, prefix, len);
 if (ifprefix) {
  goto out;
 }

 if (!ipv6) {
  goto out;
 }

 for (i = 0; i < 2; i++) {
  if (ipv6->prefix[i].is_used) {
   continue;
  }

  net_if_ipv6_prefix_init(iface, &ipv6->prefix[i], prefix,
     len, lifetime);

  do { if (!(1 && ((4U <= 0) || ((0 == 
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "[%d] interface %p prefix %s/%d added" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, prefix)), len); } while (
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(2, prefix))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((len) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
#pragma GCC diagnostic pop
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "[%d] interface %p prefix %s/%d added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, prefix)), len); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0; double _d = _Generic(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0, float : ("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "[%d] interface %p prefix %s/%d added"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((i) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) > (1)) ? (_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (i) + 0; double _d = _Generic((i) + 0, float : (i) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((i) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((i) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = i; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, prefix))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, prefix))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, prefix))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, prefix))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, prefix))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, prefix))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, prefix))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, prefix))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, prefix))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, prefix))) + 0, float : (log_strdup(net_sprint_addr(2, prefix))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, prefix))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, prefix))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, prefix))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, prefix))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, prefix)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((len) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((len) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((len) + 0))) > (1)) ? (_Generic((len) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((len) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (len) + 0; size_t _arg_size = _Generic((len), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((len) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (len) + 0; double _d = _Generic((len) + 0, float : (len) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (len) + 0; size_t _arg_size = _Generic((len), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((len) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((len) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = len; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
#pragma GCC diagnostic push
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0; double _d = _Generic(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0, float : ("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "[%d] interface %p prefix %s/%d added") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "[%d] interface %p prefix %s/%d added"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((i) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) > (1)) ? (_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (i) + 0; double _d = _Generic((i) + 0, float : (i) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((i) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((i) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = i; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, prefix))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, prefix))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, prefix))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, prefix))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, prefix))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, prefix))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, prefix))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, prefix))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, prefix))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, prefix))) + 0, float : (log_strdup(net_sprint_addr(2, prefix))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, prefix))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, prefix))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, prefix))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, prefix))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, prefix)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((len) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((len) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((len) + 0))) > (1)) ? (_Generic((len) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((len) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (len) + 0; size_t _arg_size = _Generic((len), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((len) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (len) + 0; double _d = _Generic((len) + 0, float : (len) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (len) + 0; size_t _arg_size = _Generic((len), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((len) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((len) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = len; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "[%d] interface %p prefix %s/%d added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, prefix)), len); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "[%d] interface %p prefix %s/%d added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, prefix)), len); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(i) , (log_arg_t)(iface) , (log_arg_t)(log_strdup(net_sprint_addr(2, prefix))) , (log_arg_t)(len)}; log_n("%s: " "(%s): " "[%d] interface %p prefix %s/%d added", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } } while (
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "[%d] interface %p prefix %s/%d added", log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(2, prefix)), len); } } while (
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 2229 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )
                                                 ;

  net_mgmt_event_notify_with_info(
   (((1UL << (31)) | (1UL << (30)) | (2 << 28) | (0x060 << 16)) | NET_EVENT_IPV6_CMD_PREFIX_ADD), iface,
   &ipv6->prefix[i].prefix, sizeof(struct in6_addr));

  ifprefix = &ipv6->prefix[i];
  goto out;
 }

out:
 k_mutex_unlock(&lock);

 return ifprefix;
}


# 2246 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2246 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
    net_if_ipv6_prefix_rm(struct net_if *iface, struct in6_addr *addr,
      uint8_t len)
{
 
# 2249 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2249 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
     ret = 
# 2249 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
           0
# 2249 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                ;
 struct net_if_ipv6 *ipv6;
 int i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 ipv6 = iface->config.ip.ipv6;
 if (!ipv6) {
  goto out;
 }

 for (i = 0; i < 2; i++) {
  if (!ipv6->prefix[i].is_used) {
   continue;
  }

  if (!net_ipv6_addr_cmp(&ipv6->prefix[i].prefix, addr) ||
      ipv6->prefix[i].len != len) {
   continue;
  }

  net_if_ipv6_prefix_unset_timer(&ipv6->prefix[i]);

  ipv6->prefix[i].is_used = 
# 2272 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                           0
# 2272 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                ;




  remove_prefix_addresses(iface, ipv6, addr, len);

  net_mgmt_event_notify_with_info(
   (((1UL << (31)) | (1UL << (30)) | (2 << 28) | (0x060 << 16)) | NET_EVENT_IPV6_CMD_PREFIX_DEL), iface,
   &ipv6->prefix[i].prefix, sizeof(struct in6_addr));

  ret = 
# 2283 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       1
# 2283 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           ;
  goto out;
 }

out:
 k_mutex_unlock(&lock);

 return ret;
}

struct net_if_ipv6_prefix *net_if_ipv6_prefix_get(struct net_if *iface,
        struct in6_addr *addr)
{
 struct net_if_ipv6_prefix *prefix = 
# 2296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                    ((void *)0)
# 2296 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                        ;
 struct net_if_ipv6 *ipv6;
 int i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (!iface) {
  iface = net_if_get_default();
 }

 ipv6 = iface->config.ip.ipv6;
 if (!ipv6) {
  goto out;
 }

 for (i = 0; i < 2; i++) {
  if (!ipv6->prefix[i].is_used) {
   continue;
  }

  if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
           addr->s6_addr,
           ipv6->prefix[i].len)) {
   if (!prefix || prefix->len > ipv6->prefix[i].len) {
    prefix = &ipv6->prefix[i];
   }
  }
 }

out:
 k_mutex_unlock(&lock);

 return prefix;
}

struct net_if_ipv6_prefix *net_if_ipv6_prefix_lookup(struct net_if *iface,
           struct in6_addr *addr,
           uint8_t len)
{
 struct net_if_ipv6_prefix *prefix = 
# 2335 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                    ((void *)0)
# 2335 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                        ;
 struct net_if_ipv6 *ipv6;
 int i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 ipv6 = iface->config.ip.ipv6;
 if (!ipv6) {
  goto out;
 }

 for (i = 0; i < 2; i++) {
  if (!ipv6->prefix[i].is_used) {
   continue;
  }

  if (net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
           addr->s6_addr, len)) {
   prefix = &ipv6->prefix[i];
   goto out;
  }
 }

out:
 k_mutex_unlock(&lock);

 return prefix;
}


# 2364 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2364 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
    net_if_ipv6_addr_onlink(struct net_if **iface, struct in6_addr *addr)
{
 
# 2366 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2366 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
     ret = 
# 2366 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
           0
# 2366 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                ;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *tmp = _net_if_list_start; ({ { }; tmp < _net_if_list_end; }); tmp++) {
  struct net_if_ipv6 *ipv6 = tmp->config.ip.ipv6;
  int i;

  if (iface && *iface && *iface != tmp) {
   continue;
  }

  if (!ipv6) {
   continue;
  }

  for (i = 0; i < 2; i++) {
   if (ipv6->prefix[i].is_used &&
       net_ipv6_is_prefix(ipv6->prefix[i].prefix.s6_addr,
            addr->s6_addr,
            ipv6->prefix[i].len)) {
    if (iface) {
     *iface = tmp;
    }

    ret = 
# 2391 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
         1
# 2391 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
             ;
    goto out;
   }
  }
 }

out:
 k_mutex_unlock(&lock);

 return ret;
}

void net_if_ipv6_prefix_set_timer(struct net_if_ipv6_prefix *prefix,
      uint32_t lifetime)
{

 if (lifetime == 0xffffffff) {
  return;
 }

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "Prefix lifetime %u sec" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), lifetime); } while (
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((lifetime) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
, 0, "%s: " "(%s): " "Prefix lifetime %u sec", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), lifetime); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0) 
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
!= 
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Prefix lifetime %u sec") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Prefix lifetime %u sec") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Prefix lifetime %u sec") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Prefix lifetime %u sec") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Prefix lifetime %u sec") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Prefix lifetime %u sec") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Prefix lifetime %u sec"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Prefix lifetime %u sec") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Prefix lifetime %u sec") + 0; double _d = _Generic(("%s: " "(%s): " "Prefix lifetime %u sec") + 0, float : ("%s: " "(%s): " "Prefix lifetime %u sec") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Prefix lifetime %u sec") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Prefix lifetime %u sec"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Prefix lifetime %u sec") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Prefix lifetime %u sec") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Prefix lifetime %u sec"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((lifetime) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((lifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((lifetime) + 0))) > (1)) ? (_Generic((lifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((lifetime) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (lifetime) + 0; size_t _arg_size = _Generic((lifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((lifetime) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (lifetime) + 0; double _d = _Generic((lifetime) + 0, float : (lifetime) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (lifetime) + 0; size_t _arg_size = _Generic((lifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((lifetime) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((lifetime) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = lifetime; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
((__builtin_object_size(
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, __builtin_object_size(
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0)) : __memset_ichk(
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; }; if (_plen) { do {
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Prefix lifetime %u sec") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Prefix lifetime %u sec") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Prefix lifetime %u sec") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Prefix lifetime %u sec") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Prefix lifetime %u sec") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Prefix lifetime %u sec") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Prefix lifetime %u sec"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Prefix lifetime %u sec") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Prefix lifetime %u sec") + 0; double _d = _Generic(("%s: " "(%s): " "Prefix lifetime %u sec") + 0, float : ("%s: " "(%s): " "Prefix lifetime %u sec") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Prefix lifetime %u sec") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Prefix lifetime %u sec"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Prefix lifetime %u sec") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Prefix lifetime %u sec") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Prefix lifetime %u sec"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((lifetime) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((lifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((lifetime) + 0))) > (1)) ? (_Generic((lifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((lifetime) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (lifetime) + 0; size_t _arg_size = _Generic((lifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((lifetime) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (lifetime) + 0; double _d = _Generic((lifetime) + 0, float : (lifetime) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (lifetime) + 0; size_t _arg_size = _Generic((lifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((lifetime) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((lifetime) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = lifetime; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "Prefix lifetime %u sec", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), lifetime); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "Prefix lifetime %u sec", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), lifetime); } else { log_3("%s: " "(%s): " "Prefix lifetime %u sec", (log_arg_t)((const char *)__func__), (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))), (log_arg_t)(lifetime), src_level); } } while (
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); } if (
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) { z_log_printf_arg_checker("(%s): " "Prefix lifetime %u sec", log_strdup(k_thread_name_get(k_current_get())), lifetime); } } while (
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2411 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
);

 prefix_start_timer(prefix, lifetime);
}

void net_if_ipv6_prefix_unset_timer(struct net_if_ipv6_prefix *prefix)
{
 if (!prefix->is_used) {
  return;
 }

 prefix_timer_remove(prefix);
}

struct net_if_router *net_if_ipv6_router_lookup(struct net_if *iface,
      struct in6_addr *addr)
{
 return iface_router_lookup(iface, 2, addr);
}

struct net_if_router *net_if_ipv6_router_find_default(struct net_if *iface,
            struct in6_addr *addr)
{
 return iface_router_find_default(iface, 2, addr);
}

void net_if_ipv6_router_update_lifetime(struct net_if_router *router,
     uint16_t lifetime)
{
 do { if (!(1 && ((4U <= 0) || ((0 == 
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "Updating expire time of %s by %u secs" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &router->address.in6_addr)), lifetime); } while (
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({

#pragma GCC diagnostic push
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((lifetime) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);

#pragma GCC diagnostic pop
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
, 0, "%s: " "(%s): " "Updating expire time of %s by %u secs", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &router->address.in6_addr)), lifetime); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {

#pragma GCC diagnostic push
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0) 
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
!= 
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0; double _d = _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, float : ("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Updating expire time of %s by %u secs"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &router->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0, float : (log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &router->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &router->address.in6_addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((lifetime) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((lifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((lifetime) + 0))) > (1)) ? (_Generic((lifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((lifetime) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (lifetime) + 0; size_t _arg_size = _Generic((lifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((lifetime) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (lifetime) + 0; double _d = _Generic((lifetime) + 0, float : (lifetime) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (lifetime) + 0; size_t _arg_size = _Generic((lifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((lifetime) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((lifetime) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = lifetime; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
((__builtin_object_size(
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, __builtin_object_size(
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0)) : __memset_ichk(
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; }; if (_plen) { do {

#pragma GCC diagnostic push
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"


#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0; double _d = _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, float : ("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Updating expire time of %s by %u secs") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Updating expire time of %s by %u secs"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &router->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0, float : (log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(2, &router->address.in6_addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(2, &router->address.in6_addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(2, &router->address.in6_addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((lifetime) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((lifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((lifetime) + 0))) > (1)) ? (_Generic((lifetime) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((lifetime) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (lifetime) + 0; size_t _arg_size = _Generic((lifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((lifetime) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (lifetime) + 0; double _d = _Generic((lifetime) + 0, float : (lifetime) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (lifetime) + 0; size_t _arg_size = _Generic((lifetime), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((lifetime) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((lifetime) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = lifetime; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "Updating expire time of %s by %u secs", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &router->address.in6_addr)), lifetime); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "Updating expire time of %s by %u secs", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &router->address.in6_addr)), lifetime); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(log_strdup(net_sprint_addr(2, &router->address.in6_addr))) , (log_arg_t)(lifetime)}; log_n("%s: " "(%s): " "Updating expire time of %s by %u secs", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } } while (
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); } if (
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) { z_log_printf_arg_checker("(%s): " "Updating expire time of %s by %u secs", log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(2, &router->address.in6_addr)), lifetime); } } while (
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2440 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)

           ;

 router->life_start = k_uptime_get_32();
 router->lifetime = lifetime;

 iface_router_update_timer(router->life_start);
}

struct net_if_router *net_if_ipv6_router_add(struct net_if *iface,
          struct in6_addr *addr,
          uint16_t lifetime)
{
 return iface_router_add(iface, 2, addr, 
# 2454 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                               0
# 2454 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                                    , lifetime);
}


# 2457 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2457 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
    net_if_ipv6_router_rm(struct net_if_router *router)
{
 return iface_router_rm(router);
}

uint8_t net_if_ipv6_get_hop_limit(struct net_if *iface)
{

 int ret = 0;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (!iface->config.ip.ipv6) {
  goto out;
 }

 ret = iface->config.ip.ipv6->hop_limit;
out:
 k_mutex_unlock(&lock);

 return ret;





}

void net_ipv6_set_hop_limit(struct net_if *iface, uint8_t hop_limit)
{

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (!iface->config.ip.ipv6) {
  goto out;
 }

 iface->config.ip.ipv6->hop_limit = hop_limit;
out:
 k_mutex_unlock(&lock);




}

struct in6_addr *net_if_ipv6_get_ll(struct net_if *iface,
        enum net_addr_state addr_state)
{
 struct in6_addr *addr = 
# 2506 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                        ((void *)0)
# 2506 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                            ;
 struct net_if_ipv6 *ipv6;
 int i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 ipv6 = iface->config.ip.ipv6;
 if (!ipv6) {
  goto out;
 }

 for (i = 0; i < 2; i++) {
  if (!ipv6->unicast[i].is_used ||
      (addr_state != NET_ADDR_ANY_STATE &&
       ipv6->unicast[i].addr_state != addr_state) ||
      ipv6->unicast[i].address.family != 2) {
   continue;
  }

  if (net_ipv6_is_ll_addr(&ipv6->unicast[i].address.in6_addr)) {
   addr = &ipv6->unicast[i].address.in6_addr;
   goto out;
  }
 }

out:
 k_mutex_unlock(&lock);

 return addr;
}

struct in6_addr *net_if_ipv6_get_ll_addr(enum net_addr_state state,
      struct net_if **iface)
{
 struct in6_addr *addr = 
# 2540 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                        ((void *)0)
# 2540 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                            ;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *tmp = _net_if_list_start; ({ { }; tmp < _net_if_list_end; }); tmp++) {
  addr = net_if_ipv6_get_ll(tmp, state);
  if (addr) {
   if (iface) {
    *iface = tmp;
   }

   goto out;
  }
 }

out:
 k_mutex_unlock(&lock);

 return addr;
}

static inline struct in6_addr *check_global_addr(struct net_if *iface,
       enum net_addr_state state)
{
 struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 int i;

 if (!ipv6) {
  return 
# 2568 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        ((void *)0)
# 2568 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
 }

 for (i = 0; i < 2; i++) {
  if (!ipv6->unicast[i].is_used ||
      (ipv6->unicast[i].addr_state != state) ||
      ipv6->unicast[i].address.family != 2) {
   continue;
  }

  if (!net_ipv6_is_ll_addr(&ipv6->unicast[i].address.in6_addr)) {
   return &ipv6->unicast[i].address.in6_addr;
  }
 }

 return 
# 2583 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       ((void *)0)
# 2583 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           ;
}

struct in6_addr *net_if_ipv6_get_global_addr(enum net_addr_state state,
          struct net_if **iface)
{
 struct in6_addr *addr = 
# 2589 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                        ((void *)0)
# 2589 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                            ;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *tmp = _net_if_list_start; ({ { }; tmp < _net_if_list_end; }); tmp++) {
  if (iface && *iface && tmp != *iface) {
   continue;
  }

  addr = check_global_addr(tmp, state);
  if (addr) {
   if (iface) {
    *iface = tmp;
   }

   goto out;
  }
 }

out:
 k_mutex_unlock(&lock);

 return addr;
}

static uint8_t get_diff_ipv6(const struct in6_addr *src,
     const struct in6_addr *dst)
{
 return get_ipaddr_diff((const uint8_t *)src, (const uint8_t *)dst, 16);
}

static inline 
# 2620 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
             _Bool 
# 2620 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                  is_proper_ipv6_address(struct net_if_addr *addr)
{
 if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
     addr->address.family == 2 &&
     !net_ipv6_is_ll_addr(&addr->address.in6_addr)) {
  return 
# 2625 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        1
# 2625 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
 }

 return 
# 2628 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       0
# 2628 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
}

static struct in6_addr *net_if_ipv6_get_best_match(struct net_if *iface,
         const struct in6_addr *dst,
         uint8_t *best_so_far)
{
 struct net_if_ipv6 *ipv6 = iface->config.ip.ipv6;
 struct in6_addr *src = 
# 2636 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                       ((void *)0)
# 2636 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                           ;
 uint8_t len;
 int i;

 if (!ipv6) {
  return 
# 2641 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        ((void *)0)
# 2641 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
 }

 for (i = 0; i < 2; i++) {
  if (!is_proper_ipv6_address(&ipv6->unicast[i])) {
   continue;
  }

  len = get_diff_ipv6(dst, &ipv6->unicast[i].address.in6_addr);
  if (len >= *best_so_far) {



   if (ipv6->unicast[i].is_mesh_local && len < 64 &&
       !net_ipv6_is_addr_mcast_mesh(dst)) {
    continue;
   }

   *best_so_far = len;
   src = &ipv6->unicast[i].address.in6_addr;
  }
 }

 return src;
}

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
         const struct in6_addr *dst)
{
 const struct in6_addr *src = 
# 2670 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                             ((void *)0)
# 2670 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                 ;
 uint8_t best_match = 0U;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (!net_ipv6_is_ll_addr(dst) && !net_ipv6_is_addr_mcast_link(dst)) {

  if (dst_iface) {
   src = net_if_ipv6_get_best_match(dst_iface, dst,
        &best_match);
  } else {
   extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *iface = _net_if_list_start; ({ { }; iface < _net_if_list_end; }); iface++) {
    struct in6_addr *addr;

    addr = net_if_ipv6_get_best_match(iface, dst,
          &best_match);
    if (addr) {
     src = addr;
    }
   }
  }

 } else {
  if (dst_iface) {
   src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
  } else {
   extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *iface = _net_if_list_start; ({ { }; iface < _net_if_list_end; }); iface++) {
    struct in6_addr *addr;

    addr = net_if_ipv6_get_ll(iface,
         NET_ADDR_PREFERRED);
    if (addr) {
     src = addr;
     break;
    }
   }
  }
 }

 if (!src) {
  src = net_ipv6_unspecified_address();
  goto out;
 }

out:
 k_mutex_unlock(&lock);

 return src;
}

struct net_if *net_if_ipv6_select_src_iface(const struct in6_addr *dst)
{
 struct net_if *iface = 
# 2722 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                       ((void *)0)
# 2722 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                           ;
 const struct in6_addr *src;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 src = net_if_ipv6_select_src_addr(
# 2727 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                  ((void *)0)
# 2727 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                      , dst);
 if (src != net_ipv6_unspecified_address()) {
  net_if_ipv6_addr_lookup(src, &iface);
 }

 if (iface == 
# 2732 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
             ((void *)0)
# 2732 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                 ) {
  iface = net_if_get_default();
 }

 k_mutex_unlock(&lock);

 return iface;
}

uint32_t net_if_ipv6_calc_reachable_time(struct net_if_ipv6 *ipv6)
{
 uint32_t min_reachable, max_reachable;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 min_reachable = ((1) * ipv6->base_reachable_time)
   / (2);
 max_reachable = ((3) * ipv6->base_reachable_time)
   / (2);

 k_mutex_unlock(&lock);

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "min_reachable:%u max_reachable:%u" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), min_reachable, max_reachable); } while (
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((min_reachable) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((max_reachable) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
#pragma GCC diagnostic pop
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
, 0, "%s: " "(%s): " "min_reachable:%u max_reachable:%u", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), min_reachable, max_reachable); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0) 
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
!= 
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "min_reachable:%u max_reachable:%u"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0; double _d = _Generic(("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0, float : ("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "min_reachable:%u max_reachable:%u"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "min_reachable:%u max_reachable:%u"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((min_reachable) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((min_reachable) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((min_reachable) + 0))) > (1)) ? (_Generic((min_reachable) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((min_reachable) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (min_reachable) + 0; size_t _arg_size = _Generic((min_reachable), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((min_reachable) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (min_reachable) + 0; double _d = _Generic((min_reachable) + 0, float : (min_reachable) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (min_reachable) + 0; size_t _arg_size = _Generic((min_reachable), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((min_reachable) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((min_reachable) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = min_reachable; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((max_reachable) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((max_reachable) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((max_reachable) + 0))) > (1)) ? (_Generic((max_reachable) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((max_reachable) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (max_reachable) + 0; size_t _arg_size = _Generic((max_reachable), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((max_reachable) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (max_reachable) + 0; double _d = _Generic((max_reachable) + 0, float : (max_reachable) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (max_reachable) + 0; size_t _arg_size = _Generic((max_reachable), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((max_reachable) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((max_reachable) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = max_reachable; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
((__builtin_object_size(
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, __builtin_object_size(
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0)) : __memset_ichk(
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; }; if (_plen) { do {
#pragma GCC diagnostic push
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "min_reachable:%u max_reachable:%u"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0; double _d = _Generic(("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0, float : ("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "min_reachable:%u max_reachable:%u"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "min_reachable:%u max_reachable:%u") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "min_reachable:%u max_reachable:%u"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((min_reachable) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((min_reachable) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((min_reachable) + 0))) > (1)) ? (_Generic((min_reachable) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((min_reachable) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (min_reachable) + 0; size_t _arg_size = _Generic((min_reachable), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((min_reachable) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (min_reachable) + 0; double _d = _Generic((min_reachable) + 0, float : (min_reachable) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (min_reachable) + 0; size_t _arg_size = _Generic((min_reachable), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((min_reachable) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((min_reachable) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = min_reachable; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((max_reachable) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((max_reachable) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((max_reachable) + 0))) > (1)) ? (_Generic((max_reachable) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((max_reachable) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (max_reachable) + 0; size_t _arg_size = _Generic((max_reachable), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((max_reachable) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (max_reachable) + 0; double _d = _Generic((max_reachable) + 0, float : (max_reachable) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (max_reachable) + 0; size_t _arg_size = _Generic((max_reachable), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((max_reachable) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((max_reachable) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = max_reachable; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "min_reachable:%u max_reachable:%u", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), min_reachable, max_reachable); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "min_reachable:%u max_reachable:%u", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), min_reachable, max_reachable); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(min_reachable) , (log_arg_t)(max_reachable)}; log_n("%s: " "(%s): " "min_reachable:%u max_reachable:%u", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } } while (
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); } if (
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) { z_log_printf_arg_checker("(%s): " "min_reachable:%u max_reachable:%u", log_strdup(k_thread_name_get(k_current_get())), min_reachable, max_reachable); } } while (
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 2754 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)
                ;

 return min_reachable +
        sys_rand32_get() % (max_reachable - min_reachable);
}

static void iface_ipv6_start(struct net_if *iface)
{
 if (1) {
  net_if_start_dad(iface);
 } else {
  struct net_if_ipv6 *ipv6 
# 2766 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
                          __attribute__((__unused__)) 
# 2766 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                   = iface->config.ip.ipv6;

  join_mcast_nodes(iface,
     &ipv6->mcast[0].address.in6_addr);
 }

 net_if_start_rs(iface);
}

static void iface_ipv6_init(int if_count)
{
 int i;

 iface_ipv6_dad_init();
 iface_ipv6_nd_init();

 k_work_init_delayable(&address_lifetime_timer,
         address_lifetime_timeout);
 k_work_init_delayable(&prefix_lifetime_timer, prefix_lifetime_timeout);

 if (if_count > ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) {
  do { if (!(1 && ((2U <= 0) || ((0 == 
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (2U <= __log_level) && (2U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "You have %lu IPv6 net_if addresses but %d " "network interfaces" "\n", z_log_minimal_level_to_char(2U),((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0])))), if_count); } while (
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (2U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 2U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({

#pragma GCC diagnostic push
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((if_count) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 0) > 0);

#pragma GCC diagnostic pop
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 2U, (uint8_t *)
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "You have %lu IPv6 net_if addresses but %d " "network interfaces", ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0])))), if_count); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {

#pragma GCC diagnostic push
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0))) > (1)) ? (_Generic(("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0; size_t _arg_size = _Generic(("You have %lu IPv6 net_if addresses but %d " "network interfaces"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0; double _d = _Generic(("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0, float : ("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0; size_t _arg_size = _Generic(("You have %lu IPv6 net_if addresses but %d " "network interfaces"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "You have %lu IPv6 net_if addresses but %d " "network interfaces"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0))) > (1)) ? (_Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0; size_t _arg_size = _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0; double _d = _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0, float : (((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0; size_t _arg_size = _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0])))); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((if_count) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((if_count) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((if_count) + 0))) > (1)) ? (_Generic((if_count) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((if_count) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (if_count) + 0; size_t _arg_size = _Generic((if_count), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((if_count) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (if_count) + 0; double _d = _Generic((if_count) + 0, float : (if_count) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (if_count) + 0; size_t _arg_size = _Generic((if_count), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((if_count) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((if_count) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = if_count; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {

#pragma GCC diagnostic push
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0))) > (1)) ? (_Generic(("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0; size_t _arg_size = _Generic(("You have %lu IPv6 net_if addresses but %d " "network interfaces"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0; double _d = _Generic(("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0, float : ("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0; size_t _arg_size = _Generic(("You have %lu IPv6 net_if addresses but %d " "network interfaces"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("You have %lu IPv6 net_if addresses but %d " "network interfaces") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "You have %lu IPv6 net_if addresses but %d " "network interfaces"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0))) > (1)) ? (_Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0; size_t _arg_size = _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0; double _d = _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0, float : (((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0; size_t _arg_size = _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0])))); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((if_count) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((if_count) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((if_count) + 0))) > (1)) ? (_Generic((if_count) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((if_count) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (if_count) + 0; size_t _arg_size = _Generic((if_count), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((if_count) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (if_count) + 0; double _d = _Generic((if_count) + 0, float : (if_count) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (if_count) + 0; size_t _arg_size = _Generic((if_count), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((if_count) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((if_count) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = if_count; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 2U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 2U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "You have %lu IPv6 net_if addresses but %d " "network interfaces", ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0])))), if_count); } else if (1) { log_string_sync(src_level, "You have %lu IPv6 net_if addresses but %d " "network interfaces", ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0])))), if_count); } else { log_2("You have %lu IPv6 net_if addresses but %d " "network interfaces", (log_arg_t)(((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0]))))), (log_arg_t)(if_count), src_level); } } while (
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("You have %lu IPv6 net_if addresses but %d " "network interfaces", ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0])))), if_count); } } while (
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 2787 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )

             ;
  do { if (!(1 && ((2U <= 0) || ((0 == 
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (2U <= __log_level) && (2U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value." "\n", z_log_minimal_level_to_char(2U)); } while (
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (2U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 2U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = 0;
#pragma GCC diagnostic pop
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 2U, (uint8_t *)
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value."); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0))) > (1)) ? (_Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0; size_t _arg_size = _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0; double _d = _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0, float : ("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0; size_t _arg_size = _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value."; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
#pragma GCC diagnostic push
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0))) > (1)) ? (_Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0; size_t _arg_size = _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0; double _d = _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0, float : ("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0; size_t _arg_size = _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value."; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 2U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 2U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value."); } else if (1) { log_string_sync(src_level, "Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value."); } else { log_0("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value.", src_level); } } while (
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("Consider increasing CONFIG_NET_IF_MAX_IPV6_COUNT " "value."); } } while (
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 2790 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )
             ;
 }

 for (i = 0; i < ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv6_addresses), __typeof__(&(ipv6_addresses)[0])))]) - 1) + (sizeof(ipv6_addresses) / sizeof((ipv6_addresses)[0])))); i++) {
  ipv6_addresses[i].ipv6.hop_limit = 64;
  ipv6_addresses[i].ipv6.base_reachable_time = (1000U * 30);

  net_if_ipv6_set_reachable_time(&ipv6_addresses[i].ipv6);
 }
}
# 2839 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
int net_if_config_ipv4_get(struct net_if *iface, struct net_if_ipv4 **ipv4)
{
 int ret = 0;
 int i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (!net_if_flag_is_set(iface, NET_IF_IPV4)) {
  ret = -
# 2847 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
        134
# 2847 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
               ;
  goto out;
 }

 if (iface->config.ip.ipv4) {
  if (ipv4) {
   *ipv4 = iface->config.ip.ipv4;
  }

  goto out;
 }

 for (i = 0; i < ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0])))); i++) {
  if (ipv4_addresses[i].iface) {
   continue;
  }

  iface->config.ip.ipv4 = &ipv4_addresses[i].ipv4;
  ipv4_addresses[i].iface = iface;

  if (ipv4) {
   *ipv4 = &ipv4_addresses[i].ipv4;
  }

  goto out;
 }

 ret = -
# 2874 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
       3
# 2874 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
out:
 k_mutex_unlock(&lock);

 return ret;
}

int net_if_config_ipv4_put(struct net_if *iface)
{
 int ret = 0;
 int i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (!net_if_flag_is_set(iface, NET_IF_IPV4)) {
  ret = -
# 2889 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
        134
# 2889 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
               ;
  goto out;
 }

 if (!iface->config.ip.ipv4) {
  ret = -
# 2894 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
        120
# 2894 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                ;
  goto out;
 }

 for (i = 0; i < ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0])))); i++) {
  if (ipv4_addresses[i].iface != iface) {
   continue;
  }

  iface->config.ip.ipv4 = 
# 2903 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                         ((void *)0)
# 2903 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                             ;
  ipv4_addresses[i].iface = 
# 2904 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                           ((void *)0)
# 2904 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                               ;

  goto out;
 }

 ret = -
# 2909 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
       3
# 2909 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
out:
 k_mutex_unlock(&lock);

 return ret;
}

uint8_t net_if_ipv4_get_ttl(struct net_if *iface)
{

 int ret = 0;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (!iface->config.ip.ipv4) {
  goto out;
 }

 ret = iface->config.ip.ipv4->ttl;
out:
 k_mutex_unlock(&lock);

 return ret;





}

void net_if_ipv4_set_ttl(struct net_if *iface, uint8_t ttl)
{

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (!iface->config.ip.ipv4) {
  goto out;
 }

 iface->config.ip.ipv4->ttl = ttl;
out:
 k_mutex_unlock(&lock);




}

struct net_if_router *net_if_ipv4_router_lookup(struct net_if *iface,
      struct in_addr *addr)
{
 return iface_router_lookup(iface, 1, addr);
}

struct net_if_router *net_if_ipv4_router_find_default(struct net_if *iface,
            struct in_addr *addr)
{
 return iface_router_find_default(iface, 1, addr);
}

struct net_if_router *net_if_ipv4_router_add(struct net_if *iface,
          struct in_addr *addr,
          
# 2971 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
         _Bool 
# 2971 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
              is_default,
          uint16_t lifetime)
{
 return iface_router_add(iface, 1, addr, is_default, lifetime);
}


# 2977 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2977 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
    net_if_ipv4_router_rm(struct net_if_router *router)
{
 return iface_router_rm(router);
}


# 2982 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2982 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
    net_if_ipv4_addr_mask_cmp(struct net_if *iface,
          const struct in_addr *addr)
{
 
# 2985 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 2985 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
     ret = 
# 2985 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
           0
# 2985 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                ;
 struct net_if_ipv4 *ipv4;
 uint32_t subnet;
 int i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 ipv4 = iface->config.ip.ipv4;
 if (!ipv4) {
  goto out;
 }

 subnet = __extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s_addr)) __v; } *__p = (__typeof__(__p)) (&addr->s_addr); __p->__v; }) & ipv4->netmask.s_addr;

 for (i = 0; i < 1; i++) {
  if (!ipv4->unicast[i].is_used ||
      ipv4->unicast[i].address.family != 1) {
   continue;
  }

  if ((ipv4->unicast[i].address.in_addr.s_addr &
       ipv4->netmask.s_addr) == subnet) {
   ret = 
# 3007 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        1
# 3007 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
   goto out;
  }
 }

out:
 k_mutex_unlock(&lock);

 return ret;
}

static 
# 3018 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
      _Bool 
# 3018 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           ipv4_is_broadcast_address(struct net_if *iface,
          const struct in_addr *addr)
{
 struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;

 if (!ipv4) {
  return 
# 3024 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        0
# 3024 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
             ;
 }

 if (!net_if_ipv4_addr_mask_cmp(iface, addr)) {
  return 
# 3028 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        0
# 3028 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
             ;
 }

 if ((__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s_addr)) __v; } *__p = (__typeof__(__p)) (&addr->s_addr); __p->__v; }) & ~ipv4->netmask.s_addr) ==
     ~ipv4->netmask.s_addr) {
  return 
# 3033 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        1
# 3033 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
 }

 return 
# 3036 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       0
# 3036 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
}


# 3039 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 3039 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
    net_if_ipv4_is_addr_bcast(struct net_if *iface,
          const struct in_addr *addr)
{
 
# 3042 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 3042 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
     ret = 
# 3042 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
           0
# 3042 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                ;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (iface) {
  ret = ipv4_is_broadcast_address(iface, addr);
  goto out;
 }

 extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *iface = _net_if_list_start; ({ { }; iface < _net_if_list_end; }); iface++) {
  ret = ipv4_is_broadcast_address(iface, addr);
  if (ret) {
   goto out;
  }
 }

out:
 k_mutex_unlock(&lock);

 return ret;
}

struct net_if *net_if_ipv4_select_src_iface(const struct in_addr *dst)
{
 struct net_if *selected = 
# 3066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                          ((void *)0)
# 3066 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                              ;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *iface = _net_if_list_start; ({ { }; iface < _net_if_list_end; }); iface++) {
  
# 3071 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3071 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
      ret;

  ret = net_if_ipv4_addr_mask_cmp(iface, dst);
  if (ret) {
   selected = iface;
   goto out;
  }
 }

 if (selected == 
# 3080 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                ((void *)0)
# 3080 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                    ) {
  selected = net_if_get_default();
 }

out:
 k_mutex_unlock(&lock);

 return selected;
}

static uint8_t get_diff_ipv4(const struct in_addr *src,
     const struct in_addr *dst)
{
 return get_ipaddr_diff((const uint8_t *)src, (const uint8_t *)dst, 4);
}

static inline 
# 3096 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
             _Bool 
# 3096 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                  is_proper_ipv4_address(struct net_if_addr *addr)
{
 if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
     addr->address.family == 1 &&
     !net_ipv4_is_ll_addr(&addr->address.in_addr)) {
  return 
# 3101 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        1
# 3101 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
 }

 return 
# 3104 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       0
# 3104 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
}

static struct in_addr *net_if_ipv4_get_best_match(struct net_if *iface,
        const struct in_addr *dst,
        uint8_t *best_so_far)
{
 struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
 struct in_addr *src = 
# 3112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                      ((void *)0)
# 3112 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                          ;
 uint8_t len;
 int i;

 if (!ipv4) {
  return 
# 3117 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        ((void *)0)
# 3117 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
 }

 for (i = 0; i < 1; i++) {
  if (!is_proper_ipv4_address(&ipv4->unicast[i])) {
   continue;
  }

  len = get_diff_ipv4(dst, &ipv4->unicast[i].address.in_addr);
  if (len >= *best_so_far) {
   *best_so_far = len;
   src = &ipv4->unicast[i].address.in_addr;
  }
 }

 return src;
}

static struct in_addr *if_ipv4_get_addr(struct net_if *iface,
     enum net_addr_state addr_state, 
# 3136 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                    _Bool 
# 3136 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                         ll)
{
 struct in_addr *addr = 
# 3138 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                       ((void *)0)
# 3138 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                           ;
 struct net_if_ipv4 *ipv4;
 int i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (!iface) {
  goto out;
 }

 ipv4 = iface->config.ip.ipv4;
 if (!ipv4) {
  goto out;
 }

 for (i = 0; i < 1; i++) {
  if (!ipv4->unicast[i].is_used ||
      (addr_state != NET_ADDR_ANY_STATE &&
       ipv4->unicast[i].addr_state != addr_state) ||
      ipv4->unicast[i].address.family != 1) {
   continue;
  }

  if (net_ipv4_is_ll_addr(&ipv4->unicast[i].address.in_addr)) {
   if (!ll) {
    continue;
   }
  } else {
   if (ll) {
    continue;
   }
  }

  addr = &ipv4->unicast[i].address.in_addr;
  goto out;
 }

out:
 k_mutex_unlock(&lock);

 return addr;
}

struct in_addr *net_if_ipv4_get_ll(struct net_if *iface,
       enum net_addr_state addr_state)
{
 return if_ipv4_get_addr(iface, addr_state, 
# 3184 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                           1
# 3184 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                               );
}

struct in_addr *net_if_ipv4_get_global_addr(struct net_if *iface,
         enum net_addr_state addr_state)
{
 return if_ipv4_get_addr(iface, addr_state, 
# 3190 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                           0
# 3190 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                                );
}

const struct in_addr *net_if_ipv4_select_src_addr(struct net_if *dst_iface,
        const struct in_addr *dst)
{
 const struct in_addr *src = 
# 3196 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                            ((void *)0)
# 3196 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                ;
 uint8_t best_match = 0U;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (!net_ipv4_is_ll_addr(dst)) {


  if (dst_iface) {
   src = net_if_ipv4_get_best_match(dst_iface, dst,
        &best_match);
  } else {
   extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *iface = _net_if_list_start; ({ { }; iface < _net_if_list_end; }); iface++) {
    struct in_addr *addr;

    addr = net_if_ipv4_get_best_match(iface, dst,
          &best_match);
    if (addr) {
     src = addr;
    }
   }
  }

 } else {
  if (dst_iface) {
   src = net_if_ipv4_get_ll(dst_iface, NET_ADDR_PREFERRED);
  } else {
   extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *iface = _net_if_list_start; ({ { }; iface < _net_if_list_end; }); iface++) {
    struct in_addr *addr;

    addr = net_if_ipv4_get_ll(iface,
         NET_ADDR_PREFERRED);
    if (addr) {
     src = addr;
     break;
    }
   }
  }
 }

 if (!src) {
  src = net_if_ipv4_get_global_addr(dst_iface,
        NET_ADDR_PREFERRED);
  if (!src) {
   src = net_ipv4_unspecified_address();
  }

  goto out;
 }

out:
 k_mutex_unlock(&lock);

 return src;
}

struct net_if_addr *net_if_ipv4_addr_lookup(const struct in_addr *addr,
         struct net_if **ret)
{
 struct net_if_addr *ifaddr = 
# 3255 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                             ((void *)0)
# 3255 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                 ;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *iface = _net_if_list_start; ({ { }; iface < _net_if_list_end; }); iface++) {
  struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
  int i;

  if (!ipv4) {
   continue;
  }

  for (i = 0; i < 1; i++) {
   if (!ipv4->unicast[i].is_used ||
       ipv4->unicast[i].address.family != 1) {
    continue;
   }

   if (__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(&addr->s4_addr32[0])) __v; } *__p = (__typeof__(__p)) (&addr->s4_addr32[0]); __p->__v; }) ==
       ipv4->unicast[i].address.in_addr.s_addr) {

    if (ret) {
     *ret = iface;
    }

    ifaddr = &ipv4->unicast[i];
    goto out;
   }
  }
 }

out:
 k_mutex_unlock(&lock);

 return ifaddr;
}

int z_impl_net_if_ipv4_addr_lookup_by_index(const struct in_addr *addr)
{
 struct net_if_addr *if_addr;
 struct net_if *iface = 
# 3295 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                       ((void *)0)
# 3295 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                           ;

 if_addr = net_if_ipv4_addr_lookup(addr, &iface);
 if (!if_addr) {
  return 0;
 }

 return net_if_get_by_iface(iface);
}
# 3318 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
void net_if_ipv4_set_netmask(struct net_if *iface,
        const struct in_addr *netmask)
{
 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (net_if_config_ipv4_get(iface, 
# 3323 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                  ((void *)0)
# 3323 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                      ) < 0) {
  goto out;
 }

 if (!iface->config.ip.ipv4) {
  goto out;
 }

 do { struct __attribute__((__packed__)) { __typeof__(*&iface->config.ip.ipv4->netmask) __v; } *__p = (__typeof__(__p)) (&iface->config.ip.ipv4->netmask); __p->__v = (__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(netmask)) __v; } *__p = (__typeof__(__p)) (netmask); __p->__v; })); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 3331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 3331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (
# 3331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 3331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
);
out:
 k_mutex_unlock(&lock);
}


# 3336 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 3336 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
    z_impl_net_if_ipv4_set_netmask_by_index(int index,
          const struct in_addr *netmask)
{
 struct net_if *iface;

 iface = net_if_get_by_index(index);
 if (!iface) {
  return 
# 3343 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        0
# 3343 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
             ;
 }

 net_if_ipv4_set_netmask(iface, netmask);

 return 
# 3348 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       1
# 3348 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           ;
}
# 3372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
void net_if_ipv4_set_gw(struct net_if *iface, const struct in_addr *gw)
{
 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (net_if_config_ipv4_get(iface, 
# 3376 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                  ((void *)0)
# 3376 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                      ) < 0) {
  goto out;
 }

 if (!iface->config.ip.ipv4) {
  goto out;
 }

 do { struct __attribute__((__packed__)) { __typeof__(*&iface->config.ip.ipv4->gw) __v; } *__p = (__typeof__(__p)) (&iface->config.ip.ipv4->gw); __p->__v = (__extension__ ({ struct __attribute__((__packed__)) { __typeof__(*(gw)) __v; } *__p = (__typeof__(__p)) (gw); __p->__v; })); do { __asm__ __volatile__ ("" ::: "memory"); } while (
# 3384 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 3384 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (
# 3384 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 3384 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
);
out:
 k_mutex_unlock(&lock);
}


# 3389 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 3389 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
    z_impl_net_if_ipv4_set_gw_by_index(int index,
     const struct in_addr *gw)
{
 struct net_if *iface;

 iface = net_if_get_by_index(index);
 if (!iface) {
  return 
# 3396 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        0
# 3396 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
             ;
 }

 net_if_ipv4_set_gw(iface, gw);

 return 
# 3401 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       1
# 3401 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           ;
}
# 3424 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
static struct net_if_addr *ipv4_addr_find(struct net_if *iface,
       struct in_addr *addr)
{
 struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
 int i;

 for (i = 0; i < 1; i++) {
  if (!ipv4->unicast[i].is_used) {
   continue;
  }

  if (net_ipv4_addr_cmp(addr,
          &ipv4->unicast[i].address.in_addr)) {
   return &ipv4->unicast[i];
  }
 }

 return 
# 3441 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       ((void *)0)
# 3441 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           ;
}

struct net_if_addr *net_if_ipv4_addr_add(struct net_if *iface,
      struct in_addr *addr,
      enum net_addr_type addr_type,
      uint32_t vlifetime)
{
 struct net_if_addr *ifaddr = 
# 3449 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                             ((void *)0)
# 3449 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                 ;
 struct net_if_ipv4 *ipv4;
 int i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (net_if_config_ipv4_get(iface, &ipv4) < 0) {
  goto out;
 }

 ifaddr = ipv4_addr_find(iface, addr);
 if (ifaddr) {

  goto out;
 }

 for (i = 0; i < 1; i++) {
  struct net_if_addr *cur = &ipv4->unicast[i];

  if (addr_type == NET_ADDR_DHCP
      && cur->addr_type == NET_ADDR_OVERRIDABLE) {
   ifaddr = cur;
   break;
  }

  if (!ipv4->unicast[i].is_used) {
   ifaddr = cur;
   break;
  }
 }

 if (ifaddr) {
  ifaddr->is_used = 
# 3481 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                   1
# 3481 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                       ;
  ifaddr->address.family = 1;
  ifaddr->address.in_addr.s4_addr32[0] =
      addr->s4_addr32[0];
  ifaddr->addr_type = addr_type;


  if (vlifetime) {
   ifaddr->is_infinite = 
# 3489 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                        0
# 3489 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                             ;
  } else {
   ifaddr->is_infinite = 
# 3491 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                        1
# 3491 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                            ;
  }





  ifaddr->addr_state = NET_ADDR_PREFERRED;

  do { if (!(1 && ((4U <= 0) || ((0 == 
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "[%d] interface %p address %s type %s added" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(1, addr)), net_addr_type2str(addr_type)); } while (
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({

#pragma GCC diagnostic push
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((net_addr_type2str(addr_type)) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);

#pragma GCC diagnostic pop
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "[%d] interface %p address %s type %s added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(1, addr)), net_addr_type2str(addr_type)); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {

#pragma GCC diagnostic push
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0; double _d = _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, float : ("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "[%d] interface %p address %s type %s added"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((i) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) > (1)) ? (_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (i) + 0; double _d = _Generic((i) + 0, float : (i) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((i) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((i) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = i; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (log_strdup(net_sprint_addr(1, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(1, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((net_addr_type2str(addr_type)) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((net_addr_type2str(addr_type)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((net_addr_type2str(addr_type)) + 0))) > (1)) ? (_Generic((net_addr_type2str(addr_type)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((net_addr_type2str(addr_type)) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (net_addr_type2str(addr_type)) + 0; size_t _arg_size = _Generic((net_addr_type2str(addr_type)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((net_addr_type2str(addr_type)) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (net_addr_type2str(addr_type)) + 0; double _d = _Generic((net_addr_type2str(addr_type)) + 0, float : (net_addr_type2str(addr_type)) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (net_addr_type2str(addr_type)) + 0; size_t _arg_size = _Generic((net_addr_type2str(addr_type)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((net_addr_type2str(addr_type)) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((net_addr_type2str(addr_type)) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = net_addr_type2str(addr_type); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {

#pragma GCC diagnostic push
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0; double _d = _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, float : ("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "[%d] interface %p address %s type %s added") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "[%d] interface %p address %s type %s added"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((i) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) > (1)) ? (_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (i) + 0; double _d = _Generic((i) + 0, float : (i) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((i) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((i) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = i; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (log_strdup(net_sprint_addr(1, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(1, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((net_addr_type2str(addr_type)) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((net_addr_type2str(addr_type)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((net_addr_type2str(addr_type)) + 0))) > (1)) ? (_Generic((net_addr_type2str(addr_type)) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((net_addr_type2str(addr_type)) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (net_addr_type2str(addr_type)) + 0; size_t _arg_size = _Generic((net_addr_type2str(addr_type)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((net_addr_type2str(addr_type)) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (net_addr_type2str(addr_type)) + 0; double _d = _Generic((net_addr_type2str(addr_type)) + 0, float : (net_addr_type2str(addr_type)) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (net_addr_type2str(addr_type)) + 0; size_t _arg_size = _Generic((net_addr_type2str(addr_type)), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((net_addr_type2str(addr_type)) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((net_addr_type2str(addr_type)) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = net_addr_type2str(addr_type); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "[%d] interface %p address %s type %s added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(1, addr)), net_addr_type2str(addr_type)); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "[%d] interface %p address %s type %s added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(1, addr)), net_addr_type2str(addr_type)); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(i) , (log_arg_t)(iface) , (log_arg_t)(log_strdup(net_sprint_addr(1, addr))) , (log_arg_t)(net_addr_type2str(addr_type))}; log_n("%s: " "(%s): " "[%d] interface %p address %s type %s added", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } } while (
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "[%d] interface %p address %s type %s added", log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(1, addr)), net_addr_type2str(addr_type)); } } while (
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3500 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )

                                ;

  net_mgmt_event_notify_with_info((((1UL << (31)) | (1UL << (30)) | (2 << 28) | (0x004 << 16)) | NET_EVENT_IPV4_CMD_ADDR_ADD), iface,
      &ifaddr->address.in_addr,
      sizeof(struct in_addr));
  goto out;
 }

out:
 k_mutex_unlock(&lock);

 return ifaddr;
}


# 3516 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 3516 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
    net_if_ipv4_addr_rm(struct net_if *iface, const struct in_addr *addr)
{
 struct net_if_ipv4 *ipv4;
 
# 3519 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 3519 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
     ret = 
# 3519 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
           0
# 3519 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                ;
 int i;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 ipv4 = iface->config.ip.ipv4;
 if (!ipv4) {
  goto out;
 }

 for (i = 0; i < 1; i++) {
  if (!ipv4->unicast[i].is_used) {
   continue;
  }

  if (!net_ipv4_addr_cmp(&ipv4->unicast[i].address.in_addr,
           addr)) {
   continue;
  }

  ipv4->unicast[i].is_used = 
# 3539 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                            0
# 3539 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                 ;

  do { if (!(1 && ((4U <= 0) || ((0 == 
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "[%d] interface %p address %s removed" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(1, addr))); } while (
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
#pragma GCC diagnostic pop
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "[%d] interface %p address %s removed", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(1, addr))); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s removed") + 0; double _d = _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, float : ("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "[%d] interface %p address %s removed"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((i) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) > (1)) ? (_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (i) + 0; double _d = _Generic((i) + 0, float : (i) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((i) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((i) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = i; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (log_strdup(net_sprint_addr(1, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(1, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
#pragma GCC diagnostic push
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s removed") + 0; double _d = _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, float : ("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "[%d] interface %p address %s removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "[%d] interface %p address %s removed") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "[%d] interface %p address %s removed"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((i) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) > (1)) ? (_Generic((i) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((i) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((i) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (i) + 0; double _d = _Generic((i) + 0, float : (i) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (i) + 0; size_t _arg_size = _Generic((i), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((i) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((i) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = i; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (log_strdup(net_sprint_addr(1, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(1, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "[%d] interface %p address %s removed", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(1, addr))); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "[%d] interface %p address %s removed", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(1, addr))); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(i) , (log_arg_t)(iface) , (log_arg_t)(log_strdup(net_sprint_addr(1, addr)))}; log_n("%s: " "(%s): " "[%d] interface %p address %s removed", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } } while (
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "[%d] interface %p address %s removed", log_strdup(k_thread_name_get(k_current_get())), i, iface, log_strdup(net_sprint_addr(1, addr))); } } while (
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3541 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )
                                                    ;

  net_mgmt_event_notify_with_info(
   (((1UL << (31)) | (1UL << (30)) | (2 << 28) | (0x004 << 16)) | NET_EVENT_IPV4_CMD_ADDR_DEL), iface,
   &ipv4->unicast[i].address.in_addr,
   sizeof(struct in_addr));

  ret = 
# 3549 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       1
# 3549 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           ;
  goto out;
 }

out:
 k_mutex_unlock(&lock);

 return ret;
}


# 3559 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 3559 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
    z_impl_net_if_ipv4_addr_add_by_index(int index,
       struct in_addr *addr,
       enum net_addr_type addr_type,
       uint32_t vlifetime)
{
 struct net_if *iface;
 struct net_if_addr *if_addr;

 iface = net_if_get_by_index(index);
 if (!iface) {
  return 
# 3569 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        0
# 3569 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
             ;
 }

 if_addr = net_if_ipv4_addr_add(iface, addr, addr_type, vlifetime);
 return if_addr ? 
# 3573 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                 1 
# 3573 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                      : 
# 3573 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                        0
# 3573 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                             ;
}
# 3601 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 3601 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 3601 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
    z_impl_net_if_ipv4_addr_rm_by_index(int index,
      const struct in_addr *addr)
{
 struct net_if *iface;

 iface = net_if_get_by_index(index);
 if (!iface) {
  return 
# 3608 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        0
# 3608 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
             ;
 }

 return net_if_ipv4_addr_rm(iface, addr);
}
# 3634 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
static struct net_if_mcast_addr *ipv4_maddr_find(struct net_if *iface,
       
# 3635 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
      _Bool 
# 3635 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           is_used,
       const struct in_addr *addr)
{
 struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
 int i;

 if (!ipv4) {
  return 
# 3642 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        ((void *)0)
# 3642 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
 }

 for (i = 0; i < 1; i++) {
  if ((is_used && !ipv4->mcast[i].is_used) ||
      (!is_used && ipv4->mcast[i].is_used)) {
   continue;
  }

  if (addr) {
   if (!net_ipv4_addr_cmp(&ipv4->mcast[i].address.in_addr,
            addr)) {
    continue;
   }
  }

  return &ipv4->mcast[i];
 }

 return 
# 3661 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       ((void *)0)
# 3661 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           ;
}
struct net_if_mcast_addr *net_if_ipv4_maddr_add(struct net_if *iface,
      const struct in_addr *addr)
{
 struct net_if_mcast_addr *maddr = 
# 3666 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                  ((void *)0)
# 3666 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                      ;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (net_if_config_ipv4_get(iface, 
# 3670 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                  ((void *)0)
# 3670 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                      ) < 0) {
  goto out;
 }

 if (!net_ipv4_is_addr_mcast(addr)) {
  do { if (!(1 && ((4U <= 0) || ((0 == 
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "Address %s is not a multicast address." "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(1, addr))); } while (
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
#pragma GCC diagnostic pop
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "Address %s is not a multicast address.", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(1, addr))); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Address %s is not a multicast address.") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Address %s is not a multicast address.") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Address %s is not a multicast address.") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Address %s is not a multicast address."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Address %s is not a multicast address.") + 0; double _d = _Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, float : ("%s: " "(%s): " "Address %s is not a multicast address.") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Address %s is not a multicast address.") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Address %s is not a multicast address."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Address %s is not a multicast address."; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (log_strdup(net_sprint_addr(1, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(1, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
#pragma GCC diagnostic push
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Address %s is not a multicast address.") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Address %s is not a multicast address.") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Address %s is not a multicast address.") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Address %s is not a multicast address."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Address %s is not a multicast address.") + 0; double _d = _Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, float : ("%s: " "(%s): " "Address %s is not a multicast address.") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Address %s is not a multicast address.") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Address %s is not a multicast address."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Address %s is not a multicast address.") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Address %s is not a multicast address."; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (log_strdup(net_sprint_addr(1, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(1, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "Address %s is not a multicast address.", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(1, addr))); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "Address %s is not a multicast address.", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(1, addr))); } else { log_3("%s: " "(%s): " "Address %s is not a multicast address.", (log_arg_t)((const char *)__func__), (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))), (log_arg_t)(log_strdup(net_sprint_addr(1, addr))), src_level); } } while (
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "Address %s is not a multicast address.", log_strdup(k_thread_name_get(k_current_get())), log_strdup(net_sprint_addr(1, addr))); } } while (
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3675 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )
                                          ;
  goto out;
 }

 maddr = ipv4_maddr_find(iface, 
# 3680 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                               0
# 3680 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                    , 
# 3680 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                      ((void *)0)
# 3680 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                          );
 if (maddr) {
  maddr->is_used = 
# 3682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                  1
# 3682 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                      ;
  maddr->address.family = 1;
  maddr->address.in_addr.s4_addr32[0] = addr->s4_addr32[0];

  do { if (!(1 && ((4U <= 0) || ((0 == 
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "interface %p address %s added" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(1, addr))); } while (
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
#pragma GCC diagnostic pop
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "interface %p address %s added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(1, addr))); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "interface %p address %s added") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "interface %p address %s added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "interface %p address %s added") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "interface %p address %s added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "interface %p address %s added") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "interface %p address %s added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "interface %p address %s added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "interface %p address %s added") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "interface %p address %s added") + 0; double _d = _Generic(("%s: " "(%s): " "interface %p address %s added") + 0, float : ("%s: " "(%s): " "interface %p address %s added") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "interface %p address %s added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "interface %p address %s added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "interface %p address %s added") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "interface %p address %s added") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "interface %p address %s added"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (log_strdup(net_sprint_addr(1, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(1, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
#pragma GCC diagnostic push
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "interface %p address %s added") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "interface %p address %s added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "interface %p address %s added") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "interface %p address %s added") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "interface %p address %s added") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "interface %p address %s added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "interface %p address %s added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "interface %p address %s added") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "interface %p address %s added") + 0; double _d = _Generic(("%s: " "(%s): " "interface %p address %s added") + 0, float : ("%s: " "(%s): " "interface %p address %s added") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "interface %p address %s added") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "interface %p address %s added"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "interface %p address %s added") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "interface %p address %s added") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "interface %p address %s added"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (log_strdup(net_sprint_addr(1, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(1, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "interface %p address %s added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(1, addr))); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "interface %p address %s added", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(1, addr))); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(iface) , (log_arg_t)(log_strdup(net_sprint_addr(1, addr)))}; log_n("%s: " "(%s): " "interface %p address %s added", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } } while (
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "interface %p address %s added", log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(1, addr))); } } while (
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3686 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )
                                          ;

  net_mgmt_event_notify_with_info(
   (((1UL << (31)) | (1UL << (30)) | (2 << 28) | (0x004 << 16)) | NET_EVENT_IPV4_CMD_MADDR_ADD), iface,
   &maddr->address.in_addr,
   sizeof(struct in_addr));
 }

out:
 k_mutex_unlock(&lock);

 return maddr;
}


# 3701 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 3701 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
    net_if_ipv4_maddr_rm(struct net_if *iface, const struct in_addr *addr)
{
 struct net_if_mcast_addr *maddr;
 
# 3704 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 3704 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
     ret = 
# 3704 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
           0
# 3704 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                ;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 maddr = ipv4_maddr_find(iface, 
# 3708 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                               1
# 3708 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                   , addr);
 if (maddr) {
  maddr->is_used = 
# 3710 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                  0
# 3710 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                       ;

  do { if (!(1 && ((4U <= 0) || ((0 == 
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "interface %p address %s removed" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(1, addr))); } while (
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
#pragma GCC diagnostic pop
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "%s: " "(%s): " "interface %p address %s removed", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(1, addr))); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "interface %p address %s removed") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "interface %p address %s removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "interface %p address %s removed") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "interface %p address %s removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "interface %p address %s removed") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "interface %p address %s removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "interface %p address %s removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "interface %p address %s removed") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "interface %p address %s removed") + 0; double _d = _Generic(("%s: " "(%s): " "interface %p address %s removed") + 0, float : ("%s: " "(%s): " "interface %p address %s removed") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "interface %p address %s removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "interface %p address %s removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "interface %p address %s removed") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "interface %p address %s removed") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "interface %p address %s removed"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (log_strdup(net_sprint_addr(1, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(1, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
#pragma GCC diagnostic push
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "interface %p address %s removed") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "interface %p address %s removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "interface %p address %s removed") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "interface %p address %s removed") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "interface %p address %s removed") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "interface %p address %s removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "interface %p address %s removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "interface %p address %s removed") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "interface %p address %s removed") + 0; double _d = _Generic(("%s: " "(%s): " "interface %p address %s removed") + 0, float : ("%s: " "(%s): " "interface %p address %s removed") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "interface %p address %s removed") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "interface %p address %s removed"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "interface %p address %s removed") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "interface %p address %s removed") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "interface %p address %s removed"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) > (1)) ? (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(net_sprint_addr(1, addr))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; double _d = _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : (log_strdup(net_sprint_addr(1, addr))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(net_sprint_addr(1, addr))) + 0; size_t _arg_size = _Generic((log_strdup(net_sprint_addr(1, addr))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(net_sprint_addr(1, addr))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(net_sprint_addr(1, addr))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(net_sprint_addr(1, addr)); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "interface %p address %s removed", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(1, addr))); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "interface %p address %s removed", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(1, addr))); } else { do { log_arg_t args[] = {(log_arg_t)((const char *)__func__) , (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))) , (log_arg_t)(iface) , (log_arg_t)(log_strdup(net_sprint_addr(1, addr)))}; log_n("%s: " "(%s): " "interface %p address %s removed", args, ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(args), __typeof__(&(args)[0])))]) - 1) + (sizeof(args) / sizeof((args)[0])))), src_level); } while (
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } } while (
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("(%s): " "interface %p address %s removed", log_strdup(k_thread_name_get(k_current_get())), iface, log_strdup(net_sprint_addr(1, addr))); } } while (
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3712 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )
                                                 ;

  net_mgmt_event_notify_with_info(
   (((1UL << (31)) | (1UL << (30)) | (2 << 28) | (0x004 << 16)) | NET_EVENT_IPV4_CMD_MADDR_DEL), iface,
   &maddr->address.in_addr,
   sizeof(struct in_addr));

  ret = 
# 3720 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       1
# 3720 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           ;
 }

 k_mutex_unlock(&lock);

 return ret;
}

struct net_if_mcast_addr *net_if_ipv4_maddr_lookup(const struct in_addr *maddr,
         struct net_if **ret)
{
 struct net_if_mcast_addr *addr = 
# 3731 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                 ((void *)0)
# 3731 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                     ;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *iface = _net_if_list_start; ({ { }; iface < _net_if_list_end; }); iface++) {
  if (ret && *ret && iface != *ret) {
   continue;
  }

  addr = ipv4_maddr_find(iface, 
# 3740 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                               1
# 3740 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                   , maddr);
  if (addr) {
   if (ret) {
    *ret = iface;
   }

   goto out;
  }
 }

out:
 k_mutex_unlock(&lock);

 return addr;
}

void net_if_ipv4_maddr_leave(struct net_if_mcast_addr *addr)
{
 { };

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 addr->is_joined = 
# 3762 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                  0
# 3762 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                       ;

 k_mutex_unlock(&lock);
}

void net_if_ipv4_maddr_join(struct net_if_mcast_addr *addr)
{
 { };

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 addr->is_joined = 
# 3773 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                  1
# 3773 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                      ;

 k_mutex_unlock(&lock);
}

static void iface_ipv4_init(int if_count)
{
 int i;

 if (if_count > ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) {
  do { if (!(1 && ((2U <= 0) || ((0 == 
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (2U <= __log_level) && (2U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "You have %lu IPv4 net_if addresses but %d " "network interfaces" "\n", z_log_minimal_level_to_char(2U),((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0])))), if_count); } while (
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (2U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 2U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({

#pragma GCC diagnostic push
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = (((_Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((if_count) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 0) > 0);

#pragma GCC diagnostic pop
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 2U, (uint8_t *)
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "You have %lu IPv4 net_if addresses but %d " "network interfaces", ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0])))), if_count); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {

#pragma GCC diagnostic push
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0))) > (1)) ? (_Generic(("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0; size_t _arg_size = _Generic(("You have %lu IPv4 net_if addresses but %d " "network interfaces"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0; double _d = _Generic(("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0, float : ("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0; size_t _arg_size = _Generic(("You have %lu IPv4 net_if addresses but %d " "network interfaces"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "You have %lu IPv4 net_if addresses but %d " "network interfaces"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0))) > (1)) ? (_Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0; size_t _arg_size = _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0; double _d = _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0, float : (((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0; size_t _arg_size = _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0])))); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((if_count) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((if_count) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((if_count) + 0))) > (1)) ? (_Generic((if_count) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((if_count) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (if_count) + 0; size_t _arg_size = _Generic((if_count), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((if_count) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (if_count) + 0; double _d = _Generic((if_count) + 0, float : (if_count) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (if_count) + 0; size_t _arg_size = _Generic((if_count), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((if_count) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((if_count) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = if_count; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {

#pragma GCC diagnostic push
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 

#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0))) > (1)) ? (_Generic(("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0; size_t _arg_size = _Generic(("You have %lu IPv4 net_if addresses but %d " "network interfaces"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0; double _d = _Generic(("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0, float : ("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0; size_t _arg_size = _Generic(("You have %lu IPv4 net_if addresses but %d " "network interfaces"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("You have %lu IPv4 net_if addresses but %d " "network interfaces") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "You have %lu IPv4 net_if addresses but %d " "network interfaces"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0))) > (1)) ? (_Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0; size_t _arg_size = _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0; double _d = _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0, float : (((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0; size_t _arg_size = _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0])))); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((if_count) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((if_count) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((if_count) + 0))) > (1)) ? (_Generic((if_count) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((if_count) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (if_count) + 0; size_t _arg_size = _Generic((if_count), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((if_count) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (if_count) + 0; double _d = _Generic((if_count) + 0, float : (if_count) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (if_count) + 0; size_t _arg_size = _Generic((if_count), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((if_count) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((if_count) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = if_count; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }

#pragma GCC diagnostic pop
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 2U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 2U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "You have %lu IPv4 net_if addresses but %d " "network interfaces", ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0])))), if_count); } else if (1) { log_string_sync(src_level, "You have %lu IPv4 net_if addresses but %d " "network interfaces", ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0])))), if_count); } else { log_2("You have %lu IPv4 net_if addresses but %d " "network interfaces", (log_arg_t)(((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0]))))), (log_arg_t)(if_count), src_level); } } while (
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("You have %lu IPv4 net_if addresses but %d " "network interfaces", ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0])))), if_count); } } while (
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3783 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )

             ;
  do { if (!(1 && ((2U <= 0) || ((0 == 
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (2U <= __log_level) && (2U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value." "\n", z_log_minimal_level_to_char(2U)); } while (
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (2U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 2U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
#pragma GCC diagnostic push
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = 0;
#pragma GCC diagnostic pop
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 2U, (uint8_t *)
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value."); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
#pragma GCC diagnostic push
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0))) > (1)) ? (_Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0; size_t _arg_size = _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0; double _d = _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0, float : ("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0; size_t _arg_size = _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value."; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
#pragma GCC diagnostic push
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0))) > (1)) ? (_Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0; size_t _arg_size = _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0; double _d = _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0, float : ("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0; size_t _arg_size = _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value."), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value."; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
#pragma GCC diagnostic pop
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 2U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 2U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value."); } else if (1) { log_string_sync(src_level, "Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value."); } else { log_0("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value.", src_level); } } while (
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("Consider increasing CONFIG_NET_IF_MAX_IPV4_COUNT " "value."); } } while (
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 3786 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 )
             ;
 }

 for (i = 0; i < ((long) (((int) sizeof(char[1 - 2 * !(!__builtin_types_compatible_p(__typeof__(ipv4_addresses), __typeof__(&(ipv4_addresses)[0])))]) - 1) + (sizeof(ipv4_addresses) / sizeof((ipv4_addresses)[0])))); i++) {
  ipv4_addresses[i].ipv4.ttl = 64;
 }
}

static void leave_ipv4_mcast_all(struct net_if *iface)
{
 struct net_if_ipv4 *ipv4 = iface->config.ip.ipv4;
 int i;

 if (!ipv4) {
  return;
 }

 for (i = 0; i < 1; i++) {
  if (!ipv4->mcast[i].is_used ||
      !ipv4->mcast[i].is_joined) {
   continue;
  }

  net_ipv4_igmp_leave(iface, &ipv4->mcast[i].address.in_addr);
 }
}
# 3846 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
struct net_if *net_if_select_src_iface(const struct sockaddr *dst)
{
 struct net_if *iface = 
# 3848 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                       ((void *)0)
# 3848 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                           ;

 if (!dst) {
  goto out;
 }

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (1 && dst->sa_family == 2) {
  iface = net_if_ipv6_select_src_iface(&net_sin6(dst)->sin6_addr);
  goto out;
 }

 if (1 && dst->sa_family == 1) {
  iface = net_if_ipv4_select_src_iface(&net_sin(dst)->sin_addr);
  goto out;
 }

out:
 k_mutex_unlock(&lock);

 if (iface == 
# 3869 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
             ((void *)0)
# 3869 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                 ) {
  iface = net_if_get_default();
 }

 return iface;
}

enum net_verdict net_if_recv_data(struct net_if *iface, struct net_pkt *pkt)
{
 if (0 &&
     net_if_is_promisc(iface)) {
# 3890 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  enum net_verdict verdict;
  struct net_pkt *new_pkt;



  net_pkt_ref(pkt);

  verdict = net_if_l2(iface)->recv(iface, pkt);
  if (verdict == NET_CONTINUE) {
   new_pkt = net_pkt_clone(pkt, ((k_timeout_t) {0}));
  } else {
   new_pkt = net_pkt_ref(pkt);
  }




  net_pkt_cursor_init(new_pkt);

  if (net_promisc_mode_input(new_pkt) == NET_DROP) {
   net_pkt_unref(new_pkt);
  }

  net_pkt_unref(pkt);

  return verdict;
 }

 return net_if_l2(iface)->recv(iface, pkt);
}

void net_if_register_link_cb(struct net_if_link_cb *link,
        net_if_link_callback_t cb)
{
 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 sys_slist_find_and_remove(&link_callbacks, &link->node);
 sys_slist_prepend(&link_callbacks, &link->node);

 link->cb = cb;

 k_mutex_unlock(&lock);
}

void net_if_unregister_link_cb(struct net_if_link_cb *link)
{
 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 sys_slist_find_and_remove(&link_callbacks, &link->node);

 k_mutex_unlock(&lock);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
    int status)
{
 struct net_if_link_cb *link, *tmp;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 for (link = ((sys_slist_peek_head(&link_callbacks)) ? ((__typeof__(*(link)) *)(((char *)((sys_slist_peek_head(&link_callbacks)))) - 
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(link))
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
node
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
), tmp = ((link) ? ((sys_slist_peek_next(&((link)->node))) ? ((__typeof__(*(link)) *)(((char *)((sys_slist_peek_next(&((link)->node))))) - 
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(link))
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
node
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) : 
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); link != 
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; link = tmp, tmp = ((link) ? ((sys_slist_peek_next(&((link)->node))) ? ((__typeof__(*(link)) *)(((char *)((sys_slist_peek_next(&((link)->node))))) - 
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
__builtin_offsetof (
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
__typeof__(*(link))
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
, 
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
node
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
)
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) : 
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) : 
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 3950 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
)) {
  link->cb(iface, lladdr, status);
 }

 k_mutex_unlock(&lock);
}

static 
# 3957 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
      _Bool 
# 3957 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
           need_calc_checksum(struct net_if *iface, enum ethernet_hw_caps caps)
{

 if (net_if_l2(iface) != &_net_l2_ETHERNET) {
  return 
# 3961 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        1
# 3961 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            ;
 }

 return !(net_eth_get_hw_capabilities(iface) & caps);






}


# 3973 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 3973 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
    net_if_need_calc_tx_checksum(struct net_if *iface)
{
 return need_calc_checksum(iface, ETHERNET_HW_TX_CHKSUM_OFFLOAD);
}


# 3978 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 3978 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
    net_if_need_calc_rx_checksum(struct net_if *iface)
{
 return need_calc_checksum(iface, ETHERNET_HW_RX_CHKSUM_OFFLOAD);
}

int net_if_get_by_iface(struct net_if *iface)
{
 if (!(iface >= _net_if_list_start && iface < _net_if_list_end)) {
  return -1;
 }

 return (iface - _net_if_list_start) + 1;
}

void net_if_foreach(net_if_cb_t cb, void *user_data)
{
 extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *iface = _net_if_list_start; ({ { }; iface < _net_if_list_end; }); iface++) {
  cb(iface, user_data);
 }
}

int net_if_up(struct net_if *iface)
{
 int status = 0;

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "iface %p" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), iface); } while (
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
, 0, "%s: " "(%s): " "iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0) 
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
!= 
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "iface %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "iface %p") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "iface %p") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "iface %p") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "iface %p") + 0; double _d = _Generic(("%s: " "(%s): " "iface %p") + 0, float : ("%s: " "(%s): " "iface %p") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "iface %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "iface %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "iface %p"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
((__builtin_object_size(
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, __builtin_object_size(
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0)) : __memset_ichk(
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; }; if (_plen) { do {
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "iface %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "iface %p") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "iface %p") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "iface %p") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "iface %p") + 0; double _d = _Generic(("%s: " "(%s): " "iface %p") + 0, float : ("%s: " "(%s): " "iface %p") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "iface %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "iface %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "iface %p"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); } else { log_3("%s: " "(%s): " "iface %p", (log_arg_t)((const char *)__func__), (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))), (log_arg_t)(iface), src_level); } } while (
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); } if (
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) { z_log_printf_arg_checker("(%s): " "iface %p", log_strdup(k_thread_name_get(k_current_get())), iface); } } while (
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4003 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
);

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 if (net_if_flag_is_set(iface, NET_IF_UP)) {
  status = -
# 4008 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
           120
# 4008 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                   ;
  goto out;
 }

 if ((0 &&
      net_if_is_ip_offloaded(iface)) ||
     (0 &&
      net_if_is_socket_offloaded(iface))) {
  net_if_flag_set(iface, NET_IF_UP);
  goto notify;
 }


 if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
  goto done;
 }


 status = net_if_l2(iface)->enable(iface, 
# 4026 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                         1
# 4026 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                             );
 if (status < 0) {
  goto out;
 }

done:
# 4041 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 {
  { };
 }

 net_if_flag_set(iface, NET_IF_UP);




 if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
  iface_ipv6_start(iface);

  ;
 }

notify:
 net_mgmt_event_notify((((1UL << (31)) | (1UL << (30)) | (1 << 28) | (0x001 << 16)) | NET_EVENT_IF_CMD_UP), iface);

out:
 k_mutex_unlock(&lock);

 return status;
}

void net_if_carrier_down(struct net_if *iface)
{
 do { if (!(1 && ((4U <= 0) || ((0 == 
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "iface %p" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), iface); } while (
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
, 0, "%s: " "(%s): " "iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0) 
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
!= 
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "iface %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "iface %p") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "iface %p") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "iface %p") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "iface %p") + 0; double _d = _Generic(("%s: " "(%s): " "iface %p") + 0, float : ("%s: " "(%s): " "iface %p") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "iface %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "iface %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "iface %p"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
((__builtin_object_size(
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, __builtin_object_size(
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0)) : __memset_ichk(
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; }; if (_plen) { do {
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "iface %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "iface %p") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "iface %p") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "iface %p") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "iface %p") + 0; double _d = _Generic(("%s: " "(%s): " "iface %p") + 0, float : ("%s: " "(%s): " "iface %p") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "iface %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "iface %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "iface %p"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); } else { log_3("%s: " "(%s): " "iface %p", (log_arg_t)((const char *)__func__), (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))), (log_arg_t)(iface), src_level); } } while (
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); } if (
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) { z_log_printf_arg_checker("(%s): " "iface %p", log_strdup(k_thread_name_get(k_current_get())), iface); } } while (
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4067 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
);

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 net_if_flag_clear(iface, NET_IF_UP);

 ;

 net_mgmt_event_notify((((1UL << (31)) | (1UL << (30)) | (1 << 28) | (0x001 << 16)) | NET_EVENT_IF_CMD_DOWN), iface);

 k_mutex_unlock(&lock);
}

int net_if_down(struct net_if *iface)
{
 int status = 0;

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "iface %p" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get())), iface); } while (
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
, 0, "%s: " "(%s): " "iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0) 
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
!= 
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "iface %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "iface %p") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "iface %p") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "iface %p") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "iface %p") + 0; double _d = _Generic(("%s: " "(%s): " "iface %p") + 0, float : ("%s: " "(%s): " "iface %p") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "iface %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "iface %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "iface %p"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
((__builtin_object_size(
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, __builtin_object_size(
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0)) : __memset_ichk(
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; }; if (_plen) { do {
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "iface %p") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "iface %p") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "iface %p") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "iface %p") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "iface %p") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "iface %p") + 0; double _d = _Generic(("%s: " "(%s): " "iface %p") + 0, float : ("%s: " "(%s): " "iface %p") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "iface %p") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "iface %p"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "iface %p") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "iface %p") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "iface %p"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((iface) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) > (1)) ? (_Generic((iface) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((iface) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((iface) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (iface) + 0; double _d = _Generic((iface) + 0, float : (iface) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (iface) + 0; size_t _arg_size = _Generic((iface), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((iface) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((iface) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = iface; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "iface %p", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get())), iface); } else { log_3("%s: " "(%s): " "iface %p", (log_arg_t)((const char *)__func__), (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))), (log_arg_t)(iface), src_level); } } while (
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); } if (
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) { z_log_printf_arg_checker("(%s): " "iface %p", log_strdup(k_thread_name_get(k_current_get())), iface); } } while (
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4084 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
);

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 leave_mcast_all(iface);
 leave_ipv4_mcast_all(iface);

 if (net_if_is_ip_offloaded(iface)) {
  goto done;
 }


 if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
  goto done;
 }


 status = net_if_l2(iface)->enable(iface, 
# 4101 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                         0
# 4101 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                              );
 if (status < 0) {
  goto out;
 }

 net_virtual_disable(iface);

done:
 net_if_flag_clear(iface, NET_IF_UP);

 net_mgmt_event_notify((((1UL << (31)) | (1UL << (30)) | (1 << 28) | (0x001 << 16)) | NET_EVENT_IF_CMD_DOWN), iface);

out:
 k_mutex_unlock(&lock);

 return status;
}

static int promisc_mode_set(struct net_if *iface, 
# 4119 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                                                 _Bool 
# 4119 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                                      enable)
{
 enum net_l2_flags l2_flags = 0;

 { };

 l2_flags = l2_flags_get(iface);
 if (!(l2_flags & NET_L2_PROMISC_MODE)) {
  return -
# 4127 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
         134
# 4127 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                ;
 }


 if (net_if_l2(iface) == &_net_l2_ETHERNET) {
  int ret = net_eth_promisc_mode(iface, enable);

  if (ret < 0) {
   return ret;
  }
 }






 return 0;
}

int net_if_set_promisc(struct net_if *iface)
{
 int ret;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 ret = promisc_mode_set(iface, 
# 4153 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                              1
# 4153 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                  );
 if (ret < 0) {
  goto out;
 }

 ret = net_if_flag_test_and_set(iface, NET_IF_PROMISC);
 if (ret) {
  ret = -
# 4160 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
        120
# 4160 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                ;
  goto out;
 }

out:
 k_mutex_unlock(&lock);

 return ret;
}

void net_if_unset_promisc(struct net_if *iface)
{
 int ret;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 ret = promisc_mode_set(iface, 
# 4176 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                              0
# 4176 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                                   );
 if (ret < 0) {
  goto out;
 }

 net_if_flag_clear(iface, NET_IF_PROMISC);

out:
 k_mutex_unlock(&lock);
}


# 4187 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 4187 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
    net_if_is_promisc(struct net_if *iface)
{
 { };

 return net_if_flag_is_set(iface, NET_IF_PROMISC);
}
# 4249 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
static void net_tx_ts_thread(void)
{
 struct net_pkt *pkt;

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "Starting TX timestamp callback thread" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get()))); } while (
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
, 0, "%s: " "(%s): " "Starting TX timestamp callback thread", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get()))); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0) 
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
!= 
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Starting TX timestamp callback thread") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Starting TX timestamp callback thread") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Starting TX timestamp callback thread") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Starting TX timestamp callback thread") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Starting TX timestamp callback thread") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Starting TX timestamp callback thread") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Starting TX timestamp callback thread"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Starting TX timestamp callback thread") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Starting TX timestamp callback thread") + 0; double _d = _Generic(("%s: " "(%s): " "Starting TX timestamp callback thread") + 0, float : ("%s: " "(%s): " "Starting TX timestamp callback thread") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Starting TX timestamp callback thread") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Starting TX timestamp callback thread"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Starting TX timestamp callback thread") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Starting TX timestamp callback thread") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Starting TX timestamp callback thread"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
((__builtin_object_size(
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, __builtin_object_size(
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0)) : __memset_ichk(
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; }; if (_plen) { do {
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "Starting TX timestamp callback thread") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "Starting TX timestamp callback thread") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Starting TX timestamp callback thread") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "Starting TX timestamp callback thread") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "Starting TX timestamp callback thread") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Starting TX timestamp callback thread") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Starting TX timestamp callback thread"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "Starting TX timestamp callback thread") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "Starting TX timestamp callback thread") + 0; double _d = _Generic(("%s: " "(%s): " "Starting TX timestamp callback thread") + 0, float : ("%s: " "(%s): " "Starting TX timestamp callback thread") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "Starting TX timestamp callback thread") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " "Starting TX timestamp callback thread"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "Starting TX timestamp callback thread") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "Starting TX timestamp callback thread") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " "Starting TX timestamp callback thread"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "Starting TX timestamp callback thread", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get()))); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "Starting TX timestamp callback thread", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get()))); } else { log_2("%s: " "(%s): " "Starting TX timestamp callback thread", (log_arg_t)((const char *)__func__), (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))), src_level); } } while (
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); } if (
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) { z_log_printf_arg_checker("(%s): " "Starting TX timestamp callback thread", log_strdup(k_thread_name_get(k_current_get()))); } } while (
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4253 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
);

 while (1) {
  pkt = ({ do { } while (
# 4256 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       0
# 4256 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
       ); void *ret = k_queue_get(&(&tx_ts_queue)->_queue, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) })); do { } while (
# 4256 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
       0
# 4256 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
       ); ret; });
  if (pkt) {
   net_if_call_timestamp_cb(pkt);
  }
 }
}

void net_if_register_timestamp_cb(struct net_if_timestamp_cb *handle,
      struct net_pkt *pkt,
      struct net_if *iface,
      net_if_timestamp_callback_t cb)
{
 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 sys_slist_find_and_remove(&timestamp_callbacks, &handle->node);
 sys_slist_prepend(&timestamp_callbacks, &handle->node);

 handle->iface = iface;
 handle->cb = cb;
 handle->pkt = pkt;

 k_mutex_unlock(&lock);
}

void net_if_unregister_timestamp_cb(struct net_if_timestamp_cb *handle)
{
 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 sys_slist_find_and_remove(&timestamp_callbacks, &handle->node);

 k_mutex_unlock(&lock);
}

void net_if_call_timestamp_cb(struct net_pkt *pkt)
{
 sys_snode_t *sn, *sns;

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 for (sn = sys_slist_peek_head(&timestamp_callbacks), sns = sys_slist_peek_next(sn); sn != 
# 4295 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0) 
# 4295 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; sn = sns, sns = sys_slist_peek_next(sn)) {
  struct net_if_timestamp_cb *handle =
   ((struct net_if_timestamp_cb *)(((char *)(sn)) - 
# 4297 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  __builtin_offsetof (
# 4297 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  struct net_if_timestamp_cb
# 4297 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  , 
# 4297 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  node
# 4297 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  )
# 4297 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  ));

  if (((handle->iface == 
# 4299 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                        ((void *)0)
# 4299 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                            ) ||
       (handle->iface == net_pkt_iface(pkt))) &&
      (handle->pkt == 
# 4301 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
                     ((void *)0) 
# 4301 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                          || handle->pkt == pkt)) {
   handle->cb(pkt);
  }
 }

 k_mutex_unlock(&lock);
}

void net_if_add_tx_timestamp(struct net_pkt *pkt)
{
 ({ do { } while (
# 4311 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4311 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); k_queue_append(&(&tx_ts_queue)->_queue, pkt); do { } while (
# 4311 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4311 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); });
}


void net_if_init(void)
{
 int if_count = 0;

 do { if (!(1 && ((4U <= 0) || ((0 == 
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get()))); } while (
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
, 0, "%s: " "(%s): " "", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get()))); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0) 
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
!= 
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " ""), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "") + 0; double _d = _Generic(("%s: " "(%s): " "") + 0, float : ("%s: " "(%s): " "") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " ""), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " ""; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
((__builtin_object_size(
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, __builtin_object_size(
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0)) : __memset_ichk(
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; }; if (_plen) { do {
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " ""), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "") + 0; double _d = _Generic(("%s: " "(%s): " "") + 0, float : ("%s: " "(%s): " "") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " ""), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " ""; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get()))); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get()))); } else { log_2("%s: " "(%s): " "", (log_arg_t)((const char *)__func__), (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))), src_level); } } while (
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); } if (
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) { z_log_printf_arg_checker("(%s): " "", log_strdup(k_thread_name_get(k_current_get()))); } } while (
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4319 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
);

 k_mutex_lock(&lock, ((k_timeout_t) { .ticks = (((k_ticks_t) -1)) }));

 net_tc_tx_init();

 extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *iface = _net_if_list_start; ({ { }; iface < _net_if_list_end; }); iface++) {
  init_iface(iface);
  if_count++;
 }

 if (if_count == 0) {
  do { if (!(1 && ((1U <= 0) || ((0 == 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) && (1U <= __log_level) && (1U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "There is no network interface to work with!" "\n", z_log_minimal_level_to_char(1U)); } while (
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); break; } if (0 & !0) { if (1U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 1U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  int _rv = 0;
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 1U, (uint8_t *)
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 , 0, "There is no network interface to work with!"); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0) 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 != 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("There is no network interface to work with!") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("There is no network interface to work with!") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("There is no network interface to work with!") + 0))) > (1)) ? (_Generic(("There is no network interface to work with!") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("There is no network interface to work with!") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("There is no network interface to work with!") + 0; size_t _arg_size = _Generic(("There is no network interface to work with!"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("There is no network interface to work with!") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("There is no network interface to work with!") + 0; double _d = _Generic(("There is no network interface to work with!") + 0, float : ("There is no network interface to work with!") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("There is no network interface to work with!") + 0; size_t _arg_size = _Generic(("There is no network interface to work with!"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("There is no network interface to work with!") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("There is no network interface to work with!") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "There is no network interface to work with!"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ((__builtin_object_size(
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0) != (size_t)-1) ? __builtin___memset_chk(
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , __builtin_object_size(
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 0)) : __memset_ichk(
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _msg
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 0
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 , 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 (sizeof(struct log_msg2_hdr) + _plen + (0))
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 ))
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; }; if (_plen) { do {
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 _Bool 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("There is no network interface to work with!") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("There is no network interface to work with!") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("There is no network interface to work with!") + 0))) > (1)) ? (_Generic(("There is no network interface to work with!") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("There is no network interface to work with!") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("There is no network interface to work with!") + 0; size_t _arg_size = _Generic(("There is no network interface to work with!"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("There is no network interface to work with!") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("There is no network interface to work with!") + 0; double _d = _Generic(("There is no network interface to work with!") + 0, float : ("There is no network interface to work with!") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("There is no network interface to work with!") + 0; size_t _arg_size = _Generic(("There is no network interface to work with!"), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("There is no network interface to work with!") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("There is no network interface to work with!") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "There is no network interface to work with!"; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
 28 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 : _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
  } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 1U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 ((void *)0)
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 1U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "There is no network interface to work with!"); } else if (1) { log_string_sync(src_level, "There is no network interface to work with!"); } else { log_0("There is no network interface to work with!", src_level); } } while (
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ); } while (0); } if (
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 ) { z_log_printf_arg_checker("There is no network interface to work with!"); } } while (
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
 0
# 4331 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 );
  goto out;
 }

 iface_ipv6_init(if_count);
 iface_ipv4_init(if_count);
 iface_router_init();


 k_thread_create(&tx_thread_ts, tx_ts_stack,
   (sizeof(tx_ts_stack) - ((size_t)32)),
   (k_thread_entry_t)net_tx_ts_thread,
   
# 4343 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
  ((void *)0)
# 4343 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
      , 
# 4343 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
        ((void *)0)
# 4343 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
            , 
# 4343 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
              ((void *)0)
# 4343 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
                  , (-(16 - (1))), 0, ((k_timeout_t) {0}));
 k_thread_name_set(&tx_thread_ts, "tx_tstamp");
# 4366 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
out:
 k_mutex_unlock(&lock);
}

void net_if_post_init(void)
{
 do { if (!(1 && ((4U <= 0) || ((0 == 
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) && (4U <= __log_level) && (4U <= 4) ) ))) { break; } if (0) { do { z_log_minimal_printk("%c: " "(%s): " "" "\n", z_log_minimal_level_to_char(4U), log_strdup(k_thread_name_get(k_current_get()))); } while (
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); break; } if (0 & !0) { if (4U > ((struct log_source_const_data *)__log_current_const_data)->level) { break; } } 
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
is_user_context = k_is_user_context(); uint32_t filters = 0 ? (__log_current_dynamic_data)->filters : 0; if (0 && !is_user_context && 4U > ((*(&filters) >> (3U * (0))) & ((1UL << (3U)) - 1U))) { break; } if (1) { int _mode; void *_src = 0 ? (void *)__log_current_dynamic_data : (void *)__log_current_const_data; do { ; if (({
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 int _rv = (((_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0) + _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) - 1) > 0);
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _rv; })) { ; z_log_msg2_runtime_create(0, (void *)_src, 4U, (uint8_t *)
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
, 0, "%s: " "(%s): " "", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get()))); _mode = Z_LOG_MSG2_MODE_RUNTIME; } else { do { int _plen; do {
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = 
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0) 
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
!= 
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? 0 : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " ""), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "") + 0; double _d = _Generic(("%s: " "(%s): " "") + 0, float : ("%s: " "(%s): " "") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " ""), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " ""; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); struct log_msg2 *_msg; long long _ll_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long long)) - 1)) / (sizeof(long long)))]; long double _ld_buf[((((sizeof(struct log_msg2_hdr) + _plen + (0))) + ((sizeof(long double)) - 1)) / (sizeof(long double)))]; _msg = (sizeof(long double) == (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long))))) ? (struct log_msg2 *)_ld_buf : (struct log_msg2 *)_ll_buf; if (0) { 
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
((__builtin_object_size(
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0) != (size_t)-1) ? __builtin___memset_chk(
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, __builtin_object_size(
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 0)) : __memset_ichk(
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
_msg
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
0
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
, 
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
(sizeof(struct log_msg2_hdr) + _plen + (0))
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
))
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; }; if (_plen) { do {
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic push
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"

# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic ignored "-Wpointer-arith"
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 _Static_assert(!0 || (0 && !(sizeof(struct log_msg2_hdr) % (0 ? sizeof(long double) : (((sizeof(double)) > (sizeof(long long))) ? (sizeof(double)) : (sizeof(long long)))))), "" "Xtensa requires aligned package."); _Static_assert((sizeof(struct log_msg2_hdr) % sizeof(int)) == 0, "" "Alignment offset must be multiply of a word."); 
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
_Bool 
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
str_idxs = 0 & (1UL << (0)); uint8_t *_pbuf = _msg->data; uint8_t _s_cnt = 0; uint16_t _s_buffer[16]; size_t _pmax = (_msg->data != 
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) ? _plen : 0x7fffffffL; int _pkg_len = 0; int _total_len = 0; int _pkg_offset = sizeof(struct log_msg2_hdr); union z_cbprintf_hdr *_len_loc; if (_pmax < sizeof(union z_cbprintf_hdr)) { _plen = -
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
; break; } _len_loc = (union z_cbprintf_hdr *)_pbuf; _pkg_len += sizeof(union z_cbprintf_hdr); _pkg_offset += sizeof(union z_cbprintf_hdr); do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(("%s: " "(%s): " "") + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(("%s: " "(%s): " "") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "") + 0))) > (1)) ? (_Generic(("%s: " "(%s): " "") + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(("%s: " "(%s): " "") + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ("%s: " "(%s): " "") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " ""), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(("%s: " "(%s): " "") + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ("%s: " "(%s): " "") + 0; double _d = _Generic(("%s: " "(%s): " "") + 0, float : ("%s: " "(%s): " "") + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ("%s: " "(%s): " "") + 0; size_t _arg_size = _Generic(("%s: " "(%s): " ""), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(("%s: " "(%s): " "") + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(("%s: " "(%s): " "") + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = "%s: " "(%s): " ""; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic(((const char *)__func__) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) > (1)) ? (_Generic(((const char *)__func__) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__(((const char *)__func__) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic(((const char *)__func__) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = ((const char *)__func__) + 0; double _d = _Generic(((const char *)__func__) + 0, float : ((const char *)__func__) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = ((const char *)__func__) + 0; size_t _arg_size = _Generic(((const char *)__func__), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic(((const char *)__func__) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic(((const char *)__func__) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = (const char *)__func__; } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0) ; do { _Static_assert(!((sizeof(double) < (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double)))) && _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, long double : 1, default : 0) && !0), "" "Packaging of long double not enabled in Kconfig."); while (_pkg_offset % (((_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) > (1)) ? (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), double : (((1) > (__alignof__(double))) ? (1) : (__alignof__(double))), long double : (((1) > (__alignof__(long double))) ? (1) : (__alignof__(long double))), long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), unsigned long long : (((1) > (__alignof__(long long))) ? (1) : (__alignof__(long long))), default : __alignof__((log_strdup(k_thread_name_get(k_current_get()))) + 0))) : (1))) { _pkg_len += sizeof(int); _pkg_offset += sizeof(int); } uint32_t _arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); if (_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char * : 1, const char * : (0 & (1UL << (0))) ? 0 : 1, volatile char * : 1, const volatile char * : 1, wchar_t * : 1, const wchar_t * : (0 & (1UL << (0))) ? 0 : 1, volatile wchar_t * : 1, const volatile wchar_t * : 1, default : 0)) { _s_buffer[_s_cnt++] = _pkg_len / sizeof(int); } if (_pbuf && _pkg_len < (int)_pmax) { do { if (0) { __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; double _d = _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : (log_strdup(k_thread_name_get(k_current_get()))) + 0, default : 0.0); size_t arg_size = ({ __auto_type _v = (log_strdup(k_thread_name_get(k_current_get()))) + 0; size_t _arg_size = _Generic((log_strdup(k_thread_name_get(k_current_get()))), float : sizeof(double), default : sizeof((_v)) ); _arg_size; }); size_t _wsize = arg_size / sizeof(int); z_cbprintf_wcpy((int *)&_pbuf[_pkg_len], (int *) _Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, float : &_d, default : &_v), _wsize); } else { *_Generic((log_strdup(k_thread_name_get(k_current_get()))) + 0, char : (int *)&_pbuf[_pkg_len], unsigned char: (int *)&_pbuf[_pkg_len], short : (int *)&_pbuf[_pkg_len], unsigned short : (int *)&_pbuf[_pkg_len], int : (int *)&_pbuf[_pkg_len], unsigned int : (unsigned int *)&_pbuf[_pkg_len], long : (long *)&_pbuf[_pkg_len], unsigned long : (unsigned long *)&_pbuf[_pkg_len], long long : (long long *)&_pbuf[_pkg_len], unsigned long long : (unsigned long long *)&_pbuf[_pkg_len], float : (double *)&_pbuf[_pkg_len], double : (double *)&_pbuf[_pkg_len], long double : (long double *)&_pbuf[_pkg_len], default : (const void **)&_pbuf[_pkg_len]) = log_strdup(k_thread_name_get(k_current_get())); } } while (0); } _pkg_len += _arg_size; _pkg_offset += _arg_size; } while (0); _total_len = _pkg_len; if (str_idxs) { _total_len += _s_cnt; if (_pbuf) { for (int i = 0; i < _s_cnt; i++) { _pbuf[_pkg_len + i] = _s_buffer[i]; } } } _plen = (_total_len > (int)_pmax) ? -
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3
28 
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
: _total_len; if (_pbuf) { union z_cbprintf_hdr hdr = { .desc = { .len = (uint8_t)(_pkg_len / sizeof(int)), .str_cnt = 0, .ro_str_cnt = str_idxs ? _s_cnt : (uint8_t)0, } }; *_len_loc = hdr; }
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
#pragma GCC diagnostic pop
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
 } while (0); } struct log_msg2_desc _desc = { .valid = 0, .busy = 0, .type = 0, .domain = 0, .level = 4U, .package_len = (uint32_t)_plen, .data_len = 0, .reserved = 0, }; z_log_msg2_finalize(_msg, _src, _desc, 
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
((void *)0)
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); _mode = Z_LOG_MSG2_MODE_SYNC; } } while (0); } else { do { uint16_t src_id = 0 ? (__log_level ? log_dynamic_source_id(__log_current_dynamic_data) : 0) : (__log_level ? log_const_source_id(__log_current_const_data) : 0); struct log_msg_ids src_level = { .level = 4U, .domain_id = 0, .source_id = src_id }; do { if (is_user_context) { log_from_user(src_level, "%s: " "(%s): " "", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get()))); } else if (1) { log_string_sync(src_level, "%s: " "(%s): " "", (const char *)__func__ , log_strdup(k_thread_name_get(k_current_get()))); } else { log_2("%s: " "(%s): " "", (log_arg_t)((const char *)__func__), (log_arg_t)(log_strdup(k_thread_name_get(k_current_get()))), src_level); } } while (
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
); } while (0); } if (
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
) { z_log_printf_arg_checker("(%s): " "", log_strdup(k_thread_name_get(k_current_get()))); } } while (
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c" 3 4
0
# 4372 "/home/sebin/thesis/zephyrproject/zephyr/subsys/net/ip/net_if.c"
);


 extern struct net_if _net_if_list_start[]; extern struct net_if _net_if_list_end[]; for (struct net_if *iface = _net_if_list_start; ({ { }; iface < _net_if_list_end; }); iface++) {
  if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   net_if_up(iface);
  }
 }
}

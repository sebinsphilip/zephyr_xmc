/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   /home/sebin/thesis/dmz/zephyr_xmc_template/build/zephyr/zephyr.dts.pre
 *
 * Directories with bindings:
 *   /home/sebin/thesis/dmz/zephyr_xmc_template/drivers/zephyr/dts/bindings, /home/sebin/thesis/zephyrproject/zephyr/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /aliases
 *   2   /chosen
 *   3   /memory@10000000
 *   4   /memory@20000000
 *   5   /memory@30000000
 *   6   /serial-flash@8000000
 *   7   /cpus
 *   8   /cpus/cpu@0
 *   9   /soc
 *   10  /soc/clock@50004600
 *   11  /soc/interrupt-controller@e000e100
 *   12  /soc/counter@4000c100
 *   13  /soc/ethernet@5000c000
 *   14  /soc/mux_0
 *   15  /soc/mux_1
 *   16  /soc/timer@e000e010
 *   17  /soc/usic@40030000
 *   18  /soc/usic@40030200
 *   19  /system-clock
 *   20  /soc/usic@48020000
 *   21  /soc/usic@48020200
 *   22  /soc/usic@48024000
 *   23  /soc/usic@48024200
 *   24  /soc/buttons
 *   25  /soc/gpio@48028100
 *   26  /soc/buttons/button_0
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_memory_10000000) fn(DT_N_S_memory_20000000) fn(DT_N_S_memory_30000000) fn(DT_N_S_serial_flash_8000000) fn(DT_N_S_system_clock)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_memory_10000000, __VA_ARGS__) fn(DT_N_S_memory_20000000, __VA_ARGS__) fn(DT_N_S_memory_30000000, __VA_ARGS__) fn(DT_N_S_serial_flash_8000000, __VA_ARGS__) fn(DT_N_S_system_clock, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_memory_10000000) fn(DT_N_S_memory_20000000) fn(DT_N_S_memory_30000000) fn(DT_N_S_serial_flash_8000000) fn(DT_N_S_system_clock) 
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_memory_10000000, __VA_ARGS__) fn(DT_N_S_memory_20000000, __VA_ARGS__) fn(DT_N_S_memory_30000000, __VA_ARGS__) fn(DT_N_S_serial_flash_8000000, __VA_ARGS__) fn(DT_N_S_system_clock, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_ORD 0

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /aliases */ \
	2, /* /chosen */ \
	3, /* /memory@10000000 */ \
	4, /* /memory@20000000 */ \
	5, /* /memory@30000000 */ \
	6, /* /serial-flash@8000000 */ \
	7, /* /cpus */ \
	9, /* /soc */ \
	19, /* /system-clock */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_kai_umops_xmc45  DT_N
#define DT_N_INST_0_infineon_xmc4500 DT_N
#define DT_N_INST_0_infineon_xmc4xxx DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_RANGES_NUM 0
#define DT_N_FOREACH_RANGE(fn) 
#define DT_N_IRQ_NUM 0
#define DT_N_COMPAT_MATCHES_kai_umops_xmc45 1
#define DT_N_COMPAT_MATCHES_infineon_xmc4500 1
#define DT_N_COMPAT_MATCHES_infineon_xmc4xxx 1
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"kai,umops-xmc45", "infineon,xmc4500", "infineon,xmc4xxx"}
#define DT_N_P_compatible_IDX_0 "kai,umops-xmc45"
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_IDX_1 "infineon,xmc4500"
#define DT_N_P_compatible_IDX_1_EXISTS 1
#define DT_N_P_compatible_IDX_2 "infineon,xmc4xxx"
#define DT_N_P_compatible_IDX_2_EXISTS 1
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0) \
	fn(DT_N, compatible, 1) \
	fn(DT_N, compatible, 2)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__) \
	fn(DT_N, compatible, 1, __VA_ARGS__) \
	fn(DT_N, compatible, 2, __VA_ARGS__)
#define DT_N_P_compatible_LEN 3
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 1

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_RANGES_NUM 0
#define DT_N_S_aliases_FOREACH_RANGE(fn) 
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 2

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_RANGES_NUM 0
#define DT_N_S_chosen_FOREACH_RANGE(fn) 
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /memory@10000000
 *
 * Node identifier: DT_N_S_memory_10000000
 *
 * Binding (compatible = mmio-sram):
 *   /home/sebin/thesis/zephyrproject/zephyr/dts/bindings/sram/mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_memory_10000000_PATH "/memory@10000000"

/* Node's name with unit-address: */
#define DT_N_S_memory_10000000_FULL_NAME "memory@10000000"

/* Node parent (/) identifier: */
#define DT_N_S_memory_10000000_PARENT DT_N
#define DT_N_S_memory_10000000_FOREACH_CHILD(fn) 
#define DT_N_S_memory_10000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_memory_10000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_memory_10000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_memory_10000000_ORD 3

/* Ordinals for what this node depends on directly: */
#define DT_N_S_memory_10000000_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_memory_10000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_memory_10000000_EXISTS 1
#define DT_N_INST_0_mmio_sram DT_N_S_memory_10000000
#define DT_N_NODELABEL_psram1 DT_N_S_memory_10000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_memory_10000000_REG_NUM 1
#define DT_N_S_memory_10000000_REG_IDX_0_EXISTS 1
#define DT_N_S_memory_10000000_REG_IDX_0_VAL_ADDRESS 268435456 /* 0x10000000 */
#define DT_N_S_memory_10000000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_memory_10000000_RANGES_NUM 0
#define DT_N_S_memory_10000000_FOREACH_RANGE(fn) 
#define DT_N_S_memory_10000000_IRQ_NUM 0
#define DT_N_S_memory_10000000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_memory_10000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_memory_10000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_memory_10000000_P_reg {268435456 /* 0x10000000 */, 65536 /* 0x10000 */}
#define DT_N_S_memory_10000000_P_reg_IDX_0 268435456
#define DT_N_S_memory_10000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_memory_10000000_P_reg_IDX_1 65536
#define DT_N_S_memory_10000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_memory_10000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_10000000, reg, 0) \
	fn(DT_N_S_memory_10000000, reg, 1)
#define DT_N_S_memory_10000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_10000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_memory_10000000, reg, 1, __VA_ARGS__)
#define DT_N_S_memory_10000000_P_reg_EXISTS 1
#define DT_N_S_memory_10000000_P_status "okay"
#define DT_N_S_memory_10000000_P_status_STRING_TOKEN okay
#define DT_N_S_memory_10000000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_memory_10000000_P_status_ENUM_IDX 1
#define DT_N_S_memory_10000000_P_status_ENUM_TOKEN okay
#define DT_N_S_memory_10000000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_memory_10000000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_10000000, status, 0) \
	fn(DT_N_S_memory_10000000, status, 1) \
	fn(DT_N_S_memory_10000000, status, 2) \
	fn(DT_N_S_memory_10000000, status, 3)
#define DT_N_S_memory_10000000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_10000000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_memory_10000000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_memory_10000000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_memory_10000000, status, 3, __VA_ARGS__)
#define DT_N_S_memory_10000000_P_status_EXISTS 1
#define DT_N_S_memory_10000000_P_compatible {"mmio-sram"}
#define DT_N_S_memory_10000000_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_memory_10000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_memory_10000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_10000000, compatible, 0)
#define DT_N_S_memory_10000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_10000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_memory_10000000_P_compatible_LEN 1
#define DT_N_S_memory_10000000_P_compatible_EXISTS 1
#define DT_N_S_memory_10000000_P_wakeup_source 0
#define DT_N_S_memory_10000000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /memory@20000000
 *
 * Node identifier: DT_N_S_memory_20000000
 *
 * Binding (compatible = mmio-sram):
 *   /home/sebin/thesis/zephyrproject/zephyr/dts/bindings/sram/mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_memory_20000000_PATH "/memory@20000000"

/* Node's name with unit-address: */
#define DT_N_S_memory_20000000_FULL_NAME "memory@20000000"

/* Node parent (/) identifier: */
#define DT_N_S_memory_20000000_PARENT DT_N
#define DT_N_S_memory_20000000_FOREACH_CHILD(fn) 
#define DT_N_S_memory_20000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_memory_20000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_memory_20000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_memory_20000000_ORD 4

/* Ordinals for what this node depends on directly: */
#define DT_N_S_memory_20000000_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_memory_20000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_memory_20000000_EXISTS 1
#define DT_N_INST_1_mmio_sram DT_N_S_memory_20000000
#define DT_N_NODELABEL_dsram1 DT_N_S_memory_20000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_memory_20000000_REG_NUM 1
#define DT_N_S_memory_20000000_REG_IDX_0_EXISTS 1
#define DT_N_S_memory_20000000_REG_IDX_0_VAL_ADDRESS 536870912 /* 0x20000000 */
#define DT_N_S_memory_20000000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_memory_20000000_RANGES_NUM 0
#define DT_N_S_memory_20000000_FOREACH_RANGE(fn) 
#define DT_N_S_memory_20000000_IRQ_NUM 0
#define DT_N_S_memory_20000000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_memory_20000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_memory_20000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_memory_20000000_P_reg {536870912 /* 0x20000000 */, 65536 /* 0x10000 */}
#define DT_N_S_memory_20000000_P_reg_IDX_0 536870912
#define DT_N_S_memory_20000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_memory_20000000_P_reg_IDX_1 65536
#define DT_N_S_memory_20000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_memory_20000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_20000000, reg, 0) \
	fn(DT_N_S_memory_20000000, reg, 1)
#define DT_N_S_memory_20000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_20000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_memory_20000000, reg, 1, __VA_ARGS__)
#define DT_N_S_memory_20000000_P_reg_EXISTS 1
#define DT_N_S_memory_20000000_P_status "okay"
#define DT_N_S_memory_20000000_P_status_STRING_TOKEN okay
#define DT_N_S_memory_20000000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_memory_20000000_P_status_ENUM_IDX 1
#define DT_N_S_memory_20000000_P_status_ENUM_TOKEN okay
#define DT_N_S_memory_20000000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_memory_20000000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_20000000, status, 0) \
	fn(DT_N_S_memory_20000000, status, 1) \
	fn(DT_N_S_memory_20000000, status, 2) \
	fn(DT_N_S_memory_20000000, status, 3)
#define DT_N_S_memory_20000000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_20000000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_memory_20000000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_memory_20000000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_memory_20000000, status, 3, __VA_ARGS__)
#define DT_N_S_memory_20000000_P_status_EXISTS 1
#define DT_N_S_memory_20000000_P_compatible {"mmio-sram"}
#define DT_N_S_memory_20000000_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_memory_20000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_memory_20000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_20000000, compatible, 0)
#define DT_N_S_memory_20000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_20000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_memory_20000000_P_compatible_LEN 1
#define DT_N_S_memory_20000000_P_compatible_EXISTS 1
#define DT_N_S_memory_20000000_P_wakeup_source 0
#define DT_N_S_memory_20000000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /memory@30000000
 *
 * Node identifier: DT_N_S_memory_30000000
 *
 * Binding (compatible = mmio-sram):
 *   /home/sebin/thesis/zephyrproject/zephyr/dts/bindings/sram/mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_memory_30000000_PATH "/memory@30000000"

/* Node's name with unit-address: */
#define DT_N_S_memory_30000000_FULL_NAME "memory@30000000"

/* Node parent (/) identifier: */
#define DT_N_S_memory_30000000_PARENT DT_N
#define DT_N_S_memory_30000000_FOREACH_CHILD(fn) 
#define DT_N_S_memory_30000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_memory_30000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_memory_30000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_memory_30000000_ORD 5

/* Ordinals for what this node depends on directly: */
#define DT_N_S_memory_30000000_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_memory_30000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_memory_30000000_EXISTS 1
#define DT_N_INST_2_mmio_sram DT_N_S_memory_30000000
#define DT_N_NODELABEL_sdram2 DT_N_S_memory_30000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_memory_30000000_REG_NUM 1
#define DT_N_S_memory_30000000_REG_IDX_0_EXISTS 1
#define DT_N_S_memory_30000000_REG_IDX_0_VAL_ADDRESS 805306368 /* 0x30000000 */
#define DT_N_S_memory_30000000_REG_IDX_0_VAL_SIZE 32768 /* 0x8000 */
#define DT_N_S_memory_30000000_RANGES_NUM 0
#define DT_N_S_memory_30000000_FOREACH_RANGE(fn) 
#define DT_N_S_memory_30000000_IRQ_NUM 0
#define DT_N_S_memory_30000000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_memory_30000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_memory_30000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_memory_30000000_P_reg {805306368 /* 0x30000000 */, 32768 /* 0x8000 */}
#define DT_N_S_memory_30000000_P_reg_IDX_0 805306368
#define DT_N_S_memory_30000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_memory_30000000_P_reg_IDX_1 32768
#define DT_N_S_memory_30000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_memory_30000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_30000000, reg, 0) \
	fn(DT_N_S_memory_30000000, reg, 1)
#define DT_N_S_memory_30000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_30000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_memory_30000000, reg, 1, __VA_ARGS__)
#define DT_N_S_memory_30000000_P_reg_EXISTS 1
#define DT_N_S_memory_30000000_P_status "okay"
#define DT_N_S_memory_30000000_P_status_STRING_TOKEN okay
#define DT_N_S_memory_30000000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_memory_30000000_P_status_ENUM_IDX 1
#define DT_N_S_memory_30000000_P_status_ENUM_TOKEN okay
#define DT_N_S_memory_30000000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_memory_30000000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_30000000, status, 0) \
	fn(DT_N_S_memory_30000000, status, 1) \
	fn(DT_N_S_memory_30000000, status, 2) \
	fn(DT_N_S_memory_30000000, status, 3)
#define DT_N_S_memory_30000000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_30000000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_memory_30000000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_memory_30000000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_memory_30000000, status, 3, __VA_ARGS__)
#define DT_N_S_memory_30000000_P_status_EXISTS 1
#define DT_N_S_memory_30000000_P_compatible {"mmio-sram"}
#define DT_N_S_memory_30000000_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_memory_30000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_memory_30000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_30000000, compatible, 0)
#define DT_N_S_memory_30000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_30000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_memory_30000000_P_compatible_LEN 1
#define DT_N_S_memory_30000000_P_compatible_EXISTS 1
#define DT_N_S_memory_30000000_P_wakeup_source 0
#define DT_N_S_memory_30000000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /serial-flash@8000000
 *
 * Node identifier: DT_N_S_serial_flash_8000000
 */

/* Node's full path: */
#define DT_N_S_serial_flash_8000000_PATH "/serial-flash@8000000"

/* Node's name with unit-address: */
#define DT_N_S_serial_flash_8000000_FULL_NAME "serial-flash@8000000"

/* Node parent (/) identifier: */
#define DT_N_S_serial_flash_8000000_PARENT DT_N
#define DT_N_S_serial_flash_8000000_FOREACH_CHILD(fn) 
#define DT_N_S_serial_flash_8000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_serial_flash_8000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_serial_flash_8000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_serial_flash_8000000_ORD 6

/* Ordinals for what this node depends on directly: */
#define DT_N_S_serial_flash_8000000_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_serial_flash_8000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_serial_flash_8000000_EXISTS 1
#define DT_N_INST_0_serial_flash DT_N_S_serial_flash_8000000
#define DT_N_NODELABEL_flash0    DT_N_S_serial_flash_8000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_serial_flash_8000000_REG_NUM 1
#define DT_N_S_serial_flash_8000000_REG_IDX_0_EXISTS 1
#define DT_N_S_serial_flash_8000000_REG_IDX_0_VAL_ADDRESS 134217728 /* 0x8000000 */
#define DT_N_S_serial_flash_8000000_REG_IDX_0_VAL_SIZE 1048576 /* 0x100000 */
#define DT_N_S_serial_flash_8000000_RANGES_NUM 0
#define DT_N_S_serial_flash_8000000_FOREACH_RANGE(fn) 
#define DT_N_S_serial_flash_8000000_IRQ_NUM 0
#define DT_N_S_serial_flash_8000000_COMPAT_MATCHES_serial_flash 1
#define DT_N_S_serial_flash_8000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_serial_flash_8000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_serial_flash_8000000_P_compatible {"serial-flash"}
#define DT_N_S_serial_flash_8000000_P_compatible_IDX_0 "serial-flash"
#define DT_N_S_serial_flash_8000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_serial_flash_8000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_serial_flash_8000000, compatible, 0)
#define DT_N_S_serial_flash_8000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_serial_flash_8000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_serial_flash_8000000_P_compatible_LEN 1
#define DT_N_S_serial_flash_8000000_P_compatible_EXISTS 1
#define DT_N_S_serial_flash_8000000_P_reg {134217728 /* 0x8000000 */, 1048576 /* 0x100000 */}
#define DT_N_S_serial_flash_8000000_P_reg_IDX_0 134217728
#define DT_N_S_serial_flash_8000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_serial_flash_8000000_P_reg_IDX_1 1048576
#define DT_N_S_serial_flash_8000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_serial_flash_8000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_serial_flash_8000000, reg, 0) \
	fn(DT_N_S_serial_flash_8000000, reg, 1)
#define DT_N_S_serial_flash_8000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_serial_flash_8000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_serial_flash_8000000, reg, 1, __VA_ARGS__)
#define DT_N_S_serial_flash_8000000_P_reg_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0) 
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 7

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	8, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_RANGES_NUM 0
#define DT_N_S_cpus_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 *
 * Binding (compatible = arm,cortex-m4f):
 *   /home/sebin/thesis/zephyrproject/zephyr/dts/bindings/cpu/arm,cortex-m4f.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 8

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	7, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_arm_cortex_m4f DT_N_S_cpus_S_cpu_0
#define DT_N_NODELABEL_cpu0        DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_arm_cortex_m4f 1
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_clock_frequency 120000000
#define DT_N_S_cpus_S_cpu_0_P_clock_frequency_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible {"arm,cortex-m4f"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "arm,cortex-m4f"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, reg, 0)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_usic_40030000) fn(DT_N_S_soc_S_usic_40030200) fn(DT_N_S_soc_S_usic_48020000) fn(DT_N_S_soc_S_usic_48020200) fn(DT_N_S_soc_S_usic_48024000) fn(DT_N_S_soc_S_usic_48024200) fn(DT_N_S_soc_S_clock_50004600) fn(DT_N_S_soc_S_counter_4000c100) fn(DT_N_S_soc_S_mux_0) fn(DT_N_S_soc_S_mux_1) fn(DT_N_S_soc_S_gpio_48028100) fn(DT_N_S_soc_S_buttons) fn(DT_N_S_soc_S_ethernet_5000c000)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) fn(DT_N_S_soc_S_usic_40030000, __VA_ARGS__) fn(DT_N_S_soc_S_usic_40030200, __VA_ARGS__) fn(DT_N_S_soc_S_usic_48020000, __VA_ARGS__) fn(DT_N_S_soc_S_usic_48020200, __VA_ARGS__) fn(DT_N_S_soc_S_usic_48024000, __VA_ARGS__) fn(DT_N_S_soc_S_usic_48024200, __VA_ARGS__) fn(DT_N_S_soc_S_clock_50004600, __VA_ARGS__) fn(DT_N_S_soc_S_counter_4000c100, __VA_ARGS__) fn(DT_N_S_soc_S_mux_0, __VA_ARGS__) fn(DT_N_S_soc_S_mux_1, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_48028100, __VA_ARGS__) fn(DT_N_S_soc_S_buttons, __VA_ARGS__) fn(DT_N_S_soc_S_ethernet_5000c000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_usic_48020000) fn(DT_N_S_soc_S_usic_48020200) fn(DT_N_S_soc_S_clock_50004600) fn(DT_N_S_soc_S_counter_4000c100) fn(DT_N_S_soc_S_mux_0) fn(DT_N_S_soc_S_mux_1) fn(DT_N_S_soc_S_gpio_48028100) fn(DT_N_S_soc_S_buttons) fn(DT_N_S_soc_S_ethernet_5000c000) 
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) fn(DT_N_S_soc_S_usic_48020000, __VA_ARGS__) fn(DT_N_S_soc_S_usic_48020200, __VA_ARGS__) fn(DT_N_S_soc_S_clock_50004600, __VA_ARGS__) fn(DT_N_S_soc_S_counter_4000c100, __VA_ARGS__) fn(DT_N_S_soc_S_mux_0, __VA_ARGS__) fn(DT_N_S_soc_S_mux_1, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_48028100, __VA_ARGS__) fn(DT_N_S_soc_S_buttons, __VA_ARGS__) fn(DT_N_S_soc_S_ethernet_5000c000, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 9

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	10, /* /soc/clock@50004600 */ \
	11, /* /soc/interrupt-controller@e000e100 */ \
	12, /* /soc/counter@4000c100 */ \
	13, /* /soc/ethernet@5000c000 */ \
	14, /* /soc/mux_0 */ \
	15, /* /soc/mux_1 */ \
	16, /* /soc/timer@e000e010 */ \
	17, /* /soc/usic@40030000 */ \
	18, /* /soc/usic@40030200 */ \
	20, /* /soc/usic@48020000 */ \
	21, /* /soc/usic@48020200 */ \
	22, /* /soc/usic@48024000 */ \
	23, /* /soc/usic@48024200 */ \
	24, /* /soc/buttons */ \
	25, /* /soc/gpio@48028100 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_simple_bus DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_RANGES_NUM 0
#define DT_N_S_soc_FOREACH_RANGE(fn) 
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 1
#define DT_N_S_soc_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/clock@50004600
 *
 * Node identifier: DT_N_S_soc_S_clock_50004600
 *
 * Binding (compatible = infineon,xmc-clock):
 *   /home/sebin/thesis/dmz/zephyr_xmc_template/drivers/zephyr/dts/bindings/infineon,xmc-clock.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_clock_50004600_PATH "/soc/clock@50004600"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_clock_50004600_FULL_NAME "clock@50004600"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_clock_50004600_PARENT DT_N_S_soc
#define DT_N_S_soc_S_clock_50004600_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_clock_50004600_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_clock_50004600_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_clock_50004600_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_clock_50004600_ORD 10

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_clock_50004600_REQUIRES_ORDS \
	9, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_clock_50004600_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_clock_50004600_EXISTS 1
#define DT_N_INST_0_infineon_xmc_clock DT_N_S_soc_S_clock_50004600
#define DT_N_NODELABEL_scu_clk         DT_N_S_soc_S_clock_50004600

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_clock_50004600_REG_NUM 1
#define DT_N_S_soc_S_clock_50004600_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_50004600_REG_IDX_0_VAL_ADDRESS 1342195200 /* 0x50004600 */
#define DT_N_S_soc_S_clock_50004600_REG_IDX_0_VAL_SIZE 56 /* 0x38 */
#define DT_N_S_soc_S_clock_50004600_RANGES_NUM 0
#define DT_N_S_soc_S_clock_50004600_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_clock_50004600_IRQ_NUM 0
#define DT_N_S_soc_S_clock_50004600_COMPAT_MATCHES_infineon_xmc_clock 1
#define DT_N_S_soc_S_clock_50004600_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_clock_50004600_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_clock_50004600_P_reg {1342195200 /* 0x50004600 */, 56 /* 0x38 */}
#define DT_N_S_soc_S_clock_50004600_P_reg_IDX_0 1342195200
#define DT_N_S_soc_S_clock_50004600_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_50004600_P_reg_IDX_1 56
#define DT_N_S_soc_S_clock_50004600_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_clock_50004600_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clock_50004600, reg, 0) \
	fn(DT_N_S_soc_S_clock_50004600, reg, 1)
#define DT_N_S_soc_S_clock_50004600_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_50004600, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_50004600, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_clock_50004600_P_reg_EXISTS 1
#define DT_N_S_soc_S_clock_50004600_P_label "SCU_CLK"
#define DT_N_S_soc_S_clock_50004600_P_label_STRING_TOKEN SCU_CLK
#define DT_N_S_soc_S_clock_50004600_P_label_STRING_UPPER_TOKEN SCU_CLK
#define DT_N_S_soc_S_clock_50004600_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clock_50004600, label, 0) \
	fn(DT_N_S_soc_S_clock_50004600, label, 1) \
	fn(DT_N_S_soc_S_clock_50004600, label, 2) \
	fn(DT_N_S_soc_S_clock_50004600, label, 3) \
	fn(DT_N_S_soc_S_clock_50004600, label, 4) \
	fn(DT_N_S_soc_S_clock_50004600, label, 5) \
	fn(DT_N_S_soc_S_clock_50004600, label, 6)
#define DT_N_S_soc_S_clock_50004600_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_50004600, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_50004600, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_50004600, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_50004600, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_50004600, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_50004600, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_50004600, label, 6, __VA_ARGS__)
#define DT_N_S_soc_S_clock_50004600_P_label_EXISTS 1
#define DT_N_S_soc_S_clock_50004600_P_status "okay"
#define DT_N_S_soc_S_clock_50004600_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_clock_50004600_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_clock_50004600_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_clock_50004600_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_clock_50004600_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_clock_50004600_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clock_50004600, status, 0) \
	fn(DT_N_S_soc_S_clock_50004600, status, 1) \
	fn(DT_N_S_soc_S_clock_50004600, status, 2) \
	fn(DT_N_S_soc_S_clock_50004600, status, 3)
#define DT_N_S_soc_S_clock_50004600_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_50004600, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_50004600, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_50004600, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_50004600, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_clock_50004600_P_status_EXISTS 1
#define DT_N_S_soc_S_clock_50004600_P_compatible {"infineon,xmc-clock"}
#define DT_N_S_soc_S_clock_50004600_P_compatible_IDX_0 "infineon,xmc-clock"
#define DT_N_S_soc_S_clock_50004600_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_50004600_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clock_50004600, compatible, 0)
#define DT_N_S_soc_S_clock_50004600_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_50004600, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_clock_50004600_P_compatible_LEN 1
#define DT_N_S_soc_S_clock_50004600_P_compatible_EXISTS 1
#define DT_N_S_soc_S_clock_50004600_P_wakeup_source 0
#define DT_N_S_soc_S_clock_50004600_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/interrupt-controller@e000e100
 *
 * Node identifier: DT_N_S_soc_S_interrupt_controller_e000e100
 *
 * Binding (compatible = arm,v7m-nvic):
 *   /home/sebin/thesis/zephyrproject/zephyr/dts/bindings/interrupt-controller/arm,v7m-nvic.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PATH "/soc/interrupt-controller@e000e100"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_FULL_NAME "interrupt-controller@e000e100"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PARENT DT_N_S_soc
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_ORD 11

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REQUIRES_ORDS \
	9, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_SUPPORTS_ORDS \
	12, /* /soc/counter@4000c100 */ \
	13, /* /soc/ethernet@5000c000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_EXISTS 1
#define DT_N_INST_0_arm_v7m_nvic DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_NODELABEL_nvic      DT_N_S_soc_S_interrupt_controller_e000e100

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_NUM 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_VAL_ADDRESS 3758153984 /* 0xe000e100 */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_VAL_SIZE 3072 /* 0xc00 */
#define DT_N_S_soc_S_interrupt_controller_e000e100_RANGES_NUM 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_IRQ_NUM 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_MATCHES_arm_v7m_nvic 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg {3758153984 /* 0xe000e100 */, 3072 /* 0xc00 */}
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_0 3758153984
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_1 3072
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 1)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_arm_num_irq_priority_bits 6
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_arm_num_irq_priority_bits_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_interrupt_controller 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_interrupt_controller_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible {"arm,v7m-nvic"}
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0 "arm,v7m-nvic"
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_LEN 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_wakeup_source 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/counter@4000c100
 *
 * Node identifier: DT_N_S_soc_S_counter_4000c100
 *
 * Binding (compatible = infineon,xmc-ccu4-0-counter):
 *   /home/sebin/thesis/dmz/zephyr_xmc_template/drivers/zephyr/dts/bindings/infineon,xmc-ccu4-0-counter.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_counter_4000c100_PATH "/soc/counter@4000c100"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_counter_4000c100_FULL_NAME "counter@4000c100"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_counter_4000c100_PARENT DT_N_S_soc
#define DT_N_S_soc_S_counter_4000c100_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_counter_4000c100_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_counter_4000c100_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_counter_4000c100_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_counter_4000c100_ORD 12

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_counter_4000c100_REQUIRES_ORDS \
	9, /* /soc */ \
	11, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_counter_4000c100_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_counter_4000c100_EXISTS 1
#define DT_N_INST_0_infineon_xmc_ccu4_0_counter DT_N_S_soc_S_counter_4000c100
#define DT_N_NODELABEL_ccu4_0_counter           DT_N_S_soc_S_counter_4000c100

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_counter_4000c100_REG_NUM 2
#define DT_N_S_soc_S_counter_4000c100_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_4000c100_REG_IDX_0_VAL_ADDRESS 1073791232 /* 0x4000c100 */
#define DT_N_S_soc_S_counter_4000c100_REG_IDX_0_VAL_SIZE 180 /* 0xb4 */
#define DT_N_S_soc_S_counter_4000c100_REG_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_4000c100_REG_IDX_1_VAL_ADDRESS 1073790976 /* 0x4000c000 */
#define DT_N_S_soc_S_counter_4000c100_REG_IDX_1_VAL_SIZE 132 /* 0x84 */
#define DT_N_S_soc_S_counter_4000c100_RANGES_NUM 0
#define DT_N_S_soc_S_counter_4000c100_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_counter_4000c100_IRQ_NUM 1
#define DT_N_S_soc_S_counter_4000c100_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_4000c100_IRQ_IDX_0_VAL_irq 44
#define DT_N_S_soc_S_counter_4000c100_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_counter_4000c100_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_4000c100_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_counter_4000c100_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_counter_4000c100_COMPAT_MATCHES_infineon_xmc_ccu4_0_counter 1
#define DT_N_S_soc_S_counter_4000c100_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_counter_4000c100_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_counter_4000c100_P_reg {1073791232 /* 0x4000c100 */, 180 /* 0xb4 */, 1073790976 /* 0x4000c000 */, 132 /* 0x84 */}
#define DT_N_S_soc_S_counter_4000c100_P_reg_IDX_0 1073791232
#define DT_N_S_soc_S_counter_4000c100_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_4000c100_P_reg_IDX_1 180
#define DT_N_S_soc_S_counter_4000c100_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_4000c100_P_reg_IDX_2 1073790976
#define DT_N_S_soc_S_counter_4000c100_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_counter_4000c100_P_reg_IDX_3 132
#define DT_N_S_soc_S_counter_4000c100_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_counter_4000c100_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_4000c100, reg, 0) \
	fn(DT_N_S_soc_S_counter_4000c100, reg, 1) \
	fn(DT_N_S_soc_S_counter_4000c100, reg, 2) \
	fn(DT_N_S_soc_S_counter_4000c100, reg, 3)
#define DT_N_S_soc_S_counter_4000c100_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_4000c100, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, reg, 3, __VA_ARGS__)
#define DT_N_S_soc_S_counter_4000c100_P_reg_EXISTS 1
#define DT_N_S_soc_S_counter_4000c100_P_label "CCU4_0_COUNTER"
#define DT_N_S_soc_S_counter_4000c100_P_label_STRING_TOKEN CCU4_0_COUNTER
#define DT_N_S_soc_S_counter_4000c100_P_label_STRING_UPPER_TOKEN CCU4_0_COUNTER
#define DT_N_S_soc_S_counter_4000c100_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_4000c100, label, 0) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 1) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 2) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 3) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 4) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 5) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 6) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 7) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 8) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 9) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 10) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 11) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 12) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 13)
#define DT_N_S_soc_S_counter_4000c100_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_4000c100, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 12, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, label, 13, __VA_ARGS__)
#define DT_N_S_soc_S_counter_4000c100_P_label_EXISTS 1
#define DT_N_S_soc_S_counter_4000c100_P_interrupts {44 /* 0x2c */, 0 /* 0x0 */}
#define DT_N_S_soc_S_counter_4000c100_P_interrupts_IDX_0 44
#define DT_N_S_soc_S_counter_4000c100_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_4000c100_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_counter_4000c100_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_counter_4000c100_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_4000c100, interrupts, 0) \
	fn(DT_N_S_soc_S_counter_4000c100, interrupts, 1)
#define DT_N_S_soc_S_counter_4000c100_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_4000c100, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_counter_4000c100_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_counter_4000c100_P_prescale 15
#define DT_N_S_soc_S_counter_4000c100_P_prescale_EXISTS 1
#define DT_N_S_soc_S_counter_4000c100_P_status "okay"
#define DT_N_S_soc_S_counter_4000c100_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_counter_4000c100_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_counter_4000c100_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_counter_4000c100_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_counter_4000c100_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_counter_4000c100_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_4000c100, status, 0) \
	fn(DT_N_S_soc_S_counter_4000c100, status, 1) \
	fn(DT_N_S_soc_S_counter_4000c100, status, 2) \
	fn(DT_N_S_soc_S_counter_4000c100, status, 3)
#define DT_N_S_soc_S_counter_4000c100_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_4000c100, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_counter_4000c100, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_counter_4000c100_P_status_EXISTS 1
#define DT_N_S_soc_S_counter_4000c100_P_compatible {"infineon,xmc-ccu4-0-counter"}
#define DT_N_S_soc_S_counter_4000c100_P_compatible_IDX_0 "infineon,xmc-ccu4-0-counter"
#define DT_N_S_soc_S_counter_4000c100_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_counter_4000c100_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_counter_4000c100, compatible, 0)
#define DT_N_S_soc_S_counter_4000c100_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_counter_4000c100, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_counter_4000c100_P_compatible_LEN 1
#define DT_N_S_soc_S_counter_4000c100_P_compatible_EXISTS 1
#define DT_N_S_soc_S_counter_4000c100_P_wakeup_source 0
#define DT_N_S_soc_S_counter_4000c100_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/ethernet@5000c000
 *
 * Node identifier: DT_N_S_soc_S_ethernet_5000c000
 *
 * Binding (compatible = infineon,xmc-ethernet):
 *   /home/sebin/thesis/dmz/zephyr_xmc_template/drivers/zephyr/dts/bindings/infineon,xmc-ethernet.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_ethernet_5000c000_PATH "/soc/ethernet@5000c000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_ethernet_5000c000_FULL_NAME "ethernet@5000c000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_ethernet_5000c000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_ethernet_5000c000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_ethernet_5000c000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_ethernet_5000c000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_ethernet_5000c000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_ethernet_5000c000_ORD 13

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_ethernet_5000c000_REQUIRES_ORDS \
	9, /* /soc */ \
	11, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_ethernet_5000c000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_ethernet_5000c000_EXISTS 1
#define DT_N_INST_0_infineon_xmc_ethernet DT_N_S_soc_S_ethernet_5000c000
#define DT_N_NODELABEL_xethernet          DT_N_S_soc_S_ethernet_5000c000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_ethernet_5000c000_REG_NUM 1
#define DT_N_S_soc_S_ethernet_5000c000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_5000c000_REG_IDX_0_VAL_ADDRESS 1342226432 /* 0x5000c000 */
#define DT_N_S_soc_S_ethernet_5000c000_REG_IDX_0_VAL_SIZE 4188 /* 0x105c */
#define DT_N_S_soc_S_ethernet_5000c000_RANGES_NUM 0
#define DT_N_S_soc_S_ethernet_5000c000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_ethernet_5000c000_IRQ_NUM 1
#define DT_N_S_soc_S_ethernet_5000c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_5000c000_IRQ_IDX_0_VAL_irq 108
#define DT_N_S_soc_S_ethernet_5000c000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_ethernet_5000c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_5000c000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_ethernet_5000c000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_ethernet_5000c000_COMPAT_MATCHES_infineon_xmc_ethernet 1
#define DT_N_S_soc_S_ethernet_5000c000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_ethernet_5000c000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_ethernet_5000c000_P_reg {1342226432 /* 0x5000c000 */, 4188 /* 0x105c */}
#define DT_N_S_soc_S_ethernet_5000c000_P_reg_IDX_0 1342226432
#define DT_N_S_soc_S_ethernet_5000c000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_5000c000_P_reg_IDX_1 4188
#define DT_N_S_soc_S_ethernet_5000c000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ethernet_5000c000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_5000c000, reg, 0) \
	fn(DT_N_S_soc_S_ethernet_5000c000, reg, 1)
#define DT_N_S_soc_S_ethernet_5000c000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_5000c000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_5000c000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_5000c000_P_reg_EXISTS 1
#define DT_N_S_soc_S_ethernet_5000c000_P_interrupts {108 /* 0x6c */, 0 /* 0x0 */}
#define DT_N_S_soc_S_ethernet_5000c000_P_interrupts_IDX_0 108
#define DT_N_S_soc_S_ethernet_5000c000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_5000c000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_ethernet_5000c000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ethernet_5000c000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_5000c000, interrupts, 0) \
	fn(DT_N_S_soc_S_ethernet_5000c000, interrupts, 1)
#define DT_N_S_soc_S_ethernet_5000c000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_5000c000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_5000c000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_5000c000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_ethernet_5000c000_P_label "xmc_ethernet"
#define DT_N_S_soc_S_ethernet_5000c000_P_label_STRING_TOKEN xmc_ethernet
#define DT_N_S_soc_S_ethernet_5000c000_P_label_STRING_UPPER_TOKEN XMC_ETHERNET
#define DT_N_S_soc_S_ethernet_5000c000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_5000c000, label, 0) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 1) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 2) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 3) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 4) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 5) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 6) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 7) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 8) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 9) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 10) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 11)
#define DT_N_S_soc_S_ethernet_5000c000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_5000c000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_5000c000, label, 11, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_5000c000_P_label_EXISTS 1
#define DT_N_S_soc_S_ethernet_5000c000_P_zephyr_random_mac_address 0
#define DT_N_S_soc_S_ethernet_5000c000_P_zephyr_random_mac_address_EXISTS 1
#define DT_N_S_soc_S_ethernet_5000c000_P_status "okay"
#define DT_N_S_soc_S_ethernet_5000c000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_ethernet_5000c000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_ethernet_5000c000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_ethernet_5000c000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_ethernet_5000c000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_ethernet_5000c000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_5000c000, status, 0) \
	fn(DT_N_S_soc_S_ethernet_5000c000, status, 1) \
	fn(DT_N_S_soc_S_ethernet_5000c000, status, 2) \
	fn(DT_N_S_soc_S_ethernet_5000c000, status, 3)
#define DT_N_S_soc_S_ethernet_5000c000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_5000c000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_5000c000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_5000c000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_5000c000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_5000c000_P_status_EXISTS 1
#define DT_N_S_soc_S_ethernet_5000c000_P_compatible {"infineon,xmc-ethernet"}
#define DT_N_S_soc_S_ethernet_5000c000_P_compatible_IDX_0 "infineon,xmc-ethernet"
#define DT_N_S_soc_S_ethernet_5000c000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_5000c000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_5000c000, compatible, 0)
#define DT_N_S_soc_S_ethernet_5000c000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_5000c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_5000c000_P_compatible_LEN 1
#define DT_N_S_soc_S_ethernet_5000c000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_ethernet_5000c000_P_wakeup_source 0
#define DT_N_S_soc_S_ethernet_5000c000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/mux_0
 *
 * Node identifier: DT_N_S_soc_S_mux_0
 *
 * Binding (compatible = ti,tmux1208):
 *   /home/sebin/thesis/dmz/zephyr_xmc_template/drivers/zephyr/dts/bindings/tmux1208.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_mux_0_PATH "/soc/mux_0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_mux_0_FULL_NAME "mux_0"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_mux_0_PARENT DT_N_S_soc
#define DT_N_S_soc_S_mux_0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_mux_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_mux_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_mux_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_mux_0_ORD 14

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_mux_0_REQUIRES_ORDS \
	9, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_mux_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_mux_0_EXISTS 1
#define DT_N_INST_0_ti_tmux1208 DT_N_S_soc_S_mux_0
#define DT_N_NODELABEL_mux0     DT_N_S_soc_S_mux_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_mux_0_REG_NUM 0
#define DT_N_S_soc_S_mux_0_RANGES_NUM 0
#define DT_N_S_soc_S_mux_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_mux_0_IRQ_NUM 0
#define DT_N_S_soc_S_mux_0_COMPAT_MATCHES_ti_tmux1208 1
#define DT_N_S_soc_S_mux_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_mux_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_mux_0_P_addr_gpios {0 /* 0x0 */, 1 /* 0x1 */, 2 /* 0x2 */}
#define DT_N_S_soc_S_mux_0_P_addr_gpios_IDX_0 0
#define DT_N_S_soc_S_mux_0_P_addr_gpios_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mux_0_P_addr_gpios_IDX_1 1
#define DT_N_S_soc_S_mux_0_P_addr_gpios_IDX_1_EXISTS 1
#define DT_N_S_soc_S_mux_0_P_addr_gpios_IDX_2 2
#define DT_N_S_soc_S_mux_0_P_addr_gpios_IDX_2_EXISTS 1
#define DT_N_S_soc_S_mux_0_P_addr_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_mux_0, addr_gpios, 0) \
	fn(DT_N_S_soc_S_mux_0, addr_gpios, 1) \
	fn(DT_N_S_soc_S_mux_0, addr_gpios, 2)
#define DT_N_S_soc_S_mux_0_P_addr_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_mux_0, addr_gpios, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_mux_0, addr_gpios, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_mux_0, addr_gpios, 2, __VA_ARGS__)
#define DT_N_S_soc_S_mux_0_P_addr_gpios_LEN 3
#define DT_N_S_soc_S_mux_0_P_addr_gpios_EXISTS 1
#define DT_N_S_soc_S_mux_0_P_label "Mux 0"
#define DT_N_S_soc_S_mux_0_P_label_STRING_TOKEN Mux_0
#define DT_N_S_soc_S_mux_0_P_label_STRING_UPPER_TOKEN MUX_0
#define DT_N_S_soc_S_mux_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_mux_0, label, 0) \
	fn(DT_N_S_soc_S_mux_0, label, 1) \
	fn(DT_N_S_soc_S_mux_0, label, 2) \
	fn(DT_N_S_soc_S_mux_0, label, 3) \
	fn(DT_N_S_soc_S_mux_0, label, 4)
#define DT_N_S_soc_S_mux_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_mux_0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_mux_0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_mux_0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_mux_0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_mux_0, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_mux_0_P_label_EXISTS 1

/*
 * Devicetree node: /soc/mux_1
 *
 * Node identifier: DT_N_S_soc_S_mux_1
 *
 * Binding (compatible = ti,tmux1208):
 *   /home/sebin/thesis/dmz/zephyr_xmc_template/drivers/zephyr/dts/bindings/tmux1208.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_mux_1_PATH "/soc/mux_1"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_mux_1_FULL_NAME "mux_1"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_mux_1_PARENT DT_N_S_soc
#define DT_N_S_soc_S_mux_1_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_mux_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_mux_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_mux_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_mux_1_ORD 15

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_mux_1_REQUIRES_ORDS \
	9, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_mux_1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_mux_1_EXISTS 1
#define DT_N_INST_1_ti_tmux1208 DT_N_S_soc_S_mux_1
#define DT_N_NODELABEL_mux1     DT_N_S_soc_S_mux_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_mux_1_REG_NUM 0
#define DT_N_S_soc_S_mux_1_RANGES_NUM 0
#define DT_N_S_soc_S_mux_1_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_mux_1_IRQ_NUM 0
#define DT_N_S_soc_S_mux_1_COMPAT_MATCHES_ti_tmux1208 1
#define DT_N_S_soc_S_mux_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_mux_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_mux_1_P_addr_gpios {3 /* 0x3 */, 4 /* 0x4 */, 5 /* 0x5 */}
#define DT_N_S_soc_S_mux_1_P_addr_gpios_IDX_0 3
#define DT_N_S_soc_S_mux_1_P_addr_gpios_IDX_0_EXISTS 1
#define DT_N_S_soc_S_mux_1_P_addr_gpios_IDX_1 4
#define DT_N_S_soc_S_mux_1_P_addr_gpios_IDX_1_EXISTS 1
#define DT_N_S_soc_S_mux_1_P_addr_gpios_IDX_2 5
#define DT_N_S_soc_S_mux_1_P_addr_gpios_IDX_2_EXISTS 1
#define DT_N_S_soc_S_mux_1_P_addr_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_mux_1, addr_gpios, 0) \
	fn(DT_N_S_soc_S_mux_1, addr_gpios, 1) \
	fn(DT_N_S_soc_S_mux_1, addr_gpios, 2)
#define DT_N_S_soc_S_mux_1_P_addr_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_mux_1, addr_gpios, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_mux_1, addr_gpios, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_mux_1, addr_gpios, 2, __VA_ARGS__)
#define DT_N_S_soc_S_mux_1_P_addr_gpios_LEN 3
#define DT_N_S_soc_S_mux_1_P_addr_gpios_EXISTS 1
#define DT_N_S_soc_S_mux_1_P_label "Mux 1"
#define DT_N_S_soc_S_mux_1_P_label_STRING_TOKEN Mux_1
#define DT_N_S_soc_S_mux_1_P_label_STRING_UPPER_TOKEN MUX_1
#define DT_N_S_soc_S_mux_1_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_mux_1, label, 0) \
	fn(DT_N_S_soc_S_mux_1, label, 1) \
	fn(DT_N_S_soc_S_mux_1, label, 2) \
	fn(DT_N_S_soc_S_mux_1, label, 3) \
	fn(DT_N_S_soc_S_mux_1, label, 4)
#define DT_N_S_soc_S_mux_1_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_mux_1, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_mux_1, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_mux_1, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_mux_1, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_mux_1, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_mux_1_P_label_EXISTS 1

/*
 * Devicetree node: /soc/timer@e000e010
 *
 * Node identifier: DT_N_S_soc_S_timer_e000e010
 */

/* Node's full path: */
#define DT_N_S_soc_S_timer_e000e010_PATH "/soc/timer@e000e010"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_timer_e000e010_FULL_NAME "timer@e000e010"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_timer_e000e010_PARENT DT_N_S_soc
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_timer_e000e010_ORD 16

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_timer_e000e010_REQUIRES_ORDS \
	9, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_timer_e000e010_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_timer_e000e010_EXISTS 1
#define DT_N_INST_0_arm_armv7m_systick DT_N_S_soc_S_timer_e000e010
#define DT_N_NODELABEL_systick         DT_N_S_soc_S_timer_e000e010

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_timer_e000e010_REG_NUM 1
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_VAL_ADDRESS 3758153744 /* 0xe000e010 */
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_VAL_SIZE 16 /* 0x10 */
#define DT_N_S_soc_S_timer_e000e010_RANGES_NUM 0
#define DT_N_S_soc_S_timer_e000e010_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_timer_e000e010_IRQ_NUM 0
#define DT_N_S_soc_S_timer_e000e010_COMPAT_MATCHES_arm_armv7m_systick 1
#define DT_N_S_soc_S_timer_e000e010_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_timer_e000e010_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_timer_e000e010_P_compatible {"arm,armv7m-systick"}
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0 "arm,armv7m-systick"
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_LEN 1
#define DT_N_S_soc_S_timer_e000e010_P_compatible_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_reg {3758153744 /* 0xe000e010 */, 16 /* 0x10 */}
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_0 3758153744
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_1 16
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_timer_e000e010, reg, 0) \
	fn(DT_N_S_soc_S_timer_e000e010, reg, 1)
#define DT_N_S_soc_S_timer_e000e010_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_timer_e000e010, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e000e010, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e000e010_P_reg_EXISTS 1

/*
 * Devicetree node: /soc/usic@40030000
 *
 * Node identifier: DT_N_S_soc_S_usic_40030000
 */

/* Node's full path: */
#define DT_N_S_soc_S_usic_40030000_PATH "/soc/usic@40030000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_usic_40030000_FULL_NAME "usic@40030000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_usic_40030000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_usic_40030000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_usic_40030000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_usic_40030000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_usic_40030000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_usic_40030000_ORD 17

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_usic_40030000_REQUIRES_ORDS \
	9, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_usic_40030000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_usic_40030000_EXISTS 1
#define DT_N_NODELABEL_usic0ch0 DT_N_S_soc_S_usic_40030000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_usic_40030000_REG_NUM 1
#define DT_N_S_soc_S_usic_40030000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usic_40030000_REG_IDX_0_VAL_ADDRESS 1073938432 /* 0x40030000 */
#define DT_N_S_soc_S_usic_40030000_REG_IDX_0_VAL_SIZE 511 /* 0x1ff */
#define DT_N_S_soc_S_usic_40030000_RANGES_NUM 0
#define DT_N_S_soc_S_usic_40030000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_usic_40030000_IRQ_NUM 0
#define DT_N_S_soc_S_usic_40030000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_usic_40030000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_usic_40030000_P_reg {1073938432 /* 0x40030000 */, 511 /* 0x1ff */}
#define DT_N_S_soc_S_usic_40030000_P_reg_IDX_0 1073938432
#define DT_N_S_soc_S_usic_40030000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usic_40030000_P_reg_IDX_1 511
#define DT_N_S_soc_S_usic_40030000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usic_40030000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usic_40030000, reg, 0) \
	fn(DT_N_S_soc_S_usic_40030000, reg, 1)
#define DT_N_S_soc_S_usic_40030000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usic_40030000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_40030000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usic_40030000_P_reg_EXISTS 1
#define DT_N_S_soc_S_usic_40030000_P_status "disabled"
#define DT_N_S_soc_S_usic_40030000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_usic_40030000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_usic_40030000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_usic_40030000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_usic_40030000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_usic_40030000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usic_40030000, status, 0) \
	fn(DT_N_S_soc_S_usic_40030000, status, 1) \
	fn(DT_N_S_soc_S_usic_40030000, status, 2) \
	fn(DT_N_S_soc_S_usic_40030000, status, 3) \
	fn(DT_N_S_soc_S_usic_40030000, status, 4) \
	fn(DT_N_S_soc_S_usic_40030000, status, 5) \
	fn(DT_N_S_soc_S_usic_40030000, status, 6) \
	fn(DT_N_S_soc_S_usic_40030000, status, 7)
#define DT_N_S_soc_S_usic_40030000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usic_40030000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_40030000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_40030000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_40030000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_40030000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_40030000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_40030000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_40030000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_usic_40030000_P_status_EXISTS 1

/*
 * Devicetree node: /soc/usic@40030200
 *
 * Node identifier: DT_N_S_soc_S_usic_40030200
 */

/* Node's full path: */
#define DT_N_S_soc_S_usic_40030200_PATH "/soc/usic@40030200"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_usic_40030200_FULL_NAME "usic@40030200"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_usic_40030200_PARENT DT_N_S_soc
#define DT_N_S_soc_S_usic_40030200_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_usic_40030200_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_usic_40030200_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_usic_40030200_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_usic_40030200_ORD 18

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_usic_40030200_REQUIRES_ORDS \
	9, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_usic_40030200_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_usic_40030200_EXISTS 1
#define DT_N_NODELABEL_usic0ch1 DT_N_S_soc_S_usic_40030200

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_usic_40030200_REG_NUM 1
#define DT_N_S_soc_S_usic_40030200_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usic_40030200_REG_IDX_0_VAL_ADDRESS 1073938944 /* 0x40030200 */
#define DT_N_S_soc_S_usic_40030200_REG_IDX_0_VAL_SIZE 511 /* 0x1ff */
#define DT_N_S_soc_S_usic_40030200_RANGES_NUM 0
#define DT_N_S_soc_S_usic_40030200_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_usic_40030200_IRQ_NUM 0
#define DT_N_S_soc_S_usic_40030200_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_usic_40030200_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_usic_40030200_P_reg {1073938944 /* 0x40030200 */, 511 /* 0x1ff */}
#define DT_N_S_soc_S_usic_40030200_P_reg_IDX_0 1073938944
#define DT_N_S_soc_S_usic_40030200_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usic_40030200_P_reg_IDX_1 511
#define DT_N_S_soc_S_usic_40030200_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usic_40030200_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usic_40030200, reg, 0) \
	fn(DT_N_S_soc_S_usic_40030200, reg, 1)
#define DT_N_S_soc_S_usic_40030200_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usic_40030200, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_40030200, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usic_40030200_P_reg_EXISTS 1
#define DT_N_S_soc_S_usic_40030200_P_status "disabled"
#define DT_N_S_soc_S_usic_40030200_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_usic_40030200_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_usic_40030200_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_usic_40030200_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_usic_40030200_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_usic_40030200_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usic_40030200, status, 0) \
	fn(DT_N_S_soc_S_usic_40030200, status, 1) \
	fn(DT_N_S_soc_S_usic_40030200, status, 2) \
	fn(DT_N_S_soc_S_usic_40030200, status, 3) \
	fn(DT_N_S_soc_S_usic_40030200, status, 4) \
	fn(DT_N_S_soc_S_usic_40030200, status, 5) \
	fn(DT_N_S_soc_S_usic_40030200, status, 6) \
	fn(DT_N_S_soc_S_usic_40030200, status, 7)
#define DT_N_S_soc_S_usic_40030200_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usic_40030200, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_40030200, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_40030200, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_40030200, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_40030200, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_40030200, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_40030200, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_40030200, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_usic_40030200_P_status_EXISTS 1

/*
 * Devicetree node: /system-clock
 *
 * Node identifier: DT_N_S_system_clock
 *
 * Binding (compatible = fixed-clock):
 *   /home/sebin/thesis/zephyrproject/zephyr/dts/bindings/clock/fixed-clock.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_system_clock_PATH "/system-clock"

/* Node's name with unit-address: */
#define DT_N_S_system_clock_FULL_NAME "system-clock"

/* Node parent (/) identifier: */
#define DT_N_S_system_clock_PARENT DT_N
#define DT_N_S_system_clock_FOREACH_CHILD(fn) 
#define DT_N_S_system_clock_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_system_clock_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_system_clock_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_system_clock_ORD 19

/* Ordinals for what this node depends on directly: */
#define DT_N_S_system_clock_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_system_clock_SUPPORTS_ORDS \
	20, /* /soc/usic@48020000 */ \
	21, /* /soc/usic@48020200 */

/* Existence and alternate IDs: */
#define DT_N_S_system_clock_EXISTS 1
#define DT_N_INST_0_fixed_clock DT_N_S_system_clock
#define DT_N_NODELABEL_sysclk   DT_N_S_system_clock

/* Macros for properties that are special in the specification: */
#define DT_N_S_system_clock_REG_NUM 0
#define DT_N_S_system_clock_RANGES_NUM 0
#define DT_N_S_system_clock_FOREACH_RANGE(fn) 
#define DT_N_S_system_clock_IRQ_NUM 0
#define DT_N_S_system_clock_COMPAT_MATCHES_fixed_clock 1
#define DT_N_S_system_clock_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_system_clock_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_system_clock_P_clock_frequency 120000000
#define DT_N_S_system_clock_P_clock_frequency_EXISTS 1

/*
 * Devicetree node: /soc/usic@48020000
 *
 * Node identifier: DT_N_S_soc_S_usic_48020000
 *
 * Binding (compatible = infineon,xmc4xxx-uart):
 *   /home/sebin/thesis/zephyrproject/zephyr/dts/bindings/serial/infineon,xmc4xxx-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_usic_48020000_PATH "/soc/usic@48020000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_usic_48020000_FULL_NAME "usic@48020000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_usic_48020000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_usic_48020000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_usic_48020000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_usic_48020000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_usic_48020000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_usic_48020000_ORD 20

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_usic_48020000_REQUIRES_ORDS \
	9, /* /soc */ \
	19, /* /system-clock */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_usic_48020000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_usic_48020000_EXISTS 1
#define DT_N_INST_0_infineon_xmc4xxx_uart DT_N_S_soc_S_usic_48020000
#define DT_N_NODELABEL_usic1ch0           DT_N_S_soc_S_usic_48020000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_usic_48020000_REG_NUM 1
#define DT_N_S_soc_S_usic_48020000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usic_48020000_REG_IDX_0_VAL_ADDRESS 1208090624 /* 0x48020000 */
#define DT_N_S_soc_S_usic_48020000_REG_IDX_0_VAL_SIZE 511 /* 0x1ff */
#define DT_N_S_soc_S_usic_48020000_RANGES_NUM 0
#define DT_N_S_soc_S_usic_48020000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_usic_48020000_IRQ_NUM 0
#define DT_N_S_soc_S_usic_48020000_COMPAT_MATCHES_infineon_xmc4xxx_uart 1
#define DT_N_S_soc_S_usic_48020000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_usic_48020000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_usic_48020000_P_reg {1208090624 /* 0x48020000 */, 511 /* 0x1ff */}
#define DT_N_S_soc_S_usic_48020000_P_reg_IDX_0 1208090624
#define DT_N_S_soc_S_usic_48020000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usic_48020000_P_reg_IDX_1 511
#define DT_N_S_soc_S_usic_48020000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usic_48020000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usic_48020000, reg, 0) \
	fn(DT_N_S_soc_S_usic_48020000, reg, 1)
#define DT_N_S_soc_S_usic_48020000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usic_48020000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48020000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usic_48020000_P_reg_EXISTS 1
#define DT_N_S_soc_S_usic_48020000_P_current_speed 115200
#define DT_N_S_soc_S_usic_48020000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_usic_48020000_P_label "UART_4"
#define DT_N_S_soc_S_usic_48020000_P_label_STRING_TOKEN UART_4
#define DT_N_S_soc_S_usic_48020000_P_label_STRING_UPPER_TOKEN UART_4
#define DT_N_S_soc_S_usic_48020000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usic_48020000, label, 0) \
	fn(DT_N_S_soc_S_usic_48020000, label, 1) \
	fn(DT_N_S_soc_S_usic_48020000, label, 2) \
	fn(DT_N_S_soc_S_usic_48020000, label, 3) \
	fn(DT_N_S_soc_S_usic_48020000, label, 4) \
	fn(DT_N_S_soc_S_usic_48020000, label, 5)
#define DT_N_S_soc_S_usic_48020000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usic_48020000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48020000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48020000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48020000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48020000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48020000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_usic_48020000_P_label_EXISTS 1
#define DT_N_S_soc_S_usic_48020000_P_hw_flow_control 0
#define DT_N_S_soc_S_usic_48020000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_usic_48020000_P_status "okay"
#define DT_N_S_soc_S_usic_48020000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_usic_48020000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_usic_48020000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_usic_48020000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_usic_48020000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_usic_48020000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usic_48020000, status, 0) \
	fn(DT_N_S_soc_S_usic_48020000, status, 1) \
	fn(DT_N_S_soc_S_usic_48020000, status, 2) \
	fn(DT_N_S_soc_S_usic_48020000, status, 3)
#define DT_N_S_soc_S_usic_48020000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usic_48020000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48020000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48020000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48020000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_usic_48020000_P_status_EXISTS 1
#define DT_N_S_soc_S_usic_48020000_P_compatible {"infineon,xmc4xxx-uart"}
#define DT_N_S_soc_S_usic_48020000_P_compatible_IDX_0 "infineon,xmc4xxx-uart"
#define DT_N_S_soc_S_usic_48020000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usic_48020000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usic_48020000, compatible, 0)
#define DT_N_S_soc_S_usic_48020000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usic_48020000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usic_48020000_P_compatible_LEN 1
#define DT_N_S_soc_S_usic_48020000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_usic_48020000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usic_48020000_P_clocks_IDX_0_PH DT_N_S_system_clock
#define DT_N_S_soc_S_usic_48020000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usic_48020000, clocks, 0)
#define DT_N_S_soc_S_usic_48020000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usic_48020000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usic_48020000_P_clocks_LEN 1
#define DT_N_S_soc_S_usic_48020000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_usic_48020000_P_wakeup_source 0
#define DT_N_S_soc_S_usic_48020000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/usic@48020200
 *
 * Node identifier: DT_N_S_soc_S_usic_48020200
 *
 * Binding (compatible = infineon,xmc4xxx-uart):
 *   /home/sebin/thesis/zephyrproject/zephyr/dts/bindings/serial/infineon,xmc4xxx-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_usic_48020200_PATH "/soc/usic@48020200"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_usic_48020200_FULL_NAME "usic@48020200"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_usic_48020200_PARENT DT_N_S_soc
#define DT_N_S_soc_S_usic_48020200_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_usic_48020200_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_usic_48020200_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_usic_48020200_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_usic_48020200_ORD 21

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_usic_48020200_REQUIRES_ORDS \
	9, /* /soc */ \
	19, /* /system-clock */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_usic_48020200_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_usic_48020200_EXISTS 1
#define DT_N_INST_1_infineon_xmc4xxx_uart DT_N_S_soc_S_usic_48020200
#define DT_N_NODELABEL_usic1ch1           DT_N_S_soc_S_usic_48020200

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_usic_48020200_REG_NUM 1
#define DT_N_S_soc_S_usic_48020200_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usic_48020200_REG_IDX_0_VAL_ADDRESS 1208091136 /* 0x48020200 */
#define DT_N_S_soc_S_usic_48020200_REG_IDX_0_VAL_SIZE 511 /* 0x1ff */
#define DT_N_S_soc_S_usic_48020200_RANGES_NUM 0
#define DT_N_S_soc_S_usic_48020200_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_usic_48020200_IRQ_NUM 0
#define DT_N_S_soc_S_usic_48020200_COMPAT_MATCHES_infineon_xmc4xxx_uart 1
#define DT_N_S_soc_S_usic_48020200_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_usic_48020200_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_usic_48020200_P_reg {1208091136 /* 0x48020200 */, 511 /* 0x1ff */}
#define DT_N_S_soc_S_usic_48020200_P_reg_IDX_0 1208091136
#define DT_N_S_soc_S_usic_48020200_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usic_48020200_P_reg_IDX_1 511
#define DT_N_S_soc_S_usic_48020200_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usic_48020200_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usic_48020200, reg, 0) \
	fn(DT_N_S_soc_S_usic_48020200, reg, 1)
#define DT_N_S_soc_S_usic_48020200_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usic_48020200, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48020200, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usic_48020200_P_reg_EXISTS 1
#define DT_N_S_soc_S_usic_48020200_P_current_speed 115200
#define DT_N_S_soc_S_usic_48020200_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_usic_48020200_P_label "UART_0"
#define DT_N_S_soc_S_usic_48020200_P_label_STRING_TOKEN UART_0
#define DT_N_S_soc_S_usic_48020200_P_label_STRING_UPPER_TOKEN UART_0
#define DT_N_S_soc_S_usic_48020200_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usic_48020200, label, 0) \
	fn(DT_N_S_soc_S_usic_48020200, label, 1) \
	fn(DT_N_S_soc_S_usic_48020200, label, 2) \
	fn(DT_N_S_soc_S_usic_48020200, label, 3) \
	fn(DT_N_S_soc_S_usic_48020200, label, 4) \
	fn(DT_N_S_soc_S_usic_48020200, label, 5)
#define DT_N_S_soc_S_usic_48020200_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usic_48020200, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48020200, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48020200, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48020200, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48020200, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48020200, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_usic_48020200_P_label_EXISTS 1
#define DT_N_S_soc_S_usic_48020200_P_hw_flow_control 0
#define DT_N_S_soc_S_usic_48020200_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_usic_48020200_P_status "okay"
#define DT_N_S_soc_S_usic_48020200_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_usic_48020200_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_usic_48020200_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_usic_48020200_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_usic_48020200_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_usic_48020200_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usic_48020200, status, 0) \
	fn(DT_N_S_soc_S_usic_48020200, status, 1) \
	fn(DT_N_S_soc_S_usic_48020200, status, 2) \
	fn(DT_N_S_soc_S_usic_48020200, status, 3)
#define DT_N_S_soc_S_usic_48020200_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usic_48020200, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48020200, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48020200, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48020200, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_usic_48020200_P_status_EXISTS 1
#define DT_N_S_soc_S_usic_48020200_P_compatible {"infineon,xmc4xxx-uart"}
#define DT_N_S_soc_S_usic_48020200_P_compatible_IDX_0 "infineon,xmc4xxx-uart"
#define DT_N_S_soc_S_usic_48020200_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usic_48020200_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usic_48020200, compatible, 0)
#define DT_N_S_soc_S_usic_48020200_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usic_48020200, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usic_48020200_P_compatible_LEN 1
#define DT_N_S_soc_S_usic_48020200_P_compatible_EXISTS 1
#define DT_N_S_soc_S_usic_48020200_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usic_48020200_P_clocks_IDX_0_PH DT_N_S_system_clock
#define DT_N_S_soc_S_usic_48020200_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usic_48020200, clocks, 0)
#define DT_N_S_soc_S_usic_48020200_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usic_48020200, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_usic_48020200_P_clocks_LEN 1
#define DT_N_S_soc_S_usic_48020200_P_clocks_EXISTS 1
#define DT_N_S_soc_S_usic_48020200_P_wakeup_source 0
#define DT_N_S_soc_S_usic_48020200_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/usic@48024000
 *
 * Node identifier: DT_N_S_soc_S_usic_48024000
 */

/* Node's full path: */
#define DT_N_S_soc_S_usic_48024000_PATH "/soc/usic@48024000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_usic_48024000_FULL_NAME "usic@48024000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_usic_48024000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_usic_48024000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_usic_48024000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_usic_48024000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_usic_48024000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_usic_48024000_ORD 22

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_usic_48024000_REQUIRES_ORDS \
	9, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_usic_48024000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_usic_48024000_EXISTS 1
#define DT_N_NODELABEL_usic2ch0 DT_N_S_soc_S_usic_48024000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_usic_48024000_REG_NUM 1
#define DT_N_S_soc_S_usic_48024000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usic_48024000_REG_IDX_0_VAL_ADDRESS 1208107008 /* 0x48024000 */
#define DT_N_S_soc_S_usic_48024000_REG_IDX_0_VAL_SIZE 511 /* 0x1ff */
#define DT_N_S_soc_S_usic_48024000_RANGES_NUM 0
#define DT_N_S_soc_S_usic_48024000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_usic_48024000_IRQ_NUM 0
#define DT_N_S_soc_S_usic_48024000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_usic_48024000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_usic_48024000_P_reg {1208107008 /* 0x48024000 */, 511 /* 0x1ff */}
#define DT_N_S_soc_S_usic_48024000_P_reg_IDX_0 1208107008
#define DT_N_S_soc_S_usic_48024000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usic_48024000_P_reg_IDX_1 511
#define DT_N_S_soc_S_usic_48024000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usic_48024000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usic_48024000, reg, 0) \
	fn(DT_N_S_soc_S_usic_48024000, reg, 1)
#define DT_N_S_soc_S_usic_48024000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usic_48024000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48024000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usic_48024000_P_reg_EXISTS 1
#define DT_N_S_soc_S_usic_48024000_P_status "disabled"
#define DT_N_S_soc_S_usic_48024000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_usic_48024000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_usic_48024000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_usic_48024000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_usic_48024000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_usic_48024000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usic_48024000, status, 0) \
	fn(DT_N_S_soc_S_usic_48024000, status, 1) \
	fn(DT_N_S_soc_S_usic_48024000, status, 2) \
	fn(DT_N_S_soc_S_usic_48024000, status, 3) \
	fn(DT_N_S_soc_S_usic_48024000, status, 4) \
	fn(DT_N_S_soc_S_usic_48024000, status, 5) \
	fn(DT_N_S_soc_S_usic_48024000, status, 6) \
	fn(DT_N_S_soc_S_usic_48024000, status, 7)
#define DT_N_S_soc_S_usic_48024000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usic_48024000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48024000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48024000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48024000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48024000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48024000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48024000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48024000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_usic_48024000_P_status_EXISTS 1

/*
 * Devicetree node: /soc/usic@48024200
 *
 * Node identifier: DT_N_S_soc_S_usic_48024200
 */

/* Node's full path: */
#define DT_N_S_soc_S_usic_48024200_PATH "/soc/usic@48024200"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_usic_48024200_FULL_NAME "usic@48024200"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_usic_48024200_PARENT DT_N_S_soc
#define DT_N_S_soc_S_usic_48024200_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_usic_48024200_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_usic_48024200_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_usic_48024200_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_usic_48024200_ORD 23

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_usic_48024200_REQUIRES_ORDS \
	9, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_usic_48024200_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_usic_48024200_EXISTS 1
#define DT_N_NODELABEL_usic2ch1 DT_N_S_soc_S_usic_48024200

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_usic_48024200_REG_NUM 1
#define DT_N_S_soc_S_usic_48024200_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usic_48024200_REG_IDX_0_VAL_ADDRESS 1208107520 /* 0x48024200 */
#define DT_N_S_soc_S_usic_48024200_REG_IDX_0_VAL_SIZE 511 /* 0x1ff */
#define DT_N_S_soc_S_usic_48024200_RANGES_NUM 0
#define DT_N_S_soc_S_usic_48024200_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_usic_48024200_IRQ_NUM 0
#define DT_N_S_soc_S_usic_48024200_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_usic_48024200_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_usic_48024200_P_reg {1208107520 /* 0x48024200 */, 511 /* 0x1ff */}
#define DT_N_S_soc_S_usic_48024200_P_reg_IDX_0 1208107520
#define DT_N_S_soc_S_usic_48024200_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_usic_48024200_P_reg_IDX_1 511
#define DT_N_S_soc_S_usic_48024200_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_usic_48024200_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usic_48024200, reg, 0) \
	fn(DT_N_S_soc_S_usic_48024200, reg, 1)
#define DT_N_S_soc_S_usic_48024200_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usic_48024200, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48024200, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_usic_48024200_P_reg_EXISTS 1
#define DT_N_S_soc_S_usic_48024200_P_status "disabled"
#define DT_N_S_soc_S_usic_48024200_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_usic_48024200_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_usic_48024200_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_usic_48024200_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_usic_48024200_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_usic_48024200_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_usic_48024200, status, 0) \
	fn(DT_N_S_soc_S_usic_48024200, status, 1) \
	fn(DT_N_S_soc_S_usic_48024200, status, 2) \
	fn(DT_N_S_soc_S_usic_48024200, status, 3) \
	fn(DT_N_S_soc_S_usic_48024200, status, 4) \
	fn(DT_N_S_soc_S_usic_48024200, status, 5) \
	fn(DT_N_S_soc_S_usic_48024200, status, 6) \
	fn(DT_N_S_soc_S_usic_48024200, status, 7)
#define DT_N_S_soc_S_usic_48024200_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_usic_48024200, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48024200, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48024200, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48024200, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48024200, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48024200, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48024200, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_usic_48024200, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_usic_48024200_P_status_EXISTS 1

/*
 * Devicetree node: /soc/buttons
 *
 * Node identifier: DT_N_S_soc_S_buttons
 *
 * Binding (compatible = gpio-keys):
 *   /home/sebin/thesis/zephyrproject/zephyr/dts/bindings/gpio/gpio-keys.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_buttons_PATH "/soc/buttons"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_buttons_FULL_NAME "buttons"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_buttons_PARENT DT_N_S_soc
#define DT_N_S_soc_S_buttons_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_buttons_S_button_0)
#define DT_N_S_soc_S_buttons_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_buttons_S_button_0, __VA_ARGS__)
#define DT_N_S_soc_S_buttons_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_buttons_S_button_0) 
#define DT_N_S_soc_S_buttons_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_buttons_S_button_0, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_buttons_ORD 24

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_buttons_REQUIRES_ORDS \
	9, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_buttons_SUPPORTS_ORDS \
	26, /* /soc/buttons/button_0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_buttons_EXISTS 1
#define DT_N_INST_0_gpio_keys DT_N_S_soc_S_buttons

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_buttons_REG_NUM 0
#define DT_N_S_soc_S_buttons_RANGES_NUM 0
#define DT_N_S_soc_S_buttons_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_buttons_IRQ_NUM 0
#define DT_N_S_soc_S_buttons_COMPAT_MATCHES_gpio_keys 1
#define DT_N_S_soc_S_buttons_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_buttons_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_buttons_P_compatible {"gpio-keys"}
#define DT_N_S_soc_S_buttons_P_compatible_IDX_0 "gpio-keys"
#define DT_N_S_soc_S_buttons_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_buttons_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_buttons, compatible, 0)
#define DT_N_S_soc_S_buttons_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_buttons, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_buttons_P_compatible_LEN 1
#define DT_N_S_soc_S_buttons_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/gpio@48028100
 *
 * Node identifier: DT_N_S_soc_S_gpio_48028100
 *
 * Binding (compatible = infineon,xmc-gpio):
 *   /home/sebin/thesis/dmz/zephyr_xmc_template/drivers/zephyr/dts/bindings/infineon,xmc-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_48028100_PATH "/soc/gpio@48028100"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_48028100_FULL_NAME "gpio@48028100"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_48028100_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_48028100_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_48028100_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_48028100_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_48028100_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_48028100_ORD 25

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_48028100_REQUIRES_ORDS \
	9, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_48028100_SUPPORTS_ORDS \
	26, /* /soc/buttons/button_0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_48028100_EXISTS 1
#define DT_N_INST_0_infineon_xmc_gpio DT_N_S_soc_S_gpio_48028100
#define DT_N_NODELABEL_gpio1          DT_N_S_soc_S_gpio_48028100

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_48028100_REG_NUM 1
#define DT_N_S_soc_S_gpio_48028100_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_48028100_REG_IDX_0_VAL_ADDRESS 1208123648 /* 0x48028100 */
#define DT_N_S_soc_S_gpio_48028100_REG_IDX_0_VAL_SIZE 256 /* 0x100 */
#define DT_N_S_soc_S_gpio_48028100_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_48028100_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_48028100_IRQ_NUM 0
#define DT_N_S_soc_S_gpio_48028100_COMPAT_MATCHES_infineon_xmc_gpio 1
#define DT_N_S_soc_S_gpio_48028100_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_48028100_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_48028100_P_reg {1208123648 /* 0x48028100 */, 256 /* 0x100 */}
#define DT_N_S_soc_S_gpio_48028100_P_reg_IDX_0 1208123648
#define DT_N_S_soc_S_gpio_48028100_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_48028100_P_reg_IDX_1 256
#define DT_N_S_soc_S_gpio_48028100_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_48028100_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_48028100, reg, 0) \
	fn(DT_N_S_soc_S_gpio_48028100, reg, 1)
#define DT_N_S_soc_S_gpio_48028100_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_48028100, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_48028100, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_48028100_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_48028100_P_label "GPIO_1"
#define DT_N_S_soc_S_gpio_48028100_P_label_STRING_TOKEN GPIO_1
#define DT_N_S_soc_S_gpio_48028100_P_label_STRING_UPPER_TOKEN GPIO_1
#define DT_N_S_soc_S_gpio_48028100_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_48028100, label, 0) \
	fn(DT_N_S_soc_S_gpio_48028100, label, 1) \
	fn(DT_N_S_soc_S_gpio_48028100, label, 2) \
	fn(DT_N_S_soc_S_gpio_48028100, label, 3) \
	fn(DT_N_S_soc_S_gpio_48028100, label, 4) \
	fn(DT_N_S_soc_S_gpio_48028100, label, 5)
#define DT_N_S_soc_S_gpio_48028100_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_48028100, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_48028100, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_48028100, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_48028100, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_48028100, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_48028100, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_48028100_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_48028100_P_port 1
#define DT_N_S_soc_S_gpio_48028100_P_port_EXISTS 1
#define DT_N_S_soc_S_gpio_48028100_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_48028100_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_48028100_P_ngpios 32
#define DT_N_S_soc_S_gpio_48028100_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_48028100_P_status "okay"
#define DT_N_S_soc_S_gpio_48028100_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_48028100_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_48028100_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_48028100_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_48028100_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_48028100_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_48028100, status, 0) \
	fn(DT_N_S_soc_S_gpio_48028100, status, 1) \
	fn(DT_N_S_soc_S_gpio_48028100, status, 2) \
	fn(DT_N_S_soc_S_gpio_48028100, status, 3)
#define DT_N_S_soc_S_gpio_48028100_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_48028100, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_48028100, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_48028100, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_48028100, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_48028100_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_48028100_P_compatible {"infineon,xmc-gpio"}
#define DT_N_S_soc_S_gpio_48028100_P_compatible_IDX_0 "infineon,xmc-gpio"
#define DT_N_S_soc_S_gpio_48028100_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_48028100_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_48028100, compatible, 0)
#define DT_N_S_soc_S_gpio_48028100_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_48028100, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_48028100_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_48028100_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_48028100_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_48028100_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/buttons/button_0
 *
 * Node identifier: DT_N_S_soc_S_buttons_S_button_0
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_buttons_S_button_0_PATH "/soc/buttons/button_0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_buttons_S_button_0_FULL_NAME "button_0"

/* Node parent (/soc/buttons) identifier: */
#define DT_N_S_soc_S_buttons_S_button_0_PARENT DT_N_S_soc_S_buttons
#define DT_N_S_soc_S_buttons_S_button_0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_buttons_S_button_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_buttons_S_button_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_buttons_S_button_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_buttons_S_button_0_ORD 26

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_buttons_S_button_0_REQUIRES_ORDS \
	24, /* /soc/buttons */ \
	25, /* /soc/gpio@48028100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_buttons_S_button_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_buttons_S_button_0_EXISTS 1
#define DT_N_ALIAS_sw0         DT_N_S_soc_S_buttons_S_button_0
#define DT_N_NODELABEL_button0 DT_N_S_soc_S_buttons_S_button_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_buttons_S_button_0_REG_NUM 0
#define DT_N_S_soc_S_buttons_S_button_0_RANGES_NUM 0
#define DT_N_S_soc_S_buttons_S_button_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_buttons_S_button_0_IRQ_NUM 0
#define DT_N_S_soc_S_buttons_S_button_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_buttons_S_button_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_buttons_S_button_0_P_gpios_IDX_0_EXISTS 1
#define DT_N_S_soc_S_buttons_S_button_0_P_gpios_IDX_0_PH DT_N_S_soc_S_gpio_48028100
#define DT_N_S_soc_S_buttons_S_button_0_P_gpios_IDX_0_VAL_pin 13
#define DT_N_S_soc_S_buttons_S_button_0_P_gpios_IDX_0_VAL_pin_EXISTS 1
#define DT_N_S_soc_S_buttons_S_button_0_P_gpios_IDX_0_VAL_flags 10001
#define DT_N_S_soc_S_buttons_S_button_0_P_gpios_IDX_0_VAL_flags_EXISTS 1
#define DT_N_S_soc_S_buttons_S_button_0_P_gpios_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_buttons_S_button_0, gpios, 0)
#define DT_N_S_soc_S_buttons_S_button_0_P_gpios_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_buttons_S_button_0, gpios, 0, __VA_ARGS__)
#define DT_N_S_soc_S_buttons_S_button_0_P_gpios_LEN 1
#define DT_N_S_soc_S_buttons_S_button_0_P_gpios_EXISTS 1
#define DT_N_S_soc_S_buttons_S_button_0_P_label "User button"
#define DT_N_S_soc_S_buttons_S_button_0_P_label_STRING_TOKEN User_button
#define DT_N_S_soc_S_buttons_S_button_0_P_label_STRING_UPPER_TOKEN USER_BUTTON
#define DT_N_S_soc_S_buttons_S_button_0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_buttons_S_button_0, label, 0) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 1) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 2) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 3) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 4) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 5) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 6) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 7) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 8) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 9) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 10)
#define DT_N_S_soc_S_buttons_S_button_0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_buttons_S_button_0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_buttons_S_button_0, label, 10, __VA_ARGS__)
#define DT_N_S_soc_S_buttons_S_button_0_P_label_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_sram              DT_N_S_memory_20000000
#define DT_CHOSEN_zephyr_sram_EXISTS       1
#define DT_CHOSEN_zephyr_flash             DT_N_S_serial_flash_8000000
#define DT_CHOSEN_zephyr_flash_EXISTS      1
#define DT_CHOSEN_zephyr_console           DT_N_S_soc_S_usic_48020200
#define DT_CHOSEN_zephyr_console_EXISTS    1
#define DT_CHOSEN_zephyr_shell_uart        DT_N_S_soc_S_usic_48020200
#define DT_CHOSEN_zephyr_shell_uart_EXISTS 1

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_kai_umops_xmc45 1
#define DT_COMPAT_HAS_OKAY_infineon_xmc4500 1
#define DT_COMPAT_HAS_OKAY_infineon_xmc4xxx 1
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_arm_v7m_nvic 1
#define DT_COMPAT_HAS_OKAY_arm_armv7m_systick 1
#define DT_COMPAT_HAS_OKAY_infineon_xmc4xxx_uart 1
#define DT_COMPAT_HAS_OKAY_infineon_xmc_clock 1
#define DT_COMPAT_HAS_OKAY_infineon_xmc_ccu4_0_counter 1
#define DT_COMPAT_HAS_OKAY_ti_tmux1208 1
#define DT_COMPAT_HAS_OKAY_infineon_xmc_gpio 1
#define DT_COMPAT_HAS_OKAY_gpio_keys 1
#define DT_COMPAT_HAS_OKAY_infineon_xmc_ethernet 1
#define DT_COMPAT_HAS_OKAY_arm_cortex_m4f 1
#define DT_COMPAT_HAS_OKAY_mmio_sram 1
#define DT_COMPAT_HAS_OKAY_serial_flash 1
#define DT_COMPAT_HAS_OKAY_fixed_clock 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_kai_umops_xmc45_NUM_OKAY 1
#define DT_N_INST_infineon_xmc4500_NUM_OKAY 1
#define DT_N_INST_infineon_xmc4xxx_NUM_OKAY 1
#define DT_N_INST_simple_bus_NUM_OKAY 1
#define DT_N_INST_arm_v7m_nvic_NUM_OKAY 1
#define DT_N_INST_arm_armv7m_systick_NUM_OKAY 1
#define DT_N_INST_infineon_xmc4xxx_uart_NUM_OKAY 2
#define DT_N_INST_infineon_xmc_clock_NUM_OKAY 1
#define DT_N_INST_infineon_xmc_ccu4_0_counter_NUM_OKAY 1
#define DT_N_INST_ti_tmux1208_NUM_OKAY 2
#define DT_N_INST_infineon_xmc_gpio_NUM_OKAY 1
#define DT_N_INST_gpio_keys_NUM_OKAY 1
#define DT_N_INST_infineon_xmc_ethernet_NUM_OKAY 1
#define DT_N_INST_arm_cortex_m4f_NUM_OKAY 1
#define DT_N_INST_mmio_sram_NUM_OKAY 3
#define DT_N_INST_serial_flash_NUM_OKAY 1
#define DT_N_INST_fixed_clock_NUM_OKAY 1
#define DT_FOREACH_OKAY_kai_umops_xmc45(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_kai_umops_xmc45(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_kai_umops_xmc45(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_kai_umops_xmc45(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_infineon_xmc4500(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_infineon_xmc4500(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_infineon_xmc4500(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_infineon_xmc4500(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_infineon_xmc4xxx(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_infineon_xmc4xxx(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_infineon_xmc4xxx(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_infineon_xmc4xxx(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_simple_bus(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_simple_bus(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_simple_bus(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_v7m_nvic(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100)
#define DT_FOREACH_OKAY_VARGS_arm_v7m_nvic(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_v7m_nvic(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_v7m_nvic(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_armv7m_systick(fn) fn(DT_N_S_soc_S_timer_e000e010)
#define DT_FOREACH_OKAY_VARGS_arm_armv7m_systick(fn, ...) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_armv7m_systick(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_armv7m_systick(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_infineon_xmc4xxx_uart(fn) fn(DT_N_S_soc_S_usic_48020000) fn(DT_N_S_soc_S_usic_48020200)
#define DT_FOREACH_OKAY_VARGS_infineon_xmc4xxx_uart(fn, ...) fn(DT_N_S_soc_S_usic_48020000, __VA_ARGS__) fn(DT_N_S_soc_S_usic_48020200, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_infineon_xmc4xxx_uart(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_infineon_xmc4xxx_uart(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_infineon_xmc_clock(fn) fn(DT_N_S_soc_S_clock_50004600)
#define DT_FOREACH_OKAY_VARGS_infineon_xmc_clock(fn, ...) fn(DT_N_S_soc_S_clock_50004600, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_infineon_xmc_clock(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_infineon_xmc_clock(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_infineon_xmc_ccu4_0_counter(fn) fn(DT_N_S_soc_S_counter_4000c100)
#define DT_FOREACH_OKAY_VARGS_infineon_xmc_ccu4_0_counter(fn, ...) fn(DT_N_S_soc_S_counter_4000c100, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_infineon_xmc_ccu4_0_counter(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_infineon_xmc_ccu4_0_counter(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_ti_tmux1208(fn) fn(DT_N_S_soc_S_mux_0) fn(DT_N_S_soc_S_mux_1)
#define DT_FOREACH_OKAY_VARGS_ti_tmux1208(fn, ...) fn(DT_N_S_soc_S_mux_0, __VA_ARGS__) fn(DT_N_S_soc_S_mux_1, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ti_tmux1208(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_ti_tmux1208(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_infineon_xmc_gpio(fn) fn(DT_N_S_soc_S_gpio_48028100)
#define DT_FOREACH_OKAY_VARGS_infineon_xmc_gpio(fn, ...) fn(DT_N_S_soc_S_gpio_48028100, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_infineon_xmc_gpio(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_infineon_xmc_gpio(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_gpio_keys(fn) fn(DT_N_S_soc_S_buttons)
#define DT_FOREACH_OKAY_VARGS_gpio_keys(fn, ...) fn(DT_N_S_soc_S_buttons, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_gpio_keys(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_gpio_keys(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_infineon_xmc_ethernet(fn) fn(DT_N_S_soc_S_ethernet_5000c000)
#define DT_FOREACH_OKAY_VARGS_infineon_xmc_ethernet(fn, ...) fn(DT_N_S_soc_S_ethernet_5000c000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_infineon_xmc_ethernet(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_infineon_xmc_ethernet(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_cortex_m4f(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_FOREACH_OKAY_VARGS_arm_cortex_m4f(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_cortex_m4f(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_cortex_m4f(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_mmio_sram(fn) fn(DT_N_S_memory_10000000) fn(DT_N_S_memory_20000000) fn(DT_N_S_memory_30000000)
#define DT_FOREACH_OKAY_VARGS_mmio_sram(fn, ...) fn(DT_N_S_memory_10000000, __VA_ARGS__) fn(DT_N_S_memory_20000000, __VA_ARGS__) fn(DT_N_S_memory_30000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_mmio_sram(fn) fn(0) fn(1) fn(2)
#define DT_FOREACH_OKAY_INST_VARGS_mmio_sram(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__)
#define DT_FOREACH_OKAY_serial_flash(fn) fn(DT_N_S_serial_flash_8000000)
#define DT_FOREACH_OKAY_VARGS_serial_flash(fn, ...) fn(DT_N_S_serial_flash_8000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_serial_flash(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_serial_flash(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_fixed_clock(fn) fn(DT_N_S_system_clock)
#define DT_FOREACH_OKAY_VARGS_fixed_clock(fn, ...) fn(DT_N_S_system_clock, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_fixed_clock(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_fixed_clock(fn, ...) fn(0, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
